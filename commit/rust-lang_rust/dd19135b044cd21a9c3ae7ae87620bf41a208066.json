{"sha": "dd19135b044cd21a9c3ae7ae87620bf41a208066", "node_id": "C_kwDOAAsO6NoAKGRkMTkxMzViMDQ0Y2QyMWE5YzNhZTdhZTg3NjIwYmY0MWEyMDgwNjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T13:35:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-27T13:35:35Z"}, "message": "Auto merge of #109662 - matthiaskrgr:rollup-tk2g3jf, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108625 (More config.toml.example cleanups)\n - #109418 (Rename 'src/bootstrap/native.rs' to llvm.rs)\n - #109580 (Remove some stale FIXMEs in new solver)\n - #109582 (Refactor: Separate `LocalRef` variant for not-evaluated-yet operands)\n - #109650 (Remove Nilstrieb from review rotation)\n - #109656 (Update cargo)\n - #109658 (Backport 1.68.1 and 1.68.2 release notes to `master`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ffd0b773d4c0e583beae4dfd2f8eca3bc3e35e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd0b773d4c0e583beae4dfd2f8eca3bc3e35e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066", "html_url": "https://github.com/rust-lang/rust/commit/dd19135b044cd21a9c3ae7ae87620bf41a208066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "html_url": "https://github.com/rust-lang/rust/commit/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a"}, {"sha": "c3a428fb1a2d229c7357fe76d66f4558945d68b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a428fb1a2d229c7357fe76d66f4558945d68b7", "html_url": "https://github.com/rust-lang/rust/commit/c3a428fb1a2d229c7357fe76d66f4558945d68b7"}], "stats": {"total": 455, "additions": 245, "deletions": 210}, "files": [{"sha": "e453b8d6891affd3197392f9c854fbe048f14983", "filename": "RELEASES.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -1,3 +1,26 @@\n+Version 1.68.2 (2023-03-28)\n+===========================\n+\n+- [Update the GitHub RSA host key bundled within Cargo](https://github.com/rust-lang/cargo/pull/11883).\n+  The key was [rotated by GitHub](https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/)\n+  on 2023-03-24 after the old one leaked.\n+- [Mark the old GitHub RSA host key as revoked](https://github.com/rust-lang/cargo/pull/11889).\n+  This will prevent Cargo from accepting the leaked key even when trusted by\n+  the system.\n+- [Add support for `@revoked` and a better error message for `@cert-authority` in Cargo's SSH host key verification](https://github.com/rust-lang/cargo/pull/11635)\n+\n+Version 1.68.1 (2023-03-23)\n+===========================\n+\n+- [Fix miscompilation in produced Windows MSVC artifacts](https://github.com/rust-lang/rust/pull/109094)\n+  This was introduced by enabling ThinLTO for the distributed rustc which led\n+  to miscompilations in the resulting binary. Currently this is believed to be\n+  limited to the -Zdylib-lto flag used for rustc compilation, rather than a\n+  general bug in ThinLTO, so only rustc artifacts should be affected.\n+- [Fix --enable-local-rust builds](https://github.com/rust-lang/rust/pull/109111/)\n+- [Treat `$prefix-clang` as `clang` in linker detection code](https://github.com/rust-lang/rust/pull/109156)\n+- [Fix panic in compiler code](https://github.com/rust-lang/rust/pull/108162)\n+\n Version 1.68.0 (2023-03-09)\n ==========================\n "}, {"sha": "2d647f5d7f2eab38cc6127475985814faec8b183", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -397,8 +397,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             PassMode::Cast(cast_ty, _) => {\n                 let op = match self.locals[mir::RETURN_PLACE] {\n-                    LocalRef::Operand(Some(op)) => op,\n-                    LocalRef::Operand(None) => bug!(\"use of return before def\"),\n+                    LocalRef::Operand(op) => op,\n+                    LocalRef::PendingOperand => bug!(\"use of return before def\"),\n                     LocalRef::Place(cg_place) => OperandRef {\n                         val: Ref(cg_place.llval, None, cg_place.align),\n                         layout: cg_place.layout,\n@@ -1673,7 +1673,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             match self.locals[index] {\n                 LocalRef::Place(dest) => dest,\n                 LocalRef::UnsizedPlace(_) => bug!(\"return type must be sized\"),\n-                LocalRef::Operand(None) => {\n+                LocalRef::PendingOperand => {\n                     // Handle temporary places, specifically `Operand` ones, as\n                     // they don't have `alloca`s.\n                     return if fn_ret.is_indirect() {\n@@ -1694,7 +1694,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         ReturnDest::DirectOperand(index)\n                     };\n                 }\n-                LocalRef::Operand(Some(_)) => {\n+                LocalRef::Operand(_) => {\n                     bug!(\"place local already assigned to\");\n                 }\n             }\n@@ -1737,7 +1737,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             IndirectOperand(tmp, index) => {\n                 let op = bx.load_operand(tmp);\n                 tmp.storage_dead(bx);\n-                self.locals[index] = LocalRef::Operand(Some(op));\n+                self.locals[index] = LocalRef::Operand(op);\n                 self.debug_introduce_local(bx, index);\n             }\n             DirectOperand(index) => {\n@@ -1752,7 +1752,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 } else {\n                     OperandRef::from_immediate_or_packed_pair(bx, llval, ret_abi.layout)\n                 };\n-                self.locals[index] = LocalRef::Operand(Some(op));\n+                self.locals[index] = LocalRef::Operand(op);\n                 self.debug_introduce_local(bx, index);\n             }\n         }"}, {"sha": "d15774696a52b10cbb1859af2bce19ddd173c152", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::Place(place) | LocalRef::UnsizedPlace(place) => {\n                     bx.set_var_name(place.llval, name);\n                 }\n-                LocalRef::Operand(Some(operand)) => match operand.val {\n+                LocalRef::Operand(operand) => match operand.val {\n                     OperandValue::Ref(x, ..) | OperandValue::Immediate(x) => {\n                         bx.set_var_name(x, name);\n                     }\n@@ -323,7 +323,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.set_var_name(b, &(name.clone() + \".1\"));\n                     }\n                 },\n-                LocalRef::Operand(None) => {}\n+                LocalRef::PendingOperand => {}\n             }\n         }\n \n@@ -332,9 +332,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n \n         let base = match local_ref {\n-            LocalRef::Operand(None) => return,\n+            LocalRef::PendingOperand => return,\n \n-            LocalRef::Operand(Some(operand)) => {\n+            LocalRef::Operand(operand) => {\n                 // Don't spill operands onto the stack in naked functions.\n                 // See: https://github.com/rust-lang/rust/issues/42779\n                 let attrs = bx.tcx().codegen_fn_attrs(self.instance.def_id());"}, {"sha": "189549953d946a85a67b2cd65c8fe5e635dc7224", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -123,7 +123,10 @@ enum LocalRef<'tcx, V> {\n     /// Every time it is initialized, we have to reallocate the place\n     /// and update the fat pointer. That's the reason why it is indirect.\n     UnsizedPlace(PlaceRef<'tcx, V>),\n-    Operand(Option<OperandRef<'tcx, V>>),\n+    /// The backend [`OperandValue`] has already been generated.\n+    Operand(OperandRef<'tcx, V>),\n+    /// Will be a `Self::Operand` once we get to its definition.\n+    PendingOperand,\n }\n \n impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n@@ -135,9 +138,9 @@ impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n             // Zero-size temporaries aren't always initialized, which\n             // doesn't matter because they don't contain data, but\n             // we need something in the operand.\n-            LocalRef::Operand(Some(OperandRef::new_zst(bx, layout)))\n+            LocalRef::Operand(OperandRef::new_zst(bx, layout))\n         } else {\n-            LocalRef::Operand(None)\n+            LocalRef::PendingOperand\n         }\n     }\n }\n@@ -337,7 +340,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 // We don't have to cast or keep the argument in the alloca.\n                 // FIXME(eddyb): We should figure out how to use llvm.dbg.value instead\n                 // of putting everything in allocas just so we can use llvm.dbg.declare.\n-                let local = |op| LocalRef::Operand(Some(op));\n+                let local = |op| LocalRef::Operand(op);\n                 match arg.mode {\n                     PassMode::Ignore => {\n                         return local(OperandRef::new_zst(bx, arg.layout));"}, {"sha": "b45e7c834e7212070cb7dc0732fe3c011e614df9", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         debug!(\"maybe_codegen_consume_direct(place_ref={:?})\", place_ref);\n \n         match self.locals[place_ref.local] {\n-            LocalRef::Operand(Some(mut o)) => {\n+            LocalRef::Operand(mut o) => {\n                 // Moves out of scalar and scalar pair fields are trivial.\n                 for elem in place_ref.projection.iter() {\n                     match elem {\n@@ -395,7 +395,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                 Some(o)\n             }\n-            LocalRef::Operand(None) => {\n+            LocalRef::PendingOperand => {\n                 bug!(\"use of {:?} before def\", place_ref);\n             }\n             LocalRef::Place(..) | LocalRef::UnsizedPlace(..) => {"}, {"sha": "1633cfef19d2bab2c4b94a4ea53cbda95fe7f644", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -558,6 +558,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     bug!(\"using operand local {:?} as place\", place_ref);\n                 }\n             }\n+            LocalRef::PendingOperand => {\n+                bug!(\"using still-pending operand local {:?} as place\", place_ref);\n+            }\n         };\n         for elem in place_ref.projection[base..].iter() {\n             cg_base = match *elem {"}, {"sha": "d867d6b0cd48ae8e92fb82df6dc44dd080219887", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -545,7 +545,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // ZST are passed as operands and require special handling\n         // because codegen_place() panics if Local is operand.\n         if let Some(index) = place.as_local() {\n-            if let LocalRef::Operand(Some(op)) = self.locals[index] {\n+            if let LocalRef::Operand(op) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.kind() {\n                     let n = n.eval_target_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n                     return bx.cx().const_usize(n);"}, {"sha": "3fd7397ad38651c21ce8f6d93ac6c1ba7abe6955", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -18,12 +18,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         LocalRef::UnsizedPlace(cg_indirect_dest) => {\n                             self.codegen_rvalue_unsized(bx, cg_indirect_dest, rvalue)\n                         }\n-                        LocalRef::Operand(None) => {\n+                        LocalRef::PendingOperand => {\n                             let operand = self.codegen_rvalue_operand(bx, rvalue);\n-                            self.locals[index] = LocalRef::Operand(Some(operand));\n+                            self.locals[index] = LocalRef::Operand(operand);\n                             self.debug_introduce_local(bx, index);\n                         }\n-                        LocalRef::Operand(Some(op)) => {\n+                        LocalRef::Operand(op) => {\n                             if !op.layout.is_zst() {\n                                 span_bug!(\n                                     statement.source_info.span,"}, {"sha": "65e7bcb7f019dc1f9657f071375b20fcd1485034", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -9,8 +9,6 @@\n //! FIXME(@lcnr): Write that section. If you read this before then ask me\n //! about it on zulip.\n \n-// FIXME: uses of `infcx.at` need to enable deferred projection equality once that's implemented.\n-\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_infer::traits::query::NoSolution;\n@@ -105,8 +103,6 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         goal: Goal<'tcx, SubtypePredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n         if goal.predicate.a.is_ty_var() && goal.predicate.b.is_ty_var() {\n-            // FIXME: Do we want to register a subtype relation between these vars?\n-            // That won't actually reflect in the query response, so it seems moot.\n             self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n         } else {\n             self.sub(goal.param_env, goal.predicate.a, goal.predicate.b)?;"}, {"sha": "9773a3eacd6fa3b1a7c515e250bf3a6c433d1079", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -78,8 +78,6 @@ impl<'tcx> SearchGraph<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         goal: CanonicalGoal<'tcx>,\n     ) -> Result<(), QueryResult<'tcx>> {\n-        // FIXME: start by checking the global cache\n-\n         // Look at the provisional cache to check for cycles.\n         let cache = &mut self.provisional_cache;\n         match cache.lookup_table.entry(goal) {"}, {"sha": "5ef83760aed2d1ce6d7b5ce40c8a9868fc86ddc0", "filename": "config.example.toml", "status": "modified", "additions": 91, "deletions": 80, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -1,20 +1,14 @@\n # Sample TOML configuration file for building Rust.\n #\n-# To configure rustbuild, copy this file to the directory from which you will be\n-# running the build, and name it config.toml.\n+# To configure rustbuild, run `./configure` or `./x.py setup`.\n+# See https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#create-a-configtoml for more information.\n #\n # All options are commented out by default in this file, and they're commented\n # out with their default values. The build system by default looks for\n # `config.toml` in the current directory of a build for build configuration, but\n # a custom configuration file can also be specified with `--config` to the build\n # system.\n \n-# Keeps track of the last version of `x.py` used.\n-# If it does not match the version that is currently running,\n-# `x.py` will prompt you to update it and read the changelog.\n-# See `src/bootstrap/CHANGELOG.md` for more information.\n-changelog-seen = 2\n-\n # =============================================================================\n # Global Settings\n # =============================================================================\n@@ -25,6 +19,12 @@ changelog-seen = 2\n # Note that this has no default value (x.py uses the defaults in `config.toml.example`).\n #profile = <none>\n \n+# Keeps track of the last version of `x.py` used.\n+# If `changelog-seen` does not match the version that is currently running,\n+# `x.py` will prompt you to update it and to read the changelog.\n+# See `src/bootstrap/CHANGELOG.md` for more information.\n+changelog-seen = 2\n+\n # =============================================================================\n # Tweaking how LLVM is compiled\n # =============================================================================\n@@ -33,7 +33,7 @@ changelog-seen = 2\n # Whether to use Rust CI built LLVM instead of locally building it.\n #\n # Unless you're developing for a target where Rust CI doesn't build a compiler\n-# toolchain or changing LLVM locally, you probably want to set this to true.\n+# toolchain or changing LLVM locally, you probably want to leave this enabled.\n #\n # All tier 1 targets are currently supported; set this to `\"if-available\"` if\n # you are not sure whether you're on a tier 1 target.\n@@ -42,9 +42,7 @@ changelog-seen = 2\n #\n # Note that many of the LLVM options are not currently supported for\n # downloading. Currently only the \"assertions\" option can be toggled.\n-#\n-# Defaults to \"if-available\" when `channel = \"dev\"` and \"false\" otherwise.\n-#download-ci-llvm = \"if-available\"\n+#download-ci-llvm = if rust.channel == \"dev\" { \"if-available\" } else { false }\n \n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n@@ -59,6 +57,8 @@ changelog-seen = 2\n #release-debuginfo = false\n \n # Indicates whether the LLVM assertions are enabled or not\n+# NOTE: When assertions are disabled, bugs in the integration between rustc and LLVM can lead to\n+# unsoundness (segfaults, etc.) in the rustc process itself, not just in the generated code.\n #assertions = false\n \n # Indicates whether the LLVM testsuite is enabled in the build or not. Does\n@@ -70,10 +70,9 @@ changelog-seen = 2\n # Indicates whether the LLVM plugin is enabled or not\n #plugins = false\n \n-# Indicates whether ccache is used when building LLVM\n+# Indicates whether ccache is used when building LLVM. Set to `true` to use the first `ccache` in\n+# PATH, or set an absolute path to use a specific version.\n #ccache = false\n-# or alternatively ...\n-#ccache = \"/path/to/ccache\"\n \n # When true, link libstdc++ statically into the rustc_llvm.\n # This is useful if you don't want to use the dynamic version of that\n@@ -87,11 +86,8 @@ changelog-seen = 2\n # Note: this is NOT related to Rust compilation targets. However, as Rust is\n # dependent on LLVM for code generation, turning targets off here WILL lead to\n # the resulting rustc being unable to compile for the disabled architectures.\n-# Also worth pointing out is that, in case support for new targets are added to\n-# LLVM, enabling them here doesn't mean Rust is automatically gaining said\n-# support. You'll need to write a target specification at least, and most\n-# likely, teach rustc about the C ABI of the target. Get in touch with the\n-# Rust team and file an issue if you need assistance in porting!\n+#\n+# To add support for new targets, see https://rustc-dev-guide.rust-lang.org/building/new-target.html.\n #targets = \"AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n@@ -104,19 +100,18 @@ changelog-seen = 2\n # This can be useful when building LLVM with debug info, which significantly\n # increases the size of binaries and consequently the memory required by\n # each linker process.\n-# If absent or 0, linker invocations are treated like any other job and\n+# If set to 0, linker invocations are treated like any other job and\n # controlled by rustbuild's -j parameter.\n #link-jobs = 0\n \n-# When invoking `llvm-config` this configures whether the `--shared` argument is\n-# passed to prefer linking to shared libraries.\n-# NOTE: `thin-lto = true` requires this to be `true` and will give an error otherwise.\n-#link-shared = false\n+# Whether to build LLVM as a dynamically linked library (as opposed to statically linked).\n+# Under the hood, this passes `--shared` to llvm-config.\n+# NOTE: To avoid performing LTO multiple times, we suggest setting this to `true` when `thin-lto` is enabled.\n+#link-shared = llvm.thin-lto\n \n # When building llvm, this configures what is being appended to the version.\n-# The default is \"-rust-$version-$channel\", except for dev channel where rustc\n-# version number is omitted. To use LLVM version as is, provide an empty string.\n-#version-suffix = \"-rust-dev\"\n+# To use LLVM version as is, provide an empty string.\n+#version-suffix = if rust.channel == \"dev\" { \"-rust-dev\" } else { \"-rust-$version-$channel\" }\n \n # On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl.\n@@ -178,47 +173,58 @@ changelog-seen = 2\n # The default stage to use for the `bench` subcommand\n #bench-stage = 2\n \n-# Build triple for the original snapshot compiler. This must be a compiler that\n-# nightlies are already produced for. The current platform must be able to run\n-# binaries of this build triple and the nightly will be used to bootstrap the\n-# first compiler.\n+# Build triple for the pre-compiled snapshot compiler. If `rustc` is set, this must match its host\n+# triple (see `rustc --version --verbose`; cross-compiling the rust build system itself is NOT\n+# supported). If `rustc` is unset, this must be a platform with pre-compiled host tools\n+# (https://doc.rust-lang.org/nightly/rustc/platform-support.html). The current platform must be\n+# able to run binaries of this build triple.\n #\n-# Defaults to platform where `x.py` is run.\n+# If `rustc` is present in path, this defaults to the host it was compiled for.\n+# Otherwise, `x.py` will try to infer it from the output of `uname`.\n+# If `uname` is not found in PATH, we assume this is `x86_64-pc-windows-msvc`.\n+# This may be changed in the future.\n #build = \"x86_64-unknown-linux-gnu\" (as an example)\n \n-# Which triples to produce a compiler toolchain for. Each of these triples will\n-# be bootstrapped from the build triple themselves.\n+# Which triples to produce a compiler toolchain for. Each of these triples will be bootstrapped from\n+# the build triple themselves. In other words, this is the list of triples for which to build a\n+# compiler that can RUN on that triple.\n #\n-# Defaults to just the build triple.\n-#host = [\"x86_64-unknown-linux-gnu\"] (as an example)\n+# Defaults to just the `build` triple.\n+#host = [build.build] (list of triples)\n \n-# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of\n-# these triples will be bootstrapped from the build triple themselves.\n+# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of these triples will\n+# be bootstrapped from the build triple themselves. In other words, this is the list of triples for\n+# which to build a library that can CROSS-COMPILE to that triple.\n #\n # Defaults to `host`. If you set this explicitly, you likely want to add all\n # host triples to this list as well in order for those host toolchains to be\n # able to compile programs for their native target.\n-#target = [\"x86_64-unknown-linux-gnu\"] (as an example)\n+#target = build.host (list of triples)\n \n-# Use this directory to store build artifacts.\n-# You can use \"$ROOT\" to indicate the root of the git repository.\n+# Use this directory to store build artifacts. Paths are relative to the current directory, not to\n+# the root of the repository.\n #build-dir = \"build\"\n \n # Instead of downloading the src/stage0.json version of Cargo specified, use\n # this Cargo binary instead to build all Rust code\n+# If you set this, you likely want to set `rustc` as well.\n #cargo = \"/path/to/cargo\"\n \n # Instead of downloading the src/stage0.json version of the compiler\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n+# If you set this, you likely want to set `cargo` as well.\n #rustc = \"/path/to/rustc\"\n \n-# Instead of download the src/stage0.json version of rustfmt specified,\n+# Instead of downloading the src/stage0.json version of rustfmt specified,\n # use this rustfmt binary instead as the stage0 snapshot rustfmt.\n #rustfmt = \"/path/to/rustfmt\"\n \n-# Flag to specify whether any documentation is built. If false, rustdoc and\n+# Whether to build documentation by default. If false, rustdoc and\n # friends will still be compiled but they will not be used to generate any\n # documentation.\n+#\n+# You can still build documentation when this is disabled by explicitly passing paths,\n+# e.g. `x doc library`.\n #docs = true\n \n # Flag to specify whether CSS, JavaScript, and HTML are minified when\n@@ -229,8 +235,8 @@ changelog-seen = 2\n # Flag to specify whether private items should be included in the library docs.\n #library-docs-private-items = false\n \n-# Indicate whether the compiler should be documented in addition to the standard\n-# library and facade crates.\n+# Indicate whether to build compiler documentation by default.\n+# You can still build documentation when this is disabled by explicitly passing a path: `x doc compiler`.\n #compiler-docs = false\n \n # Indicate whether git submodules are managed and updated automatically.\n@@ -247,14 +253,14 @@ changelog-seen = 2\n # Python interpreter to use for various tasks throughout the build, notably\n # rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\n #\n-# Defaults to the Python interpreter used to execute x.py\n+# Defaults to the Python interpreter used to execute x.py.\n #python = \"python\"\n \n # The path to the REUSE executable to use. Note that REUSE is not required in\n # most cases, as our tooling relies on a cached (and shrinked) copy of the\n # REUSE output present in the git repository and in our source tarballs.\n #\n-# REUSE is only needed if your changes caused the overral licensing of the\n+# REUSE is only needed if your changes caused the overall licensing of the\n # repository to change, and the cached copy has to be regenerated.\n #\n # Defaults to the \"reuse\" command in the system path.\n@@ -264,14 +270,19 @@ changelog-seen = 2\n # set that all the Cargo.toml files create, instead of updating it.\n #locked-deps = false\n \n-# Indicate whether the vendored sources are used for Rust dependencies or not\n+# Indicate whether the vendored sources are used for Rust dependencies or not.\n+#\n+# Vendoring requires additional setup. We recommend using the pre-generated source tarballs if you\n+# want to use vendoring. See\n+# https://forge.rust-lang.org/infra/other-installation-methods.html#source-code.\n #vendor = false\n \n # Typically the build system will build the Rust compiler twice. The second\n # compiler, however, will simply use its own libraries to link against. If you\n # would rather to perform a full bootstrap, compiling the compiler three times,\n-# then you can set this option to true. You shouldn't ever need to set this\n-# option to true.\n+# then you can set this option to true.\n+#\n+# This is only useful for verifying that rustc generates reproducible builds.\n #full-bootstrap = false\n \n # Enable a build of the extended Rust tool set which is not only the compiler\n@@ -300,7 +311,7 @@ changelog-seen = 2\n #    \"rust-demangler\",  # if profiler = true\n #]\n \n-# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n+# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose, 3 == print environment variables on each rustc invocation\n #verbose = 0\n \n # Build the sanitizer runtimes\n@@ -320,11 +331,12 @@ changelog-seen = 2\n \n # Arguments passed to the `./configure` script, used during distcheck. You\n # probably won't fill this in but rather it's filled in by the `./configure`\n-# script.\n+# script. Useful for debugging.\n #configure-args = []\n \n # Indicates that a local rebuild is occurring instead of a full bootstrap,\n # essentially skipping stage0 as the local compiler is recompiling itself again.\n+# Useful for modifying only the stage2 compiler without having to pass `--keep-stage 0` each time.\n #local-rebuild = false\n \n # Print out how long each rustbuild step took (mostly intended for CI and\n@@ -354,10 +366,10 @@ changelog-seen = 2\n # =============================================================================\n [install]\n \n-# Instead of installing to /usr/local, install to this path instead.\n+# Where to install the generated toolchain. Must be an absolute path.\n #prefix = \"/usr/local\"\n \n-# Where to install system configuration files\n+# Where to install system configuration files.\n # If this is a relative path, it will get installed in `prefix` above\n #sysconfdir = \"/etc\"\n \n@@ -411,9 +423,10 @@ changelog-seen = 2\n #debug = false\n \n # Whether to download the stage 1 and 2 compilers from CI.\n-# This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n+# This is mostly useful for tools; if you have changes to `compiler/` or `library/` they will be ignored.\n #\n-# You can set this to \"if-unchanged\" to only download if `compiler/` has not been modified.\n+# Set this to \"if-unchanged\" to only download if the compiler and standard library have not been modified.\n+# Set this to `true` to download unconditionally (useful if e.g. you are only changing doc-comments).\n #download-rustc = false\n \n # Number of codegen units to use for each compiler invocation. A value of 0\n@@ -429,10 +442,8 @@ changelog-seen = 2\n # See https://github.com/rust-lang/rust/issues/83600.\n #codegen-units-std = codegen-units\n \n-# Whether or not debug assertions are enabled for the compiler and standard\n-# library. Debug assertions control the maximum log level used by rustc. When\n-# enabled calls to `trace!` and `debug!` macros are preserved in the compiled\n-# binary, otherwise they are omitted.\n+# Whether or not debug assertions are enabled for the compiler and standard library.\n+# These can help find bugs at the cost of a small runtime slowdown.\n #\n # Defaults to rust.debug value\n #debug-assertions = rust.debug (boolean)\n@@ -444,13 +455,11 @@ changelog-seen = 2\n #debug-assertions-std = rust.debug-assertions (boolean)\n \n # Whether or not to leave debug! and trace! calls in the rust binary.\n-# Overrides the `debug-assertions` option, if defined.\n #\n # Defaults to rust.debug-assertions value\n #\n-# If you see a message from `tracing` saying\n-# `max_level_info` is enabled and means logging won't be shown,\n-# set this value to `true`.\n+# If you see a message from `tracing` saying \"some trace filter directives would enable traces that\n+# are disabled statically\" because `max_level_info` is enabled, set this value to `true`.\n #debug-logging = rust.debug-assertions (boolean)\n \n # Whether or not overflow checks are enabled for the compiler and standard\n@@ -477,18 +486,16 @@ changelog-seen = 2\n #\n # Note that debuginfo-level = 2 generates several gigabytes of debuginfo\n # and will slow down the linking process significantly.\n-#\n-# Defaults to 1 if debug is true\n-#debuginfo-level = 0\n+#debuginfo-level = if rust.debug { 1 } else { 0 }\n \n # Debuginfo level for the compiler.\n-#debuginfo-level-rustc = debuginfo-level\n+#debuginfo-level-rustc = rust.debuginfo-level\n \n # Debuginfo level for the standard library.\n-#debuginfo-level-std = debuginfo-level\n+#debuginfo-level-std = rust.debuginfo-level\n \n # Debuginfo level for the tools.\n-#debuginfo-level-tools = debuginfo-level\n+#debuginfo-level-tools = rust.debuginfo-level\n \n # Debuginfo level for the test suites run with compiletest.\n # FIXME(#61117): Some tests fail when this option is enabled.\n@@ -520,6 +527,7 @@ changelog-seen = 2\n \n # Build a multi-threaded rustc\n # FIXME(#75760): Some UI tests fail when this option is enabled.\n+# NOTE: This option is NOT SUPPORTED. See #48685.\n #parallel-compiler = false\n \n # The default linker that will be hard-coded into the generated\n@@ -546,7 +554,7 @@ changelog-seen = 2\n # upstream Rust you need to set this to \"\". However, note that if you are not\n # actually compatible -- for example if you've backported patches that change\n # behavior -- this may lead to miscompilations or other bugs.\n-#description = <none> (string)\n+#description = \"\"\n \n # The root location of the musl installation directory. The library directory\n # will also need to contain libunwind.a for an unwinding implementation. Note\n@@ -575,14 +583,16 @@ changelog-seen = 2\n \n # Flag indicating whether git info will be retrieved from .git automatically.\n # Having the git information can cause a lot of rebuilds during development.\n-# Note: If this attribute is not explicitly set (e.g. if left commented out) it\n-# will default to true if channel = \"dev\", but will default to false otherwise.\n-#ignore-git = if channel == \"dev\" { true } else { false }\n+#\n+# FIXME(#76720): this can causes bugs if different compilers reuse the same metadata cache.\n+#ignore-git = if rust.channel == \"dev\" { true } else { false }\n \n-# When creating source tarballs whether or not to create a source tarball.\n+# Whether to create a source tarball by default when running `x dist`.\n+#\n+# You can still build a source tarball when this is disabled by explicitly passing `x dist rustc-src`.\n #dist-src = true\n \n-# After building or testing extended tools (e.g. clippy and rustfmt), append the\n+# After building or testing an optional component (e.g. the nomicon or reference), append the\n # result (broken, compiling, testing) into this JSON file.\n #save-toolstates = <none> (path)\n \n@@ -624,11 +634,12 @@ changelog-seen = 2\n # will make code compile faster at the expense of lower runtime performance.\n #thin-lto-import-instr-limit = if incremental { 10 } else { LLVM default (currently 100) }\n \n-# Map debuginfo paths to `/rust/$sha/...`, generally only set for releases\n+# Map debuginfo paths to `/rust/$sha/...`.\n+# Useful for reproducible builds. Generally only set for releases\n #remap-debuginfo = false\n \n-# Link the compiler against `jemalloc`, where on Linux and OSX it should\n-# override the default allocator for rustc and LLVM.\n+# Link the compiler and LLVM against `jemalloc` instead of the default libc allocator.\n+# This option is only tested on Linux and OSX.\n #jemalloc = false\n \n # Run tests in various test suites with the \"nll compare mode\" in addition to"}, {"sha": "4d528a767e43f1b87b2d2181316e5ea00f358a5e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -16,7 +16,7 @@ use crate::config::{SplitDebuginfo, TargetSelection};\n use crate::doc;\n use crate::flags::{Color, Subcommand};\n use crate::install;\n-use crate::native;\n+use crate::llvm;\n use crate::run;\n use crate::setup;\n use crate::test;\n@@ -636,13 +636,13 @@ impl<'a> Builder<'a> {\n                 tool::Rustdoc,\n                 tool::Clippy,\n                 tool::CargoClippy,\n-                native::Llvm,\n-                native::Sanitizers,\n+                llvm::Llvm,\n+                llvm::Sanitizers,\n                 tool::Rustfmt,\n                 tool::Miri,\n                 tool::CargoMiri,\n-                native::Lld,\n-                native::CrtBeginEnd\n+                llvm::Lld,\n+                llvm::CrtBeginEnd\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n@@ -1101,7 +1101,7 @@ impl<'a> Builder<'a> {\n     /// check build or dry-run, where there's no need to build all of LLVM.\n     fn llvm_config(&self, target: TargetSelection) -> Option<PathBuf> {\n         if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run() {\n-            let native::LlvmResult { llvm_config, .. } = self.ensure(native::Llvm { target });\n+            let llvm::LlvmResult { llvm_config, .. } = self.ensure(llvm::Llvm { target });\n             if llvm_config.is_file() {\n                 return Some(llvm_config);\n             }\n@@ -1227,7 +1227,7 @@ impl<'a> Builder<'a> {\n             // rustc_llvm. But if LLVM is stale, that'll be a tiny amount\n             // of work comparatively, and we'd likely need to rebuild it anyway,\n             // so that's okay.\n-            if crate::native::prebuilt_llvm_config(self, target).is_err() {\n+            if crate::llvm::prebuilt_llvm_config(self, target).is_err() {\n                 cargo.env(\"RUST_CHECK\", \"1\");\n             }\n         }"}, {"sha": "67bd573a855ca37cfbd438170f7348ff520f8cfd", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -24,7 +24,7 @@ use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::config::{LlvmLibunwind, RustcLto, TargetSelection};\n use crate::dist;\n-use crate::native;\n+use crate::llvm;\n use crate::tool::SourceType;\n use crate::util::get_clang_cl_resource_dir;\n use crate::util::{exe, is_debug_info, is_dylib, output, symlink_dir, t, up_to_date};\n@@ -191,7 +191,7 @@ fn copy_and_stamp(\n }\n \n fn copy_llvm_libunwind(builder: &Builder<'_>, target: TargetSelection, libdir: &Path) -> PathBuf {\n-    let libunwind_path = builder.ensure(native::Libunwind { target });\n+    let libunwind_path = builder.ensure(llvm::Libunwind { target });\n     let libunwind_source = libunwind_path.join(\"libunwind.a\");\n     let libunwind_target = libdir.join(\"libunwind.a\");\n     builder.copy(&libunwind_source, &libunwind_target);\n@@ -266,7 +266,7 @@ fn copy_self_contained_objects(\n                 DependencyType::TargetSelfContained,\n             );\n         }\n-        let crt_path = builder.ensure(native::CrtBeginEnd { target });\n+        let crt_path = builder.ensure(llvm::CrtBeginEnd { target });\n         for &obj in &[\"crtbegin.o\", \"crtbeginS.o\", \"crtend.o\", \"crtendS.o\"] {\n             let src = crt_path.join(obj);\n             let target = libdir_self_contained.join(obj);\n@@ -474,7 +474,7 @@ fn copy_sanitizers(\n     compiler: &Compiler,\n     target: TargetSelection,\n ) -> Vec<PathBuf> {\n-    let runtimes: Vec<native::SanitizerRuntime> = builder.ensure(native::Sanitizers { target });\n+    let runtimes: Vec<llvm::SanitizerRuntime> = builder.ensure(llvm::Sanitizers { target });\n \n     if builder.config.dry_run() {\n         return Vec::new();\n@@ -876,12 +876,12 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     // busting caches (e.g. like #71152).\n     if builder.config.llvm_enabled()\n         && (builder.kind != Kind::Check\n-            || crate::native::prebuilt_llvm_config(builder, target).is_ok())\n+            || crate::llvm::prebuilt_llvm_config(builder, target).is_ok())\n     {\n         if builder.is_rust_llvm(target) {\n             cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n         }\n-        let native::LlvmResult { llvm_config, .. } = builder.ensure(native::Llvm { target });\n+        let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n         cargo.env(\"LLVM_CONFIG\", &llvm_config);\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n@@ -1359,7 +1359,7 @@ impl Step for Assemble {\n         }\n \n         let lld_install = if builder.config.lld_enabled {\n-            Some(builder.ensure(native::Lld { target: target_compiler.host }))\n+            Some(builder.ensure(llvm::Lld { target: target_compiler.host }))\n         } else {\n             None\n         };\n@@ -1423,8 +1423,8 @@ impl Step for Assemble {\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {\n-            let native::LlvmResult { llvm_config, .. } =\n-                builder.ensure(native::Llvm { target: target_compiler.host });\n+            let llvm::LlvmResult { llvm_config, .. } =\n+                builder.ensure(llvm::Llvm { target: target_compiler.host });\n             if !builder.config.dry_run() {\n                 let llvm_bin_dir = output(Command::new(llvm_config).arg(\"--bindir\"));\n                 let llvm_bin_dir = Path::new(llvm_bin_dir.trim());"}, {"sha": "0eba18c3a63cc3ef2e9537afc085c4b53c9975ee", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -1207,11 +1207,11 @@ impl Config {\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n-                    crate::native::is_ci_llvm_available(&config, asserts)\n+                    crate::llvm::is_ci_llvm_available(&config, asserts)\n                 }\n                 Some(StringOrBool::Bool(b)) => b,\n                 None => {\n-                    config.channel == \"dev\" && crate::native::is_ci_llvm_available(&config, asserts)\n+                    config.channel == \"dev\" && crate::llvm::is_ci_llvm_available(&config, asserts)\n                 }\n             };\n \n@@ -1254,7 +1254,7 @@ impl Config {\n             }\n         } else {\n             config.llvm_from_ci =\n-                config.channel == \"dev\" && crate::native::is_ci_llvm_available(&config, false);\n+                config.channel == \"dev\" && crate::llvm::is_ci_llvm_available(&config, false);\n         }\n \n         if let Some(t) = toml.target {"}, {"sha": "5cea143e0a7870e4d69b242e74799129c1fcc2f2", "filename": "src/bootstrap/config/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig%2Ftests.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -11,7 +11,7 @@ fn parse(config: &str) -> Config {\n \n #[test]\n fn download_ci_llvm() {\n-    if crate::native::is_ci_llvm_modified(&parse(\"\")) {\n+    if crate::llvm::is_ci_llvm_modified(&parse(\"\")) {\n         eprintln!(\"Detected LLVM as non-available: running in CI and modified LLVM in this change\");\n         return;\n     }"}, {"sha": "25d9e649f23c71b1e412ad6e5aaf666005a60245", "filename": "src/bootstrap/defaults/config.user.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -8,9 +8,11 @@ doc-stage = 2\n # When compiling from source, you usually want all tools.\n extended = true\n \n+# Most users installing from source want to build all parts of the project from source.\n [llvm]\n-# Most users installing from source want to build all parts of the project from source, not just rustc itself.\n download-ci-llvm = false\n+[rust]\n+download-rustc = false\n \n [dist]\n # Use better compression when preparing tarballs."}, {"sha": "2ce54d9a3b43fe38cd942b3fe7fe95dd1329557f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -27,7 +27,7 @@ use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::doc::DocumentationFormat;\n-use crate::native;\n+use crate::llvm;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, output, t, timeit};\n@@ -1965,8 +1965,8 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n         !builder.config.dry_run()\n-    } else if let Ok(native::LlvmResult { llvm_config, .. }) =\n-        native::prebuilt_llvm_config(builder, target)\n+    } else if let Ok(llvm::LlvmResult { llvm_config, .. }) =\n+        llvm::prebuilt_llvm_config(builder, target)\n     {\n         let mut cmd = Command::new(llvm_config);\n         cmd.arg(\"--libfiles\");\n@@ -2154,7 +2154,7 @@ impl Step for LlvmTools {\n             }\n         }\n \n-        builder.ensure(crate::native::Llvm { target });\n+        builder.ensure(crate::llvm::Llvm { target });\n \n         let mut tarball = Tarball::new(builder, \"llvm-tools\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n@@ -2213,10 +2213,10 @@ impl Step for RustDev {\n         let mut tarball = Tarball::new(builder, \"rust-dev\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n \n-        builder.ensure(crate::native::Llvm { target });\n+        builder.ensure(crate::llvm::Llvm { target });\n \n         // We want to package `lld` to use it with `download-ci-llvm`.\n-        builder.ensure(crate::native::Lld { target });\n+        builder.ensure(crate::llvm::Lld { target });\n \n         let src_bindir = builder.llvm_out(target).join(\"bin\");\n         // If updating this list, you likely want to change"}, {"sha": "8fbc034965a6c9c19a8cbb4675956175c7b7b601", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -12,7 +12,7 @@ use xz2::bufread::XzDecoder;\n \n use crate::{\n     config::RustfmtMetadata,\n-    native::detect_llvm_sha,\n+    llvm::detect_llvm_sha,\n     t,\n     util::{check_run, exe, program_out_of_date, try_run},\n     Config,"}, {"sha": "20b92b294fec5f6dc17cb5e04d2791cfc0f58a49", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -53,8 +53,8 @@ mod download;\n mod flags;\n mod format;\n mod install;\n+mod llvm;\n mod metadata;\n-mod native;\n mod render_tests;\n mod run;\n mod sanity;"}, {"sha": "de06f8ca8c0bb32543f1584b2d699a61942c00f5", "filename": "src/bootstrap/llvm.rs", "status": "renamed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -869,71 +869,6 @@ impl Step for Lld {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct TestHelpers {\n-    pub target: TargetSelection,\n-}\n-\n-impl Step for TestHelpers {\n-    type Output = ();\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"tests/auxiliary/rust_test_helpers.c\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(TestHelpers { target: run.target })\n-    }\n-\n-    /// Compiles the `rust_test_helpers.c` library which we used in various\n-    /// `run-pass` tests for ABI testing.\n-    fn run(self, builder: &Builder<'_>) {\n-        if builder.config.dry_run() {\n-            return;\n-        }\n-        // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n-        // toolchain. However, some x86_64 ELF objects can be linked\n-        // without issues. Use this hack to compile the test helpers.\n-        let target = if self.target == \"x86_64-fortanix-unknown-sgx\" {\n-            TargetSelection::from_user(\"x86_64-unknown-linux-gnu\")\n-        } else {\n-            self.target\n-        };\n-        let dst = builder.test_helpers_out(target);\n-        let src = builder.src.join(\"tests/auxiliary/rust_test_helpers.c\");\n-        if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n-            return;\n-        }\n-\n-        builder.info(\"Building test helpers\");\n-        t!(fs::create_dir_all(&dst));\n-        let mut cfg = cc::Build::new();\n-        // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013\n-        if target.contains(\"emscripten\") {\n-            cfg.pic(false);\n-        }\n-\n-        // We may have found various cross-compilers a little differently due to our\n-        // extra configuration, so inform cc of these compilers. Note, though, that\n-        // on MSVC we still need cc's detection of env vars (ugh).\n-        if !target.contains(\"msvc\") {\n-            if let Some(ar) = builder.ar(target) {\n-                cfg.archiver(ar);\n-            }\n-            cfg.compiler(builder.cc(target));\n-        }\n-        cfg.cargo_metadata(false)\n-            .out_dir(&dst)\n-            .target(&target.triple)\n-            .host(&builder.config.build.triple)\n-            .opt_level(0)\n-            .warnings(false)\n-            .debug(false)\n-            .file(builder.src.join(\"tests/auxiliary/rust_test_helpers.c\"))\n-            .compile(\"rust_test_helpers\");\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Sanitizers {\n     pub target: TargetSelection,", "previous_filename": "src/bootstrap/native.rs"}, {"sha": "92a7603a9df6b83497fc05ccce488fce2d6e9fe2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -19,11 +19,11 @@ use crate::config::TargetSelection;\n use crate::dist;\n use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n-use crate::native;\n+use crate::llvm;\n use crate::render_tests::add_flags_and_try_run_tests;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n-use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n+use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t, up_to_date};\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n@@ -1434,11 +1434,11 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         builder.ensure(compile::Std::new(compiler, compiler.host));\n \n         // Also provide `rust_test_helpers` for the host.\n-        builder.ensure(native::TestHelpers { target: compiler.host });\n+        builder.ensure(TestHelpers { target: compiler.host });\n \n         // As well as the target, except for plain wasm32, which can't build it\n         if !target.contains(\"wasm\") || target.contains(\"emscripten\") {\n-            builder.ensure(native::TestHelpers { target });\n+            builder.ensure(TestHelpers { target });\n         }\n \n         builder.ensure(RemoteCopyLibs { compiler, target });\n@@ -1625,8 +1625,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         let mut llvm_components_passed = false;\n         let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n-            let native::LlvmResult { llvm_config, .. } =\n-                builder.ensure(native::Llvm { target: builder.config.build });\n+            let llvm::LlvmResult { llvm_config, .. } =\n+                builder.ensure(llvm::Llvm { target: builder.config.build });\n             if !builder.config.dry_run() {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n@@ -1664,7 +1664,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 // If LLD is available, add it to the PATH\n                 if builder.config.lld_enabled {\n                     let lld_install_root =\n-                        builder.ensure(native::Lld { target: builder.config.build });\n+                        builder.ensure(llvm::Lld { target: builder.config.build });\n \n                     let lld_bin_path = lld_install_root.join(\"bin\");\n \n@@ -2747,3 +2747,68 @@ impl Step for RustInstaller {\n         run.builder.ensure(Self);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct TestHelpers {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for TestHelpers {\n+    type Output = ();\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"tests/auxiliary/rust_test_helpers.c\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(TestHelpers { target: run.target })\n+    }\n+\n+    /// Compiles the `rust_test_helpers.c` library which we used in various\n+    /// `run-pass` tests for ABI testing.\n+    fn run(self, builder: &Builder<'_>) {\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+        // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n+        // toolchain. However, some x86_64 ELF objects can be linked\n+        // without issues. Use this hack to compile the test helpers.\n+        let target = if self.target == \"x86_64-fortanix-unknown-sgx\" {\n+            TargetSelection::from_user(\"x86_64-unknown-linux-gnu\")\n+        } else {\n+            self.target\n+        };\n+        let dst = builder.test_helpers_out(target);\n+        let src = builder.src.join(\"tests/auxiliary/rust_test_helpers.c\");\n+        if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n+            return;\n+        }\n+\n+        builder.info(\"Building test helpers\");\n+        t!(fs::create_dir_all(&dst));\n+        let mut cfg = cc::Build::new();\n+        // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013\n+        if target.contains(\"emscripten\") {\n+            cfg.pic(false);\n+        }\n+\n+        // We may have found various cross-compilers a little differently due to our\n+        // extra configuration, so inform cc of these compilers. Note, though, that\n+        // on MSVC we still need cc's detection of env vars (ugh).\n+        if !target.contains(\"msvc\") {\n+            if let Some(ar) = builder.ar(target) {\n+                cfg.archiver(ar);\n+            }\n+            cfg.compiler(builder.cc(target));\n+        }\n+        cfg.cargo_metadata(false)\n+            .out_dir(&dst)\n+            .target(&target.triple)\n+            .host(&builder.config.build.triple)\n+            .opt_level(0)\n+            .warnings(false)\n+            .debug(false)\n+            .file(builder.src.join(\"tests/auxiliary/rust_test_helpers.c\"))\n+            .compile(\"rust_test_helpers\");\n+    }\n+}"}, {"sha": "7cd5e88f6a28574f3db8f80be2e0d82bdded69cb", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -727,7 +727,7 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     metrics = load_last_metrics(pipeline.metrics_path())\n     if metrics is None:\n         return\n-    llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::native::Llvm\"))\n+    llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::llvm::Llvm\"))\n     assert len(llvm_steps) > 0\n     llvm_duration = sum(step.duration for step in llvm_steps)\n "}, {"sha": "145219a9f089f8b57c09f40525374fbade1e34ae", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -1 +1 @@\n-Subproject commit 15d090969743630bff549a1b068bcaa8174e5ee3\n+Subproject commit 145219a9f089f8b57c09f40525374fbade1e34ae"}, {"sha": "c86c1613fa9cece1b22196d45e284a4ea8dfa7b3", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd19135b044cd21a9c3ae7ae87620bf41a208066/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd19135b044cd21a9c3ae7ae87620bf41a208066/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=dd19135b044cd21a9c3ae7ae87620bf41a208066", "patch": "@@ -498,7 +498,6 @@ compiler-team-contributors = [\n     \"@eholk\",\n     \"@jackh726\",\n     \"@TaKO8Ki\",\n-    \"@Nilstrieb\",\n     \"@WaffleLapkin\",\n     \"@b-naber\",\n ]"}]}