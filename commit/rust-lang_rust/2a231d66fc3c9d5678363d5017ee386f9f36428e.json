{"sha": "2a231d66fc3c9d5678363d5017ee386f9f36428e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjMxZDY2ZmMzYzlkNTY3ODM2M2Q1MDE3ZWUzODZmOWYzNjQyOGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-05T02:31:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-05T21:27:26Z"}, "message": "check bounds when using offset intrinsic or MIR op", "tree": {"sha": "a927b849f38d402d4f1e657557ea1e284a90bd99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a927b849f38d402d4f1e657557ea1e284a90bd99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a231d66fc3c9d5678363d5017ee386f9f36428e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a231d66fc3c9d5678363d5017ee386f9f36428e", "html_url": "https://github.com/rust-lang/rust/commit/2a231d66fc3c9d5678363d5017ee386f9f36428e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a231d66fc3c9d5678363d5017ee386f9f36428e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39e015163f4a1ddfa615cbb0f9a27999be2c20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39e015163f4a1ddfa615cbb0f9a27999be2c20b", "html_url": "https://github.com/rust-lang/rust/commit/f39e015163f4a1ddfa615cbb0f9a27999be2c20b"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "dc7b227b7972ea8d16fa5305ecdea51f4ebf89b9", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -18,7 +18,7 @@ pub enum EvalError<'tcx> {\n     InvalidDiscriminant,\n     PointerOutOfBounds {\n         ptr: Pointer,\n-        size: u64,\n+        access: bool,\n         allocation_size: u64,\n     },\n     ReadPointerAsBytes,\n@@ -150,9 +150,10 @@ impl<'tcx> Error for EvalError<'tcx> {\n impl<'tcx> fmt::Display for EvalError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            EvalError::PointerOutOfBounds { ptr, size, allocation_size } => {\n-                write!(f, \"memory access of {}..{} outside bounds of allocation {} which has size {}\",\n-                       ptr.offset, ptr.offset + size, ptr.alloc_id, allocation_size)\n+            EvalError::PointerOutOfBounds { ptr, access, allocation_size } => {\n+                write!(f, \"{} at offset {}, outside bounds of allocation {} which has size {}\",\n+                       if access { \"memory access\" } else { \"pointer computed\" },\n+                       ptr.offset, ptr.alloc_id, allocation_size)\n             },\n             EvalError::NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n             EvalError::FunctionPointerTyMismatch(sig, got) =>"}, {"sha": "abae18a0ff1f170a74479ecc85f1709de3becbb4", "filename": "src/eval_context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -849,11 +849,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn pointer_offset(&self, ptr: Pointer, pointee_ty: Ty<'tcx>, offset: i64) -> EvalResult<'tcx, Pointer> {\n+        if offset == 0 {\n+            // rustc relies on Offset-by-0 to be well-defined even for \"bad\" pointers like Unique::empty().\n+            return Ok(ptr);\n+        }\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n-        // FIXME: Check out-of-bounds\n         return if let Some(offset) = offset.checked_mul(pointee_size) {\n-            ptr.signed_offset(offset)\n+            let ptr = ptr.signed_offset(offset)?;\n+            self.memory.check_bounds(ptr, false)?;\n+            Ok(ptr)\n         } else {\n             Err(EvalError::OverflowingPointerMath)\n         }"}, {"sha": "24ac27f8fa32492f7a726b3dbfda1d6250fa4ec1", "filename": "src/memory.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -120,7 +120,7 @@ pub type TlsKey = usize;\n \n #[derive(Copy, Clone, Debug)]\n pub struct TlsEntry<'tcx> {\n-    data: Pointer, // will eventually become a map from thread IDs to pointers\n+    data: Pointer, // Will eventually become a map from thread IDs to pointers, if we ever support more than one thread.\n     dtor: Option<ty::Instance<'tcx>>,\n }\n \n@@ -173,8 +173,8 @@ pub struct Memory<'a, 'tcx> {\n     /// A cache for basic byte allocations keyed by their contents. This is used to deduplicate\n     /// allocations for string and bytestring literals.\n     literal_alloc_cache: HashMap<Vec<u8>, AllocId>,\n-    \n-    /// pthreads-style Thread-local storage.  We only have one thread, so this is just a map from TLS keys (indices into the vector) to the pointer stored there.\n+\n+    /// pthreads-style thread-local storage.\n     thread_local: HashMap<TlsKey, TlsEntry<'tcx>>,\n \n     /// The Key to use for the next thread-local allocation.\n@@ -366,6 +366,15 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn check_bounds(&self, ptr: Pointer, access: bool) -> EvalResult<'tcx> {\n+        let alloc = self.get(ptr.alloc_id)?;\n+        let allocation_size = alloc.bytes.len() as u64;\n+        if ptr.offset > allocation_size {\n+            return Err(EvalError::PointerOutOfBounds { ptr, access, allocation_size });\n+        }\n+        Ok(())\n+    }\n+\n     pub(crate) fn mark_packed(&mut self, ptr: Pointer, len: u64) {\n         self.packed.insert(Entry {\n             alloc_id: ptr.alloc_id,\n@@ -586,11 +595,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Ok(&[]);\n         }\n         self.check_align(ptr, align, size)?;\n+        self.check_bounds(ptr.offset(size)?, true)?; // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n         let alloc = self.get(ptr.alloc_id)?;\n-        let allocation_size = alloc.bytes.len() as u64;\n-        if ptr.offset + size > allocation_size {\n-            return Err(EvalError::PointerOutOfBounds { ptr, size, allocation_size });\n-        }\n         assert_eq!(ptr.offset as usize as u64, ptr.offset);\n         assert_eq!(size as usize as u64, size);\n         let offset = ptr.offset as usize;\n@@ -602,11 +608,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Ok(&mut []);\n         }\n         self.check_align(ptr, align, size)?;\n+        self.check_bounds(ptr.offset(size)?, true)?; // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n         let alloc = self.get_mut(ptr.alloc_id)?;\n-        let allocation_size = alloc.bytes.len() as u64;\n-        if ptr.offset + size > allocation_size {\n-            return Err(EvalError::PointerOutOfBounds { ptr, size, allocation_size });\n-        }\n         assert_eq!(ptr.offset as usize as u64, ptr.offset);\n         assert_eq!(size as usize as u64, size);\n         let offset = ptr.offset as usize;"}, {"sha": "8dce7e578626403647b5764d26387798a15420b4", "filename": "tests/compile-fail/out_of_bounds_ptr_1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: pointer computed at offset 5, outside bounds of allocation\n+fn main() {\n+    let v = [0i8; 4];\n+    let x = &v as *const i8;\n+    // The error is inside another function, so we cannot match it by line\n+    let x = unsafe { x.offset(5) };\n+    panic!(\"this should never print: {:?}\", x);\n+}"}, {"sha": "0bb670fd022f72d37f3184fb3d20af3b5cab2ddf", "filename": "tests/compile-fail/out_of_bounds_ptr_2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern: overflowing math on a pointer\n+fn main() {\n+    let v = [0i8; 4];\n+    let x = &v as *const i8;\n+    let x = unsafe { x.offset(-1) };\n+    panic!(\"this should never print: {:?}\", x);\n+}"}, {"sha": "8c56b14bdf221f055cbfe2f82550b1788cfeb90c", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: which has size 2\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d29b22ffb2a6b633c29bc18115a675227b361c7f", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: memory access at offset 6, outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "ebd972a8717527f6348ed02c5028978a473eddc7", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a231d66fc3c9d5678363d5017ee386f9f36428e/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=2a231d66fc3c9d5678363d5017ee386f9f36428e", "patch": "@@ -2,7 +2,5 @@\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;\n-    // One of them is guaranteed to overflow\n-    let _ = unsafe { x.offset(isize::max_value()) };\n     let _ = unsafe { x.offset(isize::min_value()) };\n }"}]}