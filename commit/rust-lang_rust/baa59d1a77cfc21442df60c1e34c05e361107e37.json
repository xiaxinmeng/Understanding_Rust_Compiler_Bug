{"sha": "baa59d1a77cfc21442df60c1e34c05e361107e37", "node_id": "C_kwDOAAsO6NoAKGJhYTU5ZDFhNzdjZmMyMTQ0MmRmNjBjMWUzNGMwNWUzNjExMDdlMzc", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-11-21T11:45:29Z"}, "committer": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-11-21T11:45:29Z"}, "message": "Only declare bindings for if-let guards once per arm", "tree": {"sha": "2a5a8ace2c815357ce4f77ce871f1e496c66a5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5a8ace2c815357ce4f77ce871f1e496c66a5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa59d1a77cfc21442df60c1e34c05e361107e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa59d1a77cfc21442df60c1e34c05e361107e37", "html_url": "https://github.com/rust-lang/rust/commit/baa59d1a77cfc21442df60c1e34c05e361107e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa59d1a77cfc21442df60c1e34c05e361107e37/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911cbf8e46f0f3b044c87fc5cbca922878db757b", "url": "https://api.github.com/repos/rust-lang/rust/commits/911cbf8e46f0f3b044c87fc5cbca922878db757b", "html_url": "https://github.com/rust-lang/rust/commit/911cbf8e46f0f3b044c87fc5cbca922878db757b"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "49d7136a2f1ffd26faff815c99bfbf1467149acd", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=baa59d1a77cfc21442df60c1e34c05e361107e37", "patch": "@@ -1,4 +1,3 @@\n-use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use rustc_middle::middle::region::Scope;\n@@ -231,7 +230,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                         visibility_scope,\n                                         remainder_span,\n                                         pattern,\n-                                        ArmHasGuard(false),\n+                                        None,\n                                         Some((None, initializer_span)),\n                                     );\n                                     this.visit_primary_bindings(\n@@ -308,7 +307,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                             visibility_scope,\n                                             remainder_span,\n                                             pattern,\n-                                            ArmHasGuard(false),\n+                                            None,\n                                             Some((None, initializer_span)),\n                                         );\n                                         this.expr_into_pattern(block, &pattern, init)\n@@ -324,7 +323,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 visibility_scope,\n                                 remainder_span,\n                                 pattern,\n-                                ArmHasGuard(false),\n+                                None,\n                                 None,\n                             );\n                             block.unit()"}, {"sha": "0b9745f7b19a404d15b67f8ae44945b98002c09f", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=baa59d1a77cfc21442df60c1e34c05e361107e37", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Let { expr, ref pat } => {\n                 let scope = this.local_scope();\n                 let (true_block, false_block) = this.in_if_then_scope(scope, expr_span, |this| {\n-                    this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span)\n+                    this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span, true)\n                 });\n \n                 this.cfg.push_assign_constant("}, {"sha": "802704d6ca77da75ff9db4fcf1cb45969eccfdf1", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=baa59d1a77cfc21442df60c1e34c05e361107e37", "patch": "@@ -84,6 +84,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 break_scope,\n                 Some(variable_source_info.scope),\n                 variable_source_info.span,\n+                true,\n             ),\n             _ => {\n                 let temp_scope = temp_scope_override.unwrap_or_else(|| this.local_scope());\n@@ -357,7 +358,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         None,\n                         arm.span,\n                         &arm.pattern,\n-                        ArmHasGuard(arm.guard.is_some()),\n+                        arm.guard.as_ref(),\n                         opt_scrutinee_place,\n                     );\n \n@@ -645,7 +646,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut visibility_scope: Option<SourceScope>,\n         scope_span: Span,\n         pattern: &Pat<'tcx>,\n-        has_guard: ArmHasGuard,\n+        guard: Option<&Guard<'tcx>>,\n         opt_match_place: Option<(Option<&Place<'tcx>>, Span)>,\n     ) -> Option<SourceScope> {\n         self.visit_primary_bindings(\n@@ -667,12 +668,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     var,\n                     ty,\n                     user_ty,\n-                    has_guard,\n+                    ArmHasGuard(guard.is_some()),\n                     opt_match_place.map(|(x, y)| (x.cloned(), y)),\n                     pattern.span,\n                 );\n             },\n         );\n+        if let Some(Guard::IfLet(guard_pat, _)) = guard {\n+            // FIXME: pass a proper `opt_match_place`\n+            self.declare_bindings(visibility_scope, scope_span, guard_pat, None, None);\n+        }\n         visibility_scope\n     }\n \n@@ -1766,6 +1771,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n // Pat binding - used for `let` and function parameters as well.\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n+    /// If the bindings have already been declared, set `declare_bindings` to\n+    /// `false` to avoid duplicated bindings declaration. Used for if-let guards.\n     pub(crate) fn lower_let_expr(\n         &mut self,\n         mut block: BasicBlock,\n@@ -1774,6 +1781,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         else_target: region::Scope,\n         source_scope: Option<SourceScope>,\n         span: Span,\n+        declare_bindings: bool,\n     ) -> BlockAnd<()> {\n         let expr_span = expr.span;\n         let expr_place_builder = unpack!(block = self.lower_scrutinee(block, expr, expr_span));\n@@ -1797,13 +1805,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n         self.break_for_else(otherwise_post_guard_block, else_target, self.source_info(expr_span));\n \n-        self.declare_bindings(\n-            source_scope,\n-            pat.span.to(span),\n-            pat,\n-            ArmHasGuard(false),\n-            opt_expr_place,\n-        );\n+        if declare_bindings {\n+            self.declare_bindings(source_scope, pat.span.to(span), pat, None, opt_expr_place);\n+        }\n \n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n@@ -1984,7 +1988,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];\n                         guard_span = s.span;\n-                        this.lower_let_expr(block, s, pat, match_scope, None, arm.span)\n+                        this.lower_let_expr(block, s, pat, match_scope, None, arm.span, false)\n                     }\n                 });\n "}, {"sha": "0b76122913ebe35899cc52004e3afa55193e60b9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa59d1a77cfc21442df60c1e34c05e361107e37/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=baa59d1a77cfc21442df60c1e34c05e361107e37", "patch": "@@ -924,7 +924,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         scope,\n                         expr.span,\n                         &pat,\n-                        matches::ArmHasGuard(false),\n+                        None,\n                         Some((Some(&place), span)),\n                     );\n                     let place_builder = PlaceBuilder::from(local);"}, {"sha": "a303a0d1fcee3052a2b05133da5e70c540b9a9de", "filename": "src/test/ui/rfc-2294-if-let-guard/run-pass.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/baa59d1a77cfc21442df60c1e34c05e361107e37/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa59d1a77cfc21442df60c1e34c05e361107e37/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs?ref=baa59d1a77cfc21442df60c1e34c05e361107e37", "patch": "@@ -30,4 +30,11 @@ fn main() {\n         Some(x) if let Foo::Qux(y) = qux(x) => assert_eq!(y, 84),\n         _ => panic!(),\n     }\n+\n+    // issue #88015\n+    #[allow(irrefutable_let_patterns)]\n+    match () {\n+        () | () if let x = 42 => assert_eq!(x, 42),\n+        _ => panic!()\n+    }\n }"}]}