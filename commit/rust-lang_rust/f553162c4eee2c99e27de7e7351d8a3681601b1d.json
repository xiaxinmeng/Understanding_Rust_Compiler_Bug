{"sha": "f553162c4eee2c99e27de7e7351d8a3681601b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTMxNjJjNGVlZTJjOTllMjdkZTdlNzM1MWQ4YTM2ODE2MDFiMWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-10T15:48:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T15:48:21Z"}, "message": "Merge #3928\n\n3928: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2267fb0aa4f15d900d7ce8c6bcc4ef976aac8084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2267fb0aa4f15d900d7ce8c6bcc4ef976aac8084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f553162c4eee2c99e27de7e7351d8a3681601b1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekJVFCRBK7hj4Ov3rIwAAdHIIAKDeXjVxOEm8f2H0VV+aoC8D\niFyt6Lzv0IcODFz6iCdtvUerETjpsCfyKeYHvBNvbVKp4XBLSU7zcdjNmNiyTJ4s\n8F/a/cou/vE7ilm8wacJkIkRLYBnIb8NCDzRAOi3GGCGuZTptO4MCo4W+9FcGBbN\naSn8LChr651vDcvuyxHO67fVbC4BCZuZDM6Meb8ajjDw/zFE0O4jnjI6AAbIlY+z\nVOrng3VHYL7D13VgIThI6fQp9Li+l2SCJBeRAHd2kIX0UnkExwu5K3hhI2C8S4ya\nPPU/JW1PDmaXd/k8zUuPYD0KnFTWjmy1dn+/HSnKyDcGmtptlobu/pDuEvEWWk0=\n=5xJd\n-----END PGP SIGNATURE-----\n", "payload": "tree 2267fb0aa4f15d900d7ce8c6bcc4ef976aac8084\nparent fcd609862b8d5b0567bb74895ef75b02912a375d\nparent c476742f47dd905fa366e62f480e3f656c62e66c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586533701 +0000\ncommitter GitHub <noreply@github.com> 1586533701 +0000\n\nMerge #3928\n\n3928: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f553162c4eee2c99e27de7e7351d8a3681601b1d", "html_url": "https://github.com/rust-lang/rust/commit/f553162c4eee2c99e27de7e7351d8a3681601b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f553162c4eee2c99e27de7e7351d8a3681601b1d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcd609862b8d5b0567bb74895ef75b02912a375d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd609862b8d5b0567bb74895ef75b02912a375d", "html_url": "https://github.com/rust-lang/rust/commit/fcd609862b8d5b0567bb74895ef75b02912a375d"}, {"sha": "c476742f47dd905fa366e62f480e3f656c62e66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c476742f47dd905fa366e62f480e3f656c62e66c", "html_url": "https://github.com/rust-lang/rust/commit/c476742f47dd905fa366e62f480e3f656c62e66c"}], "stats": {"total": 23, "additions": 3, "deletions": 20}, "files": [{"sha": "76b7655e68c490d8eaf18cc482857721f0fdb0ce", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f553162c4eee2c99e27de7e7351d8a3681601b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553162c4eee2c99e27de7e7351d8a3681601b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=f553162c4eee2c99e27de7e7351d8a3681601b1d", "patch": "@@ -275,7 +275,7 @@ pub enum SelfParamKind {\n impl ast::SelfParam {\n     pub fn kind(&self) -> SelfParamKind {\n         if self.amp_token().is_some() {\n-            if self.amp_mut_token().is_some() {\n+            if self.mut_token().is_some() {\n                 SelfParamKind::MutRef\n             } else {\n                 SelfParamKind::Ref\n@@ -284,24 +284,6 @@ impl ast::SelfParam {\n             SelfParamKind::Owned\n         }\n     }\n-\n-    /// the \"mut\" in \"mut self\", not the one in \"&mut self\"\n-    pub fn mut_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .take_while(|it| it.kind() != T![&])\n-            .find(|it| it.kind() == T![mut])\n-    }\n-\n-    /// the \"mut\" in \"&mut self\", not the one in \"mut self\"\n-    pub fn amp_mut_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .skip_while(|it| it.kind() != T![&])\n-            .find(|it| it.kind() == T![mut])\n-    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "f1098755b6e7c430c2c728b4ef3cddadca130d9a", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f553162c4eee2c99e27de7e7351d8a3681601b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553162c4eee2c99e27de7e7351d8a3681601b1d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f553162c4eee2c99e27de7e7351d8a3681601b1d", "patch": "@@ -2307,6 +2307,7 @@ impl ast::TypeAscriptionOwner for SelfParam {}\n impl ast::AttrsOwner for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![lifetime])\n     }"}, {"sha": "69cba91684418bae877b227ea6fe4dc472da2076", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f553162c4eee2c99e27de7e7351d8a3681601b1d/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553162c4eee2c99e27de7e7351d8a3681601b1d/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=f553162c4eee2c99e27de7e7351d8a3681601b1d", "patch": "@@ -568,7 +568,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             params: [Param],\n             T![')']\n         }\n-        struct SelfParam: TypeAscriptionOwner, AttrsOwner { T![&], T![lifetime], T![self] }\n+        struct SelfParam: TypeAscriptionOwner, AttrsOwner { T![&], T![mut], T![lifetime], T![self] }\n         struct Param: TypeAscriptionOwner, AttrsOwner {\n             Pat,\n             T![...]"}]}