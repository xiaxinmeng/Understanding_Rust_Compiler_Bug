{"sha": "903033bb03d05b66cbbf79a58fc9989887e35b65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzAzM2JiMDNkMDViNjZjYmJmNzlhNThmYzk5ODk4ODdlMzViNjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T23:21:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T23:40:09Z"}, "message": "handle fixed-length vecs in borrowck categorization", "tree": {"sha": "0a73a4f3ab688d82c196051bb1e1bfd106d96261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a73a4f3ab688d82c196051bb1e1bfd106d96261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903033bb03d05b66cbbf79a58fc9989887e35b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903033bb03d05b66cbbf79a58fc9989887e35b65", "html_url": "https://github.com/rust-lang/rust/commit/903033bb03d05b66cbbf79a58fc9989887e35b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903033bb03d05b66cbbf79a58fc9989887e35b65/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d9dd055d15a631a9fb685eb4c9bc0e6d8ddd64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9dd055d15a631a9fb685eb4c9bc0e6d8ddd64a", "html_url": "https://github.com/rust-lang/rust/commit/6d9dd055d15a631a9fb685eb4c9bc0e6d8ddd64a"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "2b52cd675a669451db8385e169846042dc9c756a", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/903033bb03d05b66cbbf79a58fc9989887e35b65/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903033bb03d05b66cbbf79a58fc9989887e35b65/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=903033bb03d05b66cbbf79a58fc9989887e35b65", "patch": "@@ -253,9 +253,13 @@ enum ptr_kind {uniq_ptr, gc_ptr, region_ptr, unsafe_ptr}\n \n // I am coining the term \"components\" to mean \"pieces of a data\n // structure accessible without a dereference\":\n-enum comp_kind {comp_tuple, comp_res, comp_variant,\n-                comp_field(str, ast::mutability),\n-                comp_index(ty::t, ast::mutability)}\n+enum comp_kind {\n+    comp_tuple, comp_res, comp_variant,\n+    comp_field(str, // name of field\n+               ast::mutability), // declared mutability of field\n+    comp_index(ty::t, // type of vec/str/etc being deref'd\n+               ast::mutability) // mutability of vec content\n+}\n \n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:"}, {"sha": "c7103b6899c4a94b55fd93a2b7ae7d8768706e18", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/903033bb03d05b66cbbf79a58fc9989887e35b65/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903033bb03d05b66cbbf79a58fc9989887e35b65/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=903033bb03d05b66cbbf79a58fc9989887e35b65", "patch": "@@ -67,6 +67,14 @@ fn opt_deref_kind(t: ty::t) -> option<deref_kind> {\n         some(deref_comp(comp_res))\n       }\n \n+      ty::ty_evec(mt, ty::vstore_fixed(_)) {\n+        some(deref_comp(comp_index(t, mt.mutbl)))\n+      }\n+\n+      ty::ty_estr(ty::vstore_fixed(_)) {\n+        some(deref_comp(comp_index(t, m_imm)))\n+      }\n+\n       _ {\n         none\n       }\n@@ -344,26 +352,31 @@ impl public_methods for borrowck_ctxt {\n           }\n         };\n \n-        let ptr = alt deref_kind(self.tcx, base_cmt.ty) {\n-          deref_ptr(ptr) { ptr }\n+        ret alt deref_kind(self.tcx, base_cmt.ty) {\n+          deref_ptr(ptr) {\n+            // make deref of vectors explicit, as explained in the comment at\n+            // the head of this section\n+            let deref_lp = base_cmt.lp.map { |lp| @lp_deref(lp, ptr) };\n+            let deref_cmt = @{id:expr.id, span:expr.span,\n+                              cat:cat_deref(base_cmt, 0u, ptr), lp:deref_lp,\n+                              mutbl:m_imm, ty:mt.ty};\n+            comp(expr, deref_cmt, base_cmt.ty, mt)\n+          }\n+\n           deref_comp(_) {\n-            self.tcx.sess.span_bug(\n-                expr.span,\n-                \"Deref of indexable type yielded comp kind\");\n+            // fixed-length vectors have no deref\n+            comp(expr, base_cmt, base_cmt.ty, mt)\n           }\n         };\n \n-        // make deref of vectors explicit, as explained in the comment at\n-        // the head of this section\n-        let deref_lp = base_cmt.lp.map { |lp| @lp_deref(lp, ptr) };\n-        let deref_cmt = @{id:expr.id, span:expr.span,\n-                          cat:cat_deref(base_cmt, 0u, ptr), lp:deref_lp,\n-                          mutbl:m_imm, ty:mt.ty};\n-        let comp = comp_index(base_cmt.ty, mt.mutbl);\n-        let index_lp = deref_lp.map { |lp| @lp_comp(lp, comp) };\n-        @{id:expr.id, span:expr.span,\n-          cat:cat_comp(deref_cmt, comp), lp:index_lp,\n-          mutbl:mt.mutbl, ty:mt.ty}\n+        fn comp(expr: @ast::expr, of_cmt: cmt,\n+                vect: ty::t, mt: ty::mt) -> cmt {\n+            let comp = comp_index(vect, mt.mutbl);\n+            let index_lp = of_cmt.lp.map { |lp| @lp_comp(lp, comp) };\n+            @{id:expr.id, span:expr.span,\n+              cat:cat_comp(of_cmt, comp), lp:index_lp,\n+              mutbl:mt.mutbl, ty:mt.ty}\n+        }\n     }\n \n     fn cat_tuple_elt<N: ast_node>(elt: N, cmt: cmt) -> cmt {"}]}