{"sha": "b85158e23a12b1660591afe6ead1f375c2623b65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTE1OGUyM2ExMmIxNjYwNTkxYWZlNmVhZDFmMzc1YzI2MjNiNjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-12T22:06:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T03:07:09Z"}, "message": "librustc: Remove overloaded operator autoderef.", "tree": {"sha": "f929990e4cdc4c76720fadc516b0d654bfda9221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f929990e4cdc4c76720fadc516b0d654bfda9221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85158e23a12b1660591afe6ead1f375c2623b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85158e23a12b1660591afe6ead1f375c2623b65", "html_url": "https://github.com/rust-lang/rust/commit/b85158e23a12b1660591afe6ead1f375c2623b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85158e23a12b1660591afe6ead1f375c2623b65/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c699815ddf22bf17b58a8c3d317af33745e28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c699815ddf22bf17b58a8c3d317af33745e28d", "html_url": "https://github.com/rust-lang/rust/commit/b1c699815ddf22bf17b58a8c3d317af33745e28d"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "8dd55c9a37b609159ac54a5e057c01ef47105fe5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b85158e23a12b1660591afe6ead1f375c2623b65", "patch": "@@ -312,7 +312,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         let lname = link_name(ccx, foreign_item);\n         let llbasefn = base_fn(ccx, *lname, tys, cc);\n         // Name the shim function\n-        let shim_name = lname + ~\"__c_stack_shim\";\n+        let shim_name = *lname + ~\"__c_stack_shim\";\n         return build_shim_fn_(ccx, shim_name, llbasefn, tys, cc,\n                            build_args, build_ret);\n     }"}, {"sha": "d673cf6a39ad67a8d233aa9d6cc0afb7440df028", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b85158e23a12b1660591afe6ead1f375c2623b65", "patch": "@@ -111,20 +111,26 @@ pub enum CheckTraitsFlag {\n     CheckTraitsAndInherentMethods,\n }\n \n-pub fn lookup(\n-    fcx: @mut FnCtxt,\n+#[deriving_eq]\n+pub enum AutoderefReceiverFlag {\n+    AutoderefReceiver,\n+    DontAutoderefReceiver,\n+}\n \n-    // In a call `a.b::<X, Y, ...>(...)`:\n-    expr: @ast::expr,                   // The expression `a.b`.\n-    self_expr: @ast::expr,              // The expression `a`.\n-    callee_id: node_id,                 // Where to store the type of `a.b`\n-    m_name: ast::ident,                 // The ident `b`.\n-    self_ty: ty::t,                     // The type of `a`.\n-    supplied_tps: &[ty::t],             // The list of types X, Y, ... .\n-    deref_args: check::DerefArgs,       // Whether we autopointer first.\n-    check_traits: CheckTraitsFlag)      // Whether we check traits only.\n-    -> Option<method_map_entry>\n-{\n+pub fn lookup(\n+        fcx: @mut FnCtxt,\n+\n+        // In a call `a.b::<X, Y, ...>(...)`:\n+        expr: @ast::expr,                   // The expression `a.b`.\n+        self_expr: @ast::expr,              // The expression `a`.\n+        callee_id: node_id,                 // Where to store `a.b`'s type\n+        m_name: ast::ident,                 // The ident `b`.\n+        self_ty: ty::t,                     // The type of `a`.\n+        supplied_tps: &[ty::t],             // The list of types X, Y, ... .\n+        deref_args: check::DerefArgs,       // Whether we autopointer first.\n+        check_traits: CheckTraitsFlag,      // Whether we check traits only.\n+        autoderef_receiver: AutoderefReceiverFlag)\n+     -> Option<method_map_entry> {\n     let lcx = LookupContext {\n         fcx: fcx,\n         expr: expr,\n@@ -137,6 +143,7 @@ pub fn lookup(\n         extension_candidates: @mut ~[],\n         deref_args: deref_args,\n         check_traits: check_traits,\n+        autoderef_receiver: autoderef_receiver,\n     };\n     let mme = lcx.do_lookup(self_ty);\n     debug!(\"method lookup for %s yielded %?\",\n@@ -156,6 +163,7 @@ pub struct LookupContext {\n     extension_candidates: @mut ~[Candidate],\n     deref_args: check::DerefArgs,\n     check_traits: CheckTraitsFlag,\n+    autoderef_receiver: AutoderefReceiverFlag,\n }\n \n /**\n@@ -232,6 +240,12 @@ pub impl LookupContext/&self {\n                 }\n             }\n \n+            // Don't autoderef if we aren't supposed to.\n+            if self.autoderef_receiver == DontAutoderefReceiver {\n+                break;\n+            }\n+\n+            // Otherwise, perform autoderef.\n             match self.deref(self_ty, &mut enum_dids) {\n                 None => { break; }\n                 Some(ty) => {"}, {"sha": "240f79ce262cc660eedbf1da83bd610d8d7411a7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b85158e23a12b1660591afe6ead1f375c2623b65", "patch": "@@ -89,8 +89,11 @@ use middle::typeck::astconv::{AstConv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::check::_match::pat_ctxt;\n+use middle::typeck::check::method::{AutoderefReceiver};\n+use middle::typeck::check::method::{AutoderefReceiverFlag};\n use middle::typeck::check::method::{CheckTraitsAndInherentMethods};\n-use middle::typeck::check::method::{CheckTraitsOnly, TransformTypeNormally};\n+use middle::typeck::check::method::{CheckTraitsOnly, DontAutoderefReceiver};\n+use middle::typeck::check::method::{TransformTypeNormally};\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::CrateCtxt;\n@@ -1373,7 +1376,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              expr_t,\n                              tps,\n                              DontDerefArgs,\n-                             CheckTraitsAndInherentMethods) {\n+                             CheckTraitsAndInherentMethods,\n+                             AutoderefReceiver) {\n             Some(ref entry) => {\n                 let method_map = fcx.ccx.method_map;\n                 method_map.insert(expr.id, (*entry));\n@@ -1453,7 +1457,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                         self_t: ty::t,\n                         opname: ast::ident,\n                         +args: ~[@ast::expr],\n-                        +deref_args: DerefArgs)\n+                        +deref_args: DerefArgs,\n+                        +autoderef_receiver: AutoderefReceiverFlag)\n                      -> Option<(ty::t, bool)> {\n         match method::lookup(fcx,\n                              op_ex,\n@@ -1463,7 +1468,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              self_t,\n                              ~[],\n                              deref_args,\n-                             CheckTraitsOnly) {\n+                             CheckTraitsOnly,\n+                             autoderef_receiver) {\n           Some(ref origin) => {\n               let method_ty = fcx.node_ty(op_ex.callee_id);\n               let method_map = fcx.ccx.method_map;\n@@ -1548,9 +1554,14 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let tcx = fcx.ccx.tcx;\n         match ast_util::binop_to_method_name(op) {\n           Some(ref name) => {\n-            match lookup_op_method(fcx, ex, lhs_expr, lhs_resolved_t,\n+            match lookup_op_method(fcx,\n+                                   ex,\n+                                   lhs_expr,\n+                                   lhs_resolved_t,\n                                    fcx.tcx().sess.ident_of(copy *name),\n-                                   ~[rhs], DoDerefArgs) {\n+                                   ~[rhs],\n+                                   DoDerefArgs,\n+                                   DontAutoderefReceiver) {\n               Some(pair) => return pair,\n               _ => ()\n             }\n@@ -1588,11 +1599,14 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                        rhs_expr: @ast::expr,\n                        rhs_t: ty::t)\n                     -> ty::t {\n-        match lookup_op_method(\n-            fcx, ex, rhs_expr, rhs_t,\n-            fcx.tcx().sess.ident_of(/*bad*/ copy mname), ~[],\n-            DontDerefArgs)\n-        {\n+        match lookup_op_method(fcx,\n+                               ex,\n+                               rhs_expr,\n+                               rhs_t,\n+                               fcx.tcx().sess.ident_of(/*bad*/ copy mname),\n+                               ~[],\n+                               DontDerefArgs,\n+                               DontAutoderefReceiver) {\n           Some((ret_ty, _)) => ret_ty,\n           _ => {\n               fcx.type_error_message(ex.span, |actual| {\n@@ -1740,7 +1754,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              expr_t,\n                              tps,\n                              DontDerefArgs,\n-                             CheckTraitsAndInherentMethods) {\n+                             CheckTraitsAndInherentMethods,\n+                             AutoderefReceiver) {\n             Some(ref entry) => {\n                 let method_map = fcx.ccx.method_map;\n                 method_map.insert(expr.id, (*entry));\n@@ -2569,9 +2584,14 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n               None => {\n                   let resolved = structurally_resolved_type(fcx, expr.span,\n                                                             raw_base_t);\n-                  match lookup_op_method(fcx, expr, base, resolved,\n+                  match lookup_op_method(fcx,\n+                                         expr,\n+                                         base,\n+                                         resolved,\n                                          tcx.sess.ident_of(~\"index\"),\n-                                         ~[idx], DontDerefArgs) {\n+                                         ~[idx],\n+                                         DontDerefArgs,\n+                                         AutoderefReceiver) {\n                       Some((ret_ty, _)) => fcx.write_ty(id, ret_ty),\n                       _ => {\n                           fcx.type_error_message(expr.span, |actual|"}, {"sha": "0f06976249bf161cbcafb23023ce5bd13e886574", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85158e23a12b1660591afe6ead1f375c2623b65/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b85158e23a12b1660591afe6ead1f375c2623b65", "patch": "@@ -3407,7 +3407,7 @@ pub impl Parser {\n         let prefix = Path(self.sess.cm.span_to_filename(*self.span));\n         let prefix = prefix.dir_path();\n         let mod_path = Path(\".\").push_many(*self.mod_path_stack);\n-        let default_path = self.sess.interner.get(id) + ~\".rs\";\n+        let default_path = *self.sess.interner.get(id) + ~\".rs\";\n         let file_path = match ::attr::first_attr_value_str_by_name(\n             outer_attrs, ~\"path\") {\n             Some(d) => {"}]}