{"sha": "0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmRmNTMzZDQ3YmFhZDE0OWY0YzBkNDljMmM2MGNiNzlkN2EyZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-07T02:01:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-07T15:09:52Z"}, "message": "Rollup merge of #48778 - sinkuu:rls_crash_tuple_struct, r=nrc\n\nFix save-analysis generation crash with invalid tuple access\n\nReproduction:\n\n```rust\nfn invalid_tuple_struct_accessing() {\n    bar.0;\n}\n```\n```\nerror[E0425]: cannot find value `bar` in this scope\n --> test.rs:2:5\n  |\n2 |     bar.0;\n  |     ^^^ not found in this scope\n\nerror[E0601]: main function not found\n\nerror: internal compiler error: librustc_save_analysis/dump_visitor.rs:1678: Expected struct or tuple type, found TyError\n --> test.rs:2:5\n  |\n2 |     bar.0;\n  |     ^^^^^\n\nthread 'rustc' panicked at 'Box<Any>', librustc_errors/lib.rs:482:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\nThis should fix a crash in RLS when editing such code. cc @nrc", "tree": {"sha": "65c6f70f103ba8703c022e42dd0da5518ca3149f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c6f70f103ba8703c022e42dd0da5518ca3149f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "html_url": "https://github.com/rust-lang/rust/commit/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584a28f0c01025831200d9a3939b859a6837d144", "url": "https://api.github.com/repos/rust-lang/rust/commits/584a28f0c01025831200d9a3939b859a6837d144", "html_url": "https://github.com/rust-lang/rust/commit/584a28f0c01025831200d9a3939b859a6837d144"}, {"sha": "f5a3efee88b3a2bf2d69b74f2d5a7eb75049f5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a3efee88b3a2bf2d69b74f2d5a7eb75049f5ef", "html_url": "https://github.com/rust-lang/rust/commit/f5a3efee88b3a2bf2d69b74f2d5a7eb75049f5ef"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "d92025a6787d6f63597ab87accae8599e012f37b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "patch": "@@ -1665,17 +1665,23 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                         if !self.span.filter_generated(sub_span, ex.span) {\n                             let span =\n                                 self.span_from_span(sub_span.expect(\"No span found for var ref\"));\n-                            let ref_id =\n-                                ::id_from_def_id(def.non_enum_variant().fields[idx.node].did);\n-                            self.dumper.dump_ref(Ref {\n-                                kind: RefKind::Variable,\n-                                span,\n-                                ref_id,\n-                            });\n+                            if let Some(field) = def.non_enum_variant().fields.get(idx.node) {\n+                                let ref_id = ::id_from_def_id(field.did);\n+                                self.dumper.dump_ref(Ref {\n+                                    kind: RefKind::Variable,\n+                                    span,\n+                                    ref_id,\n+                                });\n+                            } else {\n+                                return;\n+                            }\n                         }\n                     }\n                     ty::TyTuple(..) => {}\n-                    _ => span_bug!(ex.span, \"Expected struct or tuple type, found {:?}\", ty),\n+                    _ => {\n+                        debug!(\"Expected struct or tuple type, found {:?}\", ty);\n+                        return;\n+                    }\n                 }\n             }\n             ast::ExprKind::Closure(_, _, ref decl, ref body, _fn_decl_span) => {"}, {"sha": "b844f2e49e71ed1af9d98d85114d55b1e57b8b80", "filename": "src/test/run-make/save-analysis-fail/foo.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6df533d47baad149f4c0d49c2c60cb79d7a2d7/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs?ref=0e6df533d47baad149f4c0d49c2c60cb79d7a2d7", "patch": "@@ -459,3 +459,10 @@ struct Rls699 {\n fn new(f: u32) -> Rls699 {\n     Rls699 { fs }\n }\n+\n+fn invalid_tuple_struct_access() {\n+    bar.0;\n+\n+    struct S;\n+    S.0;\n+}"}]}