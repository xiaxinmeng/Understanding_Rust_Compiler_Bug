{"sha": "02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjYxZTRiZTJjNWM4ZDU2OWFjOThmNmQ3Yzc2MjNjNmQyNmZlNDc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-24T14:29:16Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-24T14:29:16Z"}, "message": "Fix comments", "tree": {"sha": "74cd77b2999e8fb8cf135b9a66a050f1940821de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74cd77b2999e8fb8cf135b9a66a050f1940821de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "html_url": "https://github.com/rust-lang/rust/commit/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "html_url": "https://github.com/rust-lang/rust/commit/0f58289b3d799e04aa2b0027c4a7ff571c7a7511"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "e2a9452045eafaa1a66b7fe72c1f7eb1ba553707", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "patch": "@@ -120,15 +120,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         if !this.machine.communicate {\n-            throw_unsup_format!(\"Function not available when isolation is enabled\")\n+            throw_unsup_format!(\"`getcwd` not available when isolation is enabled\")\n         }\n \n         let tcx = &{ this.tcx.tcx };\n \n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n-        // FIXME: Technically we have to set the `errno` global too\n         match env::current_dir() {\n             Ok(cwd) => {\n                 // It is not clear what happens with non-utf8 paths here"}]}