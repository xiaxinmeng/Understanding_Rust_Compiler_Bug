{"sha": "709a97fffec5e09cb5feca894c394ee80c2680ba", "node_id": "C_kwDOAAsO6NoAKDcwOWE5N2ZmZmVjNWUwOWNiNWZlY2E4OTRjMzk0ZWU4MGMyNjgwYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T07:36:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T07:36:53Z"}, "message": "Auto merge of #109173 - flba-eb:add-i586-qnx70-target, r=compiler-errors\n\nAdd tier 3 no_std x86 support for QNX Neutrino RTOS, version 7.0\n\nThis PR adds the target `i586-pc-nto-qnx700`, which targets QNX Neutrino RTOS version 7.0 on x86 32-bit targets.\n\ncc: `@flba-eb` `@gh-tr`\n\nThis target falls under the umbrella of Tier 3 QNX Neutrino RTOS support documented in `nto-qnx.md` and previously started with #102701.", "tree": {"sha": "7663f1f7f02df65ac717e20a492981416e3ac528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7663f1f7f02df65ac717e20a492981416e3ac528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709a97fffec5e09cb5feca894c394ee80c2680ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709a97fffec5e09cb5feca894c394ee80c2680ba", "html_url": "https://github.com/rust-lang/rust/commit/709a97fffec5e09cb5feca894c394ee80c2680ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709a97fffec5e09cb5feca894c394ee80c2680ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cd6f55323c15c9e8eed6361777d04e33ba7c429", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6f55323c15c9e8eed6361777d04e33ba7c429", "html_url": "https://github.com/rust-lang/rust/commit/7cd6f55323c15c9e8eed6361777d04e33ba7c429"}, {"sha": "47d7dd0c0ca1f72d702220ed227cd2167ab814b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d7dd0c0ca1f72d702220ed227cd2167ab814b0", "html_url": "https://github.com/rust-lang/rust/commit/47d7dd0c0ca1f72d702220ed227cd2167ab814b0"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "630642dcd33a2188ffe7861a632676c4854a698f", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_nto_qnx_710.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n                 LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n                 &[\"-Vgcc_ntoaarch64le_cxx\"],\n             ),\n+            env: \"nto71\".into(),\n             ..nto_qnx_base::opts()\n         },\n     }"}, {"sha": "68afa7fe401275ad784725392472fd6aa514eb04", "filename": "compiler/rustc_target/src/spec/i586_pc_nto_qnx700.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_nto_qnx700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_nto_qnx700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_nto_qnx700.rs?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -0,0 +1,24 @@\n+use super::nto_qnx_base;\n+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"i586-pc-unknown\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n+            f64:32:64-f80:32-n8:16:32-S128\"\n+            .into(),\n+        arch: \"x86\".into(),\n+        options: TargetOptions {\n+            cpu: \"pentium4\".into(),\n+            max_atomic_width: Some(64),\n+            pre_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-Vgcc_ntox86_cxx\"],\n+            ),\n+            env: \"nto70\".into(),\n+            stack_probes: StackProbeType::X86,\n+            ..nto_qnx_base::opts()\n+        },\n+    }\n+}"}, {"sha": "62c58c204e09adb73f50215efd78633baa10ef07", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -1261,6 +1261,7 @@ supported_targets! {\n \n     (\"aarch64-unknown-nto-qnx710\", aarch64_unknown_nto_qnx_710),\n     (\"x86_64-pc-nto-qnx710\", x86_64_pc_nto_qnx710),\n+    (\"i586-pc-nto-qnx700\", i586_pc_nto_qnx700),\n \n     (\"aarch64-unknown-linux-ohos\", aarch64_unknown_linux_ohos),\n     (\"armv7-unknown-linux-ohos\", armv7_unknown_linux_ohos),"}, {"sha": "f1405e9b44667625012f4c8736057be7dd1bf7a6", "filename": "compiler/rustc_target/src/spec/nto_qnx_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         crt_static_respected: true,\n         dynamic_linking: true,\n-        env: \"nto71\".into(),\n         executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,"}, {"sha": "6fb2dfd807a0f21f4f3c2d7e37eac538eb2cf62c", "filename": "compiler/rustc_target/src/spec/x86_64_pc_nto_qnx710.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -15,6 +15,7 @@ pub fn target() -> Target {\n                 LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n                 &[\"-Vgcc_ntox86_64_cxx\"],\n             ),\n+            env: \"nto71\".into(),\n             ..nto_qnx_base::opts()\n         },\n     }"}, {"sha": "67fe2a610c22cbffc69e3e27c1520f8a5441356f", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -257,6 +257,7 @@ target | std | host | notes\n `bpfel-unknown-none` | * |  | BPF (little endian)\n `hexagon-unknown-linux-musl` | ? |  |\n `i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n+[`i586-pc-nto-qnx700`](platform-support/nto-qnx.md) | * |  | 32-bit x86 QNX Neutrino 7.0 RTOS |\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit macOS (10.7+, Lion+)\n `i686-pc-windows-msvc` | * |  | 32-bit Windows XP support\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku"}, {"sha": "0d815c9b59807ee0635481a896399a2f568d1e29", "filename": "src/doc/rustc/src/platform-support/nto-qnx.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/709a97fffec5e09cb5feca894c394ee80c2680ba/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "raw_url": "https://github.com/rust-lang/rust/raw/709a97fffec5e09cb5feca894c394ee80c2680ba/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md?ref=709a97fffec5e09cb5feca894c394ee80c2680ba", "patch": "@@ -16,10 +16,18 @@ and [Blackberry QNX][BlackBerry].\n \n ## Requirements\n \n-Currently, only cross-compilation for QNX Neutrino on AArch64 and x86_64 are supported (little endian).\n+Currently, the following QNX Neutrino versions and compilation targets are supported:\n+\n+| QNX Neutrino Version | Target Architecture | Full support | `no_std` support |\n+|----------------------|---------------------|:------------:|:----------------:|\n+| 7.1 | AArch64 | \u2713 | \u2713 |\n+| 7.1 | x86_64  | \u2713 | \u2713 |\n+| 7.0 | x86     |   | \u2713 |\n+\n Adding other architectures that are supported by QNX Neutrino is possible.\n \n-The standard library, including `core` and `alloc` (with default allocator) are supported.\n+In the table above, 'full support' indicates support for building Rust applications with the full standard library.\n+'`no_std` support' indicates that only `core` and `alloc` are available.\n \n For building or using the Rust toolchain for QNX Neutrino, the\n [QNX Software Development Platform (SDP)](https://blackberry.qnx.com/en/products/foundation-software/qnx-software-development-platform)\n@@ -70,7 +78,7 @@ fn panic(_panic: &PanicInfo<'_>) -> ! {\n pub extern \"C\" fn rust_eh_personality() {}\n ```\n \n-The QNX Neutrino support of Rust has been tested with QNX Neutrino 7.1.\n+The QNX Neutrino support of Rust has been tested with QNX Neutrino 7.0 and 7.1.\n \n There are no further known requirements.\n \n@@ -80,6 +88,7 @@ For conditional compilation, following QNX Neutrino specific attributes are defi\n \n - `target_os` = `\"nto\"`\n - `target_env` = `\"nto71\"` (for QNX Neutrino 7.1)\n+- `target_env` = `\"nto70\"` (for QNX Neutrino 7.0)\n \n ## Building the target\n "}]}