{"sha": "97e73eea84e8302ae08f88645538ee27485770d6", "node_id": "C_kwDOAAsO6NoAKDk3ZTczZWVhODRlODMwMmFlMDhmODg2NDU1MzhlZTI3NDg1NzcwZDY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-18T10:56:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-18T11:15:57Z"}, "message": "doc links: Filter away autolinks in both rustc and rustdoc", "tree": {"sha": "e33cd6aef1cfaded4dbdb1ecade0d0627cab5d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33cd6aef1cfaded4dbdb1ecade0d0627cab5d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e73eea84e8302ae08f88645538ee27485770d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e73eea84e8302ae08f88645538ee27485770d6", "html_url": "https://github.com/rust-lang/rust/commit/97e73eea84e8302ae08f88645538ee27485770d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e73eea84e8302ae08f88645538ee27485770d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccdb598d1b495952bdb09122dc53c39b40f23758", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccdb598d1b495952bdb09122dc53c39b40f23758", "html_url": "https://github.com/rust-lang/rust/commit/ccdb598d1b495952bdb09122dc53c39b40f23758"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "0c4b4bc3f62657e8306fe0355554b3a29eea5c88", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97e73eea84e8302ae08f88645538ee27485770d6/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e73eea84e8302ae08f88645538ee27485770d6/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=97e73eea84e8302ae08f88645538ee27485770d6", "patch": "@@ -1,4 +1,4 @@\n-use pulldown_cmark::{BrokenLink, Event, Options, Parser, Tag};\n+use pulldown_cmark::{BrokenLink, Event, LinkType, Options, Parser, Tag};\n use rustc_ast as ast;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_data_structures::fx::FxHashMap;\n@@ -347,6 +347,21 @@ fn preprocess_link(link: &str) -> String {\n     strip_generics_from_path(link).unwrap_or_else(|_| link.to_string())\n }\n \n+/// Keep inline and reference links `[]`,\n+/// but skip autolinks `<>` which we never consider to be intra-doc links.\n+pub fn may_be_doc_link(link_type: LinkType) -> bool {\n+    match link_type {\n+        LinkType::Inline\n+        | LinkType::Reference\n+        | LinkType::ReferenceUnknown\n+        | LinkType::Collapsed\n+        | LinkType::CollapsedUnknown\n+        | LinkType::Shortcut\n+        | LinkType::ShortcutUnknown => true,\n+        LinkType::Autolink | LinkType::Email => false,\n+    }\n+}\n+\n /// Simplified version of `preprocessed_markdown_links` from rustdoc.\n /// Must return at least the same links as it, but may add some more links on top of that.\n pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<String> {\n@@ -359,7 +374,9 @@ pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<Strin\n         Some(&mut |link: BrokenLink<'_>| Some((link.reference, \"\".into()))),\n     )\n     .filter_map(|event| match event {\n-        Event::Start(Tag::Link(_, dest, _)) => Some(preprocess_link(&dest)),\n+        Event::Start(Tag::Link(link_type, dest, _)) if may_be_doc_link(link_type) => {\n+            Some(preprocess_link(&dest))\n+        }\n         _ => None,\n     })\n     .collect()"}, {"sha": "9ef0b501c085036149fb1c125971f1c02ec7a2e5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/97e73eea84e8302ae08f88645538ee27485770d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e73eea84e8302ae08f88645538ee27485770d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=97e73eea84e8302ae08f88645538ee27485770d6", "patch": "@@ -29,6 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n pub(crate) use rustc_resolve::rustdoc::main_body_opts;\n+use rustc_resolve::rustdoc::may_be_doc_link;\n use rustc_span::edition::Edition;\n use rustc_span::{Span, Symbol};\n \n@@ -1269,22 +1270,13 @@ pub(crate) fn markdown_links<R>(\n     )\n     .into_offset_iter()\n     .filter_map(|(event, span)| match event {\n-        Event::Start(Tag::Link(\n-            // `<>` links cannot be intra-doc links so we skip them.\n-            kind @ (LinkType::Inline\n-            | LinkType::Reference\n-            | LinkType::ReferenceUnknown\n-            | LinkType::Collapsed\n-            | LinkType::CollapsedUnknown\n-            | LinkType::Shortcut\n-            | LinkType::ShortcutUnknown),\n-            dest,\n-            _,\n-        )) => preprocess_link(MarkdownLink {\n-            kind,\n-            range: span_for_link(&dest, span),\n-            link: dest.into_string(),\n-        }),\n+        Event::Start(Tag::Link(link_type, dest, _)) if may_be_doc_link(link_type) => {\n+            preprocess_link(MarkdownLink {\n+                kind: link_type,\n+                range: span_for_link(&dest, span),\n+                link: dest.into_string(),\n+            })\n+        }\n         _ => None,\n     })\n     .collect()"}]}