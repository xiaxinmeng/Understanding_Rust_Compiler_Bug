{"sha": "3b5b93221e1bf35b48dc5fd040f0086892704ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNWI5MzIyMWUxYmYzNWI0OGRjNWZkMDQwZjAwODY4OTI3MDRjYTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T12:12:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T12:24:42Z"}, "message": "Remove some semicolons after block calls\n\nThe remaining ones can be removed after the next snapshot. (Or\nwe can let the next pretty-print pass take care of them.)", "tree": {"sha": "dbc383e7a1b376a8d8aa436b516c1d589853b1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc383e7a1b376a8d8aa436b516c1d589853b1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5b93221e1bf35b48dc5fd040f0086892704ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b93221e1bf35b48dc5fd040f0086892704ca5", "html_url": "https://github.com/rust-lang/rust/commit/3b5b93221e1bf35b48dc5fd040f0086892704ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b93221e1bf35b48dc5fd040f0086892704ca5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71147024962318033ade76ba741d1ecc1dfae3ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/71147024962318033ade76ba741d1ecc1dfae3ce", "html_url": "https://github.com/rust-lang/rust/commit/71147024962318033ade76ba741d1ecc1dfae3ce"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "6f91839cc60c9b7a8e8bd051a7a2e583354e6f2e", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -38,18 +38,18 @@ fn test_cycles(r : rand::rng)\n     let v : [mutable @pointy] = [mutable];\n     allunder(max) {|i|\n         v += [mutable @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop }];\n-    };\n+    }\n \n     allunder(max) {|i|\n         v[i].x = yes_pointy(v[under(r, max)]);\n         v[i].y = yes_pointy(v[under(r, max)]);\n         v[i].z = bind nopT(v[under(r, max)]);\n-    };\n+    }\n \n     // Drop refs one at a time\n     allunder(max) {|i|\n         v[i] = @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop };\n-    };\n+    }\n }\n \n fn main()"}, {"sha": "04e7550533e7f69057baa3121722d1bac6d4cd66", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -264,8 +264,8 @@ fn check_variants_T<@T>(\n                     check_whole_compiler(str3, file_label, safe_to_run);\n                   }\n                 }\n-            };\n-        };\n+            }\n+        }\n     }\n }\n "}, {"sha": "4ede2f4482a24301132ae59d21c84cbce5207fea", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -60,20 +60,20 @@ fn vec_edits<@T>(v: [T], xs: [T]) -> [[T]] {\n         // When Lv == 2u, this is redundant with swap.\n         edits += [vec::reversed(v)];\n     }\n-    ix(0u, 1u, Lv) {|i| edits += [vec_omit(v, i)]; };\n-    ix(0u, 1u, Lv) {|i| edits += [vec_dup(v, i)]; };\n-    ix(0u, 2u, Lv) {|i| edits += [vec_swadj(v, i)]; };\n-    ix(1u, 2u, Lv) {|i| edits += [vec_prefix(v, i)]; };\n-    ix(2u, 1u, Lv) {|i| edits += [vec_suffix(v, i)]; };\n+    ix(0u, 1u, Lv) {|i| edits += [vec_omit(v, i)]; }\n+    ix(0u, 1u, Lv) {|i| edits += [vec_dup(v, i)]; }\n+    ix(0u, 2u, Lv) {|i| edits += [vec_swadj(v, i)]; }\n+    ix(1u, 2u, Lv) {|i| edits += [vec_prefix(v, i)]; }\n+    ix(2u, 1u, Lv) {|i| edits += [vec_suffix(v, i)]; }\n \n     ix(0u, 1u, len(xs)) {|j|\n         ix(0u, 1u, Lv) {|i|\n             edits += [vec_poke(v, i, xs[j])];\n-        };\n+        }\n         ix(0u, 0u, Lv) {|i|\n             edits += [vec_insert(v, i, xs[j])];\n-        };\n-    };\n+        }\n+    }\n \n     edits\n }\n@@ -93,7 +93,7 @@ fn vec_to_str(v: [int]) -> str {\n fn show_edits(a: [int], xs: [int]) {\n     log_err \"=== Edits of \" + vec_to_str(a) + \" ===\";\n     let b = vec_edits(a, xs);\n-    ix(0u, 1u, len(b)) {|i| log_err vec_to_str(b[i]); };\n+    ix(0u, 1u, len(b)) {|i| log_err vec_to_str(b[i]); }\n }\n \n fn demo_edits() {"}, {"sha": "db9905280b76a760964182043bd04df80092964f", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -50,7 +50,7 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, select_random(rng.next(100u32), genelist) as u8);\n         if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n-    };\n+    }\n     if str::byte_len(op) > 0u { log op; }\n }\n \n@@ -61,7 +61,7 @@ fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, s[i % sl]);\n         if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n-    };\n+    }\n     if str::byte_len(op) > 0u { log op; }\n }\n "}, {"sha": "fb078dea17d2f8c2834b400c892232f8de25e4ac", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -77,7 +77,7 @@ fn stress(num_tasks: int) {\n     let tasks = [];\n     range(0, num_tasks) {|i|\n         tasks += [task::spawn_joinable(copy i, stress_task)];\n-    };\n+    }\n     for t in tasks { task::join(t); }\n }\n \n@@ -109,8 +109,8 @@ fn main(argv: [str]) {\n \n                     out.write_line(#fmt[\"%d\\t%d\\t%s\", n, fibn,\n                                         u64::str(elapsed)]);\n-                };\n-            };\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "c61af8dd0de57d02dcce8e6a4bb47f94101633ad", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -13,13 +13,13 @@ fn f(&&n: uint) {\n     uint::range(0u, n) {|i|\n         let v: [u8] = [];\n         vec::reserve(v, 1000u);\n-    };\n+    }\n }\n \n fn main(args: [str]) {\n     let n =\n         if vec::len(args) < 2u {\n             100u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n-    uint::range(0u, 100u) {|i| task::spawn(copy n, f); };\n+    uint::range(0u, 100u) {|i| task::spawn(copy n, f); }\n }"}, {"sha": "321dfb57caae819c188dd36a34bc0ce96b9b4ad9", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -100,7 +100,7 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        intermediates.values {|v| send(v, release); };\n+        intermediates.values {|v| send(v, release); }\n \n         send(ctrl, mapper_done);\n     }\n@@ -178,7 +178,7 @@ mod map_reduce {\n             }\n         }\n \n-        reducers.values {|v| send(v, done); };\n+        reducers.values {|v| send(v, done); }\n \n         for t in tasks { task::join(t); }\n     }"}, {"sha": "9292981d4f4580aaa5bbe29e67ef925366ed4354", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -12,7 +12,7 @@ fn bitv_to_str(enclosing: fn_info, v: bitv::t) -> str {\n     // error is that the value type in the hash map is var_info, not a box\n     enclosing.vars.values {|val|\n         if bitv::get(v, val) { s += \"foo\"; }\n-    };\n+    }\n     ret s;\n }\n "}, {"sha": "c49b00599aab4e84ee0a82a804eea514b330dac8", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -24,5 +24,5 @@ fn main() {\n     uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];\n         map.insert(arr, arr + [@\"value stuff\"]);\n-    };\n+    }\n }\n\\ No newline at end of file"}, {"sha": "0700b5d5311677c14f963c3fc35eba0fb1c2bc05", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -8,6 +8,6 @@ fn range(a: int, b: int, it: block(int)) {\n \n fn main() {\n     let sum: int = 0;\n-    range(0, 100) {|x| sum += x; };\n+    range(0, 100) {|x| sum += x; }\n     log sum;\n }"}, {"sha": "155a9ff9cc2dcddb10ee10cff1af451b416c4a30", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -16,5 +16,5 @@ fn iloop(&&_i: ()) {\n fn main() {\n     uint::range(0u, 100u) {|_i|\n         task::spawn((), iloop);\n-    };\n+    }\n }\n\\ No newline at end of file"}, {"sha": "328fba83d7a0d1cb4e35b90c34ed0afa4a82c3b3", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let x = ~{x: 1, y: 2, z: 3};\n     uint::range(0u, 10000u) {|_i|\n         assert (test(true, x) == 2);\n-    };\n+    }\n     assert (test(false, x) == 5);\n }"}, {"sha": "55f94de60b4b2a95ffc6f844e112073142e200e4", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let x = @{x: 1, y: 2, z: 3};\n     uint::range(0u, 10000u) {|i|\n         assert (test(true, x) == 2);\n-    };\n+    }\n     assert (test(false, x) == 5);\n }"}, {"sha": "244a92dea0f912fa3a9f6de39dfd893126157cd2", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -13,7 +13,7 @@ fn foo(src: uint) {\n         uint::range(0u, 10u) {|i|\n             let yyy = src_id;\n             assert (yyy == 0u);\n-        };\n+        }\n       }\n       _ { }\n     }"}, {"sha": "dab61f2adc918d4c206e04c0ddd14325d76daa84", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -35,7 +35,7 @@ fn test_grow() {\n     uint::range(0u, 100u) {|i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n-    };\n+    }\n }\n \n \n@@ -53,8 +53,8 @@ fn test_shrink2() {\n     uint::range(0u, 100u) {|_i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n-    };\n-    uint::range(0u, 100u) {|_i| let x = recv(myport); };\n+    }\n+    uint::range(0u, 100u) {|_i| let x = recv(myport); }\n }\n \n \n@@ -69,7 +69,7 @@ fn test_rotate() {\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n-    };\n+    }\n }\n \n \n@@ -83,14 +83,14 @@ fn test_rotate_grow() {\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n             send(mychan, val);\n-        };\n+        }\n         uint::range(0u, 10u) {|i|\n             let x = recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);\n-        };\n-    };\n+        }\n+    }\n }\n \n fn main() {"}, {"sha": "266062056709443ebbf981ebd8c7f1399642fde4", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -21,5 +21,5 @@ fn iloop(&&_i: ()) {\n fn main() {\n     uint::range(0u, 16u) {|_i|\n         task::spawn((), iloop);\n-    };\n+    }\n }\n\\ No newline at end of file"}, {"sha": "fee8a5053d5f8f6f11c1ff7751b483daeb1f3d3d", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -6,7 +6,7 @@ fn range(lo: uint, hi: uint, it: block(uint)) {\n }\n \n fn create_index<@T>(index: [{a: T, b: uint}], hash_fn: fn(T) -> uint) {\n-    range(0u, 256u) {|_i| let bucket: [T] = []; };\n+    range(0u, 256u) {|_i| let bucket: [T] = []; }\n }\n \n fn main() { }"}, {"sha": "b417ec57dbe196cee4c17dfdb4666fd78ddc0a15", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5b93221e1bf35b48dc5fd040f0086892704ca5/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=3b5b93221e1bf35b48dc5fd040f0086892704ca5", "patch": "@@ -15,13 +15,13 @@ fn main() {\n     uint::range(0u, n) {|i|\n         task::spawn((comm::chan(p), i), child);\n         expected += i;\n-    };\n+    }\n \n     let actual = 0u;\n     uint::range(0u, n) {|_i|\n         let j = comm::recv(p);\n         actual += *j;\n-    };\n+    }\n \n     assert expected == actual;\n }\n\\ No newline at end of file"}]}