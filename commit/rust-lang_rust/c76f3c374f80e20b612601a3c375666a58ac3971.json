{"sha": "c76f3c374f80e20b612601a3c375666a58ac3971", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NmYzYzM3NGY4MGUyMGI2MTI2MDFhM2MzNzU2NjZhNThhYzM5NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T19:08:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T19:08:20Z"}, "message": "Auto merge of #57737 - Centril:rollup, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #56594 (Remove confusing comment about ideally using `!` for `c_void`)\n - #57340 (Use correct tracking issue for c_variadic)\n - #57357 (Cleanup PartialEq docs.)\n - #57551 (resolve: Add a test for issue #57539)\n - #57636 (Fix sources sidebar not showing up)\n - #57646 (Fixes text becoming invisible when element targetted)\n - #57654 (Add some links in std::fs.)\n - #57683 (Document Unpin in std::prelude documentation)\n - #57685 (Enhance `Pin` impl applicability for `PartialEq` and `PartialOrd`.)\n - #57710 (Fix non-clickable urls)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7f0c4751557e8c5bfefb68638f9df65829d294ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f0c4751557e8c5bfefb68638f9df65829d294ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76f3c374f80e20b612601a3c375666a58ac3971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76f3c374f80e20b612601a3c375666a58ac3971", "html_url": "https://github.com/rust-lang/rust/commit/c76f3c374f80e20b612601a3c375666a58ac3971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76f3c374f80e20b612601a3c375666a58ac3971/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "url": "https://api.github.com/repos/rust-lang/rust/commits/f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "html_url": "https://github.com/rust-lang/rust/commit/f613dc138b4012cf3d2eb40718fbcc7cf0a34039"}, {"sha": "ff583ac484518df65562f32f4f6d3c8a1993c12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff583ac484518df65562f32f4f6d3c8a1993c12f", "html_url": "https://github.com/rust-lang/rust/commit/ff583ac484518df65562f32f4f6d3c8a1993c12f"}], "stats": {"total": 204, "additions": 138, "deletions": 66}, "files": [{"sha": "d43a5c1032ce0f0edd21dd2884f14f13294c7603", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -91,6 +91,8 @@ use self::Ordering::*;\n /// For example, let's tweak our previous code a bit:\n ///\n /// ```\n+/// // The derive implements <BookFormat> == <BookFormat> comparisons\n+/// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n@@ -102,31 +104,34 @@ use self::Ordering::*;\n ///     format: BookFormat,\n /// }\n ///\n+/// // Implement <Book> == <BookFormat> comparisons\n /// impl PartialEq<BookFormat> for Book {\n ///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n-///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n-///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n+///         self.format == *other\n+///     }\n+/// }\n+///\n+/// // Implement <BookFormat> == <Book> comparisons\n+/// impl PartialEq<Book> for BookFormat {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         *self == other.format\n ///     }\n /// }\n ///\n /// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n ///\n /// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(BookFormat::Ebook != b1);\n /// ```\n ///\n /// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n-/// we've changed what type we can use on the right side of the `==` operator.\n-/// This lets us use it in the `assert!` statements at the bottom.\n+/// we allow `BookFormat`s to be compared with `Book`s.\n ///\n /// You can also combine these implementations to let the `==` operator work with\n /// two different types:\n ///\n /// ```\n+/// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n@@ -140,12 +145,13 @@ use self::Ordering::*;\n ///\n /// impl PartialEq<BookFormat> for Book {\n ///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n-///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n-///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n+///         self.format == *other\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Book> for BookFormat {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         *self == other.format\n ///     }\n /// }\n ///\n@@ -159,7 +165,7 @@ use self::Ordering::*;\n /// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n ///\n /// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(BookFormat::Ebook != b1);\n /// assert!(b1 == b2);\n /// ```\n ///"}, {"sha": "644380c69f2c755ee91ad4d437fb932accaf4a99", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -12,24 +12,27 @@ use ::fmt;\n /// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n /// *not* the same as C's `void` return type, which is Rust's `()` type.\n ///\n-/// Ideally, this type would be equivalent to [`!`], but currently it may\n-/// be more ideal to use `c_void` for FFI purposes.\n+/// To model pointers to opaque types in FFI, until `extern type` is\n+/// stabilized, it is recommended to use a newtype wrapper around an empty\n+/// byte array. See the [Nomicon] for details.\n ///\n-/// [`!`]: ../../std/primitive.never.html\n /// [pointer]: ../../std/primitive.pointer.html\n+/// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n // N.B., for LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse\n-//     of the \"raw\" type by only having private variants.. We need two\n+//     of the \"raw\" type by only having private variants. We need two\n //     variants, because the compiler complains about the repr attribute\n-//     otherwise.\n+//     otherwise and we need at least one variant as otherwise the enum\n+//     would be uninhabited and at least dereferencing such pointers would\n+//     be UB.\n #[repr(u8)]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub enum c_void {\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+    #[unstable(feature = \"c_void_variant\", reason = \"temporary implementation detail\",\n                issue = \"0\")]\n     #[doc(hidden)] __variant1,\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+    #[unstable(feature = \"c_void_variant\", reason = \"temporary implementation detail\",\n                issue = \"0\")]\n     #[doc(hidden)] __variant2,\n }\n@@ -49,7 +52,7 @@ impl fmt::Debug for c_void {\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n extern {\n     type VaListImpl;\n }\n@@ -74,7 +77,7 @@ impl fmt::Debug for VaListImpl {\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n struct VaListImpl {\n     stack: *mut (),\n     gr_top: *mut (),\n@@ -90,7 +93,7 @@ struct VaListImpl {\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n struct VaListImpl {\n     gpr: u8,\n     fpr: u8,\n@@ -106,7 +109,7 @@ struct VaListImpl {\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n struct VaListImpl {\n     gp_offset: i32,\n     fp_offset: i32,\n@@ -120,7 +123,7 @@ struct VaListImpl {\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n #[repr(transparent)]\n pub struct VaList<'a>(&'a mut VaListImpl);\n \n@@ -140,7 +143,7 @@ mod sealed_trait {\n     #[unstable(feature = \"c_variadic\",\n                reason = \"the `c_variadic` feature has not been properly tested on \\\n                          all supported platforms\",\n-               issue = \"27745\")]\n+               issue = \"44930\")]\n     pub trait VaArgSafe {}\n }\n \n@@ -150,7 +153,7 @@ macro_rules! impl_va_arg_safe {\n             #[unstable(feature = \"c_variadic\",\n                        reason = \"the `c_variadic` feature has not been properly tested on \\\n                                  all supported platforms\",\n-                       issue = \"27745\")]\n+                       issue = \"44930\")]\n             impl sealed_trait::VaArgSafe for $t {}\n         )+\n     }\n@@ -163,20 +166,20 @@ impl_va_arg_safe!{f64}\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n impl<T> sealed_trait::VaArgSafe for *mut T {}\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n impl<T> sealed_trait::VaArgSafe for *const T {}\n \n impl<'a> VaList<'a> {\n     /// Advance to the next arg.\n     #[unstable(feature = \"c_variadic\",\n                reason = \"the `c_variadic` feature has not been properly tested on \\\n                          all supported platforms\",\n-               issue = \"27745\")]\n+               issue = \"44930\")]\n     pub unsafe fn arg<T: sealed_trait::VaArgSafe>(&mut self) -> T {\n         va_arg(self)\n     }\n@@ -185,7 +188,7 @@ impl<'a> VaList<'a> {\n     #[unstable(feature = \"c_variadic\",\n                reason = \"the `c_variadic` feature has not been properly tested on \\\n                          all supported platforms\",\n-               issue = \"27745\")]\n+               issue = \"44930\")]\n     pub unsafe fn copy<F, R>(&self, f: F) -> R\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),"}, {"sha": "7c09a36d898830a472988b84976ca44a24c1befc", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -99,6 +99,7 @@\n \n use fmt;\n use marker::{Sized, Unpin};\n+use cmp::{self, PartialEq, PartialOrd};\n use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n /// A pinned pointer.\n@@ -112,16 +113,57 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html\n //\n-// Note: the derives below are allowed because they all only use `&P`, so they\n-// cannot move the value behind `pointer`.\n+// Note: the derives below, and the explicit `PartialEq` and `PartialOrd`\n+// implementations, are allowed because they all only use `&P`, so they cannot move\n+// the value behind `pointer`.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[fundamental]\n #[repr(transparent)]\n-#[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(Copy, Clone, Hash, Eq, Ord)]\n pub struct Pin<P> {\n     pointer: P,\n }\n \n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialEq<Pin<Q>> for Pin<P>\n+where\n+    P: PartialEq<Q>,\n+{\n+    fn eq(&self, other: &Pin<Q>) -> bool {\n+        self.pointer == other.pointer\n+    }\n+\n+    fn ne(&self, other: &Pin<Q>) -> bool {\n+        self.pointer != other.pointer\n+    }\n+}\n+\n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialOrd<Pin<Q>> for Pin<P>\n+where\n+    P: PartialOrd<Q>,\n+{\n+    fn partial_cmp(&self, other: &Pin<Q>) -> Option<cmp::Ordering> {\n+        self.pointer.partial_cmp(&other.pointer)\n+    }\n+\n+    fn lt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer < other.pointer\n+    }\n+\n+    fn le(&self, other: &Pin<Q>) -> bool {\n+        self.pointer <= other.pointer\n+    }\n+\n+    fn gt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer > other.pointer\n+    }\n+\n+    fn ge(&self, other: &Pin<Q>) -> bool {\n+        self.pointer >= other.pointer\n+    }\n+}\n+\n impl<P: Deref> Pin<P>\n where\n     P::Target: Unpin,"}, {"sha": "06846d4ed0c9b38faf88c848122754c416c3426e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -1076,7 +1076,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n         all_sources.sort();\n         let mut w = try_err!(File::create(&dst), &dst);\n         try_err!(writeln!(&mut w,\n-                          \"var N = null;var sourcesIndex = {{}};\\n{}\",\n+                          \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\",\n                           all_sources.join(\"\\n\")),\n                  &dst);\n     }"}, {"sha": "36765496ff4e9964dbd871fe2fb655aeddc8cfe7", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -391,10 +391,6 @@ h4 > code, h3 > code, .invisible > code {\n \tdisplay: block;\n }\n \n-.in-band, code {\n-\tz-index: -5;\n-}\n-\n .invisible {\n \twidth: 100%;\n \tdisplay: inline-block;"}, {"sha": "c5d6fa16f550e73c6c3d55c4556017de7b8652e1", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -137,5 +137,3 @@ function createSourceSidebar() {\n \n     main.insertBefore(sidebar, main.firstChild);\n }\n-\n-createSourceSidebar();"}, {"sha": "52a30967a2310a65ad1aea5ff6d3039eaba7404e", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -82,12 +82,6 @@ pre {\n \tborder-bottom-color: #ddd;\n }\n \n-:target { background: #494a3d; }\n-\n-:target > .in-band {\n-\tbackground: #494a3d;\n-}\n-\n .content .method .where,\n .content .fn .where,\n .content .where.fmt-newline {\n@@ -252,7 +246,7 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code {\n+:target > code, :target > .in-band {\n \tbackground-color: #494a3d;\n }\n "}, {"sha": "d20fea666e61da75955ef306f02037ea239ec32f", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -84,12 +84,6 @@ pre {\n \tborder-bottom-color: #ddd;\n }\n \n-:target { background: #FDFFD3; }\n-\n-:target > .in-band {\n-\tbackground: #FDFFD3;\n-}\n-\n .content .method .where,\n .content .fn .where,\n .content .where.fmt-newline {\n@@ -247,7 +241,7 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code {\n+:target > code, :target > .in-band {\n \tbackground: #FDFFD3;\n }\n "}, {"sha": "7a38f0ebd5a579b235486017b2d4515aa113917a", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -169,7 +169,7 @@ pub use core::ffi::c_void;\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n-           issue = \"27745\")]\n+           issue = \"44930\")]\n pub use core::ffi::VaList;\n \n mod c_str;"}, {"sha": "3538816c1124cf2e566c1a5198e254035fd01876", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -1121,7 +1121,9 @@ impl Permissions {\n     /// writing.\n     ///\n     /// This operation does **not** modify the filesystem. To modify the\n-    /// filesystem use the `fs::set_permissions` function.\n+    /// filesystem use the [`fs::set_permissions`] function.\n+    ///\n+    /// [`fs::set_permissions`]: fn.set_permissions.html\n     ///\n     /// # Examples\n     ///\n@@ -1639,10 +1641,15 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n ///\n /// The `dst` path will be a symbolic link pointing to the `src` path.\n /// On Windows, this will be a file symlink, not a directory symlink;\n-/// for this reason, the platform-specific `std::os::unix::fs::symlink`\n-/// and `std::os::windows::fs::{symlink_file, symlink_dir}` should be\n+/// for this reason, the platform-specific [`std::os::unix::fs::symlink`]\n+/// and [`std::os::windows::fs::symlink_file`] or [`symlink_dir`] should be\n /// used instead to make the intent explicit.\n ///\n+/// [`std::os::unix::fs::symlink`]: ../os/unix/fs/fn.symlink.html\n+/// [`std::os::windows::fs::symlink_file`]: ../os/windows/fs/fn.symlink_file.html\n+/// [`symlink_dir`]: ../os/windows/fs/fn.symlink_dir.html\n+///\n+///\n /// # Examples\n ///\n /// ```no_run\n@@ -1795,14 +1802,16 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// * If any directory in the path specified by `path`\n /// does not already exist and it could not be created otherwise. The specific\n /// error conditions for when a directory is being created (after it is\n-/// determined to not exist) are outlined by `fs::create_dir`.\n+/// determined to not exist) are outlined by [`fs::create_dir`].\n ///\n /// Notable exception is made for situations where any of the directories\n /// specified in the `path` could not be created as it was being created concurrently.\n /// Such cases are considered to be successful. That is, calling `create_dir_all`\n /// concurrently from multiple threads or processes is guaranteed not to fail\n /// due to a race condition with itself.\n ///\n+/// [`fs::create_dir`]: fn.create_dir.html\n+///\n /// # Examples\n ///\n /// ```no_run\n@@ -1868,7 +1877,10 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// # Errors\n ///\n-/// See `file::remove_file` and `fs::remove_dir`.\n+/// See [`fs::remove_file`] and [`fs::remove_dir`].\n+///\n+/// [`fs::remove_file`]:  fn.remove_file.html\n+/// [`fs::remove_dir`]: fn.remove_dir.html\n ///\n /// # Examples\n ///"}, {"sha": "bf689bad559d37f3936d2c55f691f3033e93498e", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -44,8 +44,8 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following.\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n-//!   traits indicate fundamental properties of types.\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}. The\n+//!   marker traits indicate fundamental properties of types.\n //! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n //!   operations for both destructors and overloading `()`.\n //! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n@@ -108,6 +108,7 @@\n //! [`Sync`]: ../marker/trait.Sync.html\n //! [`ToOwned`]: ../borrow/trait.ToOwned.html\n //! [`ToString`]: ../string/trait.ToString.html\n+//! [`Unpin`]: ../marker/trait.Unpin.html\n //! [`Vec`]: ../vec/struct.Vec.html\n //! [`Clone::clone`]: ../clone/trait.Clone.html#tymethod.clone\n //! [`mem::drop`]: ../mem/fn.drop.html"}, {"sha": "90b74eb464779f810cd89a076a50b64d84b67356", "filename": "src/test/ui/imports/issue-57539.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Ftest%2Fui%2Fimports%2Fissue-57539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Ftest%2Fui%2Fimports%2Fissue-57539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-57539.rs?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+\n+mod core {\n+    use core; //~ ERROR `core` is ambiguous\n+    use crate::*;\n+}\n+\n+fn main() {}"}, {"sha": "3f745fd8204bfeb99ec3564ac646eac133cbaa48", "filename": "src/test/ui/imports/issue-57539.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c76f3c374f80e20b612601a3c375666a58ac3971/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr?ref=c76f3c374f80e20b612601a3c375666a58ac3971", "patch": "@@ -0,0 +1,18 @@\n+error[E0659]: `core` is ambiguous (name vs any other name during import resolution)\n+  --> $DIR/issue-57539.rs:4:9\n+   |\n+LL |     use core; //~ ERROR `core` is ambiguous\n+   |         ^^^^ ambiguous name\n+   |\n+   = note: `core` could refer to a built-in extern crate\n+   = help: use `::core` to refer to this extern crate unambiguously\n+note: `core` could also refer to the module imported here\n+  --> $DIR/issue-57539.rs:5:9\n+   |\n+LL |     use crate::*;\n+   |         ^^^^^^^^\n+   = help: use `self::core` to refer to this module unambiguously\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}]}