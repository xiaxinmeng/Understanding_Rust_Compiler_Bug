{"sha": "2cf7f55662bed29513eb9daecc3e72474ec023f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjdmNTU2NjJiZWQyOTUxM2ViOWRhZWNjM2U3MjQ3NGVjMDIzZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-31T01:18:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-31T01:18:19Z"}, "message": "Auto merge of #57035 - Zoxc:query-pref9, r=michaelwoerister\n\nUninline some debugging code and use unlikely! macro\n\nr? @michaelwoerister", "tree": {"sha": "795d948f50f29d5913417da394d4e5615d0757dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795d948f50f29d5913417da394d4e5615d0757dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf7f55662bed29513eb9daecc3e72474ec023f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf7f55662bed29513eb9daecc3e72474ec023f5", "html_url": "https://github.com/rust-lang/rust/commit/2cf7f55662bed29513eb9daecc3e72474ec023f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf7f55662bed29513eb9daecc3e72474ec023f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b0f247bf741a1a9729363dda8628a938f1fe58", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b0f247bf741a1a9729363dda8628a938f1fe58", "html_url": "https://github.com/rust-lang/rust/commit/a2b0f247bf741a1a9729363dda8628a938f1fe58"}, {"sha": "2426f7c39d105fee7d5ea53ea67b8544e13c57e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2426f7c39d105fee7d5ea53ea67b8544e13c57e9", "html_url": "https://github.com/rust-lang/rust/commit/2426f7c39d105fee7d5ea53ea67b8544e13c57e9"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "6887f480f72e08cdc48647e2d5d419bded916d3a", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2cf7f55662bed29513eb9daecc3e72474ec023f5/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf7f55662bed29513eb9daecc3e72474ec023f5/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=2cf7f55662bed29513eb9daecc3e72474ec023f5", "patch": "@@ -503,37 +503,48 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         // If -Zincremental-verify-ich is specified, re-hash results from\n         // the cache and make sure that they have the expected fingerprint.\n-        if self.sess.opts.debugging_opts.incremental_verify_ich {\n-            use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n-            use ich::Fingerprint;\n+        if unlikely!(self.sess.opts.debugging_opts.incremental_verify_ich) {\n+            self.incremental_verify_ich::<Q>(&result, dep_node, dep_node_index);\n+        }\n \n-            assert!(Some(self.dep_graph.fingerprint_of(dep_node_index)) ==\n-                    self.dep_graph.prev_fingerprint_of(dep_node),\n-                    \"Fingerprint for green query instance not loaded \\\n-                     from cache: {:?}\", dep_node);\n+        if unlikely!(self.sess.opts.debugging_opts.query_dep_graph) {\n+            self.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n+        }\n \n-            debug!(\"BEGIN verify_ich({:?})\", dep_node);\n-            let mut hcx = self.create_stable_hashing_context();\n-            let mut hasher = StableHasher::new();\n+        job.complete(&result, dep_node_index);\n \n-            result.hash_stable(&mut hcx, &mut hasher);\n+        Ok(result)\n+    }\n \n-            let new_hash: Fingerprint = hasher.finish();\n-            debug!(\"END verify_ich({:?})\", dep_node);\n+    #[inline(never)]\n+    #[cold]\n+    fn incremental_verify_ich<Q: QueryDescription<'gcx>>(\n+        self,\n+        result: &Q::Value,\n+        dep_node: &DepNode,\n+        dep_node_index: DepNodeIndex,\n+    ) {\n+        use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n+        use ich::Fingerprint;\n \n-            let old_hash = self.dep_graph.fingerprint_of(dep_node_index);\n+        assert!(Some(self.dep_graph.fingerprint_of(dep_node_index)) ==\n+                self.dep_graph.prev_fingerprint_of(dep_node),\n+                \"Fingerprint for green query instance not loaded \\\n+                    from cache: {:?}\", dep_node);\n \n-            assert!(new_hash == old_hash, \"Found unstable fingerprints \\\n-                for {:?}\", dep_node);\n-        }\n+        debug!(\"BEGIN verify_ich({:?})\", dep_node);\n+        let mut hcx = self.create_stable_hashing_context();\n+        let mut hasher = StableHasher::new();\n \n-        if self.sess.opts.debugging_opts.query_dep_graph {\n-            self.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n-        }\n+        result.hash_stable(&mut hcx, &mut hasher);\n \n-        job.complete(&result, dep_node_index);\n+        let new_hash: Fingerprint = hasher.finish();\n+        debug!(\"END verify_ich({:?})\", dep_node);\n \n-        Ok(result)\n+        let old_hash = self.dep_graph.fingerprint_of(dep_node_index);\n+\n+        assert!(new_hash == old_hash, \"Found unstable fingerprints \\\n+            for {:?}\", dep_node);\n     }\n \n     fn force_query_with_job<Q: QueryDescription<'gcx>>(\n@@ -578,7 +589,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let ((result, dep_node_index), diagnostics) = res;\n \n-        if self.sess.opts.debugging_opts.query_dep_graph {\n+        if unlikely!(self.sess.opts.debugging_opts.query_dep_graph) {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n         }\n "}]}