{"sha": "1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMmE3Mzg2N2Q5YzA3MzJjODlkYThkZTE5ZDRmMThhNmU4MGRjZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T11:23:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T11:23:26Z"}, "message": "Auto merge of #66952 - 0dvictor:print, r=rkruppe\n\nUse Module::print() instead of a PrintModulePass\n\nllvm::Module has a print() method. It is unnecessary to create a pass just for the purpose of printing LLVM IR.", "tree": {"sha": "7beaee1e6aa73a6372367666c0066d03946f424e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7beaee1e6aa73a6372367666c0066d03946f424e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "html_url": "https://github.com/rust-lang/rust/commit/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d825e35ee8325146e6c175a4c61bcb645b347d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d825e35ee8325146e6c175a4c61bcb645b347d5e", "html_url": "https://github.com/rust-lang/rust/commit/d825e35ee8325146e6c175a4c61bcb645b347d5e"}, {"sha": "85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "html_url": "https://github.com/rust-lang/rust/commit/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81"}], "stats": {"total": 59, "additions": 9, "deletions": 50}, "files": [{"sha": "a05ba9c78e0d2cad0871e5603f1f28e48483b768", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "patch": "@@ -588,14 +588,11 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                     cursor.position() as size_t\n                 }\n \n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    let result =\n-                        llvm::LLVMRustPrintModule(cpm, llmod, out_c.as_ptr(), demangle_callback);\n-                    llvm::LLVMDisposePassManager(cpm);\n-                    result.into_result().map_err(|()| {\n-                        let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n-                        llvm_err(diag_handler, &msg)\n-                    })\n+                let result =\n+                    llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+                result.into_result().map_err(|()| {\n+                    let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n+                    llvm_err(diag_handler, &msg)\n                 })?;\n             }\n "}, {"sha": "5362d180d1b7858cd1c66f04f6bfcefe63f48d71", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "patch": "@@ -1727,8 +1727,7 @@ extern \"C\" {\n                                    Output: *const c_char,\n                                    FileType: FileType)\n                                    -> LLVMRustResult;\n-    pub fn LLVMRustPrintModule(PM: &PassManager<'a>,\n-                               M: &'a Module,\n+    pub fn LLVMRustPrintModule(M: &'a Module,\n                                Output: *const c_char,\n                                Demangle: extern fn(*const c_char,\n                                                    size_t,"}, {"sha": "6698e5d58be2f0ed97a7c05c013b1bbe4707f110", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e2a73867d9c0732c89da8de19d4f18a6e80dcfe/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=1e2a73867d9c0732c89da8de19d4f18a6e80dcfe", "patch": "@@ -658,46 +658,11 @@ class RustAssemblyAnnotationWriter : public AssemblyAnnotationWriter {\n   }\n };\n \n-class RustPrintModulePass : public ModulePass {\n-  raw_ostream* OS;\n-  DemangleFn Demangle;\n-public:\n-  static char ID;\n-  RustPrintModulePass() : ModulePass(ID), OS(nullptr), Demangle(nullptr) {}\n-  RustPrintModulePass(raw_ostream &OS, DemangleFn Demangle)\n-      : ModulePass(ID), OS(&OS), Demangle(Demangle) {}\n-\n-  bool runOnModule(Module &M) override {\n-    RustAssemblyAnnotationWriter AW(Demangle);\n-\n-    M.print(*OS, &AW, false);\n-\n-    return false;\n-  }\n-\n-  void getAnalysisUsage(AnalysisUsage &AU) const override {\n-    AU.setPreservesAll();\n-  }\n-\n-  static StringRef name() { return \"RustPrintModulePass\"; }\n-};\n-\n } // namespace\n \n-namespace llvm {\n-  void initializeRustPrintModulePassPass(PassRegistry&);\n-}\n-\n-char RustPrintModulePass::ID = 0;\n-INITIALIZE_PASS(RustPrintModulePass, \"print-rust-module\",\n-                \"Print rust module to stderr\", false, false)\n-\n extern \"C\" LLVMRustResult\n-LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n-                    const char *Path, DemangleFn Demangle) {\n-  llvm::legacy::PassManager *PM = unwrap<llvm::legacy::PassManager>(PMR);\n+LLVMRustPrintModule(LLVMModuleRef M, const char *Path, DemangleFn Demangle) {\n   std::string ErrorInfo;\n-\n   std::error_code EC;\n   raw_fd_ostream OS(Path, EC, sys::fs::F_None);\n   if (EC)\n@@ -707,11 +672,9 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n     return LLVMRustResult::Failure;\n   }\n \n+  RustAssemblyAnnotationWriter AAW(Demangle);\n   formatted_raw_ostream FOS(OS);\n-\n-  PM->add(new RustPrintModulePass(FOS, Demangle));\n-\n-  PM->run(*unwrap(M));\n+  unwrap(M)->print(FOS, &AAW);\n \n   return LLVMRustResult::Success;\n }"}]}