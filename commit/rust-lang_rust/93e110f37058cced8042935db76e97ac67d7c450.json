{"sha": "93e110f37058cced8042935db76e97ac67d7c450", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTExMGYzNzA1OGNjZWQ4MDQyOTM1ZGI3NmU5N2FjNjdkN2M0NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T21:02:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T21:02:08Z"}, "message": "Auto merge of #886 - Aaron1011:shim/getrandom, r=RalfJung\n\nShim 'libc::getrandom' in addition to 'libc::syscall(libc::SYS_getrandom)'", "tree": {"sha": "b533efa08979a6d417458094337c4489ced408af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b533efa08979a6d417458094337c4489ced408af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e110f37058cced8042935db76e97ac67d7c450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e110f37058cced8042935db76e97ac67d7c450", "html_url": "https://github.com/rust-lang/rust/commit/93e110f37058cced8042935db76e97ac67d7c450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e110f37058cced8042935db76e97ac67d7c450/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96adbf65bc0b450d9889ee43bf744f80c466864a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96adbf65bc0b450d9889ee43bf744f80c466864a", "html_url": "https://github.com/rust-lang/rust/commit/96adbf65bc0b450d9889ee43bf744f80c466864a"}, {"sha": "f830a6c69ecef2e87a24be1dca68537411b04f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/f830a6c69ecef2e87a24be1dca68537411b04f84", "html_url": "https://github.com/rust-lang/rust/commit/f830a6c69ecef2e87a24be1dca68537411b04f84"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "538109eceae7e0f9548e6791e5f4d8d2a0b0c4a7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/93e110f37058cced8042935db76e97ac67d7c450/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e110f37058cced8042935db76e97ac67d7c450/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=93e110f37058cced8042935db76e97ac67d7c450", "patch": "@@ -293,22 +293,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                 match this.read_scalar(args[0])?.to_usize(this)? {\n                     id if id == sys_getrandom => {\n-                        let ptr = this.read_scalar(args[1])?.not_undef()?;\n-                        let len = this.read_scalar(args[2])?.to_usize(this)?;\n-\n-                        // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n-                        // neither of which have any effect on our current PRNG\n-                        let _flags = this.read_scalar(args[3])?.to_i32()?;\n-\n-                        this.gen_random(ptr, len as usize)?;\n-                        this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+                        // The first argument is the syscall id,\n+                        // so skip over it.\n+                        linux_getrandom(this, &args[1..], dest)?;\n                     }\n                     id => {\n                         throw_unsup_format!(\"miri does not support syscall ID {}\", id)\n                     }\n                 }\n             }\n \n+            \"getrandom\" => {\n+                linux_getrandom(this, args, dest)?;\n+            }\n+\n             \"dlsym\" => {\n                 let _handle = this.read_scalar(args[0])?;\n                 let symbol = this.read_scalar(args[1])?.not_undef()?;\n@@ -969,3 +967,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return Ok(None);\n     }\n }\n+\n+// Shims the linux 'getrandom()' syscall.\n+fn linux_getrandom<'tcx>(\n+    this: &mut MiriEvalContext<'_, 'tcx>,\n+    args: &[OpTy<'tcx, Tag>],\n+    dest: PlaceTy<'tcx, Tag>,\n+) -> InterpResult<'tcx> {\n+    let ptr = this.read_scalar(args[0])?.not_undef()?;\n+    let len = this.read_scalar(args[1])?.to_usize(this)?;\n+\n+    // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+    // neither of which have any effect on our current PRNG.\n+    let _flags = this.read_scalar(args[2])?.to_i32()?;\n+\n+    this.gen_random(ptr, len as usize)?;\n+    this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+    Ok(())\n+}"}, {"sha": "f582a282c59b4f56ac93973bb2dfdb8e31f9e2c4", "filename": "tests/run-pass/linux-getrandom.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93e110f37058cced8042935db76e97ac67d7c450/tests%2Frun-pass%2Flinux-getrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e110f37058cced8042935db76e97ac67d7c450/tests%2Frun-pass%2Flinux-getrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flinux-getrandom.rs?ref=93e110f37058cced8042935db76e97ac67d7c450", "patch": "@@ -0,0 +1,17 @@\n+// Unfortunately, compiletest_rs does not support 'only-linux',\n+// so we need to ignore Windows and macOS instead.\n+// ignore-macos: Uses Linux-only APIs\n+// ignore-windows: Uses Linux-only APIs\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+fn main() {\n+    let mut buf = [0u8; 5];\n+    unsafe {\n+        assert_eq!(libc::syscall(libc::SYS_getrandom, 0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint), 0);\n+        assert_eq!(libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint), 5);\n+\n+        assert_eq!(libc::getrandom(0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint), 0);\n+        assert_eq!(libc::getrandom(buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint), 5);\n+    }\n+}"}]}