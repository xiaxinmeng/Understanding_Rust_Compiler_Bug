{"sha": "de237823e01347a48819d34fe8e0cf130e3e54cb", "node_id": "C_kwDOAAsO6NoAKGRlMjM3ODIzZTAxMzQ3YTQ4ODE5ZDM0ZmU4ZTBjZjEzMGUzZTU0Y2I", "commit": {"author": {"name": "ohno418", "email": "yutaro.ono.418@gmail.com", "date": "2022-04-03T15:08:54Z"}, "committer": {"name": "ohno418", "email": "yutaro.ono.418@gmail.com", "date": "2022-04-05T02:40:25Z"}, "message": "Suggest only when all fields impl the trait", "tree": {"sha": "5375d51c2995fe9ae4715f5a725b95a1adc60f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5375d51c2995fe9ae4715f5a725b95a1adc60f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de237823e01347a48819d34fe8e0cf130e3e54cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de237823e01347a48819d34fe8e0cf130e3e54cb", "html_url": "https://github.com/rust-lang/rust/commit/de237823e01347a48819d34fe8e0cf130e3e54cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de237823e01347a48819d34fe8e0cf130e3e54cb/comments", "author": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "html_url": "https://github.com/rust-lang/rust/commit/0ff2f58330a590fcc967b890731d2ebedf6ecb0c"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "0f5f4f3c60f255087293c809a058029a69534278", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de237823e01347a48819d34fe8e0cf130e3e54cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de237823e01347a48819d34fe8e0cf130e3e54cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=de237823e01347a48819d34fe8e0cf130e3e54cb", "patch": "@@ -536,7 +536,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                         self.note_version_mismatch(&mut err, &trait_ref);\n                         self.suggest_remove_await(&obligation, &mut err);\n-                        self.suggest_derive(&mut err, trait_predicate);\n+                        self.suggest_derive(&obligation, &mut err, trait_predicate);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try("}, {"sha": "c2193bbeec49e734bb9ca0b2b228f4d384617832", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/de237823e01347a48819d34fe8e0cf130e3e54cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de237823e01347a48819d34fe8e0cf130e3e54cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=de237823e01347a48819d34fe8e0cf130e3e54cb", "patch": "@@ -190,7 +190,12 @@ pub trait InferCtxtExt<'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n \n-    fn suggest_derive(&self, err: &mut Diagnostic, trait_pred: ty::PolyTraitPredicate<'tcx>);\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2592,33 +2597,60 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_derive(&self, err: &mut Diagnostic, trait_pred: ty::PolyTraitPredicate<'tcx>) {\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n         let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) else {\n             return;\n         };\n-        let Some(self_ty) = trait_pred.self_ty().no_bound_vars() else {\n-            return;\n-        };\n-\n-        let adt = match self_ty.ty_adt_def() {\n-            Some(adt) if adt.did().is_local() => adt,\n+        let (adt, substs) = match trait_pred.skip_binder().self_ty().kind() {\n+            ty::Adt(adt, substs) if adt.did().is_local() => (adt, substs),\n             _ => return,\n         };\n-        let can_derive = match diagnostic_name {\n-            sym::Default => !adt.is_enum(),\n-            sym::PartialEq | sym::PartialOrd => {\n-                let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n-                self_ty == rhs_ty\n-            }\n-            sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n-            _ => false,\n+        let can_derive = {\n+            let is_derivable_trait = match diagnostic_name {\n+                sym::Default => !adt.is_enum(),\n+                sym::PartialEq | sym::PartialOrd => {\n+                    let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n+                    trait_pred.skip_binder().self_ty() == rhs_ty\n+                }\n+                sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n+                _ => false,\n+            };\n+            is_derivable_trait &&\n+                // Ensure all fields impl the trait.\n+                adt.all_fields().all(|field| {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    let trait_substs = match diagnostic_name {\n+                        sym::PartialEq | sym::PartialOrd => {\n+                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                        }\n+                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                    };\n+                    let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            substs: trait_substs,\n+                            ..trait_pred.skip_binder().trait_ref\n+                        },\n+                        ..*tr\n+                    });\n+                    let field_obl = Obligation::new(\n+                        obligation.cause.clone(),\n+                        obligation.param_env,\n+                        trait_pred.to_predicate(self.tcx),\n+                    );\n+                    self.predicate_must_hold_modulo_regions(&field_obl)\n+                })\n         };\n         if can_derive {\n             err.span_suggestion_verbose(\n                 self.tcx.def_span(adt.did()).shrink_to_lo(),\n                 &format!(\n                     \"consider annotating `{}` with `#[derive({})]`\",\n-                    trait_pred.skip_binder().self_ty().to_string(),\n+                    trait_pred.skip_binder().self_ty(),\n                     diagnostic_name.to_string(),\n                 ),\n                 format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),"}, {"sha": "26e2848e7f7a1bbb41106988641c807a82f2e084", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de237823e01347a48819d34fe8e0cf130e3e54cb/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de237823e01347a48819d34fe8e0cf130e3e54cb/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=de237823e01347a48819d34fe8e0cf130e3e54cb", "patch": "@@ -7,10 +7,6 @@ LL |     [Foo(String::new()); 4];\n    = help: the following implementations were found:\n              <Foo<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n-help: consider annotating `Foo<String>` with `#[derive(Copy)]`\n-   |\n-LL | #[derive(Copy)]\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "e147366a22410bf6e903f0639f4eae3468bdd3d4", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de237823e01347a48819d34fe8e0cf130e3e54cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de237823e01347a48819d34fe8e0cf130e3e54cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=de237823e01347a48819d34fe8e0cf130e3e54cb", "patch": "@@ -129,10 +129,6 @@ note: required by a bound in `assert_copy`\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n-help: consider annotating `MyNoncopyStruct` with `#[derive(Copy)]`\n-   |\n-LL | #[derive(Copy)]\n-   |\n \n error[E0277]: the trait bound `Rc<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:67:19"}]}