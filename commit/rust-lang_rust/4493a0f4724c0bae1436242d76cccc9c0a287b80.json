{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "node_id": "C_kwDOAAsO6NoAKDQ0OTNhMGY0NzI0YzBiYWUxNDM2MjQyZDc2Y2NjYzljMGEyODdiODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T17:18:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T17:18:58Z"}, "message": "Auto merge of #100063 - matthiaskrgr:rollup-lznouys, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #99987 (Always include a position span in `rustc_parse_format::Argument`)\n - #100005 (Remove Clean trait for ast::Attribute and improve Attributes::from_ast)\n - #100025 (Remove redundant `TransferWrapper` struct)\n - #100045 (Properly reject the `may_unwind` option in `global_asm!`)\n - #100052 (RISC-V ASM test: relax label name constraint.)\n - #100053 (move [`assertions_on_result_states`] to restriction)\n - #100057 (Remove more Clean trait implementations)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3e18e27433bbabc2a58f2bd9b5fffa2ff4fd9d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e18e27433bbabc2a58f2bd9b5fffa2ff4fd9d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f4950cbdb5a0a59063156af6383283b1aae30e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f4950cbdb5a0a59063156af6383283b1aae30e", "html_url": "https://github.com/rust-lang/rust/commit/06f4950cbdb5a0a59063156af6383283b1aae30e"}, {"sha": "269d15fbf88e6c8ca41f058190ece0e484d5beba", "url": "https://api.github.com/repos/rust-lang/rust/commits/269d15fbf88e6c8ca41f058190ece0e484d5beba", "html_url": "https://github.com/rust-lang/rust/commit/269d15fbf88e6c8ca41f058190ece0e484d5beba"}], "stats": {"total": 335, "additions": 185, "deletions": 150}, "files": [{"sha": "1a0ea8f416064f27c0b90a31254c9f0dd7af6731", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -410,12 +410,12 @@ fn parse_options<'a>(\n             try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n         } else if !is_global_asm && p.eat_keyword(sym::nostack) {\n             try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n+        } else if !is_global_asm && p.eat_keyword(sym::may_unwind) {\n+            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else if p.eat_keyword(sym::att_syntax) {\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         } else if p.eat_keyword(kw::Raw) {\n             try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::RAW);\n-        } else if p.eat_keyword(sym::may_unwind) {\n-            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else {\n             return p.unexpected();\n         }\n@@ -656,7 +656,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                     let span = arg_spans.next().unwrap_or(template_sp);\n \n                     let operand_idx = match arg.position {\n-                        parse::ArgumentIs(idx, _) | parse::ArgumentImplicitlyIs(idx) => {\n+                        parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n                                 || args.reg_args.contains(&idx)\n@@ -702,11 +702,12 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                 Some(idx)\n                             }\n                         }\n-                        parse::ArgumentNamed(name, span) => {\n+                        parse::ArgumentNamed(name) => {\n                             match args.named_args.get(&Symbol::intern(name)) {\n                                 Some(&idx) => Some(idx),\n                                 None => {\n                                     let msg = format!(\"there is no argument named `{}`\", name);\n+                                    let span = arg.position_span;\n                                     ecx.struct_span_err(\n                                         template_span\n                                             .from_inner(InnerSpan::new(span.start, span.end)),"}, {"sha": "f536d0b5900bccaf1170671c27fa6db0fb1b2f5c", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -381,8 +381,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         match *p {\n             parse::String(_) => {}\n             parse::NextArgument(ref mut arg) => {\n-                if let parse::ArgumentNamed(s, _) = arg.position {\n-                    arg.position = parse::ArgumentIs(lookup(s), None);\n+                if let parse::ArgumentNamed(s) = arg.position {\n+                    arg.position = parse::ArgumentIs(lookup(s));\n                 }\n                 if let parse::CountIsName(s, _) = arg.format.width {\n                     arg.format.width = parse::CountIsParam(lookup(s));\n@@ -417,14 +417,14 @@ impl<'a, 'b> Context<'a, 'b> {\n                 // argument second, if it's an implicit positional parameter\n                 // it's written second, so it should come after width/precision.\n                 let pos = match arg.position {\n-                    parse::ArgumentIs(i, arg_end) => {\n+                    parse::ArgumentIs(i) => {\n                         self.unused_names_lint.maybe_add_positional_named_arg(\n                             i,\n                             self.args.len(),\n                             i,\n                             PositionalNamedArgType::Arg,\n                             self.curpiece,\n-                            arg_end,\n+                            Some(arg.position_span),\n                             &self.names,\n                         );\n \n@@ -442,8 +442,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                         );\n                         Exact(i)\n                     }\n-                    parse::ArgumentNamed(s, span) => {\n+                    parse::ArgumentNamed(s) => {\n                         let symbol = Symbol::intern(s);\n+                        let span = arg.position_span;\n                         Named(symbol, InnerSpan::new(span.start, span.end))\n                     }\n                 };\n@@ -878,8 +879,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                         // track the current argument ourselves.\n                         let i = self.curarg;\n                         self.curarg += 1;\n-                        parse::ArgumentIs(i, None)\n+                        parse::ArgumentIs(i)\n                     },\n+                    position_span: arg.position_span,\n                     format: parse::FormatSpec {\n                         fill: arg.format.fill,\n                         align: parse::AlignUnknown,"}, {"sha": "21132eb991fd5c69fdeb25495bc3ef24660ee5be", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -222,18 +222,6 @@ impl<'a, 'tcx> AnalysisDomain<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     }\n }\n \n-struct TransferWrapper<'a>(&'a mut ChunkedBitSet<Local>);\n-\n-impl<'a> GenKill<Local> for TransferWrapper<'a> {\n-    fn gen(&mut self, l: Local) {\n-        self.0.insert(l);\n-    }\n-\n-    fn kill(&mut self, l: Local) {\n-        self.0.remove(l);\n-    }\n-}\n-\n impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     fn apply_statement_effect(\n         &self,\n@@ -271,7 +259,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n                 return;\n             }\n         }\n-        TransferFunction(&mut TransferWrapper(trans)).visit_statement(statement, location);\n+        TransferFunction(trans).visit_statement(statement, location);\n     }\n \n     fn apply_terminator_effect(\n@@ -280,7 +268,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n-        TransferFunction(&mut TransferWrapper(trans)).visit_terminator(terminator, location);\n+        TransferFunction(trans).visit_terminator(terminator, location);\n     }\n \n     fn apply_call_return_effect("}, {"sha": "a7ff9711691fb2dfd8fbfdccff0c2455206786a3", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -70,6 +70,9 @@ pub enum Piece<'a> {\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n+    /// The span of the position indicator. Includes any whitespace in implicit\n+    /// positions (`{  }`).\n+    pub position_span: InnerSpan,\n     /// How to format the argument\n     pub format: FormatSpec<'a>,\n }\n@@ -105,9 +108,9 @@ pub enum Position<'a> {\n     /// The argument is implied to be located at an index\n     ArgumentImplicitlyIs(usize),\n     /// The argument is located at a specific index given in the format,\n-    ArgumentIs(usize, Option<InnerSpan>),\n+    ArgumentIs(usize),\n     /// The argument has a name.\n-    ArgumentNamed(&'a str, InnerSpan),\n+    ArgumentNamed(&'a str),\n }\n \n impl Position<'_> {\n@@ -216,14 +219,15 @@ impl<'a> Iterator for Parser<'a> {\n                 '{' => {\n                     let curr_last_brace = self.last_opening_brace;\n                     let byte_pos = self.to_span_index(pos);\n-                    self.last_opening_brace = Some(byte_pos.to(InnerOffset(byte_pos.0 + 1)));\n+                    let lbrace_end = InnerOffset(byte_pos.0 + 1);\n+                    self.last_opening_brace = Some(byte_pos.to(lbrace_end));\n                     self.cur.next();\n                     if self.consume('{') {\n                         self.last_opening_brace = curr_last_brace;\n \n                         Some(String(self.string(pos + 1)))\n                     } else {\n-                        let arg = self.argument();\n+                        let arg = self.argument(lbrace_end);\n                         if let Some(rbrace_byte_idx) = self.must_consume('}') {\n                             let lbrace_inner_offset = self.to_span_index(pos);\n                             let rbrace_inner_offset = self.to_span_index(rbrace_byte_idx);\n@@ -477,8 +481,16 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an `Argument` structure, or what's contained within braces inside the format string.\n-    fn argument(&mut self) -> Argument<'a> {\n+    fn argument(&mut self, start: InnerOffset) -> Argument<'a> {\n         let pos = self.position();\n+\n+        let end = self\n+            .cur\n+            .clone()\n+            .find(|(_, ch)| !ch.is_whitespace())\n+            .map_or(start, |(end, _)| self.to_span_index(end));\n+        let position_span = start.to(end);\n+\n         let format = match self.mode {\n             ParseMode::Format => self.format(),\n             ParseMode::InlineAsm => self.inline_asm(),\n@@ -494,31 +506,19 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Argument { position: pos, format }\n+        Argument { position: pos, position_span, format }\n     }\n \n     /// Parses a positional argument for a format. This could either be an\n     /// integer index of an argument, a named argument, or a blank string.\n     /// Returns `Some(parsed_position)` if the position is not implicitly\n     /// consuming a macro argument, `None` if it's the case.\n     fn position(&mut self) -> Option<Position<'a>> {\n-        let start_position = self.cur.peek().map(|item| item.0);\n         if let Some(i) = self.integer() {\n-            let inner_span = start_position.and_then(|start| {\n-                self.cur\n-                    .peek()\n-                    .cloned()\n-                    .and_then(|item| Some(self.to_span_index(start).to(self.to_span_index(item.0))))\n-            });\n-            Some(ArgumentIs(i, inner_span))\n+            Some(ArgumentIs(i))\n         } else {\n             match self.cur.peek() {\n-                Some(&(start, c)) if rustc_lexer::is_id_start(c) => {\n-                    let word = self.word();\n-                    let end = start + word.len();\n-                    let span = self.to_span_index(start).to(self.to_span_index(end));\n-                    Some(ArgumentNamed(word, span))\n-                }\n+                Some(&(_, c)) if rustc_lexer::is_id_start(c) => Some(ArgumentNamed(self.word())),\n \n                 // This is an `ArgumentNext`.\n                 // Record the fact and do the resolution after parsing the"}, {"sha": "578530696105d5595e6ae4e5a324af849f2a0c11", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -58,14 +58,22 @@ fn invalid06() {\n \n #[test]\n fn format_nothing() {\n-    same(\"{}\", &[NextArgument(Argument { position: ArgumentImplicitlyIs(0), format: fmtdflt() })]);\n+    same(\n+        \"{}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n+            format: fmtdflt(),\n+        })],\n+    );\n }\n #[test]\n fn format_position() {\n     same(\n         \"{3}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: fmtdflt(),\n         })],\n     );\n@@ -75,17 +83,30 @@ fn format_position_nothing_else() {\n     same(\n         \"{3:}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: fmtdflt(),\n         })],\n     );\n }\n #[test]\n+fn format_named() {\n+    same(\n+        \"{name}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentNamed(\"name\"),\n+            position_span: InnerSpan { start: 2, end: 6 },\n+            format: fmtdflt(),\n+        })],\n+    )\n+}\n+#[test]\n fn format_type() {\n     same(\n         \"{3:x}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -105,7 +126,8 @@ fn format_align_fill() {\n     same(\n         \"{3:>}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignRight,\n@@ -122,7 +144,8 @@ fn format_align_fill() {\n     same(\n         \"{3:0<}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n                 fill: Some('0'),\n                 align: AlignLeft,\n@@ -139,7 +162,8 @@ fn format_align_fill() {\n     same(\n         \"{3:*<abcd}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(3, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(3),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n                 fill: Some('*'),\n                 align: AlignLeft,\n@@ -160,6 +184,7 @@ fn format_counts() {\n         \"{:10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -177,6 +202,7 @@ fn format_counts() {\n         \"{:10$.10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -193,7 +219,8 @@ fn format_counts() {\n     same(\n         \"{1:0$.10x}\",\n         &[NextArgument(Argument {\n-            position: ArgumentIs(1, Some(InnerSpan { start: 2, end: 3 })),\n+            position: ArgumentIs(1),\n+            position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -211,6 +238,7 @@ fn format_counts() {\n         \"{:.*x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(1),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -228,6 +256,7 @@ fn format_counts() {\n         \"{:.10$x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -245,6 +274,7 @@ fn format_counts() {\n         \"{:a$.b$?}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -265,6 +295,7 @@ fn format_flags() {\n         \"{:-}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -282,6 +313,7 @@ fn format_flags() {\n         \"{:+#}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n@@ -303,7 +335,8 @@ fn format_mixture() {\n         &[\n             String(\"abcd \"),\n             NextArgument(Argument {\n-                position: ArgumentIs(3, Some(InnerSpan { start: 7, end: 8 })),\n+                position: ArgumentIs(3),\n+                position_span: InnerSpan { start: 7, end: 8 },\n                 format: FormatSpec {\n                     fill: None,\n                     align: AlignUnknown,\n@@ -320,3 +353,22 @@ fn format_mixture() {\n         ],\n     );\n }\n+#[test]\n+fn format_whitespace() {\n+    same(\n+        \"{ }\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 3 },\n+            format: fmtdflt(),\n+        })],\n+    );\n+    same(\n+        \"{  }\",\n+        &[NextArgument(Argument {\n+            position: ArgumentImplicitlyIs(0),\n+            position_span: InnerSpan { start: 2, end: 4 },\n+            format: fmtdflt(),\n+        })],\n+    );\n+}"}, {"sha": "9227bbf011dbfcb2c2d43475778289ed38f2bbf5", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -300,7 +300,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             match token {\n                 Piece::String(_) => (), // Normal string, no need to check it\n                 Piece::NextArgument(a) => match a.position {\n-                    Position::ArgumentNamed(s, _) => {\n+                    Position::ArgumentNamed(s) => {\n                         match Symbol::intern(s) {\n                             // `{Self}` is allowed\n                             kw::SelfUpper => (),\n@@ -386,7 +386,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             .map(|p| match p {\n                 Piece::String(s) => s,\n                 Piece::NextArgument(a) => match a.position {\n-                    Position::ArgumentNamed(s, _) => {\n+                    Position::ArgumentNamed(s) => {\n                         let s = Symbol::intern(s);\n                         match generic_map.get(&s) {\n                             Some(val) => val,"}, {"sha": "4c7c9412edda755c99fc9e8cd4ea062c358b61fb", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             kind: Box::new(ImplItem(Box::new(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx)),\n+                trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, &[])),\n                 for_: clean_middle_ty(ty, self.cx, None),\n                 items: Vec::new(),\n                 polarity,"}, {"sha": "01dd95e6e409395848bb6eeca124ca3ad9d9bea3", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(trait_ref.0.clean(cx)),\n+                            trait_: Some(clean_trait_ref_with_bindings(cx, trait_ref.0, &[])),\n                             for_: clean_middle_ty(ty.0, cx, None),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)"}, {"sha": "f644ecb88b931eaa3ab643204cfed16b9ac9176f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -16,9 +16,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n-    clean_ty_generics, clean_variant_def, clean_visibility, utils, Attributes, AttributesExt,\n-    Clean, ImplKind, ItemId, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty,\n+    clean_trait_ref_with_bindings, clean_ty, clean_ty_generics, clean_variant_def,\n+    clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -304,14 +304,14 @@ fn merge_attrs(\n         both.extend_from_slice(old_attrs);\n         (\n             if let Some(new_id) = parent_module {\n-                Attributes::from_ast(old_attrs, Some((inner, new_id)))\n+                Attributes::from_ast_with_additional(old_attrs, (inner, new_id))\n             } else {\n-                Attributes::from_ast(&both, None)\n+                Attributes::from_ast(&both)\n             },\n             both.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n     } else {\n-        (old_attrs.clean(cx), old_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg))\n+        (Attributes::from_ast(&old_attrs), old_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg))\n     }\n }\n \n@@ -450,7 +450,7 @@ pub(crate) fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.map(|t| t.clean(cx));\n+    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, &[]));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "4777f9c96e6eef2e975e005926ff91300cfe4431", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -121,16 +121,10 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Attributes> for [ast::Attribute] {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Attributes {\n-        Attributes::from_ast(self, None)\n-    }\n-}\n-\n impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n         Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n+            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n@@ -163,7 +157,7 @@ impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     }\n }\n \n-fn clean_trait_ref_with_bindings<'tcx>(\n+pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     bindings: &[TypeBinding],\n@@ -180,12 +174,6 @@ fn clean_trait_ref_with_bindings<'tcx>(\n     path\n }\n \n-impl<'tcx> Clean<'tcx, Path> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        clean_trait_ref_with_bindings(cx, *self, &[])\n-    }\n-}\n-\n fn clean_poly_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -220,21 +208,19 @@ impl<'tcx> Clean<'tcx, GenericBound> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Lifetime> for hir::Lifetime {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Lifetime {\n-        let def = cx.tcx.named_region(self.hir_id);\n-        if let Some(\n-            rl::Region::EarlyBound(_, node_id)\n-            | rl::Region::LateBound(_, _, node_id)\n-            | rl::Region::Free(_, node_id),\n-        ) = def\n-        {\n-            if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n-                return lt;\n-            }\n+fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n+    let def = cx.tcx.named_region(lifetime.hir_id);\n+    if let Some(\n+        rl::Region::EarlyBound(_, node_id)\n+        | rl::Region::LateBound(_, _, node_id)\n+        | rl::Region::Free(_, node_id),\n+    ) = def\n+    {\n+        if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n+            return lt;\n         }\n-        Lifetime(self.name.ident().name)\n     }\n+    Lifetime(lifetime.name.ident().name)\n }\n \n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n@@ -311,7 +297,7 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n-                lifetime: wrp.lifetime.clean(cx),\n+                lifetime: clean_lifetime(wrp.lifetime, cx),\n                 bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n             },\n \n@@ -432,7 +418,7 @@ fn clean_projection<'tcx>(\n     def_id: Option<DefId>,\n ) -> Type {\n     let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n+    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), &[]);\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -524,7 +510,7 @@ fn clean_generic_param<'tcx>(\n                     .filter(|bp| !bp.in_where_clause)\n                     .flat_map(|bp| bp.bounds)\n                     .map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => lt.clean(cx),\n+                        hir::GenericBound::Outlives(lt) => clean_lifetime(*lt, cx),\n                         _ => panic!(),\n                     })\n                     .collect()\n@@ -1431,7 +1417,8 @@ fn maybe_expand_private_type_alias<'tcx>(\n                 });\n                 if let Some(lt) = lifetime.cloned() {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned = if !lt.is_elided() { lt.clean(cx) } else { Lifetime::elided() };\n+                    let cleaned =\n+                        if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n@@ -1503,7 +1490,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n             // there's no case where it could cause the function to fail to compile.\n             let elided =\n                 l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n-            let lifetime = if elided { None } else { Some(l.clean(cx)) };\n+            let lifetime = if elided { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }\n         TyKind::Slice(ty) => Slice(Box::new(clean_ty(ty, cx))),\n@@ -1539,7 +1526,8 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::Path(_) => clean_qpath(ty, cx),\n         TyKind::TraitObject(bounds, ref lifetime, _) => {\n             let bounds = bounds.iter().map(|bound| bound.clean(cx)).collect();\n-            let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n+            let lifetime =\n+                if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n@@ -1875,7 +1863,7 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                 .iter()\n                 .map(|arg| match arg {\n                     hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n-                        GenericArg::Lifetime(lt.clean(cx))\n+                        GenericArg::Lifetime(clean_lifetime(*lt, cx))\n                     }\n                     hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                     hir::GenericArg::Type(ty) => GenericArg::Type(clean_ty(ty, cx)),\n@@ -2096,7 +2084,7 @@ fn clean_extern_crate<'tcx>(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: Box::new(attrs.clean(cx)),\n+        attrs: Box::new(Attributes::from_ast(attrs)),\n         item_id: crate_def_id.into(),\n         visibility: clean_visibility(ty_vis),\n         kind: Box::new(ExternCrateItem { src: orig_name }),"}, {"sha": "0e6de842cc267276dbc0bba4230a34e16ac1351a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -34,10 +34,10 @@ use rustc_target::spec::abi::Abi;\n use rustc_typeck::check::intrinsic::intrinsic_operation_unsafety;\n \n use crate::clean::cfg::Cfg;\n+use crate::clean::clean_visibility;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n-use crate::clean::{clean_visibility, Clean};\n use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -469,7 +469,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            Box::new(ast_attrs.clean(cx)),\n+            Box::new(Attributes::from_ast(ast_attrs)),\n             cx,\n             ast_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n@@ -1161,14 +1161,16 @@ impl Attributes {\n         false\n     }\n \n-    pub(crate) fn from_ast(\n+    pub(crate) fn from_ast(attrs: &[ast::Attribute]) -> Attributes {\n+        Attributes::from_ast_iter(attrs.iter().map(|attr| (attr, None)), false)\n+    }\n+\n+    pub(crate) fn from_ast_with_additional(\n         attrs: &[ast::Attribute],\n-        additional_attrs: Option<(&[ast::Attribute], DefId)>,\n+        (additional_attrs, def_id): (&[ast::Attribute], DefId),\n     ) -> Attributes {\n         // Additional documentation should be shown before the original documentation.\n-        let attrs1 = additional_attrs\n-            .into_iter()\n-            .flat_map(|(attrs, def_id)| attrs.iter().map(move |attr| (attr, Some(def_id))));\n+        let attrs1 = additional_attrs.iter().map(|attr| (attr, Some(def_id)));\n         let attrs2 = attrs.iter().map(|attr| (attr, None));\n         Attributes::from_ast_iter(attrs1.chain(attrs2), false)\n     }"}, {"sha": "35964e3ba38e4ad284dd0d0cb3698c2f5abdbe7f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -1222,7 +1222,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n \n         // The collapse-docs pass won't combine sugared/raw doc attributes, or included files with\n         // anything else, this will combine them for us.\n-        let attrs = Attributes::from_ast(ast_attrs, None);\n+        let attrs = Attributes::from_ast(ast_attrs);\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             // Use the outermost invocation, so that doctest names come from where the docs were written.\n             let span = ast_attrs"}, {"sha": "99cf4291927fb3dc2d84c60548c529711c96994d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -345,7 +345,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n             clean::ImportItem(ref import) => {\n                 let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n                     let ast_attrs = cx.tcx().get_attrs_unchecked(import_def_id);\n-                    let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs, None));\n+                    let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs));\n \n                     // Just need an item with the correct def_id and attrs\n                     let import_item = clean::Item {"}, {"sha": "68dc186ea0c7658e38ff31eae9568acf52ac84d9", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -56,7 +56,7 @@ pub unsafe fn sym_fn() {\n // CHECK-LABEL: sym_static:\n // CHECK: #APP\n // CHECK: auipc t0, %pcrel_hi(extern_static)\n-// CHECK: lb t0, %pcrel_lo(.Lpcrel_hi0)(t0)\n+// CHECK: lb t0, %pcrel_lo(.Lpcrel_hi{{[0-9]+}})(t0)\n // CHECK: #NO_APP\n #[no_mangle]\n pub unsafe fn sym_static() {"}, {"sha": "21bcc4a9c7badd4ddbc01351734661187eb6d68a", "filename": "src/test/ui/asm/aarch64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -36,41 +36,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n    |                    |\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:28:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:30:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:32:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:34:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:36:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:38:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "804966b06ba7dfdf1f19b368bc5c85f4fb61dcb2", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -260,23 +260,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:108:30"}, {"sha": "e2351840eef211612b880b82ec4c538f50e3cfeb", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -45,41 +45,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                    |             clobber_abi\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:31:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:33:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:35:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:37:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:39:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:41:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "57702c37b7ce2ff29554eb5bc166d5b66fbca13d", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -266,23 +266,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:108:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:110:30"}, {"sha": "4caab6230909c519f52242b0e7ae8a66f2f83801", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -19,6 +19,9 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// An assertion failure cannot output an useful message of the error.\n     ///\n+    /// ### Known problems\n+    /// The suggested replacement decreases the readability of code and log output.\n+    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// # let r = Ok::<_, ()>(());\n@@ -28,7 +31,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.64.0\"]\n     pub ASSERTIONS_ON_RESULT_STATES,\n-    style,\n+    restriction,\n     \"`assert!(r.is_ok())`/`assert!(r.is_err())` gives worse error message than directly calling `r.unwrap()`/`r.unwrap_err()`\"\n }\n "}, {"sha": "0ba9b7ae7e581dd9783265bacc2c07482e9ac253", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -6,7 +6,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),"}, {"sha": "a7339ef272174d4ee4955b60edd66778cd032461", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(as_underscore::AS_UNDERSCORE),\n     LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n     LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n+    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON),\n     LintId::of(casts::FN_TO_NUMERIC_CAST_ANY),\n     LintId::of(create_dir::CREATE_DIR),"}, {"sha": "e95bab1d0454d3d496e5fa65018b1dd0793141d6", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -4,7 +4,6 @@\n \n store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),"}, {"sha": "32718200c0b3a037a2793855e81d0f835bbddcab", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493a0f4724c0bae1436242d76cccc9c0a287b80/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=4493a0f4724c0bae1436242d76cccc9c0a287b80", "patch": "@@ -441,7 +441,7 @@ impl SimpleFormatArgs {\n         };\n \n         match arg.position {\n-            ArgumentIs(n, _) | ArgumentImplicitlyIs(n) => {\n+            ArgumentIs(n) | ArgumentImplicitlyIs(n) => {\n                 if self.unnamed.len() <= n {\n                     // Use a dummy span to mark all unseen arguments.\n                     self.unnamed.resize_with(n, || vec![DUMMY_SP]);\n@@ -462,7 +462,7 @@ impl SimpleFormatArgs {\n                     }\n                 }\n             },\n-            ArgumentNamed(n, _) => {\n+            ArgumentNamed(n) => {\n                 let n = Symbol::intern(n);\n                 if let Some(x) = self.named.iter_mut().find(|x| x.0 == n) {\n                     match x.1.as_slice() {"}]}