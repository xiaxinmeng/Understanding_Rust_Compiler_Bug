{"sha": "7feb802d8982fe69d7d6acef532a87ada8aae9fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZWI4MDJkODk4MmZlNjlkN2Q2YWNlZjUzMmE4N2FkYThhYWU5ZmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-12T06:04:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-12T06:04:54Z"}, "message": "Small tweaks to parser errors", "tree": {"sha": "25ea60e0d80f142982a38a051e8286b4eda7fb15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ea60e0d80f142982a38a051e8286b4eda7fb15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7feb802d8982fe69d7d6acef532a87ada8aae9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7feb802d8982fe69d7d6acef532a87ada8aae9fb", "html_url": "https://github.com/rust-lang/rust/commit/7feb802d8982fe69d7d6acef532a87ada8aae9fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7feb802d8982fe69d7d6acef532a87ada8aae9fb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3c4be099993517dba7bb764628ff28e86f9320", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3c4be099993517dba7bb764628ff28e86f9320", "html_url": "https://github.com/rust-lang/rust/commit/de3c4be099993517dba7bb764628ff28e86f9320"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "ee93696c602dc9f3323312418378a7de25657eea", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7feb802d8982fe69d7d6acef532a87ada8aae9fb", "patch": "@@ -1012,7 +1012,10 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &format!(\"{} with a suffix is invalid\", kind));\n+                let msg = format!(\"{} with a suffix is invalid\", kind);\n+                self.struct_span_err(sp, &msg)\n+                    .span_label(sp, msg)\n+                    .emit();\n             }\n         }\n     }\n@@ -1768,9 +1771,11 @@ impl<'a> Parser<'a> {\n             Mutability::Immutable\n         } else {\n             let span = self.prev_span;\n-            self.span_err(span,\n-                          \"expected mut or const in raw pointer type (use \\\n-                           `*mut T` or `*const T` as appropriate)\");\n+            let msg = \"expected mut or const in raw pointer type\";\n+            self.struct_span_err(span, msg)\n+                .span_label(span, msg)\n+                .help(\"use `*mut T` or `*const T` as appropriate\")\n+                .emit();\n             Mutability::Immutable\n         };\n         let t = self.parse_ty_no_plus()?;\n@@ -5612,15 +5617,20 @@ impl<'a> Parser<'a> {\n                 // *mut self\n                 // *not_self\n                 // Emit special error for `self` cases.\n+                let msg = \"cannot pass `self` by raw pointer\";\n                 (if isolated_self(self, 1) {\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else if self.look_ahead(1, |t| t.is_mutability()) &&\n                           isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n-                    self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n+                    self.struct_span_err(self.span, msg)\n+                        .span_label(self.span, msg)\n+                        .emit();\n                     SelfKind::Value(Mutability::Immutable)\n                 } else {\n                     return Ok(None);\n@@ -5957,7 +5967,10 @@ impl<'a> Parser<'a> {\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n             if unsafety != Unsafety::Normal {\n-                self.span_err(self.prev_span, \"trait aliases cannot be unsafe\");\n+                let msg = \"trait aliases cannot be unsafe\";\n+                self.struct_span_err(self.prev_span, msg)\n+                    .span_label(self.prev_span, msg)\n+                    .emit();\n             }\n             Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n         } else {"}, {"sha": "0dc291ebda01a16b1c2ced6441d6d72ce184d389", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=7feb802d8982fe69d7d6acef532a87ada8aae9fb", "patch": "@@ -2,49 +2,49 @@ error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:5:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: ABI spec with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:9:5\n    |\n LL |     \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ ABI spec with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     \"\"suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     b\"\"suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     r#\"\"#suffix; //~ ERROR string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ string literal with a suffix is invalid\n \n error: byte string literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:16:5\n    |\n LL |     br#\"\"#suffix; //~ ERROR byte string literal with a suffix is invalid\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ byte string literal with a suffix is invalid\n \n error: char literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:17:5\n    |\n LL |     'a'suffix; //~ ERROR char literal with a suffix is invalid\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ char literal with a suffix is invalid\n \n error: byte literal with a suffix is invalid\n   --> $DIR/bad-lit-suffixes.rs:18:5\n    |\n LL |     b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ byte literal with a suffix is invalid\n \n error: invalid width `1024` for integer literal\n   --> $DIR/bad-lit-suffixes.rs:20:5"}, {"sha": "59e5e0c5d31db6fa0b91d199bc9387febfce7b54", "filename": "src/test/ui/parser/bad-pointer-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.rs?ref=7feb802d8982fe69d7d6acef532a87ada8aae9fb", "patch": "@@ -1,5 +1,5 @@\n fn foo(_: *()) {\n-    //~^ expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+    //~^ ERROR expected mut or const in raw pointer type\n }\n \n fn main() {}"}, {"sha": "e18c220affe6ebd2947cdef1d5cf5189aef3e153", "filename": "src/test/ui/parser/bad-pointer-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-pointer-type.stderr?ref=7feb802d8982fe69d7d6acef532a87ada8aae9fb", "patch": "@@ -1,8 +1,10 @@\n-error: expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+error: expected mut or const in raw pointer type\n   --> $DIR/bad-pointer-type.rs:1:11\n    |\n LL | fn foo(_: *()) {\n-   |           ^\n+   |           ^ expected mut or const in raw pointer type\n+   |\n+   = help: use `*mut T` or `*const T` as appropriate\n \n error: aborting due to previous error\n "}, {"sha": "84779b09dc7c6ae68081c28386ffdc45e9072a4b", "filename": "src/test/ui/parser/no-unsafe-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7feb802d8982fe69d7d6acef532a87ada8aae9fb/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-unsafe-self.stderr?ref=7feb802d8982fe69d7d6acef532a87ada8aae9fb", "patch": "@@ -2,37 +2,37 @@ error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:4:17\n    |\n LL |     fn foo(*mut self); //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:5:19\n    |\n LL |     fn baz(*const self); //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:6:13\n    |\n LL |     fn bar(*self); //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:11:17\n    |\n LL |     fn foo(*mut self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                 ^^^^\n+   |                 ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:12:19\n    |\n LL |     fn baz(*const self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |                   ^^^^\n+   |                   ^^^^ cannot pass `self` by raw pointer\n \n error: cannot pass `self` by raw pointer\n   --> $DIR/no-unsafe-self.rs:13:13\n    |\n LL |     fn bar(*self) { } //~ ERROR cannot pass `self` by raw pointer\n-   |             ^^^^\n+   |             ^^^^ cannot pass `self` by raw pointer\n \n error: aborting due to 6 previous errors\n "}]}