{"sha": "8838b9130e2f6551077f432dddd5a8077ae4d2e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzhiOTEzMGUyZjY1NTEwNzdmNDMyZGRkZDVhODA3N2FlNGQyZTE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-04T10:03:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-10T16:52:12Z"}, "message": "Fix uninhabitedness of non-exhaustive enums.\n\nThis commit ensures that non-exhaustive enums are considered inhabited\nwhen used in extern crates.", "tree": {"sha": "d717430ddb3eb5d195028c28c1868b163af46de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d717430ddb3eb5d195028c28c1868b163af46de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8838b9130e2f6551077f432dddd5a8077ae4d2e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzVrDwACgkQAXYLT59T\n8VT+pw/8CnfaPmy8QV1JR5crrPLNomsC1BZqvYD214fcv0EWsxgoboyAwJDmpXgQ\n4++JNrnW7qSUT14okv3KF5zJLsFGZufjaG8wDdd2oh3In0TT6KGK5lnFxJf//x+i\nKyjWvPcw5JwDYRBKXjrNCTf3zuEL/rp7asliSbuJgU0zA0gBHP61JgR6nXFmg8mZ\ns+JT9hP5kYnZp8rD6Fi73MlQRrQv3RSH74Z/RCqdCUcPM7l5nQWtu8NHwbxOwxnh\nh0pM58fy9NXXFcBh4/4182g5m/4vtsgB7nEsi4LQw9lTkszXRZzKvhdwP5I3szeU\ndVXU1BTEpm2xdBjiu/sXPSRBr/G6n0JaGp1x4C5GkqNt9oksPl4RQeIb4l1nND0o\n+IaUTz3KYEuGmbeqKEByX4E+RPi67UlGIEmyBZqQCKb6fdiIhdXIcuYuuSHtlS0y\npKcYMkQ600bvo53+22y86SHaHl09JbAeaNN2uQOkNCtc4ZOgSTtsTyfxGt/86qq3\nSxNPctO+plqlzGsYAPt3jd7i7edToMFjtHCJk0Hxp+vN05rQkW+g3Oo682hxYNgH\ndxAnnzagjANQDcFFkmO2nmgDqXMoxOhiE515jIP9P6MMJYHHr6Cgv8cAuBisdY6V\ndGItm/h6gtd+B9PBeFPAK048WlqSZqX1pxkYQoFSq7A9Ampn5FI=\n=3lMi\n-----END PGP SIGNATURE-----", "payload": "tree d717430ddb3eb5d195028c28c1868b163af46de3\nparent 0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9\nauthor David Wood <david@davidtw.co> 1556964186 +0100\ncommitter David Wood <david@davidtw.co> 1557507132 +0100\n\nFix uninhabitedness of non-exhaustive enums.\n\nThis commit ensures that non-exhaustive enums are considered inhabited\nwhen used in extern crates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8838b9130e2f6551077f432dddd5a8077ae4d2e1", "html_url": "https://github.com/rust-lang/rust/commit/8838b9130e2f6551077f432dddd5a8077ae4d2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8838b9130e2f6551077f432dddd5a8077ae4d2e1/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "html_url": "https://github.com/rust-lang/rust/commit/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9"}], "stats": {"total": 507, "additions": 398, "deletions": 109}, "files": [{"sha": "be1d973c2cdd58363b7c15e855daffacb60c0c31", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -113,9 +113,14 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         substs: SubstsRef<'tcx>) -> DefIdForest\n     {\n-        DefIdForest::intersection(tcx, self.variants.iter().map(|v| {\n-            v.uninhabited_from(tcx, substs, self.adt_kind())\n-        }))\n+        // Non-exhaustive ADTs from other crates are always considered inhabited.\n+        if self.is_variant_list_non_exhaustive() && !self.did.is_local() {\n+            DefIdForest::empty()\n+        } else {\n+            DefIdForest::intersection(tcx, self.variants.iter().map(|v| {\n+                v.uninhabited_from(tcx, substs, self.adt_kind())\n+            }))\n+        }\n     }\n }\n "}, {"sha": "8c7155e1df351ed6417bb85eae7916de6aabb0d2", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -208,7 +208,11 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                     .map(|variant| variant.ident)\n                                     .collect();\n                             }\n-                            def.variants.is_empty()\n+\n+                            let is_non_exhaustive_and_non_local =\n+                                def.is_variant_list_non_exhaustive() && !def.did.is_local();\n+\n+                            !(is_non_exhaustive_and_non_local) && def.variants.is_empty()\n                         },\n                         _ => false\n                     }"}, {"sha": "80b9dc4c1c338c80be9addad9ade8cf503adb9ac", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited.rs", "status": "modified", "additions": 17, "deletions": 38, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -1,59 +1,38 @@\n // aux-build:uninhabited.rs\n-// compile-pass\n-#![deny(unreachable_patterns)]\n-#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n extern crate uninhabited;\n \n use uninhabited::{\n-    PartiallyInhabitedVariants,\n     UninhabitedEnum,\n     UninhabitedStruct,\n     UninhabitedTupleStruct,\n     UninhabitedVariants,\n };\n \n-fn uninhabited_enum() -> Option<UninhabitedEnum> {\n-    None\n-}\n+// This test checks that uninhabited non-exhaustive types cannot coerce to any type, as the never\n+// type can.\n \n-fn uninhabited_variant() -> Option<UninhabitedVariants> {\n-    None\n-}\n+struct A;\n \n-fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n-    PartiallyInhabitedVariants::Tuple(3)\n+fn can_coerce_never_type_to_anything(x: !) -> A {\n+    x\n }\n \n-fn uninhabited_struct() -> Option<UninhabitedStruct> {\n-    None\n+fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    x //~ ERROR mismatched types\n }\n \n-fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n-    None\n+fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    x //~ ERROR mismatched types\n }\n \n-// This test checks that non-exhaustive types that would normally be considered uninhabited within\n-// the defining crate are not considered uninhabited from extern crates.\n-\n-fn main() {\n-    match uninhabited_enum() {\n-        Some(_x) => (), // This line would normally error.\n-        None => (),\n-    }\n-\n-    match uninhabited_variant() {\n-        Some(_x) => (), // This line would normally error.\n-        None => (),\n-    }\n-\n-    // This line would normally error.\n-    while let PartiallyInhabitedVariants::Struct { x, .. } = partially_inhabited_variant() {\n-    }\n-\n-    while let Some(_x) = uninhabited_struct() { // This line would normally error.\n-    }\n+fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    x //~ ERROR mismatched types\n+}\n \n-    while let Some(_x) = uninhabited_tuple_struct() { // This line would normally error.\n-    }\n+fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n+    x //~ ERROR mismatched types\n }\n+\n+fn main() {}"}, {"sha": "490a6c101179cc8463d4dbd082697af83753ba9a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited.stderr?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited.rs:23:5\n+   |\n+LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+   |                                                                - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found enum `uninhabited::UninhabitedEnum`\n+   |\n+   = note: expected type `A`\n+              found type `uninhabited::UninhabitedEnum`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited.rs:27:5\n+   |\n+LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+   |                                                                               - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found struct `uninhabited::UninhabitedTupleStruct`\n+   |\n+   = note: expected type `A`\n+              found type `uninhabited::UninhabitedTupleStruct`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited.rs:31:5\n+   |\n+LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+   |                                                                    - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found struct `uninhabited::UninhabitedStruct`\n+   |\n+   = note: expected type `A`\n+              found type `uninhabited::UninhabitedStruct`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited.rs:35:5\n+   |\n+LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n+   |                                                                                  - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found enum `uninhabited::UninhabitedVariants`\n+   |\n+   = note: expected type `A`\n+              found type `uninhabited::UninhabitedVariants`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0166b2e46cbf5eaec9c351fe35fb3230120514d7", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:uninhabited.rs\n+#![feature(never_type)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    UninhabitedEnum,\n+};\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type from an extern crate\n+// will not compile.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn main() {}"}, {"sha": "3000e1b093068ad50f7e459028396728ab7f5a80", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match.stderr?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,11 @@\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n+  --> $DIR/uninhabited_match.rs:16:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "d8b1c3810f338c2d7f37343d5d42032dabc94382", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match_same_crate.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_same_crate.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,18 @@\n+// compile-pass\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type from the defining crate\n+// will compile.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    match x {}\n+}\n+\n+fn main() {}"}, {"sha": "d82010158ccc3d2482de82b159476a8c2cedcddb", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match_with_exhaustive_patterns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,22 @@\n+// aux-build:uninhabited.rs\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    UninhabitedEnum,\n+};\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type from an extern crate\n+// will not compile. In particular, this enables the `exhaustive_patterns` feature as this can\n+// change the branch used in the compiler to determine this.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn main() {}"}, {"sha": "73d9e689b55fc637a727b6172e9038b71338b1ae", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match_with_exhaustive_patterns.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns.stderr?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,11 @@\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n+  --> $DIR/uninhabited_match_with_exhaustive_patterns.rs:19:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "da814a70a75cae07fc6074dad9bf20c77d416333", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_match_with_exhaustive_patterns_same_crate.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_match_with_exhaustive_patterns_same_crate.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,21 @@\n+// compile-pass\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type from the defining crate\n+// will compile. In particular, this enables the `exhaustive_patterns` feature as this can\n+// change the branch used in the compiler to determine this.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    match x {}\n+}\n+\n+fn main() {}"}, {"sha": "97061310d19e29e17f6a26049304f09194b8a86f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_patterns.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,59 @@\n+// aux-build:uninhabited.rs\n+// compile-pass\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    PartiallyInhabitedVariants,\n+    UninhabitedEnum,\n+    UninhabitedStruct,\n+    UninhabitedTupleStruct,\n+    UninhabitedVariants,\n+};\n+\n+fn uninhabited_enum() -> Option<UninhabitedEnum> {\n+    None\n+}\n+\n+fn uninhabited_variant() -> Option<UninhabitedVariants> {\n+    None\n+}\n+\n+fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n+    PartiallyInhabitedVariants::Tuple(3)\n+}\n+\n+fn uninhabited_struct() -> Option<UninhabitedStruct> {\n+    None\n+}\n+\n+fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n+    None\n+}\n+\n+// This test checks that non-exhaustive types that would normally be considered uninhabited within\n+// the defining crate are not considered uninhabited from extern crates.\n+\n+fn main() {\n+    match uninhabited_enum() {\n+        Some(_x) => (), // This line would normally error.\n+        None => (),\n+    }\n+\n+    match uninhabited_variant() {\n+        Some(_x) => (), // This line would normally error.\n+        None => (),\n+    }\n+\n+    // This line would normally error.\n+    while let PartiallyInhabitedVariants::Struct { x, .. } = partially_inhabited_variant() {\n+    }\n+\n+    while let Some(_x) = uninhabited_struct() { // This line would normally error.\n+    }\n+\n+    while let Some(_x) = uninhabited_tuple_struct() { // This line would normally error.\n+    }\n+}"}, {"sha": "302a35cab5f904b959dc1f19c407b97054d9cf74", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_patterns_same_crate.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,71 @@\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+pub enum PartiallyInhabitedVariants {\n+    Tuple(u8),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+fn uninhabited_enum() -> Option<UninhabitedEnum> {\n+    None\n+}\n+\n+fn uninhabited_variant() -> Option<UninhabitedVariants> {\n+    None\n+}\n+\n+fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n+    PartiallyInhabitedVariants::Tuple(3)\n+}\n+\n+fn uninhabited_struct() -> Option<UninhabitedStruct> {\n+    None\n+}\n+\n+fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n+    None\n+}\n+\n+// This test checks that non-exhaustive types that would normally be considered uninhabited within\n+// the defining crate are still considered uninhabited.\n+\n+fn main() {\n+    match uninhabited_enum() {\n+        Some(_x) => (), //~ ERROR unreachable pattern\n+        None => (),\n+    }\n+\n+    match uninhabited_variant() {\n+        Some(_x) => (), //~ ERROR unreachable pattern\n+        None => (),\n+    }\n+\n+    while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    while let Some(_x) = uninhabited_struct() { //~ ERROR unreachable pattern\n+    }\n+\n+    while let Some(_x) = uninhabited_tuple_struct() { //~ ERROR unreachable pattern\n+    }\n+}"}, {"sha": "8e995632b2ff7e9823497d887c90af002ebc9a76", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_patterns_same_crate.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_patterns_same_crate.stderr?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -0,0 +1,38 @@\n+error: unreachable pattern\n+  --> $DIR/uninhabited_patterns_same_crate.rs:53:9\n+   |\n+LL |         Some(_x) => (),\n+   |         ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/uninhabited_patterns_same_crate.rs:1:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_patterns_same_crate.rs:58:9\n+   |\n+LL |         Some(_x) => (),\n+   |         ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_patterns_same_crate.rs:62:15\n+   |\n+LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_patterns_same_crate.rs:66:15\n+   |\n+LL |     while let Some(_x) = uninhabited_struct() {\n+   |               ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/uninhabited_patterns_same_crate.rs:69:15\n+   |\n+LL |     while let Some(_x) = uninhabited_tuple_struct() {\n+   |               ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "803a542f8aa4bab15c265892f401c7e6143eb4ce", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_same_crate.rs", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.rs?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unreachable_patterns)]\n-#![feature(exhaustive_patterns)]\n #![feature(never_type)]\n #![feature(non_exhaustive)]\n \n@@ -20,52 +18,29 @@ pub enum UninhabitedVariants {\n     #[non_exhaustive] Struct { x: ! }\n }\n \n-pub enum PartiallyInhabitedVariants {\n-    Tuple(u8),\n-    #[non_exhaustive] Struct { x: ! }\n-}\n+struct A;\n \n-fn uninhabited_enum() -> Option<UninhabitedEnum> {\n-    None\n-}\n+// This test checks that uninhabited non-exhaustive types defined in the same crate cannot coerce\n+// to any type, as the never type can.\n \n-fn uninhabited_variant() -> Option<UninhabitedVariants> {\n-    None\n+fn can_coerce_never_type_to_anything(x: !) -> A {\n+    x\n }\n \n-fn partially_inhabited_variant() -> PartiallyInhabitedVariants {\n-    PartiallyInhabitedVariants::Tuple(3)\n+fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+    x //~ ERROR mismatched types\n }\n \n-fn uninhabited_struct() -> Option<UninhabitedStruct> {\n-    None\n+fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    x //~ ERROR mismatched types\n }\n \n-fn uninhabited_tuple_struct() -> Option<UninhabitedTupleStruct> {\n-    None\n+fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    x //~ ERROR mismatched types\n }\n \n-// This test checks that non-exhaustive types that would normally be considered uninhabited within\n-// the defining crate are still considered uninhabited.\n-\n-fn main() {\n-    match uninhabited_enum() {\n-        Some(_x) => (), //~ ERROR unreachable pattern\n-        None => (),\n-    }\n-\n-    match uninhabited_variant() {\n-        Some(_x) => (), //~ ERROR unreachable pattern\n-        None => (),\n-    }\n-\n-    while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n-        //~^ ERROR unreachable pattern\n-    }\n-\n-    while let Some(_x) = uninhabited_struct() { //~ ERROR unreachable pattern\n-    }\n-\n-    while let Some(_x) = uninhabited_tuple_struct() { //~ ERROR unreachable pattern\n-    }\n+fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n+    x //~ ERROR mismatched types\n }\n+\n+fn main() {}"}, {"sha": "ea79e7105d54649328cdf47714c9bbb752c53fd2", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited_same_crate.stderr", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8838b9130e2f6551077f432dddd5a8077ae4d2e1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited_same_crate.stderr?ref=8838b9130e2f6551077f432dddd5a8077ae4d2e1", "patch": "@@ -1,38 +1,47 @@\n-error: unreachable pattern\n-  --> $DIR/uninhabited_same_crate.rs:53:9\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited_same_crate.rs:31:5\n    |\n-LL |         Some(_x) => (),\n-   |         ^^^^^^^^\n+LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n+   |                                                                - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found enum `UninhabitedEnum`\n    |\n-note: lint level defined here\n-  --> $DIR/uninhabited_same_crate.rs:1:9\n-   |\n-LL | #![deny(unreachable_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: expected type `A`\n+              found type `UninhabitedEnum`\n \n-error: unreachable pattern\n-  --> $DIR/uninhabited_same_crate.rs:58:9\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited_same_crate.rs:35:5\n    |\n-LL |         Some(_x) => (),\n-   |         ^^^^^^^^\n-\n-error: unreachable pattern\n-  --> $DIR/uninhabited_same_crate.rs:62:15\n+LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+   |                                                                               - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found struct `UninhabitedTupleStruct`\n    |\n-LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected type `A`\n+              found type `UninhabitedTupleStruct`\n \n-error: unreachable pattern\n-  --> $DIR/uninhabited_same_crate.rs:66:15\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited_same_crate.rs:39:5\n    |\n-LL |     while let Some(_x) = uninhabited_struct() {\n-   |               ^^^^^^^^\n+LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+   |                                                                    - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found struct `UninhabitedStruct`\n+   |\n+   = note: expected type `A`\n+              found type `UninhabitedStruct`\n \n-error: unreachable pattern\n-  --> $DIR/uninhabited_same_crate.rs:69:15\n+error[E0308]: mismatched types\n+  --> $DIR/uninhabited_same_crate.rs:43:5\n+   |\n+LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n+   |                                                                                  - expected `A` because of return type\n+LL |     x\n+   |     ^ expected struct `A`, found enum `UninhabitedVariants`\n    |\n-LL |     while let Some(_x) = uninhabited_tuple_struct() {\n-   |               ^^^^^^^^\n+   = note: expected type `A`\n+              found type `UninhabitedVariants`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}