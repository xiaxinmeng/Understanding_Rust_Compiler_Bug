{"sha": "cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "node_id": "C_kwDOAAsO6NoAKGNiNWVjZmY4YjJjNGNkMDgzY2IxNDI5ZDRlMTRlMDgzODEyZGQwYTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-18T03:41:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-18T03:41:58Z"}, "message": "Rollup merge of #92640 - compiler-errors:array-deref-on-newtype, r=lcnr\n\nFix ICEs related to `Deref<Target=[T; N]>` on newtypes\n\n1. Stash a const infer's type into the canonical var during canonicalization, so we can recreate the fresh const infer with that same type.\n    For example, given `[T; _]` we know `_` is a `usize`. If we go from infer => canonical => infer, we shouldn't forget that variable is a usize.\nFixes #92626\nFixes #83704\n\n2. Don't stash the autoderef'd slice type that we get from method lookup, but instead recreate it during method confirmation. We need to do this because the type we receive back after picking the method references a type variable that does not exist after probing is done.\nFixes #92637\n\n... A better solution for the second issue would be to actually _properly_ implement `Deref` for `[T; N]` instead of fixing this autoderef hack to stop leaking inference variables. But I actually looked into this, and there are many complications with const impls.", "tree": {"sha": "128e335522233149aaa88b27f23c3fd3eef7b93f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128e335522233149aaa88b27f23c3fd3eef7b93f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5jcHCRBK7hj4Ov3rIwAAgKIIADVmCIt33pmBRRySnJK66uXm\n+GBTqeEyvbFXsOiQCf0L1ATMOjlN5optuI6ZO80mqeC0by7Ha5FaWDxNUPXMjz3A\nxwIdx2JRafLSygGja4jm7cnZDhuPj8g79HNOfACu4g+HVJmjWuPJOahZUwzgPcK9\nlQFS0HXxsSF9M2ywjenULZeKr2J6cWGusZQbGhRnmAvjJGK6sc28m07Er8r/5MZk\nA6qT1158S2LLwoFav/6fW8yqyiUMtQMxABa63SlFASnwc/boy72EdwqW8gTpfDXc\neyhkcTwaHBoZwgmcYxB4VnW5oHHMz/7rI37jQA1uguwteYBs3+uHIOK2iETWsjY=\n=Z37p\n-----END PGP SIGNATURE-----\n", "payload": "tree 128e335522233149aaa88b27f23c3fd3eef7b93f\nparent d501ead0096072f1e85bc13d41ca6ab70dafd8be\nparent 7bf0cb76710e723ac71257e04f4a1bfbbfc87c3c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642477318 +0100\ncommitter GitHub <noreply@github.com> 1642477318 +0100\n\nRollup merge of #92640 - compiler-errors:array-deref-on-newtype, r=lcnr\n\nFix ICEs related to `Deref<Target=[T; N]>` on newtypes\n\n1. Stash a const infer's type into the canonical var during canonicalization, so we can recreate the fresh const infer with that same type.\n    For example, given `[T; _]` we know `_` is a `usize`. If we go from infer => canonical => infer, we shouldn't forget that variable is a usize.\nFixes #92626\nFixes #83704\n\n2. Don't stash the autoderef'd slice type that we get from method lookup, but instead recreate it during method confirmation. We need to do this because the type we receive back after picking the method references a type variable that does not exist after probing is done.\nFixes #92637\n\n... A better solution for the second issue would be to actually _properly_ implement `Deref` for `[T; N]` instead of fixing this autoderef hack to stop leaking inference variables. But I actually looked into this, and there are many complications with const impls.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "html_url": "https://github.com/rust-lang/rust/commit/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d501ead0096072f1e85bc13d41ca6ab70dafd8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d501ead0096072f1e85bc13d41ca6ab70dafd8be", "html_url": "https://github.com/rust-lang/rust/commit/d501ead0096072f1e85bc13d41ca6ab70dafd8be"}, {"sha": "7bf0cb76710e723ac71257e04f4a1bfbbfc87c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf0cb76710e723ac71257e04f4a1bfbbfc87c3c", "html_url": "https://github.com/rust-lang/rust/commit/7bf0cb76710e723ac71257e04f4a1bfbbfc87c3c"}], "stats": {"total": 120, "additions": 84, "deletions": 36}, "files": [{"sha": "9d40b3cba2952eb48d96b3cb4552bd0f8cb27824", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -425,7 +425,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                         // FIXME: perf problem described in #55921.\n                         ui = ty::UniverseIndex::ROOT;\n                         return self.canonicalize_const_var(\n-                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui) },\n+                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty) },\n                             ct,\n                         );\n                     }"}, {"sha": "2d2edb07d9eda871bce69855d3ba3cf8b7446c0a", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -137,12 +137,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx.mk_region(ty::RePlaceholder(placeholder_mapped)).into()\n             }\n \n-            CanonicalVarKind::Const(ui) => self\n+            CanonicalVarKind::Const(ui, ty) => self\n                 .next_const_var_in_universe(\n-                    self.next_ty_var_in_universe(\n-                        TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span },\n-                        universe_map(ui),\n-                    ),\n+                    ty,\n                     ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },\n                     universe_map(ui),\n                 )"}, {"sha": "28217aeab13ee51d91d752fcfc5802b5d167cc49", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -23,7 +23,7 @@\n \n use crate::infer::MemberConstraint;\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, BoundVar, List, Region, TyCtxt};\n+use crate::ty::{self, BoundVar, List, Region, Ty, TyCtxt};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use smallvec::SmallVec;\n@@ -104,7 +104,7 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n             CanonicalVarKind::PlaceholderTy(_) => false,\n             CanonicalVarKind::Region(_) => true,\n             CanonicalVarKind::PlaceholderRegion(..) => false,\n-            CanonicalVarKind::Const(_) => true,\n+            CanonicalVarKind::Const(..) => true,\n             CanonicalVarKind::PlaceholderConst(_) => false,\n         }\n     }\n@@ -130,7 +130,7 @@ pub enum CanonicalVarKind<'tcx> {\n     PlaceholderRegion(ty::PlaceholderRegion),\n \n     /// Some kind of const inference variable.\n-    Const(ty::UniverseIndex),\n+    Const(ty::UniverseIndex, Ty<'tcx>),\n \n     /// A \"placeholder\" that represents \"any const\".\n     PlaceholderConst(ty::PlaceholderConst<'tcx>),\n@@ -147,7 +147,7 @@ impl<'tcx> CanonicalVarKind<'tcx> {\n             CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.universe,\n             CanonicalVarKind::Region(ui) => ui,\n             CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.universe,\n-            CanonicalVarKind::Const(ui) => ui,\n+            CanonicalVarKind::Const(ui, _) => ui,\n             CanonicalVarKind::PlaceholderConst(placeholder) => placeholder.universe,\n         }\n     }"}, {"sha": "09bfdabf4737357871a7fad22d2bfdd7f6f8577b", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -85,7 +85,7 @@ crate fn evaluate_goal<'tcx>(\n                         chalk_ir::VariableKind::Lifetime,\n                         chalk_ir::UniverseIndex { counter: ui.index() },\n                     ),\n-                    CanonicalVarKind::Const(_ui) => unimplemented!(),\n+                    CanonicalVarKind::Const(_ui, _ty) => unimplemented!(),\n                     CanonicalVarKind::PlaceholderConst(_pc) => unimplemented!(),\n                 }),\n             ),\n@@ -127,9 +127,9 @@ crate fn evaluate_goal<'tcx>(\n                     chalk_ir::VariableKind::Lifetime => CanonicalVarKind::Region(\n                         ty::UniverseIndex::from_usize(var.skip_kind().counter),\n                     ),\n-                    chalk_ir::VariableKind::Const(_) => CanonicalVarKind::Const(\n-                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n-                    ),\n+                    // FIXME(compiler-errors): We don't currently have a way of turning\n+                    // a Chalk ty back into a rustc ty, right?\n+                    chalk_ir::VariableKind::Const(_) => todo!(),\n                 };\n                 CanonicalVarInfo { kind }\n             })"}, {"sha": "27c39934ba8e9f66448ff6a3e81adc075e149dff", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // time writing the results into the various typeck results.\n         let mut autoderef =\n             self.autoderef_overloaded_span(self.span, unadjusted_self_ty, self.call_expr.span);\n-        let (_, n) = match autoderef.nth(pick.autoderefs) {\n+        let (ty, n) = match autoderef.nth(pick.autoderefs) {\n             Some(n) => n,\n             None => {\n                 return self.tcx.ty_error_with_message(\n@@ -161,14 +161,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         assert_eq!(n, pick.autoderefs);\n \n         let mut adjustments = self.adjust_steps(&autoderef);\n+        let mut target = self.structurally_resolved_type(autoderef.span(), ty);\n \n-        let mut target =\n-            self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n-\n-        match &pick.autoref_or_ptr_adjustment {\n+        match pick.autoref_or_ptr_adjustment {\n             Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl, unsize }) => {\n                 let region = self.next_region_var(infer::Autoref(self.span));\n-                target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl: *mutbl, ty: target });\n+                // Type we're wrapping in a reference, used later for unsizing\n+                let base_ty = target;\n+\n+                target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl, ty: target });\n                 let mutbl = match mutbl {\n                     hir::Mutability::Not => AutoBorrowMutability::Not,\n                     hir::Mutability::Mut => AutoBorrowMutability::Mut {\n@@ -182,10 +183,18 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     target,\n                 });\n \n-                if let Some(unsize_target) = unsize {\n+                if unsize {\n+                    let unsized_ty = if let ty::Array(elem_ty, _) = base_ty.kind() {\n+                        self.tcx.mk_slice(elem_ty)\n+                    } else {\n+                        bug!(\n+                            \"AutorefOrPtrAdjustment's unsize flag should only be set for array ty, found {}\",\n+                            base_ty\n+                        )\n+                    };\n                     target = self\n                         .tcx\n-                        .mk_ref(region, ty::TypeAndMut { mutbl: mutbl.into(), ty: unsize_target });\n+                        .mk_ref(region, ty::TypeAndMut { mutbl: mutbl.into(), ty: unsized_ty });\n                     adjustments\n                         .push(Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target });\n                 }"}, {"sha": "86f3568d2e37aed310c10dbd2fb2e512e491bfd3", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -167,26 +167,26 @@ enum ProbeResult {\n /// T`, we could convert it to `*const T`, then autoref to `&*const T`. However, currently we do\n /// (at most) one of these. Either the receiver has type `T` and we convert it to `&T` (or with\n /// `mut`), or it has type `*mut T` and we convert it to `*const T`.\n-#[derive(Debug, PartialEq, Clone)]\n-pub enum AutorefOrPtrAdjustment<'tcx> {\n+#[derive(Debug, PartialEq, Copy, Clone)]\n+pub enum AutorefOrPtrAdjustment {\n     /// Receiver has type `T`, add `&` or `&mut` (it `T` is `mut`), and maybe also \"unsize\" it.\n     /// Unsizing is used to convert a `[T; N]` to `[T]`, which only makes sense when autorefing.\n     Autoref {\n         mutbl: hir::Mutability,\n \n-        /// Indicates that the source expression should be \"unsized\" to a target type. This should\n-        /// probably eventually go away in favor of just coercing method receivers.\n-        unsize: Option<Ty<'tcx>>,\n+        /// Indicates that the source expression should be \"unsized\" to a target type.\n+        /// This is special-cased for just arrays unsizing to slices.\n+        unsize: bool,\n     },\n     /// Receiver has type `*mut T`, convert to `*const T`\n     ToConstPtr,\n }\n \n-impl<'tcx> AutorefOrPtrAdjustment<'tcx> {\n-    fn get_unsize(&self) -> Option<Ty<'tcx>> {\n+impl AutorefOrPtrAdjustment {\n+    fn get_unsize(&self) -> bool {\n         match self {\n             AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => *unsize,\n-            AutorefOrPtrAdjustment::ToConstPtr => None,\n+            AutorefOrPtrAdjustment::ToConstPtr => false,\n         }\n     }\n }\n@@ -204,7 +204,7 @@ pub struct Pick<'tcx> {\n \n     /// Indicates that we want to add an autoref (and maybe also unsize it), or if the receiver is\n     /// `*mut T`, convert it to `*const T`.\n-    pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment<'tcx>>,\n+    pub autoref_or_ptr_adjustment: Option<AutorefOrPtrAdjustment>,\n     pub self_ty: Ty<'tcx>,\n }\n \n@@ -1202,7 +1202,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     pick.autoderefs += 1;\n                     pick.autoref_or_ptr_adjustment = Some(AutorefOrPtrAdjustment::Autoref {\n                         mutbl,\n-                        unsize: pick.autoref_or_ptr_adjustment.and_then(|a| a.get_unsize()),\n+                        unsize: pick.autoref_or_ptr_adjustment.map_or(false, |a| a.get_unsize()),\n                     })\n                 }\n \n@@ -1227,10 +1227,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.pick_method(autoref_ty, unstable_candidates).map(|r| {\n             r.map(|mut pick| {\n                 pick.autoderefs = step.autoderefs;\n-                pick.autoref_or_ptr_adjustment = Some(AutorefOrPtrAdjustment::Autoref {\n-                    mutbl,\n-                    unsize: step.unsize.then_some(self_ty),\n-                });\n+                pick.autoref_or_ptr_adjustment =\n+                    Some(AutorefOrPtrAdjustment::Autoref { mutbl, unsize: step.unsize });\n                 pick\n             })\n         })"}, {"sha": "855a82d2f9c8f503226e37a7db5d7fdee90249e5", "filename": "src/test/ui/autoref-autoderef/deref-into-array.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fderef-into-array.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+struct Test<T>([T; 1]);\n+\n+impl<T> std::ops::Deref for Test<T> {\n+    type Target = [T; 1];\n+\n+    fn deref(&self) -> &[T; 1] {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let out = Test([(); 1]);\n+    let blah = out.len();\n+    println!(\"{}\", blah);\n+}"}, {"sha": "7d75af12bdfb5cb6195cb2f5cc6f5124882098a6", "filename": "src/test/ui/const-generics/deref-into-array-generic.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderef-into-array-generic.rs?ref=cb5ecff8b2c4cd083cb1429d4e14e083812dd0a7", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+struct Test<T, const N: usize>([T; N]);\n+\n+impl<T: Copy + Default, const N: usize> Default for Test<T, N> {\n+    fn default() -> Self {\n+        Self([T::default(); N])\n+    }\n+}\n+\n+impl<T, const N: usize> std::ops::Deref for Test<T, N> {\n+    type Target = [T; N];\n+\n+    fn deref(&self) -> &[T; N] {\n+        &self.0\n+    }\n+}\n+\n+fn test() -> Test<u64, 16> {\n+    let test = Test::default();\n+    println!(\"{}\", test.len());\n+    test\n+}\n+\n+fn main() {\n+    test();\n+}"}]}