{"sha": "331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMWU2ZDhmMTZhYTJkYmJlMTNlZGFkYjZmOTA4M2ZmNTYwMDNkODE=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-01T07:14:23Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-01T07:25:59Z"}, "message": "Remove db from AssistsContext", "tree": {"sha": "7afb14a76f17efb8a3dd5bfa92df54145d3907c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afb14a76f17efb8a3dd5bfa92df54145d3907c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "html_url": "https://github.com/rust-lang/rust/commit/331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98ae447fa7112bef8c525f86652d6484646251f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/98ae447fa7112bef8c525f86652d6484646251f1", "html_url": "https://github.com/rust-lang/rust/commit/98ae447fa7112bef8c525f86652d6484646251f1"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "3640bb4d26569d268910068874b8e473adbe75df", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -55,7 +55,6 @@ use crate::{\n pub(crate) struct AssistContext<'a> {\n     pub(crate) config: &'a AssistConfig,\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n-    pub(crate) db: &'a RootDatabase,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n }\n@@ -67,8 +66,11 @@ impl<'a> AssistContext<'a> {\n         frange: FileRange,\n     ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n-        let db = sema.db;\n-        AssistContext { config, sema, db, frange, source_file }\n+        AssistContext { config, sema, frange, source_file }\n+    }\n+\n+    pub(crate) fn db(&self) -> &RootDatabase {\n+        self.sema.db\n     }\n \n     // NB, this ignores active selection."}, {"sha": "11df922a238a179dbeec8c0da07fb21bbb1b39a7", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         return None;\n     }\n \n-    let inferred_type = ty.display_source_code(ctx.db, module.into()).ok()?;\n+    let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n     acc.add(\n         AssistId(\"add_explicit_type\"),\n         format!(\"Insert explicit type `{}`\", inferred_type),"}, {"sha": "fc4e823099b869d3afe199f3d842e991b76b727e", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -117,7 +117,7 @@ impl FunctionBuilder {\n         let mut file = ctx.frange.file_id;\n         let target = match &target_module {\n             Some(target_module) => {\n-                let module_source = target_module.definition_source(ctx.db);\n+                let module_source = target_module.definition_source(ctx.db());\n                 let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, &module_source)?;\n                 file = in_file;\n                 target\n@@ -269,7 +269,7 @@ fn fn_arg_type(\n         return None;\n     }\n \n-    if let Ok(rendered) = ty.display_source_code(ctx.db, target_module.into()) {\n+    if let Ok(rendered) = ty.display_source_code(ctx.db(), target_module.into()) {\n         Some(rendered)\n     } else {\n         None"}, {"sha": "77e092f6238f4173f6cc5cef0ba5b3ee9540a38b", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -128,9 +128,9 @@ fn add_missing_impl_members_inner(\n     let missing_items = get_missing_assoc_items(&ctx.sema, &impl_def)\n         .iter()\n         .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db).value),\n-            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db).value),\n-            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db).value),\n+            hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db()).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db()).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db()).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {"}, {"sha": "e41b2aa06ddbc8a26f982303a8762390683e0f26", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -122,7 +122,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n fn find_struct_impl(ctx: &AssistContext, strukt: &ast::StructDef) -> Option<Option<ast::ImplDef>> {\n-    let db = ctx.db;\n+    let db = ctx.db();\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n     })?;"}, {"sha": "e8060a4916a850b8d7148203ccc7ca8330709c9e", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -36,7 +36,7 @@ use crate::{utils::insert_use_statement, AssistContext, AssistId, Assists, Group\n // ```\n pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let auto_import_assets = AutoImportAssets::new(&ctx)?;\n-    let proposed_imports = auto_import_assets.search_for_imports(ctx.db);\n+    let proposed_imports = auto_import_assets.search_for_imports(ctx.db());\n     if proposed_imports.is_empty() {\n         return None;\n     }"}, {"sha": "bdf9d7ae26d6d62e164106f0a923c8a3ec100dd9", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -37,23 +37,23 @@ pub(crate) fn extract_struct_from_enum_variant(\n     };\n     let variant_name = variant.name()?.to_string();\n     let variant_hir = ctx.sema.to_def(&variant)?;\n-    if existing_struct_def(ctx.db, &variant_name, &variant_hir) {\n+    if existing_struct_def(ctx.db(), &variant_name, &variant_hir) {\n         return None;\n     }\n     let enum_ast = variant.parent_enum();\n     let visibility = enum_ast.visibility();\n     let enum_hir = ctx.sema.to_def(&enum_ast)?;\n-    let variant_hir_name = variant_hir.name(ctx.db);\n+    let variant_hir_name = variant_hir.name(ctx.db());\n     let enum_module_def = ModuleDef::from(enum_hir);\n-    let current_module = enum_hir.module(ctx.db);\n+    let current_module = enum_hir.module(ctx.db());\n     let target = variant.syntax().text_range();\n     acc.add(\n         AssistId(\"extract_struct_from_enum_variant\"),\n         \"Extract struct from enum variant\",\n         target,\n         |builder| {\n             let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n-            let res = definition.find_usages(&ctx.db, None);\n+            let res = definition.find_usages(&ctx.db(), None);\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n             let mut visited_modules_set = FxHashSet::default();\n             visited_modules_set.insert(current_module);\n@@ -101,7 +101,7 @@ fn insert_import(\n     enum_module_def: &ModuleDef,\n     variant_hir_name: &Name,\n ) -> Option<()> {\n-    let db = ctx.db;\n+    let db = ctx.db();\n     let mod_path = module.find_use_path(db, enum_module_def.clone());\n     if let Some(mut mod_path) = mod_path {\n         mod_path.segments.pop();"}, {"sha": "5b12356823250e332a39352d90a192f0509efa88", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -51,11 +51,11 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let module = ctx.sema.scope(expr.syntax()).module()?;\n \n     let missing_arms: Vec<MatchArm> = if let Some(enum_def) = resolve_enum_def(&ctx.sema, &expr) {\n-        let variants = enum_def.variants(ctx.db);\n+        let variants = enum_def.variants(ctx.db());\n \n         let mut variants = variants\n             .into_iter()\n-            .filter_map(|variant| build_pat(ctx.db, module, variant))\n+            .filter_map(|variant| build_pat(ctx.db(), module, variant))\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n             .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect::<Vec<_>>();\n@@ -84,11 +84,11 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         // where each tuple represents a proposed match arm.\n         enum_defs\n             .into_iter()\n-            .map(|enum_def| enum_def.variants(ctx.db))\n+            .map(|enum_def| enum_def.variants(ctx.db()))\n             .multi_cartesian_product()\n             .map(|variants| {\n                 let patterns =\n-                    variants.into_iter().filter_map(|variant| build_pat(ctx.db, module, variant));\n+                    variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n                 ast::Pat::from(make::tuple_pat(patterns))\n             })\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))"}, {"sha": "c0f57c32973b4104a9d5adc6876ba72716b090b4", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -41,14 +41,14 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n     };\n \n     let current_module = ctx.sema.scope(&path.syntax()).module()?;\n-    let target_module = def.module(ctx.db)?;\n+    let target_module = def.module(ctx.db())?;\n \n-    let vis = target_module.visibility_of(ctx.db, &def)?;\n-    if vis.is_visible_from(ctx.db, current_module.into()) {\n+    let vis = target_module.visibility_of(ctx.db(), &def)?;\n+    if vis.is_visible_from(ctx.db(), current_module.into()) {\n         return None;\n     };\n \n-    let (offset, target, target_file, target_name) = target_data_for_def(ctx.db, def)?;\n+    let (offset, target, target_file, target_name) = target_data_for_def(ctx.db(), def)?;\n \n     let missing_visibility =\n         if current_module.krate() == target_module.krate() { \"pub(crate)\" } else { \"pub\" };\n@@ -72,16 +72,16 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let (record_field_def, _) = ctx.sema.resolve_record_field(&record_field)?;\n \n     let current_module = ctx.sema.scope(record_field.syntax()).module()?;\n-    let visibility = record_field_def.visibility(ctx.db);\n-    if visibility.is_visible_from(ctx.db, current_module.into()) {\n+    let visibility = record_field_def.visibility(ctx.db());\n+    if visibility.is_visible_from(ctx.db(), current_module.into()) {\n         return None;\n     }\n \n-    let parent = record_field_def.parent_def(ctx.db);\n-    let parent_name = parent.name(ctx.db);\n-    let target_module = parent.module(ctx.db);\n+    let parent = record_field_def.parent_def(ctx.db());\n+    let parent_name = parent.name(ctx.db());\n+    let target_module = parent.module(ctx.db());\n \n-    let in_file_source = record_field_def.source(ctx.db);\n+    let in_file_source = record_field_def.source(ctx.db());\n     let (offset, target) = match in_file_source.value {\n         hir::FieldSource::Named(it) => {\n             let s = it.syntax();\n@@ -95,9 +95,9 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let missing_visibility =\n         if current_module.krate() == target_module.krate() { \"pub(crate)\" } else { \"pub\" };\n-    let target_file = in_file_source.file_id.original_file(ctx.db);\n+    let target_file = in_file_source.file_id.original_file(ctx.db());\n \n-    let target_name = record_field_def.name(ctx.db);\n+    let target_name = record_field_def.name(ctx.db());\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n "}, {"sha": "f4fb0056bc468d8d3822dba519fb6513564f3f5b", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n     let def = ctx.sema.to_def(&bind_pat)?;\n     let def = Definition::Local(def);\n-    let refs = def.find_usages(ctx.db, None);\n+    let refs = def.find_usages(ctx.db(), None);\n     if refs.is_empty() {\n         mark::hit!(test_not_applicable_if_variable_unused);\n         return None;"}, {"sha": "b8cf30e7f1aa067d3cf66794c1e1f3ed51ded096", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e6d8f16aa2dbbe13edadb6f9083ff56003d81/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=331e6d8f16aa2dbbe13edadb6f9083ff56003d81", "patch": "@@ -90,10 +90,10 @@ fn struct_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option\n fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n     Some(\n         struct_definition(path, &ctx.sema)?\n-            .fields(ctx.db)\n+            .fields(ctx.db())\n             .iter()\n             .enumerate()\n-            .map(|(idx, field)| (field.name(ctx.db).to_string(), idx))\n+            .map(|(idx, field)| (field.name(ctx.db()).to_string(), idx))\n             .collect(),\n     )\n }"}]}