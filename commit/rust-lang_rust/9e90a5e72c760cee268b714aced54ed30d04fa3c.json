{"sha": "9e90a5e72c760cee268b714aced54ed30d04fa3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTBhNWU3MmM3NjBjZWUyNjhiNzE0YWNlZDU0ZWQzMGQwNGZhM2M=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-05-05T07:05:11Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-12T17:24:07Z"}, "message": "Platform configuration\n\nFIXME: avoid using Xcode build and switch to a patched libuv", "tree": {"sha": "4abeb609f06a002e59cd831b0aaf24c22cc264aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abeb609f06a002e59cd831b0aaf24c22cc264aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e90a5e72c760cee268b714aced54ed30d04fa3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e90a5e72c760cee268b714aced54ed30d04fa3c", "html_url": "https://github.com/rust-lang/rust/commit/9e90a5e72c760cee268b714aced54ed30d04fa3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e90a5e72c760cee268b714aced54ed30d04fa3c/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ece0510b14e6baad0d2c9511dab86919a5379e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ece0510b14e6baad0d2c9511dab86919a5379e1", "html_url": "https://github.com/rust-lang/rust/commit/9ece0510b14e6baad0d2c9511dab86919a5379e1"}], "stats": {"total": 145, "additions": 111, "deletions": 34}, "files": [{"sha": "1efa1cc5b6d85751a3c25b22e729508be80e48ed", "filename": "mk/platform.mk", "status": "modified", "additions": 68, "deletions": 28, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9e90a5e72c760cee268b714aced54ed30d04fa3c/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9e90a5e72c760cee268b714aced54ed30d04fa3c/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=9e90a5e72c760cee268b714aced54ed30d04fa3c", "patch": "@@ -155,36 +155,76 @@ CFG_LDPATH_i686-unknown-linux-gnu :=\n CFG_RUN_i686-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))\n \n-# arm-apple-darwin configuration\n-ifeq ($(CFG_OSTYPE),apple-darwin)\n+# arm-apple-ios configuration\n+CFG_SDK_NAME_arm-apple-ios = iphoneos\n+CFG_SDK_ARCHS_arm-apple-ios = armv7\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n CFG_IOS_SDK = $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_FLAGS = -target arm-apple-darwin -isysroot $(CFG_IOS_SDK) -I$(CFG_IOS_SDK)/usr/include -I$(CFG_IOS_SDK)/usr/include/c++/4.2.1\n-CC_arm-apple-darwin = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_arm-apple-darwin = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_arm-apple-darwin = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_arm-apple-darwin = $(shell xcrun -find -sdk iphoneos ar)\n-CFG_LIB_NAME_arm-apple-darwin = lib$(1).dylib\n-CFG_LIB_GLOB_arm-apple-darwin = lib$(1)-*.dylib\n-CFG_LIB_DSYM_GLOB_arm-apple-darwin = lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_arm-apple-darwin := $(CFG_IOS_FLAGS) $(CFLAGS)\n-CFG_GCCISH_CFLAGS_arm-apple-darwin := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS) $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_arm-apple-darwin := -fno-rtti $(CFG_IOS_FLAGS) $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_arm-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-darwin :=\n-CFG_GCCISH_POST_LIB_FLAGS_arm-apple-darwin :=\n-CFG_DEF_SUFFIX_arm-apple-darwin := .darwin.def\n-CFG_LLC_FLAGS_arm-apple-darwin :=\n-CFG_INSTALL_NAME_arm-apple-darwin = -Wl,-install_name,@rpath/$(1)\n-CFG_LIBUV_LINK_FLAGS_arm-apple-darwin =\n-CFG_EXE_SUFFIX_arm-apple-darwin :=\n-CFG_WINDOWSY_arm-apple-darwin :=\n-CFG_UNIXY_arm-apple-darwin := 1\n-CFG_PATH_MUNGE_arm-apple-darwin := true\n-CFG_LDPATH_arm-apple-darwin :=\n-CFG_RUN_arm-apple-darwin = $(2)\n-CFG_RUN_TARG_arm-apple-darwin = $(call CFG_RUN_arm-apple-darwin,,$(2))\n+CFG_IOS_FLAGS = -target armv7-apple-darwin -isysroot $(CFG_IOS_SDK) -mios-version-min=7.0\n+CC_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n+CXX_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+CPP_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+AR_arm-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n endif\n+CFG_LIB_NAME_arm-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_arm-apple-ios = lib$(1)-*.a\n+CFG_STATIC_LIB_NAME_arm-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_arm-apple-ios = lib$(1)-*.a.dSYM\n+CFG_CFLAGS_arm-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_FLAGS)\n+CFG_GCCISH_CFLAGS_arm-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS) -mfpu=vfp3 -arch armv7\n+CFG_GCCISH_CXXFLAGS_arm-apple-ios := -fno-rtti $(CFG_IOS_FLAGS) -I$(CFG_IOS_SDK)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_arm-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK) -Wl,-no_compact_unwind\n+CFG_GCCISH_DEF_FLAG_arm-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_arm-apple-ios :=\n+CFG_DEF_SUFFIX_arm-apple-ios := .darwin.def\n+CFG_LLC_FLAGS_arm-apple-ios := -mattr=+vfp3,+v7,+thumb2,+neon -march=arm\n+CFG_INSTALL_NAME_arm-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_arm-apple-ios =\n+CFG_EXE_SUFFIX_arm-apple-ios :=\n+CFG_WINDOWSY_arm-apple-ios :=\n+CFG_UNIXY_arm-apple-ios := 1\n+CFG_PATH_MUNGE_arm-apple-ios := true\n+CFG_LDPATH_arm-apple-ios :=\n+CFG_RUN_arm-apple-ios = $(2)\n+CFG_RUN_TARG_arm-apple-ios = $(call CFG_RUN_arm-apple-ios,,$(2))\n+RUSTC_FLAGS_arm-apple-ios := -C relocation_model=pic\n+RUSTC_CROSS_FLAGS_arm-apple-ios :=-C relocation_model=pic\n+\n+# i386-apple-ios configuration\n+CFG_SDK_NAME_i386-apple-ios = iphonesimulator\n+CFG_SDK_ARCHS_i386-apple-ios = i386\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n+CFG_IOSSIM_SDK = $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n+CFG_IOSSIM_FLAGS = -target i386-apple-ios -isysroot $(CFG_IOSSIM_SDK) -mios-simulator-version-min=7.0\n+CC_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n+CXX_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n+CPP_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n+AR_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n+endif\n+CFG_LIB_NAME_i386-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_i386-apple-ios = lib$(1)-*.dylib\n+CFG_STATIC_LIB_NAME_i386-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_i386-apple-ios = lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_i386-apple-ios = $(CFG_IOSSIM_FLAGS)\n+CFG_GCCISH_CFLAGS_i386-apple-ios = -Wall -Werror -g -fPIC -m32 $(CFG_IOSSIM_FLAGS)\n+CFG_GCCISH_CXXFLAGS_i386-apple-ios = -fno-rtti $(CFG_IOSSIM_FLAGS) -I$(CFG_IOSSIM_SDK)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_i386-apple-ios = -lpthread -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK)\n+CFG_GCCISH_DEF_FLAG_i386-apple-ios = -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_i386-apple-ios =\n+CFG_GCCISH_POST_LIB_FLAGS_i386-apple-ios =\n+CFG_DEF_SUFFIX_i386-apple-ios = .darwin.def\n+CFG_LLC_FLAGS_i386-apple-ios =\n+CFG_INSTALL_NAME_i386-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_i386-apple-ios =\n+CFG_EXE_SUFFIX_i386-apple-ios =\n+CFG_WINDOWSY_i386-apple-ios =\n+CFG_UNIXY_i386-apple-ios = 1\n+CFG_PATH_MUNGE_i386-apple-ios = true\n+CFG_LDPATH_i386-apple-ios =\n+CFG_RUN_i386-apple-ios = $(2)\n+CFG_RUN_TARG_i386-apple-ios = $(call CFG_RUN_i386-apple-ios,,$(2))\n+CFG_JEMALLOC_CFLAGS_i386-apple-ios = -target i386-apple-ios -Wl,-syslibroot $(CFG_IOSSIM_SDK) -Wl,-no_compact_unwind\n \n # x86_64-apple-darwin configuration\n CC_x86_64-apple-darwin=$(CC)"}, {"sha": "cb6c0fc7e5e8b9d0624c29f0ec0b7a8a8583b172", "filename": "mk/rt.mk", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9e90a5e72c760cee268b714aced54ed30d04fa3c/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9e90a5e72c760cee268b714aced54ed30d04fa3c/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=9e90a5e72c760cee268b714aced54ed30d04fa3c", "patch": "@@ -166,6 +166,9 @@ ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n   JEMALLOC_ARGS_$(1) := --enable-lazy-lock\n else ifeq ($(OSTYPE_$(1)), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n+else ifeq ($(OSTYPE_$(1)), apple-ios)\n+  LIBUV_OSTYPE_$(1) := ios\n+  JEMALLOC_ARGS_$(1) := --disable-tls\n else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := freebsd\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n@@ -181,6 +184,8 @@ LIBUV_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libuv\n LIBUV_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(LIBUV_NAME_$(1))\n \n LIBUV_MAKEFILE_$(1) := $$(CFG_BUILD_DIR)$$(RT_OUTPUT_DIR_$(1))/libuv/Makefile\n+LIBUV_BUILD_DIR_$(1) := $$(CFG_BUILD_DIR)$$(RT_OUTPUT_DIR_$(1))/libuv\n+LIBUV_XCODEPROJ_$(1) := $$(LIBUV_BUILD_DIR_$(1))/uv.xcodeproj\n \n LIBUV_STAMP_$(1) = $$(LIBUV_DIR_$(1))/libuv-auto-clean-stamp\n \n@@ -212,6 +217,31 @@ $$(LIBUV_LOCAL_$(1)): $$(LIBUV_DEPS) $$(MKFILE_DEPS)\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n \t\tV=$$(VERBOSE)\n+\t$$(Q)cp $$(S)src/libuv/libuv.a $$@\n+else ifeq ($(OSTYPE_$(1)), apple-ios) # iOS\n+$$(LIBUV_XCODEPROJ_$(1)): $$(LIBUV_DEPS) $$(MKFILE_DEPS) $$(LIBUV_STAMP_$(1))\n+\tcp -rf $(S)src/libuv/ $$(LIBUV_BUILD_DIR_$(1))\n+\t(cd $$(LIBUV_BUILD_DIR_$(1)) && \\\n+\t $$(CFG_PYTHON) ./gyp_uv.py -f xcode \\\n+\t   -D ninja \\\n+\t   -R libuv)\n+\ttouch $$@\n+\n+LIBUV_XCODE_OUT_LIB_$(1) := $$(LIBUV_BUILD_DIR_$(1))/build/Release-$$(CFG_SDK_NAME_$(1))/libuv.a\n+\n+$$(LIBUV_LIB_$(1)): $$(LIBUV_XCODE_OUT_LIB_$(1)) $$(MKFILE_DEPS)\n+\t$$(Q)cp $$< $$@\n+$$(LIBUV_XCODE_OUT_LIB_$(1)): $$(LIBUV_DEPS) $$(LIBUV_XCODEPROJ_$(1)) \\\n+\t\t\t\t    $$(MKFILE_DEPS)\n+\t$$(Q)xcodebuild -project $$(LIBUV_BUILD_DIR_$(1))/uv.xcodeproj \\\n+\t\tCFLAGS=\"$$(LIBUV_CFLAGS_$(1)) $$(SNAP_DEFINES)\" \\\n+\t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS_$(1))\" \\\n+\t\t$$(LIBUV_ARGS_$(1)) \\\n+\t\tV=$$(VERBOSE) \\\n+\t\t-configuration Release \\\n+\t\t-sdk \"$$(CFG_SDK_NAME_$(1))\" \\\n+\t\tARCHS=\"$$(CFG_SDK_ARCHS_$(1))\"\n+\t$$(Q)touch $$@\n else\n LIBUV_LOCAL_$(1) := $$(LIBUV_DIR_$(1))/Release/libuv.a\n $$(LIBUV_LOCAL_$(1)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) $$(MKFILE_DEPS)\n@@ -226,7 +256,6 @@ $$(LIBUV_LOCAL_$(1)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1)) $$(MKFILE_DEPS)\n \t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n \t$$(Q)touch $$@\n-\n endif\n \n ifeq ($(1),$$(CFG_BUILD))\n@@ -269,13 +298,13 @@ JEMALLOC_LOCAL_$(1) := $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1\n $$(JEMALLOC_LOCAL_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, make: jemalloc)\n \tcd \"$$(JEMALLOC_BUILD_DIR_$(1))\"; \"$(S)src/jemalloc/configure\" \\\n-\t\t$$(JEMALLOC_ARGS_$(1)) --enable-cc-silence --with-jemalloc-prefix=je_ \\\n-\t\t--disable-experimental --build=$(CFG_BUILD) --host=$(1) \\\n+\t\t$$(JEMALLOC_ARGS_$(1)) --with-jemalloc-prefix=je_ \\\n+\t\t--build=$(CFG_BUILD) --host=$(1) \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n \t\tRANLIB=\"$$(AR_$(1)) s\" \\\n \t\tCPPFLAGS=\"-I $(S)src/rt/\" \\\n-\t\tEXTRA_CFLAGS=\"$$(CFG_CFLAGS_$(1)) -g1\"\n+\t\tEXTRA_CFLAGS=\"$$(CFG_CFLAGS_$(1)) $$(CFG_JEMALLOC_CFLAGS_$(1)) -g1\"\n \t$$(Q)$$(MAKE) -C \"$$(JEMALLOC_BUILD_DIR_$(1))\" build_lib_static\n \n ifeq ($(1),$$(CFG_BUILD))\n@@ -335,15 +364,22 @@ BACKTRACE_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),backtrace)\n BACKTRACE_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(BACKTRACE_NAME_$(1))\n BACKTRACE_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libbacktrace\n \n-ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n-\n # We don't use this on platforms that aren't linux-based, so just make the file\n # available, the compilation of libstd won't actually build it.\n+ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n+# See comment above\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n \n else\n+ifeq ($$(findstring ios,$$(OSTYPE_$(1))),ios)\n+# See comment above\n+$$(BACKTRACE_LIB_$(1)):\n+\ttouch $$@\n+else\n+\n ifeq ($$(CFG_WINDOWSY_$(1)),1)\n+# See comment above\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n else\n@@ -388,6 +424,7 @@ $$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n \t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n \n endif # endif for windowsy\n+endif # endif for ios\n endif # endif for darwin\n \n endef"}]}