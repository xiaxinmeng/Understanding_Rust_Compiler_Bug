{"sha": "eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTMzNjc0MDRlOWNhNmFiZjg0MTk5YjVjMmRiZTUxY2U2Y2RiZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T20:11:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T05:24:34Z"}, "message": "libsyntax: Introduce the new `assert!` macro; make `assert` no longer a keyword", "tree": {"sha": "51f5c04a529cdfc03cd4fded6f66c699a8162940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f5c04a529cdfc03cd4fded6f66c699a8162940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "html_url": "https://github.com/rust-lang/rust/commit/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa70709e07983fb62d1fddadac0987c79e836d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70709e07983fb62d1fddadac0987c79e836d23", "html_url": "https://github.com/rust-lang/rust/commit/fa70709e07983fb62d1fddadac0987c79e836d23"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "dbc132899d90e59ae2b1b6f9ec49a1aa63204d8c", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "patch": "@@ -291,7 +291,7 @@ pub fn test() {\n         }\n     }\n \n-    fail_unless!(seq_range(10, 15) == @[10, 11, 12, 13, 14]);\n+    assert_eq!(seq_range(10, 15), @[10, 11, 12, 13, 14]);\n     fail_unless!(from_fn(5, |x| x+1) == @[1, 2, 3, 4, 5]);\n     fail_unless!(from_elem(5, 3.14) == @[3.14, 3.14, 3.14, 3.14, 3.14]);\n }"}, {"sha": "46ded7ecf3dd0146d47fa2e8b8c15f92b9b8b037", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "patch": "@@ -464,6 +464,19 @@ pub fn core_macros() -> ~str {\n         }\n     )\n \n+    macro_rules! assert(\n+        ($cond:expr) => {\n+            if !$cond {\n+                ::core::sys::fail_assert(stringify!($cond), file!(), line!())\n+            }\n+        };\n+        ($cond:expr, $msg:expr) => {\n+            if !$cond {\n+                ::core::sys::fail_assert($msg, file!(), line!())\n+            }\n+        }\n+    )\n+\n     macro_rules! assert_eq (\n         ($given:expr , $expected:expr) =>\n         ({let given_val = $given;"}, {"sha": "a987ae948a48f6edc2c8606e6a3578247dc70982", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "patch": "@@ -51,7 +51,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteTraitImplVisibility,\n     ObsoleteRecordType,\n     ObsoleteRecordPattern,\n-    ObsoleteAssertion,\n     ObsoletePostFnTySigil,\n     ObsoleteBareFnType,\n     ObsoleteNewtypeEnum,\n@@ -165,10 +164,6 @@ pub impl Parser {\n                 \"structural record pattern\",\n                 \"use a structure instead\"\n             ),\n-            ObsoleteAssertion => (\n-                \"assertion\",\n-                \"use `fail_unless!()` instead\"\n-            ),\n             ObsoletePostFnTySigil => (\n                 \"fn sigil in postfix position\",\n                 \"Rather than `fn@`, `fn~`, or `fn&`, \\"}, {"sha": "6f2c0f7ddf5cd7a5c5ddd581598884a206eceeec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "patch": "@@ -76,7 +76,7 @@ use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n-use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n+use parse::obsolete::{ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n@@ -1217,10 +1217,6 @@ pub impl Parser {\n             ex = expr_log(ast::log_other, lvl, e);\n             hi = self.span.hi;\n             self.expect(&token::RPAREN);\n-        } else if self.eat_keyword(&~\"assert\") {\n-            let e = self.parse_expr();\n-            ex = expr_copy(e);  // whatever\n-            self.obsolete(*self.last_span, ObsoleteAssertion);\n         } else if self.eat_keyword(&~\"return\") {\n             if can_begin_expr(&*self.token) {\n                 let e = self.parse_expr();"}, {"sha": "8b78087e16f7ddeaacc09139e474d7c73941c257", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3367404e9ca6abf84199b5c2dbe51ce6cdbde/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=eba3367404e9ca6abf84199b5c2dbe51ce6cdbde", "patch": "@@ -488,7 +488,7 @@ pub fn temporary_keyword_table() -> HashMap<~str, ()> {\n pub fn strict_keyword_table() -> HashMap<~str, ()> {\n     let words = HashMap();\n     let keys = ~[\n-        ~\"as\", ~\"assert\",\n+        ~\"as\",\n         ~\"break\",\n         ~\"const\", ~\"copy\",\n         ~\"do\", ~\"drop\","}]}