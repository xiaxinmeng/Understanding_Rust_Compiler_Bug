{"sha": "4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNWI3YWRkN2Y1MzEzZjZkYjhkZjliMTFiZTE1NWY3YTNlNDY3Zjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T00:13:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T00:13:38Z"}, "message": "Rollup merge of #78437 - ssomers:btree_no_ord_at_node_level, r=Mark-Simulacrum\n\nBTreeMap: stop mistaking node for an orderly place\n\nA second mistake in #77612 was to ignore the node module's rightful comment \"this module doesn't care whether the entries are sorted\". And there's a much simpler way to visit the keys in order, if you check this separately from a single pass checking everything.\n\nr? ````````@Mark-Simulacrum````````", "tree": {"sha": "f70a140cde88a15b8a8b35dc10459e82a098d30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f70a140cde88a15b8a8b35dc10459e82a098d30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqImyCRBK7hj4Ov3rIwAAdHIIACNcR+vqLdNGpC02KOkDmtCC\niRPqFHxuM6LygF9KADLHXE9onLeJ9byUzEL4PqkhWB9q2DYeQLsXQ+vhVTOxvclJ\nKvlcKFhYYrlSX5fAj/RPD59/0La8br/1QWYv0tD2oDCDFYBVdaMU2npLLH3yxgM5\nsVCDaL0L0mx0llmyo9GaxEGu0W7oix3guJIMu8CyQmFD7E6vEcnZ6EWoxyazbo6S\nFiIuqqdI+yjrSXaMPuqU7+kjHy96QlAIPhhhLRoy75HSO64kqGbl1p/8hUCE5TNN\npt5ivNyOBVkN7A8/L5namPLebH8ZC2uYGY/0EVdgiAlEQDBQvx9HUgM5E/VgF7o=\n=kPYf\n-----END PGP SIGNATURE-----\n", "payload": "tree f70a140cde88a15b8a8b35dc10459e82a098d30b\nparent 12c5f786ea2a754000f3947895c22adda480a1c1\nparent e099138eb6274b8450fbbb3c1fec0389337eb992\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604880818 +0100\ncommitter GitHub <noreply@github.com> 1604880818 +0100\n\nRollup merge of #78437 - ssomers:btree_no_ord_at_node_level, r=Mark-Simulacrum\n\nBTreeMap: stop mistaking node for an orderly place\n\nA second mistake in #77612 was to ignore the node module's rightful comment \"this module doesn't care whether the entries are sorted\". And there's a much simpler way to visit the keys in order, if you check this separately from a single pass checking everything.\n\nr? ````````@Mark-Simulacrum````````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "html_url": "https://github.com/rust-lang/rust/commit/4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b7add7f5313f6db8df9b11be155f7a3e467f7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c5f786ea2a754000f3947895c22adda480a1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c5f786ea2a754000f3947895c22adda480a1c1", "html_url": "https://github.com/rust-lang/rust/commit/12c5f786ea2a754000f3947895c22adda480a1c1"}, {"sha": "e099138eb6274b8450fbbb3c1fec0389337eb992", "url": "https://api.github.com/repos/rust-lang/rust/commits/e099138eb6274b8450fbbb3c1fec0389337eb992", "html_url": "https://github.com/rust-lang/rust/commit/e099138eb6274b8450fbbb3c1fec0389337eb992"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "4fea6adf54107d3d7d8b34daf5038cf860286fc4", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b7add7f5313f6db8df9b11be155f7a3e467f7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b7add7f5313f6db8df9b11be155f7a3e467f7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "patch": "@@ -42,7 +42,7 @@ fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n+impl<K, V> BTreeMap<K, V> {\n     /// Panics if the map (or the code navigating it) is corrupted.\n     fn check(&self)\n     where\n@@ -54,14 +54,14 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n \n-            let counted = root_node.assert_ascending();\n-            assert_eq!(self.length, counted);\n             assert_eq!(self.length, root_node.calc_length());\n \n             root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n             assert_eq!(self.length, 0);\n         }\n+\n+        self.assert_ascending();\n     }\n \n     /// Returns the height of the root, if any.\n@@ -79,10 +79,28 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n             String::from(\"not yet allocated\")\n         }\n     }\n+\n+    /// Asserts that the keys are in strictly ascending order.\n+    fn assert_ascending(&self)\n+    where\n+        K: Copy + Debug + Ord,\n+    {\n+        let mut num_seen = 0;\n+        let mut keys = self.keys();\n+        if let Some(mut previous) = keys.next() {\n+            num_seen = 1;\n+            for next in keys {\n+                assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n+                previous = next;\n+                num_seen += 1;\n+            }\n+        }\n+        assert_eq!(num_seen, self.len());\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n-    pub fn assert_min_len(self, min_len: usize) {\n+    fn assert_min_len(self, min_len: usize) {\n         assert!(self.len() >= min_len, \"{} < {}\", self.len(), min_len);\n         if let node::ForceResult::Internal(node) = self.force() {\n             for idx in 0..=node.len() {"}, {"sha": "38c75de34eeebb8a16242a04c77856467a97f284", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b7add7f5313f6db8df9b11be155f7a3e467f7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b7add7f5313f6db8df9b11be155f7a3e467f7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=4e5b7add7f5313f6db8df9b11be155f7a3e467f7", "patch": "@@ -17,43 +17,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n         }\n     }\n \n-    /// Asserts that the keys are in strictly ascending order.\n-    /// Returns how many keys it encountered.\n-    pub fn assert_ascending(self) -> usize\n-    where\n-        K: Copy + Debug + Ord,\n-    {\n-        struct SeriesChecker<T> {\n-            num_seen: usize,\n-            previous: Option<T>,\n-        }\n-        impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n-            fn is_ascending(&mut self, next: T) {\n-                if let Some(previous) = self.previous {\n-                    assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n-                }\n-                self.previous = Some(next);\n-                self.num_seen += 1;\n-            }\n-        }\n-\n-        let mut checker = SeriesChecker { num_seen: 0, previous: None };\n-        self.visit_nodes_in_order(|pos| match pos {\n-            navigate::Position::Leaf(node) => {\n-                for idx in 0..node.len() {\n-                    let key = *unsafe { node.key_at(idx) };\n-                    checker.is_ascending(key);\n-                }\n-            }\n-            navigate::Position::InternalKV(kv) => {\n-                let key = *kv.into_kv().0;\n-                checker.is_ascending(key);\n-            }\n-            navigate::Position::Internal(_) => {}\n-        });\n-        checker.num_seen\n-    }\n-\n     pub fn dump_keys(self) -> String\n     where\n         K: Debug,"}]}