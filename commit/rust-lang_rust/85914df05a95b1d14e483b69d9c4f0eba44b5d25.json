{"sha": "85914df05a95b1d14e483b69d9c4f0eba44b5d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OTE0ZGYwNWE5NWIxZDE0ZTQ4M2I2OWQ5YzRmMGViYTQ0YjVkMjU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-04T01:42:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-17T21:02:27Z"}, "message": "Disallow coercions from [T, ..n] to &[T]or *[T]\n\n[breaking-change]\n\nInsert an `&` to fix", "tree": {"sha": "1a8c9b6466ba08f99399f5a6ae6915dd79223518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8c9b6466ba08f99399f5a6ae6915dd79223518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85914df05a95b1d14e483b69d9c4f0eba44b5d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85914df05a95b1d14e483b69d9c4f0eba44b5d25", "html_url": "https://github.com/rust-lang/rust/commit/85914df05a95b1d14e483b69d9c4f0eba44b5d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85914df05a95b1d14e483b69d9c4f0eba44b5d25/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09279395b6ca40f1398277971586197f949738a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a"}], "stats": {"total": 50, "additions": 0, "deletions": 50}, "files": [{"sha": "1bbbe2838b9be5f59dbc1e96e6ff16567346f49d", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/85914df05a95b1d14e483b69d9c4f0eba44b5d25/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85914df05a95b1d14e483b69d9c4f0eba44b5d25/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=85914df05a95b1d14e483b69d9c4f0eba44b5d25", "patch": "@@ -93,27 +93,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                a.repr(self.get_ref().infcx.tcx),\n                b.repr(self.get_ref().infcx.tcx));\n \n-        // Special case: if the subtype is a sized array literal (`[T, ..n]`),\n-        // then it would get auto-borrowed to `&[T, ..n]` and then DST-ified\n-        // to `&[T]`. Doing it all at once makes the target code a bit more\n-        // efficient and spares us from having to handle multiple coercions.\n-        match ty::get(b).sty {\n-            ty::ty_ptr(mt_b) | ty::ty_rptr(_, mt_b) => {\n-                match ty::get(mt_b.ty).sty {\n-                    ty::ty_vec(_, None) => {\n-                        let unsize_and_ref = self.unpack_actual_value(a, |sty_a| {\n-                            self.coerce_unsized_with_borrow(a, sty_a, b, mt_b.mutbl)\n-                        });\n-                        if unsize_and_ref.is_ok() {\n-                            return unsize_and_ref;\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         // Consider coercing the subtype to a DST\n         let unsize = self.unpack_actual_value(a, |sty_a| {\n             self.coerce_unsized(a, sty_a, b)\n@@ -274,35 +253,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         })))\n     }\n \n-    // [T, ..n] -> &[T] or &mut [T]\n-    fn coerce_unsized_with_borrow(&self,\n-                                  a: ty::t,\n-                                  sty_a: &ty::sty,\n-                                  b: ty::t,\n-                                  mutbl_b: ast::Mutability)\n-                                  -> CoerceResult {\n-        debug!(\"coerce_unsized_with_borrow(a={}, sty_a={}, b={})\",\n-               a.repr(self.get_ref().infcx.tcx), sty_a,\n-               b.repr(self.get_ref().infcx.tcx));\n-\n-        match *sty_a {\n-            ty::ty_vec(t_a, Some(len)) => {\n-                let sub = Sub(self.get_ref().clone());\n-                let coercion = Coercion(self.get_ref().trace.clone());\n-                let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n-                let unsized_ty = ty::mk_slice(self.get_ref().infcx.tcx, r_borrow,\n-                                              mt {ty: t_a, mutbl: mutbl_b});\n-                try!(self.get_ref().infcx.try(|| sub.tys(unsized_ty, b)));\n-                Ok(Some(AdjustDerefRef(AutoDerefRef {\n-                    autoderefs: 0,\n-                    autoref: Some(ty::AutoPtr(r_borrow,\n-                                              mutbl_b,\n-                                              Some(box AutoUnsize(ty::UnsizeLength(len)))))\n-                })))\n-            }\n-            _ => Err(ty::terr_mismatch)\n-        }\n-    }\n \n     // &[T, ..n] or &mut [T, ..n] -> &[T]\n     // or &mut [T, ..n] -> &mut [T]"}]}