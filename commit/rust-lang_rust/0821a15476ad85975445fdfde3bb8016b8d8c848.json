{"sha": "0821a15476ad85975445fdfde3bb8016b8d8c848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MjFhMTU0NzZhZDg1OTc1NDQ1ZmRmZGUzYmI4MDE2YjhkOGM4NDg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T14:57:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T14:57:36Z"}, "message": "no need for EvalContext::eval_binop", "tree": {"sha": "7c6841b4117e28c23cf142dfe7d113d2e1e0f14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6841b4117e28c23cf142dfe7d113d2e1e0f14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0821a15476ad85975445fdfde3bb8016b8d8c848", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaARgAAoJEFbW7qD8Z6xGs1MQALQ67qxuWkQiG9mJ8uKbyPoX\nCwZ7o1xexOGSz/HUJdjnOeWGkR+CQ3HPzBTJsJlOGg/nQTdUZocoWGqb4n1XWqO6\nQ1kONBd7fdDV2USvqVoCtJFwPM9eGFTYfFou+0qBQUfvKpd+KCxCDf82U70amnnK\nCqesXV/TXpsFyj2d8IOZvCHQYEvzdSqcIlf6rAbRd0U0rskPw6G+CxDuDhrXHGSc\nKpgjwbdCPxNGV2Ca+m/7BysZn0PJkVSdlrDX0ROLGYx4k0byVwPqFgUDzbbRd6G0\niuMB0uh8OwylfmnYASzX9ssLDdU+C7DqUSlqADG41d4V5xOPKpsPb0xO6QPRmmZZ\n5aHHMhuu9Px0wIco5+vE8JUCDa2PsqwB4VOeFznypv1K8r7eC5HLkrHX1vWq1g0q\nhwj0IbmyBvOoNBihu475yp4PJAHrPKG3zudcXeMQSIJwrXyL6gBKb4PUkRgT0P4r\ngUTPMyx1zDq08y884yQIaKR4KgjQQFc3XTdQuAiDGjHtS1eqS7X32FhgaYZvEir+\nU3d9oksjU5wGMk+sTs8IOUyjLeggMNT9fL6mqHxUwQKYps8eDcb5OnlMo5e0pf84\nDi3sDfzd+TgBARDe1egisXHxTebgx6U5HhJNy6LiDfnP+N62Vj+3KAKeO0MJpToq\nCCZhpL83gGHPcoHIQSTU\n=xD9b\n-----END PGP SIGNATURE-----", "payload": "tree 7c6841b4117e28c23cf142dfe7d113d2e1e0f14d\nparent 68469be89bd7652cf12a0fe74fb6cd6c5915498d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466434656 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466434656 +0200\n\nno need for EvalContext::eval_binop"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0821a15476ad85975445fdfde3bb8016b8d8c848", "html_url": "https://github.com/rust-lang/rust/commit/0821a15476ad85975445fdfde3bb8016b8d8c848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0821a15476ad85975445fdfde3bb8016b8d8c848/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68469be89bd7652cf12a0fe74fb6cd6c5915498d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68469be89bd7652cf12a0fe74fb6cd6c5915498d", "html_url": "https://github.com/rust-lang/rust/commit/68469be89bd7652cf12a0fe74fb6cd6c5915498d"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "0a8c82c5df3f59c30706bbb45d2b32cfbbab048a", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0821a15476ad85975445fdfde3bb8016b8d8c848/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0821a15476ad85975445fdfde3bb8016b8d8c848/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=0821a15476ad85975445fdfde3bb8016b8d8c848", "patch": "@@ -688,14 +688,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.memory.write_bool(dest.offset(offset), overflowed)\n     }\n \n-    /// Extracts the lhs and rhs primval from the operands and applies the binary op.\n-    /// Returns the result and whether the operation overflowed\n-    fn eval_binop(\n+    /// Applies the binary operation `op` to the arguments and writes the result to the destination.\n+    /// Returns `true` if the operation overflowed.\n+    fn intrinsic_overflowing(\n         &mut self,\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n-    ) -> EvalResult<'tcx, (PrimVal, bool)> {\n+        dest: Pointer,\n+    ) -> EvalResult<'tcx, bool> {\n         let left_ptr = self.eval_operand(left)?;\n         let left_ty = self.operand_ty(left);\n         let left_val = self.read_primval(left_ptr, left_ty)?;\n@@ -704,18 +705,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let right_ty = self.operand_ty(right);\n         let right_val = self.read_primval(right_ptr, right_ty)?;\n \n-        primval::binary_op(op, left_val, right_val)\n-    }\n-\n-    /// applies the binary operation `op` to the arguments and writes the result to the destination\n-    fn intrinsic_overflowing(\n-        &mut self,\n-        op: mir::BinOp,\n-        left: &mir::Operand<'tcx>,\n-        right: &mir::Operand<'tcx>,\n-        dest: Pointer,\n-    ) -> EvalResult<'tcx, bool> {\n-        let (val, overflow) = self.eval_binop(op, left, right)?;\n+        let (val, overflow) = primval::binary_op(op, left_val, right_val)?;\n         self.memory.write_primval(dest, val)?;\n         Ok(overflow)\n     }\n@@ -944,8 +934,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             BinaryOp(bin_op, ref left, ref right) => {\n                 // ignore overflow bit, rustc inserts check branches for us\n-                let result = self.eval_binop(bin_op, left, right)?.0;\n-                self.memory.write_primval(dest, result)?;\n+                self.intrinsic_overflowing(bin_op, left, right, dest)?;\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {"}]}