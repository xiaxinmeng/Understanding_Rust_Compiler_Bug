{"sha": "4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMzFlODhiYjdiNjJkYjU3NDNjZGY1YTllZDAxZTNjYWJhYmM1ZWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-01T16:41:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-01T16:41:52Z"}, "message": "Merge #7508\n\n7508: Don't filter code suggestions on Applicability r=lnicola a=CryZe\n\nI've noticed that there are various suggestions that rust-analyzer seems to filter out, even if they make sense.\r\n\r\nHere's an example of where it seems like there should be a suggestion, but there isn't:\r\n\r\n![https://i.imgur.com/wsjM6iz.png](https://i.imgur.com/wsjM6iz.png)\r\n\r\nIt turns out that this specific suggestion is not considered `MachineApplicable`, which are the only suggestions that rust-analyzer accepts. However if you read the documentation for `MachineApplicable`,\r\n\r\n[Source](https://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L27-L29)\r\n```rust\r\n/// The suggestion is definitely what the user intended. This suggestion should be\r\n/// automatically applied.\r\nMachineApplicable,\r\n```\r\n\r\nthen you realize that these are specifically only those suggestions that rust-analyzer could even automatically apply (in some distant future, behind some setting or command or so). Other suggestions that may have some semantic impact do not use `MachineApplicable`. So all other suggestions are still intended to be suggested to the user, just not automatically applied without the user being consulted.\r\n\r\n[Source](https://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L22-L24)\r\n```rust\r\n/// All suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion\r\n/// to determine whether it should be automatically applied or if the user should be consulted\r\n/// before applying the suggestion.\r\n```\r\n\r\nSo with that in mind, rust-analyzer should almost definitely not filter out `MaybeIncorrect` (which honestly is named horribly, it just means that it's a semantic change, not just a syntactical one).\r\n\r\nThen there's `HasPlaceholders` which basically is just another semantic one, but with placeholders. The user will have to make some adjustments, but the suggestion still is perfectly valid. rust-analyzer could probably detect those placeholders and put proper \"tab through\" markers there for the IDE, but that's not necessary for now.\r\n\r\nThen the last one is `Unspecified` which is so unknown that I don't even know how to judge it, meaning that the suggestion should probably also just be suggested to the user and then they can decide.\r\n\r\nSo with all that in mind, I'm proposing to get rid of the check for Applicability entirely.\n\nCo-authored-by: Christopher Serr <christopher.serr@gmail.com>", "tree": {"sha": "593813edafdf3dba5655a321391cbd028d7e649e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593813edafdf3dba5655a321391cbd028d7e649e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGC9QCRBK7hj4Ov3rIwAAdHIIAI4MF2yl1Asn3kVu+gMiTbLg\nWBzgUwSAgo1ZADqlOQsCw69IZcRjnCM+wKrRp759MpXhmWl9qWKRdNyHLGhpZcW7\nq4lnghfU2Tq34zznbKyBxz2MkMwxYhjElqEL5K/nF53Ll7PdWD8rptMKhkvjN8q7\nCa6c/u+YnipVtBKE7X3Ed0R3uFIz6EY55gkTpoWOlzbLGwvH/zShxv9uAbwNTk5a\na+kQV6zuin+lmxKjalgXj9ANvdKdXVq+tfqc5E89BbknxWevtCoydPqz4Uu2ZEJK\nd1pplbOjn3k0aBg/S5iQJjuAlaGKu2+cPOGdTcgqV1c121zu41HJz/LteD3jwng=\n=jHYL\n-----END PGP SIGNATURE-----\n", "payload": "tree 593813edafdf3dba5655a321391cbd028d7e649e\nparent 2d9bb69990b866bad0b4300972f1706d38329ad3\nparent b072bbed2a770a87ce6b2e919f1401e3021aef1d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612197712 +0000\ncommitter GitHub <noreply@github.com> 1612197712 +0000\n\nMerge #7508\n\n7508: Don't filter code suggestions on Applicability r=lnicola a=CryZe\n\nI've noticed that there are various suggestions that rust-analyzer seems to filter out, even if they make sense.\r\n\r\nHere's an example of where it seems like there should be a suggestion, but there isn't:\r\n\r\n![https://i.imgur.com/wsjM6iz.png](https://i.imgur.com/wsjM6iz.png)\r\n\r\nIt turns out that this specific suggestion is not considered `MachineApplicable`, which are the only suggestions that rust-analyzer accepts. However if you read the documentation for `MachineApplicable`,\r\n\r\n[Source](https://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L27-L29)\r\n```rust\r\n/// The suggestion is definitely what the user intended. This suggestion should be\r\n/// automatically applied.\r\nMachineApplicable,\r\n```\r\n\r\nthen you realize that these are specifically only those suggestions that rust-analyzer could even automatically apply (in some distant future, behind some setting or command or so). Other suggestions that may have some semantic impact do not use `MachineApplicable`. So all other suggestions are still intended to be suggested to the user, just not automatically applied without the user being consulted.\r\n\r\n[Source](https://github.com/rust-lang/rust/blob/b3897e3d1302391ed02efbac1dce8073646b8173/compiler/rustc_lint_defs/src/lib.rs#L22-L24)\r\n```rust\r\n/// All suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion\r\n/// to determine whether it should be automatically applied or if the user should be consulted\r\n/// before applying the suggestion.\r\n```\r\n\r\nSo with that in mind, rust-analyzer should almost definitely not filter out `MaybeIncorrect` (which honestly is named horribly, it just means that it's a semantic change, not just a syntactical one).\r\n\r\nThen there's `HasPlaceholders` which basically is just another semantic one, but with placeholders. The user will have to make some adjustments, but the suggestion still is perfectly valid. rust-analyzer could probably detect those placeholders and put proper \"tab through\" markers there for the IDE, but that's not necessary for now.\r\n\r\nThen the last one is `Unspecified` which is so unknown that I don't even know how to judge it, meaning that the suggestion should probably also just be suggested to the user and then they can decide.\r\n\r\nSo with all that in mind, I'm proposing to get rid of the check for Applicability entirely.\n\nCo-authored-by: Christopher Serr <christopher.serr@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "html_url": "https://github.com/rust-lang/rust/commit/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9bb69990b866bad0b4300972f1706d38329ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9bb69990b866bad0b4300972f1706d38329ad3", "html_url": "https://github.com/rust-lang/rust/commit/2d9bb69990b866bad0b4300972f1706d38329ad3"}, {"sha": "b072bbed2a770a87ce6b2e919f1401e3021aef1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b072bbed2a770a87ce6b2e919f1401e3021aef1d", "html_url": "https://github.com/rust-lang/rust/commit/b072bbed2a770a87ce6b2e919f1401e3021aef1d"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "ce80476fbc9d6e0b3cc560e627d197081fe0636e", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "patch": "@@ -266,6 +266,51 @@\n             tags: None,\n             data: None,\n         },\n-        fixes: [],\n+        fixes: [\n+            CodeAction {\n+                title: \"consider passing by value instead\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/compiler/mir/tagset.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 41,\n+                                                character: 23,\n+                                            },\n+                                            end: Position {\n+                                                line: 41,\n+                                                character: 28,\n+                                            },\n+                                        },\n+                                        new_text: \"self\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n     },\n ]"}, {"sha": "0ed87fe3e098e4d3da4f918bc1c0a95cc54e3448", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4131e88bb7b62db5743cdf5a9ed01e3cababc5ea/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=4131e88bb7b62db5743cdf5a9ed01e3cababc5ea", "patch": "@@ -2,7 +2,7 @@\n //! `cargo check` json format to the LSP diagnostic format.\n use std::{collections::HashMap, path::Path};\n \n-use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n+use flycheck::{DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n@@ -97,9 +97,7 @@ fn map_rust_child_diagnostic(\n \n     let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n-        if let (Some(Applicability::MachineApplicable), Some(suggested_replacement)) =\n-            (&span.suggestion_applicability, &span.suggested_replacement)\n-        {\n+        if let Some(suggested_replacement) = &span.suggested_replacement {\n             let location = location(workspace_root, span);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n             edit_map.entry(location.uri).or_default().push(edit);"}]}