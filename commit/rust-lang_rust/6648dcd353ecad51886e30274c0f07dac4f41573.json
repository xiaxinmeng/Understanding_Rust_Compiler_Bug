{"sha": "6648dcd353ecad51886e30274c0f07dac4f41573", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDhkY2QzNTNlY2FkNTE4ODZlMzAyNzRjMGYwN2RhYzRmNDE1NzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-08T17:58:51Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-08T19:37:16Z"}, "message": "Rollup merge of #47258 - rkruppe:struct-assert, r=eddyb\n\nrustc::ty: Rename struct_variant to non_enum_variant\n\nr? @eddyb", "tree": {"sha": "5fdb35c002ee8049700fb0de4e1831082ebd1dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fdb35c002ee8049700fb0de4e1831082ebd1dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6648dcd353ecad51886e30274c0f07dac4f41573", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpTyGwACgkQ/vbIBR0O\nATwS7w//ba29yHVGBYgPyS9FXjL/rs/5mWTuGySor4RM2RkkUdexU5tr2J67BqGW\nbLYufHiUpWDzV+qEZvhOlnXPzms4QA2R28bmXM1FvHok5d2fadr2D4hXYOTbVSXE\n/G5u6U+wQA9LhX2HI67BSKG1S43G1cjAbdssKnG5q/q3NG0DVggh8mTqLdiuD0W/\nJaLT2STRiFaLpllttMA0+/F5LG7E6CYeOZlvf/wesx2yrSC2qTw7LKP38oHDCaV4\n6jL9fEnb57roPf4UmagPtsxv8oSTnHmXIQ7gWsFEhLq/dBv++NPdNRtuSg7hHlzq\n5Rrs0B89lVqjpRvKg4axuzStCk96w48vEEwdlCDKBMI7jipTjSS51w8Ga2PnDfcc\n5WoatAVuPQndirMFzkjFIEeO4A3YEzMI7V8380xLqssIwehe4UyMS2PqLr7oyvxL\naavgO+PZxEG5FTLUdJoOl4vdtGgD0uZg6oBmR7tRCAEByktSfImrjVUh8IxMp3LD\n0UTFAlwzBpmDGjGj3Q6l+QDeY/ZXEFfJm527Jr3Q5Bw/uqotBS1BLzxng31nAzea\n7emQUyZPVajA6LV4V4pWdd5XrR3ku/AhPh4Xf2togGvD4YEI6AJaH3Nr9S6mjxZf\nSwsN3yxzvCNp99yVjcZDYfXOPU4QJijZGquh7unjHSdLbDWdVpU=\n=SGBt\n-----END PGP SIGNATURE-----", "payload": "tree 5fdb35c002ee8049700fb0de4e1831082ebd1dc2\nparent d72a509ea01ad707c6c9b626a80ac723cfba0552\nparent cf3fefe97f23119562f824e74293420450a04f65\nauthor kennytm <kennytm@gmail.com> 1515434331 +0800\ncommitter kennytm <kennytm@gmail.com> 1515440236 +0800\n\nRollup merge of #47258 - rkruppe:struct-assert, r=eddyb\n\nrustc::ty: Rename struct_variant to non_enum_variant\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6648dcd353ecad51886e30274c0f07dac4f41573", "html_url": "https://github.com/rust-lang/rust/commit/6648dcd353ecad51886e30274c0f07dac4f41573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6648dcd353ecad51886e30274c0f07dac4f41573/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72a509ea01ad707c6c9b626a80ac723cfba0552", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72a509ea01ad707c6c9b626a80ac723cfba0552", "html_url": "https://github.com/rust-lang/rust/commit/d72a509ea01ad707c6c9b626a80ac723cfba0552"}, {"sha": "cf3fefe97f23119562f824e74293420450a04f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3fefe97f23119562f824e74293420450a04f65", "html_url": "https://github.com/rust-lang/rust/commit/cf3fefe97f23119562f824e74293420450a04f65"}], "stats": {"total": 109, "additions": 55, "deletions": 54}, "files": [{"sha": "904d80a4c021bc04774a5e8e9df466d44054391a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_field_access(&mut self, lhs: &hir::Expr, name: ast::Name) {\n         match self.tables.expr_ty_adjusted(lhs).sty {\n             ty::TyAdt(def, _) => {\n-                self.insert_def_id(def.struct_variant().field_named(name).did);\n+                self.insert_def_id(def.non_enum_variant().field_named(name).did);\n             }\n             _ => span_bug!(lhs.span, \"named field access on non-ADT\"),\n         }\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_tup_field_access(&mut self, lhs: &hir::Expr, idx: usize) {\n         match self.tables.expr_ty_adjusted(lhs).sty {\n             ty::TyAdt(def, _) => {\n-                self.insert_def_id(def.struct_variant().fields[idx].did);\n+                self.insert_def_id(def.non_enum_variant().fields[idx].did);\n             }\n             ty::TyTuple(..) => {}\n             _ => span_bug!(lhs.span, \"numeric field access on non-ADT\"),"}, {"sha": "c69005101c67141ae474e3dc4274a060160cb564", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         match with_cmt.ty.sty {\n             ty::TyAdt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n-                for with_field in &adt.struct_variant().fields {\n+                for with_field in &adt.non_enum_variant().fields {\n                     if !contains_field_named(with_field, fields) {\n                         let cmt_field = self.mc.cat_field(\n                             &*with_expr,"}, {"sha": "a8955723e3ae01da07466a4d5161209ad9992179", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -1248,7 +1248,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Def::StructCtor(_, CtorKind::Fn) => {\n                     match self.pat_ty(&pat)?.sty {\n                         ty::TyAdt(adt_def, _) => {\n-                            (cmt, adt_def.struct_variant().fields.len())\n+                            (cmt, adt_def.non_enum_variant().fields.len())\n                         }\n                         ref ty => {\n                             span_bug!(pat.span, \"tuple struct pattern unexpected type {:?}\", ty);"}, {"sha": "1dea5122aa7cc4feb104c35c4112e54f4882679a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -1691,10 +1691,9 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.destructor(tcx).is_some()\n     }\n \n-    /// Asserts this is a struct and returns the struct's unique\n-    /// variant.\n-    pub fn struct_variant(&self) -> &VariantDef {\n-        assert!(!self.is_enum());\n+    /// Asserts this is a struct or union and returns its unique variant.\n+    pub fn non_enum_variant(&self) -> &VariantDef {\n+        assert!(self.is_struct() || self.is_union());\n         &self.variants[0]\n     }\n \n@@ -1733,7 +1732,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         match def {\n             Def::Variant(vid) | Def::VariantCtor(vid, ..) => self.variant_with_id(vid),\n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n-            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => self.struct_variant(),\n+            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }\n@@ -2319,11 +2318,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.adt_def(enum_did).variant_with_id(did)\n             }\n             Def::Struct(did) | Def::Union(did) => {\n-                self.adt_def(did).struct_variant()\n+                self.adt_def(did).non_enum_variant()\n             }\n             Def::StructCtor(ctor_did, ..) => {\n                 let did = self.parent_def_id(ctor_did).expect(\"struct ctor has no parent\");\n-                self.adt_def(did).struct_variant()\n+                self.adt_def(did).non_enum_variant()\n             }\n             _ => bug!(\"expect_variant_def used with unexpected def {:?}\", def)\n         }"}, {"sha": "0889efdc142b11e4450b3e2df7828ad51896e191", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -1351,15 +1351,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn simd_type(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) => {\n-                def.struct_variant().fields[0].ty(tcx, substs)\n+                def.non_enum_variant().fields[0].ty(tcx, substs)\n             }\n             _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n     pub fn simd_size(&self, _cx: TyCtxt) -> usize {\n         match self.sty {\n-            TyAdt(def, _) => def.struct_variant().fields.len(),\n+            TyAdt(def, _) => def.non_enum_variant().fields.len(),\n             _ => bug!(\"simd_size called on invalid type\")\n         }\n     }"}, {"sha": "de96e9dc8ff2d510ae54602c71658f2318c70035", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 adt.variant_with_id(vid).fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyAdt(adt, substs), None) => {\n-                // Don't use `struct_variant`, this may be a univariant enum.\n+                // Don't use `non_enum_variant`, this may be a univariant enum.\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n@@ -277,7 +277,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 adt.variant_with_id(vid).find_field_named(n).map(|f| f.ty(self, substs))\n             }\n             (&TyAdt(adt, substs), None) => {\n-                adt.struct_variant().find_field_named(n).map(|f| f.ty(self, substs))\n+                adt.non_enum_variant().find_field_named(n).map(|f| f.ty(self, substs))\n             }\n             _ => return None\n         }\n@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     if !def.is_struct() {\n                         break;\n                     }\n-                    match def.struct_variant().fields.last() {\n+                    match def.non_enum_variant().fields.last() {\n                         Some(f) => ty = f.ty(self, substs),\n                         None => break,\n                     }\n@@ -329,7 +329,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             match (&a.sty, &b.sty) {\n                 (&TyAdt(a_def, a_substs), &TyAdt(b_def, b_substs))\n                         if a_def == b_def && a_def.is_struct() => {\n-                    if let Some(f) = a_def.struct_variant().fields.last() {\n+                    if let Some(f) = a_def.non_enum_variant().fields.last() {\n                         a = f.ty(self, a_substs);\n                         b = f.ty(self, b_substs);\n                     } else {"}, {"sha": "5cfbe49f77f11bb266aca3e92971ec71af00cc83", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                     ty::TyAdt(adt_def, _) if adt_def.is_union() => match result {\n                         RestrictionResult::Safe => RestrictionResult::Safe,\n                         RestrictionResult::SafeIf(base_lp, mut base_vec) => {\n-                            for field in &adt_def.struct_variant().fields {\n+                            for field in &adt_def.non_enum_variant().fields {\n                                 let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                                 let field_ty = if field == interior {\n                                     cmt.ty"}, {"sha": "98de394ae3967cbe67a9493989f96747e385c5bb", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             if let (&ty::TyAdt(adt_def, _), LpInterior(opt_variant_id, interior))\n                     = (&base_lp.ty.sty, lp_elem) {\n                 if adt_def.is_union() {\n-                    for field in &adt_def.struct_variant().fields {\n+                    for field in &adt_def.non_enum_variant().fields {\n                         let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                         if field != interior {\n                             let sibling_lp_kind =\n@@ -395,7 +395,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n         if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n             if let ty::TyAdt(adt_def, _) = base_lp.ty.sty {\n                 if adt_def.is_union() {\n-                    for field in &adt_def.struct_variant().fields {\n+                    for field in &adt_def.non_enum_variant().fields {\n                         let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                         let field_ty = if field == interior {\n                             lp.ty"}, {"sha": "bf5d16696f9cd28f440b94e5e10ef0474ea7b6de", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -422,15 +422,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        if def.struct_variant().fields.is_empty() {\n+                        if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n                                               adding a member to this struct\");\n                         }\n \n                         // We can't completely trust repr(C) markings; make sure the\n                         // fields are actually safe.\n                         let mut all_phantom = true;\n-                        for field in &def.struct_variant().fields {\n+                        for field in &def.non_enum_variant().fields {\n                             let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );\n@@ -458,13 +458,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        if def.struct_variant().fields.is_empty() {\n+                        if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n                                               adding a member to this union\");\n                         }\n \n                         let mut all_phantom = true;\n-                        for field in &def.struct_variant().fields {\n+                        for field in &def.non_enum_variant().fields {\n                             let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );"}, {"sha": "0152266095085971d6fea09771420e1400d23e8a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -625,7 +625,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         debug!(\"IsolatedEncoder::encode_struct_ctor({:?})\", def_id);\n         let tcx = self.tcx;\n         let adt_def = tcx.adt_def(adt_def_id);\n-        let variant = adt_def.struct_variant();\n+        let variant = adt_def.non_enum_variant();\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n@@ -935,7 +935,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ItemTy(..) => EntryKind::Type,\n             hir::ItemEnum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n-                let variant = tcx.adt_def(def_id).struct_variant();\n+                let variant = tcx.adt_def(def_id).non_enum_variant();\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -956,7 +956,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 }), repr_options)\n             }\n             hir::ItemUnion(..) => {\n-                let variant = tcx.adt_def(def_id).struct_variant();\n+                let variant = tcx.adt_def(def_id).non_enum_variant();\n                 let repr_options = get_repr_options(&tcx, def_id);\n \n                 EntryKind::Union(self.lazy(&VariantData {\n@@ -1049,7 +1049,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemStruct(..) |\n                 hir::ItemUnion(..) => {\n                     let def = self.tcx.adt_def(def_id);\n-                    self.lazy_seq(def.struct_variant().fields.iter().map(|f| {\n+                    self.lazy_seq(def.non_enum_variant().fields.iter().map(|f| {\n                         assert!(f.did.is_local());\n                         f.did.index\n                     }))"}, {"sha": "b65452fa2e27b5cacada8760c2f9ba2fe4e2dbeb", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -719,7 +719,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ty::TyAdt(def, _) => if def.is_enum() {\n                     format!(\"{}\", field.index())\n                 } else {\n-                    format!(\"{}\", def.struct_variant().fields[field.index()].name)\n+                    format!(\"{}\", def.non_enum_variant().fields[field.index()].name)\n                 },\n                 ty::TyTuple(_, _) => format!(\"{}\", field.index()),\n                 ty::TyRef(_, tnm) | ty::TyRawPtr(tnm) => {"}, {"sha": "2b95449f767dd69a5e7d2abe535e02c0d5c039db", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -488,7 +488,7 @@ fn check_ctfe_against_miri<'a, 'tcx>(\n                 miri_place = ecx.place_downcast(miri_place, variant).unwrap();\n                 &def.variants[variant]\n             } else {\n-                def.struct_variant()\n+                def.non_enum_variant()\n             };\n             let vec = match ctfe {\n                 ConstVal::Aggregate(Struct(v)) => v,"}, {"sha": "aa3cacae874b93d2c3a603469867ccf0d56cce7c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -838,8 +838,8 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 CustomCoerceUnsized::Struct(i) => i\n             };\n \n-            let source_fields = &source_adt_def.struct_variant().fields;\n-            let target_fields = &target_adt_def.struct_variant().fields;\n+            let source_fields = &source_adt_def.non_enum_variant().fields;\n+            let target_fields = &target_adt_def.non_enum_variant().fields;\n \n             assert!(coerce_index < source_fields.len() &&\n                     source_fields.len() == target_fields.len());"}, {"sha": "c39faf021df8ea4295c346c5d6fa15fb8561300b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -1583,10 +1583,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                         if !self.span.filter_generated(sub_span, ex.span) {\n                             let span =\n                                 self.span_from_span(sub_span.expect(\"No span found for var ref\"));\n+                            let ref_id =\n+                                ::id_from_def_id(def.non_enum_variant().fields[idx.node].did);\n                             self.dumper.dump_ref(Ref {\n                                 kind: RefKind::Variable,\n                                 span,\n-                                ref_id: ::id_from_def_id(def.struct_variant().fields[idx.node].did),\n+                                ref_id,\n                             });\n                         }\n                     }"}, {"sha": "94057b70124f5a4ed7c7166d2522fc8296cdba9d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -528,7 +528,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 };\n                 match self.tables.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n-                        let f = def.struct_variant().field_named(ident.node.name);\n+                        let f = def.non_enum_variant().field_named(ident.node.name);\n                         let sub_span = self.span_utils.span_for_last_ident(expr.span);\n                         filter!(self.span_utils, sub_span, expr.span, None);\n                         let span = self.span_from_span(sub_span.unwrap());"}, {"sha": "6f3556516c4cb1ab522293bd94f93ebe860d4284", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -969,7 +969,7 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let struct_name = compute_debuginfo_type_name(cx, struct_type, false);\n \n     let (struct_def_id, variant) = match struct_type.sty {\n-        ty::TyAdt(def, _) => (def.did, def.struct_variant()),\n+        ty::TyAdt(def, _) => (def.did, def.non_enum_variant()),\n         _ => bug!(\"prepare_struct_metadata on a non-ADT\")\n     };\n \n@@ -1084,7 +1084,7 @@ fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let union_name = compute_debuginfo_type_name(cx, union_type, false);\n \n     let (union_def_id, variant) = match union_type.sty {\n-        ty::TyAdt(def, _) => (def.did, def.struct_variant()),\n+        ty::TyAdt(def, _) => (def.did, def.non_enum_variant()),\n         _ => bug!(\"prepare_union_metadata on a non-ADT\")\n     };\n "}, {"sha": "d2f759f5d99a47c2a5fe4d4f90a4a346052bd871", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::TyDynamic(ref tty, ..) =>\n                 Some(PointerKind::Vtable(tty.principal().map(|p| p.def_id()))),\n             ty::TyAdt(def, substs) if def.is_struct() => {\n-                match def.struct_variant().fields.last() {\n+                match def.non_enum_variant().fields.last() {\n                     None => Some(PointerKind::Thin),\n                     Some(f) => {\n                         let field_ty = self.field_ty(span, f, substs);"}, {"sha": "3f8792aa637a9cb711303f1f064faa86da2250c3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     for (ty, _) in self.autoderef(span, rcvr_ty) {\n                         match ty.sty {\n                             ty::TyAdt(def, substs) if !def.is_enum() => {\n-                                if let Some(field) = def.struct_variant()\n+                                if let Some(field) = def.non_enum_variant()\n                                     .find_field_named(item_name) {\n                                     let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n                                     let expr_string = match snippet {"}, {"sha": "57598f99bd14e570955b4721373187f3d50380c4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -1444,7 +1444,7 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId\n     let t = tcx.type_of(def_id);\n     match t.sty {\n         ty::TyAdt(def, substs) if def.is_struct() => {\n-            let fields = &def.struct_variant().fields;\n+            let fields = &def.non_enum_variant().fields;\n             if fields.is_empty() {\n                 span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\");\n                 return;\n@@ -1498,7 +1498,7 @@ fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             // push struct def_id before checking fields\n             stack.push(def_id);\n-            for field in &def.struct_variant().fields {\n+            for field in &def.non_enum_variant().fields {\n                 let f = field.ty(tcx, substs);\n                 match f.sty {\n                     ty::TyAdt(def, _) => {\n@@ -2945,7 +2945,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     debug!(\"struct named {:?}\",  base_t);\n                     let (ident, def_scope) =\n                         self.tcx.adjust(field.node, base_def.did, self.body_id);\n-                    let fields = &base_def.struct_variant().fields;\n+                    let fields = &base_def.non_enum_variant().fields;\n                     if let Some(field) = fields.iter().find(|f| f.name.to_ident() == ident) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n@@ -2993,12 +2993,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 match expr_t.sty {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n                         if let Some(suggested_field_name) =\n-                            Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n+                            Self::suggest_field_name(def.non_enum_variant(), field, vec![]) {\n                                 err.span_label(field.span,\n                                                format!(\"did you mean `{}`?\", suggested_field_name));\n                             } else {\n                                 err.span_label(field.span, \"unknown field\");\n-                                let struct_variant_def = def.struct_variant();\n+                                let struct_variant_def = def.non_enum_variant();\n                                 let field_names = self.available_field_names(struct_variant_def);\n                                 if !field_names.is_empty() {\n                                     err.note(&format!(\"available fields are: {}\",\n@@ -3080,7 +3080,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         while let Some((base_t, _)) = autoderef.next() {\n             let field = match base_t.sty {\n                 ty::TyAdt(base_def, substs) if base_def.is_struct() => {\n-                    tuple_like = base_def.struct_variant().ctor_kind == CtorKind::Fn;\n+                    tuple_like = base_def.non_enum_variant().ctor_kind == CtorKind::Fn;\n                     if !tuple_like { continue }\n \n                     debug!(\"tuple struct named {:?}\",  base_t);\n@@ -3090,7 +3090,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     };\n                     let (ident, def_scope) =\n                         self.tcx.adjust_ident(ident, base_def.did, self.body_id);\n-                    let fields = &base_def.struct_variant().fields;\n+                    let fields = &base_def.non_enum_variant().fields;\n                     if let Some(field) = fields.iter().find(|f| f.name.to_ident() == ident) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n@@ -3350,7 +3350,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Def::AssociatedTy(..) | Def::SelfTy(..) => {\n                 match ty.sty {\n                     ty::TyAdt(adt, substs) if !adt.is_enum() => {\n-                        Some((adt.struct_variant(), adt.did, substs))\n+                        Some((adt.non_enum_variant(), adt.did, substs))\n                     }\n                     _ => None,\n                 }\n@@ -3412,7 +3412,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_expr_has_type_or_error(base_expr, struct_ty);\n             match struct_ty.sty {\n                 ty::TyAdt(adt, substs) if adt.is_struct() => {\n-                    let fru_field_types = adt.struct_variant().fields.iter().map(|f| {\n+                    let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n                         self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n                     }).collect();\n "}, {"sha": "aefee1ce30a422faf9529c0abc9f72416136acfe", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -130,14 +130,14 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             }\n             hir::ItemStruct(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, false, |fcx| {\n-                    vec![fcx.struct_variant(struct_def)]\n+                    vec![fcx.non_enum_variant(struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n             hir::ItemUnion(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, true, |fcx| {\n-                    vec![fcx.struct_variant(struct_def)]\n+                    vec![fcx.non_enum_variant(struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n@@ -689,7 +689,7 @@ struct AdtField<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    fn struct_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n+    fn non_enum_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n         let fields =\n             struct_def.fields().iter()\n             .map(|field| {\n@@ -704,7 +704,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {\n         enum_def.variants.iter()\n-            .map(|variant| self.struct_variant(&variant.node.data))\n+            .map(|variant| self.non_enum_variant(&variant.node.data))\n             .collect()\n     }\n "}, {"sha": "2f1c42bbef8ca27e8d817e05ad19042a43f941c2", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -288,7 +288,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // conversion). This will work out because `U:\n                 // Unsize<V>`, and we have a builtin rule that `*mut\n                 // U` can be coerced to `*mut V` if `U: Unsize<V>`.\n-                let fields = &def_a.struct_variant().fields;\n+                let fields = &def_a.non_enum_variant().fields;\n                 let diff_fields = fields.iter()\n                     .enumerate()\n                     .filter_map(|(i, f)| {"}, {"sha": "8a9dc3ca122488b2f769fba4aa30188781d56a17", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648dcd353ecad51886e30274c0f07dac4f41573/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6648dcd353ecad51886e30274c0f07dac4f41573", "patch": "@@ -186,7 +186,7 @@ fn build_enum(cx: &DocContext, did: DefId) -> clean::Enum {\n \n fn build_struct(cx: &DocContext, did: DefId) -> clean::Struct {\n     let predicates = cx.tcx.predicates_of(did);\n-    let variant = cx.tcx.adt_def(did).struct_variant();\n+    let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n         struct_type: match variant.ctor_kind {\n@@ -202,7 +202,7 @@ fn build_struct(cx: &DocContext, did: DefId) -> clean::Struct {\n \n fn build_union(cx: &DocContext, did: DefId) -> clean::Union {\n     let predicates = cx.tcx.predicates_of(did);\n-    let variant = cx.tcx.adt_def(did).struct_variant();\n+    let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n         struct_type: doctree::Plain,"}]}