{"sha": "1191eb45859041b467d4e0bd8accca3e164b1dad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTFlYjQ1ODU5MDQxYjQ2N2Q0ZTBiZDhhY2NjYTNlMTY0YjFkYWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-12T12:30:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Prefer fall through to code repetition", "tree": {"sha": "dad432503ecaeee987dc7d1cc28acfe8cd50bdfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad432503ecaeee987dc7d1cc28acfe8cd50bdfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1191eb45859041b467d4e0bd8accca3e164b1dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1191eb45859041b467d4e0bd8accca3e164b1dad", "html_url": "https://github.com/rust-lang/rust/commit/1191eb45859041b467d4e0bd8accca3e164b1dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1191eb45859041b467d4e0bd8accca3e164b1dad/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e93a41a653ea96954ae3780ea7d4c0368ed9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e93a41a653ea96954ae3780ea7d4c0368ed9c3", "html_url": "https://github.com/rust-lang/rust/commit/b2e93a41a653ea96954ae3780ea7d4c0368ed9c3"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "6edab2708386d96551abc46847727e7eb70d0167", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1191eb45859041b467d4e0bd8accca3e164b1dad/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1191eb45859041b467d4e0bd8accca3e164b1dad/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=1191eb45859041b467d4e0bd8accca3e164b1dad", "patch": "@@ -17,6 +17,7 @@ use rustc_span::symbol::{kw, Symbol};\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n+use std::char;\n use std::collections::BTreeMap;\n use std::fmt::{self, Write as _};\n use std::ops::{Deref, DerefMut};\n@@ -917,22 +918,36 @@ pub trait PrettyPrinter<'tcx>:\n \n         match (scalar, &ty.kind) {\n             // Byte strings (&[u8; N])\n-            (Scalar::Ptr(ptr), ty::Ref(_, ty::TyS { kind: ty::Array(t, n), .. }, _))\n-                if *t == self.tcx().types.u8 =>\n-            {\n-                match n.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n-                    Some(n) => {\n-                        let byte_str = self\n-                            .tcx()\n-                            .alloc_map\n-                            .lock()\n-                            .unwrap_memory(ptr.alloc_id)\n-                            .get_bytes(&self.tcx(), ptr, Size::from_bytes(n as u64))\n-                            .unwrap();\n-                        p!(pretty_print_byte_str(byte_str));\n-                    }\n-                    None => self.write_str(\"_\")?,\n-                }\n+            (\n+                Scalar::Ptr(ptr),\n+                ty::Ref(\n+                    _,\n+                    ty::TyS {\n+                        kind:\n+                            ty::Array(\n+                                ty::TyS { kind: ty::Uint(ast::UintTy::U8), .. },\n+                                ty::Const {\n+                                    val:\n+                                        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw {\n+                                            data,\n+                                            ..\n+                                        })),\n+                                    ..\n+                                },\n+                            ),\n+                        ..\n+                    },\n+                    _,\n+                ),\n+            ) => {\n+                let byte_str = self\n+                    .tcx()\n+                    .alloc_map\n+                    .lock()\n+                    .unwrap_memory(ptr.alloc_id)\n+                    .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data as u64))\n+                    .unwrap();\n+                p!(pretty_print_byte_str(byte_str));\n             }\n             // Bool\n             (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n@@ -970,10 +985,9 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             // Char\n-            (Scalar::Raw { data, .. }, ty::Char) => match ::std::char::from_u32(data as u32) {\n-                Some(c) => p!(write(\"{:?}\", c)),\n-                None => p!(write(\"{}_char\", data)),\n-            },\n+            (Scalar::Raw { data, .. }, ty::Char) if char::from_u32(data as u32).is_some() => {\n+                p!(write(\"{:?}\", char::from_u32(data as u32).unwrap()))\n+            }\n             // Raw pointers\n             (Scalar::Raw { data, .. }, ty::RawPtr(_)) => {\n                 p!(write(\"{{0x{:x} as \", data), print(ty), write(\"}}\"))"}]}