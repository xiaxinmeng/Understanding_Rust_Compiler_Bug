{"sha": "f55d07745f8aa17d2dd7b73180bb95ecdc97e35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NWQwNzc0NWY4YWExN2QyZGQ3YjczMTgwYmI5NWVjZGM5N2UzNWY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-23T11:06:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T14:04:57Z"}, "message": "Fix init_static", "tree": {"sha": "0126a0d1e4f5026ed94ee8e100964df844919038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0126a0d1e4f5026ed94ee8e100964df844919038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrQuRIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQ/\nYhAAhCv6poODZRZSKvu1oNQJ14MTNX/oi0RzvM+1oarCKdVpvzPvZjcMO/XIb5qa\ngszgE4ca+znoidV5SVMwejtBvbGtScPkicOfW7i39G22VQFLYWqMkUt+4XmzJPCF\njigdEsVjfRBAF+svNyVORnWT6ZnLeVhZbzZ3c3v6wO64BiYNOSQHW8pd/ZmT6dsc\niHaDIhQf7r3/vyQCYyM9N3ewyGaYZZrSzR76TB3uy8KlD/2vKnHJWuegIxm7zsyR\nFFhLT30i1NaJ4z7Pfgk6w5K6CwWpv7+Z9DjgpUku+b9ralgx44vIzW4vLy9Gpx2Y\nik9CdjgHuKmILxv1SWapcX54iNHDpkjemKxDqNwfCCMoJAsga/IBNhSkXLjSn4s4\nnQYVR3mi8OFqgZraBS3E0zKe/Dx2bCwFv54HODz7CzQM/gwzcXLRZKiiHw5h8vlf\neLQJIBD5a7L+u+BhXyN3yw0wkNSpL81qu3WE4+3EPzMOIW8FjLjSnQA3TRSnD37r\npIK/I+BHykMmvkcz/oP3/1hMpgx2wCUphMH6ZMYyblPAKesEDgWA0EPurDTLas+G\n/VMW6CFYSC10sLwXzclw9JPl+pIotXcgPrPK8ixqDoFO6ZxrBm4fk4hRsgF1Mhy4\nhWjnWW6wsAQ36vofgosPTgtx1z3yWqFasOARGDlXRkqBJo4=\n=W/W+\n-----END PGP SIGNATURE-----", "payload": "tree 0126a0d1e4f5026ed94ee8e100964df844919038\nparent 878d66692c2037c2d42532f1a127f2d825700658\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1521803192 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523628297 +0200\n\nFix init_static"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f", "html_url": "https://github.com/rust-lang/rust/commit/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878d66692c2037c2d42532f1a127f2d825700658", "url": "https://api.github.com/repos/rust-lang/rust/commits/878d66692c2037c2d42532f1a127f2d825700658", "html_url": "https://github.com/rust-lang/rust/commit/878d66692c2037c2d42532f1a127f2d825700658"}], "stats": {"total": 85, "additions": 22, "deletions": 63}, "files": [{"sha": "fb79780c3820a6ed589689e6b1d544148cf07412", "filename": "miri/lib.rs", "status": "modified", "additions": 22, "deletions": 63, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55d07745f8aa17d2dd7b73180bb95ecdc97e35f/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=f55d07745f8aa17d2dd7b73180bb95ecdc97e35f", "patch": "@@ -210,6 +210,8 @@ pub struct MemoryData<'tcx> {\n     /// Only mutable (static mut, heap, stack) allocations have an entry in this map.\n     /// The entry is created when allocating the memory and deleted after deallocation.\n     locks: HashMap<AllocId, RangeMap<LockInfo<'tcx>>>,\n+\n+    mut_statics: HashMap<GlobalId<'tcx>, AllocId>,\n }\n \n impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n@@ -268,69 +270,26 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         cid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, AllocId> {\n-        let tcx = self.tcx.tcx;\n-        let mir = None;\n-        let param_env = ty::ParamEnv::reveal_all();\n-        // we start out with the best span we have\n-        // and try improving it down the road when more information is available\n-        let res = (|| {\n-            let mut mir = match mir {\n-                Some(mir) => mir,\n-                None => ecx.load_mir(cid.instance.def)?,\n-            };\n-            if let Some(index) = cid.promoted {\n-                mir = &mir.promoted[index];\n-            }\n-            span = mir.span;\n-            let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n-            let alloc = tcx.interpret_interner.get_cached(cid.instance.def_id());\n-            let is_static = tcx.is_static(cid.instance.def_id()).is_some();\n-            let alloc = match alloc {\n-                Some(alloc) => {\n-                    assert!(cid.promoted.is_none());\n-                    assert!(param_env.caller_bounds.is_empty());\n-                    alloc\n-                },\n-                None => {\n-                    assert!(!layout.is_unsized());\n-                    let ptr = ecx.memory.allocate(\n-                        layout.size.bytes(),\n-                        layout.align,\n-                        None,\n-                    )?;\n-                    if is_static {\n-                        tcx.interpret_interner.cache(cid.instance.def_id(), ptr.alloc_id);\n-                    }\n-                    let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n-                    let mutability = tcx.is_static(cid.instance.def_id());\n-                    let mutability = if mutability == Some(hir::Mutability::MutMutable) || internally_mutable {\n-                        Mutability::Mutable\n-                    } else {\n-                        Mutability::Immutable\n-                    };\n-                    let cleanup = StackPopCleanup::MarkStatic(mutability);\n-                    let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n-                    let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n-                    trace!(\"const_eval: pushing stack frame for global: {}{}\", name, prom);\n-                    assert!(mir.arg_count == 0);\n-                    ecx.push_stack_frame(\n-                        cid.instance,\n-                        mir.span,\n-                        mir,\n-                        Place::from_ptr(ptr, layout.align),\n-                        cleanup,\n-                    )?;\n-\n-                    while ecx.step()? {}\n-                    ptr.alloc_id\n-                }\n-            };\n-            let ptr = MemoryPointer::new(alloc, 0).into();\n-            // always try to read the value and report errors\n-            Ok((ptr, layout.ty))\n-        })();\n-        let (mem_ptr, _) = res?;\n-        Ok(mem_ptr.alloc_id)\n+        if let Some(alloc_id) = ecx.memory.data.get(&cid) {\n+            return Ok(alloc_id);\n+        }\n+        let mir = ecx.load_mir(cid.instance.def)?;\n+        let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n+        let to_ptr = ecx.memory.allocate(\n+            layout.size.bytes(),\n+            layout.align,\n+            None,\n+        )?;\n+        ecx.const_eval(cid)?;\n+        let ptr = ecx\n+            .tcx\n+            .interpret_interner\n+            .get_cached(cid.instance.def_id())\n+            .expect(\"uncached static\");\n+        ecx.memory.copy(ptr, layout.align, to_ptr.into(), layout.align, layout.size.bytes(), true)?;\n+        ecx.memory.mark_static_initialized(to_ptr.alloc_id, ::syntax::ast::Mutability::Mutable)?;\n+        assert!(ecx.memory.data.insert(cid, to_ptr.alloc_id).is_none());\n+        Ok(to_ptr.alloc_id)\n     }\n \n     fn box_alloc<'a>("}]}