{"sha": "11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjNjOGFmYjIzZDY3YWNkZThjYzc2NDJhZWEzYTJjYTA2YTIzNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:13:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:13:49Z"}, "message": "remove Cancelable from source binders", "tree": {"sha": "324f517c3e8cc42be6f3e8349c55683695ea4558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324f517c3e8cc42be6f3e8349c55683695ea4558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "html_url": "https://github.com/rust-lang/rust/commit/11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36b2cf377a90cf13bb097e57878b8384d30c53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36b2cf377a90cf13bb097e57878b8384d30c53a", "html_url": "https://github.com/rust-lang/rust/commit/a36b2cf377a90cf13bb097e57878b8384d30c53a"}], "stats": {"total": 158, "additions": 68, "deletions": 90}, "files": [{"sha": "5db53a34fca3fac3b3e55c717b2049e81205d737", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -109,7 +109,7 @@ impl Module {\n     }\n \n     /// Finds a child module with the specified name.\n-    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n         self.child_impl(db, name)\n     }\n "}, {"sha": "67808d2827b2bcd918d84b811201545652c8df1d", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -18,7 +18,7 @@ impl Module {\n         db: &impl HirDatabase,\n         source_root_id: SourceRootId,\n         module_id: ModuleId,\n-    ) -> Cancelable<Self> {\n+    ) -> Self {\n         let module_tree = db.module_tree(source_root_id);\n         let def_loc = DefLoc {\n             kind: DefKind::Module,\n@@ -27,8 +27,7 @@ impl Module {\n             source_item_id: module_id.source(&module_tree),\n         };\n         let def_id = def_loc.id(db);\n-        let module = Module::new(def_id);\n-        Ok(module)\n+        Module::new(def_id)\n     }\n \n     pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n@@ -84,15 +83,15 @@ impl Module {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n         let module_id = loc.module_id.crate_root(&module_tree);\n-        Module::from_module_id(db, loc.source_root_id, module_id)\n+        Ok(Module::from_module_id(db, loc.source_root_id, module_id))\n     }\n \n     /// Finds a child module with the specified name.\n-    pub fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+    pub fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let child_id = ctry!(loc.module_id.child(&module_tree, name));\n-        Module::from_module_id(db, loc.source_root_id, child_id).map(Some)\n+        let child_id = loc.module_id.child(&module_tree, name)?;\n+        Some(Module::from_module_id(db, loc.source_root_id, child_id))\n     }\n \n     /// Iterates over all child modules.\n@@ -106,15 +105,19 @@ impl Module {\n             .module_id\n             .children(&module_tree)\n             .map(|(_, module_id)| Module::from_module_id(db, loc.source_root_id, module_id))\n-            .collect::<Cancelable<Vec<_>>>()?;\n+            .collect::<Vec<_>>();\n         Ok(children.into_iter())\n     }\n \n     pub fn parent_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n         let parent_id = ctry!(loc.module_id.parent(&module_tree));\n-        Module::from_module_id(db, loc.source_root_id, parent_id).map(Some)\n+        Ok(Some(Module::from_module_id(\n+            db,\n+            loc.source_root_id,\n+            parent_id,\n+        )))\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module."}, {"sha": "3b2498d5a5e793a06ad4dad792f27a169eca6cbf", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -82,7 +82,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn crate::module_tree::Submodule::submodules_query;\n     }\n \n-    fn input_module_items(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<InputModuleItems>> {\n+    fn input_module_items(source_root_id: SourceRootId, module_id: ModuleId) -> Arc<InputModuleItems> {\n         type InputModuleItemsQuery;\n         use fn query_definitions::input_module_items;\n     }"}, {"sha": "d7cc9b4ca30693c46179d9aceb71a096332ce02d", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -163,7 +163,7 @@ impl DefId {\n         let loc = self.loc(db);\n         let res = match loc.kind {\n             DefKind::Module => {\n-                let module = Module::from_module_id(db, loc.source_root_id, loc.module_id)?;\n+                let module = Module::from_module_id(db, loc.source_root_id, loc.module_id);\n                 Def::Module(module)\n             }\n             DefKind::Function => {\n@@ -208,7 +208,11 @@ impl DefId {\n     /// For a module, returns that module; for any other def, returns the containing module.\n     pub fn module(self, db: &impl HirDatabase) -> Cancelable<Module> {\n         let loc = self.loc(db);\n-        Module::from_module_id(db, loc.source_root_id, loc.module_id)\n+        Ok(Module::from_module_id(\n+            db,\n+            loc.source_root_id,\n+            loc.module_id,\n+        ))\n     }\n \n     /// Returns the containing crate."}, {"sha": "c9a9fb99ffbfa335abe3bc97ea2b2fd25c96cd56", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -196,7 +196,7 @@ pub(crate) fn impls_in_module(\n     module_id: ModuleId,\n ) -> Cancelable<Arc<ModuleImplBlocks>> {\n     let mut result = ModuleImplBlocks::new();\n-    let module = Module::from_module_id(db, source_root_id, module_id)?;\n+    let module = Module::from_module_id(db, source_root_id, module_id);\n     result.collect(db, module)?;\n     Ok(Arc::new(result))\n }"}, {"sha": "ea8ab4c832e6c715b474011d7fa8f154333f9d3f", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -15,9 +15,7 @@ use crate::{\n fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     let (db, pos) = MockDatabase::with_position(fixture);\n     let source_root = db.file_source_root(pos.file_id);\n-    let module = crate::source_binder::module_from_position(&db, pos)\n-        .unwrap()\n-        .unwrap();\n+    let module = crate::source_binder::module_from_position(&db, pos).unwrap();\n     let module_id = module.def_id.loc(&db).module_id;\n     (db.item_map(source_root).unwrap(), module_id)\n }\n@@ -242,9 +240,7 @@ fn item_map_across_crates() {\n     db.set_crate_graph(crate_graph);\n \n     let source_root = db.file_source_root(main_id);\n-    let module = crate::source_binder::module_from_file_id(&db, main_id)\n-        .unwrap()\n-        .unwrap();\n+    let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let module_id = module.def_id.loc(&db).module_id;\n     let item_map = db.item_map(source_root).unwrap();\n \n@@ -296,9 +292,7 @@ fn import_across_source_roots() {\n \n     db.set_crate_graph(crate_graph);\n \n-    let module = crate::source_binder::module_from_file_id(&db, main_id)\n-        .unwrap()\n-        .unwrap();\n+    let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let module_id = module.def_id.loc(&db).module_id;\n     let item_map = db.item_map(source_root).unwrap();\n \n@@ -341,9 +335,7 @@ fn reexport_across_crates() {\n     db.set_crate_graph(crate_graph);\n \n     let source_root = db.file_source_root(main_id);\n-    let module = crate::source_binder::module_from_file_id(&db, main_id)\n-        .unwrap()\n-        .unwrap();\n+    let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let module_id = module.def_id.loc(&db).module_id;\n     let item_map = db.item_map(source_root).unwrap();\n "}, {"sha": "7ff942f6a657bd098f83c7cc16818a49ff9c33df", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -47,7 +47,7 @@ pub(super) fn input_module_items(\n     db: &impl HirDatabase,\n     source_root_id: SourceRootId,\n     module_id: ModuleId,\n-) -> Cancelable<Arc<InputModuleItems>> {\n+) -> Arc<InputModuleItems> {\n     let module_tree = db.module_tree(source_root_id);\n     let source = module_id.source(&module_tree);\n     let file_id = source.file_id;\n@@ -90,7 +90,7 @@ pub(super) fn input_module_items(\n             }\n         }\n     };\n-    Ok(Arc::new(res))\n+    Arc::new(res)\n }\n \n pub(super) fn item_map(\n@@ -101,11 +101,8 @@ pub(super) fn item_map(\n     let module_tree = db.module_tree(source_root);\n     let input = module_tree\n         .modules()\n-        .map(|id| {\n-            let items = db.input_module_items(source_root, id)?;\n-            Ok((id, items))\n-        })\n-        .collect::<Cancelable<FxHashMap<_, _>>>()?;\n+        .map(|id| (id, db.input_module_items(source_root, id)))\n+        .collect::<FxHashMap<_, _>>();\n \n     let resolver = Resolver::new(db, &input, source_root, module_tree);\n     let res = resolver.resolve()?;"}, {"sha": "7ab8eeae209bfc8cccb56d6f7ea4c9a097cc2b25", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -5,7 +5,7 @@\n ///\n /// So, this modules should not be used during hir construction, it exists\n /// purely for \"IDE needs\".\n-use ra_db::{FileId, FilePosition, Cancelable};\n+use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n     SmolStr, TextRange, SyntaxNode,\n     ast::{self, AstNode, NameOwner},\n@@ -18,7 +18,7 @@ use crate::{\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n-pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Cancelable<Option<Module>> {\n+pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Option<Module> {\n     let module_source = SourceItemId {\n         file_id: file_id.into(),\n         item_id: None,\n@@ -31,25 +31,22 @@ pub fn module_from_declaration(\n     db: &impl HirDatabase,\n     file_id: FileId,\n     decl: &ast::Module,\n-) -> Cancelable<Option<Module>> {\n-    let parent_module = module_from_file_id(db, file_id)?;\n+) -> Option<Module> {\n+    let parent_module = module_from_file_id(db, file_id);\n     let child_name = decl.name();\n     match (parent_module, child_name) {\n         (Some(parent_module), Some(child_name)) => {\n-            if let Some(child) = parent_module.child(db, &child_name.as_name())? {\n-                return Ok(Some(child));\n+            if let Some(child) = parent_module.child(db, &child_name.as_name()) {\n+                return Some(child);\n             }\n         }\n         _ => (),\n     }\n-    Ok(None)\n+    None\n }\n \n /// Locates the module by position in the source code.\n-pub fn module_from_position(\n-    db: &impl HirDatabase,\n-    position: FilePosition,\n-) -> Cancelable<Option<Module>> {\n+pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n     let file = db.source_file(position.file_id);\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n         Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n@@ -61,7 +58,7 @@ fn module_from_inline(\n     db: &impl HirDatabase,\n     file_id: FileId,\n     module: &ast::Module,\n-) -> Cancelable<Option<Module>> {\n+) -> Option<Module> {\n     assert!(!module.has_semi());\n     let file_id = file_id.into();\n     let file_items = db.file_items(file_id);\n@@ -78,7 +75,7 @@ pub fn module_from_child_node(\n     db: &impl HirDatabase,\n     file_id: FileId,\n     child: &SyntaxNode,\n-) -> Cancelable<Option<Module>> {\n+) -> Option<Module> {\n     if let Some(m) = child\n         .ancestors()\n         .filter_map(ast::Module::cast)\n@@ -90,33 +87,27 @@ pub fn module_from_child_node(\n     }\n }\n \n-fn module_from_source(db: &impl HirDatabase, source: SourceItemId) -> Cancelable<Option<Module>> {\n+fn module_from_source(db: &impl HirDatabase, source: SourceItemId) -> Option<Module> {\n     let source_root_id = db.file_source_root(source.file_id.as_original_file());\n     let module_tree = db.module_tree(source_root_id);\n-    let module_id = ctry!(module_tree.find_module_by_source(source));\n-    Ok(Some(Module::from_module_id(db, source_root_id, module_id)?))\n+    let module_id = module_tree.find_module_by_source(source)?;\n+    Some(Module::from_module_id(db, source_root_id, module_id))\n }\n \n-pub fn function_from_position(\n-    db: &impl HirDatabase,\n-    position: FilePosition,\n-) -> Cancelable<Option<Function>> {\n+pub fn function_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Function> {\n     let file = db.source_file(position.file_id);\n-    let fn_def = ctry!(find_node_at_offset::<ast::FnDef>(\n-        file.syntax(),\n-        position.offset\n-    ));\n+    let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)?;\n     function_from_source(db, position.file_id, fn_def)\n }\n \n pub fn function_from_source(\n     db: &impl HirDatabase,\n     file_id: FileId,\n     fn_def: &ast::FnDef,\n-) -> Cancelable<Option<Function>> {\n-    let module = ctry!(module_from_child_node(db, file_id, fn_def.syntax())?);\n+) -> Option<Function> {\n+    let module = module_from_child_node(db, file_id, fn_def.syntax())?;\n     let res = function_from_module(db, &module, fn_def);\n-    Ok(Some(res))\n+    Some(res)\n }\n \n pub fn function_from_module(\n@@ -145,21 +136,18 @@ pub fn function_from_child_node(\n     db: &impl HirDatabase,\n     file_id: FileId,\n     node: &SyntaxNode,\n-) -> Cancelable<Option<Function>> {\n-    let fn_def = ctry!(node.ancestors().find_map(ast::FnDef::cast));\n+) -> Option<Function> {\n+    let fn_def = node.ancestors().find_map(ast::FnDef::cast)?;\n     function_from_source(db, file_id, fn_def)\n }\n \n-pub fn macro_symbols(\n-    db: &impl HirDatabase,\n-    file_id: FileId,\n-) -> Cancelable<Vec<(SmolStr, TextRange)>> {\n-    let module = match module_from_file_id(db, file_id)? {\n+pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, TextRange)> {\n+    let module = match module_from_file_id(db, file_id) {\n         Some(it) => it,\n-        None => return Ok(Vec::new()),\n+        None => return Vec::new(),\n     };\n     let loc = module.def_id.loc(db);\n-    let items = db.input_module_items(loc.source_root_id, loc.module_id)?;\n+    let items = db.input_module_items(loc.source_root_id, loc.module_id);\n     let mut res = Vec::new();\n \n     for macro_call_id in items\n@@ -184,5 +172,5 @@ pub fn macro_symbols(\n         }\n     }\n \n-    Ok(res)\n+    res\n }"}, {"sha": "b81d91e80e7b746f1dba594dfc037a865176f150", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -320,9 +320,7 @@ fn infer(content: &str) -> String {\n         .descendants()\n         .filter_map(ast::FnDef::cast)\n     {\n-        let func = source_binder::function_from_source(&db, file_id, fn_def)\n-            .unwrap()\n-            .unwrap();\n+        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n         let inference_result = func.infer(&db).unwrap();\n         let body_syntax_mapping = func.body_syntax_mapping(&db).unwrap();\n         let mut types = Vec::new();\n@@ -404,9 +402,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         }\n     \",\n     );\n-    let func = source_binder::function_from_position(&db, pos)\n-        .unwrap()\n-        .unwrap();\n+    let func = source_binder::function_from_position(&db, pos).unwrap();\n     {\n         let events = db.log_executed(|| {\n             func.infer(&db).unwrap();"}, {"sha": "f5b5ed689685a9da82e8f905893d6de56fa9d425", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -42,7 +42,7 @@ impl<'a> CompletionContext<'a> {\n         original_file: &'a SourceFile,\n         position: FilePosition,\n     ) -> Cancelable<Option<CompletionContext<'a>>> {\n-        let module = source_binder::module_from_position(db, position)?;\n+        let module = source_binder::module_from_position(db, position);\n         let leaf =\n             ctry!(find_leaf_at_offset(original_file.syntax(), position.offset).left_biased());\n         let mut ctx = CompletionContext {"}, {"sha": "f759f73390a96e24667122a22df091266ae5de25", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn reference_definition(\n ) -> Cancelable<ReferenceResult> {\n     use self::ReferenceResult::*;\n     if let Some(function) =\n-        hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())?\n+        hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())\n     {\n         let scope = function.scopes(db)?;\n         // First try to resolve the symbol locally\n@@ -77,8 +77,7 @@ pub(crate) fn reference_definition(\n         }\n     }\n     // Then try module name resolution\n-    if let Some(module) =\n-        hir::source_binder::module_from_child_node(db, file_id, name_ref.syntax())?\n+    if let Some(module) = hir::source_binder::module_from_child_node(db, file_id, name_ref.syntax())\n     {\n         if let Some(path) = name_ref\n             .syntax()\n@@ -111,7 +110,7 @@ fn name_definition(\n     if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n         if module.has_semi() {\n             if let Some(child_module) =\n-                hir::source_binder::module_from_declaration(db, file_id, module)?\n+                hir::source_binder::module_from_declaration(db, file_id, module)\n             {\n                 let nav = NavigationTarget::from_module(db, child_module)?;\n                 return Ok(Some(vec![nav]));"}, {"sha": "26f3ced7005cf7459432f2d051a9ec9c24bad342", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Cancelable<Option\n         db,\n         frange.file_id,\n         parent_fn\n-    )?);\n+    ));\n     let infer = function.infer(db)?;\n     let syntax_mapping = function.body_syntax_mapping(db)?;\n     if let Some(expr) = ast::Expr::cast(node).and_then(|e| syntax_mapping.node_expr(e)) {"}, {"sha": "98b507ab385e00d1166477354082ff1866a59664", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -100,7 +100,7 @@ impl db::RootDatabase {\n impl db::RootDatabase {\n     /// Returns `Vec` for the same reason as `parent_module`\n     pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        let module = match source_binder::module_from_file_id(self, file_id)? {\n+        let module = match source_binder::module_from_file_id(self, file_id) {\n             Some(it) => it,\n             None => return Ok(Vec::new()),\n         };\n@@ -147,15 +147,15 @@ impl db::RootDatabase {\n                     db,\n                     position.file_id,\n                     binding.syntax(),\n-                )?);\n+                ));\n                 return Ok(Some((binding, descr)));\n             };\n             let name_ref = ctry!(find_node_at_offset::<ast::NameRef>(syntax, position.offset));\n             let descr = ctry!(source_binder::function_from_child_node(\n                 db,\n                 position.file_id,\n                 name_ref.syntax(),\n-            )?);\n+            ));\n             let scope = descr.scopes(db)?;\n             let resolved = ctry!(scope.resolve_local_name(name_ref));\n             let resolved = resolved.ptr().resolve(source_file);\n@@ -179,7 +179,7 @@ impl db::RootDatabase {\n                 fix: d.fix.map(|fix| SourceChange::from_local_edit(file_id, fix)),\n             })\n             .collect::<Vec<_>>();\n-        if let Some(m) = source_binder::module_from_file_id(self, file_id)? {\n+        if let Some(m) = source_binder::module_from_file_id(self, file_id) {\n             for (name_node, problem) in m.problems(self)? {\n                 let source_root = self.file_source_root(file_id);\n                 let diag = match problem {"}, {"sha": "451304739562725f6e22e7f7346d351a7017b05c", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -8,7 +8,7 @@ pub(crate) fn parent_module(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Cancelable<Vec<NavigationTarget>> {\n-    let module = match hir::source_binder::module_from_position(db, position)? {\n+    let module = match hir::source_binder::module_from_position(db, position) {\n         None => return Ok(Vec::new()),\n         Some(it) => it,\n     };"}, {"sha": "9fa0f79a60ac3ae871b2697e5632a30d07d5df67", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -75,8 +75,7 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: &ast::Module) -> Opt\n         return None;\n     }\n     let range = module.syntax().range();\n-    let module =\n-        hir::source_binder::module_from_child_node(db, file_id, module.syntax()).ok()??;\n+    let module = hir::source_binder::module_from_child_node(db, file_id, module.syntax())?;\n \n     // FIXME: thread cancellation instead of `.ok`ing\n     let path = module"}, {"sha": "e7827fdc9bdccad0ced214a50f213668be66be0d", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f3c8afb23d67acde8cc7642aea3a2ca06a2361/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "patch": "@@ -63,7 +63,7 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Cancelable<Arc<Sy\n         .map(move |(name, ptr)| FileSymbol { name, ptr, file_id })\n         .collect::<Vec<_>>();\n \n-    for (name, text_range) in hir::source_binder::macro_symbols(db, file_id)? {\n+    for (name, text_range) in hir::source_binder::macro_symbols(db, file_id) {\n         let node = find_covering_node(source_file.syntax(), text_range);\n         let ptr = LocalSyntaxPtr::new(node);\n         symbols.push(FileSymbol { file_id, name, ptr })"}]}