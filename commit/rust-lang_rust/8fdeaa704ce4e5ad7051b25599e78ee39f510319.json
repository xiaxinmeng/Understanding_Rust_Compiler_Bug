{"sha": "8fdeaa704ce4e5ad7051b25599e78ee39f510319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZGVhYTcwNGNlNGU1YWQ3MDUxYjI1NTk5ZTc4ZWUzOWY1MTAzMTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-20T19:30:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-20T19:30:39Z"}, "message": "Merge pull request #401 from kvikas/match_bool\n\nMatch on bool should be replaced with if..else block", "tree": {"sha": "60f5afbc4358b7dce820b82339f305123aae9da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f5afbc4358b7dce820b82339f305123aae9da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fdeaa704ce4e5ad7051b25599e78ee39f510319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdeaa704ce4e5ad7051b25599e78ee39f510319", "html_url": "https://github.com/rust-lang/rust/commit/8fdeaa704ce4e5ad7051b25599e78ee39f510319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fdeaa704ce4e5ad7051b25599e78ee39f510319/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309", "html_url": "https://github.com/rust-lang/rust/commit/dea087dd17d57e7a5e8863f39dfc86f2f8a4b309"}, {"sha": "5e78fbbf57e5bf5891c116a3c1bf287212744efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e78fbbf57e5bf5891c116a3c1bf287212744efa", "html_url": "https://github.com/rust-lang/rust/commit/5e78fbbf57e5bf5891c116a3c1bf287212744efa"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "990db2e54608bffa78204391c14d445e434500ed", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fdeaa704ce4e5ad7051b25599e78ee39f510319/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fdeaa704ce4e5ad7051b25599e78ee39f510319/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8fdeaa704ce4e5ad7051b25599e78ee39f510319", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 66 lints included in this crate:\n+There are 67 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -34,6 +34,7 @@ name\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                       | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n+[match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                               | warn    | a match on boolean expression; recommends `if..else` block instead\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                       | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                               | warn    | taking a number modulo 1, which always returns 0"}, {"sha": "6f06641ef45bb67217255cbd43faf2276e41de76", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fdeaa704ce4e5ad7051b25599e78ee39f510319/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdeaa704ce4e5ad7051b25599e78ee39f510319/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8fdeaa704ce4e5ad7051b25599e78ee39f510319", "patch": "@@ -136,6 +136,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n+        matches::MATCH_BOOL,\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n         methods::SHOULD_IMPLEMENT_TRAIT,"}, {"sha": "da770c6f484808e3752201f529b664d04fbf431f", "filename": "src/matches.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8fdeaa704ce4e5ad7051b25599e78ee39f510319/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdeaa704ce4e5ad7051b25599e78ee39f510319/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=8fdeaa704ce4e5ad7051b25599e78ee39f510319", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n+use rustc::middle::ty;\n \n use utils::{snippet, span_lint, span_help_and_lint, in_external_macro, expr_block};\n \n@@ -9,19 +10,23 @@ declare_lint!(pub SINGLE_MATCH, Warn,\n declare_lint!(pub MATCH_REF_PATS, Warn,\n               \"a match has all arms prefixed with `&`; the match expression can be \\\n                dereferenced instead\");\n+declare_lint!(pub MATCH_BOOL, Warn,\n+              \"a match on boolean expression; recommends `if..else` block instead\");\n \n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n impl LintPass for MatchPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(SINGLE_MATCH, MATCH_REF_PATS)\n+        lint_array!(SINGLE_MATCH, MATCH_REF_PATS, MATCH_BOOL)\n     }\n }\n \n impl LateLintPass for MatchPass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprMatch(ref ex, ref arms, MatchSource::Normal) = expr.node {\n+            if in_external_macro(cx, expr.span) { return; }\n+\n             // check preconditions for SINGLE_MATCH\n                 // only two arms\n             if arms.len() == 2 &&\n@@ -36,7 +41,6 @@ impl LateLintPass for MatchPass {\n                 // finally, we don't want any content in the second arm (unit or empty block)\n                 is_unit_expr(&arms[1].body)\n             {\n-                if in_external_macro(cx, expr.span) {return;}\n                 span_help_and_lint(cx, SINGLE_MATCH, expr.span,\n                                    \"you seem to be trying to use match for destructuring a \\\n                                     single pattern. Consider using `if let`\",\n@@ -48,7 +52,6 @@ impl LateLintPass for MatchPass {\n \n             // check preconditions for MATCH_REF_PATS\n             if has_only_ref_pats(arms) {\n-                if in_external_macro(cx, expr.span) { return; }\n                 if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {\n                     span_lint(cx, MATCH_REF_PATS, expr.span, &format!(\n                         \"you don't need to add `&` to both the expression to match \\\n@@ -59,6 +62,15 @@ impl LateLintPass for MatchPass {\n                          expression to match: `match *{} {{ ...`\", snippet(cx, ex.span, \"..\")));\n                 }\n             }\n+\n+            // check preconditions for MATCH_BOOL\n+            // type of expression == bool\n+            if cx.tcx.expr_ty(ex).sty == ty::TyBool {\n+\n+                span_lint(cx, MATCH_BOOL, expr.span,\n+                                   \"you seem to be trying to match on a boolean expression. \\\n+                                   Consider using an if..else block\");\n+            }\n         }\n     }\n }"}, {"sha": "1cdf813bc00b9e93eff2cd125eff6ef5ffb2f412", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8fdeaa704ce4e5ad7051b25599e78ee39f510319/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdeaa704ce4e5ad7051b25599e78ee39f510319/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=8fdeaa704ce4e5ad7051b25599e78ee39f510319", "patch": "@@ -38,6 +38,28 @@ fn single_match(){\n     }\n }\n \n+fn match_bool() {\n+    let test: bool = true;\n+\n+    match test {  //~ ERROR you seem to be trying to match on a boolean expression\n+        true => (),\n+        false => (),\n+    };\n+\n+    let option = 1;\n+    match option == 1 {  //~ ERROR you seem to be trying to match on a boolean expression\n+        true => (),\n+        false => (),\n+    };\n+\n+    // Not linted\n+    match option {\n+        1 ... 10 => (),\n+        10 ... 20 => (),\n+        _ => (),\n+    };\n+}\n+\n fn ref_pats() {\n     {\n         let v = &Some(0);"}]}