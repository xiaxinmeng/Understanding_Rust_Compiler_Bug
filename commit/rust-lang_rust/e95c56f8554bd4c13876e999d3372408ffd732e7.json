{"sha": "e95c56f8554bd4c13876e999d3372408ffd732e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NWM1NmY4NTU0YmQ0YzEzODc2ZTk5OWQzMzcyNDA4ZmZkNzMyZTc=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-18T05:13:02Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Fix up subprogram composite type nodes, and lexical block context nodes.", "tree": {"sha": "fc25be09a37dce81c55de9d46ca704a507681e52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc25be09a37dce81c55de9d46ca704a507681e52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95c56f8554bd4c13876e999d3372408ffd732e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95c56f8554bd4c13876e999d3372408ffd732e7", "html_url": "https://github.com/rust-lang/rust/commit/e95c56f8554bd4c13876e999d3372408ffd732e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95c56f8554bd4c13876e999d3372408ffd732e7/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544bcfece238d47ca600fd09cef1f282a7a9bb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/544bcfece238d47ca600fd09cef1f282a7a9bb26", "html_url": "https://github.com/rust-lang/rust/commit/544bcfece238d47ca600fd09cef1f282a7a9bb26"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "e360e4b0ea4600816319147bbfd4cb3a235e9ef9", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e95c56f8554bd4c13876e999d3372408ffd732e7/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95c56f8554bd4c13876e999d3372408ffd732e7/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=e95c56f8554bd4c13876e999d3372408ffd732e7", "patch": "@@ -15,6 +15,7 @@ const DW_VIRTUALITY_none: int = 0;\n const CompileUnitTag: int = 17;\n const FileDescriptorTag: int = 41;\n const SubprogramTag: int = 46;\n+const SubroutineTag: int = 21;\n const BasicTypeDescriptorTag: int = 36;\n const AutoVariableTag: int = 256;\n const ArgVariableTag: int = 257;\n@@ -54,8 +55,8 @@ fn llmdnode(elems: [ValueRef]) -> ValueRef unsafe {\n fn llunused() -> ValueRef {\n     lli32(0x0)\n }\n-fn llnull() -> ValueRef {\n-    C_null(T_ptr(T_nil()))\n+fn llnull() -> ValueRef unsafe {\n+    unsafe::reinterpret_cast(std::ptr::null::<ValueRef>())\n }\n \n fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n@@ -191,10 +192,8 @@ fn get_block_metadata(cx: @block_ctxt) -> @metadata<block_md> {\n       option::none. {}\n     }\n     let parent = alt cx.parent {\n-      trans_common::parent_none. { llnull() }\n-      trans_common::parent_some(bcx) {\n-        get_block_metadata(bcx).node\n-      }\n+      trans_common::parent_none. { function_metadata_from_block(cx).node }\n+      trans_common::parent_some(bcx) { get_block_metadata(cx).node }\n     };\n     let file_node = get_file_metadata(bcx_ccx(cx), fname);\n     let unique_id = alt cache.find(LexicalBlockTag) {\n@@ -259,6 +258,14 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n     ret mdval;\n }\n \n+fn function_metadata_from_block(bcx: @block_ctxt) -> @metadata<subprogram_md> {\n+    let cx = bcx_ccx(bcx);\n+    let fcx = bcx_fcx(bcx);\n+    let fn_node = cx.ast_map.get(fcx.id);\n+    let fn_item = alt fn_node { ast_map::node_item(item) { item } };\n+    get_function_metadata(cx, fn_item, fcx.llfn)\n+}\n+\n fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     -> @metadata<local_var_md> unsafe {\n     let cx = bcx_ccx(bcx);\n@@ -276,9 +283,12 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     let ty = trans::node_id_type(cx, local.node.id);\n     let tymd = get_ty_metadata(cx, ty, local.node.ty);\n     let filemd = get_file_metadata(cx, loc.filename);\n-    let blockmd = get_block_metadata(bcx);\n+    let context = alt bcx.parent {\n+      trans_common::parent_none. { function_metadata_from_block(bcx).node }\n+      trans_common::parent_some(_) { get_block_metadata(bcx).node }\n+    };\n     let lldata = [lltag(AutoVariableTag),\n-                  blockmd.node, //XXX block context (maybe subprogram if possible?)\n+                  context, // context\n                   llstr(name), // name\n                   filemd.node,\n                   lli32(loc.line as int), // line\n@@ -388,6 +398,21 @@ fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,\n       _ { get_ty_metadata(cx, ty::node_id_to_type(ccx_tcx(cx), item.id),\n                           ret_ty).node }\n     };\n+    let sub_type = llmdnode([ty_node]);\n+    let sub_metadata = [lltag(SubroutineTag),\n+                        file_node,\n+                        llstr(\"\"),\n+                        file_node,\n+                        lli32(0),\n+                        lli64(0),\n+                        lli64(0),\n+                        lli64(0),\n+                        lli32(0),\n+                        llnull(),\n+                        sub_type,\n+                        lli32(0),\n+                        llnull()];\n+    let sub_node = llmdnode(sub_metadata);\n     let fn_metadata = [lltag(SubprogramTag),\n                        llunused(),\n                        file_node,\n@@ -396,7 +421,7 @@ fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,\n                        llstr(mangled), //XXX MIPS name?????\n                        file_node,\n                        lli32(loc.line as int),\n-                       ty_node,\n+                       sub_node,\n                        lli1(false), //XXX static (check export)\n                        lli1(true), // not extern\n                        lli32(DW_VIRTUALITY_none), // virtual-ness"}]}