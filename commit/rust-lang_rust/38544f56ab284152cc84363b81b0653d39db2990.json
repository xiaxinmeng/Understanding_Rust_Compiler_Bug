{"sha": "38544f56ab284152cc84363b81b0653d39db2990", "node_id": "C_kwDOAAsO6NoAKDM4NTQ0ZjU2YWIyODQxNTJjYzg0MzYzYjgxYjA2NTNkMzlkYjI5OTA", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-02T09:27:34Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-02T09:27:34Z"}, "message": "Catch overflow in shift binop evaluation", "tree": {"sha": "2fac4a2a116b4160639a5debf00dac24d17bbeca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fac4a2a116b4160639a5debf00dac24d17bbeca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38544f56ab284152cc84363b81b0653d39db2990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38544f56ab284152cc84363b81b0653d39db2990", "html_url": "https://github.com/rust-lang/rust/commit/38544f56ab284152cc84363b81b0653d39db2990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38544f56ab284152cc84363b81b0653d39db2990/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266ceb7b4de6864480877e2dbcb8463d622ac257", "url": "https://api.github.com/repos/rust-lang/rust/commits/266ceb7b4de6864480877e2dbcb8463d622ac257", "html_url": "https://github.com/rust-lang/rust/commit/266ceb7b4de6864480877e2dbcb8463d622ac257"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "5a850f6d57054a0acc87751da5eab07fae1fe903", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38544f56ab284152cc84363b81b0653d39db2990/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38544f56ab284152cc84363b81b0653d39db2990/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=38544f56ab284152cc84363b81b0653d39db2990", "patch": "@@ -97,8 +97,10 @@ fn bit_op() {\n     check_number(r#\"const GOAL: u8 = !0 & !(!0 >> 1)\"#, 128);\n     check_number(r#\"const GOAL: i8 = !0 & !(!0 >> 1)\"#, 0);\n     check_number(r#\"const GOAL: i8 = 1 << 7\"#, (1i8 << 7) as i128);\n-    // FIXME: report panic here\n-    check_number(r#\"const GOAL: i8 = 1 << 8\"#, 0);\n+    check_number(r#\"const GOAL: i8 = -1 << 2\"#, (-1i8 << 2) as i128);\n+    check_fail(r#\"const GOAL: i8 = 1 << 8\"#, |e| {\n+        e == ConstEvalError::MirEvalError(MirEvalError::Panic(\"Overflow in Shl\".to_string()))\n+    });\n }\n \n #[test]"}, {"sha": "7ff68774bc98fa2fc7bb5721fe6888a64c5b060e", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/38544f56ab284152cc84363b81b0653d39db2990/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38544f56ab284152cc84363b81b0653d39db2990/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=38544f56ab284152cc84363b81b0653d39db2990", "patch": "@@ -860,6 +860,16 @@ impl Evaluator<'_> {\n                     let is_signed = matches!(ty.as_builtin(), Some(BuiltinType::Int(_)));\n                     let l128 = i128::from_le_bytes(pad16(lc, is_signed));\n                     let r128 = i128::from_le_bytes(pad16(rc, is_signed));\n+                    let check_overflow = |r: i128| {\n+                        // FIXME: this is not very correct, and only catches the basic cases.\n+                        let r = r.to_le_bytes();\n+                        for &k in &r[lc.len()..] {\n+                            if k != 0 && (k != 255 || !is_signed) {\n+                                return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n+                            }\n+                        }\n+                        Ok(Owned(r[0..lc.len()].into()))\n+                    };\n                     match op {\n                         BinOp::Ge | BinOp::Gt | BinOp::Le | BinOp::Lt | BinOp::Eq | BinOp::Ne => {\n                             let r = op.run_compare(l128, r128) as u8;\n@@ -888,28 +898,23 @@ impl Evaluator<'_> {\n                                 BinOp::BitXor => l128 ^ r128,\n                                 _ => unreachable!(),\n                             };\n-                            let r = r.to_le_bytes();\n-                            for &k in &r[lc.len()..] {\n-                                if k != 0 && (k != 255 || !is_signed) {\n-                                    return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n-                                }\n-                            }\n-                            Owned(r[0..lc.len()].into())\n+                            check_overflow(r)?\n                         }\n                         BinOp::Shl | BinOp::Shr => {\n-                            let shift_amount = if r128 < 0 {\n-                                return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n-                            } else if r128 > 128 {\n+                            let r = 'b: {\n+                                if let Ok(shift_amount) = u32::try_from(r128) {\n+                                    let r = match op {\n+                                        BinOp::Shl => l128.checked_shl(shift_amount),\n+                                        BinOp::Shr => l128.checked_shr(shift_amount),\n+                                        _ => unreachable!(),\n+                                    };\n+                                    if let Some(r) = r {\n+                                        break 'b r;\n+                                    }\n+                                };\n                                 return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n-                            } else {\n-                                r128 as u8\n-                            };\n-                            let r = match op {\n-                                BinOp::Shl => l128 << shift_amount,\n-                                BinOp::Shr => l128 >> shift_amount,\n-                                _ => unreachable!(),\n                             };\n-                            Owned(r.to_le_bytes()[0..lc.len()].into())\n+                            check_overflow(r)?\n                         }\n                         BinOp::Offset => not_supported!(\"offset binop\"),\n                     }"}]}