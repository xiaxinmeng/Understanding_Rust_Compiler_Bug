{"sha": "19018852c36e3511e0ff99314cb37c445f4b5827", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDE4ODUyYzM2ZTM1MTFlMGZmOTkzMTRjYjM3YzQ0NWY0YjU4Mjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-24T14:04:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-24T14:04:50Z"}, "message": "Simplify dropping by reusing `eval_fn_call`", "tree": {"sha": "323efa27df18a7b1f289b76f16bbe39f78a8090c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/323efa27df18a7b1f289b76f16bbe39f78a8090c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19018852c36e3511e0ff99314cb37c445f4b5827", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlme3RwACgkQpp+NIls6\n19my6Q//QQlFePJdSq8EkrEI3iRpoe2yynIFsHUUMW/KV+UpOv2TrmTJevgriev2\nBt+OikE58qj8NQnVgTA5Ox+gvi69bqrPY7DSWWW+KlYOrXkPVpVFzxQw9fCBgsfZ\n2Xdym9m4XPTd45+bFp3CkAlmVAeNraF2AizmWusyZB/EweI9nz6GKYqedCsVGv5b\nmT6fivsXAv4HttuBQ3UvwnhyZk0jHZESmCkb6IJphRl0apOuxiQh//NcWi0al9XZ\nUt2avaceIGbiEmHgqhS/7dZASdjI4FvtpRp5fLaUwAnB7DI2fOST0WZiidGer2/h\n72YRtljBYVcsIm3zgDvtYsDwJJJc9SyKMtRd48pWX8bOLtPoTxPSCnse2v3j7FU+\nLCAkGGQ+6jGbAx1lPH6PC+XFjWSLWnlRzXRRHLKQFrs+6MMDtEH86J5wB0o8iR+9\nx0WrMaMQRH3HpotGa3pKMrGzZzDXT+D5MkPQQUKl72L2Pd32iKlWi9rycMy5jTfB\nKdF8kdt3hc/hXav7u3pQj6AjcSKjPGIxs2B3gVM30ShqcaWBpn4YN9jis9teCvQj\ncbW+LQZ9pAhWPcVoqfY0x/BEPv2Nx8AgYScCoWHjKkXAXfziGkuiCf5+/DwZoFbd\nW0IysIpXBtBsgjkLRgDbmE68lVD69ql5DItLF3Q04Y/coQil9Yw=\n=Ngvl\n-----END PGP SIGNATURE-----", "payload": "tree 323efa27df18a7b1f289b76f16bbe39f78a8090c\nparent 9ede346ee26001ad4e3365f734e7dcd991095edf\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503583490 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503583490 +0200\n\nSimplify dropping by reusing `eval_fn_call`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19018852c36e3511e0ff99314cb37c445f4b5827", "html_url": "https://github.com/rust-lang/rust/commit/19018852c36e3511e0ff99314cb37c445f4b5827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19018852c36e3511e0ff99314cb37c445f4b5827/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ede346ee26001ad4e3365f734e7dcd991095edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ede346ee26001ad4e3365f734e7dcd991095edf", "html_url": "https://github.com/rust-lang/rust/commit/9ede346ee26001ad4e3365f734e7dcd991095edf"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "6596cf951fd9eb99433a7ad582160d72234035a2", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/19018852c36e3511e0ff99314cb37c445f4b5827/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19018852c36e3511e0ff99314cb37c445f4b5827/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=19018852c36e3511e0ff99314cb37c445f4b5827", "patch": "@@ -1,8 +1,8 @@\n-use rustc::mir;\n+use rustc::mir::BasicBlock;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n \n-use interpret::{EvalResult, EvalContext, StackPopCleanup, Lvalue, LvalueExtra, PrimVal, Value,\n+use interpret::{EvalResult, EvalContext, Lvalue, LvalueExtra, PrimVal, Value,\n                 Machine, ValTy};\n \n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n@@ -12,6 +12,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         instance: ty::Instance<'tcx>,\n         ty: Ty<'tcx>,\n         span: Span,\n+        target: BasicBlock,\n     ) -> EvalResult<'tcx> {\n         trace!(\"drop_lvalue: {:#?}\", lval);\n         // We take the address of the object.  This may well be unaligned, which is fine for us here.\n@@ -32,57 +33,51 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             } => ptr.ptr.to_value(),\n             _ => bug!(\"force_allocation broken\"),\n         };\n-        self.drop(val, instance, ty, span)\n+        self.drop(val, instance, ty, span, target)\n     }\n-    pub(crate) fn drop(\n+\n+    fn drop(\n         &mut self,\n         arg: Value,\n-        mut instance: ty::Instance<'tcx>,\n+        instance: ty::Instance<'tcx>,\n         ty: Ty<'tcx>,\n         span: Span,\n+        target: BasicBlock,\n     ) -> EvalResult<'tcx> {\n         trace!(\"drop: {:#?}, {:?}, {:?}\", arg, ty.sty, instance.def);\n \n-        if let ty::InstanceDef::DropGlue(_, None) = instance.def {\n-            trace!(\"nothing to do, aborting\");\n-            // we don't actually need to drop anything\n-            return Ok(());\n-        }\n-        let mir = match ty.sty {\n+        let instance = match ty.sty {\n             ty::TyDynamic(..) => {\n                 let vtable = match arg {\n                     Value::ByValPair(_, PrimVal::Ptr(vtable)) => vtable,\n                     _ => bug!(\"expected fat ptr, got {:?}\", arg),\n                 };\n                 match self.read_drop_type_from_vtable(vtable)? {\n-                    Some(func) => {\n-                        instance = func;\n-                        self.load_mir(func.def)?\n-                    }\n+                    Some(func) => func,\n                     // no drop fn -> bail out\n-                    None => return Ok(()),\n+                    None => {\n+                        self.goto_block(target);\n+                        return Ok(())\n+                    },\n                 }\n             }\n-            _ => self.load_mir(instance.def)?,\n+            _ => instance,\n         };\n \n-        self.push_stack_frame(\n-            instance,\n-            span,\n-            mir,\n-            Lvalue::undef(),\n-            StackPopCleanup::None,\n-        )?;\n-\n-        let mut arg_locals = self.frame().mir.args_iter();\n-        assert_eq!(self.frame().mir.arg_count, 1);\n-        let arg_local = arg_locals.next().unwrap();\n-        let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-        let arg_ty = self.tcx.mk_mut_ptr(ty);\n+        // the drop function expects a reference to the value\n         let valty = ValTy {\n             value: arg,\n-            ty: arg_ty,\n+            ty: self.tcx.mk_mut_ptr(ty),\n         };\n-        self.write_value(valty, dest)\n+\n+        let fn_sig = self.tcx.fn_sig(instance.def_id()).skip_binder().clone();\n+\n+        self.eval_fn_call(\n+            instance,\n+            Some((Lvalue::undef(), target)),\n+            &vec![valty],\n+            span,\n+            fn_sig,\n+        )\n     }\n }"}, {"sha": "af70d9eb846f0b2826f624847f74b90973bdc48c", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19018852c36e3511e0ff99314cb37c445f4b5827/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19018852c36e3511e0ff99314cb37c445f4b5827/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=19018852c36e3511e0ff99314cb37c445f4b5827", "patch": "@@ -112,19 +112,19 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 target,\n                 ..\n             } => {\n-                trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n                 // FIXME(CTFE): forbid drop in const eval\n                 let lval = self.eval_lvalue(location)?;\n                 let ty = self.lvalue_ty(location);\n-                self.goto_block(target);\n                 let ty = eval_context::apply_param_substs(self.tcx, self.substs(), &ty);\n+                trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n                 let instance = eval_context::resolve_drop_in_place(self.tcx, ty);\n                 self.drop_lvalue(\n                     lval,\n                     instance,\n                     ty,\n                     terminator.source_info.span,\n+                    target,\n                 )?;\n             }\n "}]}