{"sha": "d3dfafd393e1c42494af5a15e319ba884c30f9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGZhZmQzOTNlMWM0MjQ5NGFmNWExNWUzMTliYTg4NGMzMGY5YWE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T18:55:44Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T18:55:44Z"}, "message": "Merge #530\n\n530: Fix some random typos r=matklad a=killercup\n\n\n\nCo-authored-by: Pascal Hertleif <killercup@gmail.com>", "tree": {"sha": "22db5bb67c938665fb63b11294022159bf7f1a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22db5bb67c938665fb63b11294022159bf7f1a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3dfafd393e1c42494af5a15e319ba884c30f9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3dfafd393e1c42494af5a15e319ba884c30f9aa", "html_url": "https://github.com/rust-lang/rust/commit/d3dfafd393e1c42494af5a15e319ba884c30f9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3dfafd393e1c42494af5a15e319ba884c30f9aa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6fb13cd535f854d9d82ca3a08086a29263db9ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb13cd535f854d9d82ca3a08086a29263db9ccd", "html_url": "https://github.com/rust-lang/rust/commit/6fb13cd535f854d9d82ca3a08086a29263db9ccd"}, {"sha": "f97a9921dfe9080c6a804a2c8510f4a41c441de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97a9921dfe9080c6a804a2c8510f4a41c441de5", "html_url": "https://github.com/rust-lang/rust/commit/f97a9921dfe9080c6a804a2c8510f4a41c441de5"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "aea8397c99f2f0a69fd2068582f8306f78fac687", "filename": "crates/ra_ide_api_light/src/assists.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fassists.rs?ref=d3dfafd393e1c42494af5a15e319ba884c30f9aa", "patch": "@@ -1,5 +1,5 @@\n //! This modules contains various \"assists\": suggestions for source code edits\n-//! which are likely to occur at a given cursor positon. For example, if the\n+//! which are likely to occur at a given cursor position. For example, if the\n //! cursor is on the `,`, a possible assist is swapping the elements around the\n //! comma.\n \n@@ -62,22 +62,22 @@ fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&Syntax\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///\n-/// Assists use a somewhat overengeneered approach, given the current needs. The\n+/// Assists use a somewhat overengineered approach, given the current needs. The\n /// assists workflow consists of two phases. In the first phase, a user asks for\n /// the list of available assists. In the second phase, the user picks a\n /// particular assist and it gets applied.\n ///\n /// There are two peculiarities here:\n ///\n-/// * first, we ideally avoid computing more things then neccessary to answer\n+/// * first, we ideally avoid computing more things then necessary to answer\n ///   \"is assist applicable\" in the first phase.\n-/// * second, when we are appling assist, we don't have a gurantee that there\n+/// * second, when we are applying assist, we don't have a guarantee that there\n ///   weren't any changes between the point when user asked for assists and when\n ///   they applied a particular assist. So, when applying assist, we need to do\n ///   all the checks from scratch.\n ///\n /// To avoid repeating the same code twice for both \"check\" and \"apply\"\n-/// functions, we use an approach remeniscent of that of Django's function based\n+/// functions, we use an approach reminiscent of that of Django's function based\n /// views dealing with forms. Each assist receives a runtime parameter,\n /// `should_compute_edit`. It first check if an edit is applicable (potentially\n /// computing info required to compute the actual edit). If it is applicable,\n@@ -89,7 +89,7 @@ fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&Syntax\n ///\n /// Note, however, that we don't actually use such two-phase logic at the\n /// moment, because the LSP API is pretty awkward in this place, and it's much\n-/// easier to just compute the edit eagarly :-)\n+/// easier to just compute the edit eagerly :-)\n #[derive(Debug, Clone)]\n pub struct AssistCtx<'a> {\n     source_file: &'a SourceFile,"}, {"sha": "ca0fdb928e8b1c45ebcf3ef796628f4075379a82", "filename": "crates/ra_ide_api_light/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs?ref=d3dfafd393e1c42494af5a15e319ba884c30f9aa", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::generate,\n };\n \n-/// If the node is on the begining of the line, calculate indent.\n+/// If the node is on the beginning of the line, calculate indent.\n pub(crate) fn leading_indent(node: &SyntaxNode) -> Option<&str> {\n     let prev = prev_leaf(node)?;\n     let ws_text = ast::Whitespace::cast(prev)?.text();"}, {"sha": "72fba94024246055cf04a74bd999c1c1add543f3", "filename": "crates/ra_ide_api_light/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dfafd393e1c42494af5a15e319ba884c30f9aa/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs?ref=d3dfafd393e1c42494af5a15e319ba884c30f9aa", "patch": "@@ -1,7 +1,7 @@\n-//! This crate provides thouse IDE features which use only a single file.\n+//! This crate provides those IDE features which use only a single file.\n //!\n-//! This usually means functions which take sytnax tree as an input and produce\n-//! an edit or some auxilarly info.\n+//! This usually means functions which take syntax tree as an input and produce\n+//! an edit or some auxiliary info.\n \n pub mod assists;\n mod extend_selection;"}]}