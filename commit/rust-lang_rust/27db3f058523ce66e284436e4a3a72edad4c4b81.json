{"sha": "27db3f058523ce66e284436e4a3a72edad4c4b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZGIzZjA1ODUyM2NlNjZlMjg0NDM2ZTRhM2E3MmVkYWQ0YzRiODE=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-11T17:16:02Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-13T09:28:06Z"}, "message": "Return the Vec from csearch::get_item_attrs.\n\nUsing a closure unnecessarily obfuscates the code.", "tree": {"sha": "a588690dade9f566b786e0b25b64cce2f769772c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a588690dade9f566b786e0b25b64cce2f769772c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27db3f058523ce66e284436e4a3a72edad4c4b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27db3f058523ce66e284436e4a3a72edad4c4b81", "html_url": "https://github.com/rust-lang/rust/commit/27db3f058523ce66e284436e4a3a72edad4c4b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27db3f058523ce66e284436e4a3a72edad4c4b81/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f3554f52e50712fe0830720d8f7e4a4fdaa0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f3554f52e50712fe0830720d8f7e4a4fdaa0cf", "html_url": "https://github.com/rust-lang/rust/commit/56f3554f52e50712fe0830720d8f7e4a4fdaa0cf"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "d95000ece5ae6f3397645c8b87fddfb72e30812f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=27db3f058523ce66e284436e4a3a72edad4c4b81", "patch": "@@ -774,9 +774,8 @@ impl LintPass for UnusedResults {\n                         warned |= check_must_use(cx, &it.attrs[], s.span);\n                     }\n                 } else {\n-                    csearch::get_item_attrs(&cx.sess().cstore, did, |attrs| {\n-                        warned |= check_must_use(cx, &attrs[], s.span);\n-                    });\n+                    let attrs = csearch::get_item_attrs(&cx.sess().cstore, did);\n+                    warned |= check_must_use(cx, &attrs[], s.span);\n                 }\n             }\n             _ => {}"}, {"sha": "0bbd11bea0a48e0daaee8a8e5b8da9b0fdef911b", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=27db3f058523ce66e284436e4a3a72edad4c4b81", "patch": "@@ -203,13 +203,11 @@ pub fn get_methods_if_impl(cstore: &cstore::CStore,\n     decoder::get_methods_if_impl(cstore.intr.clone(), &*cdata, def.node)\n }\n \n-pub fn get_item_attrs<F>(cstore: &cstore::CStore,\n-                         def_id: ast::DefId,\n-                         f: F) where\n-    F: FnOnce(Vec<ast::Attribute>),\n-{\n+pub fn get_item_attrs(cstore: &cstore::CStore,\n+                      def_id: ast::DefId)\n+                      -> Vec<ast::Attribute> {\n     let cdata = cstore.get_crate_data(def_id.krate);\n-    f(decoder::get_item_attrs(&*cdata, def_id.node));\n+    decoder::get_item_attrs(&*cdata, def_id.node)\n }\n \n pub fn get_struct_fields(cstore: &cstore::CStore,"}, {"sha": "2cef5f8353fa9d99adfc668993334b119906a502", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=27db3f058523ce66e284436e4a3a72edad4c4b81", "patch": "@@ -5556,8 +5556,7 @@ pub fn predicates<'tcx>(\n }\n \n /// Iterate over attributes of a definition.\n-// (This should really be an iterator, but that would require csearch and\n-// decoder to use iterators instead of higher-order functions.)\n+// (This should really be an iterator.)\n pub fn each_attr<F>(tcx: &ctxt, did: DefId, mut f: F) -> bool where\n     F: FnMut(&ast::Attribute) -> bool,\n {\n@@ -5566,12 +5565,8 @@ pub fn each_attr<F>(tcx: &ctxt, did: DefId, mut f: F) -> bool where\n         item.attrs.iter().all(|attr| f(attr))\n     } else {\n         info!(\"getting foreign attrs\");\n-        let mut cont = true;\n-        csearch::get_item_attrs(&tcx.sess.cstore, did, |attrs| {\n-            if cont {\n-                cont = attrs.iter().all(|attr| f(attr));\n-            }\n-        });\n+        let attrs = csearch::get_item_attrs(&tcx.sess.cstore, did);\n+        let cont = attrs.iter().all(|attr| f(attr));\n         info!(\"done\");\n         cont\n     }"}, {"sha": "fe7c0d4cf69485f3ba22928d67f53762d8ab9a2a", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=27db3f058523ce66e284436e4a3a72edad4c4b81", "patch": "@@ -248,9 +248,8 @@ fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<'tcx>,\n \n     let f = decl_rust_fn(ccx, fn_ty, name);\n \n-    csearch::get_item_attrs(&ccx.sess().cstore, did, |attrs| {\n-        set_llvm_fn_attrs(ccx, &attrs[], f)\n-    });\n+    let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n+    set_llvm_fn_attrs(ccx, &attrs[], f);\n \n     ccx.externs().borrow_mut().insert(name.to_string(), f);\n     f"}, {"sha": "ccaefadc1fcd963e281e00a6e788792df3f8df60", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27db3f058523ce66e284436e4a3a72edad4c4b81/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=27db3f058523ce66e284436e4a3a72edad4c4b81", "patch": "@@ -126,13 +126,8 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n \n pub fn load_attrs(cx: &DocContext, tcx: &ty::ctxt,\n                   did: ast::DefId) -> Vec<clean::Attribute> {\n-    let mut attrs = Vec::new();\n-    csearch::get_item_attrs(&tcx.sess.cstore, did, |v| {\n-        attrs.extend(v.into_iter().map(|a| {\n-            a.clean(cx)\n-        }));\n-    });\n-    attrs\n+    let attrs = csearch::get_item_attrs(&tcx.sess.cstore, did);\n+    attrs.into_iter().map(|a| a.clean(cx)).collect()\n }\n \n /// Record an external fully qualified name in the external_paths cache."}]}