{"sha": "ff43249b0efd274322cbd53441ff15fcdb7096ba", "node_id": "C_kwDOAAsO6NoAKGZmNDMyNDliMGVmZDI3NDMyMmNiZDUzNDQxZmYxNWZjZGI3MDk2YmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-05T21:47:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-05T21:47:59Z"}, "message": "Rollup merge of #112303 - Nilstrieb:as-deref, r=compiler-errors\n\nNormalize in infcx instead of globally for `Option::as_deref` suggestion\n\nfixes #112293\n\nThe projection may contain inference variables. These inference variables are local to the local inference context. Using `tcx.normalize_erasing_regions` doesn't work here because this method is global and does not have access to the inference context. It's therefore unable to deal with the inference variables. We normalize in the local inference context instead, which knowns about the inference variables.\n\nThe test looks a little different than the issue example, I made it more minimal and verified that it still ICEs on nightly.\n\nAlso contains a drive-by fix to properly compare the types.\n\nr? `@compiler-errors`", "tree": {"sha": "12b88e1283e15bc709000578948d56ef04eea717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b88e1283e15bc709000578948d56ef04eea717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff43249b0efd274322cbd53441ff15fcdb7096ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkflgPCRBK7hj4Ov3rIwAAxoIIAIv4rY0PkPWKAoCzcLyFy2Xo\n1PaP0pPd2z33RrVm6Mb/xogRwxi6qpDV9CKbmAsjZu0KchmyuJ0kBVX08jgIeluZ\npTbgpwI7+6+iLwkzzhYAhsUmxBJLTUt505H+VenXEmBT5qYzjh3Kh81yXyym9Rg6\nGNuZUx6hF5o3UEvZ1hQO9IJlKltLY8QnQuhv9guvkqYgc2cHHaoRZJ66O/yEYDzl\n2MidJI2DWR2kX3BvpON7zpov2fYmUS2LFYPBfWWJudILFK4lbNqNUXsRXP21GO6N\nkxc32SIm50DeYGc9MWk2KjtNqQv40D9D4YQvvJ9y2YPKJiGdMPoFMrXoadCAsX4=\n=mfUv\n-----END PGP SIGNATURE-----\n", "payload": "tree 12b88e1283e15bc709000578948d56ef04eea717\nparent 9ce0c7951c3f36d81809e43584c601536badb45f\nparent c12575d3173eb6ba985482808a87e54f23ad328e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686001679 +0200\ncommitter GitHub <noreply@github.com> 1686001679 +0200\n\nRollup merge of #112303 - Nilstrieb:as-deref, r=compiler-errors\n\nNormalize in infcx instead of globally for `Option::as_deref` suggestion\n\nfixes #112293\n\nThe projection may contain inference variables. These inference variables are local to the local inference context. Using `tcx.normalize_erasing_regions` doesn't work here because this method is global and does not have access to the inference context. It's therefore unable to deal with the inference variables. We normalize in the local inference context instead, which knowns about the inference variables.\n\nThe test looks a little different than the issue example, I made it more minimal and verified that it still ICEs on nightly.\n\nAlso contains a drive-by fix to properly compare the types.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff43249b0efd274322cbd53441ff15fcdb7096ba", "html_url": "https://github.com/rust-lang/rust/commit/ff43249b0efd274322cbd53441ff15fcdb7096ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff43249b0efd274322cbd53441ff15fcdb7096ba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce0c7951c3f36d81809e43584c601536badb45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce0c7951c3f36d81809e43584c601536badb45f", "html_url": "https://github.com/rust-lang/rust/commit/9ce0c7951c3f36d81809e43584c601536badb45f"}, {"sha": "c12575d3173eb6ba985482808a87e54f23ad328e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12575d3173eb6ba985482808a87e54f23ad328e", "html_url": "https://github.com/rust-lang/rust/commit/c12575d3173eb6ba985482808a87e54f23ad328e"}], "stats": {"total": 128, "additions": 89, "deletions": 39}, "files": [{"sha": "80d0faca670a76f8930d66f17037c277ab0c5006", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -3592,8 +3592,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // Extract `<U as Deref>::Target` assoc type and check that it is `T`\n             && let Some(deref_target_did) = tcx.lang_items().deref_target()\n             && let projection = tcx.mk_projection(deref_target_did, tcx.mk_substs(&[ty::GenericArg::from(found_ty)]))\n-            && let Ok(deref_target) = tcx.try_normalize_erasing_regions(param_env, projection)\n-            && deref_target == target_ty\n+            && let InferOk { value: deref_target, obligations } = infcx.at(&ObligationCause::dummy(), param_env).normalize(projection)\n+            && obligations.iter().all(|obligation| infcx.predicate_must_hold_modulo_regions(obligation))\n+            && infcx.can_eq(param_env, deref_target, target_ty)\n         {\n             let help = if let hir::Mutability::Mut = needs_mut\n                 && let Some(deref_mut_did) = tcx.lang_items().deref_mut_trait()"}, {"sha": "5febbbe392b245b99786e22aae1e6be9164a1070", "filename": "tests/ui/mismatched_types/suggest-option-asderef-inference-var.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -0,0 +1,9 @@\n+fn deref_int(a: &i32) -> i32 {\n+    *a\n+}\n+\n+fn main() {\n+    // https://github.com/rust-lang/rust/issues/112293\n+    let _has_inference_vars: Option<i32> = Some(0).map(deref_int);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "71c4729e31038204480ddf243fd5878373d074a2", "filename": "tests/ui/mismatched_types/suggest-option-asderef-inference-var.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -0,0 +1,24 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef-inference-var.rs:7:56\n+   |\n+LL | fn deref_int(a: &i32) -> i32 {\n+   | ---------------------------- found signature defined here\n+...\n+LL |     let _has_inference_vars: Option<i32> = Some(0).map(deref_int);\n+   |                                                    --- ^^^^^^^^^ expected due to this\n+   |                                                    |\n+   |                                                    required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn({integer}) -> _`\n+              found function signature `for<'a> fn(&'a i32) -> _`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL - fn deref_int(a: &i32) -> i32 {\n+LL + fn deref_int(a: i32) -> i32 {\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "ac0831ce655080ebb7ca8979bb7ac466a79962b2", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -10,10 +10,6 @@ fn no_args() -> Option<()> {\n     Some(())\n }\n \n-fn generic_ref<T>(_: &T) -> Option<()> {\n-    Some(())\n-}\n-\n extern \"C\" fn takes_str_but_wrong_abi(_: &str) -> Option<()> {\n     Some(())\n }\n@@ -33,8 +29,6 @@ fn main() {\n     //~^ ERROR expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n     let _ = produces_string().and_then(no_args);\n     //~^ ERROR function is expected to take 1 argument, but it takes 0 arguments\n-    let _ = produces_string().and_then(generic_ref);\n-    //~^ ERROR type mismatch in function arguments\n     let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n     //~^ ERROR type mismatch in function arguments\n }"}, {"sha": "ecfbd27b180e67105abc64a425a0399f0fb6e386", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.stderr", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:28:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:24:40\n    |\n LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n    | ------------------------------------------------------ found signature defined here\n@@ -15,7 +15,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n-  --> $DIR/suggest-option-asderef-unfixable.rs:30:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:26:40\n    |\n LL |     let _ = produces_string().and_then(takes_str_but_wrong_abi);\n    |                               -------- ^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n@@ -27,7 +27,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n-  --> $DIR/suggest-option-asderef-unfixable.rs:32:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:28:40\n    |\n LL |     let _ = produces_string().and_then(takes_str_but_unsafe);\n    |                               -------- ^^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n@@ -40,7 +40,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0593]: function is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:34:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:30:40\n    |\n LL | fn no_args() -> Option<()> {\n    | -------------------------- takes 0 arguments\n@@ -54,28 +54,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:36:40\n-   |\n-LL | fn generic_ref<T>(_: &T) -> Option<()> {\n-   | -------------------------------------- found signature defined here\n-...\n-LL |     let _ = produces_string().and_then(generic_ref);\n-   |                               -------- ^^^^^^^^^^^ expected due to this\n-   |                               |\n-   |                               required by a bound introduced by this call\n-   |\n-   = note: expected function signature `fn(String) -> _`\n-              found function signature `for<'a> fn(&'a _) -> _`\n-note: required by a bound in `Option::<T>::and_then`\n-  --> $SRC_DIR/core/src/option.rs:LL:COL\n-help: do not borrow the argument\n-   |\n-LL - fn generic_ref<T>(_: &T) -> Option<()> {\n-LL + fn generic_ref<T>(_: T) -> Option<()> {\n-   |\n-\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:38:45\n+  --> $DIR/suggest-option-asderef-unfixable.rs:32:45\n    |\n LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n    | ------------------------------------------------------ found signature defined here\n@@ -90,7 +69,7 @@ LL |     let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0593, E0631.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5c42ece3c5d094faf55cda01ad56cf4be372c8e7", "filename": "tests/ui/mismatched_types/suggest-option-asderef.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -16,6 +16,11 @@ fn generic<T>(_: T) -> Option<()> {\n     Some(())\n }\n \n+fn generic_ref<T>(_: T) -> Option<()> {\n+    //~^ HELP do not borrow the argument\n+    Some(())\n+}\n+\n fn main() {\n     let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n     //~^ ERROR type mismatch in function arguments\n@@ -27,4 +32,8 @@ fn main() {\n     //~^ ERROR type mismatch in function arguments\n     //~| HELP call `Option::as_deref_mut()` first\n     let _ = produces_string().and_then(generic);\n+\n+    let _ = produces_string().as_deref().and_then(generic_ref);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n }"}, {"sha": "a5278b8fb16184095ff9aa8953251cfe4ebaed20", "filename": "tests/ui/mismatched_types/suggest-option-asderef.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -16,6 +16,11 @@ fn generic<T>(_: T) -> Option<()> {\n     Some(())\n }\n \n+fn generic_ref<T>(_: &T) -> Option<()> {\n+    //~^ HELP do not borrow the argument\n+    Some(())\n+}\n+\n fn main() {\n     let _: Option<()> = produces_string().and_then(takes_str);\n     //~^ ERROR type mismatch in function arguments\n@@ -27,4 +32,8 @@ fn main() {\n     //~^ ERROR type mismatch in function arguments\n     //~| HELP call `Option::as_deref_mut()` first\n     let _ = produces_string().and_then(generic);\n+\n+    let _ = produces_string().and_then(generic_ref);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n }"}, {"sha": "01341603dde3fc6f1ed52729b7ecc670c53d61d2", "filename": "tests/ui/mismatched_types/suggest-option-asderef.stderr", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff43249b0efd274322cbd53441ff15fcdb7096ba/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr?ref=ff43249b0efd274322cbd53441ff15fcdb7096ba", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:20:52\n+  --> $DIR/suggest-option-asderef.rs:25:52\n    |\n LL | fn takes_str(_: &str) -> Option<()> {\n    | ----------------------------------- found signature defined here\n@@ -19,7 +19,7 @@ LL |     let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n    |                                          +++++++++++\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:23:55\n+  --> $DIR/suggest-option-asderef.rs:28:55\n    |\n LL | fn takes_str(_: &str) -> Option<()> {\n    | ----------------------------------- found signature defined here\n@@ -39,7 +39,7 @@ LL |     let _: Option<Option<()>> = produces_string().as_deref().map(takes_str)\n    |                                                  +++++++++++\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:26:55\n+  --> $DIR/suggest-option-asderef.rs:31:55\n    |\n LL | fn takes_str_mut(_: &mut str) -> Option<()> {\n    | ------------------------------------------- found signature defined here\n@@ -58,6 +58,31 @@ help: call `Option::as_deref_mut()` first\n LL |     let _: Option<Option<()>> = produces_string().as_deref_mut().map(takes_str_mut);\n    |                                                  +++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef.rs:36:40\n+   |\n+LL | fn generic_ref<T>(_: &T) -> Option<()> {\n+   | -------------------------------------- found signature defined here\n+...\n+LL |     let _ = produces_string().and_then(generic_ref);\n+   |                               -------- ^^^^^^^^^^^ expected due to this\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a _) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL - fn generic_ref<T>(_: &T) -> Option<()> {\n+LL + fn generic_ref<T>(_: T) -> Option<()> {\n+   |\n+help: call `Option::as_deref()` first\n+   |\n+LL |     let _ = produces_string().as_deref().and_then(generic_ref);\n+   |                              +++++++++++\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0631`."}]}