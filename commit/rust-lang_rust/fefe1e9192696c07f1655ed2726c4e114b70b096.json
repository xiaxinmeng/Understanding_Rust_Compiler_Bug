{"sha": "fefe1e9192696c07f1655ed2726c4e114b70b096", "node_id": "C_kwDOAAsO6NoAKGZlZmUxZTkxOTI2OTZjMDdmMTY1NWVkMjcyNmM0ZTExNGI3MGIwOTY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-11-08T15:59:36Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-11-08T16:02:40Z"}, "message": "Record more artifact sizes during self-profiling.", "tree": {"sha": "0beead3daa202ec305dc36e55ed8566d3453cb9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0beead3daa202ec305dc36e55ed8566d3453cb9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fefe1e9192696c07f1655ed2726c4e114b70b096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fefe1e9192696c07f1655ed2726c4e114b70b096", "html_url": "https://github.com/rust-lang/rust/commit/fefe1e9192696c07f1655ed2726c4e114b70b096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fefe1e9192696c07f1655ed2726c4e114b70b096/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e3890c9d4064253aaa8c51f5d5458d2dc6dab77", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3890c9d4064253aaa8c51f5d5458d2dc6dab77", "html_url": "https://github.com/rust-lang/rust/commit/3e3890c9d4064253aaa8c51f5d5458d2dc6dab77"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "4abda33b2aa89fe971bd1e6f61f56ae9766e84f9", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=fefe1e9192696c07f1655ed2726c4e114b70b096", "patch": "@@ -17,6 +17,7 @@ use rustc_codegen_ssa::back::write::{\n };\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n@@ -53,6 +54,7 @@ pub fn write_output_file(\n     output: &Path,\n     dwo_output: Option<&Path>,\n     file_type: llvm::FileType,\n+    self_profiler_ref: &SelfProfilerRef,\n ) -> Result<(), FatalError> {\n     unsafe {\n         let output_c = path_to_c_string(output);\n@@ -76,6 +78,19 @@ pub fn write_output_file(\n                 file_type,\n             )\n         };\n+\n+        // Record artifact sizes for self-profiling\n+        if result == llvm::LLVMRustResult::Success {\n+            let artifact_kind = match file_type {\n+                llvm::FileType::ObjectFile => \"object_file\",\n+                llvm::FileType::AssemblyFile => \"assembly_file\",\n+            };\n+            record_artifact_size(self_profiler_ref, artifact_kind, output);\n+            if let Some(dwo_file) = dwo_output {\n+                record_artifact_size(self_profiler_ref, \"dwo_file\", dwo_file);\n+            }\n+        }\n+\n         result.into_result().map_err(|()| {\n             let msg = format!(\"could not write output to {}\", output.display());\n             llvm_err(handler, &msg)\n@@ -752,6 +767,14 @@ pub(crate) unsafe fn codegen(\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n+            if let Some(bitcode_filename) = bc_out.file_name() {\n+                cgcx.prof.artifact_size(\n+                    \"llvm_bitcode\",\n+                    bitcode_filename.to_string_lossy(),\n+                    data.len() as u64,\n+                );\n+            }\n+\n             if config.emit_bc || config.emit_obj == EmitObj::Bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n@@ -812,6 +835,11 @@ pub(crate) unsafe fn codegen(\n             }\n \n             let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+\n+            if result == llvm::LLVMRustResult::Success {\n+                record_artifact_size(&cgcx.prof, \"llvm_ir\", &out);\n+            }\n+\n             result.into_result().map_err(|()| {\n                 let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n                 llvm_err(diag_handler, &msg)\n@@ -842,6 +870,7 @@ pub(crate) unsafe fn codegen(\n                     &path,\n                     None,\n                     llvm::FileType::AssemblyFile,\n+                    &cgcx.prof,\n                 )\n             })?;\n         }\n@@ -875,6 +904,7 @@ pub(crate) unsafe fn codegen(\n                         &obj_out,\n                         dwo_out,\n                         llvm::FileType::ObjectFile,\n+                        &cgcx.prof,\n                     )\n                 })?;\n             }\n@@ -1131,3 +1161,19 @@ fn create_msvc_imps(\n         symbol_name.starts_with(b\"__llvm_profile_\")\n     }\n }\n+\n+fn record_artifact_size(\n+    self_profiler_ref: &SelfProfilerRef,\n+    artifact_kind: &'static str,\n+    path: &Path,\n+) {\n+    // Don't stat the file if we are not going to record its size.\n+    if !self_profiler_ref.enabled() {\n+        return;\n+    }\n+\n+    if let Some(artifact_name) = path.file_name() {\n+        let file_size = std::fs::metadata(path).map(|m| m.len()).unwrap_or(0);\n+        self_profiler_ref.artifact_size(artifact_kind, artifact_name.to_string_lossy(), file_size);\n+    }\n+}"}, {"sha": "1ba0c4fa05b5b3688c3345511efb74131e3e9a7c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=fefe1e9192696c07f1655ed2726c4e114b70b096", "patch": "@@ -121,6 +121,19 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             if sess.opts.json_artifact_notifications {\n                 sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename, \"link\");\n             }\n+\n+            if sess.prof.enabled() {\n+                if let Some(artifact_name) = out_filename.file_name() {\n+                    // Record size for self-profiling\n+                    let file_size = std::fs::metadata(&out_filename).map(|m| m.len()).unwrap_or(0);\n+\n+                    sess.prof.artifact_size(\n+                        \"linked_artifact\",\n+                        artifact_name.to_string_lossy(),\n+                        file_size,\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "49c3472a20266d9ab82410226d5828907cd858b6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fefe1e9192696c07f1655ed2726c4e114b70b096", "patch": "@@ -2187,5 +2187,8 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     result[header + 2] = (pos >> 8) as u8;\n     result[header + 3] = (pos >> 0) as u8;\n \n+    // Record metadata size for self-profiling\n+    tcx.prof.artifact_size(\"crate_metadata\", \"crate_metadata\", result.len() as u64);\n+\n     EncodedMetadata { raw_data: result }\n }"}, {"sha": "658c9028ca1a1d0e3866bf9b74875d74a959ae4a", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefe1e9192696c07f1655ed2726c4e114b70b096/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=fefe1e9192696c07f1655ed2726c4e114b70b096", "patch": "@@ -361,6 +361,17 @@ fn collect_and_partition_mono_items<'tcx>(\n         )\n     });\n \n+    if tcx.prof.enabled() {\n+        // Record CGU size estimates for self-profiling.\n+        for cgu in codegen_units {\n+            tcx.prof.artifact_size(\n+                \"codegen_unit_size_estimate\",\n+                &cgu.name().as_str()[..],\n+                cgu.size_estimate() as u64,\n+            );\n+        }\n+    }\n+\n     let mono_items: DefIdSet = items\n         .iter()\n         .filter_map(|mono_item| match *mono_item {"}]}