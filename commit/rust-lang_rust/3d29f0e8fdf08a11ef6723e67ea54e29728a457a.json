{"sha": "3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjlmMGU4ZmRmMDhhMTFlZjY3MjNlNjdlYTU0ZTI5NzI4YTQ1N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T21:55:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T21:55:43Z"}, "message": "Auto merge of #44316 - eddyb:no-local-var-def-id, r=michaelwoerister\n\nUse NodeId/HirId instead of DefId for local variables.\n\nr? @michaelwoerister", "tree": {"sha": "b50b23d316b7cae983bbc188caa34d9f8e84ec8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50b23d316b7cae983bbc188caa34d9f8e84ec8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "html_url": "https://github.com/rust-lang/rust/commit/3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca94c75c527006be0824c764773380bbeea6030b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca94c75c527006be0824c764773380bbeea6030b", "html_url": "https://github.com/rust-lang/rust/commit/ca94c75c527006be0824c764773380bbeea6030b"}, {"sha": "da0a47a081a5beed3b2e638bd728fb0797f61561", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0a47a081a5beed3b2e638bd728fb0797f61561", "html_url": "https://github.com/rust-lang/rust/commit/da0a47a081a5beed3b2e638bd728fb0797f61561"}], "stats": {"total": 435, "additions": 200, "deletions": 235}, "files": [{"sha": "c797f78fc7e3e156feb55ea870891a22c873f03d", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -48,8 +48,9 @@ pub enum Def {\n     VariantCtor(DefId, CtorKind),\n     Method(DefId),\n     AssociatedConst(DefId),\n-    Local(DefId),\n-    Upvar(DefId,        // def id of closed over local\n+\n+    Local(ast::NodeId),\n+    Upvar(ast::NodeId,  // node id of closed over local\n           usize,        // index in the freevars list of the closure\n           ast::NodeId), // expr node that creates the closure\n     Label(ast::NodeId),\n@@ -150,11 +151,13 @@ impl Def {\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n-            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id, ..) |\n+            Def::AssociatedConst(id) | Def::Macro(id, ..) |\n             Def::GlobalAsm(id) => {\n                 id\n             }\n \n+            Def::Local(..) |\n+            Def::Upvar(..) |\n             Def::Label(..)  |\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |"}, {"sha": "216a6d025e3b0d579b6dcccb15a52bbc87f46101", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -653,8 +653,8 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Ref(ref subpattern, _) => {\n             visitor.visit_pat(subpattern)\n         }\n-        PatKind::Binding(_, def_id, ref pth1, ref optional_subpattern) => {\n-            visitor.visit_def_mention(Def::Local(def_id));\n+        PatKind::Binding(_, canonical_id, ref pth1, ref optional_subpattern) => {\n+            visitor.visit_def_mention(Def::Local(canonical_id));\n             visitor.visit_name(pth1.span, pth1.node);\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }"}, {"sha": "fe122fef28a1908a9c4e3158c96c1379f150d024", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -41,8 +41,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n use hir;\n-use hir::map::{Definitions, DefKey, REGULAR_SPACE};\n-use hir::map::definitions::DefPathData;\n+use hir::map::{Definitions, DefKey};\n use hir::def_id::{DefIndex, DefId, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution};\n use lint::builtin::PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES;\n@@ -1738,29 +1737,28 @@ impl<'a> LoweringContext<'a> {\n             node: match p.node {\n                 PatKind::Wild => hir::PatKind::Wild,\n                 PatKind::Ident(ref binding_mode, pth1, ref sub) => {\n-                    self.with_parent_def(p.id, |this| {\n-                        match this.resolver.get_resolution(p.id).map(|d| d.base_def()) {\n-                            // `None` can occur in body-less function signatures\n-                            def @ None | def @ Some(Def::Local(_)) => {\n-                                let def_id = def.map(|d| d.def_id()).unwrap_or_else(|| {\n-                                    this.resolver.definitions().local_def_id(p.id)\n-                                });\n-                                hir::PatKind::Binding(this.lower_binding_mode(binding_mode),\n-                                                      def_id,\n-                                                      respan(pth1.span, pth1.node.name),\n-                                                      sub.as_ref().map(|x| this.lower_pat(x)))\n-                            }\n-                            Some(def) => {\n-                                hir::PatKind::Path(hir::QPath::Resolved(None, P(hir::Path {\n-                                    span: pth1.span,\n-                                    def,\n-                                    segments: hir_vec![\n-                                        hir::PathSegment::from_name(pth1.node.name)\n-                                    ],\n-                                })))\n-                            }\n+                    match self.resolver.get_resolution(p.id).map(|d| d.base_def()) {\n+                        // `None` can occur in body-less function signatures\n+                        def @ None | def @ Some(Def::Local(_)) => {\n+                            let canonical_id = match def {\n+                                Some(Def::Local(id)) => id,\n+                                _ => p.id\n+                            };\n+                            hir::PatKind::Binding(self.lower_binding_mode(binding_mode),\n+                                                  canonical_id,\n+                                                  respan(pth1.span, pth1.node.name),\n+                                                  sub.as_ref().map(|x| self.lower_pat(x)))\n                         }\n-                    })\n+                        Some(def) => {\n+                            hir::PatKind::Path(hir::QPath::Resolved(None, P(hir::Path {\n+                                span: pth1.span,\n+                                def,\n+                                segments: hir_vec![\n+                                    hir::PathSegment::from_name(pth1.node.name)\n+                                ],\n+                            })))\n+                        }\n+                    }\n                 }\n                 PatKind::Lit(ref e) => hir::PatKind::Lit(P(self.lower_expr(e))),\n                 PatKind::TupleStruct(ref path, ref pats, ddpos) => {\n@@ -2715,14 +2713,9 @@ impl<'a> LoweringContext<'a> {\n                                         id: Name,\n                                         binding: NodeId,\n                                         attrs: ThinVec<Attribute>) -> hir::Expr {\n-        let def = {\n-            let defs = self.resolver.definitions();\n-            Def::Local(defs.local_def_id(binding))\n-        };\n-\n         let expr_path = hir::ExprPath(hir::QPath::Resolved(None, P(hir::Path {\n             span,\n-            def,\n+            def: Def::Local(binding),\n             segments: hir_vec![hir::PathSegment::from_name(id)],\n         })));\n \n@@ -2860,23 +2853,12 @@ impl<'a> LoweringContext<'a> {\n     fn pat_ident_binding_mode(&mut self, span: Span, name: Name, bm: hir::BindingAnnotation)\n                               -> P<hir::Pat> {\n         let LoweredNodeId { node_id, hir_id } = self.next_id();\n-        let parent_def = self.parent_def.unwrap();\n-        let def_id = {\n-            let defs = self.resolver.definitions();\n-            let def_path_data = DefPathData::Binding(name.as_str());\n-            let def_index = defs.create_def_with_parent(parent_def,\n-                                                        node_id,\n-                                                        def_path_data,\n-                                                        REGULAR_SPACE,\n-                                                        Mark::root());\n-            DefId::local(def_index)\n-        };\n \n         P(hir::Pat {\n             id: node_id,\n             hir_id,\n             node: hir::PatKind::Binding(bm,\n-                                        def_id,\n+                                        node_id,\n                                         Spanned {\n                                             span,\n                                             node: name,"}, {"sha": "673e6d3bbfbae6b439cba2026ea59a54d92b4bf2", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -233,21 +233,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_pat(&mut self, pat: &'a Pat) {\n-        let parent_def = self.parent_def;\n-\n         match pat.node {\n             PatKind::Mac(..) => return self.visit_macro_invoc(pat.id, false),\n-            PatKind::Ident(_, id, _) => {\n-                let def = self.create_def(pat.id,\n-                                          DefPathData::Binding(id.node.name.as_str()),\n-                                          REGULAR_SPACE);\n-                self.parent_def = Some(def);\n-            }\n-            _ => {}\n+            _ => visit::walk_pat(self, pat),\n         }\n-\n-        visit::walk_pat(self, pat);\n-        self.parent_def = parent_def;\n     }\n \n     fn visit_expr(&mut self, expr: &'a Expr) {"}, {"sha": "bd80b613e77f5d7c851883c22ebcdbab167aa168", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -212,7 +212,6 @@ impl DefKey {\n             DefPathData::TypeParam(name) |\n             DefPathData::LifetimeDef(name) |\n             DefPathData::EnumVariant(name) |\n-            DefPathData::Binding(name) |\n             DefPathData::Field(name) |\n             DefPathData::GlobalMetaData(name) => {\n                 name.hash(&mut hasher);\n@@ -372,8 +371,6 @@ pub enum DefPathData {\n     StructCtor,\n     /// Initializer for a const\n     Initializer,\n-    /// Pattern binding\n-    Binding(InternedString),\n     /// An `impl Trait` type node.\n     ImplTrait,\n     /// A `typeof` type node.\n@@ -613,7 +610,6 @@ impl DefPathData {\n             TypeParam(name) |\n             LifetimeDef(name) |\n             EnumVariant(name) |\n-            Binding(name) |\n             Field(name) |\n             GlobalMetaData(name) => Some(name),\n \n@@ -638,7 +634,6 @@ impl DefPathData {\n             TypeParam(name) |\n             LifetimeDef(name) |\n             EnumVariant(name) |\n-            Binding(name) |\n             Field(name) |\n             GlobalMetaData(name) => {\n                 return name"}, {"sha": "d254d50e8bd050b122e594bb0a0086d670b3d929", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -623,8 +623,10 @@ pub enum PatKind {\n     Wild,\n \n     /// A fresh binding `ref mut binding @ OPT_SUBPATTERN`.\n-    /// The `DefId` is for the definition of the variable being bound.\n-    Binding(BindingAnnotation, DefId, Spanned<Name>, Option<P<Pat>>),\n+    /// The `NodeId` is the canonical ID for the variable being bound,\n+    /// e.g. in `Ok(x) | Err(x)`, both `x` use the same canonical ID,\n+    /// which is the pattern ID of the first `x`.\n+    Binding(BindingAnnotation, NodeId, Spanned<Name>, Option<P<Pat>>),\n \n     /// A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\n     /// The `bool` is `true` in the presence of a `..`.\n@@ -1843,6 +1845,15 @@ pub struct Freevar {\n     pub span: Span\n }\n \n+impl Freevar {\n+    pub fn var_id(&self) -> NodeId {\n+        match self.def {\n+            Def::Local(id) | Def::Upvar(id, ..) => id,\n+            _ => bug!(\"Freevar::var_id: bad def ({:?})\", self.def)\n+        }\n+    }\n+}\n+\n pub type FreevarMap = NodeMap<Vec<Freevar>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;"}, {"sha": "6fc76a1d09037740ec003bb723dead46eb348828", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -913,8 +913,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         name)\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n-                format!(\" for capture of `{}` by closure\",\n-                        self.tcx.local_var_name_str_def_index(upvar_id.var_id))\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_name = self.tcx.hir.name(var_node_id);\n+                format!(\" for capture of `{}` by closure\", var_name)\n             }\n         };\n "}, {"sha": "1f0fd7b01d37dcd97d4b9459edc9da08047b27b4", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -43,10 +43,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_name = self.tcx.hir.name(var_node_id);\n                 err.span_note(span,\n-                              &format!(\"...so that closure can access `{}`\",\n-                                       self.tcx\n-                                           .local_var_name_str_def_index(upvar_id.var_id)));\n+                              &format!(\"...so that closure can access `{}`\", var_name));\n             }\n             infer::InfStackClosure(span) => {\n                 err.span_note(span, \"...so that closure does not outlive its stack frame\");\n@@ -63,7 +63,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err.span_note(span,\n                               &format!(\"...so that captured variable `{}` does not outlive the \\\n                                         enclosing closure\",\n-                                       self.tcx.local_var_name_str(id)));\n+                                       self.tcx.hir.name(id)));\n             }\n             infer::IndexSlice(span) => {\n                 err.span_note(span, \"...so that slice is not indexed outside the lifetime\");\n@@ -176,22 +176,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_name = self.tcx.hir.name(var_node_id);\n                 let mut err = struct_span_err!(self.tcx.sess,\n                                                span,\n                                                E0313,\n                                                \"lifetime of borrowed pointer outlives lifetime \\\n                                                 of captured variable `{}`...\",\n-                                               self.tcx\n-                                                   .local_var_name_str_def_index(upvar_id.var_id));\n+                                               var_name);\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err,\n                                                  \"...the borrowed pointer is valid for \",\n                                                  sub,\n                                                  \"...\");\n                 self.tcx.note_and_explain_region(\n                     region_scope_tree,\n                     &mut err,\n-                    &format!(\"...but `{}` is only valid for \",\n-                        self.tcx.local_var_name_str_def_index(upvar_id.var_id)),\n+                    &format!(\"...but `{}` is only valid for \", var_name),\n                     sup,\n                     \"\");\n                 err\n@@ -234,7 +234,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                E0474,\n                                                \"captured variable `{}` does not outlive the \\\n                                                 enclosing closure\",\n-                                               self.tcx.local_var_name_str(id));\n+                                               self.tcx.hir.name(id));\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err,\n                     \"captured variable is valid for \", sup, \"\");\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "66a425a2d476bd85295879f4d432e16e8d5132d2", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -79,7 +79,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 self.check_def_id(def.def_id());\n             }\n             _ if self.ignore_non_const_paths => (),\n-            Def::PrimTy(..) | Def::SelfTy(..) => (),\n+            Def::PrimTy(..) | Def::SelfTy(..) |\n+            Def::Local(..) | Def::Upvar(..) => {}\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 if let Some(enum_id) = self.tcx.parent_def_id(variant_id) {\n                     self.check_def_id(enum_id);"}, {"sha": "b036b145a96e4639f1a488a658e160305a463b51", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -828,7 +828,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         let ExprUseVisitor { ref mc, ref mut delegate, param_env } = *self;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |cmt_pat, pat| {\n-            if let PatKind::Binding(_, def_id, ..) = pat.node {\n+            if let PatKind::Binding(_, canonical_id, ..) = pat.node {\n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\", cmt_pat, pat, match_mode);\n                 let bm = *mc.tables.pat_binding_modes().get(pat.hir_id)\n                                                      .expect(\"missing binding mode\");\n@@ -838,7 +838,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n                 // Each match binding is effectively an assignment to the\n                 // binding being produced.\n-                let def = Def::Local(def_id);\n+                let def = Def::Local(canonical_id);\n                 if let Ok(binding_cmt) = mc.cat_def(pat.id, pat.span, pat_ty, def) {\n                     delegate.mutate(pat.id, pat.span, binding_cmt, MutateMode::Init);\n                 }\n@@ -895,17 +895,16 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         self.tcx().with_freevars(closure_expr.id, |freevars| {\n             for freevar in freevars {\n-                let var_def_id = freevar.def.def_id();\n-                debug_assert!(var_def_id.is_local());\n+                let var_hir_id = self.tcx().hir.node_to_hir_id(freevar.var_id());\n                 let closure_def_id = self.tcx().hir.local_def_id(closure_expr.id);\n                 let upvar_id = ty::UpvarId {\n-                    var_id: var_def_id.index,\n+                    var_id: var_hir_id,\n                     closure_expr_id: closure_def_id.index\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n                 let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n                                                                    fn_decl_span,\n-                                                                   freevar.def));\n+                                                                   freevar));\n                 match upvar_capture {\n                     ty::UpvarCapture::ByValue => {\n                         let mode = copy_or_move(&self.mc,\n@@ -930,14 +929,13 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     fn cat_captured_var(&mut self,\n                         closure_id: ast::NodeId,\n                         closure_span: Span,\n-                        upvar_def: Def)\n+                        upvar: &hir::Freevar)\n                         -> mc::McResult<mc::cmt<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let var_node_id = self.tcx().hir.as_local_node_id(upvar_def.def_id()).unwrap();\n-        let var_hir_id = self.tcx().hir.node_to_hir_id(var_node_id);\n+        let var_hir_id = self.tcx().hir.node_to_hir_id(upvar.var_id());\n         let var_ty = self.mc.node_ty(var_hir_id)?;\n-        self.mc.cat_def(closure_id, closure_span, var_ty, upvar_def)\n+        self.mc.cat_def(closure_id, closure_span, var_ty, upvar.def)\n     }\n }\n "}, {"sha": "80beaaed051dbff558f9cef84d70159ae3ad2205", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -429,8 +429,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         let mut call_caps = Vec::new();\n         ir.tcx.with_freevars(expr.id, |freevars| {\n             for fv in freevars {\n-                if let Def::Local(def_id) = fv.def {\n-                    let rv = ir.tcx.hir.as_local_node_id(def_id).unwrap();\n+                if let Def::Local(rv) = fv.def {\n                     let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n                     call_caps.push(CaptureInfo {ln: fv_ln,\n                                                 var_nid: rv});\n@@ -1238,8 +1237,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn access_path(&mut self, id: NodeId, path: &hir::Path, succ: LiveNode, acc: u32)\n                    -> LiveNode {\n         match path.def {\n-          Def::Local(def_id) => {\n-            let nid = self.ir.tcx.hir.as_local_node_id(def_id).unwrap();\n+          Def::Local(nid) => {\n             self.access_var(id, nid, succ, acc, path.span)\n           }\n           _ => succ\n@@ -1414,12 +1412,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_lvalue(&mut self, expr: &'tcx Expr) {\n         match expr.node {\n             hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {\n-                if let Def::Local(def_id) = path.def {\n+                if let Def::Local(nid) = path.def {\n                     // Assignment to an immutable variable or argument: only legal\n                     // if there is no later assignment. If this local is actually\n                     // mutable, then check for a reassignment to flag the mutability\n                     // as being used.\n-                    let nid = self.ir.tcx.hir.as_local_node_id(def_id).unwrap();\n                     let ln = self.live_node(expr.id, expr.span);\n                     let var = self.variable(nid, expr.span);\n                     self.warn_about_dead_assign(expr.span, expr.id, ln, var);"}, {"sha": "8bf942c1ae34f0ae31497c4ac57fd235bcee638e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -670,13 +670,11 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n               }))\n           }\n \n-          Def::Upvar(def_id, _, fn_node_id) => {\n-              let var_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+          Def::Upvar(var_id, _, fn_node_id) => {\n               self.cat_upvar(id, span, var_id, fn_node_id)\n           }\n \n-          Def::Local(def_id) => {\n-            let vid = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+          Def::Local(vid) => {\n             Ok(Rc::new(cmt_ {\n                 id,\n                 span,\n@@ -736,13 +734,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         };\n \n         let closure_expr_def_index = self.tcx.hir.local_def_id(fn_node_id).index;\n-        let var_def_index = self.tcx.hir.local_def_id(var_id).index;\n-\n+        let var_hir_id = self.tcx.hir.node_to_hir_id(var_id);\n         let upvar_id = ty::UpvarId {\n-            var_id: var_def_index,\n+            var_id: var_hir_id,\n             closure_expr_id: closure_expr_def_index\n         };\n-        let var_hir_id = self.tcx.hir.node_to_hir_id(var_id);\n+\n         let var_ty = self.node_ty(var_hir_id)?;\n \n         // Mutability of original variable itself\n@@ -1441,7 +1438,7 @@ impl<'tcx> fmt::Debug for Categorization<'tcx> {\n             Categorization::StaticItem => write!(f, \"static\"),\n             Categorization::Rvalue(r) => { write!(f, \"rvalue({:?})\", r) }\n             Categorization::Local(id) => {\n-               let name = ty::tls::with(|tcx| tcx.local_var_name_str(id));\n+               let name = ty::tls::with(|tcx| tcx.hir.name(id));\n                write!(f, \"local({})\", name)\n             }\n             Categorization::Upvar(upvar) => {"}, {"sha": "d3e34c851f3d644aa963e9c0d35d499ce97ead1f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -115,28 +115,34 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n             _ => None\n         };\n \n-        if let Some(def) = def {\n-            let def_id = def.def_id();\n-            if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                if self.def_id_represents_local_inlined_item(def_id) {\n-                    self.worklist.push(node_id);\n-                } else {\n-                    match def {\n-                        // If this path leads to a constant, then we need to\n-                        // recurse into the constant to continue finding\n-                        // items that are reachable.\n-                        Def::Const(..) | Def::AssociatedConst(..) => {\n-                            self.worklist.push(node_id);\n-                        }\n+        match def {\n+            Some(Def::Local(node_id)) | Some(Def::Upvar(node_id, ..)) => {\n+                self.reachable_symbols.insert(node_id);\n+            }\n+            Some(def) => {\n+                let def_id = def.def_id();\n+                if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n+                    if self.def_id_represents_local_inlined_item(def_id) {\n+                        self.worklist.push(node_id);\n+                    } else {\n+                        match def {\n+                            // If this path leads to a constant, then we need to\n+                            // recurse into the constant to continue finding\n+                            // items that are reachable.\n+                            Def::Const(..) | Def::AssociatedConst(..) => {\n+                                self.worklist.push(node_id);\n+                            }\n \n-                        // If this wasn't a static, then the destination is\n-                        // surely reachable.\n-                        _ => {\n-                            self.reachable_symbols.insert(node_id);\n+                            // If this wasn't a static, then the destination is\n+                            // surely reachable.\n+                            _ => {\n+                                self.reachable_symbols.insert(node_id);\n+                            }\n                         }\n                     }\n                 }\n             }\n+            _ => {}\n         }\n \n         intravisit::walk_expr(self, expr)"}, {"sha": "1cf96a4c56db587a35402c5740553d04ce14af56", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -666,6 +666,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n \n     fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n         match path.def {\n+            Def::Local(..) | Def::Upvar(..) |\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n             _ => self.tcx.check_stability(path.def.def_id(), id, path.span)\n         }"}, {"sha": "e63162c68c0f10708369c0727b11ebae28a64eb2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -1416,10 +1416,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             tcx.with_freevars(node_id, |freevars| {\n                                 for (freevar, lv) in freevars.iter().zip(lvs) {\n-                                    let def_id = freevar.def.def_id();\n-                                    let var_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-                                    let var_name = tcx.local_var_name_str(var_id);\n-                                    struct_fmt.field(&var_name, lv);\n+                                    let var_name = tcx.hir.name(freevar.var_id());\n+                                    struct_fmt.field(&var_name.as_str(), lv);\n                                 }\n                             });\n \n@@ -1436,10 +1434,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             tcx.with_freevars(node_id, |freevars| {\n                                 for (freevar, lv) in freevars.iter().zip(lvs) {\n-                                    let def_id = freevar.def.def_id();\n-                                    let var_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-                                    let var_name = tcx.local_var_name_str(var_id);\n-                                    struct_fmt.field(&var_name, lv);\n+                                    let var_name = tcx.hir.name(freevar.var_id());\n+                                    struct_fmt.field(&var_name.as_str(), lv);\n                                 }\n                                 struct_fmt.field(\"$state\", &lvs[freevars.len()]);\n                                 for i in (freevars.len() + 1)..lvs.len() {"}, {"sha": "2a0dc455f470fc8c1727dd733f1be8605350fd6a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -718,15 +718,16 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n                 let local_id_root =\n                     local_id_root.expect(\"trying to hash invalid TypeckTables\");\n \n-                let var_def_id = DefId {\n+                let var_owner_def_id = DefId {\n                     krate: local_id_root.krate,\n-                    index: var_id,\n+                    index: var_id.owner,\n                 };\n                 let closure_def_id = DefId {\n                     krate: local_id_root.krate,\n                     index: closure_expr_id,\n                 };\n-                (hcx.def_path_hash(var_def_id), hcx.def_path_hash(closure_def_id))\n+                ((hcx.def_path_hash(var_owner_def_id), var_id.local_id),\n+                 hcx.def_path_hash(closure_def_id))\n             });\n \n             ich::hash_stable_itemlocalmap(hcx, hasher, closure_tys);"}, {"sha": "da64c73f8d078bacaff237fcf597ecf8c96b3252", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -195,7 +195,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::Initializer |\n             data @ DefPathData::MacroDef(..) |\n             data @ DefPathData::ClosureExpr |\n-            data @ DefPathData::Binding(..) |\n             data @ DefPathData::ImplTrait |\n             data @ DefPathData::Typeof |\n             data @ DefPathData::GlobalMetaData(..) => {"}, {"sha": "8b7ae79f151cc0d869fe109f398686775224eeb4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -575,7 +575,7 @@ impl<T> Slice<T> {\n /// by the upvar) and the id of the closure expression.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UpvarId {\n-    pub var_id: DefIndex,\n+    pub var_id: hir::HirId,\n     pub closure_expr_id: DefIndex,\n }\n \n@@ -1979,25 +1979,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn local_var_name_str(self, id: NodeId) -> InternedString {\n-        match self.hir.find(id) {\n-            Some(hir_map::NodeBinding(pat)) => {\n-                match pat.node {\n-                    hir::PatKind::Binding(_, _, ref path1, _) => path1.node.as_str(),\n-                    _ => {\n-                        bug!(\"Variable id {} maps to {:?}, not local\", id, pat);\n-                    },\n-                }\n-            },\n-            r => bug!(\"Variable id {} maps to {:?}, not local\", id, r),\n-        }\n-    }\n-\n-    pub fn local_var_name_str_def_index(self, def_index: DefIndex) -> InternedString {\n-        let node_id = self.hir.as_local_node_id(DefId::local(def_index)).unwrap();\n-        self.local_var_name_str(node_id)\n-    }\n-\n     pub fn expr_is_lval(self, expr: &hir::Expr) -> bool {\n          match expr.node {\n             hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {"}, {"sha": "9cc978a057bf69b5298ee60039519e2d9f8a4c62", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -827,12 +827,10 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     let mut sep = \" \";\n                     tcx.with_freevars(node_id, |freevars| {\n                         for (freevar, upvar_ty) in freevars.iter().zip(upvar_tys) {\n-                            let def_id = freevar.def.def_id();\n-                            let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n                             write!(f,\n                                         \"{}{}:{}\",\n                                         sep,\n-                                        tcx.local_var_name_str(node_id),\n+                                        tcx.hir.name(freevar.var_id()),\n                                         upvar_ty)?;\n                             sep = \", \";\n                         }\n@@ -866,12 +864,10 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     let mut sep = \" \";\n                     tcx.with_freevars(node_id, |freevars| {\n                         for (freevar, upvar_ty) in freevars.iter().zip(upvar_tys) {\n-                            let def_id = freevar.def.def_id();\n-                            let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n                             write!(f,\n                                         \"{}{}:{}\",\n                                         sep,\n-                                        tcx.local_var_name_str(node_id),\n+                                        tcx.hir.name(freevar.var_id()),\n                                         upvar_ty)?;\n                             sep = \", \";\n                         }\n@@ -906,7 +902,7 @@ impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n                self.var_id,\n-               ty::tls::with(|tcx| tcx.local_var_name_str_def_index(self.var_id)),\n+               ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_id))),\n                self.closure_expr_id)\n     }\n }"}, {"sha": "a58b62ba2a7092351bda2deb4daaf6b9caef79be", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -447,7 +447,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     None\n                 }\n                 LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n-                    let local_id = self.tcx().hir.def_index_to_node_id(var_id);\n+                    let local_id = self.tcx().hir.hir_to_node_id(var_id);\n                     self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n                     None\n                 }"}, {"sha": "de3f6f083256d8580dd0abb9e89f0b5e9366c8ad", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -93,7 +93,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n             }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            let var_node_id = bccx.tcx.hir.def_index_to_node_id(upvar_id.var_id);\n+            let var_node_id = bccx.tcx.hir.hir_to_node_id(upvar_id.var_id);\n             err.span_label(bccx.tcx.hir.span(var_node_id),\n                            \"captured outer variable\");\n         }"}, {"sha": "6527ac0e927213feb66bf36b7737980c9b3aef6e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -1311,10 +1311,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                       out: &mut String) {\n         match loan_path.kind {\n             LpUpvar(ty::UpvarId { var_id: id, closure_expr_id: _ }) => {\n-                out.push_str(&self.tcx.local_var_name_str_def_index(id));\n+                out.push_str(&self.tcx.hir.name(self.tcx.hir.hir_to_node_id(id)).as_str());\n             }\n             LpVar(id) => {\n-                out.push_str(&self.tcx.local_var_name_str(id));\n+                out.push_str(&self.tcx.hir.name(id).as_str());\n             }\n \n             LpDowncast(ref lp_base, variant_def_id) => {\n@@ -1439,7 +1439,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n \n             LpUpvar(ty::UpvarId{ var_id, closure_expr_id }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir.def_index_to_node_id(var_id);\n+                    let var_node_id = tcx.hir.hir_to_node_id(var_id);\n                     tcx.hir.node_to_string(var_node_id)\n                 });\n                 write!(f, \"$({} captured by id={:?})\", s, closure_expr_id)\n@@ -1474,7 +1474,7 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n \n             LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir.def_index_to_node_id(var_id);\n+                    let var_node_id = tcx.hir.hir_to_node_id(var_id);\n                     tcx.hir.node_to_string(var_node_id)\n                 });\n                 write!(f, \"$({} captured by closure)\", s)"}, {"sha": "c71c121ca50c3d2661e0487f755cccb7697dccba", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -22,7 +22,7 @@ use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::{Substs, Subst};\n use rustc::util::common::ErrorReported;\n-use rustc::util::nodemap::DefIdMap;\n+use rustc::util::nodemap::NodeMap;\n \n use syntax::abi::Abi;\n use syntax::ast;\n@@ -88,7 +88,7 @@ pub struct ConstContext<'a, 'tcx: 'a> {\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     substs: &'tcx Substs<'tcx>,\n-    fn_args: Option<DefIdMap<ConstVal<'tcx>>>\n+    fn_args: Option<NodeMap<ConstVal<'tcx>>>\n }\n \n impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n@@ -302,9 +302,9 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n               Def::StructCtor(_, CtorKind::Fn) => {\n                   signal!(e, UnimplementedConstVal(\"tuple struct constructors\"))\n               }\n-              Def::Local(def_id) => {\n-                  debug!(\"Def::Local({:?}): {:?}\", def_id, cx.fn_args);\n-                  if let Some(val) = cx.fn_args.as_ref().and_then(|args| args.get(&def_id)) {\n+              Def::Local(id) => {\n+                  debug!(\"Def::Local({:?}): {:?}\", id, cx.fn_args);\n+                  if let Some(val) = cx.fn_args.as_ref().and_then(|args| args.get(&id)) {\n                       val.clone()\n                   } else {\n                       signal!(e, NonConstPath);\n@@ -360,18 +360,18 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n             }\n           };\n \n-          let arg_defs = body.arguments.iter().map(|arg| match arg.pat.node {\n-               hir::PatKind::Binding(_, def_id, _, _) => Some(def_id),\n+          let arg_ids = body.arguments.iter().map(|arg| match arg.pat.node {\n+               hir::PatKind::Binding(_, canonical_id, _, _) => Some(canonical_id),\n                _ => None\n            }).collect::<Vec<_>>();\n-          assert_eq!(arg_defs.len(), args.len());\n+          assert_eq!(arg_ids.len(), args.len());\n \n-          let mut call_args = DefIdMap();\n-          for (arg, arg_expr) in arg_defs.into_iter().zip(args.iter()) {\n+          let mut call_args = NodeMap();\n+          for (arg, arg_expr) in arg_ids.into_iter().zip(args.iter()) {\n               let arg_val = cx.eval(arg_expr)?;\n               debug!(\"const call arg: {:?}\", arg);\n-              if let Some(def_id) = arg {\n-                assert!(call_args.insert(def_id, arg_val).is_none());\n+              if let Some(id) = arg {\n+                assert!(call_args.insert(id, arg_val).is_none());\n               }\n           }\n           debug!(\"const call({:?})\", call_args);"}, {"sha": "692778f94e75895f102fb3ae787bf3087788419c", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -374,8 +374,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            PatKind::Binding(_, def_id, ref ident, ref sub) => {\n-                let id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+            PatKind::Binding(_, id, ref ident, ref sub) => {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n                 let region = match var_ty.sty {\n                     ty::TyRef(r, _) => Some(r),"}, {"sha": "75dfaf5ed9be3f71e7bf57c925b5e5a4acd4fbe5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -913,7 +913,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                     } else {\n                         return false;\n                     };\n-                    def.def_id() == cx.tcx.hir.local_def_id(fn_id)\n+                    match def {\n+                        Def::Local(..) | Def::Upvar(..) => false,\n+                        _ => def.def_id() == cx.tcx.hir.local_def_id(fn_id)\n+                    }\n                 }\n                 _ => false,\n             }"}, {"sha": "a245411002f8a0b81cd4ce45a556ac484f320b4e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -384,11 +384,11 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     // Gather the upvars of a closure, if any.\n     let upvar_decls: Vec<_> = tcx.with_freevars(fn_id, |freevars| {\n         freevars.iter().map(|fv| {\n-            let var_def_id = fv.def.def_id();\n-            let var_node_id = tcx.hir.as_local_node_id(var_def_id).unwrap();\n+            let var_id = fv.var_id();\n+            let var_hir_id = tcx.hir.node_to_hir_id(var_id);\n             let closure_expr_id = tcx.hir.local_def_id(fn_id).index;\n             let capture = hir.tables().upvar_capture(ty::UpvarId {\n-                var_id: var_def_id.index,\n+                var_id: var_hir_id,\n                 closure_expr_id,\n             });\n             let by_ref = match capture {\n@@ -399,7 +399,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 debug_name: keywords::Invalid.name(),\n                 by_ref,\n             };\n-            if let Some(hir::map::NodeBinding(pat)) = tcx.hir.find(var_node_id) {\n+            if let Some(hir::map::NodeBinding(pat)) = tcx.hir.find(var_id) {\n                 if let hir::PatKind::Binding(_, _, ref ident, _) = pat.node {\n                     decl.debug_name = ident.node;\n                 }"}, {"sha": "9de5262cd888cddaf30b14318f9e698ddd0611b7", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -680,19 +680,15 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n     match def {\n-        Def::Local(def_id) => {\n-            let node_id = cx.tcx.hir.as_local_node_id(def_id).unwrap();\n-            ExprKind::VarRef { id: node_id }\n-        }\n+        Def::Local(id) => ExprKind::VarRef { id },\n \n-        Def::Upvar(var_def_id, index, closure_expr_id) => {\n-            let id_var = cx.tcx.hir.as_local_node_id(var_def_id).unwrap();\n+        Def::Upvar(var_id, index, closure_expr_id) => {\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\",\n-                   id_var,\n+                   var_id,\n                    index,\n                    closure_expr_id);\n-            let var_ty = cx.tables()\n-                           .node_id_to_type(cx.tcx.hir.node_to_hir_id(id_var));\n+            let var_hir_id = cx.tcx.hir.node_to_hir_id(var_id);\n+            let var_ty = cx.tables().node_id_to_type(var_hir_id);\n \n             // FIXME free regions in closures are not right\n             let closure_ty = cx.tables()\n@@ -778,7 +774,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // ...but the upvar might be an `&T` or `&mut T` capture, at which\n             // point we need an implicit deref\n             let upvar_id = ty::UpvarId {\n-                var_id: var_def_id.index,\n+                var_id: var_hir_id,\n                 closure_expr_id: closure_def_id.index,\n             };\n             match cx.tables().upvar_capture(upvar_id) {\n@@ -890,16 +886,14 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    freevar: &hir::Freevar,\n                                    freevar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n-    let var_def_id = freevar.def.def_id();\n-    let var_node_id = cx.tcx.hir.as_local_node_id(var_def_id).unwrap();\n+    let var_hir_id = cx.tcx.hir.node_to_hir_id(freevar.var_id());\n     let upvar_id = ty::UpvarId {\n-        var_id: var_def_id.index,\n+        var_id: var_hir_id,\n         closure_expr_id: cx.tcx.hir.local_def_id(closure_expr.id).index,\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n-    let var_ty = cx.tables()\n-                   .node_id_to_type(cx.tcx.hir.node_to_hir_id(var_node_id));\n+    let var_ty = cx.tables().node_id_to_type(var_hir_id);\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,"}, {"sha": "bc1d900a984dd78cf8f0ab079365933ae0dda788", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -2291,7 +2291,7 @@ impl<'a> Resolver<'a> {\n         // must not add it if it's in the bindings map\n         // because that breaks the assumptions later\n         // passes make about or-patterns.)\n-        let mut def = Def::Local(self.definitions.local_def_id(pat_id));\n+        let mut def = Def::Local(pat_id);\n         match bindings.get(&ident.node).cloned() {\n             Some(id) if id == outer_pat_id => {\n                 // `Variant(a, a)`, error\n@@ -2946,7 +2946,7 @@ impl<'a> Resolver<'a> {\n             Def::Upvar(..) => {\n                 span_bug!(span, \"unexpected {:?} in bindings\", def)\n             }\n-            Def::Local(def_id) => {\n+            Def::Local(node_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n@@ -2955,20 +2955,19 @@ impl<'a> Resolver<'a> {\n                         }\n                         ClosureRibKind(function_id) => {\n                             let prev_def = def;\n-                            let node_id = self.definitions.as_local_node_id(def_id).unwrap();\n \n                             let seen = self.freevars_seen\n                                            .entry(function_id)\n                                            .or_insert_with(|| NodeMap());\n                             if let Some(&index) = seen.get(&node_id) {\n-                                def = Def::Upvar(def_id, index, function_id);\n+                                def = Def::Upvar(node_id, index, function_id);\n                                 continue;\n                             }\n                             let vec = self.freevars\n                                           .entry(function_id)\n                                           .or_insert_with(|| vec![]);\n                             let depth = vec.len();\n-                            def = Def::Upvar(def_id, depth, function_id);\n+                            def = Def::Upvar(node_id, depth, function_id);\n \n                             if record_used {\n                                 vec.push(Freevar {\n@@ -3043,7 +3042,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         // Fields are generally expected in the same contexts as locals.\n-        if filter_fn(Def::Local(DefId::local(CRATE_DEF_INDEX))) {\n+        if filter_fn(Def::Local(ast::DUMMY_NODE_ID)) {\n             if let Some(node_id) = self.current_self_type.as_ref().and_then(extract_node_id) {\n                 // Look for a field with the same name in the current self_type.\n                 if let Some(resolution) = self.def_map.get(&node_id) {"}, {"sha": "3e730cf836523ac4291a5eabd5ff3c1fbe977335", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -1432,8 +1432,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n         // process collected paths\n         for &(id, ref p, immut) in &collector.collected_paths {\n             match self.save_ctxt.get_path_def(id) {\n-                HirDef::Local(def_id) => {\n-                    let id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+                HirDef::Local(id) => {\n                     let mut value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(p.span).to_string()\n                     } else {"}, {"sha": "1c6007966afa3a5614c4336a7428e2a69eb1d856", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -38,7 +38,7 @@ mod sig;\n use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeItem};\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{LOCAL_CRATE, DefId};\n use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n@@ -586,9 +586,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 self.tables.qpath_def(qpath, hir_id)\n             }\n \n-            Node::NodeBinding(&hir::Pat { node: hir::PatKind::Binding(_, def_id, ..), .. }) => {\n-                HirDef::Local(def_id)\n-            }\n+            Node::NodeBinding(&hir::Pat {\n+                node: hir::PatKind::Binding(_, canonical_id, ..), ..\n+            }) => HirDef::Local(canonical_id),\n \n             Node::NodeTy(ty) => {\n                 if let hir::Ty { node: hir::TyPath(ref qpath), .. } = *ty {\n@@ -616,8 +616,15 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let sub_span = self.span_utils.span_for_last_ident(path.span);\n         filter!(self.span_utils, sub_span, path.span, None);\n         match def {\n-            HirDef::Upvar(..) |\n-            HirDef::Local(..) |\n+            HirDef::Upvar(id, ..) |\n+            HirDef::Local(id) => {\n+                let span = self.span_from_span(sub_span.unwrap());\n+                Some(Ref {\n+                    kind: RefKind::Variable,\n+                    span,\n+                    ref_id: id_from_node_id(id, self),\n+                })\n+            }\n             HirDef::Static(..) |\n             HirDef::Const(..) |\n             HirDef::AssociatedConst(..) |\n@@ -1013,7 +1020,15 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n \n fn id_from_node_id(id: NodeId, scx: &SaveContext) -> rls_data::Id {\n     let def_id = scx.tcx.hir.opt_local_def_id(id);\n-    def_id.map(|id| id_from_def_id(id)).unwrap_or_else(null_id)\n+    def_id.map(|id| id_from_def_id(id)).unwrap_or_else(|| {\n+        // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n+        // out of the maximum u32 value. This will work unless you have *billions*\n+        // of definitions in a single crate (very unlikely to actually happen).\n+        rls_data::Id {\n+            krate: LOCAL_CRATE.as_u32(),\n+            index: !id.as_u32(),\n+        }\n+    })\n }\n \n fn null_id() -> rls_data::Id {"}, {"sha": "cc84f73a42c808b567b28c0a2265395e941f0e11", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.demand_eqtype(pat.span, expected, rhs_ty);\n                 common_type\n             }\n-            PatKind::Binding(ba, def_id, _, ref sub) => {\n+            PatKind::Binding(ba, var_id, _, ref sub) => {\n                 // Note the binding mode in the typeck tables. For now, what we store is always\n                 // identical to what could be scraped from the HIR, but this will change with\n                 // default binding modes (#42640).\n@@ -149,7 +149,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 // if there are multiple arms, make sure they all agree on\n                 // what the type of the binding `x` ought to be\n-                let var_id = tcx.hir.as_local_node_id(def_id).unwrap();\n                 if var_id != pat.id {\n                     let vt = self.local_ty(pat.span, var_id);\n                     self.demand_eqtype(pat.span, vt, typ);"}, {"sha": "7461df8bda509b1d66ed57cfc68ce0065ccb983f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -227,10 +227,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     } else {\n                         Def::Err\n                     };\n-                    if def != Def::Err {\n-                        if let Some(span) = self.tcx.hir.span_if_local(def.def_id()) {\n-                            err.span_note(span, \"defined here\");\n+                    let def_span = match def {\n+                        Def::Err => None,\n+                        Def::Local(id) | Def::Upvar(id, ..) => {\n+                            Some(self.tcx.hir.span(id))\n                         }\n+                        _ => self.tcx.hir.span_if_local(def.def_id())\n+                    };\n+                    if let Some(span) = def_span {\n+                        err.span_note(span, \"defined here\");\n                     }\n                 }\n "}, {"sha": "19879ff8b150f0e8a2c851db43d920a43da983eb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -4615,8 +4615,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         AstConv::prohibit_type_params(self, &segments[..segments.len() - poly_segments]);\n \n         match def {\n-            Def::Local(def_id) | Def::Upvar(def_id, ..) => {\n-                let nid = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+            Def::Local(nid) | Def::Upvar(nid, ..) => {\n                 let ty = self.local_ty(span, nid);\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(self.tcx.hir.node_to_hir_id(node_id), ty);"}, {"sha": "acdd58f4ecfe43c92d640b92800653e38ae56b24", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -126,9 +126,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.tcx.with_freevars(closure_node_id, |freevars| {\n             for freevar in freevars {\n-                let var_def_id = freevar.def.def_id();\n                 let upvar_id = ty::UpvarId {\n-                    var_id: var_def_id.index,\n+                    var_id: self.tcx.hir.node_to_hir_id(freevar.var_id()),\n                     closure_expr_id: closure_def_id.index,\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n@@ -236,11 +235,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         tcx.with_freevars(closure_id, |freevars| {\n             freevars.iter().map(|freevar| {\n-                let var_def_id = freevar.def.def_id();\n-                let var_node_id = tcx.hir.as_local_node_id(var_def_id).unwrap();\n-                let freevar_ty = self.node_ty(tcx.hir.node_to_hir_id(var_node_id));\n+                let var_node_id = freevar.var_id();\n+                let var_hir_id = tcx.hir.node_to_hir_id(var_node_id);\n+                let freevar_ty = self.node_ty(var_hir_id);\n                 let upvar_id = ty::UpvarId {\n-                    var_id: var_def_id.index,\n+                    var_id: var_hir_id,\n                     closure_expr_id: closure_def_index,\n                 };\n                 let capture = self.tables.borrow().upvar_capture(upvar_id);\n@@ -587,7 +586,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: ty::TyCtxt, var_def_index: DefIndex) -> ast::Name {\n-    let var_node_id = tcx.hir.def_index_to_node_id(var_def_index);\n+fn var_name(tcx: ty::TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n+    let var_node_id = tcx.hir.hir_to_node_id(var_hir_id);\n     tcx.hir.name(var_node_id)\n }"}, {"sha": "842bc8374b6fb4a40adae0afa45c5cc25ebc7186", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -57,7 +57,7 @@ fn main() {\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "571ed4254023a63f759e1509aeb47ca5a7b1c737", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -48,8 +48,8 @@ fn main() {\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -74,8 +74,8 @@ fn main() {\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}, {"sha": "4bebc74ae460bfcd6eb011c0e871984e2bf33ec6", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d29f0e8fdf08a11ef6723e67ea54e29728a457a/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=3d29f0e8fdf08a11ef6723e67ea54e29728a457a", "patch": "@@ -45,7 +45,7 @@ fn main() {\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:12) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:12) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}]}