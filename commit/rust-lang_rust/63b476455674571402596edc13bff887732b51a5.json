{"sha": "63b476455674571402596edc13bff887732b51a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjQ3NjQ1NTY3NDU3MTQwMjU5NmVkYzEzYmZmODg3NzMyYjUxYTU=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-16T12:06:41Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-16T12:06:41Z"}, "message": "refactor ExprKind to use new PointerCast enum", "tree": {"sha": "144e8b5fbf9fb23ed29bf46856f76fb24f5a10ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/144e8b5fbf9fb23ed29bf46856f76fb24f5a10ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b476455674571402596edc13bff887732b51a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b476455674571402596edc13bff887732b51a5", "html_url": "https://github.com/rust-lang/rust/commit/63b476455674571402596edc13bff887732b51a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b476455674571402596edc13bff887732b51a5/comments", "author": null, "committer": null, "parents": [{"sha": "6321a323cc4af032b7e34c1b09a71eefdb369ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6321a323cc4af032b7e34c1b09a71eefdb369ac4", "html_url": "https://github.com/rust-lang/rust/commit/6321a323cc4af032b7e34c1b09a71eefdb369ac4"}], "stats": {"total": 120, "additions": 21, "deletions": 99}, "files": [{"sha": "9aaff33e933391960fddcd76fadc353568747dfd", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -7,7 +7,6 @@ use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid};\n-use crate::ty::adjustment::{PointerCast};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -327,6 +326,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::ty::IntVarValue,\n     crate::ty::ParamConst,\n     crate::ty::ParamTy,\n+    crate::ty::adjustment::PointerCast,\n     crate::ty::RegionVid,\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n@@ -627,16 +627,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n         match *self {\n             ty::adjustment::Adjust::NeverToAny =>\n                 Some(ty::adjustment::Adjust::NeverToAny),\n-            ty::adjustment::Adjust::Pointer(PointerCast::ReifyFnPointer) =>\n-                Some(ty::adjustment::Adjust::Pointer(PointerCast::ReifyFnPointer)),\n-            ty::adjustment::Adjust::Pointer(PointerCast::UnsafeFnPointer) =>\n-                Some(ty::adjustment::Adjust::Pointer(PointerCast::UnsafeFnPointer)),\n-            ty::adjustment::Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety)) =>\n-                Some(ty::adjustment::Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))),\n-            ty::adjustment::Adjust::Pointer(PointerCast::MutToConstPointer) =>\n-                Some(ty::adjustment::Adjust::Pointer(PointerCast::MutToConstPointer)),\n-            ty::adjustment::Adjust::Pointer(PointerCast::Unsize) =>\n-                Some(ty::adjustment::Adjust::Pointer(PointerCast::Unsize)),\n+            ty::adjustment::Adjust::Pointer(ptr) =>\n+                Some(ty::adjustment::Adjust::Pointer(ptr)),\n             ty::adjustment::Adjust::Deref(ref overloaded) => {\n                 tcx.lift(overloaded).map(ty::adjustment::Adjust::Deref)\n             }\n@@ -1192,16 +1184,6 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::PointerCast {\n-        (ty::adjustment::PointerCast::ReifyFnPointer),\n-        (ty::adjustment::PointerCast::UnsafeFnPointer),\n-        (ty::adjustment::PointerCast::ClosureFnPointer)(a),\n-        (ty::adjustment::PointerCast::MutToConstPointer),\n-        (ty::adjustment::PointerCast::Unsize),\n-    }\n-}\n-\n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::OverloadedDeref<'tcx> {\n         region, mutbl,"}, {"sha": "b500060684f81fbcb7e395147858408b1bd4f3fc", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -193,11 +193,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n             | ExprKind::NeverToAny { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::If { .. }"}, {"sha": "b9fec22da63ca380ca46fb517da99ef63276156c", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -10,7 +10,6 @@ use rustc::middle::region;\n use rustc::mir::interpret::InterpError;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n-use rustc::ty::adjustment::{PointerCast};\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -155,35 +154,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Use(source))\n             }\n-            ExprKind::ReifyFnPointer { source } => {\n+            ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(\n-                    CastKind::Pointer(PointerCast::ReifyFnPointer), source, expr.ty)\n-                )\n-            }\n-            ExprKind::UnsafeFnPointer { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(\n-                    CastKind::Pointer(PointerCast::UnsafeFnPointer), source, expr.ty)\n-                )\n-            }\n-            ExprKind::ClosureFnPointer { source, unsafety } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(\n-                    CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)), source, expr.ty)\n-                )\n-            }\n-            ExprKind::MutToConstPointer { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(\n-                    CastKind::Pointer(PointerCast::MutToConstPointer), source, expr.ty)\n-                )\n-            }\n-            ExprKind::Unsize { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(\n-                    CastKind::Pointer(PointerCast::Unsize), source, expr.ty)\n-                )\n+                block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n             ExprKind::Array { fields } => {\n                 // (*) We would (maybe) be closer to codegen if we"}, {"sha": "52f1d0eca5e3c732f7b1e774fb247acee95338e0", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -59,11 +59,7 @@ impl Category {\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::Assign { .. }"}, {"sha": "8967572ea8f64b0aeca118d8c6db618dc9dfadec", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -380,11 +380,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::Array { .. }"}, {"sha": "28fedd9d25618bfe33b10bbc1c173896d9176143", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -75,21 +75,21 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     -> Expr<'tcx> {\n     let Expr { temp_lifetime, mut span, .. } = expr;\n     let kind = match adjustment.kind {\n-        Adjust::Pointer(PointerCast::ReifyFnPointer) => {\n-            ExprKind::ReifyFnPointer { source: expr.to_ref() }\n-        }\n-        Adjust::Pointer(PointerCast::UnsafeFnPointer) => {\n-            ExprKind::UnsafeFnPointer { source: expr.to_ref() }\n+        Adjust::Pointer(PointerCast::Unsize) => {\n+            if let ExprKind::Block { body } = expr.kind {\n+                if let Some(ref last_expr) = body.expr {\n+                    span = last_expr.span;\n+                    expr.span = span;\n+                }\n+            }\n+            ExprKind::Pointer { cast: PointerCast::Unsize, source: expr.to_ref() }\n         }\n-        Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n-            ExprKind::ClosureFnPointer { source: expr.to_ref(), unsafety }\n+        Adjust::Pointer(cast) => {\n+            ExprKind::Pointer { cast, source: expr.to_ref() }\n         }\n         Adjust::NeverToAny => {\n             ExprKind::NeverToAny { source: expr.to_ref() }\n         }\n-        Adjust::Pointer(PointerCast::MutToConstPointer) => {\n-            ExprKind::MutToConstPointer { source: expr.to_ref() }\n-        }\n         Adjust::Deref(None) => {\n             // Adjust the span from the block, to the last expression of the\n             // block. This is a better span when returning a mutable reference\n@@ -187,16 +187,6 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // since they get rid of a borrow implicitly.\n             ExprKind::Use { source: cast_expr.to_ref() }\n         }\n-        Adjust::Pointer(PointerCast::Unsize) => {\n-            // See the above comment for Adjust::Deref\n-            if let ExprKind::Block { body } = expr.kind {\n-                if let Some(ref last_expr) = body.expr {\n-                    span = last_expr.span;\n-                    expr.span = span;\n-                }\n-            }\n-            ExprKind::Unsize { source: expr.to_ref() }\n-        }\n     };\n \n     Expr {"}, {"sha": "2e53bee3f3d7ff2e30f4174a1119142d41a06da2", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b476455674571402596edc13bff887732b51a5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=63b476455674571402596edc13bff887732b51a5", "patch": "@@ -10,6 +10,7 @@ use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, UserType};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n use syntax_pos::Span;\n@@ -180,20 +181,8 @@ pub enum ExprKind<'tcx> {\n     NeverToAny {\n         source: ExprRef<'tcx>,\n     },\n-    ReifyFnPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    ClosureFnPointer {\n-        source: ExprRef<'tcx>,\n-        unsafety: hir::Unsafety,\n-    },\n-    UnsafeFnPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    MutToConstPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    Unsize {\n+    Pointer {\n+        cast: PointerCast,\n         source: ExprRef<'tcx>,\n     },\n     If {"}]}