{"sha": "783bea940b190e8e66c52157e740dc486aaa01ab", "node_id": "C_kwDOAAsO6NoAKDc4M2JlYTk0MGIxOTBlOGU2NmM1MjE1N2U3NDBkYzQ4NmFhYTAxYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-24T04:05:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-24T04:05:38Z"}, "message": "Rollup merge of #111870 - WaffleLapkin:just_\ud83c\udf1ftraits\ud83c\udf1f_query, r=compiler-errors\n\nRename `traits_in_crate` query to `traits`\n\n> NOTE: Not named just `traits` due to a naming conflict.\n\nThis can, in fact, be easily avoided.", "tree": {"sha": "dc243c03d16ffb4fbd5017347b1ecb93dda9357d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc243c03d16ffb4fbd5017347b1ecb93dda9357d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783bea940b190e8e66c52157e740dc486aaa01ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbY0SCRBK7hj4Ov3rIwAAihgIAJIoi9qfeeUX/ZBuWlJJa57l\n9RhQtiqafRAJCqpGfEA33jq6Eymkmv2+i7sq04pM+5drS5MtBRqQzb4KSSSlvzgW\n+ZWuhfOknmLFQZTV5qS2TiFIW74iDRTNDysIx3CDGsF0e6oRvpZ1G4qvYZKomgTn\npWezUb57/zo3DuD5wZQP+cpqdPFH0JF1ug5qL+u9dlQqnARhvijemzwwB8KP9QAP\nsNq3uPHkjBQfa7sVGvmTN4Ikr3tUXAKgxREEpJOYQo5R/7WTm9gB7pCCP2WIK0v+\n+ZU8JRZUXvx/75PszVGWuXGbvh9JFQr55lxFMWyFblnxHQrm+LXHzmy3LgsfJIk=\n=Jq7g\n-----END PGP SIGNATURE-----\n", "payload": "tree dc243c03d16ffb4fbd5017347b1ecb93dda9357d\nparent efea88ae08812f161396d8c00d16fc144e39ff6f\nparent cc1ec49a14656ad55988e059e49d808fa268a58d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684901138 +0200\ncommitter GitHub <noreply@github.com> 1684901138 +0200\n\nRollup merge of #111870 - WaffleLapkin:just_\ud83c\udf1ftraits\ud83c\udf1f_query, r=compiler-errors\n\nRename `traits_in_crate` query to `traits`\n\n> NOTE: Not named just `traits` due to a naming conflict.\n\nThis can, in fact, be easily avoided.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783bea940b190e8e66c52157e740dc486aaa01ab", "html_url": "https://github.com/rust-lang/rust/commit/783bea940b190e8e66c52157e740dc486aaa01ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783bea940b190e8e66c52157e740dc486aaa01ab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efea88ae08812f161396d8c00d16fc144e39ff6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/efea88ae08812f161396d8c00d16fc144e39ff6f", "html_url": "https://github.com/rust-lang/rust/commit/efea88ae08812f161396d8c00d16fc144e39ff6f"}, {"sha": "cc1ec49a14656ad55988e059e49d808fa268a58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ec49a14656ad55988e059e49d808fa268a58d", "html_url": "https://github.com/rust-lang/rust/commit/cc1ec49a14656ad55988e059e49d808fa268a58d"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "7425963d30ff811b7a93dd99a6e40cb694d71ba3", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=783bea940b190e8e66c52157e740dc486aaa01ab", "patch": "@@ -323,7 +323,7 @@ provide! { tcx, def_id, other, cdata,\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n-    traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    traits => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n     trait_impls_in_crate => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n     implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n     crate_incoherent_impls => { cdata.get_incoherent_impls(tcx, other) }"}, {"sha": "f067bca4b0b396846f1837c3da0014eefeabb7ec", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=783bea940b190e8e66c52157e740dc486aaa01ab", "patch": "@@ -1938,7 +1938,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_traits(&mut self) -> LazyArray<DefIndex> {\n         empty_proc_macro!(self);\n-        self.lazy_array(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n+        self.lazy_array(self.tcx.traits(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n@@ -2329,7 +2329,7 @@ pub fn provide(providers: &mut Providers) {\n                 .get(&def_id)\n                 .expect(\"no traits in scope for a doc link\")\n         },\n-        traits_in_crate: |tcx, LocalCrate| {\n+        traits: |tcx, LocalCrate| {\n             let mut traits = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Trait | DefKind::TraitAlias) {"}, {"sha": "1528be42f6a188251c9b8bb14e2e0b6cd6aae639", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=783bea940b190e8e66c52157e740dc486aaa01ab", "patch": "@@ -38,7 +38,10 @@ use crate::traits::query::{\n     OutlivesBound,\n };\n use crate::traits::specialization_graph;\n-use crate::traits::{self, ImplSource};\n+use crate::traits::{\n+    CanonicalChalkEnvironmentAndGoal, CodegenObligationError, EvaluationResult, ImplSource,\n+    ObjectSafetyViolation, ObligationCause, OverflowError, WellFormedLoc,\n+};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::ValidityRequirement;\n use crate::ty::subst::{GenericArg, SubstsRef};\n@@ -1273,7 +1276,7 @@ rustc_queries! {\n \n     query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-    ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n+    ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {\n         cache_on_disk_if { true }\n         desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n@@ -1294,7 +1297,7 @@ rustc_queries! {\n         desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(trait_id) }\n         cache_on_disk_if { true }\n     }\n-    query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n+    query object_safety_violations(trait_id: DefId) -> &'tcx [ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n     query check_is_object_safe(trait_id: DefId) -> bool {\n@@ -1838,8 +1841,7 @@ rustc_queries! {\n     }\n \n     /// A list of all traits in a crate, used by rustdoc and error reporting.\n-    /// NOTE: Not named just `traits` due to a naming conflict.\n-    query traits_in_crate(_: CrateNum) -> &'tcx [DefId] {\n+    query traits(_: CrateNum) -> &'tcx [DefId] {\n         desc { \"fetching all traits in a crate\" }\n         separate_provide_extern\n     }\n@@ -1953,12 +1955,12 @@ rustc_queries! {\n     /// `infcx.predicate_must_hold()` instead.\n     query evaluate_obligation(\n         goal: CanonicalPredicateGoal<'tcx>\n-    ) -> Result<traits::EvaluationResult, traits::OverflowError> {\n+    ) -> Result<EvaluationResult, OverflowError> {\n         desc { \"evaluating trait selection obligation `{}`\", goal.value.value }\n     }\n \n     query evaluate_goal(\n-        goal: traits::CanonicalChalkEnvironmentAndGoal<'tcx>\n+        goal: CanonicalChalkEnvironmentAndGoal<'tcx>\n     ) -> Result<\n         &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n         NoSolution\n@@ -2128,8 +2130,8 @@ rustc_queries! {\n     /// all of the cases that the normal `ty::Ty`-based wfcheck does. This is fine,\n     /// because the `ty::Ty`-based wfcheck is always run.\n     query diagnostic_hir_wf_check(\n-        key: (ty::Predicate<'tcx>, traits::WellFormedLoc)\n-    ) -> &'tcx Option<traits::ObligationCause<'tcx>> {\n+        key: (ty::Predicate<'tcx>, WellFormedLoc)\n+    ) -> &'tcx Option<ObligationCause<'tcx>> {\n         arena_cache\n         eval_always\n         no_hash"}, {"sha": "5393dba8c2e19657de9afb05fe80e523af80963b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783bea940b190e8e66c52157e740dc486aaa01ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=783bea940b190e8e66c52157e740dc486aaa01ab", "patch": "@@ -1199,7 +1199,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {\n         iter::once(LOCAL_CRATE)\n             .chain(self.crates(()).iter().copied())\n-            .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())\n+            .flat_map(move |cnum| self.traits(cnum).iter().copied())\n     }\n \n     #[inline]"}]}