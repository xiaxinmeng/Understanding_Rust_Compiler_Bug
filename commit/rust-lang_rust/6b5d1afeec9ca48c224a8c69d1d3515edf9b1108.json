{"sha": "6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNWQxYWZlZWM5Y2E0OGMyMjRhOGM2OWQxZDM1MTVlZGY5YjExMDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-05T22:42:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:32:52Z"}, "message": "librustc: Remove \"extern mod { ... }\" from librustc, librustdoc, and tests. rs=deexterning", "tree": {"sha": "e4b10d57101890e6e53ef529014920e079427751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b10d57101890e6e53ef529014920e079427751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "html_url": "https://github.com/rust-lang/rust/commit/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e44af2f2731ea59207aef456caa391ef230645", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e44af2f2731ea59207aef456caa391ef230645", "html_url": "https://github.com/rust-lang/rust/commit/87e44af2f2731ea59207aef456caa391ef230645"}], "stats": {"total": 2990, "additions": 1623, "deletions": 1367}, "files": [{"sha": "b59824969bb85d144e0604b16893086cc39b92e7", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -1139,8 +1139,8 @@ pub mod funcs {\n                 unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n                                -> size_t;\n \n-                // These are fine to execute on the Rust stack. They must be, in\n-                // fact, because LLVM generates calls to them!\n+                // These are fine to execute on the Rust stack. They must be,\n+                // in fact, because LLVM generates calls to them!\n                 #[rust_stack]\n                 #[inline(always)]\n                 unsafe fn memcpy(s: *c_void, ct: *c_void, n: size_t)"}, {"sha": "5c924b172fcee0cf25288dd16c681d1dfb72872a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -94,10 +94,12 @@ pub mod jit {\n     use core::ptr;\n     use core::str;\n \n-    #[nolink]\n-    #[abi = \"rust-intrinsic\"]\n-    pub extern mod rusti {\n-        pub fn morestack_addr() -> *();\n+    pub mod rusti {\n+        #[nolink]\n+        #[abi = \"rust-intrinsic\"]\n+        pub extern {\n+            pub fn morestack_addr() -> *();\n+        }\n     }\n \n     pub struct Closure {"}, {"sha": "cf5c0ffa19b7b93f36a898369afe8372db27460e", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -122,9 +122,13 @@ pub mod intrinsic {\n         fn visit_closure_ptr(&self, ck: uint) -> bool;\n     }\n \n-    #[abi = \"rust-intrinsic\"]\n-    pub extern mod rusti {\n-        pub fn get_tydesc<T>() -> *();\n-        pub fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor);\n+    pub mod rusti {\n+        use super::{TyDesc, TyVisitor};\n+\n+        #[abi = \"rust-intrinsic\"]\n+        pub extern {\n+            pub fn get_tydesc<T>() -> *();\n+            pub fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor);\n+        }\n     }\n }"}, {"sha": "f985ea03c715e794286b6ee0139598212439fc48", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1164, "deletions": 1003, "changes": 2167, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108"}, {"sha": "18696d6427b0f09606da183cbd9c034b04cae24a", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -135,15 +135,9 @@ fn should_extract_top_mod_attributes() {\n     assert doc.cratemod().desc() == Some(~\"test\");\n }\n \n-#[test]\n-fn should_extract_foreign_mod_attributes() {\n-    let doc = test::mk_doc(~\"#[doc = \\\"test\\\"] extern mod a { }\");\n-    assert doc.cratemod().nmods()[0].desc() == Some(~\"test\");\n-}\n-\n #[test]\n fn should_extract_foreign_fn_attributes() {\n-    let doc = test::mk_doc(~\"extern mod a { #[doc = \\\"test\\\"] fn a(); }\");\n+    let doc = test::mk_doc(~\"extern { #[doc = \\\"test\\\"] fn a(); }\");\n     assert doc.cratemod().nmods()[0].fns[0].desc() == Some(~\"test\");\n }\n "}, {"sha": "4e94c4cf68dae725d5834f4cc68c3fb448029d11", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -371,15 +371,9 @@ mod test {\n         assert doc.cratemod().mods()[0].mods()[1].name() == ~\"c\";\n     }\n \n-    #[test]\n-    pub fn extract_foreign_mods() {\n-        let doc = mk_doc(~\"extern mod a { }\");\n-        assert doc.cratemod().nmods()[0].name() == ~\"a\";\n-    }\n-\n     #[test]\n     pub fn extract_fns_from_foreign_mods() {\n-        let doc = mk_doc(~\"extern mod a { fn a(); }\");\n+        let doc = mk_doc(~\"extern { fn a(); }\");\n         assert doc.cratemod().nmods()[0].fns[0].name() == ~\"a\";\n     }\n "}, {"sha": "6e2f764de711344a3abb79b26dacc3cb9fd390bb", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -169,18 +169,6 @@ fn should_remove_mods_from_containing_mods() {\n     assert vec::is_empty(doc.cratemod().mods());\n }\n \n-#[test]\n-fn should_make_a_page_for_every_foreign_mod() {\n-    let doc = test::mk_doc(~\"extern mod a { }\");\n-    assert doc.pages.nmods()[0].name() == ~\"a\";\n-}\n-\n-#[test]\n-fn should_remove_foreign_mods_from_containing_mods() {\n-    let doc = test::mk_doc(~\"extern mod a { }\");\n-    assert vec::is_empty(doc.cratemod().nmods());\n-}\n-\n #[cfg(test)]\n mod test {\n     use astsrv;"}, {"sha": "4b41021beb7d1f5f730f5b4b91f7df8e8b95e06f", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -115,22 +115,3 @@ fn should_record_fn_paths() {\n     }\n }\n \n-#[test]\n-fn should_record_foreign_mod_paths() {\n-    let source = ~\"mod a { extern mod b { } }\";\n-    do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv.clone(), ~\"\");\n-        let doc = run(srv.clone(), doc);\n-        assert doc.cratemod().mods()[0].nmods()[0].path() == ~[~\"a\"];\n-    }\n-}\n-\n-#[test]\n-fn should_record_foreign_fn_paths() {\n-    let source = ~\"extern mod a { fn b(); }\";\n-    do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv.clone(), ~\"\");\n-        let doc = run(srv.clone(), doc);\n-        assert doc.cratemod().nmods()[0].fns[0].path() == ~[~\"a\"];\n-    }\n-}"}, {"sha": "0f58da547451b1c2e7ffe432455f72f910ab1a23", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -786,9 +786,11 @@ pub mod rustrt {\n         unsafe fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n                                     ++addr: *sockaddr_in6) -> libc::c_int;\n         unsafe fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n-                                          ++name: *sockaddr_in) -> libc::c_int;\n+                                          ++name: *sockaddr_in)\n+                                       -> libc::c_int;\n         unsafe fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n-                                           ++name: *sockaddr_in6) ->libc::c_int;\n+                                           ++name: *sockaddr_in6)\n+                                        -> libc::c_int;\n         unsafe fn rust_uv_listen(stream: *libc::c_void,\n                                  backlog: libc::c_int,\n                                  cb: *u8) -> libc::c_int;\n@@ -852,7 +854,8 @@ pub mod rustrt {\n                                               -> *libc::c_void;\n         unsafe fn rust_uv_set_data_for_uv_handle(handle: *libc::c_void,\n                                                  data: *libc::c_void);\n-        unsafe fn rust_uv_get_data_for_req(req: *libc::c_void) -> *libc::c_void;\n+        unsafe fn rust_uv_get_data_for_req(req: *libc::c_void)\n+                                        -> *libc::c_void;\n         unsafe fn rust_uv_set_data_for_req(req: *libc::c_void,\n                                            data: *libc::c_void);\n         unsafe fn rust_uv_get_base_from_buf(++buf: uv_buf_t) -> *u8;"}, {"sha": "d8c97218d6fedd01f2719e011035c25ee859c10e", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,23 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"rust-intrinsic\"]\n-pub extern mod rusti {\n-    fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n-    fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n-    fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+        fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+        fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n-    fn atomic_xchg(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    \n-    fn atomic_xadd(dst: &mut int, src: int) -> int;\n-    fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    \n-    fn atomic_xsub(dst: &mut int, src: int) -> int;\n-    fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+        fn atomic_xchg(dst: &mut int, src: int) -> int;\n+        fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n+        fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n+        \n+        fn atomic_xadd(dst: &mut int, src: int) -> int;\n+        fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n+        fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n+        \n+        fn atomic_xsub(dst: &mut int, src: int) -> int;\n+        fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n+        fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+    }\n }\n \n #[inline(always)]"}, {"sha": "d59057f01f2de7e5c24ec207c17eb4c2557f5563", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -13,9 +13,11 @@\n \n #[crate_type = \"lib\"];\n \n-pub extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+pub mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n pub fn fact(n: uint) -> uint {"}, {"sha": "1561ec51ede0e0a3aec843091052a9452395df02", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,6 +10,9 @@\n \n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n-pub extern mod rustrt {\n-    pub fn rust_get_argc() -> libc::c_int;\n+pub mod rustrt {\n+    pub extern {\n+        pub fn rust_get_argc() -> libc::c_int;\n+    }\n }\n+"}, {"sha": "63275a05598eb94ffa186408215552778bce7200", "filename": "src/test/auxiliary/issue_3882.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fissue_3882.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fauxiliary%2Fissue_3882.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3882.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -13,7 +13,9 @@ mod issue_3882 {\n         len: libc::size_t,\n     }\n     \n-    extern mod c {\n-        fn linenoiseAddCompletion(lc: *mut Completions);\n+    mod c {\n+        extern {\n+            fn linenoiseAddCompletion(lc: *mut Completions);\n+        }\n     }\n }"}, {"sha": "6ce9fce881a6a6d73a733b919a9bbaf3b9649094", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -20,9 +20,11 @@ use core::os;\n // because the the indirection through another dynamic linker\n // stub. Kind of shocking. Might be able to make it faster still with\n // an llvm intrinsic.\n-#[nolink]\n-extern mod libc {\n-    pub fn sqrt(n: float) -> float;\n+mod libc {\n+    #[nolink]\n+    pub extern {\n+        pub fn sqrt(n: float) -> float;\n+    }\n }\n \n fn main() {"}, {"sha": "65a4378a219fe0d51ede58b9c09b19dbafe05514", "filename": "src/test/compile-fail/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:empty #[link_name] not allowed; use #[nolink].\n \n #[link_name = \"\"]\n-extern mod foo {\n+extern {\n }"}, {"sha": "2b00f564f052908506ef4bb2977e8563eaa63161", "filename": "src/test/compile-fail/empty-linkname2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -13,5 +13,5 @@\n \n #[link_name = \"\"]\n #[nolink]\n-extern mod foo {\n+extern {\n }"}, {"sha": "9122abab713214a418b9718d9128525732ddbab1", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,9 +10,11 @@\n // except according to those terms.\n \n \n-#[abi = \"cdecl\"]\n-extern mod test {\n-    pub unsafe fn free();\n+mod test {\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub unsafe fn free();\n+    }\n }\n \n fn main() {"}, {"sha": "32fafe296466c135cacaa445ed587136bed9f020", "filename": "src/test/compile-fail/foreign-unsafe-fn.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,9 +10,11 @@\n // except according to those terms.\n \n \n-#[abi = \"cdecl\"]\n-extern mod test {\n-    pub unsafe fn free();\n+mod test {\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub unsafe fn free();\n+    }\n }\n \n fn main() {"}, {"sha": "77e6432f9969be9f95af8d7aa83020f96895d179", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -16,6 +16,6 @@ the compiler output. */\n \n #[link_args = \"aFdEfSeVEEE\"]\n #[nolink]\n-extern mod m1 {}\n+extern {}\n \n fn main() { }"}, {"sha": "1640e16c0fd8ee44562d9861f7e7343af9cdf612", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -18,10 +18,10 @@\n \n #[link_name= \"m\"]\n #[link_args=\"-foo\"]             // this could have been elided.\n-extern mod m1 {\n+extern {\n }\n \n #[link_name= \"m\"]\n #[link_args=\"-bar\"]             // this is the actual error trigger.\n-extern mod m2 {\n+extern {\n }"}, {"sha": "adec8dc6d0d9da7616d897b72f2e7ff86629f00d", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,9 +11,11 @@\n // error-pattern:found rust type\n #[deny(ctypes)];\n \n-#[nolink]\n-extern mod libc {\n-    pub fn malloc(size: int) -> *u8;\n+mod libc {\n+    #[nolink]\n+    pub extern {\n+        pub fn malloc(size: int) -> *u8;\n+    }\n }\n \n fn main() {"}, {"sha": "28d21bb94290453635d977283f71a154ee401d5b", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,9 +10,11 @@\n \n // compile-flags:-D ctypes\n // error-pattern:found rust type\n-#[nolink]\n-extern mod libc {\n-    pub fn malloc(size: int) -> *u8;\n+mod libc {\n+    #[nolink]\n+    extern {\n+        pub fn malloc(size: int) -> *u8;\n+    }\n }\n \n fn main() {"}, {"sha": "e5c2603c569148e224be7db09b04699eadcaca89", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -9,9 +9,11 @@\n // except according to those terms.\n \n //error-pattern:libc::c_int or libc::c_long should be used\n-extern mod xx {\n-    pub fn strlen(str: *u8) -> uint;\n-    pub fn foo(x: int, y: uint);\n+mod xx {\n+    pub extern {\n+        pub fn strlen(str: *u8) -> uint;\n+        pub fn foo(x: int, y: uint);\n+    }\n }\n \n fn main() {"}, {"sha": "ca8c6e8246fdb68be65b8a16c47be62795758d5b", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,9 +12,11 @@\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "d59fbae2f9f1410ceff9cbe23601c07266c67947", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -17,8 +17,10 @@\n \n extern mod std;\n \n-extern mod rustrt {\n-    pub fn rust_get_argc() -> libc::c_int;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_get_argc() -> libc::c_int;\n+    }\n }\n \n fn getbig_call_c_and_fail(i: int) {"}, {"sha": "e8866f7843082e7c652f7726e41a20bf5feda092", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -79,11 +79,13 @@ fn test_ptr() {\n     }\n }\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod test {\n-    pub fn rust_get_sched_id() -> libc::intptr_t;\n-    pub fn get_task_id() -> libc::intptr_t;\n+mod test {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {\n+        pub fn rust_get_sched_id() -> libc::intptr_t;\n+        pub fn get_task_id() -> libc::intptr_t;\n+    }\n }\n \n #[deriving_eq]"}, {"sha": "661aa7a90b1e831274744ff58c953632bae108e8", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    pub fn get_task_id() -> libc::intptr_t;\n+mod rustrt {\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub fn get_task_id() -> libc::intptr_t;\n+    }\n }\n \n pub fn main() {"}, {"sha": "a16e45a1cf4e11b0d53c43b66ffcce8f93f9b18e", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,11 +10,13 @@\n \n extern mod std;\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod libc {\n-    pub fn atol(x: *u8) -> int;\n-    pub fn atoll(x: *u8) -> i64;\n+mod libc {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {\n+        pub fn atol(x: *u8) -> int;\n+        pub fn atoll(x: *u8) -> i64;\n+    }\n }\n \n fn atol(s: ~str) -> int {"}, {"sha": "0e4c92085ed3be03a485a68b7d923f8a6fe2f5f4", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -19,17 +19,19 @@ const b: bool = false;\n \n const b: bool = true;\n \n-#[cfg(bogus)]\n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    // This symbol doesn't exist and would be a link error if this\n-    // module was translated\n-    pub fn bogus();\n+mod rustrt {\n+    #[cfg(bogus)]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        // This symbol doesn't exist and would be a link error if this\n+        // module was translated\n+        pub fn bogus();\n+    }\n+    \n+    #[abi = \"cdecl\"]\n+    pub extern {}\n }\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {}\n-\n #[cfg(bogus)]\n type t = int;\n \n@@ -106,21 +108,25 @@ fn test_in_fn_ctxt() {\n }\n \n mod test_foreign_items {\n-    #[abi = \"cdecl\"]\n-    pub extern mod rustrt {\n-        #[cfg(bogus)]\n-        pub fn rust_getcwd() -> ~str;\n-        pub fn rust_getcwd() -> ~str;\n+    pub mod rustrt {\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            #[cfg(bogus)]\n+            pub fn rust_getcwd() -> ~str;\n+            pub fn rust_getcwd() -> ~str;\n+        }\n     }\n }\n \n mod test_use_statements {\n     #[cfg(bogus)]\n     use flippity_foo;\n \n-    pub extern mod rustrt {\n-        #[cfg(bogus)]\n-        use flippity_foo;\n+    pub mod rustrt {\n+        pub extern {\n+            #[cfg(bogus)]\n+            use flippity_foo;\n+        }\n     }\n }\n "}, {"sha": "f5947b462e697100f5767f4eca86f7dacb625f2d", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "0bc6d86c927747277bd2d97f248c47bb8e2fe370", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "7802dfa61ce160ae95b6b0e9e4e33c5b293cf7d1", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,9 +12,11 @@\n // make sure the stack pointers are maintained properly in both\n // directions\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "e66a44a5487b663ea71d5801d638650d4511326d", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "6ef31445140d668ec78890ea42cd75d6783d50a8", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,9 +11,11 @@\n // This creates a bunch of yielding tasks that run concurrently\n // while holding onto C stacks\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "1695a0e79094e62dc747e92bffdbea0b0790fb6a", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod rustrt {\n-    pub fn rust_dbg_call(cb: *u8,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n+                          -> libc::uintptr_t;\n+    }\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "fe1d5e1200d3c41198e5dc25ae6667d193cdf8ba", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,16 +11,20 @@\n // xfail-fast - Somehow causes check-fast to livelock?? Probably because we're\n // calling pin_task and that's having wierd side-effects.\n \n-#[abi = \"cdecl\"]\n-#[link_name = \"rustrt\"]\n-extern mod rustrt1 {\n-    pub fn rust_get_argc() -> libc::c_int;\n+mod rustrt1 {\n+    #[abi = \"cdecl\"]\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        pub fn rust_get_argc() -> libc::c_int;\n+    }\n }\n \n-#[abi = \"cdecl\"]\n-#[link_name = \"rustrt\"]\n-extern mod rustrt2 {\n-    pub fn rust_get_argc() -> libc::c_int;\n+mod rustrt2 {\n+    #[abi = \"cdecl\"]\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        pub fn rust_get_argc() -> libc::c_int;\n+    }\n }\n \n pub fn main() {"}, {"sha": "77ddd5eb7f9e9a32833d74aa0c352217d6b827f6", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,12 +10,13 @@\n \n extern mod std;\n \n-\n-#[nolink]\n-#[abi = \"cdecl\"]\n-extern mod libc {\n-    #[link_name = \"strlen\"]\n-    pub fn my_strlen(str: *u8) -> uint;\n+mod libc {\n+    #[nolink]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        #[link_name = \"strlen\"]\n+        pub fn my_strlen(str: *u8) -> uint;\n+    }\n }\n \n fn strlen(str: ~str) -> uint {"}, {"sha": "3a0304afdba3ff230704877664eb6432a9b58e9a", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,11 +12,13 @@\n // compile-flags:-L.\n // The -L flag is also used for linking foreign libraries\n \n-// FIXME: I want to name a mod that would not link successfully\n-// wouthout providing a -L argument to the compiler, and that\n-// will also be found successfully at runtime.\n-extern mod WHATGOESHERE {\n-    pub fn IDONTKNOW() -> u32;\n+mod WHATGOESHERE {\n+    // FIXME: I want to name a mod that would not link successfully\n+    // wouthout providing a -L argument to the compiler, and that\n+    // will also be found successfully at runtime.\n+    pub extern {\n+        pub fn IDONTKNOW() -> u32;\n+    }\n }\n \n pub fn main() {"}, {"sha": "f66ffbd0e0e6578d7320170ff444f9b9dc8490c0", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[nolink]\n-extern mod foo {\n-    pub const errno: int;\n+mod foo {\n+    #[nolink]\n+    pub extern {\n+        pub const errno: int;\n+    }\n }\n \n pub fn main() {"}, {"sha": "67959be866ed401976a9e828c30c873a440ecd4a", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,8 +10,10 @@\n \n // ABI is cdecl by default\n \n-extern mod rustrt {\n-    pub fn get_task_id() -> libc::intptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn get_task_id() -> libc::intptr_t;\n+    }\n }\n \n pub fn main() {"}, {"sha": "9ac17c27ed4adaca51489f0c365d6374a44de10d", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,11 +11,15 @@\n // xfail-win32\n // Passing enums by value\n \n-enum void { }\n+pub enum void { }\n \n-#[nolink]\n-extern mod bindgen {\n-    pub fn printf(++v: void);\n+mod bindgen {\n+    use super::void;\n+\n+    #[nolink]\n+    pub extern {\n+        pub fn printf(++v: void);\n+    }\n }\n \n pub fn main() { }"}, {"sha": "f83d21e17149cf9a982328c25d95407c5ed6a724", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,23 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod bar {}\n+mod bar {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {}\n+}\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod zed {}\n+mod zed {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {}\n+}\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod libc {\n-    pub fn write(fd: int, buf: *u8,\n-                 count: ::core::libc::size_t) -> ::core::libc::ssize_t;\n+mod libc {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {\n+        pub fn write(fd: int, buf: *u8, count: ::core::libc::size_t)\n+                  -> ::core::libc::ssize_t;\n+    }\n }\n \n-#[abi = \"cdecl\"]\n-#[nolink]\n-extern mod baz {}\n+mod baz {\n+    #[abi = \"cdecl\"]\n+    #[nolink]\n+    pub extern {}\n+}\n \n pub fn main() { }"}, {"sha": "feebcdff921613dad66f2d01b83e803cc8cc315f", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -15,9 +15,11 @@ mod spam {\n     pub fn eggs() { }\n }\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    pub use spam::{ham, eggs};\n+mod rustrt {\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub use spam::{ham, eggs};\n+    }\n }\n \n pub fn main() { rustrt::ham(); rustrt::eggs(); }"}, {"sha": "16c88edc784cbb9e2805b4ec1569fbb28e18d0eb", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,10 +10,12 @@\n \n // xfail-fast Does not work with main in a submodule\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn pref_align_of<T>() -> uint;\n-    pub fn min_align_of<T>() -> uint;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn pref_align_of<T>() -> uint;\n+        pub fn min_align_of<T>() -> uint;\n+    }\n }\n \n #[cfg(target_os = \"linux\")]"}, {"sha": "38a0e601affc107ace5504d91f16272bfead3417", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,23 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n-    pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n-    pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n-\n-    pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    \n-    pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    \n-    pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+        pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+        pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+\n+        pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n+        \n+        pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n+        \n+        pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+    }\n }\n \n pub fn main() {"}, {"sha": "a0abded65ed727f107791e2e6c2c81a778378b52", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,9 +10,12 @@\n \n // xfail-fast\n #[legacy_modes];\n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn frame_address(f: &once fn(*u8));\n+\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn frame_address(f: &once fn(*u8));\n+    }\n }\n \n pub fn main() {"}, {"sha": "0861f121565bfb201dd91d31afd68f550cbdc457", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn move_val_init<T>(dst: &mut T, -src: T);\n-    pub fn move_val<T>(dst: &mut T, -src: T);\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn move_val_init<T>(dst: &mut T, -src: T);\n+        pub fn move_val<T>(dst: &mut T, -src: T);\n+    }\n }\n \n pub fn main() {"}, {"sha": "f0a31acd11b721034940237bd446b5cc199a30c3", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,26 +12,28 @@\n \n extern mod std;\n \n-#[abi = \"rust-intrinsic\"]  \n-extern mod rusti {\n-    fn ctpop8(x: i8) -> i8;\n-    fn ctpop16(x: i16) -> i16;\n-    fn ctpop32(x: i32) -> i32;\n-    fn ctpop64(x: i64) -> i64;\n-\n-    fn ctlz8(x: i8) -> i8;\n-    fn ctlz16(x: i16) -> i16;\n-    fn ctlz32(x: i32) -> i32;\n-    fn ctlz64(x: i64) -> i64;\n-\n-    fn cttz8(x: i8) -> i8;\n-    fn cttz16(x: i16) -> i16;\n-    fn cttz32(x: i32) -> i32;\n-    fn cttz64(x: i64) -> i64;\n-\n-    fn bswap16(x: i16) -> i16;\n-    fn bswap32(x: i32) -> i32;\n-    fn bswap64(x: i64) -> i64;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]  \n+    pub extern {\n+        fn ctpop8(x: i8) -> i8;\n+        fn ctpop16(x: i16) -> i16;\n+        fn ctpop32(x: i32) -> i32;\n+        fn ctpop64(x: i64) -> i64;\n+\n+        fn ctlz8(x: i8) -> i8;\n+        fn ctlz16(x: i16) -> i16;\n+        fn ctlz32(x: i32) -> i32;\n+        fn ctlz64(x: i64) -> i64;\n+\n+        fn cttz8(x: i8) -> i8;\n+        fn cttz16(x: i16) -> i16;\n+        fn cttz32(x: i32) -> i32;\n+        fn cttz64(x: i64) -> i64;\n+\n+        fn bswap16(x: i16) -> i16;\n+        fn bswap32(x: i32) -> i32;\n+        fn bswap64(x: i64) -> i64;\n+    }\n }\n \n pub fn main() {"}, {"sha": "c59425264a33f193d761d3e6497fcad08a4db160", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -14,38 +14,40 @@ extern mod std;\n \n use std::cmp::FuzzyEq;\n \n-#[abi = \"rust-intrinsic\"]  \n-extern mod rusti {\n-    fn sqrtf32(x: f32) -> f32;\n-    fn sqrtf64(x: f64) -> f64;\n-    fn powif32(a: f32, x: i32) -> f32;\n-    fn powif64(a: f64, x: i32) -> f64;\n-    fn sinf32(x: f32) -> f32;\n-    fn sinf64(x: f64) -> f64;\n-    fn cosf32(x: f32) -> f32;\n-    fn cosf64(x: f64) -> f64;\n-    fn powf32(a: f32, x: f32) -> f32;\n-    fn powf64(a: f64, x: f64) -> f64;\n-    fn expf32(x: f32) -> f32;\n-    fn expf64(x: f64) -> f64;\n-    fn exp2f32(x: f32) -> f32;\n-    fn exp2f64(x: f64) -> f64;\n-    fn logf32(x: f32) -> f32;\n-    fn logf64(x: f64) -> f64;\n-    fn log10f32(x: f32) -> f32;\n-    fn log10f64(x: f64) -> f64;\n-    fn log2f32(x: f32) -> f32;\n-    fn log2f64(x: f64) -> f64;\n-    fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n-    fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n-    fn fabsf32(x: f32) -> f32;\n-    fn fabsf64(x: f64) -> f64;\n-    fn floorf32(x: f32) -> f32;\n-    fn floorf64(x: f64) -> f64;\n-    fn ceilf32(x: f32) -> f32;\n-    fn ceilf64(x: f64) -> f64;\n-    fn truncf32(x: f32) -> f32;\n-    fn truncf64(x: f64) -> f64;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]  \n+    pub extern {\n+        fn sqrtf32(x: f32) -> f32;\n+        fn sqrtf64(x: f64) -> f64;\n+        fn powif32(a: f32, x: i32) -> f32;\n+        fn powif64(a: f64, x: i32) -> f64;\n+        fn sinf32(x: f32) -> f32;\n+        fn sinf64(x: f64) -> f64;\n+        fn cosf32(x: f32) -> f32;\n+        fn cosf64(x: f64) -> f64;\n+        fn powf32(a: f32, x: f32) -> f32;\n+        fn powf64(a: f64, x: f64) -> f64;\n+        fn expf32(x: f32) -> f32;\n+        fn expf64(x: f64) -> f64;\n+        fn exp2f32(x: f32) -> f32;\n+        fn exp2f64(x: f64) -> f64;\n+        fn logf32(x: f32) -> f32;\n+        fn logf64(x: f64) -> f64;\n+        fn log10f32(x: f32) -> f32;\n+        fn log10f64(x: f64) -> f64;\n+        fn log2f32(x: f32) -> f32;\n+        fn log2f64(x: f64) -> f64;\n+        fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n+        fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n+        fn fabsf32(x: f32) -> f32;\n+        fn fabsf64(x: f64) -> f64;\n+        fn floorf32(x: f32) -> f32;\n+        fn floorf64(x: f64) -> f64;\n+        fn ceilf32(x: f32) -> f32;\n+        fn ceilf64(x: f64) -> f64;\n+        fn truncf32(x: f32) -> f32;\n+        fn truncf64(x: f64) -> f64;\n+    }\n }\n \n pub fn main() {"}, {"sha": "c14dd625a8e82cdfb7bf8ec95bfbcc8166e48a84", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,8 +10,10 @@\n \n #[link(name = \"get_task_id\")];\n \n-extern mod rustrt {\n-    pub fn get_task_id() -> libc::intptr_t;\n+mod rustrt {\n+    pub extern {\n+        pub fn get_task_id() -> libc::intptr_t;\n+    }\n }\n \n pub fn main() { }"}, {"sha": "cb5e9b111660fb7e15eb8f9602d2c97f0c93c031", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,15 +11,19 @@\n // xfail-test\n mod a {\n     pub type rust_task = uint;\n-    pub extern mod rustrt {\n-        pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+    pub mod rustrt {\n+        pub extern {\n+            pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+        }\n     }\n }\n \n mod b {\n     pub type rust_task = bool;\n-    pub extern mod rustrt {\n-        pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+    pub mod rustrt {\n+        pub extern {\n+            pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+        }\n     }\n }\n "}, {"sha": "7b44f79e50dea834519719ff3ef57c13a05dc124", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -26,16 +26,19 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n     }\n }\n \n-#[link_name = \"m\"]\n-#[abi = \"cdecl\"]\n-extern mod m {\n-    #[cfg(unix)]\n-    #[link_name=\"lgamma_r\"] pub fn lgamma(n: c_double, sign: &mut c_int)\n-      -> c_double;\n-    #[cfg(windows)]\n-    #[link_name=\"__lgamma_r\"] pub fn lgamma(n: c_double,\n-                                            sign: &mut c_int) -> c_double;\n+mod m {\n+    use core::libc::{c_double, c_int};\n \n+    #[link_name = \"m\"]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        #[cfg(unix)]\n+        #[link_name=\"lgamma_r\"]\n+        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        #[cfg(windows)]\n+        #[link_name=\"__lgamma_r\"]\n+        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+    }\n }\n \n pub fn main() {"}, {"sha": "c3c6b9ebcb9a16dbbafa191c55a8f2a7e2485702", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -37,9 +37,11 @@ mod test_single_attr_outer {\n     #[attr = \"val\"]\n     pub mod mod1 {}\n \n-    #[attr = \"val\"]\n-    #[abi = \"cdecl\"]\n-    pub extern mod rustrt {}\n+    pub mod rustrt {\n+        #[attr = \"val\"]\n+        #[abi = \"cdecl\"]\n+        pub extern {}\n+    }\n }\n \n mod test_multi_attr_outer {\n@@ -55,10 +57,12 @@ mod test_multi_attr_outer {\n     #[attr2 = \"val\"]\n     pub mod mod1 {}\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    #[abi = \"cdecl\"]\n-    pub extern mod rustrt {}\n+    pub mod rustrt {\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        #[abi = \"cdecl\"]\n+        pub extern {}\n+    }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n@@ -77,9 +81,11 @@ mod test_stmt_single_attr_outer {\n         mod mod1 {\n         }\n \n-        #[attr = \"val\"]\n-        #[abi = \"cdecl\"]\n-        extern mod rustrt {\n+        mod rustrt {\n+            #[attr = \"val\"]\n+            #[abi = \"cdecl\"]\n+            pub extern {\n+            }\n         }\n     }\n }\n@@ -101,10 +107,12 @@ mod test_stmt_multi_attr_outer {\n         mod mod1 {\n         }\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        #[abi = \"cdecl\"]\n-        extern mod rustrt {\n+        pub mod rustrt {\n+            #[attr1 = \"val\"]\n+            #[attr2 = \"val\"]\n+            #[abi = \"cdecl\"]\n+            pub extern {\n+            }\n         }\n         */\n     }\n@@ -158,12 +166,14 @@ mod test_other_forms {\n }\n \n mod test_foreign_items {\n-    #[abi = \"cdecl\"]\n-    pub extern mod rustrt {\n-        #[attr];\n+    pub mod rustrt {\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            #[attr];\n \n-        #[attr]\n-        fn get_task_id() -> libc::intptr_t;\n+            #[attr]\n+            fn get_task_id() -> libc::intptr_t;\n+        }\n     }\n }\n "}, {"sha": "77d0a60a5e2c9bab1e371a2d227635c97af5353b", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[nolink]\n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn morestack_addr() -> *();\n+mod rusti {\n+    #[nolink]\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn morestack_addr() -> *();\n+    }\n }\n \n pub fn main() {"}, {"sha": "9d210f2580b8ba57e5a263890c4d82713c5b7d83", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -11,15 +11,17 @@\n // This test attempts to force the dynamic linker to resolve\n // external symbols as close to the red zone as possible.\n \n-extern mod rustrt {\n-    pub fn debug_get_stk_seg() -> *u8;\n+mod rustrt {\n+    pub extern {\n+        pub fn debug_get_stk_seg() -> *u8;\n \n-    pub fn rust_get_sched_id() -> libc::intptr_t;\n-    pub fn rust_get_argc() -> libc::c_int;\n-    pub fn rust_getcwd() -> ~str;\n-    pub fn get_task_id() -> libc::intptr_t;\n-    pub fn rust_sched_threads();\n-    pub fn rust_get_task();\n+        pub fn rust_get_sched_id() -> libc::intptr_t;\n+        pub fn rust_get_argc() -> libc::c_int;\n+        pub fn rust_getcwd() -> ~str;\n+        pub fn get_task_id() -> libc::intptr_t;\n+        pub fn rust_sched_threads();\n+        pub fn rust_get_task();\n+    }\n }\n \n fn calllink01() { unsafe { rustrt::rust_get_sched_id(); } }"}, {"sha": "fab86b1de0aa39285a0c05813b66fb150cf338a4", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -9,8 +9,11 @@\n // except according to those terms.\n \n // Issue #901\n-#[nolink]\n-extern mod libc {\n-    pub fn printf(x: ());\n+mod libc {\n+    #[nolink]\n+    pub extern {\n+        pub fn printf(x: ());\n+    }\n }\n+\n pub fn main() { }"}, {"sha": "495aee1690fe6ab47db854c0030187e63913f770", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,10 +10,12 @@\n \n // Issue #2303\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn pref_align_of<T>() -> uint;\n-    pub fn min_align_of<T>() -> uint;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn pref_align_of<T>() -> uint;\n+        pub fn min_align_of<T>() -> uint;\n+    }\n }\n \n // This is the type with the questionable alignment"}, {"sha": "4106f87f3809eca62de6ad3b700e64a862bc3930", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -10,10 +10,12 @@\n \n // Issue #2303\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn pref_align_of<T>() -> uint;\n-    pub fn min_align_of<T>() -> uint;\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn pref_align_of<T>() -> uint;\n+        pub fn min_align_of<T>() -> uint;\n+    }\n }\n \n // This is the type with the questionable alignment"}, {"sha": "e0524a3c36fa288321c60b1db08b96d98becd595", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,17 +12,21 @@\n \n use core::comm::*;\n \n-type sched_id = int;\n-type task_id = *libc::c_void;\n+pub type sched_id = int;\n+pub type task_id = *libc::c_void;\n \n-type task = *libc::c_void;\n-type closure = *libc::c_void;\n+pub type task = *libc::c_void;\n+pub type closure = *libc::c_void;\n \n-extern mod rustrt {\n-    pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    pub fn rust_get_sched_id() -> sched_id;\n-    pub fn rust_new_task_in_sched(id: sched_id) -> task_id;\n-    pub fn start_task(id: task_id, f: closure);\n+mod rustrt {\n+    use super::{closure, sched_id, task, task_id};\n+\n+    pub extern {\n+        pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n+        pub fn rust_get_sched_id() -> sched_id;\n+        pub fn rust_new_task_in_sched(id: sched_id) -> task_id;\n+        pub fn start_task(id: task_id, f: closure);\n+    }\n }\n \n pub fn main() {"}, {"sha": "57984f32ab52f718bc9897660f278166ba1859dd", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Quad { a: u64, b: u64, c: u64, d: u64 }\n-struct Floats { a: f64, b: u8, c: f64 }\n+pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+pub struct Floats { a: f64, b: u8, c: f64 }\n \n-#[nolink]\n-extern mod rustrt {\n-    pub fn debug_abi_1(++q: Quad) -> Quad;\n-    pub fn debug_abi_2(++f: Floats) -> Floats;\n+mod rustrt {\n+    use super::{Floats, Quad};\n+\n+    #[nolink]\n+    pub extern {\n+        pub fn debug_abi_1(++q: Quad) -> Quad;\n+        pub fn debug_abi_2(++f: Floats) -> Floats;\n+    }\n }\n \n fn test1() {"}, {"sha": "873cc0e09361060f10ea13a14206f1c361722f85", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -12,9 +12,11 @@\n \n #[allow(ctypes)];\n \n-#[nolink]\n-extern mod libc {\n-    pub fn malloc(size: int) -> *u8;\n+mod libc {\n+    #[nolink]\n+    pub extern {\n+        pub fn malloc(size: int) -> *u8;\n+    }\n }\n \n pub fn main() {"}, {"sha": "b1d07d665070ca3a347aa85931bbbd7fcaa6a9ac", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "patch": "@@ -14,13 +14,15 @@ type SIZE_T = u32;\n type LPVOID = uint;\n type BOOL = u8;\n \n-#[cfg(target_os = \"win32\")]\n-#[abi = \"stdcall\"]\n-extern mod kernel32 {\n-    pub fn GetProcessHeap() -> HANDLE;\n-    pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n-                  -> LPVOID;\n-    pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n+mod kernel32 {\n+    #[cfg(target_os = \"win32\")]\n+    #[abi = \"stdcall\"]\n+    pub extern {\n+        pub fn GetProcessHeap() -> HANDLE;\n+        pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n+                      -> LPVOID;\n+        pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n+    }\n }\n \n "}]}