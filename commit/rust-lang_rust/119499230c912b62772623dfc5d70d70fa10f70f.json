{"sha": "119499230c912b62772623dfc5d70d70fa10f70f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTQ5OTIzMGM5MTJiNjI3NzI2MjNkZmM1ZDcwZDcwZmExMGY3MGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T12:28:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_asm", "tree": {"sha": "fd7f46a56fd83c1935213f3bee1c5d6dfc3ccf6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd7f46a56fd83c1935213f3bee1c5d6dfc3ccf6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119499230c912b62772623dfc5d70d70fa10f70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119499230c912b62772623dfc5d70d70fa10f70f", "html_url": "https://github.com/rust-lang/rust/commit/119499230c912b62772623dfc5d70d70fa10f70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119499230c912b62772623dfc5d70d70fa10f70f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d507d39ebdeed82cf9a3cdcab2e590621bb8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d507d39ebdeed82cf9a3cdcab2e590621bb8b0", "html_url": "https://github.com/rust-lang/rust/commit/45d507d39ebdeed82cf9a3cdcab2e590621bb8b0"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "054035172b580367f67379e18596d831c0480f13", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/119499230c912b62772623dfc5d70d70fa10f70f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119499230c912b62772623dfc5d70d70fa10f70f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=119499230c912b62772623dfc5d70d70fa10f70f", "patch": "@@ -451,36 +451,7 @@ impl LoweringContext<'_> {\n                 })\n             }\n             ExprKind::Ret(ref e) => hir::ExprKind::Ret(e.as_ref().map(|x| P(self.lower_expr(x)))),\n-            ExprKind::InlineAsm(ref asm) => {\n-                let hir_asm = hir::InlineAsm {\n-                    inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n-                    outputs: asm.outputs\n-                        .iter()\n-                        .map(|out| hir::InlineAsmOutput {\n-                            constraint: out.constraint.clone(),\n-                            is_rw: out.is_rw,\n-                            is_indirect: out.is_indirect,\n-                            span: out.expr.span,\n-                        })\n-                        .collect(),\n-                    asm: asm.asm.clone(),\n-                    asm_str_style: asm.asm_str_style,\n-                    clobbers: asm.clobbers.clone().into(),\n-                    volatile: asm.volatile,\n-                    alignstack: asm.alignstack,\n-                    dialect: asm.dialect,\n-                    ctxt: asm.ctxt,\n-                };\n-                let outputs = asm.outputs\n-                    .iter()\n-                    .map(|out| self.lower_expr(&out.expr))\n-                    .collect();\n-                let inputs = asm.inputs\n-                    .iter()\n-                    .map(|&(_, ref input)| self.lower_expr(input))\n-                    .collect();\n-                hir::ExprKind::InlineAsm(P(hir_asm), outputs, inputs)\n-            }\n+            ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(asm),\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => hir::ExprKind::Struct(\n                 P(self.lower_qpath(\n                     e.id,\n@@ -526,6 +497,40 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n+        let hir_asm = hir::InlineAsm {\n+            inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n+            outputs: asm.outputs\n+                .iter()\n+                .map(|out| hir::InlineAsmOutput {\n+                    constraint: out.constraint.clone(),\n+                    is_rw: out.is_rw,\n+                    is_indirect: out.is_indirect,\n+                    span: out.expr.span,\n+                })\n+                .collect(),\n+            asm: asm.asm.clone(),\n+            asm_str_style: asm.asm_str_style,\n+            clobbers: asm.clobbers.clone().into(),\n+            volatile: asm.volatile,\n+            alignstack: asm.alignstack,\n+            dialect: asm.dialect,\n+            ctxt: asm.ctxt,\n+        };\n+\n+        let outputs = asm.outputs\n+            .iter()\n+            .map(|out| self.lower_expr(&out.expr))\n+            .collect();\n+\n+        let inputs = asm.inputs\n+            .iter()\n+            .map(|&(_, ref input)| self.lower_expr(input))\n+            .collect();\n+\n+        hir::ExprKind::InlineAsm(P(hir_asm), outputs, inputs)\n+    }\n+\n     fn lower_expr_yield(&mut self, span: Span, opt_expr: Option<&Expr>) -> hir::ExprKind {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Gen) => {},"}]}