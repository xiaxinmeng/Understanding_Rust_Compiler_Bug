{"sha": "d616a6a45697589a5fb4eeb4a30382322f8b8184", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTZhNmE0NTY5NzU4OWE1ZmI0ZWViNGEzMDM4MjMyMmY4YjgxODQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-05T19:26:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-05T19:26:33Z"}, "message": "Merge #9149\n\n9149: feat: Support goto-definition for include macros input path r=Veykril a=Veykril\n\n![0l6l9iWPNE](https://user-images.githubusercontent.com/3757771/120891155-3fa85800-c607-11eb-9b20-7ac330dceb4b.gif)\r\nFixes #5871\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8ad9df7b3b25985e3f7143ea14a46be1861b8302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad9df7b3b25985e3f7143ea14a46be1861b8302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d616a6a45697589a5fb4eeb4a30382322f8b8184", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgu8/pCRBK7hj4Ov3rIwAAYVAIAJ/NGTq3VTKJ9oOyW4/g7ebc\nHreGYjY8XaVV/AAZP3Da38Xe3rxQNGO5JGfmgRDSqI4/7oSx/MQDOkwpIQQJzfq9\nvjiQ5nkg7DA6Jjs0jJBX/9lmwPL67L5K8UpbzApQHdDGAWp1qmVm23TyiCrxG+jV\n0r8U6x5Cz+7jtChUk/fveS1mQ+CYm2HC1juzp/0UYIYxOGCfLjbwBGmL64+5lnOD\noPtRUoIHn3ygx+NC+R4oQS97m36qyPf4JAMgNzvdddmbtevBrnfcNMjSYzAkxHnm\nav2ux9QL5FfjPgrG5V6cNC1B13EZTcP2VxqNc0DjGEj1FlhnLNbKoiF7gSiRSaM=\n=u2/f\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ad9df7b3b25985e3f7143ea14a46be1861b8302\nparent b68407fab874d8f580976b87090a45de4d5e29ff\nparent 5391f9c63c3c59b08a71b2657e8773f3c1d43145\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622921193 +0000\ncommitter GitHub <noreply@github.com> 1622921193 +0000\n\nMerge #9149\n\n9149: feat: Support goto-definition for include macros input path r=Veykril a=Veykril\n\n![0l6l9iWPNE](https://user-images.githubusercontent.com/3757771/120891155-3fa85800-c607-11eb-9b20-7ac330dceb4b.gif)\r\nFixes #5871\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d616a6a45697589a5fb4eeb4a30382322f8b8184", "html_url": "https://github.com/rust-lang/rust/commit/d616a6a45697589a5fb4eeb4a30382322f8b8184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d616a6a45697589a5fb4eeb4a30382322f8b8184/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b68407fab874d8f580976b87090a45de4d5e29ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68407fab874d8f580976b87090a45de4d5e29ff", "html_url": "https://github.com/rust-lang/rust/commit/b68407fab874d8f580976b87090a45de4d5e29ff"}, {"sha": "5391f9c63c3c59b08a71b2657e8773f3c1d43145", "url": "https://api.github.com/repos/rust-lang/rust/commits/5391f9c63c3c59b08a71b2657e8773f3c1d43145", "html_url": "https://github.com/rust-lang/rust/commit/5391f9c63c3c59b08a71b2657e8773f3c1d43145"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "b0bfd646e08ad9e88bfa46e0c54fc8ca18357eb8", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d616a6a45697589a5fb4eeb4a30382322f8b8184/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d616a6a45697589a5fb4eeb4a30382322f8b8184/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=d616a6a45697589a5fb4eeb4a30382322f8b8184", "patch": "@@ -1,10 +1,15 @@\n+use std::convert::TryInto;\n+\n use either::Either;\n use hir::{InFile, Semantics};\n use ide_db::{\n+    base_db::{AnchoredPath, FileId, FileLoader},\n     defs::{NameClass, NameRefClass},\n     RootDatabase,\n };\n-use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use syntax::{\n+    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, TokenAtOffset, T,\n+};\n \n use crate::{\n     display::TryToNav,\n@@ -32,7 +37,7 @@ pub(crate) fn goto_definition(\n     let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = sema.descend_into_macros(original_token.clone());\n     let parent = token.parent()?;\n-    if let Some(_) = ast::Comment::cast(token) {\n+    if let Some(_) = ast::Comment::cast(token.clone()) {\n         let (attributes, def) = doc_attributes(&sema, &parent)?;\n \n         let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n@@ -45,7 +50,6 @@ pub(crate) fn goto_definition(\n         let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n         return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n     }\n-\n     let nav = match_ast! {\n         match parent {\n             ast::NameRef(name_ref) => {\n@@ -61,13 +65,40 @@ pub(crate) fn goto_definition(\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))\n             },\n+            ast::TokenTree(tt) => try_lookup_include_path(sema.db, tt, token, position.file_id),\n             _ => return None,\n         }\n     };\n \n     Some(RangeInfo::new(original_token.text_range(), nav.into_iter().collect()))\n }\n \n+fn try_lookup_include_path(\n+    db: &RootDatabase,\n+    tt: ast::TokenTree,\n+    token: SyntaxToken,\n+    file_id: FileId,\n+) -> Option<NavigationTarget> {\n+    let path = ast::String::cast(token)?.value()?.into_owned();\n+    let macro_call = tt.syntax().parent().and_then(ast::MacroCall::cast)?;\n+    let name = macro_call.path()?.segment()?.name_ref()?;\n+    if !matches!(&*name.text(), \"include\" | \"include_str\" | \"include_bytes\") {\n+        return None;\n+    }\n+    let file_id = db.resolve_path(AnchoredPath { anchor: file_id, path: &path })?;\n+    let size = db.file_text(file_id).len().try_into().ok()?;\n+    Some(NavigationTarget {\n+        file_id,\n+        full_range: TextRange::new(0.into(), size),\n+        name: path.into(),\n+        focus_range: None,\n+        kind: None,\n+        container_name: None,\n+        description: None,\n+        docs: None,\n+    })\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n@@ -1213,6 +1244,21 @@ fn f(e: Enum) {\n         Enum::Variant2 => {}\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_include() {\n+        check(\n+            r#\"\n+//- /main.rs\n+fn main() {\n+    let str = include_str!(\"foo.txt$0\");\n+}\n+//- /foo.txt\n+// empty\n+//^ file\n \"#,\n         );\n     }"}]}