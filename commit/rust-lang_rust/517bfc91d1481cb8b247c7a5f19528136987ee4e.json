{"sha": "517bfc91d1481cb8b247c7a5f19528136987ee4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxN2JmYzkxZDE0ODFjYjhiMjQ3YzdhNWYxOTUyODEzNjk4N2VlNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T21:27:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T21:27:36Z"}, "message": "auto merge of #6200 : catamorphism/rust/issue-5358, r=catamorphism\n\nr? @nikomatsakis Previously, rustc would ICE if you matched on an enum-typed thing\r\nwith a structure pattern. Error out correctly. This will close #5358", "tree": {"sha": "19eb2719c8df176fddaa046a6fca76bb79b80b0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19eb2719c8df176fddaa046a6fca76bb79b80b0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517bfc91d1481cb8b247c7a5f19528136987ee4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517bfc91d1481cb8b247c7a5f19528136987ee4e", "html_url": "https://github.com/rust-lang/rust/commit/517bfc91d1481cb8b247c7a5f19528136987ee4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517bfc91d1481cb8b247c7a5f19528136987ee4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd3cd8171bee519093f570264e5a2b1dc17e9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd3cd8171bee519093f570264e5a2b1dc17e9d8", "html_url": "https://github.com/rust-lang/rust/commit/bfd3cd8171bee519093f570264e5a2b1dc17e9d8"}, {"sha": "32b3d3e9ebd8dbc1073445b3be9676da85b6410c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b3d3e9ebd8dbc1073445b3be9676da85b6410c", "html_url": "https://github.com/rust-lang/rust/commit/32b3d3e9ebd8dbc1073445b3be9676da85b6410c"}], "stats": {"total": 119, "additions": 85, "deletions": 34}, "files": [{"sha": "a139a26a597fc2fcfb9f01b27322f465b396f933", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=517bfc91d1481cb8b247c7a5f19528136987ee4e", "patch": "@@ -114,37 +114,53 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n         ty::ty_enum(_, ref expected_substs) => {\n             // Lookup the enum and variant def ids:\n             let v_def = lookup_def(pcx.fcx, pat.span, pat.id);\n-            let (enm, var) = ast_util::variant_def_ids(v_def);\n-\n-            // Assign the pattern the type of the *enum*, not the variant.\n-            let enum_tpt = ty::lookup_item_type(tcx, enm);\n-            instantiate_path(pcx.fcx, path, enum_tpt, pat.span, pat.id,\n-                             pcx.block_region);\n-\n-            // check that the type of the value being matched is a subtype\n-            // of the type of the pattern:\n-            let pat_ty = fcx.node_ty(pat.id);\n-            demand::subtype(fcx, pat.span, expected, pat_ty);\n-\n-            // Get the expected types of the arguments.\n-            arg_types = {\n-                let vinfo =\n-                    ty::enum_variant_with_id(tcx, enm, var);\n-                let var_tpt = ty::lookup_item_type(tcx, var);\n-                vinfo.args.map(|t| {\n-                    if var_tpt.generics.type_param_defs.len() ==\n-                        expected_substs.tps.len()\n-                    {\n-                        ty::subst(tcx, expected_substs, *t)\n-                    }\n-                    else {\n-                        *t // In this case, an error was already signaled\n-                           // anyway\n-                    }\n-                })\n-            };\n-\n-            kind_name = \"variant\";\n+            match ast_util::variant_def_ids(v_def) {\n+                Some((enm, var)) => {\n+                    // Assign the pattern the type of the *enum*, not the variant.\n+                    let enum_tpt = ty::lookup_item_type(tcx, enm);\n+                    instantiate_path(pcx.fcx, path, enum_tpt, pat.span, pat.id,\n+                                     pcx.block_region);\n+\n+                    // check that the type of the value being matched is a subtype\n+                    // of the type of the pattern:\n+                    let pat_ty = fcx.node_ty(pat.id);\n+                    demand::subtype(fcx, pat.span, expected, pat_ty);\n+\n+                    // Get the expected types of the arguments.\n+                    arg_types = {\n+                        let vinfo =\n+                            ty::enum_variant_with_id(tcx, enm, var);\n+                        let var_tpt = ty::lookup_item_type(tcx, var);\n+                        vinfo.args.map(|t| {\n+                            if var_tpt.generics.type_param_defs.len() ==\n+                                expected_substs.tps.len()\n+                            {\n+                                ty::subst(tcx, expected_substs, *t)\n+                            }\n+                            else {\n+                                *t // In this case, an error was already signaled\n+                                    // anyway\n+                            }\n+                        })\n+                    };\n+\n+                    kind_name = \"variant\";\n+                }\n+                None => {\n+                    let resolved_expected =\n+                        fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n+                    fcx.infcx().type_error_message_str(pat.span,\n+                                                       |actual| {\n+                        fmt!(\"mismatched types: expected `%s` but found %s\",\n+                             resolved_expected, actual)},\n+                             ~\"a structure pattern\",\n+                             None);\n+                    fcx.write_error(pat.id);\n+                    kind_name = \"[error]\";\n+                    arg_types = (copy subpats).get_or_default(~[]).map(|_|\n+                                                                       ty::mk_err());\n+                }\n+            }\n         }\n         ty::ty_struct(struct_def_id, ref expected_substs) => {\n             // Lookup the struct ctor def id"}, {"sha": "10350413f2d68e7b8917d2b9582a0199a1e1725b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=517bfc91d1481cb8b247c7a5f19528136987ee4e", "patch": "@@ -41,12 +41,12 @@ pub fn stmt_id(s: &stmt) -> node_id {\n     }\n }\n \n-pub fn variant_def_ids(d: def) -> (def_id, def_id) {\n+pub fn variant_def_ids(d: def) -> Option<(def_id, def_id)> {\n     match d {\n       def_variant(enum_id, var_id) => {\n-        return (enum_id, var_id);\n+          Some((enum_id, var_id))\n       }\n-      _ => fail!(~\"non-variant in variant_def_ids\")\n+      _ => None\n     }\n }\n "}, {"sha": "0b6e2fb0ff5f22abef26a00dcc94d5fa877c1738", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=517bfc91d1481cb8b247c7a5f19528136987ee4e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(Either<uint, uint>);\n+\n+fn main() {\n+    match S(Left(5)) {\n+        Right(_) => {}  //~ ERROR mismatched types: expected `S` but found `core::either::Either\n+        _ => {}\n+    }\n+}"}, {"sha": "7d11a127f9ae8a71f9e2bbb47841adc3fb50fb74", "filename": "src/test/compile-fail/issue-5358.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517bfc91d1481cb8b247c7a5f19528136987ee4e/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs?ref=517bfc91d1481cb8b247c7a5f19528136987ee4e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(Either<uint, uint>);\n+\n+fn main() {\n+    match *S(Left(5)) {\n+      S(_) => {}  //~ ERROR mismatched types: expected `core::either::Either<uint,uint>` but found a structure pattern\n+    }\n+}"}]}