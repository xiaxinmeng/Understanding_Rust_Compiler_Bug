{"sha": "edf9e5eb63e391edd5cb999179effa361b005c20", "node_id": "C_kwDOAAsO6NoAKGVkZjllNWViNjNlMzkxZWRkNWNiOTk5MTc5ZWZmYTM2MWIwMDVjMjA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-16T05:47:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-16T05:47:01Z"}, "message": "Rollup merge of #101753 - oli-obk:tait_closure_args, r=compiler-errors\n\nPrefer explict closure sig types over expected ones\n\nfixes #100800\n\nPreviously we only checked that given closure arguments are equal to expected closure arguments, but now we choose the given closure arguments for the signature that is used when type checking the closure body, and keep the other signature for the type of the closure as seen outside of it.", "tree": {"sha": "204d7725606c27986d07f308d90ee9bc8c48e509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/204d7725606c27986d07f308d90ee9bc8c48e509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf9e5eb63e391edd5cb999179effa361b005c20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJA3VCRBK7hj4Ov3rIwAAcl8IAAeSYy5iXx9tHRTEjBpxs9yt\n7gs79qsP8x7+yHqYnA4F+epZb6MPUP6JByT2nULGSKvRtFcHuIBq82uaCp9sRmoO\nZEK/Pq22xKVFlrhb3BPYCio0SRfQSjpyjIM+2MiJygWjER6WRkOuWEfD0CPaXGvq\nmWIZDe/R5UrDuuft0wNSBXtQuJEQvzRUiojSUwyo2MuN3Rza0JS5Jv0hXe+s4uoV\nnuYSD/gsoQX+ZRae8NB/Pdiicob8oVzEi5yvHqaIyoQ8lzHypBF6AEq3SVT1gGy0\ntYTExp2Q7DvW3xQlAAwcw0zidho27/07vG3ysWUNj0SS6ZYR5Z2EVgVzkWrYqqQ=\n=2jIp\n-----END PGP SIGNATURE-----\n", "payload": "tree 204d7725606c27986d07f308d90ee9bc8c48e509\nparent 61126d3611c173fce47954fc4bf4671a8cea3ce9\nparent 7794ea5854094ffa15e933750196ef7c7e0e2f3b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663307221 +0530\ncommitter GitHub <noreply@github.com> 1663307221 +0530\n\nRollup merge of #101753 - oli-obk:tait_closure_args, r=compiler-errors\n\nPrefer explict closure sig types over expected ones\n\nfixes #100800\n\nPreviously we only checked that given closure arguments are equal to expected closure arguments, but now we choose the given closure arguments for the signature that is used when type checking the closure body, and keep the other signature for the type of the closure as seen outside of it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf9e5eb63e391edd5cb999179effa361b005c20", "html_url": "https://github.com/rust-lang/rust/commit/edf9e5eb63e391edd5cb999179effa361b005c20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf9e5eb63e391edd5cb999179effa361b005c20/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61126d3611c173fce47954fc4bf4671a8cea3ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/61126d3611c173fce47954fc4bf4671a8cea3ce9", "html_url": "https://github.com/rust-lang/rust/commit/61126d3611c173fce47954fc4bf4671a8cea3ce9"}, {"sha": "7794ea5854094ffa15e933750196ef7c7e0e2f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7794ea5854094ffa15e933750196ef7c7e0e2f3b", "html_url": "https://github.com/rust-lang/rust/commit/7794ea5854094ffa15e933750196ef7c7e0e2f3b"}], "stats": {"total": 117, "additions": 87, "deletions": 30}, "files": [{"sha": "9b943b160f39344d589af2f44bdd6298b6adcc41", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -30,7 +30,12 @@ struct ExpectedSig<'tcx> {\n }\n \n struct ClosureSignatures<'tcx> {\n+    /// The signature users of the closure see.\n     bound_sig: ty::PolyFnSig<'tcx>,\n+    /// The signature within the function body.\n+    /// This mostly differs in the sense that lifetimes are now early bound and any\n+    /// opaque types from the signature expectation are overriden in case there are\n+    /// explicit hidden types written by the user in the closure signature.\n     liberated_sig: ty::FnSig<'tcx>,\n }\n \n@@ -444,18 +449,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our typeck results, which are then later used by the privacy\n         // check.\n-        match self.check_supplied_sig_against_expectation(\n+        match self.merge_supplied_sig_with_expectation(\n             hir_id,\n             expr_def_id,\n             decl,\n             body,\n-            &closure_sigs,\n+            closure_sigs,\n         ) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n-            Err(_) => return self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body),\n+            Err(_) => self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body),\n         }\n-\n-        closure_sigs\n     }\n \n     fn sig_of_closure_with_mismatched_number_of_arguments(\n@@ -497,21 +500,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Enforce the user's types against the expectation. See\n     /// `sig_of_closure_with_expectation` for details on the overall\n     /// strategy.\n-    fn check_supplied_sig_against_expectation(\n+    #[instrument(level = \"debug\", skip(self, hir_id, expr_def_id, decl, body, expected_sigs))]\n+    fn merge_supplied_sig_with_expectation(\n         &self,\n         hir_id: hir::HirId,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n-        expected_sigs: &ClosureSignatures<'tcx>,\n-    ) -> InferResult<'tcx, ()> {\n+        mut expected_sigs: ClosureSignatures<'tcx>,\n+    ) -> InferResult<'tcx, ClosureSignatures<'tcx>> {\n         // Get the signature S that the user gave.\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n         let supplied_sig = self.supplied_sig_of_closure(hir_id, expr_def_id, decl, body);\n \n-        debug!(\"check_supplied_sig_against_expectation: supplied_sig={:?}\", supplied_sig);\n+        debug!(?supplied_sig);\n \n         // FIXME(#45727): As discussed in [this comment][c1], naively\n         // forcing equality here actually results in suboptimal error\n@@ -529,23 +533,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // [c2]: https://github.com/rust-lang/rust/pull/45072#issuecomment-341096796\n         self.commit_if_ok(|_| {\n             let mut all_obligations = vec![];\n+            let inputs: Vec<_> = iter::zip(\n+                decl.inputs,\n+                supplied_sig.inputs().skip_binder(), // binder moved to (*) below\n+            )\n+            .map(|(hir_ty, &supplied_ty)| {\n+                // Instantiate (this part of..) S to S', i.e., with fresh variables.\n+                self.replace_bound_vars_with_fresh_vars(\n+                    hir_ty.span,\n+                    LateBoundRegionConversionTime::FnCall,\n+                    // (*) binder moved to here\n+                    supplied_sig.inputs().rebind(supplied_ty),\n+                )\n+            })\n+            .collect();\n \n             // The liberated version of this signature should be a subtype\n             // of the liberated form of the expectation.\n             for ((hir_ty, &supplied_ty), expected_ty) in iter::zip(\n-                iter::zip(\n-                    decl.inputs,\n-                    supplied_sig.inputs().skip_binder(), // binder moved to (*) below\n-                ),\n+                iter::zip(decl.inputs, &inputs),\n                 expected_sigs.liberated_sig.inputs(), // `liberated_sig` is E'.\n             ) {\n-                // Instantiate (this part of..) S to S', i.e., with fresh variables.\n-                let supplied_ty = self.replace_bound_vars_with_fresh_vars(\n-                    hir_ty.span,\n-                    LateBoundRegionConversionTime::FnCall,\n-                    supplied_sig.inputs().rebind(supplied_ty),\n-                ); // recreated from (*) above\n-\n                 // Check that E' = S'.\n                 let cause = self.misc(hir_ty.span);\n                 let InferOk { value: (), obligations } =\n@@ -564,7 +572,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .eq(expected_sigs.liberated_sig.output(), supplied_output_ty)?;\n             all_obligations.extend(obligations);\n \n-            Ok(InferOk { value: (), obligations: all_obligations })\n+            let inputs = inputs.into_iter().map(|ty| self.resolve_vars_if_possible(ty));\n+\n+            expected_sigs.liberated_sig = self.tcx.mk_fn_sig(\n+                inputs,\n+                supplied_output_ty,\n+                expected_sigs.liberated_sig.c_variadic,\n+                hir::Unsafety::Normal,\n+                Abi::RustCall,\n+            );\n+\n+            Ok(InferOk { value: expected_sigs, obligations: all_obligations })\n         })\n     }\n "}, {"sha": "96fc7e6493ab94dc7e19a5e503c4bcd87791ef01", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -14,7 +14,7 @@ fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/retag.rs:+1:13: +1:15\n         _3 = _2;                         // scope 0 at $DIR/retag.rs:+1:18: +1:19\n         Retag(_3);                       // scope 0 at $DIR/retag.rs:+1:18: +1:19\n-        _0 = _2;                         // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        _0 = &(*_2);                     // scope 1 at $DIR/retag.rs:+2:9: +2:10\n         Retag(_0);                       // scope 1 at $DIR/retag.rs:+2:9: +2:10\n         StorageDead(_3);                 // scope 0 at $DIR/retag.rs:+3:5: +3:6\n         return;                          // scope 0 at $DIR/retag.rs:+3:6: +3:6"}, {"sha": "284fc1c21f5f9ac64c6be7eec1032005ee0db01a", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -25,26 +25,26 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:39:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `fn(&'x u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:48:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d5432755cfed3fd2981c31270e6effbfacd50fec", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -6,7 +6,7 @@ LL |     with_closure(|x: u32, y| {});\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     with_closure(|x: u32, y: B| {});\n+LL |     with_closure(|x: u32, y: _| {});\n    |                            +++\n \n error: aborting due to previous error"}, {"sha": "c5e7af81d3dd0948dfc95d3b101e7ea4216a62e3", "filename": "src/test/ui/type-alias-impl-trait/closure_args.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args.rs?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+// regression test for https://github.com/rust-lang/rust/issues/100800\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Anything {}\n+impl<T> Anything for T {}\n+type Input = impl Anything;\n+fn run<F: FnOnce(Input) -> ()>(f: F, i: Input) {\n+    f(i);\n+}\n+\n+fn main() {\n+    run(|x: u32| {println!(\"{x}\");}, 0);\n+}"}, {"sha": "82386c280a8e3182f47592809847c85eee056b37", "filename": "src/test/ui/type-alias-impl-trait/closure_args2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_args2.rs?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Foo {\n+    // This was reachable in https://github.com/rust-lang/rust/issues/100800\n+    fn foo(&self) { unreachable!() }\n+}\n+impl<T> Foo for T {}\n+\n+struct B;\n+impl B {\n+    fn foo(&self) {}\n+}\n+\n+type Input = impl Foo;\n+fn run1<F: FnOnce(Input)>(f: F, i: Input) {f(i)}\n+fn run2<F: FnOnce(B)>(f: F, i: B) {f(i)}\n+\n+fn main() {\n+    run1(|x: B| {x.foo()}, B);\n+    run2(|x: B| {x.foo()}, B);\n+}"}, {"sha": "d0c04371bd793faa8926a8a7404c1a8126a3e321", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edf9e5eb63e391edd5cb999179effa361b005c20/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=edf9e5eb63e391edd5cb999179effa361b005c20", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                        ^ the trait `Bug` is not implemented for `()`\n+   |                                        ^^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the trait `Bug` is implemented for `&()`\n "}]}