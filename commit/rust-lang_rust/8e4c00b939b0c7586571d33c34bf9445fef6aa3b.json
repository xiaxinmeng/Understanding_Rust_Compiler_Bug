{"sha": "8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNGMwMGI5MzliMGM3NTg2NTcxZDMzYzM0YmY5NDQ1ZmVmNmFhM2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:11:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:11Z"}, "message": "Rollup merge of #21958 - brson:stable-features, r=alexcrichton\n\n ....\n\nThe 'stable_features' lint helps people progress from unstable to\nstable Rust by telling them when they no longer need a `feature`\nattribute because upstream Rust has declared it stable.\n\nThis compares to the existing 'unstable_features' lint, which is used\nto implement feature staging, and triggers on *any* use\nof `#[feature]`.", "tree": {"sha": "89ef8898c2e1ccc763dd12d3f8ca161b8abb4397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ef8898c2e1ccc763dd12d3f8ca161b8abb4397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "html_url": "https://github.com/rust-lang/rust/commit/8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c28ad61a20f8c50b73ca9a6b4308acb62acdf2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c28ad61a20f8c50b73ca9a6b4308acb62acdf2c", "html_url": "https://github.com/rust-lang/rust/commit/6c28ad61a20f8c50b73ca9a6b4308acb62acdf2c"}, {"sha": "456d23e73ee5d8c22b67336061ed7b457742d7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/456d23e73ee5d8c22b67336061ed7b457742d7ff", "html_url": "https://github.com/rust-lang/rust/commit/456d23e73ee5d8c22b67336061ed7b457742d7ff"}], "stats": {"total": 100, "additions": 77, "deletions": 23}, "files": [{"sha": "e0566a1aabedaf7eb103cb51c5805245759ae5dc", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -2018,6 +2018,12 @@ declare_lint! {\n     \"unused or unknown features found in crate-level #[feature] directives\"\n }\n \n+declare_lint! {\n+    pub STABLE_FEATURES,\n+    Warn,\n+    \"stable features found in #[feature] directive\"\n+}\n+\n declare_lint! {\n     pub UNKNOWN_CRATE_TYPES,\n     Deny,\n@@ -2060,6 +2066,7 @@ impl LintPass for HardwiredLints {\n             UNREACHABLE_CODE,\n             WARNINGS,\n             UNUSED_FEATURES,\n+            STABLE_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             VARIANT_SIZE_DIFFERENCES,\n             FAT_PTR_TRANSMUTES"}, {"sha": "a0681e7e20c8a1207da0c896998b4c053fd6e6aa", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -201,16 +201,17 @@ impl Index {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors. Returns a list of all\n /// features used.\n-pub fn check_unstable_api_usage(tcx: &ty::ctxt) -> FnvHashSet<InternedString> {\n-    let ref active_lib_features = tcx.sess.features.borrow().lib_features;\n+pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n+                                -> FnvHashMap<InternedString, attr::StabilityLevel> {\n+    let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n \n     // Put the active features into a map for quick lookup\n     let active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n \n     let mut checker = Checker {\n         tcx: tcx,\n         active_features: active_features,\n-        used_features: FnvHashSet()\n+        used_features: FnvHashMap()\n     };\n \n     let krate = tcx.map.krate();\n@@ -223,7 +224,7 @@ pub fn check_unstable_api_usage(tcx: &ty::ctxt) -> FnvHashSet<InternedString> {\n struct Checker<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     active_features: FnvHashSet<InternedString>,\n-    used_features: FnvHashSet<InternedString>\n+    used_features: FnvHashMap<InternedString, attr::StabilityLevel>\n }\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n@@ -234,7 +235,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         match *stab {\n             Some(Stability { level: attr::Unstable, ref feature, ref reason, .. }) => {\n-                self.used_features.insert(feature.clone());\n+                self.used_features.insert(feature.clone(), attr::Unstable);\n \n                 if !self.active_features.contains(feature) {\n                     let msg = match *reason {\n@@ -247,7 +248,9 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                                       feature.get(), span, &msg[]);\n                 }\n             }\n-            Some(..) => {\n+            Some(Stability { level, ref feature, .. }) => {\n+                self.used_features.insert(feature.clone(), level);\n+\n                 // Stable APIs are always ok to call and deprecated APIs are\n                 // handled by a lint.\n             }\n@@ -433,17 +436,37 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n /// Given the list of enabled features that were not language features (i.e. that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_features(sess: &Session,\n-                             used_lib_features: &FnvHashSet<InternedString>) {\n-    let ref lib_features = sess.features.borrow().lib_features;\n-    let mut active_lib_features: FnvHashMap<InternedString, Span>\n-        = lib_features.clone().into_iter().collect();\n-\n-    for used_feature in used_lib_features {\n-        active_lib_features.remove(used_feature);\n+pub fn check_unused_or_stable_features(sess: &Session,\n+                                       lib_features_used: &FnvHashMap<InternedString,\n+                                                                      attr::StabilityLevel>) {\n+    let ref declared_lib_features = sess.features.borrow().declared_lib_features;\n+    let mut remaining_lib_features: FnvHashMap<InternedString, Span>\n+        = declared_lib_features.clone().into_iter().collect();\n+\n+    let stable_msg = \"this feature is stable. attribute no longer needed\";\n+\n+    for &span in sess.features.borrow().declared_stable_lang_features.iter() {\n+        sess.add_lint(lint::builtin::STABLE_FEATURES,\n+                      ast::CRATE_NODE_ID,\n+                      span,\n+                      stable_msg.to_string());\n+    }\n+\n+    for (used_lib_feature, level) in lib_features_used.iter() {\n+        match remaining_lib_features.remove(used_lib_feature) {\n+            Some(span) => {\n+                if *level == attr::Stable {\n+                    sess.add_lint(lint::builtin::STABLE_FEATURES,\n+                                  ast::CRATE_NODE_ID,\n+                                  span,\n+                                  stable_msg.to_string());\n+                }\n+            }\n+            None => ( /* used but undeclared, handled during the previous ast visit */ )\n+        }\n     }\n \n-    for (_, &span) in &active_lib_features {\n+    for (_, &span) in remaining_lib_features.iter() {\n         sess.add_lint(lint::builtin::UNUSED_FEATURES,\n                       ast::CRATE_NODE_ID,\n                       span,"}, {"sha": "eca20ef55fa069d10afdd67d476d3047bb2895aa", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -668,8 +668,8 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n         time(time_passes, \"stability checking\", (), |_|\n              stability::check_unstable_api_usage(&ty_cx));\n \n-    time(time_passes, \"unused feature checking\", (), |_|\n-         stability::check_unused_features(\n+    time(time_passes, \"unused lib feature checking\", (), |_|\n+         stability::check_unused_or_stable_features(\n              &ty_cx.sess, lib_features_used));\n \n     time(time_passes, \"lint checking\", (), |_|"}, {"sha": "a93ddbb23793b8257fba5309be59e5906c0a0684", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -149,7 +149,10 @@ pub struct Features {\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n-    pub lib_features: Vec<(InternedString, Span)>\n+    /// spans of #![feature] attrs for stable language features. for error reporting\n+    pub declared_stable_lang_features: Vec<Span>,\n+    /// #![feature] attrs for non-language (library) features\n+    pub declared_lib_features: Vec<(InternedString, Span)>\n }\n \n impl Features {\n@@ -162,7 +165,8 @@ impl Features {\n             old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n-            lib_features: Vec::new()\n+            declared_stable_lang_features: Vec::new(),\n+            declared_lib_features: Vec::new()\n         }\n     }\n }\n@@ -511,6 +515,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         cm: cm,\n     };\n \n+    let mut accepted_features = Vec::new();\n     let mut unknown_features = Vec::new();\n \n     for attr in &krate.attrs {\n@@ -550,8 +555,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n                         }\n                         Some(&(_, _, Accepted)) => {\n-                            span_handler.span_warn(mi.span, \"feature has been added to Rust, \\\n-                                                             directive not necessary\");\n+                            accepted_features.push(mi.span);\n                         }\n                         None => {\n                             unknown_features.push((name, mi.span));\n@@ -572,7 +576,8 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n-        lib_features: unknown_features\n+        declared_stable_lang_features: accepted_features,\n+        declared_lib_features: unknown_features\n     }\n }\n "}, {"sha": "5baafd4153159f3f6b27b31c5b0042720c51484e", "filename": "src/test/compile-fail/gated-bad-feature.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -20,4 +20,3 @@\n #![feature = \"foo\"] //~ ERROR: malformed feature\n \n #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n-#![feature(test_accepted_feature)] //~ WARNING: feature has been added"}, {"sha": "30eb4112c3fb2e40a0814f1baff9baf825163d3c", "filename": "src/test/compile-fail/stable-features.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c00b939b0c7586571d33c34bf9445fef6aa3b/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstable-features.rs?ref=8e4c00b939b0c7586571d33c34bf9445fef6aa3b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing that the stable_features lint catches use of stable\n+// language and lib features.\n+\n+#![deny(stable_features)]\n+#![feature(test_accepted_feature)] //~ ERROR this feature is stable\n+#![feature(rust1)] //~ ERROR this feature is stable\n+\n+fn main() {\n+    let _foo: Vec<()> = Vec::new();\n+}"}]}