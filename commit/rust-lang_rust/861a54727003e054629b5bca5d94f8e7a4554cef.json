{"sha": "861a54727003e054629b5bca5d94f8e7a4554cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MWE1NDcyNzAwM2UwNTQ2MjliNWJjYTVkOTRmOGU3YTQ1NTRjZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-05T14:52:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T14:52:21Z"}, "message": "Merge #7170\n\n7170: More maintainable caps config r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5561d3edccb67edf816702eecff02e313abee904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5561d3edccb67edf816702eecff02e313abee904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861a54727003e054629b5bca5d94f8e7a4554cef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9H0lCRBK7hj4Ov3rIwAAdHIIABxae0L2WLIh6bA5hi+FWT8d\ni1xquVoglmKLnzEzZ4seTeic9DXwdkY+bnEof4tJTaXryHSp9H8i3aVh5IQ7EiDf\n1gsZymijMvknEd/l0+S7Bq+35wLuF9iLkf7KI7Dc+0qc5I4T9je1Sc/ESEirM0fM\nNMqmMM8LHcARJdmDN6yRb3GMZIfyBWlGA7TVQJ06NPdLAfp9mmaKU0hvUTPzjfZd\nivz+G+dCUByeet2Jhz2igzjAj+UYCP53bXKyfKvzkQSVKgdIqTjGgx92B3tm8Wn+\nEvx/x5nBQlSN7hlOQ5aFiCUgQqUmngpXBvhFzt7JaJylS+zaoQmrArYoRAaDRVE=\n=GKzl\n-----END PGP SIGNATURE-----\n", "payload": "tree 5561d3edccb67edf816702eecff02e313abee904\nparent 16c544a497f0be98aeba94044f0856406eb589fe\nparent 624eb1ee54e759c03d07c06e5e68dec7f36cb519\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609858341 +0000\ncommitter GitHub <noreply@github.com> 1609858341 +0000\n\nMerge #7170\n\n7170: More maintainable caps config r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861a54727003e054629b5bca5d94f8e7a4554cef", "html_url": "https://github.com/rust-lang/rust/commit/861a54727003e054629b5bca5d94f8e7a4554cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861a54727003e054629b5bca5d94f8e7a4554cef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c544a497f0be98aeba94044f0856406eb589fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c544a497f0be98aeba94044f0856406eb589fe", "html_url": "https://github.com/rust-lang/rust/commit/16c544a497f0be98aeba94044f0856406eb589fe"}, {"sha": "624eb1ee54e759c03d07c06e5e68dec7f36cb519", "url": "https://api.github.com/repos/rust-lang/rust/commits/624eb1ee54e759c03d07c06e5e68dec7f36cb519", "html_url": "https://github.com/rust-lang/rust/commit/624eb1ee54e759c03d07c06e5e68dec7f36cb519"}], "stats": {"total": 207, "additions": 124, "deletions": 83}, "files": [{"sha": "a80652e8399778b6efa8eb22626a6c0cf40c7a69", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 92, "deletions": 62, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -175,7 +175,7 @@ config_data! {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    pub client_caps: ClientCapsConfig,\n+    pub caps: lsp_types::ClientCapabilities,\n \n     pub publish_diagnostics: bool,\n     pub diagnostics: DiagnosticsConfig,\n@@ -286,26 +286,12 @@ pub struct RunnablesConfig {\n     pub cargo_extra_args: Vec<String>,\n }\n \n-#[derive(Debug, Clone, Default)]\n-pub struct ClientCapsConfig {\n-    pub location_link: bool,\n-    pub line_folding_only: bool,\n-    pub hierarchical_symbols: bool,\n-    pub code_action_literals: bool,\n-    pub work_done_progress: bool,\n-    pub code_action_group: bool,\n-    pub code_action_resolve: bool,\n-    pub hover_actions: bool,\n-    pub status_notification: bool,\n-    pub signature_help_label_offsets: bool,\n-}\n-\n impl Config {\n     pub fn new(root_path: AbsPathBuf) -> Self {\n         // Defaults here don't matter, we'll immediately re-write them with\n         // ConfigData.\n         let mut res = Config {\n-            client_caps: ClientCapsConfig::default(),\n+            caps: lsp_types::ClientCapabilities::default(),\n \n             publish_diagnostics: false,\n             diagnostics: DiagnosticsConfig::default(),\n@@ -505,38 +491,11 @@ impl Config {\n     }\n \n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n+        self.caps = caps.clone();\n         if let Some(doc_caps) = caps.text_document.as_ref() {\n             if let Some(value) = doc_caps.hover.as_ref().and_then(|it| it.content_format.as_ref()) {\n                 self.hover.markdown = value.contains(&MarkupKind::Markdown)\n             }\n-            if let Some(value) = doc_caps.definition.as_ref().and_then(|it| it.link_support) {\n-                self.client_caps.location_link = value;\n-            }\n-            if let Some(value) = doc_caps.folding_range.as_ref().and_then(|it| it.line_folding_only)\n-            {\n-                self.client_caps.line_folding_only = value\n-            }\n-            if let Some(value) = doc_caps\n-                .document_symbol\n-                .as_ref()\n-                .and_then(|it| it.hierarchical_document_symbol_support)\n-            {\n-                self.client_caps.hierarchical_symbols = value\n-            }\n-            if let Some(value) =\n-                doc_caps.code_action.as_ref().map(|it| it.code_action_literal_support.is_some())\n-            {\n-                self.client_caps.code_action_literals = value;\n-            }\n-            if let Some(value) = doc_caps\n-                .signature_help\n-                .as_ref()\n-                .and_then(|it| it.signature_information.as_ref())\n-                .and_then(|it| it.parameter_information.as_ref())\n-                .and_then(|it| it.label_offset_support)\n-            {\n-                self.client_caps.signature_help_label_offsets = value;\n-            }\n \n             self.completion.allow_snippets(false);\n             self.completion.active_resolve_capabilities =\n@@ -548,20 +507,6 @@ impl Config {\n                     }\n                 }\n             }\n-\n-            if let Some(code_action) = &doc_caps.code_action {\n-                if let Some(resolve_support) = &code_action.resolve_support {\n-                    if resolve_support.properties.iter().any(|it| it == \"edit\") {\n-                        self.client_caps.code_action_resolve = true;\n-                    }\n-                }\n-            }\n-        }\n-\n-        if let Some(window_caps) = caps.window.as_ref() {\n-            if let Some(value) = window_caps.work_done_progress {\n-                self.client_caps.work_done_progress = value;\n-            }\n         }\n \n         self.assist.allow_snippets(false);\n@@ -571,10 +516,6 @@ impl Config {\n \n             let snippet_text_edit = get_bool(\"snippetTextEdit\");\n             self.assist.allow_snippets(snippet_text_edit);\n-\n-            self.client_caps.code_action_group = get_bool(\"codeActionGroup\");\n-            self.client_caps.hover_actions = get_bool(\"hoverActions\");\n-            self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }\n \n         if let Some(workspace_caps) = caps.workspace.as_ref() {\n@@ -597,6 +538,95 @@ impl Config {\n     }\n }\n \n+macro_rules! try_ {\n+    ($expr:expr) => {\n+        || -> _ { Some($expr) }()\n+    };\n+}\n+macro_rules! try_or {\n+    ($expr:expr, $or:expr) => {\n+        try_!($expr).unwrap_or($or)\n+    };\n+}\n+\n+impl Config {\n+    pub fn location_link(&self) -> bool {\n+        try_or!(self.caps.text_document.as_ref()?.definition?.link_support?, false)\n+    }\n+    pub fn line_folding_only(&self) -> bool {\n+        try_or!(self.caps.text_document.as_ref()?.folding_range.as_ref()?.line_folding_only?, false)\n+    }\n+    pub fn hierarchical_symbols(&self) -> bool {\n+        try_or!(\n+            self.caps\n+                .text_document\n+                .as_ref()?\n+                .document_symbol\n+                .as_ref()?\n+                .hierarchical_document_symbol_support?,\n+            false\n+        )\n+    }\n+    pub fn code_action_literals(&self) -> bool {\n+        try_!(self\n+            .caps\n+            .text_document\n+            .as_ref()?\n+            .code_action\n+            .as_ref()?\n+            .code_action_literal_support\n+            .as_ref()?)\n+        .is_some()\n+    }\n+    pub fn work_done_progress(&self) -> bool {\n+        try_or!(self.caps.window.as_ref()?.work_done_progress?, false)\n+    }\n+    pub fn code_action_resolve(&self) -> bool {\n+        try_or!(\n+            self.caps\n+                .text_document\n+                .as_ref()?\n+                .code_action\n+                .as_ref()?\n+                .resolve_support\n+                .as_ref()?\n+                .properties\n+                .as_slice(),\n+            &[]\n+        )\n+        .iter()\n+        .any(|it| it == \"edit\")\n+    }\n+    pub fn signature_help_label_offsets(&self) -> bool {\n+        try_or!(\n+            self.caps\n+                .text_document\n+                .as_ref()?\n+                .signature_help\n+                .as_ref()?\n+                .signature_information\n+                .as_ref()?\n+                .parameter_information\n+                .as_ref()?\n+                .label_offset_support?,\n+            false\n+        )\n+    }\n+\n+    fn experimental(&self, index: &'static str) -> bool {\n+        try_or!(self.caps.experimental.as_ref()?.get(index)?.as_bool()?, false)\n+    }\n+    pub fn code_action_group(&self) -> bool {\n+        self.experimental(\"codeActionGroup\")\n+    }\n+    pub fn hover_actions(&self) -> bool {\n+        self.experimental(\"hoverActions\")\n+    }\n+    pub fn status_notification(&self) -> bool {\n+        self.experimental(\"statusNotification\")\n+    }\n+}\n+\n #[derive(Deserialize)]\n #[serde(untagged)]\n enum ManifestOrProjectJson {"}, {"sha": "c13cdc4e3837c447830bf93a4de82e74a0c55a9b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -320,7 +320,7 @@ pub(crate) fn handle_document_symbol(\n         acc\n     };\n \n-    let res = if snap.config.client_caps.hierarchical_symbols {\n+    let res = if snap.config.hierarchical_symbols() {\n         document_symbols.into()\n     } else {\n         let url = to_proto::url(&snap, file_id);\n@@ -727,7 +727,7 @@ pub(crate) fn handle_folding_range(\n     let folds = snap.analysis.folding_ranges(file_id)?;\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n-    let line_folding_only = snap.config.client_caps.line_folding_only;\n+    let line_folding_only = snap.config.line_folding_only();\n     let res = folds\n         .into_iter()\n         .map(|it| to_proto::folding_range(&*text, &line_index, line_folding_only, it))\n@@ -746,11 +746,8 @@ pub(crate) fn handle_signature_help(\n         None => return Ok(None),\n     };\n     let concise = !snap.config.call_info_full;\n-    let res = to_proto::signature_help(\n-        call_info,\n-        concise,\n-        snap.config.client_caps.signature_help_label_offsets,\n-    );\n+    let res =\n+        to_proto::signature_help(call_info, concise, snap.config.signature_help_label_offsets());\n     Ok(Some(res))\n }\n \n@@ -929,7 +926,7 @@ pub(crate) fn handle_code_action(\n     // We intentionally don't support command-based actions, as those either\n     // requires custom client-code anyway, or requires server-initiated edits.\n     // Server initiated edits break causality, so we avoid those as well.\n-    if !snap.config.client_caps.code_action_literals {\n+    if !snap.config.code_action_literals() {\n         return Ok(None);\n     }\n \n@@ -959,7 +956,7 @@ pub(crate) fn handle_code_action(\n         add_quick_fixes(&snap, frange, &line_index, &mut res)?;\n     }\n \n-    if snap.config.client_caps.code_action_resolve {\n+    if snap.config.code_action_resolve() {\n         for (index, assist) in\n             snap.analysis.assists(&assists_config, false, frange)?.into_iter().enumerate()\n         {\n@@ -1542,7 +1539,7 @@ fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n }\n \n fn goto_location_command(snap: &GlobalStateSnapshot, nav: &NavigationTarget) -> Option<Command> {\n-    let value = if snap.config.client_caps.location_link {\n+    let value = if snap.config.location_link() {\n         let link = to_proto::location_link(snap, None, nav.clone()).ok()?;\n         to_value(link).ok()?\n     } else {\n@@ -1641,7 +1638,7 @@ fn prepare_hover_actions(\n     file_id: FileId,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover.none() || !snap.config.client_caps.hover_actions {\n+    if snap.config.hover.none() || !snap.config.hover_actions() {\n         return Vec::new();\n     }\n "}, {"sha": "40de56dadc46763fc9e6d78b13d0b472bf2b9595", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -46,7 +46,7 @@ impl GlobalState {\n         message: Option<String>,\n         fraction: Option<f64>,\n     ) {\n-        if !self.config.client_caps.work_done_progress {\n+        if !self.config.work_done_progress() {\n             return;\n         }\n         let percentage = fraction.map(|f| {"}, {"sha": "ce5cedeb34722354238e967836c6331ed440fe83", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -79,7 +79,7 @@ impl GlobalState {\n     }\n     pub(crate) fn transition(&mut self, new_status: Status) {\n         self.status = new_status;\n-        if self.config.client_caps.status_notification {\n+        if self.config.status_notification() {\n             let lsp_status = match new_status {\n                 Status::Loading => lsp_ext::Status::Loading,\n                 Status::Ready => lsp_ext::Status::Ready,"}, {"sha": "e0413ec06e1f26debc3918ab5765938b2dbbf377", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -605,7 +605,7 @@ pub(crate) fn goto_definition_response(\n     src: Option<FileRange>,\n     targets: Vec<NavigationTarget>,\n ) -> Result<lsp_types::GotoDefinitionResponse> {\n-    if snap.config.client_caps.location_link {\n+    if snap.config.location_link() {\n         let links = targets\n             .into_iter()\n             .map(|nav| location_link(snap, src, nav))\n@@ -785,7 +785,7 @@ pub(crate) fn unresolved_code_action(\n     assert!(assist.source_change.is_none());\n     let res = lsp_ext::CodeAction {\n         title: assist.label.to_string(),\n-        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        group: assist.group.filter(|_| snap.config.code_action_group()).map(|gr| gr.0),\n         kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         is_preferred: None,\n@@ -805,7 +805,7 @@ pub(crate) fn resolved_code_action(\n     let res = lsp_ext::CodeAction {\n         edit: Some(snippet_workspace_edit(snap, change)?),\n         title: assist.label.to_string(),\n-        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        group: assist.group.filter(|_| snap.config.code_action_group()).map(|gr| gr.0),\n         kind: Some(code_action_kind(assist.id.1)),\n         is_preferred: None,\n         data: None,"}, {"sha": "aac7dbccec081e64879e0bab03b03c8ca940b31b", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861a54727003e054629b5bca5d94f8e7a4554cef/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=861a54727003e054629b5bca5d94f8e7a4554cef", "patch": "@@ -14,7 +14,7 @@ use lsp_types::{\n use lsp_types::{ProgressParams, ProgressParamsValue};\n use project_model::{CargoConfig, ProjectManifest};\n use rust_analyzer::{\n-    config::{ClientCapsConfig, Config, FilesConfig, FilesWatcher, LinkedProject},\n+    config::{Config, FilesConfig, FilesWatcher, LinkedProject},\n     main_loop,\n };\n use serde::Serialize;\n@@ -84,10 +84,24 @@ impl<'a> Project<'a> {\n             .collect::<Vec<_>>();\n \n         let mut config = Config {\n-            client_caps: ClientCapsConfig {\n-                location_link: true,\n-                code_action_literals: true,\n-                work_done_progress: true,\n+            caps: lsp_types::ClientCapabilities {\n+                text_document: Some(lsp_types::TextDocumentClientCapabilities {\n+                    definition: Some(lsp_types::GotoCapability {\n+                        link_support: Some(true),\n+                        ..Default::default()\n+                    }),\n+                    code_action: Some(lsp_types::CodeActionClientCapabilities {\n+                        code_action_literal_support: Some(\n+                            lsp_types::CodeActionLiteralSupport::default(),\n+                        ),\n+                        ..Default::default()\n+                    }),\n+                    ..Default::default()\n+                }),\n+                window: Some(lsp_types::WindowClientCapabilities {\n+                    work_done_progress: Some(true),\n+                    ..Default::default()\n+                }),\n                 ..Default::default()\n             },\n             cargo: CargoConfig { no_sysroot: !self.with_sysroot, ..Default::default() },"}]}