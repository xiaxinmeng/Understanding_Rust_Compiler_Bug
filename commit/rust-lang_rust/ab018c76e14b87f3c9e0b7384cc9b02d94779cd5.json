{"sha": "ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDE4Yzc2ZTE0Yjg3ZjNjOWUwYjczODRjYzliMDJkOTQ3NzljZDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-30T16:59:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-09-17T19:41:45Z"}, "message": "Add a file to trivially disable tool building or testing", "tree": {"sha": "190874457ed007f526e58b1c5dd31656592c5d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190874457ed007f526e58b1c5dd31656592c5d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCABKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlm+z/ksHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASF\nkBAAj5XAPVVEinCTVJWjivU6ZWKWr7sWhvMO+qWMRmIkLJ6LuKBdNdLAsu6jD2QL\nUbA5iIYtLcmTZNjctqBehMrCGpPmPutpL0RIkdLVExkp11BpTAHG8aDfl/SpfDnk\nk64KgCXtV+Yj2Kdz8IHZYvHg/qCxPq/4SNslPIt/+n1Qk30Oe27KP/vLara8J94A\npBiporMIcNQNWh1TUnY5v+ZnYv102YF6wf+B3WBEaNtmGiVsr9dVYCkMMJexXSBK\npudGPgr/mDTLMFNMkltPi/8ZzimkkuhLbgDq4NrHA/ddAIGNZNKNxvxMGSN81TZb\nXb/pd+aaummV9RTVmPnzCuTO4K8eJPEI3YlQv/Xlvw7XKvTnkAUuhUqU6OnUz198\nszse6iNEXNx0+BX9/ob8vPSAYThkfngFkJ+ir5JLKEA93QSBp6UTNffZVNgNF2iz\nktgNqQ6qJTOTilJmlTIyjhT484qByEhyXMoTqA900lqEk/rn2NikUoEGU95hXue6\n8WGj8zqLKeABBcHeV3Pm1RpZHNj35xsxUXoou7RRoq/IZwk3MqJs4N6gzVtBpOnX\nmA7+qQBVhLFyqrucE5UxDrBmbLPQkMa/V7OlgftSEBk5M6P5HiY+XqAqbNRkvste\nu3K+LPHq3eqHZWpdhJYSBAuKf5RNE8pu/H9MXzLzte+Qiac=\n=rsN3\n-----END PGP SIGNATURE-----", "payload": "tree 190874457ed007f526e58b1c5dd31656592c5d49\nparent f0b5402283f131f04132d77babecc41949fe35c8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504112366 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1505677305 +0200\n\nAdd a file to trivially disable tool building or testing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "html_url": "https://github.com/rust-lang/rust/commit/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0b5402283f131f04132d77babecc41949fe35c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b5402283f131f04132d77babecc41949fe35c8", "html_url": "https://github.com/rust-lang/rust/commit/f0b5402283f131f04132d77babecc41949fe35c8"}], "stats": {"total": 246, "additions": 203, "deletions": 43}, "files": [{"sha": "78ec2579c4aa7c4383d71af2dd3bc6aa0d8e80cd", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -23,7 +23,7 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::io::Read;\n \n-use build_helper::{self, output};\n+use build_helper::{self, output, BuildExpectation};\n \n use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use cache::{INTERNER, Interned};\n@@ -33,6 +33,7 @@ use native;\n use tool::{self, Tool};\n use util::{self, dylib_path, dylib_path_var};\n use {Build, Mode};\n+use toolstate::ToolState;\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -64,17 +65,21 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run(build: &Build, cmd: &mut Command) {\n+fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) {\n     if !build.fail_fast {\n-        if !build.try_run(cmd) {\n+        if !build.try_run(cmd, expect) {\n             let failures = build.delayed_failures.get();\n             build.delayed_failures.set(failures + 1);\n         }\n     } else {\n-        build.run(cmd);\n+        build.run_expecting(cmd, expect);\n     }\n }\n \n+fn try_run(build: &Build, cmd: &mut Command) {\n+    try_run_expecting(build, cmd, BuildExpectation::None)\n+}\n+\n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n     if !build.fail_fast {\n         if !build.try_run_quiet(cmd) {\n@@ -333,7 +338,11 @@ impl Step for Miri {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        try_run(build, &mut cargo);\n+        try_run_expecting(\n+            build,\n+            &mut cargo,\n+            builder.build.config.toolstate.miri.passes(ToolState::Testing),\n+        );\n     }\n }\n "}, {"sha": "c8b2ed042c11948f9baf7258eed86b8d9672a44b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -27,6 +27,7 @@ use util::exe;\n use cache::{INTERNER, Interned};\n use flags::Flags;\n pub use flags::Subcommand;\n+use toolstate::ToolStates;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -131,6 +132,8 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+\n+    pub toolstate: ToolStates,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -333,6 +336,18 @@ impl Config {\n             }\n         }).unwrap_or_else(|| TomlConfig::default());\n \n+        let toolstate_toml_path = config.src.join(\"src/tools/toolstate.toml\");\n+        let parse_toolstate = || -> Result<_, Box<::std::error::Error>> {\n+            let mut f = File::open(toolstate_toml_path)?;\n+            let mut contents = String::new();\n+            f.read_to_string(&mut contents)?;\n+            Ok(toml::from_str(&contents)?)\n+        };\n+        config.toolstate = parse_toolstate().unwrap_or_else(|err| {\n+            println!(\"failed to parse TOML configuration 'toolstate.toml': {}\", err);\n+            process::exit(2);\n+        });\n+\n         let build = toml.build.clone().unwrap_or(Build::default());\n         set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n         set(&mut config.build, flags.build);"}, {"sha": "6bca17c8ba860580421c7bc6f9814ab19b985e05", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -143,7 +143,8 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::slice;\n \n-use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime,\n+                   BuildExpectation};\n \n use util::{exe, libdir, OutputFolder, CiEnv};\n \n@@ -164,6 +165,7 @@ pub mod util;\n mod builder;\n mod cache;\n mod tool;\n+mod toolstate;\n \n #[cfg(windows)]\n mod job;\n@@ -542,32 +544,39 @@ impl Build {\n             .join(libdir(&self.config.build))\n     }\n \n+    /// Runs a command, printing out nice contextual information if its build\n+    /// status is not the expected one\n+    fn run_expecting(&self, cmd: &mut Command, expect: BuildExpectation) {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        run_silent(cmd, expect)\n+    }\n+\n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n-        self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_silent(cmd)\n+        self.run_expecting(cmd, BuildExpectation::None)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_suppressed(cmd)\n+        run_suppressed(cmd, BuildExpectation::None)\n     }\n \n-    /// Runs a command, printing out nice contextual information if it fails.\n-    /// Exits if the command failed to execute at all, otherwise returns its\n-    /// `status.success()`.\n-    fn try_run(&self, cmd: &mut Command) -> bool {\n+    /// Runs a command, printing out nice contextual information if its build\n+    /// status is not the expected one.\n+    /// Exits if the command failed to execute at all, otherwise returns whether\n+    /// the expectation was met\n+    fn try_run(&self, cmd: &mut Command, expect: BuildExpectation) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_silent(cmd)\n+        try_run_silent(cmd, expect)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_suppressed(cmd)\n+        try_run_suppressed(cmd, BuildExpectation::None)\n     }\n \n     pub fn is_verbose(&self) -> bool {"}, {"sha": "4e422473b9ad485b5411a66a02dd10a471d45bce", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -21,6 +21,8 @@ use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n use native;\n use channel::GitInfo;\n use cache::Interned;\n+use toolstate::ToolState;\n+use build_helper::BuildExpectation;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct CleanTools {\n@@ -64,6 +66,7 @@ struct ToolBuild {\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n+    expectation: BuildExpectation,\n }\n \n impl Step for ToolBuild {\n@@ -83,6 +86,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n+        let expectation = self.expectation;\n \n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n@@ -95,7 +99,7 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        build.run(&mut cargo);\n+        build.run_expecting(&mut cargo, expectation);\n         build.cargo_out(compiler, Mode::Tool, target).join(exe(tool, &compiler.host))\n     }\n }\n@@ -200,6 +204,7 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n+                    expectation: BuildExpectation::None,\n                 })\n             }\n         }\n@@ -247,6 +252,7 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n             path: \"src/tools/remote-test-server\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -359,6 +365,7 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n             path: \"src/tools/cargo\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -398,6 +405,7 @@ impl Step for Clippy {\n             tool: \"clippy\",\n             mode: Mode::Librustc,\n             path: \"src/tools/clippy\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -441,6 +449,7 @@ impl Step for Rls {\n             tool: \"rls\",\n             mode: Mode::Librustc,\n             path: \"src/tools/rls\",\n+            expectation: BuildExpectation::None,\n         })\n     }\n }\n@@ -492,8 +501,8 @@ impl Step for Miri {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        let builder = run.builder;\n-        run.path(\"src/tools/miri\").default_condition(builder.build.config.test_miri)\n+        let build_miri = run.builder.build.config.test_miri;\n+        run.path(\"src/tools/miri\").default_condition(build_miri)\n     }\n \n     fn make_run(run: RunConfig) {\n@@ -510,6 +519,7 @@ impl Step for Miri {\n             tool: \"miri\",\n             mode: Mode::Librustc,\n             path: \"src/tools/miri\",\n+            expectation: builder.build.config.toolstate.miri.passes(ToolState::Compiling),\n         })\n     }\n }"}, {"sha": "9556a8b52df6745d7aa99780ed1a49f8a0b96b08", "filename": "src/bootstrap/toolstate.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use build_helper::BuildExpectation;\n+\n+#[derive(Copy, Clone, Debug, Deserialize, PartialEq, Eq)]\n+/// Whether a tool can be compiled, tested or neither\n+pub enum ToolState {\n+    /// The tool compiles successfully, but the test suite fails\n+    Compiling = 1,\n+    /// The tool compiles successfully and its test suite passes\n+    Testing = 2,\n+    /// The tool can't even be compiled\n+    Broken = 0,\n+}\n+\n+impl ToolState {\n+    /// If a tool with the current toolstate should be working on\n+    /// the given toolstate\n+    pub fn passes(self, other: ToolState) -> BuildExpectation {\n+        if self as usize >= other as usize {\n+            BuildExpectation::Succeeding\n+        } else {\n+            BuildExpectation::Failing\n+        }\n+    }\n+}\n+\n+impl Default for ToolState {\n+    fn default() -> Self {\n+        // err on the safe side\n+        ToolState::Broken\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Deserialize, Default)]\n+/// Used to express which tools should (not) be compiled or tested.\n+/// This is created from `toolstate.toml`.\n+pub struct ToolStates {\n+    pub miri: ToolState,\n+}"}, {"sha": "e81dab70b43e702112b119cad19951ece97c02e2", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -35,55 +35,97 @@ macro_rules! t {\n     })\n }\n \n-pub fn run(cmd: &mut Command) {\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub enum BuildExpectation {\n+    Succeeding,\n+    Failing,\n+    None,\n+}\n+\n+pub fn run(cmd: &mut Command, expect: BuildExpectation) {\n     println!(\"running: {:?}\", cmd);\n-    run_silent(cmd);\n+    run_silent(cmd, expect);\n }\n \n-pub fn run_silent(cmd: &mut Command) {\n-    if !try_run_silent(cmd) {\n+pub fn run_silent(cmd: &mut Command, expect: BuildExpectation) {\n+    if !try_run_silent(cmd, expect) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_silent(cmd: &mut Command) -> bool {\n+pub fn try_run_silent(cmd: &mut Command, expect: BuildExpectation) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    if !status.success() {\n-        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-                  expected success, got: {}\\n\\n\",\n-                 cmd,\n-                 status);\n+    process_status(\n+        cmd,\n+        status.success(),\n+        expect,\n+        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                    expected success, got: {}\\n\\n\",\n+                    cmd,\n+                    status))\n+}\n+\n+fn process_status<F: FnOnce()>(\n+    cmd: &Command,\n+    success: bool,\n+    expect: BuildExpectation,\n+    f: F,\n+) -> bool {\n+    use BuildExpectation::*;\n+    match (expect, success) {\n+        (None, false) => { f(); false },\n+        // Non-tool build succeeds, everything is good\n+        (None, true) => true,\n+        // Tool expected to work and is working\n+        (Succeeding, true) => true,\n+        // Tool expected to fail and is failing\n+        (Failing, false) => {\n+            println!(\"This failure is expected (see `src/tools/toolstate.toml`)\");\n+            true\n+        },\n+        // Tool expected to work, but is failing\n+        (Succeeding, false) => {\n+            f();\n+            println!(\"You can disable the tool in `src/tools/toolstate.toml`\");\n+            false\n+        },\n+        // Tool expected to fail, but is working\n+        (Failing, true) => {\n+            println!(\"Expected `{:?}` to fail, but it succeeded.\\n\\\n+                     Please adjust `src/tools/toolstate.toml` accordingly\", cmd);\n+            false\n+        }\n     }\n-    status.success()\n }\n \n-pub fn run_suppressed(cmd: &mut Command) {\n-    if !try_run_suppressed(cmd) {\n+pub fn run_suppressed(cmd: &mut Command, expect: BuildExpectation) {\n+    if !try_run_suppressed(cmd, expect) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n+pub fn try_run_suppressed(cmd: &mut Command, expect: BuildExpectation) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    if !output.status.success() {\n-        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+    process_status(\n+        cmd,\n+        output.status.success(),\n+        expect,\n+        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\\n\\n\\\n                   stdout ----\\n{}\\n\\\n                   stderr ----\\n{}\\n\\n\",\n                  cmd,\n                  output.status,\n                  String::from_utf8_lossy(&output.stdout),\n-                 String::from_utf8_lossy(&output.stderr));\n-    }\n-    output.status.success()\n+                 String::from_utf8_lossy(&output.stderr)))\n }\n \n pub fn gnu_target(target: &str) -> String {"}, {"sha": "d89d3bcdb62a50c0ec889831e29f9ac939cc9cbd", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -16,7 +16,7 @@ extern crate gcc;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate};\n+use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n \n fn main() {\n     // FIXME: This is a hack to support building targets that don't\n@@ -126,7 +126,7 @@ fn main() {\n         cmd.arg(\"--with-lg-quantum=4\");\n     }\n \n-    run(&mut cmd);\n+    run(&mut cmd, BuildExpectation::None);\n \n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&native.out_dir)\n@@ -143,7 +143,7 @@ fn main() {\n             .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\"));\n     }\n \n-    run(&mut make);\n+    run(&mut make, BuildExpectation::None);\n \n     // The pthread_atfork symbols is used by jemalloc on android but the really\n     // old android we're building on doesn't have them defined, so just make"}, {"sha": "19ea25fc7df0711a892d7ad0aaff7178db8784fc", "filename": "src/libstd/build.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -15,7 +15,7 @@ extern crate gcc;\n \n use std::env;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate};\n+use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -97,11 +97,14 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .env(\"CC\", compiler.path())\n                 .env(\"AR\", &ar)\n                 .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n-                .env(\"CFLAGS\", cflags));\n+                .env(\"CFLAGS\", cflags),\n+        BuildExpectation::None);\n \n     run(Command::new(build_helper::make(host))\n                 .current_dir(&native.out_dir)\n                 .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n-                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")),\n+        BuildExpectation::None);\n+\n     Ok(())\n }"}, {"sha": "697be4efadbc882397402caaa72b0a5d34432c6d", "filename": "src/tools/toolstate.toml", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ab018c76e14b87f3c9e0b7384cc9b02d94779cd5/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=ab018c76e14b87f3c9e0b7384cc9b02d94779cd5", "patch": "@@ -0,0 +1,24 @@\n+# This file reflects the current status of all tools which are allowed\n+# to fail without failing the build.\n+#\n+# There are three states a tool can be in:\n+# 1. Broken: The tool doesn't build\n+# 2. Building: The tool builds but its tests are failing\n+# 3. Testing: The tool builds and its tests are passing\n+#\n+# In the future there will be further states like \"Distributing\", which\n+# configures whether the tool is included in the Rust distribution.\n+#\n+# If a tool was working before your PR but is broken now, consider\n+# updating the tool within your PR. How to do that is described in\n+# \"CONTRIBUTING.md#External Dependencies\". If the effort required is not\n+# warranted (e.g. due to the tool abusing some API that you changed, and\n+# fixing the tool would mean a significant refactoring), you can disable\n+# the tool here, by changing its state to `Broken`. Remember to ping\n+# the tool authors if you do not fix their tool, so they can proactively\n+# fix it, instead of being surprised by the breakage.\n+#\n+# Each tool has a list of people to ping\n+\n+# ping @oli-obk @RalfJung @eddyb\n+miri = \"Testing\""}]}