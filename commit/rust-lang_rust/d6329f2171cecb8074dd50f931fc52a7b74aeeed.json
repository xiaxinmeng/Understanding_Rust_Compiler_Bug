{"sha": "d6329f2171cecb8074dd50f931fc52a7b74aeeed", "node_id": "C_kwDOAAsO6NoAKGQ2MzI5ZjIxNzFjZWNiODA3NGRkNTBmOTMxZmM1MmE3Yjc0YWVlZWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-03T15:38:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-03T15:38:45Z"}, "message": "Merge #11401\n\n11401: Sort completion calls lexicographically r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f82cbd9b6f6ef72ffc0484442f3bfad4626c132c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82cbd9b6f6ef72ffc0484442f3bfad4626c132c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6329f2171cecb8074dd50f931fc52a7b74aeeed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+/cFCRBK7hj4Ov3rIwAApcYIAHuKws158am06Ra4Nzt64LCv\nErJMAbyvev1mkU0kzx4PLF0+1FeywbyNOuI3JT2hCD14+2plyRV2KTwvOcHHAn+p\nR1beF1XsOpKx1UiAeEkpwX3fUaU9xMf7NbwVonPrZFkZxYWw/OMgEkToo+Nbfc5D\nYjuVEjdTL4Lp+OULLh4xmFiZxZPO1UFJ0CXWdOsPUg0RgIkqLXfS7XdLrauHEk1c\nDmpQhN9P17fF9PvvBJrQ1f1o9cmjblqdQgZQ4iiwioZ5iIUY/NsiEBt3fhwVyGvN\nHlIeL8dd8lCSnYH2raTt8OY1Yogze3VJwgfta2pPdx1sgxlEKoRaelYNFGBZOp8=\n=96Qv\n-----END PGP SIGNATURE-----\n", "payload": "tree f82cbd9b6f6ef72ffc0484442f3bfad4626c132c\nparent 5a7e11f5fbc6cdf7af79afe70a94c78b79e366d2\nparent c83081879f72ff745edc901dcd6f954edfc414a4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643902725 +0000\ncommitter GitHub <noreply@github.com> 1643902725 +0000\n\nMerge #11401\n\n11401: Sort completion calls lexicographically r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6329f2171cecb8074dd50f931fc52a7b74aeeed", "html_url": "https://github.com/rust-lang/rust/commit/d6329f2171cecb8074dd50f931fc52a7b74aeeed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6329f2171cecb8074dd50f931fc52a7b74aeeed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7e11f5fbc6cdf7af79afe70a94c78b79e366d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e11f5fbc6cdf7af79afe70a94c78b79e366d2", "html_url": "https://github.com/rust-lang/rust/commit/5a7e11f5fbc6cdf7af79afe70a94c78b79e366d2"}, {"sha": "c83081879f72ff745edc901dcd6f954edfc414a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83081879f72ff745edc901dcd6f954edfc414a4", "html_url": "https://github.com/rust-lang/rust/commit/c83081879f72ff745edc901dcd6f954edfc414a4"}], "stats": {"total": 154, "additions": 130, "deletions": 24}, "files": [{"sha": "c11a1efce4f44d135fbf4903ab72e88822ec5bf9", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -2,6 +2,7 @@\n \n pub(crate) mod attribute;\n pub(crate) mod dot;\n+pub(crate) mod extern_abi;\n pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod format_string;"}, {"sha": "3bb3f883cdb96b247077bf3f41c473f2d68f49cc", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -684,12 +684,12 @@ struct Foo { field: i32 }\n \n impl Foo { fn foo(&self) { $0 } }\"#,\n             expect![[r#\"\n+                fd self.field i32\n+                me self.foo() fn(&self)\n                 lc self       &Foo\n                 sp Self\n                 st Foo\n                 bt u32\n-                fd self.field i32\n-                me self.foo() fn(&self)\n             \"#]],\n         );\n         check(\n@@ -698,12 +698,12 @@ struct Foo(i32);\n \n impl Foo { fn foo(&mut self) { $0 } }\"#,\n             expect![[r#\"\n+                fd self.0     i32\n+                me self.foo() fn(&mut self)\n                 lc self       &mut Foo\n                 sp Self\n                 st Foo\n                 bt u32\n-                fd self.0     i32\n-                me self.foo() fn(&mut self)\n             \"#]],\n         );\n     }"}, {"sha": "87fccec008e0a168deec7671490988f5e16310ce", "filename": "crates/ide_completion/src/completions/extern_abi.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -0,0 +1,104 @@\n+//! Completes function abi strings.\n+use syntax::{\n+    ast::{self, IsString},\n+    AstNode, AstToken,\n+};\n+\n+use crate::{\n+    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n+};\n+\n+// Most of these are feature gated, we should filter/add feature gate completions once we have them.\n+const SUPPORTED_CALLING_CONVENTIONS: &[&str] = &[\n+    \"Rust\",\n+    \"C\",\n+    \"C-unwind\",\n+    \"cdecl\",\n+    \"stdcall\",\n+    \"stdcall-unwind\",\n+    \"fastcall\",\n+    \"vectorcall\",\n+    \"thiscall\",\n+    \"thiscall-unwind\",\n+    \"aapcs\",\n+    \"win64\",\n+    \"sysv64\",\n+    \"ptx-kernel\",\n+    \"msp430-interrupt\",\n+    \"x86-interrupt\",\n+    \"amdgpu-kernel\",\n+    \"efiapi\",\n+    \"avr-interrupt\",\n+    \"avr-non-blocking-interrupt\",\n+    \"C-cmse-nonsecure-call\",\n+    \"wasm\",\n+    \"system\",\n+    \"system-unwind\",\n+    \"rust-intrinsic\",\n+    \"rust-call\",\n+    \"platform-intrinsic\",\n+    \"unadjusted\",\n+];\n+\n+pub(crate) fn complete_extern_abi(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+    if ctx.token.parent().and_then(ast::Abi::cast).is_none() {\n+        return None;\n+    }\n+    let abi_str = ast::String::cast(ctx.token.clone())?;\n+    let source_range = abi_str.text_range_between_quotes()?;\n+    for &abi in SUPPORTED_CALLING_CONVENTIONS {\n+        CompletionItem::new(CompletionItemKind::Keyword, source_range, abi).add_to(acc);\n+    }\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::tests::{check_edit, completion_list_no_kw};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_no_kw(ra_fixture);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn only_completes_in_string_literals() {\n+        check(\n+            r#\"\n+$0 fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn requires_extern_prefix() {\n+        check(\n+            r#\"\n+\"$0\" fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn works() {\n+        check(\n+            r#\"\n+extern \"$0\" fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+        check_edit(\n+            \"Rust\",\n+            r#\"\n+extern \"$0\" fn foo {}\n+\"#,\n+            r#\"\n+extern \"Rust\" fn foo {}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "9f6f6592de50e2786a7b2812c0f34433831139a1", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -151,27 +151,28 @@ pub fn completions(\n     }\n \n     let mut acc = Completions::default();\n-    completions::attribute::complete_known_attribute_input(&mut acc, &ctx);\n     completions::attribute::complete_attribute(&mut acc, &ctx);\n-    completions::use_::complete_use_tree(&mut acc, &ctx);\n-    completions::vis::complete_vis(&mut acc, &ctx);\n+    completions::attribute::complete_known_attribute_input(&mut acc, &ctx);\n+    completions::dot::complete_dot(&mut acc, &ctx);\n+    completions::extern_abi::complete_extern_abi(&mut acc, &ctx);\n+    completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n+    completions::format_string::format_string(&mut acc, &ctx);\n     completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n-    completions::snippet::complete_expr_snippet(&mut acc, &ctx);\n-    completions::snippet::complete_item_snippet(&mut acc, &ctx);\n-    completions::qualified_path::complete_qualified_path(&mut acc, &ctx);\n-    completions::unqualified_path::complete_unqualified_path(&mut acc, &ctx);\n-    completions::dot::complete_dot(&mut acc, &ctx);\n-    completions::record::complete_record(&mut acc, &ctx);\n-    completions::record::complete_record_literal(&mut acc, &ctx);\n+    completions::lifetime::complete_label(&mut acc, &ctx);\n+    completions::lifetime::complete_lifetime(&mut acc, &ctx);\n+    completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::pattern::complete_pattern(&mut acc, &ctx);\n     completions::postfix::complete_postfix(&mut acc, &ctx);\n+    completions::qualified_path::complete_qualified_path(&mut acc, &ctx);\n+    completions::record::complete_record_literal(&mut acc, &ctx);\n+    completions::record::complete_record(&mut acc, &ctx);\n+    completions::snippet::complete_expr_snippet(&mut acc, &ctx);\n+    completions::snippet::complete_item_snippet(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n-    completions::mod_::complete_mod(&mut acc, &ctx);\n-    completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n-    completions::lifetime::complete_lifetime(&mut acc, &ctx);\n-    completions::lifetime::complete_label(&mut acc, &ctx);\n-    completions::format_string::format_string(&mut acc, &ctx);\n+    completions::unqualified_path::complete_unqualified_path(&mut acc, &ctx);\n+    completions::use_::complete_use_tree(&mut acc, &ctx);\n+    completions::vis::complete_vis(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "5e1fae68fd2aebe89d671f47ae17a8cbf02ad396", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -126,6 +126,7 @@ impl Unit {\n \"#,\n         // `self` is in here twice, once as the module, once as the local\n         expect![[r##\"\n+            me self.foo()   fn(self)\n             kw unsafe\n             kw fn\n             kw const\n@@ -172,7 +173,6 @@ impl Unit {\n             un Union\n             ev TupleV(\u2026)    (u32)\n             ct CONST\n-            me self.foo()   fn(self)\n         \"##]],\n     );\n     check("}, {"sha": "3bb332b437259bd7fa154ded9efea02432e5e502", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6329f2171cecb8074dd50f931fc52a7b74aeeed/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=d6329f2171cecb8074dd50f931fc52a7b74aeeed", "patch": "@@ -166,6 +166,10 @@ fn main() {\n             kw true\n             kw false\n             kw return\n+            sn Foo {\u2026}              Foo { foo1: ${1:()}, foo2: ${2:()} }$0\n+            fd ..Default::default()\n+            fd foo1                 u32\n+            fd foo2                 u32\n             kw self\n             kw super\n             kw crate\n@@ -177,10 +181,6 @@ fn main() {\n             bt u32\n             tt Sized\n             tt Default\n-            fd ..Default::default()\n-            fd foo1                 u32\n-            fd foo2                 u32\n-            sn Foo {\u2026}              Foo { foo1: ${1:()}, foo2: ${2:()} }$0\n         \"#]],\n     );\n     check("}]}