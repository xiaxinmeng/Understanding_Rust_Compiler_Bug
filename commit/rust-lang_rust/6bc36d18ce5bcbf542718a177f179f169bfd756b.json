{"sha": "6bc36d18ce5bcbf542718a177f179f169bfd756b", "node_id": "C_kwDOAAsO6NoAKDZiYzM2ZDE4Y2U1YmNiZjU0MjcxOGExNzdmMTc5ZjE2OWJmZDc1NmI", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-03T10:42:51Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-03T10:42:51Z"}, "message": "move browser opening logic in Builder\n\nThis allows open() to be called from other places in bootstrap (I need\nthis for Ferrocene), and it simplifies the callers by moving the\n\"was_invoked_explicitly\" check into the function.", "tree": {"sha": "a8f9381e8bba8cda9f3fd6207bdf72ada5bb5ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f9381e8bba8cda9f3fd6207bdf72ada5bb5ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc36d18ce5bcbf542718a177f179f169bfd756b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmNjm2EACgkQzXazX3c0\ndp4imA/+PvR4E9Pbo6eRao+G0cxAckvHB3HHleTuP9UUmpI/yuMe5QcpKwE3/gTu\n0G7J2usCJhLDnvx3OeaeMoa2OgU4gAVPE2+VONWVSMhp1LOBDnCXM+AK01gjuzZH\ni49s4jHO8xjEuE45HYWQ8GaB2J3KBcpd5riF0pzsjZVZ1RTerbZyqJjRB2CdfjAg\nVpsYKg5BSgS/IrcjITZdz3e4i5llzPgyzrtLL1XVzT8d6CoX4ZkvVsSId2yuVAbj\nKCvPeL3vF7tugt/oEAX62ZDHyAXzy5YdDe7HVrmIuWXFnNdb36SM/JlW2WzlmIuD\nvjTfTphLL9DE4sZoRrajw029QJPGtE7npfY4/UBtsYG5d866Y08jGsCeE6oAG5Kz\nNH6apCEEvI/NeLzU9W3iIl+So5MqBLnR4fRmL53wreQTAMjlp2k8WeHJvtnMc1L4\nyvYQov+8wtK2Z4tyT/LbCu2O4CbrDTzl2WyKhnWfWc1oi7Mdug8qAtkv8FaqIzN1\n80j9kwGfG8oQLLxzol3IPPKPI2Uqa8Up9GmsQI/Afnz4fguOn/nT/H91s4dXtyiZ\nglQ+Hv5WvUcjEYWdJzMYaPH1WgrLhM+srC6mfq7xZTt5KlSExW/+sSvbsrdmGbRv\nvqaO5wDAYjsaqury0U/xuSBkfyvQIo8TkiCHUVvWBXf76YCY07g=\n=QH1O\n-----END PGP SIGNATURE-----", "payload": "tree a8f9381e8bba8cda9f3fd6207bdf72ada5bb5ee0\nparent c0a76127283bc963b085f54a1b275a8e281e81e6\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1667472171 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1667472171 +0100\n\nmove browser opening logic in Builder\n\nThis allows open() to be called from other places in bootstrap (I need\nthis for Ferrocene), and it simplifies the callers by moving the\n\"was_invoked_explicitly\" check into the function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc36d18ce5bcbf542718a177f179f169bfd756b", "html_url": "https://github.com/rust-lang/rust/commit/6bc36d18ce5bcbf542718a177f179f169bfd756b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc36d18ce5bcbf542718a177f179f169bfd756b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a76127283bc963b085f54a1b275a8e281e81e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a76127283bc963b085f54a1b275a8e281e81e6", "html_url": "https://github.com/rust-lang/rust/commit/c0a76127283bc963b085f54a1b275a8e281e81e6"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "406bae02d84da581c9b3c37c9d8f7693c22d7a59", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bc36d18ce5bcbf542718a177f179f169bfd756b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc36d18ce5bcbf542718a177f179f169bfd756b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6bc36d18ce5bcbf542718a177f179f169bfd756b", "patch": "@@ -2207,6 +2207,24 @@ impl<'a> Builder<'a> {\n \n         false\n     }\n+\n+    pub(crate) fn maybe_open_in_browser<S: Step>(&self, path: impl AsRef<Path>) {\n+        if self.was_invoked_explicitly::<S>(Kind::Doc) {\n+            self.open_in_browser(path);\n+        }\n+    }\n+\n+    pub(crate) fn open_in_browser(&self, path: impl AsRef<Path>) {\n+        if self.config.dry_run || !self.config.cmd.open() {\n+            return;\n+        }\n+\n+        let path = path.as_ref();\n+        self.info(&format!(\"Opening doc {}\", path.display()));\n+        if let Err(err) = opener::open(path) {\n+            self.info(&format!(\"{}\\n\", err));\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "0045856e2c957a7ed4ae6febc4ef61913b068a82", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6bc36d18ce5bcbf542718a177f179f169bfd756b/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc36d18ce5bcbf542718a177f179f169bfd756b/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6bc36d18ce5bcbf542718a177f179f169bfd756b", "patch": "@@ -12,7 +12,7 @@ use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n+use crate::builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::{Config, TargetSelection};\n@@ -85,18 +85,6 @@ book!(\n     StyleGuide, \"src/doc/style-guide\", \"style-guide\";\n );\n \n-fn open(builder: &Builder<'_>, path: impl AsRef<Path>) {\n-    if builder.config.dry_run || !builder.config.cmd.open() {\n-        return;\n-    }\n-\n-    let path = path.as_ref();\n-    builder.info(&format!(\"Opening doc {}\", path.display()));\n-    if let Err(err) = opener::open(path) {\n-        builder.info(&format!(\"{}\\n\", err));\n-    }\n-}\n-\n // \"library/std\" -> [\"library\", \"std\"]\n //\n // Used for deciding whether a particular step is one requested by the user on\n@@ -240,11 +228,9 @@ impl Step for TheBook {\n             invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n \n-        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n-            let out = builder.doc_out(target);\n-            let index = out.join(\"book\").join(\"index.html\");\n-            open(builder, &index);\n-        }\n+        let out = builder.doc_out(target);\n+        let index = out.join(\"book\").join(\"index.html\");\n+        builder.maybe_open_in_browser::<Self>(index);\n     }\n }\n \n@@ -384,10 +370,7 @@ impl Step for Standalone {\n \n         // We open doc/index.html as the default if invoked as `x.py doc --open`\n         // with no particular explicit doc requested (e.g. library/core).\n-        if builder.paths.is_empty() || builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n-            let index = out.join(\"index.html\");\n-            open(builder, &index);\n-        }\n+        builder.maybe_open_in_browser::<Self>(out.join(\"index.html\"));\n     }\n }\n \n@@ -507,7 +490,7 @@ impl Step for Std {\n         for requested_crate in requested_crates {\n             if STD_PUBLIC_CRATES.iter().any(|k| *k == requested_crate.as_str()) {\n                 let index = out.join(requested_crate).join(\"index.html\");\n-                open(builder, &index);\n+                builder.open_in_browser(index);\n             }\n         }\n     }\n@@ -759,7 +742,7 @@ impl Step for Rustc {\n         // Let's open the first crate documentation page:\n         if let Some(krate) = to_open {\n             let index = out.join(krate).join(\"index.html\");\n-            open(builder, &index);\n+            builder.open_in_browser(index);\n         }\n     }\n }\n@@ -1019,10 +1002,9 @@ impl Step for RustcBook {\n             name: INTERNER.intern_str(\"rustc\"),\n             src: INTERNER.intern_path(out_base),\n         });\n-        if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n-            let out = builder.doc_out(self.target);\n-            let index = out.join(\"rustc\").join(\"index.html\");\n-            open(builder, &index);\n-        }\n+\n+        let out = builder.doc_out(self.target);\n+        let index = out.join(\"rustc\").join(\"index.html\");\n+        builder.maybe_open_in_browser::<Self>(index);\n     }\n }"}]}