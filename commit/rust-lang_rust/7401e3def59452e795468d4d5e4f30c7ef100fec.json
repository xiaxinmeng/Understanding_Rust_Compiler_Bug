{"sha": "7401e3def59452e795468d4d5e4f30c7ef100fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDFlM2RlZjU5NDUyZTc5NTQ2OGQ0ZDVlNGYzMGM3ZWYxMDBmZWM=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-02T14:08:51Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T00:24:40Z"}, "message": "Distinguish between placeholder kinds", "tree": {"sha": "21021e0d1d855c7942915db208444cda8bb2f15b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21021e0d1d855c7942915db208444cda8bb2f15b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7401e3def59452e795468d4d5e4f30c7ef100fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7401e3def59452e795468d4d5e4f30c7ef100fec", "html_url": "https://github.com/rust-lang/rust/commit/7401e3def59452e795468d4d5e4f30c7ef100fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7401e3def59452e795468d4d5e4f30c7ef100fec/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f57e4841157d5cbd4c4e22018f93bd1801c98c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f57e4841157d5cbd4c4e22018f93bd1801c98c2", "html_url": "https://github.com/rust-lang/rust/commit/1f57e4841157d5cbd4c4e22018f93bd1801c98c2"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "41839d61d32606d01c019742d02d636b5c5066f0", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -142,7 +142,7 @@ pub enum CanonicalVarKind {\n     /// A \"placeholder\" that represents \"any region\". Created when you\n     /// are solving a goal like `for<'a> T: Foo<'a>` to represent the\n     /// bound region `'a`.\n-    PlaceholderRegion(ty::Placeholder),\n+    PlaceholderRegion(ty::PlaceholderRegion),\n }\n \n impl CanonicalVarKind {\n@@ -374,9 +374,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 universe_map(ui),\n             ).into(),\n \n-            CanonicalVarKind::PlaceholderRegion(ty::Placeholder { universe, name }) => {\n+            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, name }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::Placeholder {\n+                let placeholder_mapped = ty::PlaceholderRegion {\n                     universe: universe_mapped,\n                     name,\n                 };"}, {"sha": "ddf46b18ef730db4d7234621a9489cb3f5eabe82", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let next_universe = self.create_next_universe();\n \n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+            self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n                 name: br,\n             }))"}, {"sha": "dfe6aa160b3ad2bbe97ae0f3838b63aa2ab5ce14", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -411,7 +411,7 @@ pub enum NLLRegionVariableOrigin {\n \n     /// \"Universal\" instantiation of a higher-ranked region (e.g.,\n     /// from a `for<'a> T` binder). Meant to represent \"any region\".\n-    Placeholder(ty::Placeholder),\n+    Placeholder(ty::PlaceholderRegion),\n \n     Existential,\n }"}, {"sha": "9bdbf77fee0a9ddfa1bf92eec5ad89afac88b5a8", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -95,7 +95,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// So e.g. if you have `for<'a> fn(..) <: for<'b> fn(..)`, then\n     /// we will invoke this method to instantiate `'b` with a\n     /// placeholder region.\n-    fn next_placeholder_region(&mut self, placeholder: ty::Placeholder) -> ty::Region<'tcx>;\n+    fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx>;\n \n     /// Creates a new existential region in the given universe. This\n     /// is used when handling subtyping and type variables -- if we\n@@ -176,7 +176,7 @@ where\n                         universe\n                     });\n \n-                    let placeholder = ty::Placeholder { universe, name: br };\n+                    let placeholder = ty::PlaceholderRegion { universe, name: br };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n                     delegate.next_existential_region_var()"}, {"sha": "4372beafa6488d9eb877c5aca9aaf455d62bb07a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -1587,12 +1587,27 @@ impl UniverseIndex {\n /// universe are just two regions with an unknown relationship to one\n /// another.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n-pub struct Placeholder {\n+pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n-    pub name: BoundRegion,\n+    pub name: T,\n }\n \n-impl_stable_hash_for!(struct Placeholder { universe, name });\n+impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n+    where T: HashStable<StableHashingContext<'a>>\n+{\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>\n+    ) {\n+        self.universe.hash_stable(hcx, hasher);\n+        self.name.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+pub type PlaceholderRegion = Placeholder<BoundRegion>;\n+\n+pub type PlaceholderType = Placeholder<BoundVar>;\n \n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this"}, {"sha": "5c01f1cc3e4d78eec677d3174f32f232397e0ba7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -1165,7 +1165,7 @@ pub enum RegionKind {\n \n     /// A placeholder region - basically the higher-ranked version of ReFree.\n     /// Should not exist after typeck.\n-    RePlaceholder(ty::Placeholder),\n+    RePlaceholder(ty::PlaceholderRegion),\n \n     /// Empty lifetime is for data that is never accessed.\n     /// Bottom in the region lattice. We treat ReEmpty somewhat"}, {"sha": "613a0dbc61f4296ad3fde12d74cb52381c873953", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -792,7 +792,7 @@ define_print! {\n                 }\n                 ty::ReLateBound(_, br) |\n                 ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n-                ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n                     write!(f, \"{}\", br)\n                 }\n                 ty::ReScope(scope) if cx.identify_regions => {"}, {"sha": "4ccd26bee8b8813097bb24b0a3ffc5d962cae4f2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -2193,7 +2193,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n         match ty.sty {\n             ty::TyKind::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n             | ty::TyKind::Ref(\n-                ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }),\n+                ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n             ) => with_highlight_region_for_bound_region(*br, counter, || ty.to_string()),\n@@ -2207,7 +2207,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n         match ty.sty {\n             ty::TyKind::Ref(region, _, _) => match region {\n                 ty::RegionKind::ReLateBound(_, br)\n-                | ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n                     with_highlight_region_for_bound_region(*br, counter, || region.to_string())\n                 }\n                 _ => region.to_string(),"}, {"sha": "6a1dc50c67a09c2bdd78f529d012d659ff27a344", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -1230,7 +1230,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir: &Mir<'tcx>,\n         _mir_def_id: DefId,\n         longer_fr: RegionVid,\n-        placeholder: ty::Placeholder,\n+        placeholder: ty::PlaceholderRegion,\n     ) {\n         debug!(\n             \"check_bound_universal_region(fr={:?}, placeholder={:?})\","}, {"sha": "69e2c896d33e515b3ce77fdcb4305f8333fc65ad", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -150,7 +150,7 @@ crate enum RegionElement {\n \n     /// A placeholder (e.g., instantiated from a `for<'a> fn(&'a u32)`\n     /// type).\n-    PlaceholderRegion(ty::Placeholder),\n+    PlaceholderRegion(ty::PlaceholderRegion),\n }\n \n /// When we initially compute liveness, we use a bit matrix storing\n@@ -219,17 +219,17 @@ impl<N: Idx> LivenessValues<N> {\n     }\n }\n \n-/// Maps from `ty::Placeholder` values that are used in the rest of\n+/// Maps from `ty::PlaceholderRegion` values that are used in the rest of\n /// rustc to the internal `PlaceholderIndex` values that are used in\n /// NLL.\n #[derive(Default)]\n crate struct PlaceholderIndices {\n-    to_index: FxHashMap<ty::Placeholder, PlaceholderIndex>,\n-    from_index: IndexVec<PlaceholderIndex, ty::Placeholder>,\n+    to_index: FxHashMap<ty::PlaceholderRegion, PlaceholderIndex>,\n+    from_index: IndexVec<PlaceholderIndex, ty::PlaceholderRegion>,\n }\n \n impl PlaceholderIndices {\n-    crate fn insert(&mut self, placeholder: ty::Placeholder) -> PlaceholderIndex {\n+    crate fn insert(&mut self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n         let PlaceholderIndices {\n             to_index,\n             from_index,\n@@ -239,11 +239,11 @@ impl PlaceholderIndices {\n             .or_insert_with(|| from_index.push(placeholder))\n     }\n \n-    crate fn lookup_index(&self, placeholder: ty::Placeholder) -> PlaceholderIndex {\n+    crate fn lookup_index(&self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n         self.to_index[&placeholder]\n     }\n \n-    crate fn lookup_placeholder(&self, placeholder: PlaceholderIndex) -> ty::Placeholder {\n+    crate fn lookup_placeholder(&self, placeholder: PlaceholderIndex) -> ty::PlaceholderRegion {\n         self.from_index[placeholder]\n     }\n \n@@ -375,7 +375,7 @@ impl<N: Idx> RegionValues<N> {\n     crate fn placeholders_contained_in<'a>(\n         &'a self,\n         r: N,\n-    ) -> impl Iterator<Item = ty::Placeholder> + 'a {\n+    ) -> impl Iterator<Item = ty::PlaceholderRegion> + 'a {\n         self.placeholders\n             .row(r)\n             .into_iter()\n@@ -432,7 +432,7 @@ impl ToElementIndex for RegionVid {\n     }\n }\n \n-impl ToElementIndex for ty::Placeholder {\n+impl ToElementIndex for ty::PlaceholderRegion {\n     fn add_to_row<N: Idx>(self, values: &mut RegionValues<N>, row: N) -> bool {\n         let index = values.placeholder_indices.lookup_index(self);\n         values.placeholders.insert(row, index)"}, {"sha": "6f4d8c2bef934a45e659fd7d4e639513a21fa082", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -777,7 +777,7 @@ impl MirTypeckRegionConstraints<'tcx> {\n     fn placeholder_region(\n         &mut self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        placeholder: ty::Placeholder,\n+        placeholder: ty::PlaceholderRegion,\n     ) -> ty::Region<'tcx> {\n         let placeholder_index = self.placeholder_indices.insert(placeholder);\n         match self.placeholder_index_to_region.get(placeholder_index) {"}, {"sha": "cf4f913080783ed67d16260f11ed3b7bde160dad", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7401e3def59452e795468d4d5e4f30c7ef100fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=7401e3def59452e795468d4d5e4f30c7ef100fec", "patch": "@@ -84,7 +84,10 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n         }\n     }\n \n-    fn next_placeholder_region(&mut self, placeholder: ty::Placeholder) -> ty::Region<'tcx> {\n+    fn next_placeholder_region(\n+        &mut self,\n+        placeholder: ty::PlaceholderRegion\n+    ) -> ty::Region<'tcx> {\n         if let Some(borrowck_context) = &mut self.borrowck_context {\n             borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n         } else {"}]}