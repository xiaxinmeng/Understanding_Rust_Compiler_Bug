{"sha": "97974e3cabefe725b6bea24c20e5fb9709e08a02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OTc0ZTNjYWJlZmU3MjViNmJlYTI0YzIwZTVmYjk3MDllMDhhMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T08:32:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-31T08:14:31Z"}, "message": "only emit error for ManuallyDrop derefs", "tree": {"sha": "a9daf493f2afd81ac975a99e70661b77bc1970e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9daf493f2afd81ac975a99e70661b77bc1970e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97974e3cabefe725b6bea24c20e5fb9709e08a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97974e3cabefe725b6bea24c20e5fb9709e08a02", "html_url": "https://github.com/rust-lang/rust/commit/97974e3cabefe725b6bea24c20e5fb9709e08a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97974e3cabefe725b6bea24c20e5fb9709e08a02/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44defaea3a2dd2e7e40336d3609df12b83db424a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44defaea3a2dd2e7e40336d3609df12b83db424a", "html_url": "https://github.com/rust-lang/rust/commit/44defaea3a2dd2e7e40336d3609df12b83db424a"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "c6d5c934a7e3a34e0537c177a704ddb5e44b8dfc", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97974e3cabefe725b6bea24c20e5fb9709e08a02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97974e3cabefe725b6bea24c20e5fb9709e08a02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=97974e3cabefe725b6bea24c20e5fb9709e08a02", "patch": "@@ -244,14 +244,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let ty::Ref(region, _, mutbl) = method.sig.output().kind {\n                                 *deref = OverloadedDeref { region, mutbl };\n                             }\n-                            // If this is a union field, also throw an error.\n-                            // Union fields should not get mutable auto-deref'd (see RFC 2514).\n-                            if inside_union {\n+                            // If this is a union field, also throw an error for `DerefMut` of `ManuallyDrop` (see RFC 2514).\n+                            // This helps avoid accidental drops.\n+                            if inside_union\n+                                && source.ty_adt_def().map_or(false, |adt| adt.is_manually_drop())\n+                            {\n                                 let mut err = self.tcx.sess.struct_span_err(\n                                     expr.span,\n-                                    \"not automatically applying `DerefMut` on union field\",\n+                                    \"not automatically applying `DerefMut` on `ManuallyDrop` union field\",\n+                                );\n+                                err.help(\n+                                    \"writing to this reference calls the destructor for the old value\",\n                                 );\n-                                err.help(\"writing to this field calls the destructor for the old value\");\n                                 err.help(\"add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\");\n                                 err.emit();\n                             }"}, {"sha": "d789659a807b5b687c36727487a0dc954cefec57", "filename": "src/test/ui/union/union-deref.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97974e3cabefe725b6bea24c20e5fb9709e08a02/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97974e3cabefe725b6bea24c20e5fb9709e08a02/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.rs?ref=97974e3cabefe725b6bea24c20e5fb9709e08a02", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n //! Test the part of RFC 2514 that is about not applying `DerefMut` coercions\n //! of union fields.\n #![feature(untagged_unions)]\n@@ -11,9 +12,9 @@ union U2<T> { x:(), f: (ManuallyDrop<(T,)>,) }\n fn main() {\n     let mut u : U1<Vec<i32>> = U1 { x: () };\n     unsafe { (*u.f).0 = Vec::new() }; // explicit deref, this compiles\n-    unsafe { u.f.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on union field\n+    unsafe { u.f.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n \n     let mut u : U2<Vec<i32>> = U2 { x: () };\n     unsafe { (*u.f.0).0 = Vec::new() }; // explicit deref, this compiles\n-    unsafe { u.f.0.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on union field\n+    unsafe { u.f.0.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n }"}, {"sha": "03428489318c021be3843dea5c78e068f5cae419", "filename": "src/test/ui/union/union-deref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97974e3cabefe725b6bea24c20e5fb9709e08a02/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97974e3cabefe725b6bea24c20e5fb9709e08a02/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr?ref=97974e3cabefe725b6bea24c20e5fb9709e08a02", "patch": "@@ -1,19 +1,19 @@\n-error: not automatically applying `DerefMut` on union field\n-  --> $DIR/union-deref.rs:14:14\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:15:14\n    |\n LL |     unsafe { u.f.0 = Vec::new() };\n    |              ^^^\n    |\n-   = help: writing to this field calls the destructor for the old value\n+   = help: writing to this reference calls the destructor for the old value\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n-error: not automatically applying `DerefMut` on union field\n-  --> $DIR/union-deref.rs:18:14\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:19:14\n    |\n LL |     unsafe { u.f.0.0 = Vec::new() };\n    |              ^^^^^^^\n    |\n-   = help: writing to this field calls the destructor for the old value\n+   = help: writing to this reference calls the destructor for the old value\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: aborting due to 2 previous errors"}]}