{"sha": "d1d9092e3c99343e03abc650e91082b5c9f538b9", "node_id": "C_kwDOAAsO6NoAKGQxZDkwOTJlM2M5OTM0M2UwM2FiYzY1MGU5MTA4MmI1YzlmNTM4Yjk", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-10-01T02:03:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Test enabling MIR inliner", "tree": {"sha": "0925d49bd21557db2063335266cd7f8324db9249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0925d49bd21557db2063335266cd7f8324db9249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d9092e3c99343e03abc650e91082b5c9f538b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9092e3c99343e03abc650e91082b5c9f538b9", "html_url": "https://github.com/rust-lang/rust/commit/d1d9092e3c99343e03abc650e91082b5c9f538b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9092e3c99343e03abc650e91082b5c9f538b9/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b33c6e1bd8f02cc4f01f5405df0ec4d019a1aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33c6e1bd8f02cc4f01f5405df0ec4d019a1aa72", "html_url": "https://github.com/rust-lang/rust/commit/b33c6e1bd8f02cc4f01f5405df0ec4d019a1aa72"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "c99c3b2f1c2122464c6790be3a758f7f00def6d8", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9092e3c99343e03abc650e91082b5c9f538b9/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9092e3c99343e03abc650e91082b5c9f538b9/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=d1d9092e3c99343e03abc650e91082b5c9f538b9", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -43,7 +44,15 @@ impl<'tcx> MirPass<'tcx> for Inline {\n             return enabled;\n         }\n \n-        sess.opts.mir_opt_level() >= 3\n+        match sess.mir_opt_level() {\n+            0 | 1 => false,\n+            2 => {\n+                (sess.opts.optimize == OptLevel::Default\n+                    || sess.opts.optimize == OptLevel::Aggressive)\n+                    && sess.opts.incremental == None\n+            }\n+            _ => true,\n+        }\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -321,8 +330,14 @@ impl<'tcx> Inliner<'tcx> {\n         callsite: &CallSite<'tcx>,\n         callee_attrs: &CodegenFnAttrs,\n     ) -> Result<(), &'static str> {\n-        if let InlineAttr::Never = callee_attrs.inline {\n-            return Err(\"never inline hint\");\n+        match callee_attrs.inline {\n+            InlineAttr::Never => return Err(\"never inline hint\"),\n+            InlineAttr::Always => {}\n+            _ => {\n+                if self.tcx.sess.mir_opt_level() <= 2 {\n+                    return Err(\"at mir-opt-level=2, only #[inline(always)] is inlined\");\n+                }\n+            }\n         }\n \n         // Only inline local functions if they would be eligible for cross-crate\n@@ -505,14 +520,12 @@ impl<'tcx> Inliner<'tcx> {\n         if let InlineAttr::Always = callee_attrs.inline {\n             debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n             Ok(())\n+        } else if cost <= threshold {\n+            debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n+            Ok(())\n         } else {\n-            if cost <= threshold {\n-                debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n-                Ok(())\n-            } else {\n-                debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n-                Err(\"cost above threshold\")\n-            }\n+            debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n+            Err(\"cost above threshold\")\n         }\n     }\n "}, {"sha": "779bac0ace29bd0e23729904766afa4b9d181890", "filename": "src/test/ui/polymorphization/generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9092e3c99343e03abc650e91082b5c9f538b9/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9092e3c99343e03abc650e91082b5c9f538b9/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs?ref=d1d9092e3c99343e03abc650e91082b5c9f538b9", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags:-Zpolymorphize=on\n+// compile-flags:-Zpolymorphize=on -Zinline-mir=off\n #![feature(generic_const_exprs, generators, generator_trait, rustc_attrs)]\n //~^ WARN the feature `generic_const_exprs` is incomplete\n "}]}