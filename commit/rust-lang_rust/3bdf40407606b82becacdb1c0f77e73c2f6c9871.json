{"sha": "3bdf40407606b82becacdb1c0f77e73c2f6c9871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZGY0MDQwNzYwNmI4MmJlY2FjZGIxYzBmNzdlNzNjMmY2Yzk4NzE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T14:21:09Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T14:21:09Z"}, "message": "Apply review comments", "tree": {"sha": "2b0ee1c03f365d5e099663977d6eaf1641ed85d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0ee1c03f365d5e099663977d6eaf1641ed85d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bdf40407606b82becacdb1c0f77e73c2f6c9871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdf40407606b82becacdb1c0f77e73c2f6c9871", "html_url": "https://github.com/rust-lang/rust/commit/3bdf40407606b82becacdb1c0f77e73c2f6c9871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bdf40407606b82becacdb1c0f77e73c2f6c9871/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39947992b57239de6581c9761dfad7ac3cf001c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/39947992b57239de6581c9761dfad7ac3cf001c8", "html_url": "https://github.com/rust-lang/rust/commit/39947992b57239de6581c9761dfad7ac3cf001c8"}], "stats": {"total": 51, "additions": 16, "deletions": 35}, "files": [{"sha": "6e89cba1627ec075f3f555e0c597588986498e35", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3bdf40407606b82becacdb1c0f77e73c2f6c9871/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdf40407606b82becacdb1c0f77e73c2f6c9871/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3bdf40407606b82becacdb1c0f77e73c2f6c9871", "patch": "@@ -716,41 +716,22 @@ fn all_ranges<'a, 'tcx>(\n             } = *arm\n             {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n-                    match (lhs, rhs) {\n-                        (Some(lhs), Some(rhs)) => {\n-                            let lhs = constant(cx, cx.tables, lhs)?.0;\n-                            let rhs = constant(cx, cx.tables, rhs)?.0;\n-                            let rhs = match range_end {\n-                                RangeEnd::Included => Bound::Included(rhs),\n-                                RangeEnd::Excluded => Bound::Excluded(rhs),\n-                            };\n-                            return Some(SpannedRange {\n-                                span: pat.span,\n-                                node: (lhs, rhs),\n-                            });\n-                        },\n-                        (None, Some(rhs)) => {\n-                            let lhs = miri_to_const(ty.numeric_min_val(cx.tcx)?)?;\n-                            let rhs = constant(cx, cx.tables, rhs)?.0;\n-                            let rhs = match range_end {\n-                                RangeEnd::Included => Bound::Included(rhs),\n-                                RangeEnd::Excluded => Bound::Excluded(rhs),\n-                            };\n-                            return Some(SpannedRange {\n-                                span: pat.span,\n-                                node: (lhs, rhs),\n-                            });\n-                        },\n-                        (Some(lhs), None) => {\n-                            let lhs = constant(cx, cx.tables, lhs)?.0;\n-                            let rhs = miri_to_const(ty.numeric_max_val(cx.tcx)?)?;\n-                            return Some(SpannedRange {\n-                                span: pat.span,\n-                                node: (lhs, Bound::Excluded(rhs)),\n-                            });\n-                        },\n-                        _ => return None,\n-                    }\n+                    let lhs = match lhs {\n+                        Some(lhs) => constant(cx, cx.tables, lhs)?.0,\n+                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n+                    };\n+                    let rhs = match rhs {\n+                        Some(rhs) => constant(cx, cx.tables, rhs)?.0,\n+                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n+                    };\n+                    let rhs = match range_end {\n+                        RangeEnd::Included => Bound::Included(rhs),\n+                        RangeEnd::Excluded => Bound::Excluded(rhs),\n+                    };\n+                    return Some(SpannedRange {\n+                        span: pat.span,\n+                        node: (lhs, rhs),\n+                    });\n                 }\n \n                 if let PatKind::Lit(ref value) = pat.kind {"}]}