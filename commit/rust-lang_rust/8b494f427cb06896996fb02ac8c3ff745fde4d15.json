{"sha": "8b494f427cb06896996fb02ac8c3ff745fde4d15", "node_id": "C_kwDOAAsO6NoAKDhiNDk0ZjQyN2NiMDY4OTY5OTZmYjAyYWM4YzNmZjc0NWZkZTRkMTU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-02-02T12:09:44Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-25T13:25:51Z"}, "message": "Allow `impl Fn() -> impl Trait` in return position\n\nThis allows writing the following function signatures:\n```rust\nfn f0() -> impl Fn() -> impl Trait;\nfn f3() -> &'static dyn Fn() -> impl Trait;\n```\n\nThese signatures were already allowed for common traits and associated\ntypes, there is no reason why `Fn*` traits should be special in this\nregard.", "tree": {"sha": "fd3fc72ec3dee328bb0bc51a395722f00b4e70a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3fc72ec3dee328bb0bc51a395722f00b4e70a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b494f427cb06896996fb02ac8c3ff745fde4d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b494f427cb06896996fb02ac8c3ff745fde4d15", "html_url": "https://github.com/rust-lang/rust/commit/8b494f427cb06896996fb02ac8c3ff745fde4d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b494f427cb06896996fb02ac8c3ff745fde4d15/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1481fd964bac3c750c7e1b21206fdaa60346c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/1481fd964bac3c750c7e1b21206fdaa60346c456", "html_url": "https://github.com/rust-lang/rust/commit/1481fd964bac3c750c7e1b21206fdaa60346c456"}], "stats": {"total": 140, "additions": 73, "deletions": 67}, "files": [{"sha": "4b7ef960d4b612ea6e6dd0e55b510ab6a4c25406", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -191,7 +191,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n-                    ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n+                    ParenthesizedGenericArgs::Ok => {\n+                        self.lower_parenthesized_parameter_data(data, itctx)\n+                    }\n                     ParenthesizedGenericArgs::Err => {\n                         // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n                         let sub = if !data.inputs.is_empty() {\n@@ -344,6 +346,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_parenthesized_parameter_data(\n         &mut self,\n         data: &ParenthesizedArgs,\n+        itctx: ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes; this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n@@ -355,6 +358,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.lower_ty_direct(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n         }));\n         let output_ty = match output {\n+            // Only allow `impl Trait` in return position. i.e.:\n+            // ```rust\n+            // fn f(_: impl Fn() -> impl Debug) -> impl Fn() -> impl Debug\n+            // //      disallowed --^^^^^^^^^^        allowed --^^^^^^^^^^\n+            // ```\n+            FnRetTy::Ty(ty) if matches!(itctx, ImplTraitContext::ReturnPositionOpaqueTy { .. }) => {\n+                self.lower_ty(&ty, itctx)\n+            }\n             FnRetTy::Ty(ty) => {\n                 self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n             }"}, {"sha": "f5f1909cf58b05aa48f4c48fbdfb340ae3ecf0c2", "filename": "src/test/ui/impl-trait/impl_fn_associativity.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+use std::fmt::Debug;\n+\n+fn f_debug() -> impl Fn() -> impl Debug {\n+    || ()\n+}\n+\n+fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {\n+    || f_debug()\n+}\n+\n+fn main() {\n+    // Check that `ff_debug` is `() -> (() -> Debug)` and not `(() -> ()) -> Debug`\n+    let debug = ff_debug()()();\n+    assert_eq!(format!(\"{:?}\", debug), \"()\");\n+}"}, {"sha": "9b0dbacaded8d02f3940df9f6bf28b09fc875d7e", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -25,8 +25,7 @@ fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-//~^ `impl Trait` only allowed in function and inherent method return types\n-    || 5\n+    || 5u8\n }\n \n fn main() {}"}, {"sha": "e2ce7d15a0697f6aa1617719321de0c41af99109", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -40,12 +40,6 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/nested_impl_trait.rs:27:42\n-   |\n-LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-   |                                          ^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n   --> $DIR/nested_impl_trait.rs:5:46\n    |\n@@ -64,7 +58,7 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    = help: the trait `Into<U>` is implemented for `T`\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0277, E0562, E0666.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "d337ab422d746cfa0cf8a6a5d0f66ac870a8d5b4", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -39,9 +39,8 @@ fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n-// Disallowed\n+// Allowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n@@ -57,9 +56,8 @@ fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n-// Disallowed\n+// Allowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }"}, {"sha": "1b704d0d924654093264fd2ce30bac6b07b27007", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b494f427cb06896996fb02ac8c3ff745fde4d15/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=8b494f427cb06896996fb02ac8c3ff745fde4d15", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:46:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:55:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:119:16\n+  --> $DIR/where-allowed.rs:117:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:154:23\n+  --> $DIR/where-allowed.rs:152:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:155:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -85,80 +85,68 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:43:57\n-   |\n-LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-   |                                                         ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:46:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:52:53\n+  --> $DIR/where-allowed.rs:51:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:55:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:61:59\n-   |\n-LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-   |                                                           ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:65:38\n+  --> $DIR/where-allowed.rs:63:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:69:40\n+  --> $DIR/where-allowed.rs:67:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:82:32\n+  --> $DIR/where-allowed.rs:80:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n-  --> $DIR/where-allowed.rs:86:41\n+  --> $DIR/where-allowed.rs:84:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:90:27\n+  --> $DIR/where-allowed.rs:88:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:95:25\n+  --> $DIR/where-allowed.rs:93:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:97:20\n+  --> $DIR/where-allowed.rs:95:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n-  --> $DIR/where-allowed.rs:108:23\n+  --> $DIR/where-allowed.rs:106:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -167,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n-  --> $DIR/where-allowed.rs:125:34\n+  --> $DIR/where-allowed.rs:123:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -176,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n-  --> $DIR/where-allowed.rs:138:33\n+  --> $DIR/where-allowed.rs:136:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n-  --> $DIR/where-allowed.rs:141:31\n+  --> $DIR/where-allowed.rs:139:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:155:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n-  --> $DIR/where-allowed.rs:162:16\n+  --> $DIR/where-allowed.rs:160:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:167:24\n+  --> $DIR/where-allowed.rs:165:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:172:6\n+  --> $DIR/where-allowed.rs:170:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:178:24\n+  --> $DIR/where-allowed.rs:176:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:184:11\n+  --> $DIR/where-allowed.rs:182:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:191:15\n+  --> $DIR/where-allowed.rs:189:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n-  --> $DIR/where-allowed.rs:198:24\n+  --> $DIR/where-allowed.rs:196:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:205:17\n+  --> $DIR/where-allowed.rs:203:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:212:22\n+  --> $DIR/where-allowed.rs:210:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:218:40\n+  --> $DIR/where-allowed.rs:216:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:222:36\n+  --> $DIR/where-allowed.rs:220:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:226:38\n+  --> $DIR/where-allowed.rs:224:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:230:41\n+  --> $DIR/where-allowed.rs:228:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:234:11\n+  --> $DIR/where-allowed.rs:232:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:241:40\n+  --> $DIR/where-allowed.rs:239:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n-  --> $DIR/where-allowed.rs:247:29\n+  --> $DIR/where-allowed.rs:245:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n-  --> $DIR/where-allowed.rs:249:46\n+  --> $DIR/where-allowed.rs:247:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:234:7\n+  --> $DIR/where-allowed.rs:232:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -306,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:241:36\n+  --> $DIR/where-allowed.rs:239:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -315,14 +303,14 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:234:23\n+  --> $DIR/where-allowed.rs:232:23\n    |\n LL | impl <T = impl Debug> T {}\n    |                       ^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n-error: aborting due to 49 previous errors\n+error: aborting due to 47 previous errors\n \n Some errors have detailed explanations: E0118, E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0118`."}]}