{"sha": "d56f457715a603be36e454945b5b3d3ab0a7ccdc", "node_id": "C_kwDOAAsO6NoAKGQ1NmY0NTc3MTVhNjAzYmUzNmU0NTQ5NDViNWIzZDNhYjBhN2NjZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T13:36:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T13:36:49Z"}, "message": "Auto merge of #8483 - ldm0:iter_with_drain_simple, r=flip1995,giraffate\n\nUse `.into_iter()` rather than `.drain(..)`\n\nReplacing `.drain(..)` with `.into_iter()` makes my project's binary size smaller.\n\nFixes #1908\n\nApplicability of this suggestion is `MaybeIncorrect` rather than `MachineApplicable` due to the complexity of \"checking otherwise usage\" X-|\n\nchangelog: Add new lint [`iter_with_drain`]", "tree": {"sha": "305bb8f135dbc6f5a51382e2c85abad70b8ac35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305bb8f135dbc6f5a51382e2c85abad70b8ac35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56f457715a603be36e454945b5b3d3ab0a7ccdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56f457715a603be36e454945b5b3d3ab0a7ccdc", "html_url": "https://github.com/rust-lang/rust/commit/d56f457715a603be36e454945b5b3d3ab0a7ccdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56f457715a603be36e454945b5b3d3ab0a7ccdc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4af1d2d8c5048501fae24dbc34836c841e7d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4af1d2d8c5048501fae24dbc34836c841e7d6e", "html_url": "https://github.com/rust-lang/rust/commit/ef4af1d2d8c5048501fae24dbc34836c841e7d6e"}, {"sha": "6cc2eeaa56b6f37f6c44a39e8b137fb22731aedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc2eeaa56b6f37f6c44a39e8b137fb22731aedc", "html_url": "https://github.com/rust-lang/rust/commit/6cc2eeaa56b6f37f6c44a39e8b137fb22731aedc"}], "stats": {"total": 290, "additions": 276, "deletions": 14}, "files": [{"sha": "7f18a00a9ddde6e07fc8d02168e7272c9449168a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -3225,6 +3225,7 @@ Released 2018-09-13\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n [`iter_overeager_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n+[`iter_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_with_drain\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n [`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays"}, {"sha": "f388ae7ce601ce7d2e5456afd94d9d17d0691ef8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -164,6 +164,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::ITER_NTH_ZERO),\n     LintId::of(methods::ITER_OVEREAGER_CLONED),\n     LintId::of(methods::ITER_SKIP_NEXT),\n+    LintId::of(methods::ITER_WITH_DRAIN),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n     LintId::of(methods::MANUAL_FIND_MAP),\n     LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),"}, {"sha": "d248c2a41ee89b49b92edf34f69d8d7905e876e3", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -299,6 +299,7 @@ store.register_lints(&[\n     methods::ITER_NTH_ZERO,\n     methods::ITER_OVEREAGER_CLONED,\n     methods::ITER_SKIP_NEXT,\n+    methods::ITER_WITH_DRAIN,\n     methods::MANUAL_FILTER_MAP,\n     methods::MANUAL_FIND_MAP,\n     methods::MANUAL_SATURATING_ARITHMETIC,"}, {"sha": "6e9c0ee33a12dec66b8accbf3647ddd610e039f9", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(methods::EXTEND_WITH_DRAIN),\n     LintId::of(methods::ITER_NTH),\n     LintId::of(methods::ITER_OVEREAGER_CLONED),\n+    LintId::of(methods::ITER_WITH_DRAIN),\n     LintId::of(methods::MANUAL_STR_REPEAT),\n     LintId::of(methods::OR_FUN_CALL),\n     LintId::of(methods::SINGLE_CHAR_PATTERN),"}, {"sha": "958c3773087b6aa70f19636f445a847e07fd99e5", "filename": "clippy_lints/src/methods/iter_with_drain.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -0,0 +1,72 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_integer_const;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{\n+    higher::{self, Range},\n+    SpanlessEq,\n+};\n+use rustc_ast::ast::RangeLimits;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n+\n+use super::ITER_WITH_DRAIN;\n+\n+const DRAIN_TYPES: &[Symbol] = &[sym::Vec, sym::VecDeque];\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, arg: &Expr<'_>) {\n+    let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+    if let Some(drained_type) = DRAIN_TYPES.iter().find(|&&sym| is_type_diagnostic_item(cx, ty, sym)) {\n+        // Refuse to emit `into_iter` suggestion on draining struct fields due\n+        // to the strong possibility of processing unmovable field.\n+        if let ExprKind::Field(..) = recv.kind {\n+            return;\n+        }\n+\n+        if let Some(range) = higher::Range::hir(arg) {\n+            let left_full = match range {\n+                Range { start: Some(start), .. } if is_integer_const(cx, start, 0) => true,\n+                Range { start: None, .. } => true,\n+                _ => false,\n+            };\n+            let full = left_full\n+                && match range {\n+                    Range {\n+                        end: Some(end),\n+                        limits: RangeLimits::HalfOpen,\n+                        ..\n+                    } => {\n+                        // `x.drain(..x.len())` call\n+                        if_chain! {\n+                            if let ExprKind::MethodCall(len_path, len_args, _) = end.kind;\n+                            if len_path.ident.name == sym::len && len_args.len() == 1;\n+                            if let ExprKind::Path(QPath::Resolved(_, drain_path)) = recv.kind;\n+                            if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_args[0].kind;\n+                            if SpanlessEq::new(cx).eq_path(drain_path, len_path);\n+                            then { true }\n+                            else { false }\n+                        }\n+                    },\n+                    Range {\n+                        end: None,\n+                        limits: RangeLimits::HalfOpen,\n+                        ..\n+                    } => true,\n+                    _ => false,\n+                };\n+            if full {\n+                span_lint_and_sugg(\n+                    cx,\n+                    ITER_WITH_DRAIN,\n+                    span.with_hi(expr.span.hi()),\n+                    &format!(\"`drain(..)` used on a `{}`\", drained_type),\n+                    \"try this\",\n+                    \"into_iter()\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "5edd22cd14c7dff6c73ddb2bff1df676691b8e9a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -32,6 +32,7 @@ mod iter_nth;\n mod iter_nth_zero;\n mod iter_overeager_cloned;\n mod iter_skip_next;\n+mod iter_with_drain;\n mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n mod manual_str_repeat;\n@@ -1118,6 +1119,31 @@ declare_clippy_lint! {\n     \"using `.skip(x).next()` on an iterator\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for use of `.drain(..)` on `Vec` and `VecDeque` for iteration.\n+    ///\n+    /// ### Why is this bad?\n+    /// `.into_iter()` is simpler with better performance.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n+    /// let mut foo = vec![0, 1, 2, 3];\n+    /// let bar: HashSet<usize> = foo.drain(..).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n+    /// let foo = vec![0, 1, 2, 3];\n+    /// let bar: HashSet<usize> = foo.into_iter().collect();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub ITER_WITH_DRAIN,\n+    perf,\n+    \"replace `.drain(..)` with `.into_iter()`\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.get().unwrap()` (or\n@@ -2047,6 +2073,7 @@ impl_lint_pass!(Methods => [\n     GET_UNWRAP,\n     STRING_EXTEND_CHARS,\n     ITER_CLONED_COLLECT,\n+    ITER_WITH_DRAIN,\n     USELESS_ASREF,\n     UNNECESSARY_FOLD,\n     UNNECESSARY_FILTER_MAP,\n@@ -2327,6 +2354,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n                 _ => {},\n             },\n+            (\"drain\", [arg]) => {\n+                iter_with_drain::check(cx, expr, recv, span, arg);\n+            },\n             (\"expect\", [_]) => match method_call(recv) {\n                 Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n                 _ => expect_used::check(cx, expr, recv),"}, {"sha": "940a8428f77950c5900103f27daf2d1799f0a07f", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -399,9 +399,9 @@ fn if_statment_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n \n fn append_opt_vecs<A>(target_opt: Option<Vec<A>>, source_opt: Option<Vec<A>>) -> Option<Vec<A>> {\n     match (target_opt, source_opt) {\n-        (Some(mut target), Some(mut source)) => {\n+        (Some(mut target), Some(source)) => {\n             target.reserve(source.len());\n-            for op in source.drain(..) {\n+            for op in source {\n                 target.push(op);\n             }\n             Some(target)\n@@ -436,9 +436,9 @@ fn chained_binops_helper<'expr>(left_outer: &'expr Expr, right_outer: &'expr Exp\n             chained_binops_helper(left_left, left_right),\n             chained_binops_helper(right_left, right_right),\n         ) {\n-            (Some(mut left_ops), Some(mut right_ops)) => {\n+            (Some(mut left_ops), Some(right_ops)) => {\n                 left_ops.reserve(right_ops.len());\n-                for op in right_ops.drain(..) {\n+                for op in right_ops {\n                     left_ops.push(op);\n                 }\n                 Some(left_ops)"}, {"sha": "a617422bbeb0457d42b136b5fd690bec2dbbc54b", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -473,7 +473,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// ```\n     fn check_expr(&mut self, cx: &LateContext<'hir>, expr: &'hir hir::Expr<'_>) {\n         if let Some(args) = match_lint_emission(cx, expr) {\n-            let mut emission_info = extract_emission_info(cx, args);\n+            let emission_info = extract_emission_info(cx, args);\n             if emission_info.is_empty() {\n                 // See:\n                 // - src/misc.rs:734:9\n@@ -483,7 +483,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 return;\n             }\n \n-            for (lint_name, applicability, is_multi_part) in emission_info.drain(..) {\n+            for (lint_name, applicability, is_multi_part) in emission_info {\n                 let app_info = self.applicability_info.entry(lint_name).or_default();\n                 app_info.applicability = applicability;\n                 app_info.is_multi_part_suggestion = is_multi_part;\n@@ -693,7 +693,7 @@ fn extract_emission_info<'hir>(\n     }\n \n     lints\n-        .drain(..)\n+        .into_iter()\n         .map(|lint_name| (lint_name, applicability, multi_part))\n         .collect()\n }"}, {"sha": "00594f4d42addb594875349a2e6e2e031e24423a", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -74,6 +74,10 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         self.inter_expr().eq_expr(left, right)\n     }\n \n+    pub fn eq_path(&mut self, left: &Path<'_>, right: &Path<'_>) -> bool {\n+        self.inter_expr().eq_path(left, right)\n+    }\n+\n     pub fn eq_path_segment(&mut self, left: &PathSegment<'_>, right: &PathSegment<'_>) -> bool {\n         self.inter_expr().eq_path_segment(left, right)\n     }\n@@ -362,7 +366,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n-    fn eq_path(&mut self, left: &Path<'_>, right: &Path<'_>) -> bool {\n+    pub fn eq_path(&mut self, left: &Path<'_>, right: &Path<'_>) -> bool {\n         match (left.res, right.res) {\n             (Res::Local(l), Res::Local(r)) => l == r || self.locals.get(&l) == Some(&r),\n             (Res::Local(_), _) | (_, Res::Local(_)) => false,"}, {"sha": "71ebad24c16ea0b622f9d02a044c4f17ce5fbd21", "filename": "tests/ui/extend_with_drain.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fextend_with_drain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fextend_with_drain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextend_with_drain.fixed?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n #![warn(clippy::extend_with_drain)]\n+#![allow(clippy::iter_with_drain)]\n use std::collections::BinaryHeap;\n fn main() {\n     //gets linted\n     let mut vec1 = vec![0u8; 1024];\n     let mut vec2: std::vec::Vec<u8> = Vec::new();\n-\n     vec2.append(&mut vec1);\n \n     let mut vec3 = vec![0u8; 1024];\n@@ -17,7 +17,7 @@ fn main() {\n \n     vec11.append(&mut return_vector());\n \n-    //won't get linted it dosen't move the entire content of a vec into another\n+    //won't get linted it doesn't move the entire content of a vec into another\n     let mut test1 = vec![0u8, 10];\n     let mut test2: std::vec::Vec<u8> = Vec::new();\n "}, {"sha": "e9f011abb0e837f301fd44682fb7fccb7c0d02a1", "filename": "tests/ui/extend_with_drain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fextend_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fextend_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextend_with_drain.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n #![warn(clippy::extend_with_drain)]\n+#![allow(clippy::iter_with_drain)]\n use std::collections::BinaryHeap;\n fn main() {\n     //gets linted\n     let mut vec1 = vec![0u8; 1024];\n     let mut vec2: std::vec::Vec<u8> = Vec::new();\n-\n     vec2.extend(vec1.drain(..));\n \n     let mut vec3 = vec![0u8; 1024];\n@@ -17,7 +17,7 @@ fn main() {\n \n     vec11.extend(return_vector().drain(..));\n \n-    //won't get linted it dosen't move the entire content of a vec into another\n+    //won't get linted it doesn't move the entire content of a vec into another\n     let mut test1 = vec![0u8, 10];\n     let mut test2: std::vec::Vec<u8> = Vec::new();\n "}, {"sha": "aea4dba9dd5a0166a422fb921b3efffb183c4684", "filename": "tests/ui/iter_with_drain.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_with_drain.fixed?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+// will emits unused mut warnings after fixing\n+#![allow(unused_mut)]\n+// will emits needless collect warnings after fixing\n+#![allow(clippy::needless_collect)]\n+#![warn(clippy::iter_with_drain)]\n+use std::collections::{BinaryHeap, HashMap, HashSet, VecDeque};\n+\n+fn full() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.into_iter().collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.into_iter().collect();\n+    let mut a: HashMap<_, _> = a.into_iter().map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+}\n+\n+fn closed() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.into_iter().collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.into_iter().collect();\n+    let mut a: HashMap<_, _> = a.into_iter().map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+}\n+\n+fn should_not_help() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.drain(1..).collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.drain(..a.len() - 1).collect();\n+    let mut a: HashMap<_, _> = a.drain(1..a.len() - 1).map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+\n+    let mut b = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let _: Vec<_> = b.drain(0..a.len()).collect();\n+}\n+\n+#[derive(Default)]\n+struct Bomb {\n+    fire: Vec<u8>,\n+}\n+\n+fn should_not_help_0(bomb: &mut Bomb) {\n+    let _: Vec<u8> = bomb.fire.drain(..).collect();\n+}\n+\n+fn main() {\n+    full();\n+    closed();\n+    should_not_help();\n+    should_not_help_0(&mut Bomb::default());\n+}"}, {"sha": "271878cffb44ccc8fcd7f1644ec24bbc6bc92dd7", "filename": "tests/ui/iter_with_drain.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_with_drain.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+// will emits unused mut warnings after fixing\n+#![allow(unused_mut)]\n+// will emits needless collect warnings after fixing\n+#![allow(clippy::needless_collect)]\n+#![warn(clippy::iter_with_drain)]\n+use std::collections::{BinaryHeap, HashMap, HashSet, VecDeque};\n+\n+fn full() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.drain(..).collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.drain(..).collect();\n+    let mut a: HashMap<_, _> = a.drain(..).map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+}\n+\n+fn closed() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.drain(0..).collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.drain(..a.len()).collect();\n+    let mut a: HashMap<_, _> = a.drain(0..a.len()).map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+}\n+\n+fn should_not_help() {\n+    let mut a = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let mut a: BinaryHeap<_> = a.drain(1..).collect();\n+    let mut a: HashSet<_> = a.drain().collect();\n+    let mut a: VecDeque<_> = a.drain().collect();\n+    let mut a: Vec<_> = a.drain(..a.len() - 1).collect();\n+    let mut a: HashMap<_, _> = a.drain(1..a.len() - 1).map(|x| (x.clone(), x)).collect();\n+    let _: Vec<(String, String)> = a.drain().collect();\n+\n+    let mut b = vec![\"aaa\".to_string(), \"bbb\".to_string()];\n+    let _: Vec<_> = b.drain(0..a.len()).collect();\n+}\n+\n+#[derive(Default)]\n+struct Bomb {\n+    fire: Vec<u8>,\n+}\n+\n+fn should_not_help_0(bomb: &mut Bomb) {\n+    let _: Vec<u8> = bomb.fire.drain(..).collect();\n+}\n+\n+fn main() {\n+    full();\n+    closed();\n+    should_not_help();\n+    should_not_help_0(&mut Bomb::default());\n+}"}, {"sha": "aa394439fa624c4d5d9d012fd0f056be251921c9", "filename": "tests/ui/iter_with_drain.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Fiter_with_drain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_with_drain.stderr?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -0,0 +1,40 @@\n+error: `drain(..)` used on a `Vec`\n+  --> $DIR/iter_with_drain.rs:11:34\n+   |\n+LL |     let mut a: BinaryHeap<_> = a.drain(..).collect();\n+   |                                  ^^^^^^^^^ help: try this: `into_iter()`\n+   |\n+   = note: `-D clippy::iter-with-drain` implied by `-D warnings`\n+\n+error: `drain(..)` used on a `VecDeque`\n+  --> $DIR/iter_with_drain.rs:14:27\n+   |\n+LL |     let mut a: Vec<_> = a.drain(..).collect();\n+   |                           ^^^^^^^^^ help: try this: `into_iter()`\n+\n+error: `drain(..)` used on a `Vec`\n+  --> $DIR/iter_with_drain.rs:15:34\n+   |\n+LL |     let mut a: HashMap<_, _> = a.drain(..).map(|x| (x.clone(), x)).collect();\n+   |                                  ^^^^^^^^^ help: try this: `into_iter()`\n+\n+error: `drain(..)` used on a `Vec`\n+  --> $DIR/iter_with_drain.rs:21:34\n+   |\n+LL |     let mut a: BinaryHeap<_> = a.drain(0..).collect();\n+   |                                  ^^^^^^^^^^ help: try this: `into_iter()`\n+\n+error: `drain(..)` used on a `VecDeque`\n+  --> $DIR/iter_with_drain.rs:24:27\n+   |\n+LL |     let mut a: Vec<_> = a.drain(..a.len()).collect();\n+   |                           ^^^^^^^^^^^^^^^^ help: try this: `into_iter()`\n+\n+error: `drain(..)` used on a `Vec`\n+  --> $DIR/iter_with_drain.rs:25:34\n+   |\n+LL |     let mut a: HashMap<_, _> = a.drain(0..a.len()).map(|x| (x.clone(), x)).collect();\n+   |                                  ^^^^^^^^^^^^^^^^^ help: try this: `into_iter()`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "40d7791df281a67f7700871529ed5d0aa96e8b16", "filename": "tests/ui/range_plus_minus_one.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Frange_plus_minus_one.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Frange_plus_minus_one.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.fixed?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![allow(unused_parens)]\n-\n+#![allow(clippy::iter_with_drain)]\n fn f() -> usize {\n     42\n }"}, {"sha": "a8ddd9b5f751b36ccb2fb065bd291ee0b2956328", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56f457715a603be36e454945b5b3d3ab0a7ccdc/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=d56f457715a603be36e454945b5b3d3ab0a7ccdc", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![allow(unused_parens)]\n-\n+#![allow(clippy::iter_with_drain)]\n fn f() -> usize {\n     42\n }"}]}