{"sha": "1d06058a77beffb6347c77b51e12889b7bd9fc76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMDYwNThhNzdiZWZmYjYzNDdjNzdiNTFlMTI4ODliN2JkOWZjNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-25T13:43:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-25T13:43:49Z"}, "message": "std: Reduce checks for `feature = \"backtrace\"`\n\nThis is a stylistic change to libstd to reduce the number of checks of\n`feature = \"backtrace\"` now that we unconditionally depend on the\n`backtrace` crate and rely on it having an empty implementation.\notherwise.", "tree": {"sha": "2eb3a1feff849ef282d27852d962a81afb7559cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb3a1feff849ef282d27852d962a81afb7559cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d06058a77beffb6347c77b51e12889b7bd9fc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d06058a77beffb6347c77b51e12889b7bd9fc76", "html_url": "https://github.com/rust-lang/rust/commit/1d06058a77beffb6347c77b51e12889b7bd9fc76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d06058a77beffb6347c77b51e12889b7bd9fc76/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ef275e6c3cb1384ec78128eceeb4963ff788dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef275e6c3cb1384ec78128eceeb4963ff788dca", "html_url": "https://github.com/rust-lang/rust/commit/6ef275e6c3cb1384ec78128eceeb4963ff788dca"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "638ce1679b8e98dc0c4db2f37b0462f9516d4a8c", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=1d06058a77beffb6347c77b51e12889b7bd9fc76", "patch": "@@ -15,9 +15,11 @@ use crate::intrinsics;\n use crate::mem;\n use crate::ptr;\n use crate::raw;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::{thread_info, util, backtrace};\n+use crate::sys_common::{thread_info, util};\n+use crate::sys_common::backtrace::{self, RustBacktrace};\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -158,16 +160,10 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    let log_backtrace = if cfg!(feature = \"backtrace\") {\n-        let panics = update_panic_count(0);\n-\n-        if panics >= 2 {\n-            Some(backtrace_rs::PrintFmt::Full)\n-        } else {\n-            backtrace::log_enabled()\n-        }\n+    let backtrace_env = if update_panic_count(0) >= 2 {\n+        RustBacktrace::Print(backtrace_rs::PrintFmt::Full)\n     } else {\n-        None\n+        backtrace::rust_backtrace_env()\n     };\n \n     // The current implementation always returns `Some`.\n@@ -187,16 +183,16 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        if cfg!(feature = \"backtrace\") {\n-            use crate::sync::atomic::{AtomicBool, Ordering};\n-\n-            static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n+        static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n-            if let Some(format) = log_backtrace {\n-                let _ = backtrace::print(err, format);\n-            } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n-                let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n-                                       environment variable to display a backtrace.\");\n+        match backtrace_env {\n+            RustBacktrace::Print(format) => drop(backtrace::print(err, format)),\n+            RustBacktrace::Disabled => {}\n+            RustBacktrace::RuntimeDisabled => {\n+                if FIRST_PANIC.swap(false, Ordering::SeqCst) {\n+                    let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n+                                           environment variable to display a backtrace.\");\n+                }\n             }\n         }\n     };"}, {"sha": "63e35d5ed919a294fa1c191479b008650b363aac", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=1d06058a77beffb6347c77b51e12889b7bd9fc76", "patch": "@@ -44,12 +44,9 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindS\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        #[cfg(feature = \"backtrace\")]\n         let exit_code = panic::catch_unwind(|| {\n             sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n-        #[cfg(not(feature = \"backtrace\"))]\n-        let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();\n         exit_code.unwrap_or(101) as isize"}, {"sha": "9c406ec39cc45a3afebe9154db865346318337a2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=1d06058a77beffb6347c77b51e12889b7bd9fc76", "patch": "@@ -7,6 +7,7 @@ use crate::io;\n use crate::borrow::Cow;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n+use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n@@ -115,8 +116,10 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     Ok(())\n }\n \n-/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n-#[inline(never)]\n+/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`. Note that\n+/// this is only inline(never) when backtraces in libstd are enabled, otherwise\n+/// it's fine to optimize away.\n+#[cfg_attr(feature = \"backtrace\", inline(never))]\n pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n where\n     F: FnOnce() -> T,\n@@ -126,42 +129,49 @@ where\n     f()\n }\n \n+pub enum RustBacktrace {\n+    Print(PrintFmt),\n+    Disabled,\n+    RuntimeDisabled,\n+}\n+\n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n-pub fn log_enabled() -> Option<PrintFmt> {\n-    use crate::sync::atomic::{self, Ordering};\n+pub fn rust_backtrace_env() -> RustBacktrace {\n+    // If the `backtrace` feature of this crate isn't enabled quickly return\n+    // `None` so this can be constant propagated all over the place to turn\n+    // optimize away callers.\n+    if !cfg!(feature = \"backtrace\") {\n+        return RustBacktrace::Disabled;\n+    }\n \n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {\n-        return Some(PrintFmt::Full);\n+        return RustBacktrace::Print(PrintFmt::Full);\n     }\n \n     static ENABLED: atomic::AtomicIsize = atomic::AtomicIsize::new(0);\n     match ENABLED.load(Ordering::SeqCst) {\n         0 => {}\n-        1 => return None,\n-        2 => return Some(PrintFmt::Short),\n-        _ => return Some(PrintFmt::Full),\n+        1 => return RustBacktrace::RuntimeDisabled,\n+        2 => return RustBacktrace::Print(PrintFmt::Short),\n+        _ => return RustBacktrace::Print(PrintFmt::Full),\n     }\n \n-    let val = env::var_os(\"RUST_BACKTRACE\").and_then(|x| {\n-        if &x == \"0\" {\n-            None\n-        } else if &x == \"full\" {\n-            Some(PrintFmt::Full)\n-        } else {\n-            Some(PrintFmt::Short)\n-        }\n-    });\n-    ENABLED.store(\n-        match val {\n-            Some(v) => v as isize,\n-            None => 1,\n-        },\n-        Ordering::SeqCst,\n-    );\n-    val\n+    let (format, cache) = env::var_os(\"RUST_BACKTRACE\")\n+        .map(|x| {\n+            if &x == \"0\" {\n+                (RustBacktrace::RuntimeDisabled, 1)\n+            } else if &x == \"full\" {\n+                (RustBacktrace::Print(PrintFmt::Full), 3)\n+            } else {\n+                (RustBacktrace::Print(PrintFmt::Short), 2)\n+            }\n+        })\n+        .unwrap_or((RustBacktrace::RuntimeDisabled, 1));\n+    ENABLED.store(cache, Ordering::SeqCst);\n+    format\n }\n \n /// Prints the filename of the backtrace frame."}, {"sha": "0ffa6ace2e4d2ea73ce1824b2149152c2bd90b70", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d06058a77beffb6347c77b51e12889b7bd9fc76/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=1d06058a77beffb6347c77b51e12889b7bd9fc76", "patch": "@@ -465,12 +465,9 @@ impl Builder {\n             }\n \n             thread_info::set(imp::guard::current(), their_thread);\n-            #[cfg(feature = \"backtrace\")]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                 crate::sys_common::backtrace::__rust_begin_short_backtrace(f)\n             }));\n-            #[cfg(not(feature = \"backtrace\"))]\n-            let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n             *their_packet.get() = Some(try_result);\n         };\n "}]}