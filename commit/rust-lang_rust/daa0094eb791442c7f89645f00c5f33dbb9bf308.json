{"sha": "daa0094eb791442c7f89645f00c5f33dbb9bf308", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTAwOTRlYjc5MTQ0MmM3Zjg5NjQ1ZjAwYzVmMzNkYmI5YmYzMDg=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-04-28T08:28:22Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-05-01T17:24:10Z"}, "message": "Queryify is_item_mir_available", "tree": {"sha": "c9131fd8bc1cb0289acc0f550bd305879ef26ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9131fd8bc1cb0289acc0f550bd305879ef26ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa0094eb791442c7f89645f00c5f33dbb9bf308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0094eb791442c7f89645f00c5f33dbb9bf308", "html_url": "https://github.com/rust-lang/rust/commit/daa0094eb791442c7f89645f00c5f33dbb9bf308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa0094eb791442c7f89645f00c5f33dbb9bf308/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb4380b12db03264afbd085e1f654b0a38ecc3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4380b12db03264afbd085e1f654b0a38ecc3f2", "html_url": "https://github.com/rust-lang/rust/commit/fb4380b12db03264afbd085e1f654b0a38ecc3f2"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "50920ca7f7ea0c3b3e372ed37aa669856d4a0f36", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -250,8 +250,6 @@ pub trait CrateStore {\n     fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> &'tcx hir::Body;\n \n-    fn is_item_mir_available(&self, def: DefId) -> bool;\n-\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n@@ -399,10 +397,6 @@ impl CrateStore for DummyCrateStore {\n         bug!(\"item_body\")\n     }\n \n-    fn is_item_mir_available(&self, def: DefId) -> bool {\n-        bug!(\"is_item_mir_available\")\n-    }\n-\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum> { vec![] }"}, {"sha": "3f18a480dd67cf68d9f67b1db04077410ef2a831", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -305,6 +305,13 @@ impl<'tcx> QueryDescription for queries::const_is_rvalue_promotable_to_static<'t\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"checking if item is mir available: `{}`\",\n+            tcx.item_path_str(def_id))\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -595,6 +602,7 @@ define_maps! { <'tcx>\n \n     [] item_body_nested_bodies: metadata_dep_node(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n     [] const_is_rvalue_promotable_to_static: metadata_dep_node(DefId) -> bool,\n+    [] is_item_mir_available: metadata_dep_node(DefId) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {"}, {"sha": "7d43e0d0659cc43e76cbcea30be60d10a66e4458", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -2332,7 +2332,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        if !did.is_local() && !self.sess.cstore.is_item_mir_available(did) {\n+        if !did.is_local() && !self.is_item_mir_available(did) {\n             return None;\n         }\n "}, {"sha": "f5a8accea2803200bcaf23447bafbdc97150d57d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -126,6 +126,10 @@ provide! { <'tcx> tcx, def_id, cdata\n         cdata.entry(def_id.index).ast.expect(\"const item missing `ast`\")\n             .decode(cdata).rvalue_promotable_to_static\n     }\n+    is_item_mir_available => {\n+        !cdata.is_proc_macro(def_id.index) &&\n+        cdata.maybe_entry(def_id.index).and_then(|item| item.decode(cdata).mir).is_some()\n+    }\n }\n \n impl CrateStore for cstore::CStore {\n@@ -443,11 +447,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def_id.krate).item_body(tcx, def_id.index)\n     }\n \n-    fn is_item_mir_available(&self, def: DefId) -> bool {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).is_item_mir_available(def.index)\n-    }\n-\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "933166b0524533423e37ecc39fd29521024cf7fe", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -441,11 +441,11 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n-    fn is_proc_macro(&self, id: DefIndex) -> bool {\n+    pub fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.proc_macros.is_some() && id != CRATE_DEF_INDEX\n     }\n \n-    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+    pub fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         assert!(!self.is_proc_macro(item_id));\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n@@ -772,11 +772,6 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n-    pub fn is_item_mir_available(&self, id: DefIndex) -> bool {\n-        !self.is_proc_macro(id) &&\n-        self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n-    }\n-\n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)"}, {"sha": "786001161573fda456d705524c23ee64a90ce11d", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa0094eb791442c7f89645f00c5f33dbb9bf308/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=daa0094eb791442c7f89645f00c5f33dbb9bf308", "patch": "@@ -659,7 +659,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n                 // in this crate\n                 false\n             } else {\n-                if !tcx.sess.cstore.is_item_mir_available(def_id) {\n+                if !tcx.is_item_mir_available(def_id) {\n                     bug!(\"Cannot create local trans-item for {:?}\", def_id)\n                 }\n                 true"}]}