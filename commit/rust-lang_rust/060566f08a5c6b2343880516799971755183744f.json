{"sha": "060566f08a5c6b2343880516799971755183744f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDU2NmYwOGE1YzZiMjM0Mzg4MDUxNjc5OTk3MTc1NTE4Mzc0NGY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-31T02:00:35Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-31T22:05:12Z"}, "message": "Fix RustDoc bug", "tree": {"sha": "c38cb8832d54949ec5619656da528b9a9cf9767f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38cb8832d54949ec5619656da528b9a9cf9767f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060566f08a5c6b2343880516799971755183744f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060566f08a5c6b2343880516799971755183744f", "html_url": "https://github.com/rust-lang/rust/commit/060566f08a5c6b2343880516799971755183744f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060566f08a5c6b2343880516799971755183744f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2474d7d2c44a8684925838abc8ef7729d2997a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/2474d7d2c44a8684925838abc8ef7729d2997a05", "html_url": "https://github.com/rust-lang/rust/commit/2474d7d2c44a8684925838abc8ef7729d2997a05"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "d87d8776d4a6cecb27236f3b858b09789d0013ee", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/060566f08a5c6b2343880516799971755183744f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060566f08a5c6b2343880516799971755183744f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=060566f08a5c6b2343880516799971755183744f", "patch": "@@ -73,10 +73,10 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n             record_extern_fqn(cx, did, clean::TypeTrait);\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n-        def::DefFn(did, style, false) => {\n+        def::DefFn(did, false) => {\n             // If this function is a tuple struct constructor, we just skip it\n             record_extern_fqn(cx, did, clean::TypeFunction);\n-            clean::FunctionItem(build_external_function(cx, tcx, did, style))\n+            clean::FunctionItem(build_external_function(cx, tcx, did))\n         }\n         def::DefStruct(did) => {\n             record_extern_fqn(cx, did, clean::TypeStruct);\n@@ -167,15 +167,14 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     }\n }\n \n-fn build_external_function(cx: &DocContext, tcx: &ty::ctxt,\n-                           did: ast::DefId,\n-                           style: ast::FnStyle) -> clean::Function {\n+fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::Function {\n     let t = ty::lookup_item_type(tcx, did);\n+    let (decl, style) = match ty::get(t.ty).sty {\n+        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.fn_style),\n+        _ => panic!(\"bad function\"),\n+    };\n     clean::Function {\n-        decl: match ty::get(t.ty).sty {\n-            ty::ty_bare_fn(ref f) => (did, &f.sig).clean(cx),\n-            _ => panic!(\"bad function\"),\n-        },\n+        decl: decl,\n         generics: (&t.generics, subst::FnSpace).clean(cx),\n         fn_style: style,\n     }"}, {"sha": "c128588918e28183a150caa7fbf84d8e82edc9b8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060566f08a5c6b2343880516799971755183744f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060566f08a5c6b2343880516799971755183744f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=060566f08a5c6b2343880516799971755183744f", "patch": "@@ -2124,7 +2124,7 @@ fn resolve_type(cx: &DocContext, path: Path,\n \n fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n     let (did, kind) = match def {\n-        def::DefFn(i, _, _) => (i, TypeFunction),\n+        def::DefFn(i, _) => (i, TypeFunction),\n         def::DefTy(i, false) => (i, TypeTypedef),\n         def::DefTy(i, true) => (i, TypeEnum),\n         def::DefTrait(i) => (i, TypeTrait),"}]}