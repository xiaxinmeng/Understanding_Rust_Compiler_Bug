{"sha": "b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzdiNzdmMTM2M2M2ZThiYjhiOWNjMTFjNjAwZWNiMTdhMmZjYzk=", "commit": {"author": {"name": "Jormundir", "email": "Chaseph@gmail.com", "date": "2015-02-04T06:01:24Z"}, "committer": {"name": "Jormundir", "email": "Chaseph@gmail.com", "date": "2015-02-04T15:34:01Z"}, "message": "std::os::errno returns platform specific value. fixes #21898", "tree": {"sha": "f5dbc302e0f9f051fd3f3a979f47a943fc11b403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5dbc302e0f9f051fd3f3a979f47a943fc11b403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "html_url": "https://github.com/rust-lang/rust/commit/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/comments", "author": {"login": "Jormundir", "id": 2193814, "node_id": "MDQ6VXNlcjIxOTM4MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2193814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jormundir", "html_url": "https://github.com/Jormundir", "followers_url": "https://api.github.com/users/Jormundir/followers", "following_url": "https://api.github.com/users/Jormundir/following{/other_user}", "gists_url": "https://api.github.com/users/Jormundir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jormundir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jormundir/subscriptions", "organizations_url": "https://api.github.com/users/Jormundir/orgs", "repos_url": "https://api.github.com/users/Jormundir/repos", "events_url": "https://api.github.com/users/Jormundir/events{/privacy}", "received_events_url": "https://api.github.com/users/Jormundir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jormundir", "id": 2193814, "node_id": "MDQ6VXNlcjIxOTM4MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2193814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jormundir", "html_url": "https://github.com/Jormundir", "followers_url": "https://api.github.com/users/Jormundir/followers", "following_url": "https://api.github.com/users/Jormundir/following{/other_user}", "gists_url": "https://api.github.com/users/Jormundir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jormundir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jormundir/subscriptions", "organizations_url": "https://api.github.com/users/Jormundir/orgs", "repos_url": "https://api.github.com/users/Jormundir/repos", "events_url": "https://api.github.com/users/Jormundir/events{/privacy}", "received_events_url": "https://api.github.com/users/Jormundir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac134f7ca435551964996ee88319241cd3c7c110", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac134f7ca435551964996ee88319241cd3c7c110", "html_url": "https://github.com/rust-lang/rust/commit/ac134f7ca435551964996ee88319241cd3c7c110"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8818211010f0db4dae99d3c6f6ab2254c03231b8", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "patch": "@@ -337,7 +337,7 @@ impl IoError {\n     /// If `detail` is `true`, the `detail` field of the `IoError`\n     /// struct is filled with an allocated string describing the error\n     /// in more detail, retrieved from the operating system.\n-    pub fn from_errno(errno: uint, detail: bool) -> IoError {\n+    pub fn from_errno(errno: i32, detail: bool) -> IoError {\n         let mut err = sys::decode_error(errno as i32);\n         if detail && err.kind == OtherIoError {\n             err.detail = Some(os::error_string(errno).chars()\n@@ -353,7 +353,7 @@ impl IoError {\n     /// operating system) between the call(s) for which errors are\n     /// being checked and the call of this function.\n     pub fn last_error() -> IoError {\n-        IoError::from_errno(os::errno() as uint, true)\n+        IoError::from_errno(os::errno() as i32, true)\n     }\n }\n "}, {"sha": "8d1c3a1e3ae075ce832b1a05ff8167677678a200", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "patch": "@@ -513,8 +513,8 @@ pub fn change_dir(p: &Path) -> IoResult<()> {\n }\n \n /// Returns the platform-specific value of errno\n-pub fn errno() -> uint {\n-    sys::os::errno() as uint\n+pub fn errno() -> i32 {\n+    sys::os::errno() as i32\n }\n \n /// Return the string corresponding to an `errno()` value of `errnum`.\n@@ -524,15 +524,15 @@ pub fn errno() -> uint {\n /// use std::os;\n ///\n /// // Same as println!(\"{}\", last_os_error());\n-/// println!(\"{}\", os::error_string(os::errno() as uint));\n+/// println!(\"{}\", os::error_string(os::errno() as i32));\n /// ```\n-pub fn error_string(errnum: uint) -> String {\n+pub fn error_string(errnum: i32) -> String {\n     return sys::os::error_string(errnum as i32);\n }\n \n /// Get a string representing the platform-dependent last error\n pub fn last_os_error() -> String {\n-    error_string(errno() as uint)\n+    error_string(errno() as i32)\n }\n \n /// Sets the process exit code"}, {"sha": "87bf848144d2728869581b0ba08b87daad095f8b", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "patch": "@@ -388,7 +388,7 @@ impl Process {\n                 match unsafe { c::select(max, &mut set, ptr::null_mut(),\n                                          ptr::null_mut(), p) } {\n                     // interrupted, retry\n-                    -1 if os::errno() == libc::EINTR as uint => continue,\n+                    -1 if os::errno() == libc::EINTR as i32 => continue,\n \n                     // We read something, break out and process\n                     1 | 2 => {}"}, {"sha": "4cd98f4442b0fcb8bab3506f4c7ff0388adced53", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=b877b77f1363c6e8bb8b9cc11c600ecb17a2fcc9", "patch": "@@ -198,7 +198,7 @@ fn helper(input: libc::c_int, messages: Receiver<Req>, _: ()) {\n                 assert_eq!(fd.read(&mut buf).ok().unwrap(), 1);\n             }\n \n-            -1 if os::errno() == libc::EINTR as uint => {}\n+            -1 if os::errno() == libc::EINTR as i32 => {}\n             n => panic!(\"helper thread failed in select() with error: {} ({})\",\n                        n, os::last_os_error())\n         }"}]}