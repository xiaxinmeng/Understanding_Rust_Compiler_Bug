{"sha": "3a6cd649b4d82c564bdd7699441aeb4d49058dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNmNkNjQ5YjRkODJjNTY0YmRkNzY5OTQ0MWFlYjRkNDkwNThkYzk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-06T17:39:03Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-06T21:26:59Z"}, "message": "Significantly improve formatter trait docs\n\nEach formatting trait now has an example of implementation, as well as a\nfuller description of what it's supposed to output.\n\nIt also contains a link to the module-level documentation which\n\nFixes #25765", "tree": {"sha": "a6c3dfc60b6bc77db213abdcee324dfdc1279e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6c3dfc60b6bc77db213abdcee324dfdc1279e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6cd649b4d82c564bdd7699441aeb4d49058dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6cd649b4d82c564bdd7699441aeb4d49058dc9", "html_url": "https://github.com/rust-lang/rust/commit/3a6cd649b4d82c564bdd7699441aeb4d49058dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6cd649b4d82c564bdd7699441aeb4d49058dc9/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9748574271847c1d6e65b71eca175cfcac9361f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9748574271847c1d6e65b71eca175cfcac9361f5", "html_url": "https://github.com/rust-lang/rust/commit/9748574271847c1d6e65b71eca175cfcac9361f5"}], "stats": {"total": 311, "additions": 300, "deletions": 11}, "files": [{"sha": "0bb519ec0951925f99ded3f415a855aeb7a50393", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 300, "deletions": 11, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/3a6cd649b4d82c564bdd7699441aeb4d49058dc9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6cd649b4d82c564bdd7699441aeb4d49058dc9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=3a6cd649b4d82c564bdd7699441aeb4d49058dc9", "patch": "@@ -267,11 +267,16 @@ impl<'a> Display for Arguments<'a> {\n     }\n }\n \n-/// Format trait for the `?` character. Useful for debugging, all types\n-/// should implement this.\n+/// Format trait for the `?` character.\n+///\n+/// `Debug` should format the output in a programmer-facing, debugging context.\n ///\n /// Generally speaking, you should just `derive` a `Debug` implementation.\n ///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n /// # Examples\n ///\n /// Deriving an implementation:\n@@ -327,8 +332,39 @@ pub trait Debug {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// When a value can be semantically expressed as a String, this trait may be\n-/// used. It corresponds to the default format, `{}`.\n+/// Format trait for an empty format, `{}`.\n+///\n+/// `Display` is similar to [`Debug`][debug], but `Display` is for user-facing\n+/// output, and so cannot be derived.\n+///\n+/// [debug]: trait.Debug.html\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Implementing `Display` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n+///\n+/// impl fmt::Display for Point {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         write!(f, \"({}, {})\", self.x, self.y)\n+///     }\n+/// }\n+///\n+/// let origin = Point { x: 0, y: 0 };\n+///\n+/// println!(\"The origin is: {}\", origin);\n+/// ```\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n                             formatter; try using `:?` instead if you are using \\\n                             a format string\"]\n@@ -339,55 +375,308 @@ pub trait Display {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `o` character\n+/// Format trait for the `o` character.\n+///\n+/// The `Octal` trait should format its output as a number in base-8.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '52' in octal\n+///\n+/// assert_eq!(format!(\"{:o}\", x), \"52\");\n+/// ```\n+///\n+/// Implementing `Octal` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Octal for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:o}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as octal is: {:o}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `b` character\n+/// Format trait for the `b` character.\n+///\n+/// The `Binary` trait should format its output as a number in binary.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '101010' in binary\n+///\n+/// assert_eq!(format!(\"{:b}\", x), \"101010\");\n+/// ```\n+///\n+/// Implementing `Binary` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Binary for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:b}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(107);\n+///\n+/// println!(\"l as binary is: {:b}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `x` character\n+/// Format trait for the `x` character.\n+///\n+/// The `LowerHex` trait should format its output as a number in hexidecimal, with `a` through `f`\n+/// in lower case.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '2a' in hex\n+///\n+/// assert_eq!(format!(\"{:x}\", x), \"2a\");\n+/// ```\n+///\n+/// Implementing `LowerHex` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::LowerHex for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:x}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as hex is: {:x}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `X` character\n+/// Format trait for the `X` character.\n+///\n+/// The `UpperHex` trait should format its output as a number in hexidecimal, with `A` through `F`\n+/// in upper case.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '2A' in hex\n+///\n+/// assert_eq!(format!(\"{:X}\", x), \"2A\");\n+/// ```\n+///\n+/// Implementing `UpperHex` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::UpperHex for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:X}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as hex is: {:X}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `p` character\n+/// Format trait for the `p` character.\n+///\n+/// The `Pointer` trait should format its output as a memory location. This is commonly presented\n+/// as hexidecimal.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `&i32`:\n+///\n+/// ```\n+/// let x = &42;\n+///\n+/// let address = format!(\"{:p}\", x); // this produces something like '0x7f06092ac6d0'\n+/// ```\n+///\n+/// Implementing `Pointer` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Pointer for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n+///\n+///         write!(f, \"{:p}\", self as *const Length)\n+///     }\n+/// }\n+///\n+/// let l = Length(42);\n+///\n+/// println!(\"l is in memory here: {:p}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `e` character\n+/// Format trait for the `e` character.\n+///\n+/// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42.0; // 42.0 is '4.2e1' in scientific notation\n+///\n+/// assert_eq!(format!(\"{:e}\", x), \"4.2e1\");\n+/// ```\n+///\n+/// Implementing `LowerExp` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::LowerExp for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///         write!(f, \"{}e1\", val / 10)\n+///     }\n+/// }\n+///\n+/// let l = Length(100);\n+///\n+/// println!(\"l in scientific notation is: {:e}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `E` character\n+/// Format trait for the `E` character.\n+///\n+/// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `f32`:\n+///\n+/// ```\n+/// let x = 42.0; // 42.0 is '4.2E1' in scientific notation\n+///\n+/// assert_eq!(format!(\"{:E}\", x), \"4.2E1\");\n+/// ```\n+///\n+/// Implementing `UpperExp` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::UpperExp for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///         write!(f, \"{}E1\", val / 10)\n+///     }\n+/// }\n+///\n+/// let l = Length(100);\n+///\n+/// println!(\"l in scientific notation is: {:E}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperExp {\n     /// Formats the value using the given formatter."}]}