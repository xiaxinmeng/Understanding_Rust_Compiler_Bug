{"sha": "4a83aae09849123dbbbc5726b07c2601a14397a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhODNhYWUwOTg0OTEyM2RiYmJjNTcyNmIwN2MyNjAxYTE0Mzk3YTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-26T16:58:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-26T17:57:23Z"}, "message": "support range selection in assist docs", "tree": {"sha": "b8944447b98e8b0b25ac95d0465210312bf4cd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8944447b98e8b0b25ac95d0465210312bf4cd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a83aae09849123dbbbc5726b07c2601a14397a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a83aae09849123dbbbc5726b07c2601a14397a8", "html_url": "https://github.com/rust-lang/rust/commit/4a83aae09849123dbbbc5726b07c2601a14397a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a83aae09849123dbbbc5726b07c2601a14397a8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733fd64260793a0f7335e4f75ba9197d5fa98b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/733fd64260793a0f7335e4f75ba9197d5fa98b70", "html_url": "https://github.com/rust-lang/rust/commit/733fd64260793a0f7335e4f75ba9197d5fa98b70"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "8245dc99f57e6f9a9bffa537aa75b58fd35a2e90", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=4a83aae09849123dbbbc5726b07c2601a14397a8", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use format_buf::format;\n use hir::db::HirDatabase;\n use ra_syntax::{\n@@ -14,6 +12,22 @@ use test_utils::tested_by;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: introduce_variable\n+//\n+// Extracts subexpression into a variable.\n+//\n+// ```\n+// fn main() {\n+//     <|>(1 + 2)<|> * 4;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let var_name = (1 + 2);\n+//     var_name * 4;\n+// }\n+// ```\n pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if ctx.frange.range.is_empty() {\n         return None;"}, {"sha": "0ccf9d7308e866a4b55b75b854ba705b78dae940", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=4a83aae09849123dbbbc5726b07c2601a14397a8", "patch": "@@ -7,13 +7,12 @@ mod generated;\n \n use hir::mock::MockDatabase;\n use ra_db::FileRange;\n-use ra_syntax::TextRange;\n-use test_utils::{assert_eq_text, extract_offset};\n+use test_utils::{assert_eq_text, extract_range_or_offset};\n \n fn check(assist_id: &str, before: &str, after: &str) {\n-    let (before_cursor_pos, before) = extract_offset(before);\n+    let (selection, before) = extract_range_or_offset(before);\n     let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n-    let frange = FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+    let frange = FileRange { file_id, range: selection.into() };\n \n     let (_assist_id, action) = crate::assists(&db, frange)\n         .into_iter()"}, {"sha": "493bd94d0319e9c28aa47b76c0d31a657a34f194", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=4a83aae09849123dbbbc5726b07c2601a14397a8", "patch": "@@ -255,3 +255,21 @@ fn main() {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_introduce_variable() {\n+    check(\n+        \"introduce_variable\",\n+        r#####\"\n+fn main() {\n+    <|>(1 + 2)<|> * 4;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let var_name = (1 + 2);\n+    var_name * 4;\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "1244ea8cf189bbf4fa87a6124d53660148ef2145", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a83aae09849123dbbbc5726b07c2601a14397a8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=4a83aae09849123dbbbc5726b07c2601a14397a8", "patch": "@@ -1,4 +1,10 @@\n-//! FIXME: write short doc here\n+//! Assorted testing utilities.\n+//!\n+//! Most notable things are:\n+//!\n+//! * Rich text comparison, which outputs a diff.\n+//! * Extracting markup (mainly, `<|>` markers) out of fixture strings.\n+//! * marks (see the eponymous module).\n \n #[macro_use]\n pub mod marks;\n@@ -43,7 +49,7 @@ pub fn extract_offset(text: &str) -> (TextUnit, String) {\n     }\n }\n \n-pub fn try_extract_offset(text: &str) -> Option<(TextUnit, String)> {\n+fn try_extract_offset(text: &str) -> Option<(TextUnit, String)> {\n     let cursor_pos = text.find(CURSOR_MARKER)?;\n     let mut new_text = String::with_capacity(text.len() - CURSOR_MARKER.len());\n     new_text.push_str(&text[..cursor_pos]);\n@@ -59,12 +65,34 @@ pub fn extract_range(text: &str) -> (TextRange, String) {\n     }\n }\n \n-pub fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n+fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     let (start, text) = try_extract_offset(text)?;\n     let (end, text) = try_extract_offset(&text)?;\n     Some((TextRange::from_to(start, end), text))\n }\n \n+pub enum RangeOrOffset {\n+    Range(TextRange),\n+    Offset(TextUnit),\n+}\n+\n+impl From<RangeOrOffset> for TextRange {\n+    fn from(selection: RangeOrOffset) -> Self {\n+        match selection {\n+            RangeOrOffset::Range(it) => it,\n+            RangeOrOffset::Offset(it) => TextRange::from_to(it, it),\n+        }\n+    }\n+}\n+\n+pub fn extract_range_or_offset(text: &str) -> (RangeOrOffset, String) {\n+    if let Some((range, text)) = try_extract_range(text) {\n+        return (RangeOrOffset::Range(range), text);\n+    }\n+    let (offset, text) = extract_offset(text);\n+    (RangeOrOffset::Offset(offset), text)\n+}\n+\n /// Extracts ranges, marked with `<tag> </tag>` paris from the `text`\n pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n     let open = format!(\"<{}>\", tag);"}, {"sha": "182f07e982daaacc22d982b10e2510068abf2d30", "filename": "docs/user/assists.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a83aae09849123dbbbc5726b07c2601a14397a8/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a83aae09849123dbbbc5726b07c2601a14397a8/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=4a83aae09849123dbbbc5726b07c2601a14397a8", "patch": "@@ -245,3 +245,20 @@ fn main() {\n     (1 + 2) * 4;\n }\n ```\n+\n+## `introduce_variable`\n+\n+Extracts subexpression into a variable.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    <|>(1 + 2)<|> * 4;\n+}\n+\n+// AFTER\n+fn main() {\n+    let var_name = (1 + 2);\n+    var_name * 4;\n+}\n+```"}]}