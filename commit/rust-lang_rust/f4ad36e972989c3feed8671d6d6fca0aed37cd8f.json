{"sha": "f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWQzNmU5NzI5ODljM2ZlZWQ4NjcxZDZkNmZjYTBhZWQzN2NkOGY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-08T19:39:52Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-08T19:39:52Z"}, "message": "Merge #103\n\n103: WIP: refactor vscode extension r=aochagavia a=aochagavia\n\nTodo:\r\n\r\n- [x] Add more comments, so other people can find their way in the codebase\r\n- [x] Resolve remaining tslint suggestions\r\n- [ ] Integrate with CI\r\n\r\n@matklad The standard configuration of tslint forbids using `console.log` and `console.error`. Is there any reason we are using those or can I remove them? If they are used for debugging purposes I would prefer to remove them and rely on vscode's excellent debugger.\n\nCo-authored-by: Adolfo Ochagav\u00eda <aochagavia92@gmail.com>", "tree": {"sha": "f60e1aa4703c3e176315ecd886206848028b8cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60e1aa4703c3e176315ecd886206848028b8cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "html_url": "https://github.com/rust-lang/rust/commit/f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "a05e09e9c514878148ddf26aa76d6b9183583d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05e09e9c514878148ddf26aa76d6b9183583d0f", "html_url": "https://github.com/rust-lang/rust/commit/a05e09e9c514878148ddf26aa76d6b9183583d0f"}, {"sha": "bbf38b9e722e8d6455828ff22242c92219da346d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf38b9e722e8d6455828ff22242c92219da346d", "html_url": "https://github.com/rust-lang/rust/commit/bbf38b9e722e8d6455828ff22242c92219da346d"}], "stats": {"total": 972, "additions": 557, "deletions": 415}, "files": [{"sha": "67765e5a3caaff5bd3a2e084eee852ccfba96a35", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,58 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+\n+import { Server } from '../server';\n+\n+interface FileSystemEdit {\n+    type: string;\n+    uri?: string;\n+    src?: string;\n+    dst?: string;\n+}\n+\n+export interface SourceChange {\n+    label: string;\n+    sourceFileEdits: lc.TextDocumentEdit[];\n+    fileSystemEdits: FileSystemEdit[];\n+    cursorPosition?: lc.TextDocumentPositionParams;\n+}\n+\n+export async function handle(change: SourceChange) {\n+    const wsEdit = new vscode.WorkspaceEdit();\n+    for (const sourceEdit of change.sourceFileEdits) {\n+        const uri = Server.client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri);\n+        const edits = Server.client.protocol2CodeConverter.asTextEdits(sourceEdit.edits);\n+        wsEdit.set(uri, edits);\n+    }\n+    let created;\n+    let moved;\n+    for (const fsEdit of change.fileSystemEdits) {\n+        switch (fsEdit.type) {\n+            case 'createFile':\n+                const uri = vscode.Uri.parse(fsEdit.uri!);\n+                wsEdit.createFile(uri);\n+                created = uri;\n+                break;\n+            case 'moveFile':\n+                const src = vscode.Uri.parse(fsEdit.src!);\n+                const dst = vscode.Uri.parse(fsEdit.dst!);\n+                wsEdit.renameFile(src, dst);\n+                moved = dst;\n+                break;\n+        }\n+    }\n+    const toOpen = created || moved;\n+    const toReveal = change.cursorPosition;\n+    await vscode.workspace.applyEdit(wsEdit);\n+    if (toOpen) {\n+        const doc = await vscode.workspace.openTextDocument(toOpen);\n+        await vscode.window.showTextDocument(doc);\n+    } else if (toReveal) {\n+        const uri = Server.client.protocol2CodeConverter.asUri(toReveal.textDocument.uri);\n+        const position = Server.client.protocol2CodeConverter.asPosition(toReveal.position);\n+        const editor = vscode.window.activeTextEditor;\n+        if (!editor || editor.document.uri.toString() !== uri.toString()) { return; }\n+        if (!editor.selection.isEmpty) { return; }\n+        editor!.selection = new vscode.Selection(position, position);\n+    }\n+}"}, {"sha": "cdc3d10fb3fd73d4f22a529cc73c9209d00c6515", "filename": "editors/code/src/commands/extend_selection.ts", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,29 @@\n+import * as vscode from 'vscode';\n+\n+import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+interface ExtendSelectionParams {\n+    textDocument: TextDocumentIdentifier;\n+    selections: Range[];\n+}\n+\n+interface ExtendSelectionResult {\n+    selections: Range[];\n+}\n+\n+export async function handle() {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    const request: ExtendSelectionParams = {\n+        selections: editor.selections.map((s) => {\n+            return Server.client.code2ProtocolConverter.asRange(s);\n+        }),\n+        textDocument: { uri: editor.document.uri.toString() },\n+    };\n+    const response = await Server.client.sendRequest<ExtendSelectionResult>('m/extendSelection', request);\n+    editor.selections = response.selections.map((range: Range) => {\n+        const r = Server.client.protocol2CodeConverter.asRange(range);\n+        return new vscode.Selection(r.start, r.end);\n+    });\n+}"}, {"sha": "dfdcd64545b03f2eab0be6d67845e99b4490ea74", "filename": "editors/code/src/commands/index.ts", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,17 @@\n+import * as applySourceChange from './apply_source_change';\n+import * as extendSelection from './extend_selection';\n+import * as joinLines from './join_lines';\n+import * as matchingBrace from './matching_brace';\n+import * as parentModule from './parent_module';\n+import * as runnables from './runnables';\n+import * as syntaxTree from './syntaxTree';\n+\n+export {\n+    applySourceChange,\n+    extendSelection,\n+    joinLines,\n+    matchingBrace,\n+    parentModule,\n+    runnables,\n+    syntaxTree,\n+};"}, {"sha": "526b698ccd20b8cb479522260b79b3583a97d216", "filename": "editors/code/src/commands/join_lines.ts", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,21 @@\n+import * as vscode from 'vscode';\n+\n+import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+import { handle as applySourceChange, SourceChange } from './apply_source_change';\n+\n+interface JoinLinesParams {\n+    textDocument: TextDocumentIdentifier;\n+    range: Range;\n+}\n+\n+export async function handle() {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    const request: JoinLinesParams = {\n+        range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n+        textDocument: { uri: editor.document.uri.toString() },\n+    };\n+    const change = await Server.client.sendRequest<SourceChange>('m/joinLines', request);\n+    await applySourceChange(change);\n+}"}, {"sha": "a80446a8f58d0ba550bac90e4fa21412451dd887", "filename": "editors/code/src/commands/matching_brace.ts", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,27 @@\n+import * as vscode from 'vscode';\n+\n+import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+interface FindMatchingBraceParams {\n+    textDocument: TextDocumentIdentifier;\n+    offsets: Position[];\n+}\n+\n+export async function handle() {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    const request: FindMatchingBraceParams = {\n+        textDocument: { uri: editor.document.uri.toString() },\n+        offsets: editor.selections.map((s) => {\n+            return Server.client.code2ProtocolConverter.asPosition(s.active);\n+        }),\n+    };\n+    const response = await Server.client.sendRequest<Position[]>('m/findMatchingBrace', request);\n+    editor.selections = editor.selections.map((sel, idx) => {\n+        const active = Server.client.protocol2CodeConverter.asPosition(response[idx]);\n+        const anchor = sel.isEmpty ? active : sel.anchor;\n+        return new vscode.Selection(anchor, active);\n+    });\n+    editor.revealRange(editor.selection);\n+}"}, {"sha": "d66fb30264d1602d3ae216a8377a4cb3f7ed2073", "filename": "editors/code/src/commands/parent_module.ts", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,22 @@\n+import * as vscode from 'vscode';\n+\n+import { Location, TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+export async function handle() {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    const request: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const response = await Server.client.sendRequest<Location[]>('m/parentModule', request);\n+    const loc = response[0];\n+    if (loc == null) { return; }\n+    const uri = Server.client.protocol2CodeConverter.asUri(loc.uri);\n+    const range = Server.client.protocol2CodeConverter.asRange(loc.range);\n+\n+    const doc = await vscode.workspace.openTextDocument(uri);\n+    const e = await vscode.window.showTextDocument(doc);\n+    e.selection = new vscode.Selection(range.start, range.start);\n+    e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+}"}, {"sha": "40f590dceb8e3cbc48d4e3576c2f33102a7041e5", "filename": "editors/code/src/commands/runnables.ts", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,88 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+import { Server } from '../server';\n+\n+interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position?: lc.Position;\n+}\n+\n+interface Runnable {\n+    range: lc.Range;\n+    label: string;\n+    bin: string;\n+    args: string[];\n+    env: { [index: string]: string };\n+}\n+\n+class RunnableQuickPick implements vscode.QuickPickItem {\n+    public label: string;\n+    public description?: string | undefined;\n+    public detail?: string | undefined;\n+    public picked?: boolean | undefined;\n+\n+    constructor(public runnable: Runnable) {\n+        this.label = runnable.label;\n+    }\n+}\n+\n+interface CargoTaskDefinition extends vscode.TaskDefinition {\n+    type: 'cargo';\n+    label: string;\n+    command: string;\n+    args: string[];\n+    env?: { [key: string]: string };\n+}\n+\n+function createTask(spec: Runnable): vscode.Task {\n+    const TASK_SOURCE = 'Rust';\n+    const definition: CargoTaskDefinition = {\n+        type: 'cargo',\n+        label: 'cargo',\n+        command: spec.bin,\n+        args: spec.args,\n+        env: spec.env,\n+    };\n+\n+    const execCmd = `${definition.command} ${definition.args.join(' ')}`;\n+    const execOption: vscode.ShellExecutionOptions = {\n+        cwd: '.',\n+        env: definition.env,\n+    };\n+    const exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n+\n+    const f = vscode.workspace.workspaceFolders![0];\n+    const t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n+    return t;\n+}\n+\n+let prevRunnable: RunnableQuickPick | undefined;\n+export async function handle() {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') { return; }\n+    const textDocument: lc.TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const params: RunnablesParams = {\n+        textDocument,\n+        position: Server.client.code2ProtocolConverter.asPosition(editor.selection.active),\n+    };\n+    const runnables = await Server.client.sendRequest<Runnable[]>('m/runnables', params);\n+    const items: RunnableQuickPick[] = [];\n+    if (prevRunnable) {\n+        items.push(prevRunnable);\n+    }\n+    for (const r of runnables) {\n+        if (prevRunnable && JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)) {\n+            continue;\n+        }\n+        items.push(new RunnableQuickPick(r));\n+    }\n+    const item = await vscode.window.showQuickPick(items);\n+    if (item) {\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    }\n+}"}, {"sha": "dcb721eee59863d5b52e29066802326b9fae28e3", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,38 @@\n+import * as vscode from 'vscode';\n+import { TextDocumentIdentifier } from 'vscode-languageclient';\n+\n+import { Server } from '../server';\n+\n+export const syntaxTreeUri = vscode.Uri.parse('ra-lsp://syntaxtree');\n+\n+export class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n+    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+    public syntaxTree: string = 'Not available';\n+\n+    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) { return ''; }\n+        const request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+        };\n+        return Server.client.sendRequest<SyntaxTreeResult>('m/syntaxTree', request);\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}\n+\n+interface SyntaxTreeParams {\n+    textDocument: TextDocumentIdentifier;\n+}\n+\n+type SyntaxTreeResult = string;\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export async function handle() {\n+    const document = await vscode.workspace.openTextDocument(syntaxTreeUri);\n+    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n+}"}, {"sha": "740b5be206a488c212ea91982990507ced871712", "filename": "editors/code/src/config.ts", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,23 @@\n+import * as vscode from 'vscode';\n+\n+import { Server } from './server';\n+\n+export class Config {\n+    public highlightingOn = true;\n+\n+    constructor() {\n+        vscode.workspace.onDidChangeConfiguration((_) => this.userConfigChanged());\n+        this.userConfigChanged();\n+    }\n+\n+    public userConfigChanged() {\n+        const config = vscode.workspace.getConfiguration('ra-lsp');\n+        if (config.has('highlightingOn')) {\n+            this.highlightingOn = config.get('highlightingOn') as boolean;\n+        }\n+\n+        if (!this.highlightingOn && Server) {\n+            Server.highlighter.removeHighlights();\n+        }\n+    }\n+}"}, {"sha": "3440aa0c37501e205371b0e5d8bd36dd371f3cf8", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,14 @@\n+import { TextEditor } from 'vscode';\n+import { TextDocumentIdentifier } from 'vscode-languageclient';\n+\n+import { Decoration } from '../highlighting';\n+import { Server } from '../server';\n+\n+export async function handle(editor: TextEditor | undefined) {\n+    if (!Server.config.highlightingOn || !editor || editor.document.languageId !== 'rust') { return; }\n+    const params: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const decorations = await Server.client.sendRequest<Decoration[]>('m/decorationsRequest', params);\n+    Server.highlighter.setHighlights(editor, decorations);\n+}"}, {"sha": "b3000e026182c87771ad92fe8167bf65e808fd43", "filename": "editors/code/src/events/change_text_document.ts", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,19 @@\n+import * as vscode from 'vscode';\n+\n+import { syntaxTreeUri, TextDocumentContentProvider } from '../commands/syntaxTree';\n+\n+export function createHandler(textDocumentContentProvider: TextDocumentContentProvider) {\n+    return (event: vscode.TextDocumentChangeEvent) => {\n+        const doc = event.document;\n+        if (doc.languageId !== 'rust') { return; }\n+        afterLs(() => {\n+            textDocumentContentProvider.eventEmitter.fire(syntaxTreeUri);\n+        });\n+    };\n+}\n+\n+// We need to order this after LS updates, but there's no API for that.\n+// Hence, good old setTimeout.\n+function afterLs(f: () => any) {\n+    setTimeout(f, 10);\n+}"}, {"sha": "b570a7a926ab0ff8e9dfb3fda15ee061753ce15d", "filename": "editors/code/src/events/index.ts", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,7 @@\n+import * as changeActiveTextEditor from './change_active_text_editor';\n+import * as changeTextDocument from './change_text_document';\n+\n+export {\n+    changeActiveTextEditor,\n+    changeTextDocument,\n+};"}, {"sha": "44e74f4cc9d1e5713acec526c453f533408a3a57", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 37, "deletions": 415, "changes": 452, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -1,434 +1,56 @@\n-'use strict';\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n+import * as lc from 'vscode-languageclient';\n \n-let client: lc.LanguageClient;\n-\n-let uris = {\n-    syntaxTree: vscode.Uri.parse('ra-lsp://syntaxtree')\n-}\n-\n-let highlightingOn = true;\n+import * as commands from './commands';\n+import { TextDocumentContentProvider } from './commands/syntaxTree';\n+import * as events from './events';\n+import * as notifications from './notifications';\n+import { Server } from './server';\n \n export function activate(context: vscode.ExtensionContext) {\n-    let applyHighlightingOn = () => {\n-        let config = vscode.workspace.getConfiguration('ra-lsp');\n-        if (config.has('highlightingOn')) {\n-            highlightingOn = config.get('highlightingOn') as boolean;\n-        };\n-\n-        if (!highlightingOn) {\n-            removeHighlights();\n-        }\n-    };\n-\n-    // Apply the highlightingOn config now and whenever the config changes\n-    applyHighlightingOn();\n-    vscode.workspace.onDidChangeConfiguration(_ => {\n-        applyHighlightingOn();\n-    });\n-\n-    let textDocumentContentProvider = new TextDocumentContentProvider()\n-    let dispose = (disposable: vscode.Disposable) => {\n+    function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n     }\n-    let registerCommand = (name: string, f: any) => {\n-        dispose(vscode.commands.registerCommand(name, f))\n+\n+    function registerCommand(name: string, f: any) {\n+        disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n     }\n \n-    registerCommand('ra-lsp.syntaxTree', () => openDoc(uris.syntaxTree))\n-    registerCommand('ra-lsp.extendSelection', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: ExtendSelectionParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            selections: editor.selections.map((s) => {\n-                return client.code2ProtocolConverter.asRange(s)\n-            })\n-        }\n-        let response = await client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n-        editor.selections = response.selections.map((range) => {\n-            let r = client.protocol2CodeConverter.asRange(range)\n-            return new vscode.Selection(r.start, r.end)\n-        })\n-    })\n-    registerCommand('ra-lsp.matchingBrace', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: FindMatchingBraceParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            offsets: editor.selections.map((s) => {\n-                return client.code2ProtocolConverter.asPosition(s.active)\n-            })\n-        }\n-        let response = await client.sendRequest<lc.Position[]>(\"m/findMatchingBrace\", request)\n-        editor.selections = editor.selections.map((sel, idx) => {\n-            let active = client.protocol2CodeConverter.asPosition(response[idx])\n-            let anchor = sel.isEmpty ? active : sel.anchor\n-            return new vscode.Selection(anchor, active)\n-        })\n-        editor.revealRange(editor.selection)\n-    })\n-    registerCommand('ra-lsp.joinLines', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: JoinLinesParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            range: client.code2ProtocolConverter.asRange(editor.selection),\n-        }\n-        let change = await client.sendRequest<SourceChange>(\"m/joinLines\", request)\n-        await applySourceChange(change)\n-    })\n-    registerCommand('ra-lsp.parentModule', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let response = await client.sendRequest<lc.Location[]>(\"m/parentModule\", request)\n-        let loc = response[0]\n-        if (loc == null) return\n-        let uri = client.protocol2CodeConverter.asUri(loc.uri)\n-        let range = client.protocol2CodeConverter.asRange(loc.range)\n+    // Commands are requests from vscode to the language server\n+    registerCommand('ra-lsp.syntaxTree', commands.syntaxTree.handle);\n+    registerCommand('ra-lsp.extendSelection', commands.extendSelection.handle);\n+    registerCommand('ra-lsp.matchingBrace', commands.matchingBrace.handle);\n+    registerCommand('ra-lsp.joinLines', commands.joinLines.handle);\n+    registerCommand('ra-lsp.parentModule', commands.parentModule.handle);\n+    registerCommand('ra-lsp.run', commands.runnables.handle);\n+    registerCommand('ra-lsp.applySourceChange', commands.applySourceChange.handle);\n \n-        let doc = await vscode.workspace.openTextDocument(uri)\n-        let e = await vscode.window.showTextDocument(doc)\n-        e.selection = new vscode.Selection(range.start, range.start)\n-        e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n-    })\n+    // Notifications are events triggered by the language server\n+    const allNotifications: Iterable<[string, lc.GenericNotificationHandler]> = [\n+        ['m/publishDecorations', notifications.publishDecorations.handle],\n+    ];\n \n-    let prevRunnable: RunnableQuickPick | undefined = undefined\n-    registerCommand('ra-lsp.run', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let textDocument: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let params: RunnablesParams = {\n-            textDocument,\n-            position: client.code2ProtocolConverter.asPosition(editor.selection.active)\n-        }\n-        let runnables = await client.sendRequest<Runnable[]>('m/runnables', params)\n-        let items: RunnableQuickPick[] = []\n-        if (prevRunnable) {\n-            items.push(prevRunnable)\n-        }\n-        for (let r of runnables) {\n-            if (prevRunnable && JSON.stringify(prevRunnable.runnable) == JSON.stringify(r)) {\n-                continue\n-            }\n-            items.push(new RunnableQuickPick(r))\n-        }\n-        let item = await vscode.window.showQuickPick(items)\n-        if (item) {\n-            item.detail = \"rerun\"\n-            prevRunnable = item\n-            let task = createTask(item.runnable)\n-            return await vscode.tasks.executeTask(task)\n-        }\n-    })\n-    registerCommand('ra-lsp.applySourceChange', applySourceChange)\n+    // The events below are plain old javascript events, triggered and handled by vscode\n+    vscode.window.onDidChangeActiveTextEditor(events.changeActiveTextEditor.handle);\n \n-    dispose(vscode.workspace.registerTextDocumentContentProvider(\n+    const textDocumentContentProvider = new TextDocumentContentProvider();\n+    disposeOnDeactivation(vscode.workspace.registerTextDocumentContentProvider(\n         'ra-lsp',\n-        textDocumentContentProvider\n-    ))\n-    startServer()\n-    vscode.workspace.onDidChangeTextDocument((event: vscode.TextDocumentChangeEvent) => {\n-        let doc = event.document\n-        if (doc.languageId != \"rust\") return\n-        afterLs(() => {\n-            textDocumentContentProvider.eventEmitter.fire(uris.syntaxTree)\n-        })\n-    }, null, context.subscriptions)\n-    vscode.window.onDidChangeActiveTextEditor(async (editor) => {\n-        if (!highlightingOn || !editor || editor.document.languageId != 'rust') return\n-        let params: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let decorations = await client.sendRequest<Decoration[]>(\"m/decorationsRequest\", params)\n-        setHighlights(editor, decorations)\n-    })\n-}\n+        textDocumentContentProvider,\n+    ));\n \n-// We need to order this after LS updates, but there's no API for that.\n-// Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n-    setTimeout(f, 10)\n+    vscode.workspace.onDidChangeTextDocument(\n+        events.changeTextDocument.createHandler(textDocumentContentProvider),\n+        null,\n+        context.subscriptions);\n+\n+    // Start the language server, finally!\n+    Server.start(allNotifications);\n }\n \n export function deactivate(): Thenable<void> {\n-    if (!client) {\n+    if (!Server.client) {\n         return Promise.resolve();\n     }\n-    return client.stop();\n-}\n-\n-function startServer() {\n-    let run: lc.Executable = {\n-        command: \"ra_lsp_server\",\n-        options: { cwd: \".\" }\n-    }\n-    let serverOptions: lc.ServerOptions = {\n-        run,\n-        debug: run\n-    };\n-\n-    let clientOptions: lc.LanguageClientOptions = {\n-        documentSelector: [{ scheme: 'file', language: 'rust' }],\n-    };\n-\n-    client = new lc.LanguageClient(\n-        'ra-lsp',\n-        'rust-analyzer languge server',\n-        serverOptions,\n-        clientOptions,\n-    );\n-    client.onReady().then(() => {\n-        client.onNotification(\n-            \"m/publishDecorations\",\n-            (params: PublishDecorationsParams) => {\n-                let editor = vscode.window.visibleTextEditors.find(\n-                    (editor) => editor.document.uri.toString() == params.uri\n-                )\n-                if (!highlightingOn || !editor) return;\n-                setHighlights(\n-                    editor,\n-                    params.decorations,\n-                )\n-            }\n-        )\n-    })\n-    client.start();\n-}\n-\n-async function openDoc(uri: vscode.Uri) {\n-    let document = await vscode.workspace.openTextDocument(uri)\n-    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>()\n-    public syntaxTree: string = \"Not available\"\n-\n-    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n-        let editor = vscode.window.activeTextEditor;\n-        if (editor == null) return \"\"\n-        let request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() }\n-        };\n-        return client.sendRequest<SyntaxTreeResult>(\"m/syntaxTree\", request);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event\n-    }\n-}\n-\n-let decorations: { [index: string]: vscode.TextEditorDecorationType } = {};\n-\n-function initDecorations() {\n-    const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n-    decorations = {\n-        background: decor(\"#3F3F3F\"),\n-        error: vscode.window.createTextEditorDecorationType({\n-            borderColor: \"red\",\n-            borderStyle: \"none none dashed none\",\n-        }),\n-        comment: decor(\"#7F9F7F\"),\n-        string: decor(\"#CC9393\"),\n-        keyword: decor(\"#F0DFAF\"),\n-        function: decor(\"#93E0E3\"),\n-        parameter: decor(\"#94BFF3\"),\n-        builtin: decor(\"#DD6718\"),\n-        text: decor(\"#DCDCCC\"),\n-        attribute: decor(\"#BFEBBF\"),\n-        literal: decor(\"#DFAF8F\"),\n-    }\n-}\n-\n-function removeHighlights() {\n-    for (let tag in decorations) {\n-        decorations[tag].dispose();\n-    }\n-\n-    decorations = {};\n-}\n-\n-function setHighlights(\n-    editor: vscode.TextEditor,\n-    highlights: Array<Decoration>\n-) {\n-    // Initialize decorations if necessary\n-    //\n-    // Note: decoration objects need to be kept around so we can dispose them\n-    // if the user disables syntax highlighting\n-    if (Object.keys(decorations).length === 0) {\n-        initDecorations();\n-    }\n-\n-    let byTag: Map<string, vscode.Range[]> = new Map()\n-    for (let tag in decorations) {\n-        byTag.set(tag, [])\n-    }\n-\n-    for (let d of highlights) {\n-        if (!byTag.get(d.tag)) {\n-            console.log(`unknown tag ${d.tag}`)\n-            continue\n-        }\n-        byTag.get(d.tag)!.push(\n-            client.protocol2CodeConverter.asRange(d.range)\n-        )\n-    }\n-\n-    for (let tag of byTag.keys()) {\n-        let dec: vscode.TextEditorDecorationType = decorations[tag]\n-        let ranges = byTag.get(tag)!\n-        editor.setDecorations(dec, ranges)\n-    }\n-}\n-\n-interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-type SyntaxTreeResult = string\n-\n-interface ExtendSelectionParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    selections: lc.Range[];\n-}\n-\n-interface ExtendSelectionResult {\n-    selections: lc.Range[];\n-}\n-\n-interface FindMatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    offsets: lc.Position[];\n-}\n-\n-interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-}\n-\n-interface PublishDecorationsParams {\n-    uri: string,\n-    decorations: Decoration[],\n-}\n-\n-interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier,\n-    position?: lc.Position,\n-}\n-\n-interface Runnable {\n-    range: lc.Range;\n-    label: string;\n-    bin: string;\n-    args: string[];\n-    env: { [index: string]: string },\n-}\n-\n-class RunnableQuickPick implements vscode.QuickPickItem {\n-    label: string;\n-    description?: string | undefined;\n-    detail?: string | undefined;\n-    picked?: boolean | undefined;\n-\n-    constructor(public runnable: Runnable) {\n-        this.label = runnable.label\n-    }\n-}\n-\n-interface Decoration {\n-    range: lc.Range,\n-    tag: string,\n-}\n-\n-\n-interface CargoTaskDefinition extends vscode.TaskDefinition {\n-    type: 'cargo';\n-    label: string;\n-    command: string;\n-    args: Array<string>;\n-    env?: { [key: string]: string };\n-}\n-\n-function createTask(spec: Runnable): vscode.Task {\n-    const TASK_SOURCE = 'Rust';\n-    let definition: CargoTaskDefinition = {\n-        type: 'cargo',\n-        label: 'cargo',\n-        command: spec.bin,\n-        args: spec.args,\n-        env: spec.env\n-    }\n-\n-    let execCmd = `${definition.command} ${definition.args.join(' ')}`;\n-    let execOption: vscode.ShellExecutionOptions = {\n-        cwd: '.',\n-        env: definition.env,\n-    };\n-    let exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n-\n-    let f = vscode.workspace.workspaceFolders![0]\n-    let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n-    return t;\n-}\n-\n-interface FileSystemEdit {\n-    type: string;\n-    uri?: string;\n-    src?: string;\n-    dst?: string;\n-}\n-\n-interface SourceChange {\n-    label: string,\n-    sourceFileEdits: lc.TextDocumentEdit[],\n-    fileSystemEdits: FileSystemEdit[],\n-    cursorPosition?: lc.TextDocumentPositionParams,\n-}\n-\n-async function applySourceChange(change: SourceChange) {\n-    console.log(`applySOurceChange ${JSON.stringify(change)}`)\n-    let wsEdit = new vscode.WorkspaceEdit()\n-    for (let sourceEdit of change.sourceFileEdits) {\n-        let uri = client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri)\n-        let edits = client.protocol2CodeConverter.asTextEdits(sourceEdit.edits)\n-        wsEdit.set(uri, edits)\n-    }\n-    let created;\n-    let moved;\n-    for (let fsEdit of change.fileSystemEdits) {\n-        if (fsEdit.type == \"createFile\") {\n-            let uri = vscode.Uri.parse(fsEdit.uri!)\n-            wsEdit.createFile(uri)\n-            created = uri\n-        } else if (fsEdit.type == \"moveFile\") {\n-            let src = vscode.Uri.parse(fsEdit.src!)\n-            let dst = vscode.Uri.parse(fsEdit.dst!)\n-            wsEdit.renameFile(src, dst)\n-            moved = dst\n-        } else {\n-            console.error(`unknown op: ${JSON.stringify(fsEdit)}`)\n-        }\n-    }\n-    let toOpen = created || moved\n-    let toReveal = change.cursorPosition\n-    await vscode.workspace.applyEdit(wsEdit)\n-    if (toOpen) {\n-        let doc = await vscode.workspace.openTextDocument(toOpen)\n-        await vscode.window.showTextDocument(doc)\n-    } else if (toReveal) {\n-        let uri = client.protocol2CodeConverter.asUri(toReveal.textDocument.uri)\n-        let position = client.protocol2CodeConverter.asPosition(toReveal.position)\n-        let editor = vscode.window.activeTextEditor;\n-        if (!editor || editor.document.uri.toString() != uri.toString()) return\n-        if (!editor.selection.isEmpty) return\n-        editor!.selection = new vscode.Selection(position, position)\n-    }\n+    return Server.client.stop();\n }"}, {"sha": "e2ac4d6290749355db8a728bce5295d16190c586", "filename": "editors/code/src/highlighting.ts", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,82 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+\n+import { Server } from './server';\n+\n+export interface Decoration {\n+    range: lc.Range;\n+    tag: string;\n+}\n+\n+export class Highlighter {\n+    private static initDecorations(): Map<string, vscode.TextEditorDecorationType> {\n+        const decor = (color: string) => vscode.window.createTextEditorDecorationType({ color });\n+\n+        const decorations: Iterable<[string, vscode.TextEditorDecorationType]> = [\n+            ['background', decor('#3F3F3F')],\n+            ['error', vscode.window.createTextEditorDecorationType({\n+                borderColor: 'red',\n+                borderStyle: 'none none dashed none',\n+            })],\n+            ['comment', decor('#7F9F7F')],\n+            ['string', decor('#CC9393')],\n+            ['keyword', decor('#F0DFAF')],\n+            ['function', decor('#93E0E3')],\n+            ['parameter', decor('#94BFF3')],\n+            ['builtin', decor('#DD6718')],\n+            ['text', decor('#DCDCCC')],\n+            ['attribute', decor('#BFEBBF')],\n+            ['literal', decor('#DFAF8F')],\n+        ];\n+\n+        return new Map<string, vscode.TextEditorDecorationType>(decorations);\n+    }\n+\n+    private decorations: (Map<string, vscode.TextEditorDecorationType> | null) = null;\n+\n+    public removeHighlights() {\n+        if (this.decorations == null) {\n+            return;\n+        }\n+\n+        // Decorations are removed when the object is disposed\n+        for (const decoration of this.decorations.values()) {\n+            decoration.dispose();\n+        }\n+\n+        this.decorations = null;\n+    }\n+\n+    public setHighlights(\n+        editor: vscode.TextEditor,\n+        highlights: Decoration[],\n+    ) {\n+        // Initialize decorations if necessary\n+        //\n+        // Note: decoration objects need to be kept around so we can dispose them\n+        // if the user disables syntax highlighting\n+        if (this.decorations == null) {\n+            this.decorations = Highlighter.initDecorations();\n+        }\n+\n+        const byTag: Map<string, vscode.Range[]> = new Map();\n+        for (const tag of this.decorations.keys()) {\n+            byTag.set(tag, []);\n+        }\n+\n+        for (const d of highlights) {\n+            if (!byTag.get(d.tag)) {\n+                continue;\n+            }\n+            byTag.get(d.tag)!.push(\n+                Server.client.protocol2CodeConverter.asRange(d.range),\n+            );\n+        }\n+\n+        for (const tag of byTag.keys()) {\n+            const dec = this.decorations.get(tag) as vscode.TextEditorDecorationType;\n+            const ranges = byTag.get(tag)!;\n+            editor.setDecorations(dec, ranges);\n+        }\n+    }\n+}"}, {"sha": "c565768658867ab602feb6d300dd968dbe3f36ff", "filename": "editors/code/src/notifications/index.ts", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnotifications%2Findex.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,5 @@\n+import * as publishDecorations from './publish_decorations';\n+\n+export {\n+    publishDecorations,\n+};"}, {"sha": "d8790386b1a1179bf3e40d57763f648dc2314e1d", "filename": "editors/code/src/notifications/publish_decorations.ts", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,20 @@\n+import * as vscode from 'vscode';\n+\n+import { Decoration } from '../highlighting';\n+import { Server } from '../server';\n+\n+export interface PublishDecorationsParams {\n+    uri: string;\n+    decorations: Decoration[];\n+}\n+\n+export function handle(params: PublishDecorationsParams) {\n+    const targetEditor = vscode.window.visibleTextEditors.find(\n+        (editor) => editor.document.uri.toString() === params.uri,\n+    );\n+    if (!Server.config.highlightingOn || !targetEditor) { return; }\n+    Server.highlighter.setHighlights(\n+        targetEditor,\n+        params.decorations,\n+    );\n+}"}, {"sha": "01fd80756fd394da9a3bf5715c2256bd8abcd6a8", "filename": "editors/code/src/server.ts", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,37 @@\n+import * as lc from 'vscode-languageclient';\n+\n+import { Config } from './config';\n+import { Highlighter } from './highlighting';\n+\n+export class Server {\n+    public static highlighter = new Highlighter();\n+    public static config = new Config();\n+    public static client: lc.LanguageClient;\n+\n+    public static start(notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>) {\n+        const run: lc.Executable = {\n+            command: 'ra_lsp_server',\n+            options: { cwd: '.' },\n+        };\n+        const serverOptions: lc.ServerOptions = {\n+            run,\n+            debug: run,\n+        };\n+        const clientOptions: lc.LanguageClientOptions = {\n+            documentSelector: [{ scheme: 'file', language: 'rust' }],\n+        };\n+\n+        Server.client = new lc.LanguageClient(\n+            'ra-lsp',\n+            'rust-analyzer languge server',\n+            serverOptions,\n+            clientOptions,\n+        );\n+        Server.client.onReady().then(() => {\n+            for (const [type, handler] of notificationHandlers) {\n+                Server.client.onNotification(type, handler);\n+            }\n+        });\n+        Server.client.start();\n+    }\n+}"}, {"sha": "ce48dfc95e158c3c5144c7bc5dac0e06dd3ac8b3", "filename": "editors/code/tslint.json", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Ftslint.json", "raw_url": "https://github.com/rust-lang/rust/raw/f4ad36e972989c3feed8671d6d6fca0aed37cd8f/editors%2Fcode%2Ftslint.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftslint.json?ref=f4ad36e972989c3feed8671d6d6fca0aed37cd8f", "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"defaultSeverity\": \"error\",\n+    \"extends\": [\n+        \"tslint:recommended\"\n+    ],\n+    \"jsRules\": {},\n+    \"rules\": {\n+        \"quotemark\": [true, \"single\"],\n+        \"interface-name\": false,\n+        \"object-literal-sort-keys\": false\n+    },\n+    \"rulesDirectory\": []\n+}"}]}