{"sha": "d6c2db2aea720b8f93d9840bfe929b1837951168", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzJkYjJhZWE3MjBiOGY5M2Q5ODQwYmZlOTI5YjE4Mzc5NTExNjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-30T19:52:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Return use domtree.dominates in temporal_order", "tree": {"sha": "1951ac75967d9ba0ed5fc106c66e461f909e555a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1951ac75967d9ba0ed5fc106c66e461f909e555a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c2db2aea720b8f93d9840bfe929b1837951168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2db2aea720b8f93d9840bfe929b1837951168", "html_url": "https://github.com/rust-lang/rust/commit/d6c2db2aea720b8f93d9840bfe929b1837951168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2db2aea720b8f93d9840bfe929b1837951168/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4debdb7c606890006c68278b7d4ea6146834e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4debdb7c606890006c68278b7d4ea6146834e2", "html_url": "https://github.com/rust-lang/rust/commit/7c4debdb7c606890006c68278b7d4ea6146834e2"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "2b48d823225d20d90492aa174849b990cc329482", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2db2aea720b8f93d9840bfe929b1837951168/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2db2aea720b8f93d9840bfe929b1837951168/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=d6c2db2aea720b8f93d9840bfe929b1837951168", "patch": "@@ -182,7 +182,7 @@ pub(super) fn optimize_function(\n                     let store_ebb = opt_ctx.ctx.func.layout.inst_ebb(store).unwrap();\n                     let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n                     let stored_type = opt_ctx.ctx.func.dfg.value_type(stored_value);\n-                    if stored_type == loaded_type && store_ebb == load_ebb {\n+                    if stored_type == loaded_type {\n                         println!(\"Store to load forward {} -> {}\", store, load);\n                         users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                     }\n@@ -379,34 +379,31 @@ enum TemporalOrder {\n fn temporal_order(ctx: &Context, src: Inst, dest: Inst) -> TemporalOrder {\n     debug_assert_ne!(src, dest);\n \n+    if ctx.domtree.dominates(src, dest, &ctx.func.layout) {\n+        return TemporalOrder::DefinitivelyBefore;\n+    } else if ctx.domtree.dominates(src, dest, &ctx.func.layout) {\n+        return TemporalOrder::NeverBefore;\n+    }\n+\n     let src_ebb = ctx.func.layout.inst_ebb(src).unwrap();\n     let dest_ebb = ctx.func.layout.inst_ebb(dest).unwrap();\n-    if src_ebb == dest_ebb {\n-        use std::cmp::Ordering::*;\n-        match ctx.func.layout.cmp(src, dest) {\n-            Less => TemporalOrder::DefinitivelyBefore,\n-            Equal => unreachable!(),\n-            Greater => TemporalOrder::MaybeBefore, // FIXME use dominator to check for loops\n+\n+    // FIXME O(stack_load count * ebb count)\n+    // FIXME reuse memory allocations\n+    let mut visited = EntitySet::new();\n+    let mut todo = EntitySet::new();\n+    todo.insert(dest_ebb);\n+    while let Some(ebb) = todo.pop() {\n+        if visited.contains(ebb) {\n+            continue;\n         }\n-    } else {\n-        // FIXME O(stack_load count * ebb count)\n-        // FIXME reuse memory allocations\n-        // FIXME return DefinitivelyBefore is src dominates dest\n-        let mut visited = EntitySet::new();\n-        let mut todo = EntitySet::new();\n-        todo.insert(dest_ebb);\n-        while let Some(ebb) = todo.pop() {\n-            if visited.contains(ebb) {\n-                continue;\n-            }\n-            visited.insert(ebb);\n-            if ebb == src_ebb {\n-                return TemporalOrder::MaybeBefore;\n-            }\n-            for bb in ctx.cfg.pred_iter(ebb) {\n-                todo.insert(bb.ebb);\n-            }\n+        visited.insert(ebb);\n+        if ebb == src_ebb {\n+            return TemporalOrder::MaybeBefore;\n+        }\n+        for bb in ctx.cfg.pred_iter(ebb) {\n+            todo.insert(bb.ebb);\n         }\n-        TemporalOrder::NeverBefore\n     }\n+    TemporalOrder::NeverBefore\n }"}]}