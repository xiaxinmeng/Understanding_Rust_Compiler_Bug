{"sha": "6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "node_id": "C_kwDOAAsO6NoAKDZkMWJmNzMzZDZkMjUwMWZhNGY4ZGQ5OWM3ZDlhOTdlMmQyM2QyODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T10:30:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T10:30:30Z"}, "message": "Auto merge of #111778 - Dylan-DPC:rollup-107ig9h, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #111491 (Dont check `must_use` on nested `impl Future` from fn)\n - #111606 (very minor cleanups)\n - #111619 (Add timings for MIR passes to profiling report)\n - #111652 (Better diagnostic for `use Self::..`)\n - #111665 (Add more tests for the offset_of macro)\n - #111708 (Give a more useful location for where a span_bug was delayed)\n - #111715 (Fix doc comment for `ConstParamTy` derive)\n - #111723 (style: do not overwrite obligations)\n - #111743 (Improve cgu merging debug output)\n - #111762 (fix: emit error when fragment is `MethodReceiverExpr` and items is empty)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "482d45ca1c0fa3b5c73ce05fbc79b287095a152b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482d45ca1c0fa3b5c73ce05fbc79b287095a152b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "html_url": "https://github.com/rust-lang/rust/commit/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f084d5e007b9561d155be0b1a2e369c8e4b0ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f084d5e007b9561d155be0b1a2e369c8e4b0ef", "html_url": "https://github.com/rust-lang/rust/commit/25f084d5e007b9561d155be0b1a2e369c8e4b0ef"}, {"sha": "94ca44a50ad6a76743eac7828d8c5f199b0042fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ca44a50ad6a76743eac7828d8c5f199b0042fd", "html_url": "https://github.com/rust-lang/rust/commit/94ca44a50ad6a76743eac7828d8c5f199b0042fd"}], "stats": {"total": 515, "additions": 461, "deletions": 54}, "files": [{"sha": "6c204b894a6ad27a5f1fbbc97af7dd5b6bfb5c04", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1250,7 +1250,8 @@ pub fn install_ice_hook(bug_report_url: &'static str, extra_info: fn(&Handler))\n         #[cfg(windows)]\n         if let Some(msg) = info.payload().downcast_ref::<String>() {\n             if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\") {\n-                early_error_no_abort(ErrorOutputType::default(), msg.as_str());\n+                // the error code is already going to be reported when the panic unwinds up the stack\n+                let _ = early_error_no_abort(ErrorOutputType::default(), msg.as_str());\n                 return;\n             }\n         };"}, {"sha": "d58555272424ca317077ea7b6a3e4593f68c3ae5", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1740,7 +1740,7 @@ impl DelayedDiagnostic {\n     }\n \n     fn decorate(mut self) -> Diagnostic {\n-        self.inner.note(format!(\"delayed at {}\", self.note));\n+        self.inner.note(format!(\"delayed at {}\\n{}\", self.inner.emitted_at, self.note));\n         self.inner\n     }\n }"}, {"sha": "5d369a1879a29305467669a9d05b849b4fb7fe32", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -722,7 +722,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                     });\n                                 }\n                             };\n-                            if fragment_kind == AstFragmentKind::Expr && items.is_empty() {\n+                            if matches!(\n+                                fragment_kind,\n+                                AstFragmentKind::Expr | AstFragmentKind::MethodReceiverExpr\n+                            ) && items.is_empty()\n+                            {\n                                 self.cx.emit_err(RemoveExprNotSupported { span });\n                                 fragment_kind.dummy(span)\n                             } else {"}, {"sha": "b88ba04b2737939562c8676c35b847e5da6a70ca", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -530,19 +530,18 @@ impl<'tcx> InferCtxt<'tcx> {\n         // these are the same span, but not in cases like `-> (impl\n         // Foo, impl Bar)`.\n         let span = cause.span;\n-\n-        let mut obligations = vec![];\n         let prev = self.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n             OpaqueHiddenType { ty: hidden_ty, span },\n             origin,\n         );\n-        if let Some(prev) = prev {\n-            obligations = self\n-                .at(&cause, param_env)\n+        let mut obligations = if let Some(prev) = prev {\n+            self.at(&cause, param_env)\n                 .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n-                .obligations;\n-        }\n+                .obligations\n+        } else {\n+            Vec::new()\n+        };\n \n         let item_bounds = tcx.explicit_item_bounds(def_id);\n "}, {"sha": "0fe140e08d26ac945be5271370cbb45a27c4d6fa", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -103,8 +103,10 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             && let ty = cx.typeck_results().expr_ty(&await_expr)\n             && let ty::Alias(ty::Opaque, ty::AliasTy { def_id: future_def_id, .. }) = ty.kind()\n             && cx.tcx.ty_is_opaque_future(ty)\n-            // FIXME: This also includes non-async fns that return `impl Future`.\n             && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n+            && matches!(cx.tcx.def_kind(async_fn_def_id), DefKind::Fn | DefKind::AssocFn)\n+            // Check that this `impl Future` actually comes from an `async fn`\n+            && cx.tcx.asyncness(async_fn_def_id).is_async()\n             && check_must_use_def(\n                 cx,\n                 async_fn_def_id,"}, {"sha": "5c71910a955d86cd8e2921320bbd033891a064fc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n pub trait MirPass<'tcx> {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         let name = std::any::type_name::<Self>();\n         if let Some((_, tail)) = name.rsplit_once(':') { tail } else { name }\n     }"}, {"sha": "746e3d9652db6042848a465aa7572f6d1030f378", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -12,7 +12,7 @@ use rustc_session::config::OutputType;\n pub struct Marker(pub &'static str);\n \n impl<'tcx> MirPass<'tcx> for Marker {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         self.0\n     }\n "}, {"sha": "710eed3ed380850dba1f697d4da55b4b06cd6f81", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -6,7 +6,7 @@ use crate::{validate, MirPass};\n \n /// Just like `MirPass`, except it cannot mutate `Body`.\n pub trait MirLint<'tcx> {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         let name = std::any::type_name::<Self>();\n         if let Some((_, tail)) = name.rsplit_once(':') { tail } else { name }\n     }\n@@ -26,7 +26,7 @@ impl<'tcx, T> MirPass<'tcx> for Lint<T>\n where\n     T: MirLint<'tcx>,\n {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         self.0.name()\n     }\n \n@@ -49,7 +49,7 @@ impl<'tcx, T> MirPass<'tcx> for WithMinOptLevel<T>\n where\n     T: MirPass<'tcx>,\n {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         self.1.name()\n     }\n \n@@ -121,7 +121,7 @@ fn run_passes_inner<'tcx>(\n                 validate_body(tcx, body, format!(\"before pass {}\", name));\n             }\n \n-            pass.run_pass(tcx, body);\n+            tcx.sess.time(name, || pass.run_pass(tcx, body));\n \n             if dump_enabled {\n                 dump_mir_for_pass(tcx, body, &name, true);"}, {"sha": "e59219321b7ffe69a9b4300ed583ff4239a3a31b", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -74,7 +74,7 @@ pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n-    fn name(&self) -> &str {\n+    fn name(&self) -> &'static str {\n         &self.name()\n     }\n "}, {"sha": "eafe57a0c02077b5b202671d193bfd75f3eecd1c", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -250,13 +250,13 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(tcx, \"INITIAL PARTITIONING\", &initial_partitioning.codegen_units);\n \n     // Merge until we have at most `max_cgu_count` codegen units.\n     {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_merge_cgus\");\n         partitioner.merge_codegen_units(cx, &mut initial_partitioning);\n-        debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n+        debug_dump(tcx, \"POST MERGING\", &initial_partitioning.codegen_units);\n     }\n \n     // In the next step, we use the inlining map to determine which additional\n@@ -272,7 +272,7 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n+    debug_dump(tcx, \"POST INLINING\", &post_inlining.codegen_units);\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n@@ -322,6 +322,8 @@ where\n \n     result.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n+    debug_dump(tcx, \"FINAL\", &result);\n+\n     result\n }\n \n@@ -346,33 +348,37 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n-fn debug_dump<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n-where\n-    I: Iterator<Item = &'a CodegenUnit<'tcx>>,\n-    'tcx: 'a,\n-{\n+fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<'tcx>]) {\n     let dump = move || {\n         use std::fmt::Write;\n \n+        let num_cgus = cgus.len();\n+        let max = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n+        let min = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n+        let ratio = max as f64 / min as f64;\n+\n         let s = &mut String::new();\n-        let _ = writeln!(s, \"{label}\");\n+        let _ = writeln!(\n+            s,\n+            \"{label} ({num_cgus} CodegenUnits, max={max}, min={min}, max/min={ratio:.1}):\"\n+        );\n         for cgu in cgus {\n             let _ =\n-                writeln!(s, \"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n+                writeln!(s, \"CodegenUnit {} estimated size {}:\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n-                let _ = writeln!(\n+                let _ = with_no_trimmed_paths!(writeln!(\n                     s,\n                     \" - {} [{:?}] [{}] estimated size {}\",\n                     mono_item,\n                     linkage,\n                     symbol_hash,\n                     mono_item.size_estimate(tcx)\n-                );\n+                ));\n             }\n \n             let _ = writeln!(s);"}, {"sha": "bcef0f7185fbf43b273dcc4486cbc661548bdf1a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -238,6 +238,7 @@ impl<'a> DerefMut for SnapshotParser<'a> {\n \n impl<'a> Parser<'a> {\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "ed0a792d3876309be8a3fb7eb9756f99e7d46e26", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1832,7 +1832,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n             (msg, None)\n         } else if ident.name == kw::SelfUpper {\n-            (\"`Self` is only available in impls, traits, and type definitions\".to_string(), None)\n+            // As mentioned above, `opt_ns` being `None` indicates a module path in import.\n+            // We can use this to improve a confusing error for, e.g. `use Self::Variant` in an\n+            // impl\n+            if opt_ns.is_none() {\n+                (\"`Self` cannot be used in imports\".to_string(), None)\n+            } else {\n+                (\n+                    \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n+                    None,\n+                )\n+            }\n         } else if ident.name.as_str().chars().next().map_or(false, |c| c.is_ascii_uppercase()) {\n             // Check whether the name refers to an item in the value namespace.\n             let binding = if let Some(ribs) = ribs {"}, {"sha": "4f593083b6f3a754d656779c336e351ed283f32a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1732,6 +1732,7 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n \n #[allow(rustc::untranslatable_diagnostic)]\n #[allow(rustc::diagnostic_outside_of_impl)]\n+#[must_use = \"ErrorGuaranteed must be returned from `run_compiler` in order to exit with a non-zero status code\"]\n pub fn early_error_no_abort(\n     output: config::ErrorOutputType,\n     msg: impl Into<DiagnosticMessage>,"}, {"sha": "2bb688b921c9b897516cd04dd93503e3b8b15ffb", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -986,7 +986,7 @@ pub trait PointerLike {}\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n \n-/// Derive macro generating an impl of the trait `Copy`.\n+/// Derive macro generating an impl of the trait `ConstParamTy`.\n #[rustc_builtin_macro]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[cfg(not(bootstrap))]"}, {"sha": "0a9850146e5a3c11299567640c3301083214b71a", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -386,6 +386,21 @@ fn offset_of() {\n     // Layout of tuples is unstable\n     assert!(offset_of!((u8, u16), 0) <= size_of::<(u8, u16)>() - 1);\n     assert!(offset_of!((u8, u16), 1) <= size_of::<(u8, u16)>() - 2);\n+\n+    #[repr(C)]\n+    struct Generic<T> {\n+        x: u8,\n+        y: u32,\n+        z: T\n+    }\n+\n+    // Ensure that this type of generics works\n+    fn offs_of_z<T>() -> usize {\n+        offset_of!(Generic<T>, z)\n+    }\n+\n+    assert_eq!(offset_of!(Generic<u8>, z), 8);\n+    assert_eq!(offs_of_z::<u8>(), 8);\n }\n \n #[test]"}, {"sha": "cf7c6596c02389d5668da9e2ea040cc0b14d5da5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -942,7 +942,6 @@ impl<'a> Builder<'a> {\n         self.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), paths);\n     }\n \n-    /// NOTE: keep this in sync with `rustdoc::clean::utils::doc_rust_lang_org_channel`, or tests will fail on beta/stable.\n     pub fn doc_rust_lang_org_channel(&self) -> String {\n         let channel = match &*self.config.channel {\n             \"stable\" => &self.version,"}, {"sha": "f773f09c3821b2a86a68912224e854d0ad7205a0", "filename": "tests/ui/lint/unused/auxiliary/must-use-foreign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+\n+use std::future::Future;\n+\n+pub struct Manager;\n+\n+impl Manager {\n+    #[must_use]\n+    pub async fn new() -> (Self, impl Future<Output = ()>) {\n+        (Manager, async {})\n+    }\n+}"}, {"sha": "21a1105856218156707733278af32023d689a17a", "filename": "tests/ui/lint/unused/must-use-foreign.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+// aux-build:must-use-foreign.rs\n+// check-pass\n+\n+extern crate must_use_foreign;\n+\n+use must_use_foreign::Manager;\n+\n+async fn async_main() {\n+    Manager::new().await.1.await;\n+}\n+\n+fn main() {\n+    let _ = async_main();\n+}"}, {"sha": "6355f47f037c75a5ca618b1fb429e8f9feedff87", "filename": "tests/ui/lint/unused/unused-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-async.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -33,7 +33,7 @@ async fn test() {\n     foo().await; //~ ERROR unused output of future returned by `foo` that must be used\n     bar(); //~ ERROR unused return value of `bar` that must be used\n     //~^ ERROR unused implementer of `Future` that must be used\n-    bar().await; //~ ERROR unused output of future returned by `bar` that must be used\n+    bar().await; // ok, it's not an async fn\n     baz(); //~ ERROR unused implementer of `Future` that must be used\n     baz().await; // ok\n }"}, {"sha": "e93a40658f3c2f634754cdc4cbfcfe2c65fd49b3", "filename": "tests/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -52,17 +52,6 @@ help: use `let _ = ...` to ignore the resulting value\n LL |     let _ = bar();\n    |     +++++++\n \n-error: unused output of future returned by `bar` that must be used\n-  --> $DIR/unused-async.rs:36:5\n-   |\n-LL |     bar().await;\n-   |     ^^^^^^^^^^^\n-   |\n-help: use `let _ = ...` to ignore the resulting value\n-   |\n-LL |     let _ = bar().await;\n-   |     +++++++\n-\n error: unused implementer of `Future` that must be used\n   --> $DIR/unused-async.rs:37:5\n    |\n@@ -71,5 +60,5 @@ LL |     baz();\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "6c45e4e8cd719392fafd09b34dd25c5e6dba4e42", "filename": "tests/ui/macros/issue-111749.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fmacros%2Fissue-111749.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fmacros%2Fissue-111749.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-111749.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! cbor_map {\n+    ($key:expr) => {\n+        $key.signum();\n+    };\n+}\n+\n+fn main() {\n+    cbor_map! { #[test(test)] 4};\n+    //~^ ERROR removing an expression is not supported in this position\n+    //~| ERROR attribute must be of the form `#[test]`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}"}, {"sha": "7db2b8e6ad1ec84f2b4323637deb8ccebe69050c", "filename": "tests/ui/macros/issue-111749.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fmacros%2Fissue-111749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fmacros%2Fissue-111749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-111749.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,18 @@\n+error: removing an expression is not supported in this position\n+  --> $DIR/issue-111749.rs:8:17\n+   |\n+LL |     cbor_map! { #[test(test)] 4};\n+   |                 ^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[test]`\n+  --> $DIR/issue-111749.rs:8:17\n+   |\n+LL |     cbor_map! { #[test(test)] 4};\n+   |                 ^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "89e73b8c6b84d96c5942aa2d40be22a3f8a96747", "filename": "tests/ui/offset-of/offset-of-dst-field.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -26,8 +26,23 @@ struct Gamma {\n     z: Extern,\n }\n \n+struct Delta<T: ?Sized> {\n+    x: u8,\n+    y: u16,\n+    z: T,\n+}\n+\n fn main() {\n     offset_of!(Alpha, z); //~ ERROR the size for values of type\n     offset_of!(Beta, z); //~ ERROR the size for values of type\n     offset_of!(Gamma, z); //~ ERROR the size for values of type\n }\n+\n+fn delta() {\n+    offset_of!(Delta<Alpha>, z); //~ ERROR the size for values of type\n+    offset_of!(Delta<Extern>, z); //~ ERROR the size for values of type\n+}\n+\n+fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+    offset_of!(Delta<T>, z) //~ ERROR the size for values of type\n+}"}, {"sha": "992eab3d4bdf03d5c7ceb8ec2fca55ec6cac1015", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:30:5\n+  --> $DIR/offset-of-dst-field.rs:36:5\n    |\n LL |     offset_of!(Alpha, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -8,7 +8,7 @@ LL |     offset_of!(Alpha, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:31:5\n+  --> $DIR/offset-of-dst-field.rs:37:5\n    |\n LL |     offset_of!(Beta, z);\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -17,14 +17,52 @@ LL |     offset_of!(Beta, z);\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n-  --> $DIR/offset-of-dst-field.rs:32:5\n+  --> $DIR/offset-of-dst-field.rs:38:5\n    |\n LL |     offset_of!(Gamma, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `Extern`\n    = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:43:5\n+   |\n+LL |     offset_of!(Delta<Extern>, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `Extern`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:42:5\n+   |\n+LL |     offset_of!(Delta<Alpha>, z);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `Alpha`, the trait `Sized` is not implemented for `[u8]`\n+note: required because it appears within the type `Alpha`\n+  --> $DIR/offset-of-dst-field.rs:5:8\n+   |\n+LL | struct Alpha {\n+   |        ^^^^^\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/offset-of-dst-field.rs:47:5\n+   |\n+LL | fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+   |                             - this type parameter needs to be `std::marker::Sized`\n+LL |     offset_of!(Delta<T>, z)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n+LL + fn generic_with_maybe_sized<T>() -> usize {\n+   |\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "50c2e93841f9f25ea7a0135b9362cd5020dde194", "filename": "tests/ui/offset-of/offset-of-output-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-output-type.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,20 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+struct S {\n+    v: u8,\n+    w: u16,\n+}\n+\n+\n+fn main() {\n+    let _: u8 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u16 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u32 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: u64 = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: isize = offset_of!(S, v); //~ ERROR mismatched types\n+    let _: usize = offset_of!(S, v);\n+\n+    offset_of!(S, v) //~ ERROR mismatched types\n+}"}, {"sha": "6f8c94750299eafb051beed36ab670aae9b7d613", "filename": "tests/ui/offset-of/offset-of-output-type.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-output-type.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,64 @@\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:12:17\n+   |\n+LL |     let _: u8 = offset_of!(S, v);\n+   |            --   ^^^^^^^^^^^^^^^^ expected `u8`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:13:18\n+   |\n+LL |     let _: u16 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u16`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:14:18\n+   |\n+LL |     let _: u32 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u32`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:15:18\n+   |\n+LL |     let _: u64 = offset_of!(S, v);\n+   |            ---   ^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:16:20\n+   |\n+LL |     let _: isize = offset_of!(S, v);\n+   |            -----   ^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/offset-of-output-type.rs:19:5\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+...\n+LL |     offset_of!(S, v)\n+   |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n+   |\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6b1a16ba62b67e34129b330c079e97c3681c7619", "filename": "tests/ui/offset-of/offset-of-private.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -8,9 +8,21 @@ mod m {\n         pub public: u8,\n         private: u8,\n     }\n+    #[repr(C)]\n+    pub struct FooTuple(pub u8, u8);\n+    #[repr(C)]\n+    struct Bar {\n+        pub public: u8,\n+        private: u8,\n+    }\n }\n \n fn main() {\n     offset_of!(m::Foo, public);\n     offset_of!(m::Foo, private); //~ ERROR field `private` of struct `Foo` is private\n+    offset_of!(m::FooTuple, 0);\n+    offset_of!(m::FooTuple, 1); //~ ERROR field `1` of struct `FooTuple` is private\n+    offset_of!(m::Bar, public); //~ ERROR struct `Bar` is private\n+    offset_of!(m::Bar, private); //~ ERROR struct `Bar` is private\n+    //~| ERROR field `private` of struct `Bar` is private\n }"}, {"sha": "0674b58f8608cd195bffd28ccf31c58c7bd0acc6", "filename": "tests/ui/offset-of/offset-of-private.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-private.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -1,9 +1,46 @@\n+error[E0603]: struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:25:19\n+   |\n+LL |     offset_of!(m::Bar, public);\n+   |                   ^^^ private struct\n+   |\n+note: the struct `Bar` is defined here\n+  --> $DIR/offset-of-private.rs:14:5\n+   |\n+LL |     struct Bar {\n+   |     ^^^^^^^^^^\n+\n+error[E0603]: struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:26:19\n+   |\n+LL |     offset_of!(m::Bar, private);\n+   |                   ^^^ private struct\n+   |\n+note: the struct `Bar` is defined here\n+  --> $DIR/offset-of-private.rs:14:5\n+   |\n+LL |     struct Bar {\n+   |     ^^^^^^^^^^\n+\n error[E0616]: field `private` of struct `Foo` is private\n-  --> $DIR/offset-of-private.rs:15:24\n+  --> $DIR/offset-of-private.rs:22:24\n    |\n LL |     offset_of!(m::Foo, private);\n    |                        ^^^^^^^ private field\n \n-error: aborting due to previous error\n+error[E0616]: field `1` of struct `FooTuple` is private\n+  --> $DIR/offset-of-private.rs:24:29\n+   |\n+LL |     offset_of!(m::FooTuple, 1);\n+   |                             ^ private field\n+\n+error[E0616]: field `private` of struct `Bar` is private\n+  --> $DIR/offset-of-private.rs:26:24\n+   |\n+LL |     offset_of!(m::Bar, private);\n+   |                        ^^^^^^^ private field\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0616`.\n+Some errors have detailed explanations: E0603, E0616.\n+For more information about an error, try `rustc --explain E0603`."}, {"sha": "dbeef0e74dc37f7362d6145ad257d3eb55407af0", "filename": "tests/ui/offset-of/offset-of-self.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-self.rs?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,58 @@\n+#![feature(offset_of)]\n+\n+use std::mem::offset_of;\n+\n+struct C<T> {\n+    v: T,\n+    w: T,\n+}\n+\n+struct S {\n+    v: u8,\n+    w: u16,\n+}\n+\n+impl S {\n+    fn v_offs() -> usize {\n+        offset_of!(Self, v)\n+    }\n+    fn v_offs_wrong_syntax() {\n+        offset_of!(Self, Self::v); //~ ERROR no rules expected the token `::`\n+        offset_of!(S, Self); //~ ERROR expected identifier, found keyword `Self`\n+        //~| no field `Self` on type `S`\n+    }\n+    fn offs_in_c() -> usize {\n+        offset_of!(C<Self>, w)\n+    }\n+    fn offs_in_c_colon() -> usize {\n+        offset_of!(C::<Self>, w)\n+    }\n+}\n+\n+mod m {\n+    use std::mem::offset_of;\n+    fn off() {\n+        offset_of!(self::S, v); //~ ERROR cannot find type `S` in module\n+        offset_of!(super::S, v);\n+        offset_of!(crate::S, v);\n+    }\n+    impl super::n::T {\n+        fn v_offs_self() -> usize {\n+            offset_of!(Self, v) //~ ERROR field `v` of struct `T` is private\n+        }\n+    }\n+}\n+\n+mod n {\n+    pub struct T { v: u8, }\n+}\n+\n+fn main() {\n+    offset_of!(self::S, v);\n+    offset_of!(Self, v); //~ ERROR cannot find type `Self` in this scope\n+\n+    offset_of!(S, self); //~ ERROR expected identifier, found keyword `self`\n+    //~| no field `self` on type `S`\n+    offset_of!(S, v.self); //~ ERROR expected identifier, found keyword `self`\n+    //~| no field `self` on type `u8`\n+}"}, {"sha": "df555463f98842984269286258c2011a77634355", "filename": "tests/ui/offset-of/offset-of-self.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-self.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -0,0 +1,79 @@\n+error: no rules expected the token `::`\n+  --> $DIR/offset-of-self.rs:20:30\n+   |\n+LL |         offset_of!(Self, Self::v);\n+   |                              ^^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n+\n+error: expected identifier, found keyword `Self`\n+  --> $DIR/offset-of-self.rs:21:23\n+   |\n+LL |         offset_of!(S, Self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected identifier, found keyword `self`\n+  --> $DIR/offset-of-self.rs:54:19\n+   |\n+LL |     offset_of!(S, self);\n+   |                   ^^^^ expected identifier, found keyword\n+\n+error: expected identifier, found keyword `self`\n+  --> $DIR/offset-of-self.rs:56:21\n+   |\n+LL |     offset_of!(S, v.self);\n+   |                     ^^^^ expected identifier, found keyword\n+\n+error[E0412]: cannot find type `S` in module `self`\n+  --> $DIR/offset-of-self.rs:35:26\n+   |\n+LL |         offset_of!(self::S, v);\n+   |                          ^ not found in `self`\n+   |\n+help: consider importing this struct\n+   |\n+LL +     use S;\n+   |\n+help: if you import `S`, refer to it directly\n+   |\n+LL -         offset_of!(self::S, v);\n+LL +         offset_of!(S, v);\n+   |\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/offset-of-self.rs:52:16\n+   |\n+LL | fn main() {\n+   |    ---- `Self` not allowed in a function\n+LL |     offset_of!(self::S, v);\n+LL |     offset_of!(Self, v);\n+   |                ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0609]: no field `Self` on type `S`\n+  --> $DIR/offset-of-self.rs:21:23\n+   |\n+LL |         offset_of!(S, Self);\n+   |                       ^^^^\n+\n+error[E0616]: field `v` of struct `T` is private\n+  --> $DIR/offset-of-self.rs:41:30\n+   |\n+LL |             offset_of!(Self, v)\n+   |                              ^ private field\n+\n+error[E0609]: no field `self` on type `S`\n+  --> $DIR/offset-of-self.rs:54:19\n+   |\n+LL |     offset_of!(S, self);\n+   |                   ^^^^\n+\n+error[E0609]: no field `self` on type `u8`\n+  --> $DIR/offset-of-self.rs:56:21\n+   |\n+LL |     offset_of!(S, v.self);\n+   |                     ^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0411, E0412, E0609, E0616.\n+For more information about an error, try `rustc --explain E0411`."}, {"sha": "3da04a851f651542b47629bb3ad4b44d583ab8d7", "filename": "tests/ui/use/use-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fuse%2Fuse-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284/tests%2Fui%2Fuse%2Fuse-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse%2Fuse-self-type.stderr?ref=6d1bf733d6d2501fa4f8dd99c7d9a97e2d23d284", "patch": "@@ -8,7 +8,7 @@ error[E0432]: unresolved import `Self`\n   --> $DIR/use-self-type.rs:6:13\n    |\n LL |         use Self::f;\n-   |             ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |             ^^^^ `Self` cannot be used in imports\n \n error: aborting due to 2 previous errors\n "}]}