{"sha": "f8a35234ad65a006243aee60406fa9f8a05c08f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YTM1MjM0YWQ2NWEwMDYyNDNhZWU2MDQwNmZhOWY4YTA1YzA4ZjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T12:35:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T12:39:30Z"}, "message": "Remove autoderef for calls\n\nWe were only using it in a single place, and there for no discernable reason\n(probably as part of the bare-fn-vals-are-not-copyable plan). It seems more\nsurprising than useful.", "tree": {"sha": "c3d025e5d621f186abe8e1b30048b69c2f45e238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d025e5d621f186abe8e1b30048b69c2f45e238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a35234ad65a006243aee60406fa9f8a05c08f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a35234ad65a006243aee60406fa9f8a05c08f0", "html_url": "https://github.com/rust-lang/rust/commit/f8a35234ad65a006243aee60406fa9f8a05c08f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a35234ad65a006243aee60406fa9f8a05c08f0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04490d97bbbf6f3313e1014e88b561c73c0bd1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04490d97bbbf6f3313e1014e88b561c73c0bd1c", "html_url": "https://github.com/rust-lang/rust/commit/c04490d97bbbf6f3313e1014e88b561c73c0bd1c"}], "stats": {"total": 70, "additions": 18, "deletions": 52}, "files": [{"sha": "44ae6838a81b764893c7ee7e7fca1c2fcb153ad3", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -10,7 +10,7 @@ import front::attr;\n \n export modify_for_testing;\n \n-type node_id_gen = @fn() -> ast::node_id;\n+type node_id_gen = fn() -> ast::node_id;\n \n type test = {path: [ast::ident], ignore: bool};\n \n@@ -29,7 +29,7 @@ fn modify_for_testing(crate: @ast::crate) -> @ast::crate {\n     // access to the real next node_id.\n     let next_node_id = @mutable 200000;\n     let next_node_id_fn =\n-        @bind fn (next_node_id: @mutable ast::node_id) -> ast::node_id {\n+        bind fn (next_node_id: @mutable ast::node_id) -> ast::node_id {\n                   let this_node_id = *next_node_id;\n                   *next_node_id += 1;\n                   ret this_node_id;"}, {"sha": "f1788fda27e631f730e3f2badd333ae0c16aa46c", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -222,7 +222,7 @@ fn cant_copy(cx: ctx, b: binding) -> bool {\n }\n \n fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n-    let fty = ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f));\n+    let fty = ty::expr_ty(cx.tcx, f);\n     let by_ref = alt ty::ty_fn_ret_style(cx.tcx, fty) {\n       ast::return_ref(_, arg_n) { arg_n } _ { 0u }\n     };\n@@ -685,7 +685,7 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n     if is_none(path_def_id(cx, base_root.ex)) {\n         alt base_root.ex.node {\n           ast::expr_call(f, args) {\n-            let fty = ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f));\n+            let fty = ty::expr_ty(cx.tcx, f);\n             alt ty::ty_fn_ret_style(cx.tcx, fty) {\n               ast::return_ref(mut, arg_n) {\n                 let arg = args[arg_n - 1u];"}, {"sha": "8974509a8a9a950b1ef6798b5265e58aad6b9978", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -219,9 +219,7 @@ fn check_move_rhs(cx: @ctx, src: @expr) {\n }\n \n fn check_call(cx: @ctx, f: @expr, args: [@expr]) {\n-    let arg_ts =\n-        ty::ty_fn_args(cx.tcx,\n-                       ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f)));\n+    let arg_ts = ty::ty_fn_args(cx.tcx, ty::expr_ty(cx.tcx, f));\n     let i = 0u;\n     for arg_t: ty::arg in arg_ts {\n         if arg_t.mode != by_ref { check_lval(cx, args[i], msg_mut_ref); }"}, {"sha": "cdcb9917b1db923ce8e2e3575a45a451cb4669c5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -3676,9 +3676,8 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n     // expression because of the hack that allows us to process self-calls\n     // with trans_call.\n     let fn_expr_ty = ty::expr_ty(bcx_tcx(in_cx), f);\n-    let fn_ty = ty::type_autoderef(bcx_tcx(in_cx), fn_expr_ty);\n     let by_ref = ast_util::ret_by_ref(ty::ty_fn_ret_style(bcx_tcx(in_cx),\n-                                                          fn_ty));\n+                                                          fn_expr_ty));\n     let cx = new_scope_block_ctxt(in_cx, \"call\");\n     let f_res = trans_lval_gen(cx, f);\n     let bcx = f_res.res.bcx;\n@@ -3694,10 +3693,7 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n       none. {\n         // It's a closure. We have to autoderef.\n         if f_res.is_mem { faddr = load_if_immediate(bcx, faddr, fn_expr_ty); }\n-        let res = autoderef(bcx, faddr, fn_expr_ty);\n-        bcx = res.bcx;\n-\n-        let pair = res.val;\n+        let pair = faddr;\n         faddr = GEP(bcx, pair, [C_int(0), C_int(abi::fn_field_code)]);\n         faddr = Load(bcx, faddr);\n         let llclosure = GEP(bcx, pair, [C_int(0), C_int(abi::fn_field_box)]);\n@@ -3707,7 +3703,8 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n \n     let ret_ty = ty::node_id_to_type(bcx_tcx(cx), id);\n     let args_res =\n-        trans_args(bcx, in_cx, llenv, f_res.generic, lliterbody, args, fn_ty);\n+        trans_args(bcx, in_cx, llenv, f_res.generic, lliterbody, args,\n+                   fn_expr_ty);\n     Br(args_res.outer_cx, cx.llbb);\n     bcx = args_res.bcx;\n     let llargs = args_res.args;"}, {"sha": "ad1d88b35a3afd187d1e09ddade63bcb779aa1d7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -1488,14 +1488,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // Get the function type.\n         let fty = expr_ty(fcx.ccx.tcx, f);\n \n-        // We want to autoderef calls but not binds\n-        let fty_stripped =\n-            alt call_kind {\n-              kind_call. { do_autoderef(fcx, sp, fty) }\n-              _ { fty }\n-            };\n-\n-        let sty = structure_of(fcx, sp, fty_stripped);\n+        let sty = structure_of(fcx, sp, fty);\n \n         // Check that we aren't confusing iter calls and fn calls\n         alt sty {\n@@ -1620,14 +1613,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n \n         // Pull the return type out of the type of the function.\n         let rt_1;\n-        let fty = do_autoderef(fcx, sp, ty::expr_ty(fcx.ccx.tcx, f));\n+        let fty = ty::expr_ty(fcx.ccx.tcx, f);\n         alt structure_of(fcx, sp, fty) {\n           ty::ty_fn(_, _, rt, cf, _) {\n             bot |= cf == ast::noreturn;\n             rt_1 = rt;\n           }\n           ty::ty_native_fn(_, _, rt) { rt_1 = rt; }\n-          _ { fail \"LHS of call expr didn't have a function type?!\"; }\n+          _ { fcx.ccx.tcx.sess.span_fatal(sp, \"calling non-function\"); }\n         }\n         write::ty_only_fixup(fcx, id, rt_1);\n         ret bot;"}, {"sha": "6c600158d21ef23ea7e75429fcfb334c9afd8748", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=c04490d97bbbf6f3313e1014e88b561c73c0bd1c", "patch": "@@ -1,2 +0,0 @@\n-// error-pattern: Type inference failed because I could not find\n-fn main() { let f; f = @f; f(); }"}, {"sha": "caff3f29fbc656bec8f5dcb06b403fc215211006", "filename": "src/test/run-pass/auto-deref-fn.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs?ref=c04490d97bbbf6f3313e1014e88b561c73c0bd1c", "patch": "@@ -1,10 +0,0 @@\n-fn add1(i: int) -> int { ret i + 1; }\n-fn main() {\n-    let f = @add1;\n-    let g = @f;\n-    let h = @@@add1;\n-    assert (f(5) == 6);\n-    assert (g(8) == 9);\n-    assert (h(0x1badd00d) == 0x1badd00e);\n-    assert ((@add1)(42) == 43);\n-}"}, {"sha": "f978092ca95751b57be6a893801e1643de104692", "filename": "src/test/run-pass/call-autoderef-tag.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04490d97bbbf6f3313e1014e88b561c73c0bd1c/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs?ref=c04490d97bbbf6f3313e1014e88b561c73c0bd1c", "patch": "@@ -1,10 +0,0 @@\n-tag int_fn { f(fn(int) -> int); }\n-tag int_box_fn { fb(@fn(int) -> int); }\n-fn add1(i: int) -> int { ret i + 1; }\n-fn main() {\n-    let g = f(add1);\n-    assert (g(4) == 5);\n-    assert (f(add1)(5) == 6);\n-    assert ((@f(add1))(5) == 6);\n-    assert (fb(@add1)(7) == 8);\n-}"}, {"sha": "dee72f7b097a86d7c71e75b52cbc64f6643485b4", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a35234ad65a006243aee60406fa9f8a05c08f0/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=f8a35234ad65a006243aee60406fa9f8a05c08f0", "patch": "@@ -1,18 +1,18 @@\n-fn fix_help<A, @B>(f: @fn(@fn(A) -> B, A) -> B, x: A) -> B {\n-    ret f(@bind fix_help(f, _), x);\n+fn fix_help<A, @B>(f: fn(fn(A) -> B, A) -> B, x: A) -> B {\n+    ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, @B>(f: @fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n-    ret @bind fix_help(f, _);\n+fn fix<A, @B>(f: fn(fn(A) -> B, A) -> B) -> fn(A) -> B {\n+    ret bind fix_help(f, _);\n }\n \n-fn fact_(f: @fn(int) -> int, n: int) -> int {\n+fn fact_(f: fn(int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     ret if n == 0 { 1 } else { n * f(n - 1) };\n }\n \n fn main() {\n-    let fact = fix(@fact_);\n+    let fact = fix(fact_);\n     assert (fact(5) == 120);\n     assert (fact(2) == 2);\n }"}]}