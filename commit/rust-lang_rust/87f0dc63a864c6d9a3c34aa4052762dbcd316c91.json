{"sha": "87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjBkYzYzYTg2NGM2ZDlhM2MzNGFhNDA1Mjc2MmRiY2QzMTZjOTE=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-02-26T10:59:37Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-02-26T10:59:37Z"}, "message": "use unions instead of transmute and add const safety comments", "tree": {"sha": "66fb86724e9f14137cd649faf81793a09de98136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66fb86724e9f14137cd649faf81793a09de98136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "html_url": "https://github.com/rust-lang/rust/commit/87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f0dc63a864c6d9a3c34aa4052762dbcd316c91/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15a98b87815850ef9dd11564e896b6f19b724c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15a98b87815850ef9dd11564e896b6f19b724c3", "html_url": "https://github.com/rust-lang/rust/commit/d15a98b87815850ef9dd11564e896b6f19b724c3"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "b64abc319360eb27b903631dca70977a4996c33a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/87f0dc63a864c6d9a3c34aa4052762dbcd316c91/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f0dc63a864c6d9a3c34aa4052762dbcd316c91/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "patch": "@@ -2251,12 +2251,19 @@ assert_eq!(\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n-            #[allow_internal_unstable(const_transmute)]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -2362,11 +2369,18 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n-            #[allow_internal_unstable(const_transmute)]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n     }\n@@ -4190,12 +4204,19 @@ assert_eq!(\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n-            #[allow_internal_unstable(const_transmute)]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -4301,11 +4322,18 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n-            #[allow_internal_unstable(const_transmute)]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n     }"}]}