{"sha": "7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjdiMjNiMmE0NmJkYThlZTMxZDM3NzMxZWNkZjk5NzkzZTJiOTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-25T00:27:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:01:42Z"}, "message": "move describe_as_module to where it's used", "tree": {"sha": "09b25c108a976cf9d43c6dfe332fb5a02a12a3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b25c108a976cf9d43c6dfe332fb5a02a12a3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "html_url": "https://github.com/rust-lang/rust/commit/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e9ff06af899b12d263b6e84af348615d65701f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9ff06af899b12d263b6e84af348615d65701f", "html_url": "https://github.com/rust-lang/rust/commit/e0e9ff06af899b12d263b6e84af348615d65701f"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "150fa5e8bf51cb65a15fcea4ac025aadb3ba5e5d", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, TyCtxt};\n+use crate::ty;\n use rustc_index::vec::Idx;\n use std::fmt;\n use std::u32;\n@@ -145,12 +145,8 @@ impl DefId {\n         LocalDefId::from_def_id(self)\n     }\n \n-    pub fn describe_as_module(&self, tcx: TyCtxt<'_>) -> String {\n-        if self.is_local() && self.index == CRATE_DEF_INDEX {\n-            format!(\"top-level module\")\n-        } else {\n-            format!(\"module `{}`\", tcx.def_path_str(*self))\n-        }\n+    pub fn is_top_level_module(self) -> bool {\n+        self.is_local() && self.index == CRATE_DEF_INDEX\n     }\n }\n "}, {"sha": "e81497351cabba79a44a4f3ea502a7cc7ef54025", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb7b23b2a46bda8ee31d37731ecdf99793e2b91/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=7eb7b23b2a46bda8ee31d37731ecdf99793e2b91", "patch": "@@ -16,6 +16,14 @@ use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use std::borrow::Cow;\n \n+fn describe_as_module(def_id: DefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        format!(\"top-level module\")\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id))\n+    }\n+}\n+\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n@@ -332,50 +340,50 @@ rustc_queries! {\n \n     Other {\n         query lint_mod(key: DefId) -> () {\n-            desc { |tcx| \"linting {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"linting {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the attributes in the module.\n         query check_mod_attrs(key: DefId) -> () {\n-            desc { |tcx| \"checking attributes in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking attributes in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_unstable_api_usage(key: DefId) -> () {\n-            desc { |tcx| \"checking for unstable API usage in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking for unstable API usage in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the const bodies in the module for illegal operations (e.g. `if` or `loop`).\n         query check_mod_const_bodies(key: DefId) -> () {\n-            desc { |tcx| \"checking consts in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking consts in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the loops in the module.\n         query check_mod_loops(key: DefId) -> () {\n-            desc { |tcx| \"checking loops in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking loops in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_item_types(key: DefId) -> () {\n-            desc { |tcx| \"checking item types in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking item types in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_privacy(key: DefId) -> () {\n-            desc { |tcx| \"checking privacy in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_intrinsics(key: DefId) -> () {\n-            desc { |tcx| \"checking intrinsics in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking intrinsics in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_liveness(key: DefId) -> () {\n-            desc { |tcx| \"checking liveness of variables in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_impl_wf(key: DefId) -> () {\n-            desc { |tcx| \"checking that impls are well-formed in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"checking that impls are well-formed in {}\", describe_as_module(key, tcx) }\n         }\n \n         query collect_mod_item_types(key: DefId) -> () {\n-            desc { |tcx| \"collecting item types in {}\", key.describe_as_module(tcx) }\n+            desc { |tcx| \"collecting item types in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Caches `CoerceUnsized` kinds for impls on custom types."}]}