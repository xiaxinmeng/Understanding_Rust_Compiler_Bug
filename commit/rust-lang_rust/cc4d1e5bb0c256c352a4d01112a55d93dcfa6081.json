{"sha": "cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGQxZTViYjBjMjU2YzM1MmE0ZDAxMTEyYTU1ZDkzZGNmYTYwODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T06:32:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T06:32:39Z"}, "message": "Auto merge of #57691 - Zoxc:pass-skip, r=petrochenkov\n\nConditionally skip two passes if their related attributes were not found", "tree": {"sha": "cff972c9c27c299c5aef8ebed9e54583aad80115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff972c9c27c299c5aef8ebed9e54583aad80115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "html_url": "https://github.com/rust-lang/rust/commit/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32515566fbf8961ecce60eb71a472962da99e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32515566fbf8961ecce60eb71a472962da99e8c", "html_url": "https://github.com/rust-lang/rust/commit/c32515566fbf8961ecce60eb71a472962da99e8c"}, {"sha": "1bdd2f699beb6249a97aac3e2007401b37b6f273", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bdd2f699beb6249a97aac3e2007401b37b6f273", "html_url": "https://github.com/rust-lang/rust/commit/1bdd2f699beb6249a97aac3e2007401b37b6f273"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "c34a325a47492b3153d3bbd104779d2451692d8f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -2722,6 +2722,7 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n+ \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n "}, {"sha": "f5e5f1f5c0b95a22611e697ed945a7582f2959e0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -1017,6 +1017,10 @@ where\n         krate = ReplaceBodyWithLoop::new(sess).fold_crate(krate);\n     }\n \n+    let (has_proc_macro_decls, has_global_allocator) = time(sess, \"AST validation\", || {\n+        ast_validation::check_crate(sess, &krate)\n+    });\n+\n     // If we're in rustdoc we're always compiling as an rlib, but that'll trip a\n     // bunch of checks in the `modify` function below. For now just skip this\n     // step entirely if we're rustdoc as it's not too useful anyway.\n@@ -1031,23 +1035,26 @@ where\n                 &mut resolver,\n                 krate,\n                 is_proc_macro_crate,\n+                has_proc_macro_decls,\n                 is_test_crate,\n                 num_crate_types,\n                 sess.diagnostic(),\n             )\n         });\n     }\n \n-    // Expand global allocators, which are treated as an in-tree proc macro\n-    krate = time(sess, \"creating allocators\", || {\n-        allocator::expand::modify(\n-            &sess.parse_sess,\n-            &mut resolver,\n-            krate,\n-            crate_name.to_string(),\n-            sess.diagnostic(),\n-        )\n-    });\n+    if has_global_allocator {\n+        // Expand global allocators, which are treated as an in-tree proc macro\n+        krate = time(sess, \"creating allocators\", || {\n+            allocator::expand::modify(\n+                &sess.parse_sess,\n+                &mut resolver,\n+                krate,\n+                crate_name.to_string(),\n+                sess.diagnostic(),\n+            )\n+        });\n+    }\n \n     // Done with macro expansion!\n \n@@ -1065,10 +1072,6 @@ where\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n-    time(sess, \"AST validation\", || {\n-        ast_validation::check_crate(sess, &krate)\n-    });\n-\n     time(sess, \"name resolution\", || {\n         resolver.resolve_crate(&krate);\n     });"}, {"sha": "f5154a033af8da9e3f010137883aacb7c02decf6", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -14,5 +14,6 @@ rustc = { path = \"../librustc\" }\n rustc_mir = { path = \"../librustc_mir\"}\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "3deb2ff8d8a0bb60a84defaddb0037a591b69575", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -15,12 +15,15 @@ use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n+use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n use syntax_pos::Span;\n use errors;\n use errors::Applicability;\n \n struct AstValidator<'a> {\n     session: &'a Session,\n+    has_proc_macro_decls: bool,\n+    has_global_allocator: bool,\n \n     // Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     // Nested `impl Trait` _is_ allowed in associated type position,\n@@ -367,6 +370,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_item(&mut self, item: &'a Item) {\n+        if item.attrs.iter().any(|attr| is_proc_macro_attr(attr)  ) {\n+            self.has_proc_macro_decls = true;\n+        }\n+\n+        if attr::contains_name(&item.attrs, \"global_allocator\") {\n+            self.has_global_allocator = true;\n+        }\n+\n         match item.node {\n             ItemKind::Impl(unsafety, polarity, _, _, Some(..), ref ty, ref impl_items) => {\n                 self.invalid_visibility(&item.vis, None);\n@@ -590,10 +601,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-pub fn check_crate(session: &Session, krate: &Crate) {\n-    visit::walk_crate(&mut AstValidator {\n+pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {\n+    let mut validator = AstValidator {\n         session,\n+        has_proc_macro_decls: false,\n+        has_global_allocator: false,\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n-    }, krate)\n+    };\n+    visit::walk_crate(&mut validator, krate);\n+\n+    (validator.has_proc_macro_decls, validator.has_global_allocator)\n }"}, {"sha": "76605c58a788972bb515bc23724db3399bcd49c3", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -22,6 +22,7 @@ extern crate rustc_data_structures;\n extern crate log;\n #[macro_use]\n extern crate syntax;\n+extern crate syntax_ext;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n "}, {"sha": "46c502965eea82e987231aae6ad1b4867cd55506", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "patch": "@@ -48,6 +48,7 @@ pub fn modify(sess: &ParseSess,\n               resolver: &mut dyn (::syntax::ext::base::Resolver),\n               mut krate: ast::Crate,\n               is_proc_macro_crate: bool,\n+              has_proc_macro_decls: bool,\n               is_test_crate: bool,\n               num_crate_types: usize,\n               handler: &errors::Handler) -> ast::Crate {\n@@ -64,7 +65,9 @@ pub fn modify(sess: &ParseSess,\n             is_proc_macro_crate,\n             is_test_crate,\n         };\n-        visit::walk_crate(&mut collect, &krate);\n+        if has_proc_macro_decls || is_proc_macro_crate {\n+            visit::walk_crate(&mut collect, &krate);\n+        }\n         (collect.derives, collect.attr_macros, collect.bang_macros)\n     };\n \n@@ -85,7 +88,7 @@ pub fn modify(sess: &ParseSess,\n     krate\n }\n \n-fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n+pub fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n     PROC_MACRO_KINDS.iter().any(|kind| attr.check_name(kind))\n }\n "}]}