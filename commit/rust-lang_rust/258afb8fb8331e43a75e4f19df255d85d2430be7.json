{"sha": "258afb8fb8331e43a75e4f19df255d85d2430be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OGFmYjhmYjgzMzFlNDNhNzVlNGYxOWRmMjU1ZDg1ZDI0MzBiZTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T12:05:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T12:05:45Z"}, "message": "Merge #8138\n\n8138: Set up a search scope when searching for mbe macro references r=Veykril a=Veykril\n\nCloses #6184\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "41bafbd0806672f10882aa02d4558e44137beea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bafbd0806672f10882aa02d4558e44137beea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/258afb8fb8331e43a75e4f19df255d85d2430be7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWdmZCRBK7hj4Ov3rIwAAdHIIAAFsABBep/BVefrOQ+mWuN3b\nPRumRjveMQwcFLCSvxhGWHpLb7L6wnHgh2Udzw9R9UjiCCeFNT3voKAUv45nwZeo\nOlebcpnr9VkdsfsrFKxAxnXezHWk9v4aaQfk0PVp+XTv85oP0RlGXYQCFpUS4cUW\nKwHlR8giXF9PMniNguxyr4KQvYzaIyxoiLTO1kIrsmDHx44NKc12MSYqM6eASeC2\nZCBODC+Jk4WAN/77k1Bk4r6AZZLcuxl9I+E6sgSEpBNnKrTtD5tc3sv7LJOgYP7r\n9OWzqKAbe5oXEHLyzYCFwSjIEY4uyWemIqVBpodpLZSaK1ltHJpMmgQBwHG0Xq8=\n=L0Gj\n-----END PGP SIGNATURE-----\n", "payload": "tree 41bafbd0806672f10882aa02d4558e44137beea7\nparent 1efd220f2f844596dd22bfd73a8a0c596354be38\nparent 395183e0b7609dfb0d21f135879dc8f3d8e97e41\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616501145 +0000\ncommitter GitHub <noreply@github.com> 1616501145 +0000\n\nMerge #8138\n\n8138: Set up a search scope when searching for mbe macro references r=Veykril a=Veykril\n\nCloses #6184\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/258afb8fb8331e43a75e4f19df255d85d2430be7", "html_url": "https://github.com/rust-lang/rust/commit/258afb8fb8331e43a75e4f19df255d85d2430be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/258afb8fb8331e43a75e4f19df255d85d2430be7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efd220f2f844596dd22bfd73a8a0c596354be38", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efd220f2f844596dd22bfd73a8a0c596354be38", "html_url": "https://github.com/rust-lang/rust/commit/1efd220f2f844596dd22bfd73a8a0c596354be38"}, {"sha": "395183e0b7609dfb0d21f135879dc8f3d8e97e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/395183e0b7609dfb0d21f135879dc8f3d8e97e41", "html_url": "https://github.com/rust-lang/rust/commit/395183e0b7609dfb0d21f135879dc8f3d8e97e41"}], "stats": {"total": 227, "additions": 147, "deletions": 80}, "files": [{"sha": "5da6a034045879c942de2185572245c44f752a9c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=258afb8fb8331e43a75e4f19df255d85d2430be7", "patch": "@@ -1116,6 +1116,14 @@ impl BuiltinType {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum MacroKind {\n+    Declarative,\n+    ProcMacro,\n+    Derive,\n+    BuiltIn,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) id: MacroDefId,\n@@ -1140,15 +1148,15 @@ impl MacroDef {\n         }\n     }\n \n-    /// Indicate it is a proc-macro\n-    pub fn is_proc_macro(&self) -> bool {\n-        matches!(self.id.kind, MacroDefKind::ProcMacro(..))\n-    }\n-\n-    /// Indicate it is a derive macro\n-    pub fn is_derive_macro(&self) -> bool {\n-        // FIXME: wrong for `ProcMacro`\n-        matches!(self.id.kind, MacroDefKind::ProcMacro(..) | MacroDefKind::BuiltInDerive(..))\n+    pub fn kind(&self) -> MacroKind {\n+        match self.id.kind {\n+            MacroDefKind::Declarative(_) => MacroKind::Declarative,\n+            MacroDefKind::BuiltIn(_, _) => MacroKind::BuiltIn,\n+            MacroDefKind::BuiltInDerive(_, _) => MacroKind::Derive,\n+            MacroDefKind::BuiltInEager(_, _) => MacroKind::BuiltIn,\n+            // FIXME might be a derive\n+            MacroDefKind::ProcMacro(_, _) => MacroKind::ProcMacro,\n+        }\n     }\n }\n "}, {"sha": "95ed8a0457e1342b543ed4b0c81dfe72d732cfed", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=258afb8fb8331e43a75e4f19df255d85d2430be7", "patch": "@@ -1294,4 +1294,34 @@ pub use level1::Foo;\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_decl_macro_references() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib\n+#[macro_use]\n+mod qux;\n+mod bar;\n+\n+pub use self::foo;\n+//- /qux.rs\n+#[macro_export]\n+macro_rules! foo$0 {\n+    () => {struct Foo;};\n+}\n+//- /bar.rs\n+foo!();\n+//- /other.rs crate:other deps:lib new_source_root:\n+lib::foo!();\n+\"#,\n+            expect![[r#\"\n+                foo Macro FileId(1) 0..61 29..32\n+\n+                FileId(0) 46..49\n+                FileId(2) 0..3\n+                FileId(3) 5..8\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "b1505c74b4ee968a971bc6d3ae1e340e3184d50d", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=258afb8fb8331e43a75e4f19df255d85d2430be7", "patch": "@@ -246,7 +246,8 @@ fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     let mut result = FxHashSet::default();\n     ctx.scope.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n-            if mac.is_derive_macro() {\n+            // FIXME kind() doesn't check whether proc-macro is a derive\n+            if mac.kind() == hir::MacroKind::Derive || mac.kind() == hir::MacroKind::ProcMacro {\n                 result.insert(name.to_string());\n             }\n         }"}, {"sha": "3634b2b2677fa2c6cdc594e3f577c31b4fbc25b3", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 98, "deletions": 70, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258afb8fb8331e43a75e4f19df255d85d2430be7/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=258afb8fb8331e43a75e4f19df255d85d2430be7", "patch": "@@ -7,7 +7,7 @@\n use std::{convert::TryInto, mem};\n \n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n-use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n+use hir::{DefWithBody, HasAttrs, HasSource, InFile, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n@@ -78,6 +78,76 @@ impl SearchScope {\n         SearchScope { entries }\n     }\n \n+    fn crate_graph(db: &RootDatabase) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+\n+        let graph = db.crate_graph();\n+        for krate in graph.iter() {\n+            let root_file = graph[krate].root_file_id;\n+            let source_root_id = db.file_source_root(root_file);\n+            let source_root = db.source_root(source_root_id);\n+            entries.extend(source_root.iter().map(|id| (id, None)));\n+        }\n+        SearchScope { entries }\n+    }\n+\n+    fn reverse_dependencies(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+        for rev_dep in of.transitive_reverse_dependencies(db) {\n+            let root_file = rev_dep.root_file(db);\n+            let source_root_id = db.file_source_root(root_file);\n+            let source_root = db.source_root(source_root_id);\n+            entries.extend(source_root.iter().map(|id| (id, None)));\n+        }\n+        SearchScope { entries }\n+    }\n+\n+    fn krate(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n+        let root_file = of.root_file(db);\n+        let source_root_id = db.file_source_root(root_file);\n+        let source_root = db.source_root(source_root_id);\n+        SearchScope {\n+            entries: source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>(),\n+        }\n+    }\n+\n+    fn module(db: &RootDatabase, module: hir::Module) -> SearchScope {\n+        let mut entries = FxHashMap::default();\n+\n+        let mut to_visit = vec![module];\n+        let mut is_first = true;\n+        while let Some(module) = to_visit.pop() {\n+            let src = module.definition_source(db);\n+            let file_id = src.file_id.original_file(db);\n+            match src.value {\n+                ModuleSource::Module(m) => {\n+                    if is_first {\n+                        let range = Some(m.syntax().text_range());\n+                        entries.insert(file_id, range);\n+                    } else {\n+                        // We have already added the enclosing file to the search scope,\n+                        // so do nothing.\n+                    }\n+                }\n+                ModuleSource::BlockExpr(b) => {\n+                    if is_first {\n+                        let range = Some(b.syntax().text_range());\n+                        entries.insert(file_id, range);\n+                    } else {\n+                        // We have already added the enclosing file to the search scope,\n+                        // so do nothing.\n+                    }\n+                }\n+                ModuleSource::SourceFile(_) => {\n+                    entries.insert(file_id, None);\n+                }\n+            };\n+            is_first = false;\n+            to_visit.extend(module.children(db));\n+        }\n+        SearchScope { entries }\n+    }\n+\n     pub fn empty() -> SearchScope {\n         SearchScope::new(FxHashMap::default())\n     }\n@@ -140,34 +210,26 @@ impl Definition {\n         let _p = profile::span(\"search_scope\");\n \n         if let Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) = self {\n-            let mut res = FxHashMap::default();\n-\n-            let graph = db.crate_graph();\n-            for krate in graph.iter() {\n-                let root_file = graph[krate].root_file_id;\n-                let source_root_id = db.file_source_root(root_file);\n-                let source_root = db.source_root(source_root_id);\n-                res.extend(source_root.iter().map(|id| (id, None)));\n-            }\n-            return SearchScope::new(res);\n+            return SearchScope::crate_graph(db);\n         }\n \n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),\n         };\n-        let module_src = module.definition_source(db);\n-        let file_id = module_src.file_id.original_file(db);\n+        let InFile { file_id, value: module_source } = module.definition_source(db);\n+        let file_id = file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n                 DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n                 DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n             };\n-            let mut res = FxHashMap::default();\n-            res.insert(file_id, range);\n-            return SearchScope::new(res);\n+            return match range {\n+                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+                None => SearchScope::single_file(file_id),\n+            };\n         }\n \n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n@@ -198,73 +260,39 @@ impl Definition {\n                     it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n             };\n-            let mut res = FxHashMap::default();\n-            res.insert(file_id, range);\n-            return SearchScope::new(res);\n+            return match range {\n+                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+                None => SearchScope::single_file(file_id),\n+            };\n         }\n \n-        let vis = self.visibility(db);\n-\n-        if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n-            let module: Module = module.into();\n-            let mut res = FxHashMap::default();\n-\n-            let mut to_visit = vec![module];\n-            let mut is_first = true;\n-            while let Some(module) = to_visit.pop() {\n-                let src = module.definition_source(db);\n-                let file_id = src.file_id.original_file(db);\n-                match src.value {\n-                    ModuleSource::Module(m) => {\n-                        if is_first {\n-                            let range = Some(m.syntax().text_range());\n-                            res.insert(file_id, range);\n-                        } else {\n-                            // We have already added the enclosing file to the search scope,\n-                            // so do nothing.\n-                        }\n-                    }\n-                    ModuleSource::BlockExpr(b) => {\n-                        if is_first {\n-                            let range = Some(b.syntax().text_range());\n-                            res.insert(file_id, range);\n-                        } else {\n-                            // We have already added the enclosing file to the search scope,\n-                            // so do nothing.\n-                        }\n-                    }\n-                    ModuleSource::SourceFile(_) => {\n-                        res.insert(file_id, None);\n-                    }\n+        if let Definition::Macro(macro_def) = self {\n+            if macro_def.kind() == hir::MacroKind::Declarative {\n+                return if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n+                    SearchScope::reverse_dependencies(db, module.krate())\n+                } else {\n+                    SearchScope::krate(db, module.krate())\n                 };\n-                is_first = false;\n-                to_visit.extend(module.children(db));\n             }\n-\n-            return SearchScope::new(res);\n         }\n \n+        let vis = self.visibility(db);\n         if let Some(Visibility::Public) = vis {\n-            let mut res = FxHashMap::default();\n-\n-            let krate = module.krate();\n-            for rev_dep in krate.transitive_reverse_dependencies(db) {\n-                let root_file = rev_dep.root_file(db);\n-                let source_root_id = db.file_source_root(root_file);\n-                let source_root = db.source_root(source_root_id);\n-                res.extend(source_root.iter().map(|id| (id, None)));\n-            }\n-            return SearchScope::new(res);\n+            return SearchScope::reverse_dependencies(db, module.krate());\n+        }\n+        if let Some(Visibility::Module(module)) = vis {\n+            return SearchScope::module(db, module.into());\n         }\n \n-        let mut res = FxHashMap::default();\n-        let range = match module_src.value {\n+        let range = match module_source {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::BlockExpr(b) => Some(b.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        res.insert(file_id, range);\n-        SearchScope::new(res)\n+        match range {\n+            Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            None => SearchScope::single_file(file_id),\n+        }\n     }\n \n     pub fn usages<'a>(&'a self, sema: &'a Semantics<RootDatabase>) -> FindUsages<'a> {"}]}