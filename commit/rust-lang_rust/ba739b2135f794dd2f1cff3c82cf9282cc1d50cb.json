{"sha": "ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzM5YjIxMzVmNzk0ZGQyZjFjZmYzYzgyY2Y5MjgyY2MxZDUwY2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-19T01:40:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-19T02:27:31Z"}, "message": "librustc: Convert `~fn()` to `proc()` everywhere.", "tree": {"sha": "b8901331cf3e7dabaf73442e4c5d98223010819a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8901331cf3e7dabaf73442e4c5d98223010819a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "html_url": "https://github.com/rust-lang/rust/commit/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f621bff432ead333cdfa7ba315246cad663d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f621bff432ead333cdfa7ba315246cad663d59", "html_url": "https://github.com/rust-lang/rust/commit/77f621bff432ead333cdfa7ba315246cad663d59"}], "stats": {"total": 202, "additions": 57, "deletions": 145}, "files": [{"sha": "2276d0052a643956d297b9d39653be2cb77e77ec", "filename": "doc/po/ja/tutorial-tasks.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Fja%2Ftutorial-tasks.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Fja%2Ftutorial-tasks.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Ftutorial-tasks.md.po?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -213,7 +213,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial-tasks.md:102\n msgid \"\"\n-\"The `spawn` function has a very simple type signature: `fn spawn(f: ~fn())`. \"\n+\"The `spawn` function has a very simple type signature: `fn spawn(f: proc())`. \"\n \"Because it accepts only owned closures, and owned closures contain only \"\n \"owned data, `spawn` can safely move the entire closure and all its \"\n \"associated state into an entirely different task for execution. Like any \""}, {"sha": "2b4e6e2c148cbd373c1e7cf38660834cf4c562d4", "filename": "doc/po/ja/tutorial.md.po", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Fja%2Ftutorial.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Fja%2Ftutorial.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Ftutorial.md.po?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -3509,13 +3509,13 @@ msgstr \"## \u6240\u6709\u30af\u30ed\u30fc\u30b8\u30e3\"\n #. type: Plain text\n #: doc/tutorial.md:1510\n msgid \"\"\n-\"Owned closures, written `~fn` in analogy to the `~` pointer type, hold on to \"\n+\"Owned closures, written `proc`, hold on to \"\n \"things that can safely be sent between processes. They copy the values they \"\n \"close over, much like managed closures, but they also own them: that is, no \"\n \"other code can access them. Owned closures are used in concurrent code, \"\n \"particularly for spawning [tasks][tasks].\"\n msgstr \"\"\n-\"`~` \u30dd\u30a4\u30f3\u30bf\u578b\u3068\u540c\u69d8\u306b `~fn` \u578b  \u3067\u66f8\u304d\u8868\u3055\u308c\u308b\u6240\u6709\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u5b89\u5168\u306b\u30d7\u30ed\u30bb\u30b9\"\n+\"`~` `proc` \u3067\u66f8\u304d\u8868\u3055\u308c\u308b\u6240\u6709\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u5b89\u5168\u306b\u30d7\u30ed\u30bb\u30b9\"\n \"\u9593\u3067\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6240\u6709\u30af\u30ed\u30fc\u3058\u3083\u306f\u30de\u30cd\u30fc\u30b8\u30c9\u30af\u30ed\u30fc\u30b8\u30e3\u3068\u5168\u304f\u540c\u3058\u3088\"\n \"\u3046\u306b\u9589\u3058\u8fbc\u3081\u308b\u5024\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u304c\u3001\u5024\u3092\u6240\u6709\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u4ed6\u306e\u30b3\u30fc\u30c9\u306f\u9589\u3058\u8fbc\"\n \"\u3081\u3089\u308c\u305f\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u6240\u6709\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30e0\u3001\u7279\u306b \"\n@@ -3666,11 +3666,11 @@ msgstr \"\"\n #: doc/tutorial.md:1582\n msgid \"\"\n \"`do` is a convenient way to create tasks with the `task::spawn` function.  \"\n-\"`spawn` has the signature `spawn(fn: ~fn())`. In other words, it is a \"\n+\"`spawn` has the signature `spawn(fn: proc())`. In other words, it is a \"\n \"function that takes an owned closure that takes no arguments.\"\n msgstr \"\"\n \"`task::spawn` \u95a2\u6570\u3092\u7528\u3044\u3066\u30bf\u30b9\u30af\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u3001 `do` \u3092\u7528\u3044\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\"\n-\"`spawn` \u306f\u3001 `spawn(fn: ~fn())` \u3068\u3044\u3046\u65b9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\"\n+\"`spawn` \u306f\u3001 `spawn(fn: proc())` \u3068\u3044\u3046\u65b9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\"\n \"`spawn` \u306f\u300c\u5f15\u6570\u3092\u3068\u3089\u306a\u3044\u6240\u6709\u30af\u30ed\u30fc\u30b8\u30e3\u300d\u3092\u5f15\u6570\u3068\u3057\u3066\u3068\u308b\u95a2\u6570\u3068\u3044\u3046\u3053\u3068\u3067\"\n \"\u3059\u3002\"\n "}, {"sha": "7a15fe196923f7070e321ed0d88ecc88fe380b04", "filename": "doc/po/tutorial-tasks.md.pot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Ftutorial-tasks.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Ftutorial-tasks.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial-tasks.md.pot?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -213,7 +213,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial-tasks.md:102\n msgid \"\"\n-\"The `spawn` function has a very simple type signature: `fn spawn(f: ~fn())`. \"\n+\"The `spawn` function has a very simple type signature: `fn spawn(f: proc())`. \"\n \"Because it accepts only owned closures, and owned closures contain only \"\n \"owned data, `spawn` can safely move the entire closure and all its \"\n \"associated state into an entirely different task for execution. Like any \""}, {"sha": "86937652da93b9de24feeb4fd3c83263c1210d21", "filename": "doc/po/tutorial.md.pot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Ftutorial.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Fpo%2Ftutorial.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial.md.pot?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -2683,7 +2683,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1510\n msgid \"\"\n-\"Owned closures, written `~fn` in analogy to the `~` pointer type, hold on to \"\n+\"Owned closures, written `proc`, hold on to \"\n \"things that can safely be sent between processes. They copy the values they \"\n \"close over, much like managed closures, but they also own them: that is, no \"\n \"other code can access them. Owned closures are used in concurrent code, \"\n@@ -2808,7 +2808,7 @@ msgstr \"\"\n #: doc/tutorial.md:1582\n msgid \"\"\n \"`do` is a convenient way to create tasks with the `task::spawn` function.  \"\n-\"`spawn` has the signature `spawn(fn: ~fn())`. In other words, it is a \"\n+\"`spawn` has the signature `spawn(fn: proc())`. In other words, it is a \"\n \"function that takes an owned closure that takes no arguments.\"\n msgstr \"\"\n "}, {"sha": "d357e3b335ebe0ef6b1acfc1c60791f116282b0a", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -91,7 +91,7 @@ _owned types_. The language leaves the implementation details to the standard\n library.\n \n The `spawn` function has a very simple type signature: `fn spawn(f:\n-~fn())`. Because it accepts only owned closures, and owned closures\n+proc())`. Because it accepts only owned closures, and owned closures\n contain only owned data, `spawn` can safely move the entire closure\n and all its associated state into an entirely different task for\n execution. Like any closure, the function passed to `spawn` may capture"}, {"sha": "313d36e38bf7e983d21e23063a4b1899971948ec", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1409,7 +1409,7 @@ pervasively in Rust code.\n \n ## Owned closures\n \n-Owned closures, written `~fn` in analogy to the `~` pointer type,\n+Owned closures, written `proc`,\n hold on to things that can safely be sent between\n processes. They copy the values they close over, much like managed\n closures, but they also own them: that is, no other code can access\n@@ -1484,7 +1484,7 @@ parentheses, where it looks more like a typical block of\n code.\n \n `do` is a convenient way to create tasks with the `task::spawn`\n-function.  `spawn` has the signature `spawn(fn: ~fn())`. In other\n+function.  `spawn` has the signature `spawn(fn: proc())`. In other\n words, it is a function that takes an owned closure that takes no\n arguments.\n "}, {"sha": "64fb954764a83efed2d3b8c1dbef0987f8ae056e", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -97,7 +97,7 @@ impl<T> TaskPool<T> {\n \n #[test]\n fn test_task_pool() {\n-    let f: proc() -> proc(uint) -> uint = || {\n+    let f: &fn() -> proc(uint) -> uint = || {\n         let g: proc(uint) -> uint = |i| i;\n         g\n     };"}, {"sha": "05f708355b0e75f8e7427811ae1a857d8bce9e20", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1101,7 +1101,7 @@ mod test {\n             let handle2 = Cell::new(sched2.make_handle());\n             let tasksFriendHandle = Cell::new(sched2.make_handle());\n \n-            let on_exit: ~fn(UnwindResult) = |exit_status| {\n+            let on_exit: proc(UnwindResult) = |exit_status| {\n                 handle1.take().send(Shutdown);\n                 handle2.take().send(Shutdown);\n                 assert!(exit_status.is_success());\n@@ -1115,7 +1115,7 @@ mod test {\n                 }\n             }\n \n-            let test_function: ~fn() = || {\n+            let test_function: proc() = || {\n                 let io = unsafe { local_io() };\n                 let addr = next_test_ip4();\n                 let maybe_socket = io.udp_bind(addr);"}, {"sha": "73ecd33bc7ca92c6b71ca7a908cdc2e7dea74c4b", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -53,7 +53,7 @@ fn grandchild_group(num_tasks: uint) {\n     // Master grandchild task exits early.\n }\n \n-fn spawn_supervised_blocking(myname: &str, f: ~fn()) {\n+fn spawn_supervised_blocking(myname: &str, f: proc()) {\n     let mut builder = task::task();\n     let res = builder.future_result();\n     builder.supervised();"}, {"sha": "42dee384116c97cbf6dff28c8772de033b7eeb74", "filename": "src/test/compile-fail/borrowck-call-sendfn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -11,7 +11,7 @@\n // xfail-test #2978\n \n struct Foo {\n-    f: ~fn()\n+    f: proc()\n }\n \n fn call(x: @Foo) {"}, {"sha": "aa50f9ac3fee0df2d85c9e3c20eea2604e1508a5", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1,13 +1,8 @@\n pub fn main() {\n-    let foo = ~3;\n-    let _pfoo = &foo;\n-    let _f: ~fn() -> int = || *foo + 5;\n-    //~^ ERROR cannot move `foo`\n-\n     // FIXME(#2202) - Due to the way that borrowck treats closures,\n     // you get two error reports here.\n     let bar = ~3;\n     let _g = || { //~ ERROR capture of moved value\n-        let _h: ~fn() -> int = || *bar; //~ ERROR capture of moved value\n+        let _h: proc() -> int = || *bar; //~ ERROR capture of moved value\n     };\n }"}, {"sha": "b6ad3ed95a4b4745eca0d9c1aa4d2b9ef0f8fc39", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1,4 +1,4 @@\n-fn call_f(f: ~fn:Send() -> int) -> int {\n+fn call_f(f: proc() -> int) -> int {\n     f()\n }\n "}, {"sha": "00eb31485b9d7af4bc367fd95a9e7e89187d2a13", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct X {\n-    field: ~fn:Send(),\n+    field: &'static fn:Send(),\n }\n \n-fn foo(blk: ~fn:()) -> X {\n+fn foo(blk: &'static fn:()) -> X {\n     return X { field: blk }; //~ ERROR expected bounds `Send` but found no bounds\n }\n "}, {"sha": "308eb637cd0b98f9de12cd30f0d46ed282ed5589", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -14,7 +14,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n-    let _: ~fn() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "bfef15ea1731c35e866258a0c62bed21e3e222e4", "filename": "src/test/compile-fail/kindck-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -47,7 +47,7 @@ fn test<'a,T,U:Send>(_: &'a int) {\n \n     // but closure and object types can have lifetime bounds which make\n     // them not ok (FIXME #5121)\n-    // assert_send::<~fn:'a()>(); // ERROR does not fulfill `Send`\n+    // assert_send::<proc:'a()>(); // ERROR does not fulfill `Send`\n     // assert_send::<~Dummy:'a>(); // ERROR does not fulfill `Send`\n \n     // unsafe ptrs are ok unless they point at unsendable things"}, {"sha": "57c1cb5ecc640ea2ace4ef731c1749d68d4617cf", "filename": "src/test/compile-fail/moves-sru-moved-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1,4 +1,4 @@\n-type Noncopyable = ~fn();\n+type Noncopyable = proc();\n \n struct Foo {\n     copied: int,"}, {"sha": "cc40fb6b8d88eea28edd8b844dde366cdb9bd7c0", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-heap.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-heap.rs?ref=77f621bff432ead333cdfa7ba315246cad663d59", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing guarantees provided by once functions.\n-// This program would segfault if it were legal.\n-\n-extern mod extra;\n-use extra::arc;\n-use std::util;\n-\n-fn foo(blk: ~fn()) {\n-    blk();\n-    blk();\n-}\n-\n-fn main() {\n-    let x = arc::Arc::new(true);\n-    do foo {\n-        assert!(*x.get());\n-        util::ignore(x); //~ ERROR cannot move out of captured outer variable\n-    }\n-}"}, {"sha": "a743ff81b301a34c2008cae5fced5e88967b8810", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -11,7 +11,7 @@\n \n // check that the &int here does not cause us to think that `foo`\n // contains region pointers\n-struct foo(~fn(x: &int));\n+struct foo(proc(x: &int));\n \n fn take_foo(x: foo<'static>) {} //~ ERROR wrong number of lifetime parameters\n "}, {"sha": "da9220322dd74f2776c96fb594782acd1c2a781e", "filename": "src/test/debug-info/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -51,7 +51,7 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    let unique_closure: ~fn(int) = |x| {\n+    let unique_closure: proc(int) = |x| {\n         zzz();\n         sentinel();\n "}, {"sha": "664e377c9fbe99e4692c147f84ae53c7dfc80299", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -39,7 +39,7 @@ fn main() {\n \n     let owned = ~5;\n \n-    let closure: ~fn() = || {\n+    let closure: proc() = || {\n         zzz();\n         do_something(&constant, &a_struct.a, owned);\n     };"}, {"sha": "ffa6f03909b023a07eb3fabf491b41c96934b943", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -12,5 +12,5 @@\n \n fn from_foreign_fn(_x: fn()) { }\n fn from_stack_closure(_x: ||) { }\n-fn from_unique_closure(_x: ~fn()) { }\n+fn from_unique_closure(_x: proc()) { }\n fn main() { }"}, {"sha": "b28a2a6f1f0323eb822a9096f52b16823e63fc93", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -18,7 +18,7 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x: @~fn() = @(|| {\n+    let x: @proc() = @(|| {\n         error!(\"{:?}\", y.clone());\n     });\n     failfn();"}, {"sha": "5aa28258792e682f963e1fdbbe1aedc415d105bf", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -10,7 +10,7 @@\n \n extern mod extra;\n \n-fn asSendfn( f : ~fn()->uint ) -> uint {\n+fn asSendfn( f : proc()->uint ) -> uint {\n    return f();\n }\n "}, {"sha": "2f186cc3fba304503d00fd249f62e18c501bae4e", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -1,5 +1,5 @@\n pub fn main() {\n     let bar = ~3;\n-    let h: ~fn() -> int = || *bar;\n+    let h: proc() -> int = || *bar;\n     assert_eq!(h(), 3);\n }"}, {"sha": "c6227fdcc5effe196ac79f056ff4b0b09e85d468", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -13,11 +13,11 @@ use std::ptr;\n pub fn main() {\n     let x = ~3;\n     let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let snd_move: ~fn() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n+    let snd_move: proc() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n     assert_eq!(snd_move(), y);\n \n     let x = ~4;\n     let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let lam_move: ~fn() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n+    let lam_move: proc() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n     assert_eq!(lam_move(), y);\n }"}, {"sha": "cceb0f353fb3a60cee3e9e23b075883929a3f2de", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -19,7 +19,7 @@ struct Pair {\n pub fn main() {\n     let z = ~Pair { a : 10, b : 12};\n \n-    let f: ~fn() = || {\n+    let f: proc() = || {\n         assert_eq!(z.a, 10);\n         assert_eq!(z.b, 12);\n     };"}, {"sha": "16c7eaf1037fddc28a7831047214f5bbf11cc59b", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -10,7 +10,7 @@\n \n use std::comm;\n \n-fn foo(blk: ~fn:Send()) {\n+fn foo(blk: proc()) {\n     blk();\n }\n "}, {"sha": "023381949a3577f1316a1e4ce9b3574f0b94b868", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -15,8 +15,8 @@ extern mod extra;\n  *\n  * The hash should concentrate entropy in the lower bits.\n  */\n-type HashFn<K> = ~fn(K) -> uint;\n-type EqFn<K> = ~fn(K, K) -> bool;\n+type HashFn<K> = proc(K) -> uint;\n+type EqFn<K> = proc(K, K) -> bool;\n \n struct LM { resize_at: uint, size: uint }\n "}, {"sha": "0aaaa58fdd257fd337d306e8519f314c879f067a", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n static generations: uint = 1024+256+128+49;\n \n-fn child_no(x: uint) -> ~fn() {\n+fn child_no(x: uint) -> proc() {\n      || {\n         if x < generations {\n             task::spawn(child_no(x+1));"}, {"sha": "aeb4aad7d8315e266061618347198320de149313", "filename": "src/test/run-pass/issue-2190.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n type t = {\n-    f: ~fn()\n+    f: proc()\n };\n \n pub fn main() {"}, {"sha": "0b8fcdfbd84946ac675406176ba16e37c6cff70b", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -17,7 +17,7 @@ use std::path::{Path};\n use std::path;\n use std::result;\n \n-type rsrc_loader = ~fn(path: &Path) -> result::Result<~str, ~str>;\n+type rsrc_loader = proc(path: &Path) -> result::Result<~str, ~str>;\n \n fn tester()\n {"}, {"sha": "b283ba67d59bd13604d451493e2d5f96e40405e9", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -4,7 +4,7 @@ use std::comm::Chan;\n use std::task;\n \n type RingBuffer = ~[f64];\n-type SamplesFn = ~fn(samples: &RingBuffer);\n+type SamplesFn = proc(samples: &RingBuffer);\n \n enum Msg\n {"}, {"sha": "98d2ca5d9424e20874a4b0802af7065a8532fb58", "filename": "src/test/run-pass/issue-6141-leaking-owned-fn.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs?ref=77f621bff432ead333cdfa7ba315246cad663d59", "patch": "@@ -1,8 +0,0 @@\n-fn run(f: &fn()) {\n-    f()\n-}\n-\n-pub fn main() {\n-    let f: ~fn() = || ();\n-    run(f);\n-}"}, {"sha": "e5844785a50f96c41729b988cec46ad227fa350f", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -11,7 +11,7 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn unique() -> ~fn() { return || (); }\n+fn unique() -> proc() { return || (); }\n \n pub fn main() {\n }"}, {"sha": "ccf1997498be11e9ee9491d6ffd5806086bed5fe", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -11,7 +11,7 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn unique() -> ~fn() { || () }\n+fn unique() -> proc() { || () }\n \n pub fn main() {\n }"}, {"sha": "5dd8ea96d3738a405a35221774aaad7ecff4c0e5", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -69,6 +69,6 @@ pub fn main() {\n     assert_eq!(q.y, !(p.y));\n \n     // Issue #1733\n-    let result: ~fn(int) = |_|();\n+    let result: proc(int) = |_|();\n     result(p[true]);\n }"}, {"sha": "d077db69c2a8c24ffe686e43e43e40343ea0d06e", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f621bff432ead333cdfa7ba315246cad663d59/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=77f621bff432ead333cdfa7ba315246cad663d59", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-use std::task;\n-\n-pub fn main() { test05(); }\n-\n-#[deriving(Clone)]\n-struct Pair<A,B> {\n-    a: A,\n-    b: B,\n-}\n-\n-fn make_generic_record<A,B>(a: A, b: B) -> Pair<A,B> {\n-    return Pair {a: a, b: b};\n-}\n-\n-fn test05_start(f: &~fn(v: f64, v: ~str) -> Pair<f64, ~str>) {\n-    let p = (*f)(22.22, ~\"Hi\");\n-    info!(\"{:?}\", p.clone());\n-    assert!(p.a == 22.22);\n-    assert!(p.b == ~\"Hi\");\n-\n-    let q = (*f)(44.44, ~\"Ho\");\n-    info!(\"{:?}\", q.clone());\n-    assert!(q.a == 44.44);\n-    assert!(q.b == ~\"Ho\");\n-}\n-\n-fn spawn<A,B>(f: extern fn(&~fn(A,B)->Pair<A,B>)) {\n-    let arg: ~fn(A, B) -> Pair<A,B> = |a, b| make_generic_record(a, b);\n-    task::spawn(|| f(&arg));\n-}\n-\n-fn test05() {\n-    spawn::<f64,~str>(test05_start);\n-}"}, {"sha": "91bc8345845d96a0f258626dd2d9072dadd22924", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -13,13 +13,13 @@ use std::task;\n \n pub fn main() { test05(); }\n \n-fn test05_start(f: ~fn(int)) {\n+fn test05_start(f: proc(int)) {\n     f(22);\n }\n \n fn test05() {\n     let three = ~3;\n-    let fn_to_send: ~fn(int) = |n| {\n+    let fn_to_send: proc(int) = |n| {\n         error!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };"}, {"sha": "986a9a8c49c31b85b368e3d3d9d14808062ac005", "filename": "src/test/run-pass/swap-overlapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -34,8 +34,8 @@ pub enum TestName {\n }\n \n pub enum TestFn {\n-    DynTestFn(~fn()),\n-    DynBenchFn(~fn(&mut int))\n+    DynTestFn(proc()),\n+    DynBenchFn(proc(&mut int))\n }\n \n pub struct TestDesc {"}, {"sha": "395d6b0b51ad2559da63f417a2d5899670216393", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -44,7 +44,7 @@ fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n     }\n }\n \n-fn joinable(f: ~fn()) -> Port<bool> {\n+fn joinable(f: proc()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: &fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\","}, {"sha": "a10753451400a6cc9e4c3509f468c9794d1b3a40", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -40,7 +40,7 @@ fn test_tempdir() {\n \n fn test_rm_tempdir() {\n     let (rd, wr) = stream();\n-    let f: ~fn() = || {\n+    let f: proc() = || {\n         let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n         wr.send(tmp.path().clone());\n         fail!(\"fail to unwind past `tmp`\");\n@@ -52,7 +52,7 @@ fn test_rm_tempdir() {\n     let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n     let path = tmp.path().clone();\n     let cell = Cell::new(tmp);\n-    let f: ~fn() = || {\n+    let f: proc() = || {\n         let _tmp = cell.take();\n         fail!(\"fail to unwind past `tmp`\");\n     };\n@@ -61,7 +61,7 @@ fn test_rm_tempdir() {\n \n     let path;\n     {\n-        let f: ~fn() -> TempDir = || {\n+        let f: proc() -> TempDir = || {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         let tmp = task::try(f).expect(\"test_rm_tmdir\");"}, {"sha": "ada3607beaef577d5766b8488b4003355fc04541", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -19,11 +19,11 @@ enum maybe_pointy {\n \n struct Pointy {\n     a : maybe_pointy,\n-    d : ~fn() -> uint,\n+    d : proc() -> uint,\n }\n \n-fn make_uniq_closure<A:Send>(a: A) -> ~fn() -> uint {\n-    let result: ~fn() -> uint = || ptr::to_unsafe_ptr(&a) as uint;\n+fn make_uniq_closure<A:Send>(a: A) -> proc() -> uint {\n+    let result: proc() -> uint = || ptr::to_unsafe_ptr(&a) as uint;\n     result\n }\n "}, {"sha": "fc58374d46d6128cdb2e7ef47bacbac780c5f1ef", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba739b2135f794dd2f1cff3c82cf9282cc1d50cb/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=ba739b2135f794dd2f1cff3c82cf9282cc1d50cb", "patch": "@@ -18,7 +18,7 @@ enum maybe_pointy {\n struct Pointy {\n     a : maybe_pointy,\n     c : ~int,\n-    d : ~fn()->(),\n+    d : proc()->(),\n }\n \n fn empty_pointy() -> @mut Pointy {"}]}