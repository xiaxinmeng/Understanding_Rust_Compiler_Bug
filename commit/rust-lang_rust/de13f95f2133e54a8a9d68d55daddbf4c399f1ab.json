{"sha": "de13f95f2133e54a8a9d68d55daddbf4c399f1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTNmOTVmMjEzM2U1NGE4YTlkNjhkNTVkYWRkYmY0YzM5OWYxYWI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-21T01:15:52Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-21T01:15:52Z"}, "message": "Rollup merge of #24516 - steveklabnik:gh22621, r=alexcrichton\n\nFixes #22621", "tree": {"sha": "943dbd7f22473c75661f9d8706c645c38d4876fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943dbd7f22473c75661f9d8706c645c38d4876fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de13f95f2133e54a8a9d68d55daddbf4c399f1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de13f95f2133e54a8a9d68d55daddbf4c399f1ab", "html_url": "https://github.com/rust-lang/rust/commit/de13f95f2133e54a8a9d68d55daddbf4c399f1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de13f95f2133e54a8a9d68d55daddbf4c399f1ab/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75998b569ae7ac79952a798f04bc7eb9487e2896", "url": "https://api.github.com/repos/rust-lang/rust/commits/75998b569ae7ac79952a798f04bc7eb9487e2896", "html_url": "https://github.com/rust-lang/rust/commit/75998b569ae7ac79952a798f04bc7eb9487e2896"}, {"sha": "1e29abec59a0610eb87ab9222c9efa35c6c00f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e29abec59a0610eb87ab9222c9efa35c6c00f19", "html_url": "https://github.com/rust-lang/rust/commit/1e29abec59a0610eb87ab9222c9efa35c6c00f19"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "1d4452754baa202886f2ee617e159a0424ff63e9", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/de13f95f2133e54a8a9d68d55daddbf4c399f1ab/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/de13f95f2133e54a8a9d68d55daddbf4c399f1ab/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=de13f95f2133e54a8a9d68d55daddbf4c399f1ab", "patch": "@@ -653,6 +653,116 @@ macro_rules! bct {\n Exercise: use macros to reduce duplication in the above definition of the\n `bct!` macro.\n \n+# Common macros\n+\n+Here are some common macros you\u2019ll see in Rust code.\n+\n+## panic!\n+\n+This macro causes the current thread to panic. You can give it a message\n+to panic with:\n+\n+```rust,no_run\n+panic!(\"oh no!\");\n+```\n+\n+## vec!\n+\n+The `vec!` macro is used throughout the book, so you\u2019ve probably seen it\n+already. It creates `Vec<T>`s with ease:\n+\n+```rust\n+let v = vec![1, 2, 3, 4, 5];\n+```\n+\n+It also lets you make vectors with repeating values. For example, a hundred\n+zeroes:\n+\n+```rust\n+let v = vec![0; 100];\n+```\n+\n+## assert! and assert_eq!\n+\n+These two macros are used in tests. `assert!` takes a boolean, and `assert_eq!`\n+takes two values and compares them. Truth passes, success `panic!`s. Like\n+this:\n+\n+```rust,no_run\n+// A-ok!\n+\n+assert!(true);\n+assert_eq!(5, 3 + 2);\n+\n+// nope :(\n+\n+assert!(5 < 3);\n+assert_eq!(5, 3);\n+```\n+## try!\n+\n+`try!` is used for error handling. It takes something that can return a\n+`Result<T, E>`, and gives `T` if it\u2019s a `Ok<T>`, and `return`s with the\n+`Err(E)` if it\u2019s that. Like this:\n+\n+```rust,no_run\n+use std::fs::File;\n+\n+fn foo() -> std::io::Result<()> {\n+    let f = try!(File::create(\"foo.txt\"));\n+\n+    Ok(())\n+}\n+```\n+\n+This is cleaner than doing this:\n+\n+```rust,no_run\n+use std::fs::File;\n+\n+fn foo() -> std::io::Result<()> {\n+    let f = File::create(\"foo.txt\");\n+\n+    let f = match f {\n+        Ok(t) => t,\n+        Err(e) => return Err(e),\n+    };\n+\n+    Ok(())\n+}\n+```\n+\n+## unreachable!\n+\n+This macro is used when you think some code should never execute:\n+\n+```rust\n+if false {\n+    unreachable!();\n+}\n+```\n+\n+Sometimes, the compiler may make you have a different branch that you know\n+will never, ever run. In these cases, use this macro, so that if you end\n+up wrong, you\u2019ll get a `panic!` about it.\n+\n+```rust\n+let x: Option<i32> = None;\n+\n+match x {\n+    Some(_) => unreachable!(),\n+    None => println!(\"I know x is None!\"),\n+}\n+```\n+\n+## unimplemented!\n+\n+The `unimplemented!` macro can be used when you\u2019re trying to get your functions\n+to typecheck, and don\u2019t want to worry about writing out the body of the\n+function. One example of this situation is implementing a trait with multiple\n+required methods, where you want to tackle one at a time. Define the others\n+as `unimplemented!` until you\u2019re ready to write them.\n+\n # Procedural macros\n \n If Rust's macro system can't do what you need, you may want to write a"}]}