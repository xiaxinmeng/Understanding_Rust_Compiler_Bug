{"sha": "f9239dd630bb10fcff07cc834f18d4330dcf75c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MjM5ZGQ2MzBiYjEwZmNmZjA3Y2M4MzRmMThkNDMzMGRjZjc1Yzg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-07T06:17:57Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-09T07:36:41Z"}, "message": "Format source codes and update tests", "tree": {"sha": "cdd697f095b52b5f00b841d33036cc3ee2a136ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd697f095b52b5f00b841d33036cc3ee2a136ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9239dd630bb10fcff07cc834f18d4330dcf75c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9239dd630bb10fcff07cc834f18d4330dcf75c8", "html_url": "https://github.com/rust-lang/rust/commit/f9239dd630bb10fcff07cc834f18d4330dcf75c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9239dd630bb10fcff07cc834f18d4330dcf75c8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a6d16c7b68587f8e9fa8a1e6715f80408b023b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a6d16c7b68587f8e9fa8a1e6715f80408b023b", "html_url": "https://github.com/rust-lang/rust/commit/04a6d16c7b68587f8e9fa8a1e6715f80408b023b"}], "stats": {"total": 142, "additions": 62, "deletions": 80}, "files": [{"sha": "e800ed0565fb36f52533445ff6ea2cf2137f4efe", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -1130,10 +1130,8 @@ impl<'a> ControlFlow<'a> {\n \n             let new_width = try_opt!(width.checked_sub(pat_expr_str.len() + fixed_cost));\n             let expr = &self.block.stmts[0];\n-            let if_str = try_opt!(expr.rewrite(\n-                context,\n-                Shape::legacy(new_width, Indent::empty()),\n-            ));\n+            let if_str =\n+                try_opt!(expr.rewrite(context, Shape::legacy(new_width, Indent::empty()),));\n \n             let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n             let else_expr = &else_node.stmts[0];\n@@ -1246,14 +1244,12 @@ impl<'a> ControlFlow<'a> {\n         // for event in event\n         let between_kwd_cond = mk_sp(\n             context.codemap.span_after(self.span, self.keyword.trim()),\n-            self.pat.map_or(\n-                cond_span.lo,\n-                |p| if self.matcher.is_empty() {\n+            self.pat\n+                .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n                     p.span.lo\n                 } else {\n                     context.codemap.span_before(self.span, self.matcher.trim())\n-                },\n-            ),\n+                }),\n         );\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n@@ -2253,15 +2249,17 @@ where\n                 _ => (),\n             }\n         }\n-        last_arg_shape(&context, &item_vec, shape, args_max_width)\n-            .map_or((None, None), |arg_shape| {\n+        last_arg_shape(&context, &item_vec, shape, args_max_width).map_or(\n+            (None, None),\n+            |arg_shape| {\n                 rewrite_last_arg_with_overflow(\n                     &context,\n                     args,\n                     &mut item_vec[args.len() - 1],\n                     arg_shape,\n                 )\n-            })\n+            },\n+        )\n     } else {\n         (None, None)\n     };"}, {"sha": "b85bc44b16226e6154c1de924fbcf8a62fd10aaa", "filename": "src/missed_spans.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -146,10 +146,11 @@ impl<'a> FmtVisitor<'a> {\n                 let subslice_num_lines = subslice.chars().filter(|c| *c == '\\n').count();\n \n                 if rewrite_next_comment &&\n-                    !self.config\n-                        .file_lines()\n-                        .intersects_range(file_name, cur_line, cur_line + subslice_num_lines)\n-                {\n+                    !self.config.file_lines().intersects_range(\n+                        file_name,\n+                        cur_line,\n+                        cur_line + subslice_num_lines,\n+                    ) {\n                     rewrite_next_comment = false;\n                 }\n "}, {"sha": "2927aa7425b802f4c3d10d63c2e8acac471bc460", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -553,10 +553,7 @@ impl Rewrite for ast::TyParamBound {\n                 let budget = try_opt!(shape.width.checked_sub(1));\n                 Some(format!(\n                     \"?{}\",\n-                    try_opt!(tref.rewrite(\n-                        context,\n-                        Shape::legacy(budget, shape.indent + 1),\n-                    ))\n+                    try_opt!(tref.rewrite(context, Shape::legacy(budget, shape.indent + 1)))\n                 ))\n             }\n             ast::TyParamBound::RegionTyParamBound(ref l) => l.rewrite(context, shape),\n@@ -609,10 +606,8 @@ impl Rewrite for ast::TyParam {\n             };\n             result.push_str(eq_str);\n             let budget = try_opt!(shape.width.checked_sub(result.len()));\n-            let rewrite = try_opt!(def.rewrite(\n-                context,\n-                Shape::legacy(budget, shape.indent + result.len()),\n-            ));\n+            let rewrite =\n+                try_opt!(def.rewrite(context, Shape::legacy(budget, shape.indent + result.len())));\n             result.push_str(&rewrite);\n         }\n "}, {"sha": "521341702c5ca2e65c9980748b20e7dac5d6eba2", "filename": "src/vertical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -174,13 +174,13 @@ fn struct_field_preix_max_min_width<T: AlignedItem>(\n     fields\n         .iter()\n         .map(|field| {\n-            field.rewrite_prefix(context, shape).and_then(\n-                |field_str| if field_str.contains('\\n') {\n+            field\n+                .rewrite_prefix(context, shape)\n+                .and_then(|field_str| if field_str.contains('\\n') {\n                     None\n                 } else {\n                     Some(field_str.len())\n-                },\n-            )\n+                })\n         })\n         .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n             (Some((max_len, min_len)), Some(len)) => {"}, {"sha": "3e23f1a399d7a72e12d4f2fd8d71586ced4abfa1", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -855,8 +855,9 @@ impl Rewrite for ast::MetaItem {\n \n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        try_opt!(self.meta()).rewrite(context, shape).map(\n-            |rw| if self.is_sugared_doc {\n+        try_opt!(self.meta())\n+            .rewrite(context, shape)\n+            .map(|rw| if self.is_sugared_doc {\n                 rw\n             } else {\n                 let original = context.snippet(self.span);\n@@ -869,8 +870,7 @@ impl Rewrite for ast::Attribute {\n                 } else {\n                     format!(\"{}[{}]\", prefix, rw)\n                 }\n-            },\n-        )\n+            })\n     }\n }\n "}, {"sha": "66ef44fcd4ae2dced64f8122fecd9799139d836a", "filename": "tests/target/chains-indent-visual.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/tests%2Ftarget%2Fchains-indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/tests%2Ftarget%2Fchains-indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-indent-visual.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -1,10 +1,9 @@\n // rustfmt-chain_indent: Visual\n \n fn test() {\n-    let x = my_long_function()\n-        .my_even_longer_function()\n-        .my_nested_function()\n-        .some_random_name()\n-        .another_function()\n-        .do_it();\n+    let x = my_long_function().my_even_longer_function()\n+                              .my_nested_function()\n+                              .some_random_name()\n+                              .another_function()\n+                              .do_it();\n }"}, {"sha": "829a27867dd510b3f49580b282c9646e45a5dca2", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f9239dd630bb10fcff07cc834f18d4330dcf75c8/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9239dd630bb10fcff07cc834f18d4330dcf75c8/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=f9239dd630bb10fcff07cc834f18d4330dcf75c8", "patch": "@@ -32,15 +32,14 @@ fn main() {\n         x\n     });\n \n-    some_fuuuuuuuuunction()\n-        .method_call_a(aaaaa, bbbbb, |c| {\n-            let x = c;\n-            x\n-        })\n-        .method_call_b(aaaaa, bbbbb, |c| {\n-            let x = c;\n-            x\n-        });\n+    some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    })\n+                           .method_call_b(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    });\n \n     fffffffffffffffffffffffffffffffffff(a, {\n         SCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n@@ -67,16 +66,14 @@ fn floaters() {\n     let x = Foo {\n                 field1: val1,\n                 field2: val2,\n-            }\n-            .method_call()\n+            }.method_call()\n             .method_call();\n \n     let y = if cond {\n                 val1\n             } else {\n                 val2\n-            }\n-            .method_call();\n+            }.method_call();\n \n     {\n         match x {\n@@ -86,8 +83,7 @@ fn floaters() {\n                     mparams[match cur.to_digit(10) {\n                                 Some(d) => d as usize - 1,\n                                 None => return Err(\"bad param number\".to_owned()),\n-                            }]\n-                    .clone(),\n+                            }].clone(),\n                 );\n             }\n         }\n@@ -97,22 +93,19 @@ fn floaters() {\n         some();\n     } else {\n         none();\n-    }\n-    .bar()\n+    }.bar()\n     .baz();\n \n-    Foo { x: val }\n-        .baz(|| {\n-            force();\n-            multiline();\n-        })\n-        .quux();\n+    Foo { x: val }.baz(|| {\n+        force();\n+        multiline();\n+    })\n+                  .quux();\n \n     Foo {\n         y: i_am_multi_line,\n         z: ok,\n-    }\n-    .baz(|| {\n+    }.baz(|| {\n         force();\n         multiline();\n     })\n@@ -121,8 +114,7 @@ fn floaters() {\n     a + match x {\n             true => \"yay!\",\n             false => \"boo!\",\n-        }\n-        .bar()\n+        }.bar()\n }\n \n fn is_replaced_content() -> bool {\n@@ -137,33 +129,30 @@ fn issue587() {\n }\n \n fn issue_1389() {\n-    let names = String::from_utf8(names)?\n-        .split('|')\n-        .map(str::to_owned)\n-        .collect();\n+    let names = String::from_utf8(names)?.split('|')\n+                                         .map(str::to_owned)\n+                                         .collect();\n }\n \n fn issue1217() -> Result<Mnemonic, Error> {\n-    let random_chars: String = OsRng::new()?\n-        .gen_ascii_chars()\n-        .take(self.bit_length)\n-        .collect();\n+    let random_chars: String = OsRng::new()?.gen_ascii_chars()\n+                                            .take(self.bit_length)\n+                                            .collect();\n \n     Ok(Mnemonic::new(&random_chars))\n }\n \n fn issue1236(options: Vec<String>) -> Result<Option<String>> {\n-    let process = Command::new(\"dmenu\")\n-        .stdin(Stdio::piped())\n-        .stdout(Stdio::piped())\n-        .spawn()\n-        .chain_err(|| \"failed to spawn dmenu\")?;\n+    let process = Command::new(\"dmenu\").stdin(Stdio::piped())\n+                                       .stdout(Stdio::piped())\n+                                       .spawn()\n+                                       .chain_err(|| \"failed to spawn dmenu\")?;\n }\n \n fn issue1434() {\n     for _ in 0..100 {\n-        let prototype_id = PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor)\n-            .chain_err(|| {\n+        let prototype_id =\n+            PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor).chain_err(|| {\n                 format!(\n                     \"could not read prototype ID at offset {:#010x}\",\n                     current_offset"}]}