{"sha": "b7e74a56140d4a89d0cf917788f16d8134d79eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTc0YTU2MTQwZDRhODlkMGNmOTE3Nzg4ZjE2ZDgxMzRkNzllYjQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-30T18:15:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-30T18:15:23Z"}, "message": "Rollup merge of #51760 - GuillaumeGomez:add-another-partialeq-example, r=QuietMisdreavus\n\nAdd another PartialEq example\n\nr? @steveklabnik", "tree": {"sha": "4a84e228887377f0ee2bd06ea178fef0d77d181b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a84e228887377f0ee2bd06ea178fef0d77d181b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e74a56140d4a89d0cf917788f16d8134d79eb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbiDQ7CRBK7hj4Ov3rIwAAdHIIAKbYROHTS1rcpGM1+FdPT+qk\nP9K8NlBVBEc0HHBhzvezCja6CZbMGs4b1pbZs1v1I08UpryxnJT1HefWTMOMKjnN\npjo2NljEo1mhaa0J2L0Y743IawtZjvq6TOHMpvEn88EZb63t6p1QBP3dXr1aHEoZ\nhLjDU+j2OCIwjxoTcN5lcz2cDxDURchYxqmB8ToO8epgmh+dcBPtQW9EngvTOush\n+WE+Cik+WYnKAhnIf3DtCmuXjVtW1s2JbWIvAnOoBWYLtZypWmMBiZz9q3laHZBD\n8IcqnPFzJODrMbK2sHtz90yjrRy+E61wI6KFiY5jTJY44uuxTJHzpUU3z/XhTQU=\n=iZGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a84e228887377f0ee2bd06ea178fef0d77d181b\nparent 685fb543174f8f2cadc38ec0b2c6df635eb1c087\nparent 3995bff26ce657ec6bac43cb0bdb4769e36ccc67\nauthor Pietro Albini <pietro@pietroalbini.org> 1535652923 +0200\ncommitter GitHub <noreply@github.com> 1535652923 +0200\n\nRollup merge of #51760 - GuillaumeGomez:add-another-partialeq-example, r=QuietMisdreavus\n\nAdd another PartialEq example\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e74a56140d4a89d0cf917788f16d8134d79eb4", "html_url": "https://github.com/rust-lang/rust/commit/b7e74a56140d4a89d0cf917788f16d8134d79eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e74a56140d4a89d0cf917788f16d8134d79eb4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685fb543174f8f2cadc38ec0b2c6df635eb1c087", "url": "https://api.github.com/repos/rust-lang/rust/commits/685fb543174f8f2cadc38ec0b2c6df635eb1c087", "html_url": "https://github.com/rust-lang/rust/commit/685fb543174f8f2cadc38ec0b2c6df635eb1c087"}, {"sha": "3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "url": "https://api.github.com/repos/rust-lang/rust/commits/3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "html_url": "https://github.com/rust-lang/rust/commit/3995bff26ce657ec6bac43cb0bdb4769e36ccc67"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "ef7d83a0993da134e3d670408c7b0008e59ee7b1", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b7e74a56140d4a89d0cf917788f16d8134d79eb4/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e74a56140d4a89d0cf917788f16d8134d79eb4/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b7e74a56140d4a89d0cf917788f16d8134d79eb4", "patch": "@@ -75,7 +75,12 @@ use self::Ordering::*;\n /// the same book if their ISBN matches, even if the formats differ:\n ///\n /// ```\n-/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n /// struct Book {\n ///     isbn: i32,\n ///     format: BookFormat,\n@@ -95,6 +100,84 @@ use self::Ordering::*;\n /// assert!(b1 != b3);\n /// ```\n ///\n+/// ## How can I compare two different types?\n+///\n+/// The type you can compare with is controlled by `PartialEq`'s type parameter.\n+/// For example, let's tweak our previous code a bit:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n+///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n+///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// ```\n+///\n+/// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n+/// we've changed what type we can use on the right side of the `==` operator.\n+/// This lets us use it in the `assert!` statements at the bottom.\n+///\n+/// You can also combine these implementations to let the `==` operator work with\n+/// two different types:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n+///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n+///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(b1 == b2);\n+/// ```\n+///\n /// # Examples\n ///\n /// ```"}]}