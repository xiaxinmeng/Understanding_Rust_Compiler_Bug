{"sha": "07a706ecf594e9feca5c57ae5db9e237a080fadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YTcwNmVjZjU5NGU5ZmVjYTVjNTdhZTVkYjllMjM3YTA4MGZhZGY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-12T19:16:43Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-13T12:29:57Z"}, "message": "Avoid math and use patterns to grab projection base", "tree": {"sha": "a6cd1538fa72a2fcbb201f5aad0d428bb7b5db1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6cd1538fa72a2fcbb201f5aad0d428bb7b5db1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a706ecf594e9feca5c57ae5db9e237a080fadf", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl17i8gACgkQiMlBzaHU\nZDLxCA//R3aj8HooPyvqOxsp3qric1PttREmhMHdV3E7+YiYGgVdRYrvDm2Y/0dU\nNhkqB0afwkk4jgm1LTPE581MKrvD+JZBLGWfrYPWRDhnLUkNNOYUp30MxgT+gHbP\nsg2Sj14g8mdihg5t9Ib2mLH7OKsCkKDGVTMSC1aBMmEnTs2RpZx2U04BYbOoH9u4\n692rqyWLyFAvu2ogXxWxdflepyYE09vThzQNu77YD5BsS+ldZIfQM/8UocVa80Ez\nKPVXoO24oIF5W7l82TleHgXqYsewcORz7sZnIu1shDhS0/Dcyjw4ILtSVYZSavj/\nvApJcJANJxfr0y6BnQel6/4jGrRC+vXgU/JSfkB+zEaAN85tz9jcXi/CqH/1/O9U\nnKo5D+LpUpIjTVNvMsVpAt7Lzd4unt5lhAGdWJvqD1tIOnHoAegztq4ykrTo7jH3\nfdued+ympr4O0njv3olEcE5ROYSHkgpx1SFLg7WOtTUtiWiZg9r+ZvounGF6Vg9E\nnTXmvYCLEgTEkPo7O3LWrf69wGzs8KGffFc+vOvarHIuoFQOS8Ec7xzhumgRLV83\nabUIInRg/LXmrtPiSyNzMcPTqxoIlz0CtJg2pUf2KXG/7dZ/2QBAEW+TFoRg4VSE\nXVm0A62KfJLIcZbvB4pT/doyHb6vycsXXCPw/2q/vvQi+ib7qZM=\n=xJ55\n-----END PGP SIGNATURE-----", "payload": "tree a6cd1538fa72a2fcbb201f5aad0d428bb7b5db1c\nparent 232a4a28818d0056677d48932f15d8b0cd17ef32\nauthor Santiago Pastorino <spastorino@gmail.com> 1568315803 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1568377797 -0300\n\nAvoid math and use patterns to grab projection base\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a706ecf594e9feca5c57ae5db9e237a080fadf", "html_url": "https://github.com/rust-lang/rust/commit/07a706ecf594e9feca5c57ae5db9e237a080fadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a706ecf594e9feca5c57ae5db9e237a080fadf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232a4a28818d0056677d48932f15d8b0cd17ef32", "url": "https://api.github.com/repos/rust-lang/rust/commits/232a4a28818d0056677d48932f15d8b0cd17ef32", "html_url": "https://github.com/rust-lang/rust/commit/232a4a28818d0056677d48932f15d8b0cd17ef32"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "c901eb2905476572be63374c49e38f543c9fd35c", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=07a706ecf594e9feca5c57ae5db9e237a080fadf", "patch": "@@ -1520,10 +1520,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             [] => {\n                 StorageDeadOrDrop::LocalStorageDead\n             }\n-            [.., elem] => {\n-                // FIXME(spastorino) revisit when we get rid of Box\n-                let base = &place.projection[..place.projection.len() - 1];\n-\n+            [base @ .., elem] => {\n                 // FIXME(spastorino) make this iterate\n                 let base_access = self.classify_drop_access_kind(PlaceRef {\n                     base: place.base,"}, {"sha": "5ef70461296c7b3aecbcc93e60c7f949ee1a3d87", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=07a706ecf594e9feca5c57ae5db9e237a080fadf", "patch": "@@ -2324,14 +2324,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut place_projection = place_ref.projection;\n         let mut by_ref = false;\n \n-        if let [.., ProjectionElem::Deref] = place_projection {\n-            place_projection = &place_projection[..place_projection.len() - 1];\n+        if let [proj_base @ .., ProjectionElem::Deref] = place_projection {\n+            place_projection = proj_base;\n             by_ref = true;\n         }\n \n         match place_projection {\n-            [.., ProjectionElem::Field(field, _ty)] => {\n-                let base = &place_projection[..place_projection.len() - 1];\n+            [base @ .., ProjectionElem::Field(field, _ty)] => {\n                 let tcx = self.infcx.tcx;\n                 let base_ty = Place::ty_from(place_ref.base, base, self.body, tcx).ty;\n "}, {"sha": "9b9dfc3023354ffb844fdcd52224630334cc8c60", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=07a706ecf594e9feca5c57ae5db9e237a080fadf", "patch": "@@ -82,11 +82,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             PlaceRef {\n                 base: _,\n-                projection: [.., ProjectionElem::Deref],\n+                projection: [base @ .., ProjectionElem::Deref],\n             } => {\n-                // FIXME(spastorino) once released use box [base @ .., ProjectionElem::Deref]\n-                let base = &the_place_err.projection[..the_place_err.projection.len() - 1];\n-\n                 if the_place_err.base == &PlaceBase::Local(Local::new(1)) &&\n                     base.is_empty() &&\n                     !self.upvars.is_empty() {\n@@ -243,14 +240,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // after the field access).\n             PlaceRef {\n                 base,\n-                projection: [..,\n+                projection: [base_proj @ ..,\n                              ProjectionElem::Deref,\n                              ProjectionElem::Field(field, _),\n                              ProjectionElem::Deref,\n                 ],\n             } => {\n-                let base_proj = &the_place_err.projection[..the_place_err.projection.len() - 3];\n-\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n                 if let Some((span, message)) = annotate_struct_field("}, {"sha": "6692984524fec51d7e9e294911a05a811f1a42f8", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=07a706ecf594e9feca5c57ae5db9e237a080fadf", "patch": "@@ -514,20 +514,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Place {\n                 ref base,\n-                projection: box [.., ProjectionElem::Field(upvar_index, _)],\n+                projection: box [ref base_proj @ .., ProjectionElem::Field(upvar_index, _)],\n             }\n             | Place {\n                 ref base,\n-                projection: box [.., ProjectionElem::Field(upvar_index, _), ProjectionElem::Deref],\n+                projection: box [\n+                    ref base_proj @ ..,\n+                    ProjectionElem::Field(upvar_index, _),\n+                    ProjectionElem::Deref\n+                ],\n             } => {\n-                let base_proj = if let ProjectionElem::Deref =\n-                    arg_place.projection[arg_place.projection.len() - 1]\n-                {\n-                    &arg_place.projection[..arg_place.projection.len() - 2]\n-                } else {\n-                    &arg_place.projection[..arg_place.projection.len() - 1]\n-                };\n-\n                 let place = PlaceRef {\n                     base,\n                     projection: base_proj,"}, {"sha": "0e04e63af4522ae1daeed981d59d345cf2e9b341", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a706ecf594e9feca5c57ae5db9e237a080fadf/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=07a706ecf594e9feca5c57ae5db9e237a080fadf", "patch": "@@ -45,16 +45,18 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n                     ref mut base,\n                     projection: ref mut projection @ box [.., _],\n                 }) => {\n-                    let [proj_l @ .., proj_r] = projection;\n-\n-                    let place = Place {\n-                        // Replace with dummy\n-                        base: mem::replace(base, PlaceBase::Local(Local::new(0))),\n-                        projection: proj_l.to_vec().into_boxed_slice(),\n-                    };\n-                    *projection = proj_r.to_vec().into_boxed_slice();\n-\n-                    place\n+                    if let box [proj_l @ .., proj_r] = projection {\n+                        let place = Place {\n+                            // Replace with dummy\n+                            base: mem::replace(base, PlaceBase::Local(Local::new(0))),\n+                            projection: proj_l.to_vec().into_boxed_slice(),\n+                        };\n+                        *projection = vec![proj_r.clone()].into_boxed_slice();\n+\n+                        place\n+                    } else {\n+                        unreachable!();\n+                    }\n                 }\n                 _ => bug!(\"Detected `&*` but didn't find `&*`!\"),\n             };"}]}