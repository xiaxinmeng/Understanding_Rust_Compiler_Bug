{"sha": "0334faef1fd37dd6f358984904d0772bcf70e4c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMzRmYWVmMWZkMzdkZDZmMzU4OTg0OTA0ZDA3NzJiY2Y3MGU0YzY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T14:50:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T14:50:51Z"}, "message": "Improve pretty-printing of constraints\n\n(Methods still don't seem to have constraints associated with them.\nMethod types do, so I guess this is a TODO.)", "tree": {"sha": "19d635027b3f61609398862211feaca96a3afa4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d635027b3f61609398862211feaca96a3afa4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0334faef1fd37dd6f358984904d0772bcf70e4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0334faef1fd37dd6f358984904d0772bcf70e4c6", "html_url": "https://github.com/rust-lang/rust/commit/0334faef1fd37dd6f358984904d0772bcf70e4c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0334faef1fd37dd6f358984904d0772bcf70e4c6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30377a0d05f6d580f9ce727d9f6c3ba7b25e72f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/30377a0d05f6d580f9ce727d9f6c3ba7b25e72f6", "html_url": "https://github.com/rust-lang/rust/commit/30377a0d05f6d580f9ce727d9f6c3ba7b25e72f6"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "2b7339c113b668d489e3b0bba48fad84e048d00f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0334faef1fd37dd6f358984904d0772bcf70e4c6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0334faef1fd37dd6f358984904d0772bcf70e4c6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=0334faef1fd37dd6f358984904d0772bcf70e4c6", "patch": "@@ -105,7 +105,7 @@ fn path_to_str(p: &ast::path) -> str { be to_str(p, print_path); }\n fn fun_to_str(f: &ast::_fn, name: str, params: &ast::ty_param[]) -> str {\n     let writer = ioivec::string_writer();\n     let s = rust_printer(writer.get_writer());\n-    print_fn(s, f.decl, f.proto, name, params);\n+    print_fn(s, f.decl, f.proto, name, params, f.decl.constraints);\n     eof(s.s);\n     ret writer.get_str();\n }\n@@ -337,8 +337,6 @@ fn print_type(s: &ps, ty: &ast::ty) {\n       ast::ty_constr(t, cs) {\n         print_type(s, *t);\n         space(s.s);\n-        word(s.s, \":\");\n-        space(s.s);\n         word(s.s, ast_ty_constrs_str(cs));\n       }\n     }\n@@ -363,7 +361,8 @@ fn print_native_item(s: &ps, item: &@ast::native_item) {\n \n \n       ast::native_item_fn(lname, decl, typarams) {\n-        print_fn(s, decl, ast::proto_fn, item.ident, typarams);\n+        print_fn(s, decl, ast::proto_fn, item.ident, typarams,\n+                 decl.constraints);\n         alt lname {\n           none. { }\n           some(ss) { space(s.s); word_space(s, \"=\"); print_string(s, ss); }\n@@ -396,7 +395,8 @@ fn print_item(s: &ps, item: &@ast::item) {\n \n       }\n       ast::item_fn(_fn, typarams) {\n-        print_fn(s, _fn.decl, _fn.proto, item.ident, typarams);\n+        print_fn(s, _fn.decl, _fn.proto, item.ident, typarams,\n+                 _fn.decl.constraints);\n         word(s.s, \" \");\n         print_block(s, _fn.body);\n       }\n@@ -502,7 +502,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n             hardbreak_if_not_bol(s);\n             maybe_print_comment(s, meth.span.lo);\n             print_fn(s, meth.node.meth.decl, meth.node.meth.proto,\n-                     meth.node.ident, typarams);\n+                     meth.node.ident, typarams, ~[]);\n             word(s.s, \" \");\n             print_block(s, meth.node.meth.body);\n         }\n@@ -821,7 +821,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n       }\n       ast::expr_fn(f) {\n         head(s, proto_to_str(f.proto));\n-        print_fn_args_and_ret(s, f.decl);\n+        print_fn_args_and_ret(s, f.decl, ~[]);\n         space(s.s);\n         print_block(s, f.body);\n       }\n@@ -970,12 +970,12 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         bopen(s);\n \n         // Methods\n-        for meth: @ast::method  in anon_obj.methods {\n+        for meth: @ast::method in anon_obj.methods {\n             let typarams: ast::ty_param[] = ~[];\n             hardbreak_if_not_bol(s);\n             maybe_print_comment(s, meth.span.lo);\n             print_fn(s, meth.node.meth.decl, meth.node.meth.proto,\n-                     meth.node.ident, typarams);\n+                     meth.node.ident, typarams, ~[]);\n             word(s.s, \" \");\n             print_block(s, meth.node.meth.body);\n         }\n@@ -1102,17 +1102,18 @@ fn print_pat(s: &ps, pat: &@ast::pat) {\n }\n \n fn print_fn(s: &ps, decl: ast::fn_decl, proto: ast::proto, name: str,\n-            typarams: &ast::ty_param[]) {\n+            typarams: &ast::ty_param[], constrs: (@ast::constr)[]) {\n     alt decl.purity {\n       ast::impure_fn. { head(s, proto_to_str(proto)); }\n       _ { head(s, \"pred\"); }\n     }\n     word(s.s, name);\n     print_type_params(s, typarams);\n-    print_fn_args_and_ret(s, decl);\n+    print_fn_args_and_ret(s, decl, constrs);\n }\n \n-fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl) {\n+fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl,\n+                        constrs: (@ast::constr)[]) {\n     popen(s);\n     fn print_arg(s: &ps, x: &ast::arg) {\n         ibox(s, indent_unit);\n@@ -1123,6 +1124,7 @@ fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl) {\n     }\n     commasep(s, inconsistent, decl.inputs, print_arg);\n     pclose(s);\n+    word(s.s, ast_constrs_str(constrs));\n     maybe_print_comment(s, decl.output.span.lo);\n     if decl.output.node != ast::ty_nil {\n         space_if_not_bol(s);\n@@ -1275,7 +1277,7 @@ fn print_ty_fn(s: &ps, proto: &ast::proto, id: &option::t[str],\n         }\n         end(s);\n     }\n-    word_space(s, ast_constrs_str(constrs));\n+    word(s.s, ast_constrs_str(constrs));\n     end(s);\n }\n "}]}