{"sha": "62fe055aba3ddac5e5d113920cf5fd80522104e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmUwNTVhYmEzZGRhYzVlNWQxMTM5MjBjZjVmZDgwNTIyMTA0ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T02:35:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T02:35:11Z"}, "message": "Auto merge of #76986 - jonas-schievink:ret-in-reg, r=nagisa\n\nReturn values up to 128 bits in registers\n\nThis fixes https://github.com/rust-lang/rust/issues/26494#issuecomment-619506345 by making Rust's default ABI pass return values up to 128 bits in size in registers, just like the System V ABI.\n\nThe result is that these methods from the comment linked above now generate the same code, making the Rust ABI as efficient as the `\"C\"` ABI:\n\n```rust\npub struct Stats { x: u32, y: u32, z: u32, }\n\npub extern \"C\" fn sum_c(a: &Stats, b: &Stats) -> Stats {\n    return Stats {x: a.x + b.x, y: a.y + b.y, z: a.z + b.z };\n}\n\npub fn sum_rust(a: &Stats, b: &Stats) -> Stats {\n    return Stats {x: a.x + b.x, y: a.y + b.y, z: a.z + b.z };\n}\n```\n\n```asm\nsum_rust:\n\tmovl\t(%rsi), %eax\n\taddl\t(%rdi), %eax\n\tmovl\t4(%rsi), %ecx\n\taddl\t4(%rdi), %ecx\n\tmovl\t8(%rsi), %edx\n\taddl\t8(%rdi), %edx\n\tshlq\t$32, %rcx\n\torq\t%rcx, %rax\n\tretq\n```", "tree": {"sha": "4545619f936a4860e19494c8f68720e366b44e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4545619f936a4860e19494c8f68720e366b44e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fe055aba3ddac5e5d113920cf5fd80522104e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fe055aba3ddac5e5d113920cf5fd80522104e2", "html_url": "https://github.com/rust-lang/rust/commit/62fe055aba3ddac5e5d113920cf5fd80522104e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fe055aba3ddac5e5d113920cf5fd80522104e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec980d225fff2346a1a631a7ffc88b37e9e18af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec980d225fff2346a1a631a7ffc88b37e9e18af", "html_url": "https://github.com/rust-lang/rust/commit/1ec980d225fff2346a1a631a7ffc88b37e9e18af"}, {"sha": "cc2ba3bd2753ec94adc93ec4aa9d8d093129cd2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2ba3bd2753ec94adc93ec4aa9d8d093129cd2d", "html_url": "https://github.com/rust-lang/rust/commit/cc2ba3bd2753ec94adc93ec4aa9d8d093129cd2d"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "ee669ed22896912291961ff067a98e14ee1c1da9", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62fe055aba3ddac5e5d113920cf5fd80522104e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fe055aba3ddac5e5d113920cf5fd80522104e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=62fe055aba3ddac5e5d113920cf5fd80522104e2", "patch": "@@ -2735,6 +2735,7 @@ where\n             can_unwind: fn_can_unwind(cx.tcx().sess.panic_strategy(), codegen_fn_attr_flags, conv),\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi);\n+        debug!(\"FnAbi::new_internal = {:?}\", fn_abi);\n         fn_abi\n     }\n \n@@ -2748,7 +2749,7 @@ where\n             || abi == SpecAbi::RustIntrinsic\n             || abi == SpecAbi::PlatformIntrinsic\n         {\n-            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {\n+            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>, is_ret: bool| {\n                 if arg.is_ignore() {\n                     return;\n                 }\n@@ -2786,8 +2787,11 @@ where\n                     _ => return,\n                 }\n \n+                let max_by_val_size =\n+                    if is_ret { call::max_ret_by_val(cx) } else { Pointer.size(cx) };\n                 let size = arg.layout.size;\n-                if arg.layout.is_unsized() || size > Pointer.size(cx) {\n+\n+                if arg.layout.is_unsized() || size > max_by_val_size {\n                     arg.make_indirect();\n                 } else {\n                     // We want to pass small aggregates as immediates, but using\n@@ -2796,9 +2800,9 @@ where\n                     arg.cast_to(Reg { kind: RegKind::Integer, size });\n                 }\n             };\n-            fixup(&mut self.ret);\n+            fixup(&mut self.ret, true);\n             for arg in &mut self.args {\n-                fixup(arg);\n+                fixup(arg, false);\n             }\n             if let PassMode::Indirect(ref mut attrs, _) = self.ret.mode {\n                 attrs.set(ArgAttribute::StructRet);"}, {"sha": "602c424a043f7a25f7668f5741bb5d2d35de4555", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62fe055aba3ddac5e5d113920cf5fd80522104e2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fe055aba3ddac5e5d113920cf5fd80522104e2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=62fe055aba3ddac5e5d113920cf5fd80522104e2", "patch": "@@ -610,3 +610,15 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n         Ok(())\n     }\n }\n+\n+/// Returns the maximum size of return values to be passed by value in the Rust ABI.\n+///\n+/// Return values beyond this size will use an implicit out-pointer instead.\n+pub fn max_ret_by_val<C: HasTargetSpec + HasDataLayout>(spec: &C) -> Size {\n+    match spec.target_spec().arch.as_str() {\n+        // System-V will pass return values up to 128 bits in RAX/RDX.\n+        \"x86_64\" => Size::from_bits(128),\n+\n+        _ => spec.data_layout().pointer_size,\n+    }\n+}"}, {"sha": "4bc0136c5e325f0d1a467fac9f3af9044e01ac45", "filename": "src/test/codegen/return-value-in-reg.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/62fe055aba3ddac5e5d113920cf5fd80522104e2/src%2Ftest%2Fcodegen%2Freturn-value-in-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fe055aba3ddac5e5d113920cf5fd80522104e2/src%2Ftest%2Fcodegen%2Freturn-value-in-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Freturn-value-in-reg.rs?ref=62fe055aba3ddac5e5d113920cf5fd80522104e2", "patch": "@@ -0,0 +1,32 @@\n+//! This test checks that types of up to 128 bits are returned by-value instead of via out-pointer.\n+\n+// compile-flags: -C no-prepopulate-passes -O\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct S {\n+    a: u64,\n+    b: u32,\n+    c: u32,\n+}\n+\n+// CHECK: define i128 @modify(%S* noalias nocapture dereferenceable(16) %s)\n+#[no_mangle]\n+pub fn modify(s: S) -> S {\n+    S { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c }\n+}\n+\n+#[repr(packed)]\n+pub struct TooBig {\n+    a: u64,\n+    b: u32,\n+    c: u32,\n+    d: u8,\n+}\n+\n+// CHECK: define void @m_big(%TooBig* [[ATTRS:.*sret.*]], %TooBig* [[ATTRS2:.*]] %s)\n+#[no_mangle]\n+pub fn m_big(s: TooBig) -> TooBig {\n+    TooBig { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c, d: s.d + s.d }\n+}"}]}