{"sha": "dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZjk3MmEyYmUyZTEyMmVlM2U3Y2M4NmJiZjRmZjY3NTEwNTUzMzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:11Z"}, "message": "Rollup merge of #77619 - fusion-engineering-forks:wasm-parker, r=dtolnay\n\nUse futex-based thread-parker for Wasm32.\n\nThis uses the existing `sys_common/thread_parker/futex.rs` futex-based thread parker (that was already used for Linux) for wasm32 as well (if the wasm32 atomics target feature is enabled, which is not the case by default).\n\nWasm32 provides the basic futex operations as instructions: https://webassembly.github.io/threads/syntax/instructions.html\n\nThese are now exposed from `sys::futex::{futex_wait, futex_wake}`, just like on Linux. So, `thread_parker/futex.rs` stays completely unmodified.", "tree": {"sha": "ac47f5daca0eab7f8b9283827d1da4d6a480a7a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac47f5daca0eab7f8b9283827d1da4d6a480a7a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOTjCRBK7hj4Ov3rIwAAdHIIABOCbMaNcxktxtBwSfa05avE\nLR2tkeynDku59ub2mrzHqmq6dOcDNLdmxWNjWLtN1AyQiLxDLYRJe4PXHAVsZbnZ\nHYPjUUlIa5O3bqKnbL/8ffZJVRVPoLJJcd0GRclbgkQ2VJPJjS9FwuboHS7F8rq5\nu7xM3X8rIbLqVaxdKee3+x9LX+Z6zEqzUfrmA8lziaO14owvyUcNKmy9SICnnrEf\nLvsju97qVBdDf+ElPFX/ReFWnJrq/QSaWg2mtInFwM2bd+z7hgUIa/6TuOBbm9Um\nP+tV19WVfHtY7EDENJ1Z6RKoka0MZD5GDlskB7H5A7MM94Z1XfRk4AC5V91SId4=\n=Ftuu\n-----END PGP SIGNATURE-----\n", "payload": "tree ac47f5daca0eab7f8b9283827d1da4d6a480a7a8\nparent 0e4d19603bcea4e5cc54fee460c0582f9b31cb3f\nparent f84f01c0148cfb2451775fcbf299a2e7b10b1e81\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807011 +0200\ncommitter GitHub <noreply@github.com> 1602807011 +0200\n\nRollup merge of #77619 - fusion-engineering-forks:wasm-parker, r=dtolnay\n\nUse futex-based thread-parker for Wasm32.\n\nThis uses the existing `sys_common/thread_parker/futex.rs` futex-based thread parker (that was already used for Linux) for wasm32 as well (if the wasm32 atomics target feature is enabled, which is not the case by default).\n\nWasm32 provides the basic futex operations as instructions: https://webassembly.github.io/threads/syntax/instructions.html\n\nThese are now exposed from `sys::futex::{futex_wait, futex_wake}`, just like on Linux. So, `thread_parker/futex.rs` stays completely unmodified.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "html_url": "https://github.com/rust-lang/rust/commit/dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4d19603bcea4e5cc54fee460c0582f9b31cb3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4d19603bcea4e5cc54fee460c0582f9b31cb3f", "html_url": "https://github.com/rust-lang/rust/commit/0e4d19603bcea4e5cc54fee460c0582f9b31cb3f"}, {"sha": "f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84f01c0148cfb2451775fcbf299a2e7b10b1e81", "html_url": "https://github.com/rust-lang/rust/commit/f84f01c0148cfb2451775fcbf299a2e7b10b1e81"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "3d8bf42f7255eec2b11660c02d5d082eb6a3e422", "filename": "library/std/src/sys/wasm/futex_atomics.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Ffutex_atomics.rs?ref=dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "patch": "@@ -0,0 +1,17 @@\n+use crate::arch::wasm32;\n+use crate::convert::TryInto;\n+use crate::sync::atomic::AtomicI32;\n+use crate::time::Duration;\n+\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n+    let timeout = timeout.and_then(|t| t.as_nanos().try_into().ok()).unwrap_or(-1);\n+    unsafe {\n+        wasm32::memory_atomic_wait32(futex as *const AtomicI32 as *mut i32, expected, timeout);\n+    }\n+}\n+\n+pub fn futex_wake(futex: &AtomicI32) {\n+    unsafe {\n+        wasm32::memory_atomic_notify(futex as *const AtomicI32 as *mut i32, 1);\n+    }\n+}"}, {"sha": "11c6896f050b266ca6b0187871e03dce781a04b6", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "patch": "@@ -55,6 +55,8 @@ cfg_if::cfg_if! {\n         pub mod mutex;\n         #[path = \"rwlock_atomics.rs\"]\n         pub mod rwlock;\n+        #[path = \"futex_atomics.rs\"]\n+        pub mod futex;\n     } else {\n         #[path = \"../unsupported/condvar.rs\"]\n         pub mod condvar;"}, {"sha": "5e75ac65de4199a95737f2021ec9e2af329b2d97", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf972a2be2e122ee3e7cc86bbf4ff6751055337/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "patch": "@@ -1,5 +1,9 @@\n cfg_if::cfg_if! {\n-    if #[cfg(any(target_os = \"linux\", target_os = \"android\"))] {\n+    if #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n+    ))] {\n         mod futex;\n         pub use futex::Parker;\n     } else {"}]}