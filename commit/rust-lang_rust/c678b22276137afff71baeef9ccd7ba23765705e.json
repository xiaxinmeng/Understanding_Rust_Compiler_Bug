{"sha": "c678b22276137afff71baeef9ccd7ba23765705e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzhiMjIyNzYxMzdhZmZmNzFiYWVlZjljY2Q3YmEyMzc2NTcwNWU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-23T23:20:34Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-23T23:20:34Z"}, "message": "Talk about trait bounds in the tutorial.", "tree": {"sha": "eb3dab105e8c654841f24ebb7b5d86b73dfa304b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb3dab105e8c654841f24ebb7b5d86b73dfa304b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c678b22276137afff71baeef9ccd7ba23765705e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c678b22276137afff71baeef9ccd7ba23765705e", "html_url": "https://github.com/rust-lang/rust/commit/c678b22276137afff71baeef9ccd7ba23765705e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c678b22276137afff71baeef9ccd7ba23765705e/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "html_url": "https://github.com/rust-lang/rust/commit/2c0f9bd35493def5e23f0f43ddeba54da9d788b4"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "c8136605aaede98b561c71696ccd870c00e50cb5", "filename": "doc/tutorial.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c678b22276137afff71baeef9ccd7ba23765705e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c678b22276137afff71baeef9ccd7ba23765705e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c678b22276137afff71baeef9ccd7ba23765705e", "patch": "@@ -1864,7 +1864,7 @@ so you could not apply `head` to a type\n that does not implement `Clone`.\n \n While most traits can be defined and implemented by user code,\n-two traits are automatically derived and implemented\n+three traits are automatically derived and implemented\n for all applicable types by the compiler,\n and may not be overridden:\n \n@@ -1877,6 +1877,12 @@ These are types that do not contain anything intrinsically mutable.\n Intrinsically mutable values include `@mut`\n and `Cell` in the standard library.\n \n+* `'static` - Non-borrowed types.\n+These are types that do not contain any data whose lifetime is bound to\n+a particular stack frame. These are types that do not contain any\n+borrowed pointers, or types where the only contained borrowed pointers\n+have the `'static` lifetime.\n+\n > ***Note:*** These two traits were referred to as 'kinds' in earlier\n > iterations of the language, and often still are.\n \n@@ -2135,6 +2141,30 @@ select the method to call at runtime.\n \n This usage of traits is similar to Java interfaces.\n \n+By default, each of the three storage classes for traits enforce a\n+particular set of built-in kinds that their contents must fulfill in\n+order to be packaged up in a trait object of that storage class.\n+\n+* The contents of owned traits (`~Trait`) must fulfill the `Send` bound.\n+* The contents of managed traits (`@Trait`) must fulfill the `'static` bound.\n+* The contents of borrowed traits (`&Trait`) are not constrained by any bound.\n+\n+Consequently, the trait objects themselves automatically fulfill their\n+respective kind bounds. However, this default behavior can be overridden by\n+specifying a list of bounds on the trait type, for example, by writing `~Trait:`\n+(which indicates that the contents of the owned trait need not fulfill any\n+bounds), or by writing `~Trait:Send+Freeze`, which indicates that in addition\n+to fulfilling `Send`, contents must also fulfill `Freeze`, and as a consequence,\n+the trait itself fulfills `Freeze`.\n+\n+* `~Trait:Send` is equivalent to `~Trait`.\n+* `@Trait:'static` is equivalent to `@Trait`.\n+* `&Trait:` is equivalent to `&Trait`.\n+\n+Builtin kind bounds can also be specified on closure types in the same way (for\n+example, by writing `fn:Freeze()`), and the default behaviours are the same as\n+for traits of the same storage class.\n+\n ## Trait inheritance\n \n We can write a trait declaration that _inherits_ from other traits, called _supertraits_."}]}