{"sha": "5a01dbe67b43660bf1df96074f34a635aad50e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDFkYmU2N2I0MzY2MGJmMWRmOTYwNzRmMzRhNjM1YWFkNTBlNTY=", "commit": {"author": {"name": "Adrien T\u00e9tar", "email": "adri-from-59@hotmail.fr", "date": "2013-11-11T14:26:22Z"}, "committer": {"name": "Adrien T\u00e9tar", "email": "adri-from-59@hotmail.fr", "date": "2013-11-13T08:32:29Z"}, "message": "doc: disable parser error highlighting + a few fixes\n\nCodeMirror parser errors are related to #9873.", "tree": {"sha": "d182e4efa8609bdbe8e4d7e0fc391db5aca34dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d182e4efa8609bdbe8e4d7e0fc391db5aca34dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a01dbe67b43660bf1df96074f34a635aad50e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a01dbe67b43660bf1df96074f34a635aad50e56", "html_url": "https://github.com/rust-lang/rust/commit/5a01dbe67b43660bf1df96074f34a635aad50e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a01dbe67b43660bf1df96074f34a635aad50e56/comments", "author": {"login": "adrientetar", "id": 1250894, "node_id": "MDQ6VXNlcjEyNTA4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1250894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrientetar", "html_url": "https://github.com/adrientetar", "followers_url": "https://api.github.com/users/adrientetar/followers", "following_url": "https://api.github.com/users/adrientetar/following{/other_user}", "gists_url": "https://api.github.com/users/adrientetar/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrientetar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrientetar/subscriptions", "organizations_url": "https://api.github.com/users/adrientetar/orgs", "repos_url": "https://api.github.com/users/adrientetar/repos", "events_url": "https://api.github.com/users/adrientetar/events{/privacy}", "received_events_url": "https://api.github.com/users/adrientetar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adrientetar", "id": 1250894, "node_id": "MDQ6VXNlcjEyNTA4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1250894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrientetar", "html_url": "https://github.com/adrientetar", "followers_url": "https://api.github.com/users/adrientetar/followers", "following_url": "https://api.github.com/users/adrientetar/following{/other_user}", "gists_url": "https://api.github.com/users/adrientetar/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrientetar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrientetar/subscriptions", "organizations_url": "https://api.github.com/users/adrientetar/orgs", "repos_url": "https://api.github.com/users/adrientetar/repos", "events_url": "https://api.github.com/users/adrientetar/events{/privacy}", "received_events_url": "https://api.github.com/users/adrientetar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "123e0cefb64afd072451e5b3a3c2f9d8f43c7c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/123e0cefb64afd072451e5b3a3c2f9d8f43c7c83", "html_url": "https://github.com/rust-lang/rust/commit/123e0cefb64afd072451e5b3a3c2f9d8f43c7c83"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "a60ef803b5f8a6f059cb4781674ab107afb617a5", "filename": "doc/manual.inc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Fmanual.inc", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Fmanual.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fmanual.inc?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -4,4 +4,9 @@\n     display: block;\n     padding-left: 2em;\n   }\n-</style>\n\\ No newline at end of file\n+  #influences blockquote p:last-child {\n+    display: block;\n+    line-height: 1.428571429;\n+    color: #999999;\n+  }\n+</style>"}, {"sha": "8b95a5860300c09ecf9bdf2fe3b417756be758f5", "filename": "doc/rust.css", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.css?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -2,7 +2,7 @@\n  * Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n  * file at the top-level directory of this distribution and at\n  * http://rust-lang.org/COPYRIGHT.\n- * With elements taken from Bootstrap v3.0.0 (Apache v2.0 licensed).\n+ * With elements taken from Bootstrap v3.0.2 (MIT licensed).\n  *\n  * Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n  * http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n@@ -93,6 +93,7 @@ p {\n a {\n \ttext-decoration: none;\n \tcolor: #428BCA;\n+\tbackground: transparent;\n }\n a:hover, a:focus {\n \tcolor: #2A6496;\n@@ -141,7 +142,7 @@ pre code {\n \tcolor: inherit;\n \twhite-space: pre-wrap;\n \tbackground-color: transparent;\n-\tborder: 0;\n+\tborder-radius: 0;\n }\n \n /* Code highlighting */\n@@ -158,7 +159,7 @@ pre code {\n .cm-s-default span.cm-string {color: #a11;}\n .cm-s-default span.cm-string-2 {color: #f50;}\n .cm-s-default span.cm-meta {color: #555;}\n-.cm-s-default span.cm-error {color: #f00;}\n+/*.cm-s-default span.cm-error {color: #f00;}*/\n .cm-s-default span.cm-qualifier {color: #555;}\n .cm-s-default span.cm-builtin {color: #30a;}\n .cm-s-default span.cm-bracket {color: #cc7;}\n@@ -187,7 +188,7 @@ pre code {\n }\n #versioninfo a.hash {\n \tcolor: gray;\n-\tfont-size: 60%;\n+\tfont-size: 70%;\n }\n \n blockquote {\n@@ -303,4 +304,4 @@ hr {\n \ttable td, table th {\n \t\tbackground-color: #fff !important;\n \t}\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4117faa1a6b81c8375c3ec208e43fb5d8414a7cb", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -210,10 +210,10 @@ solves the problem.\n \n # Macro argument pattern matching\n \n-Now consider code like the following:\n-\n ## Motivation\n \n+Now consider code like the following:\n+\n ~~~~\n # enum t1 { good_1(t2, uint), bad_1 };\n # pub struct t2 { body: t3 }"}, {"sha": "daacd4ab76bf48c81a460c6ab0498fcb9211a870", "filename": "doc/tutorial-rustpkg.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-rustpkg.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-rustpkg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-rustpkg.md?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -27,7 +27,6 @@ $ rustc main.rs\n main.rs:1:0: 1:17 error: can't find crate for `hello`\n main.rs:1 extern mod hello;\n           ^~~~~~~~~~~~~~~~~\n-\n ~~~~\n \n This makes sense, as we haven't gotten it from anywhere yet!  Luckily for us,\n@@ -216,7 +215,7 @@ a function that can be sensibly tested:\n #[license = \"MIT\"];\n \n pub fn is_even(i: uint) -> bool {\n-\ti % 2 == 0\n+    i % 2 == 0\n }\n ~~~\n \n@@ -230,9 +229,9 @@ use hello::is_even;\n \n #[test]\n fn test_is_even() {\n-   assert!(is_even(0));\n-   assert!(!is_even(1));\n-   assert!(is_even(2));\t\n+    assert!(is_even(0));\n+    assert!(!is_even(1));\n+    assert!(is_even(2));\n }\n ~~~\n "}, {"sha": "93c2b124fa545c1feacc637267590e80e27c682b", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -104,8 +104,8 @@ an environment that it carries across tasks.\n let child_task_number = generate_task_number();\n \n do spawn {\n-   // Capture it in the remote task\n-   println!(\"I am child number {}\", child_task_number);\n+    // Capture it in the remote task\n+    println!(\"I am child number {}\", child_task_number);\n }\n ~~~\n "}, {"sha": "5e238c5911def05feb613acad1995e5a76ed2c6a", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -804,7 +804,7 @@ confusing numbers that correspond to different units.\n We've already seen several function definitions. Like all other static\n declarations, such as `type`, functions can be declared both at the\n top level and inside other functions (or in modules, which we'll come\n-back to [later](#modules-and-crates)). The `fn` keyword introduces a\n+back to [later](#crates-and-the-module-system)). The `fn` keyword introduces a\n function. A function has an argument list, which is a parenthesized\n list of `expr: type` pairs separated by commas. An arrow `->`\n separates the argument list and the function's return type.\n@@ -2711,10 +2711,10 @@ extend with the `-L` switch).\n However, Rust also ships with rustpkg, a package manager that is able to automatically download and build\n libraries if you use it for building your crate. How it works is explained [here][rustpkg],\n but for this tutorial it's only important to know that you can optionally annotate an\n-`extern mod` statement with an package id that rustpkg can use to identify it:\n+`extern mod` statement with a package id that rustpkg can use to identify it:\n \n ~~~ {.ignore}\n-extern mod rust = \"github.com/mozilla/rust\"; // pretend Rust is an simple library\n+extern mod rust = \"github.com/mozilla/rust\"; // pretend Rust is a simple library\n ~~~\n \n [rustpkg]: rustpkg.html\n@@ -2730,7 +2730,7 @@ the link name and the version. It also hashes the filename and the symbols in a\n based on the link metadata, allowing you to use two different versions of the same library in a crate\n without conflict.\n \n-Therefor, if you plan to compile your crate as a library, you should annotate it with that information:\n+Therefore, if you plan to compile your crate as a library, you should annotate it with that information:\n \n ~~~~\n // lib.rs\n@@ -2746,8 +2746,8 @@ Therefor, if you plan to compile your crate as a library, you should annotate it\n You can also in turn require in a `extern mod` statement that certain link metadata items match some criteria.\n For that, Rust currently parses a comma-separated list of name/value pairs that appear after\n it, and ensures that they match the attributes provided in the `link` attribute of a crate file.\n-This enables you to, eg, pick a a crate based on it's version number, or to link an library under an\n-different name. For example, this two mod statements would both accept and select the crate define above:\n+This enables you to, e.g., pick a crate based on its version number, or link a library under a\n+different name. For example, these two `mod` statements would both accept and select the crate define above:\n \n ~~~~ {.xfail-test}\n extern mod farm(vers = \"2.5\");\n@@ -2836,14 +2836,14 @@ This allows you to use common types and functions like `Option<T>` or `println`\n without needing to import them. And if you need something from `std` that's not in the prelude,\n you just have to import it with an `use` statement.\n \n-For example, it re-exports `println` which is defined in `std::io::println`:\n+For example, it re-exports `println` which is defined in `std::io::stdio::println`:\n \n ~~~\n use puts = std::io::stdio::println;\n \n fn main() {\n     println(\"println is imported per default.\");\n-    puts(\"Doesn't hinder you from importing it under an different name yourself.\");\n+    puts(\"Doesn't hinder you from importing it under a different name yourself.\");\n     ::std::io::stdio::println(\"Or from not using the automatic import.\");\n }\n ~~~"}, {"sha": "80bdb0a9e4f9a01f2cdf441aa108fcb520d507ba", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a01dbe67b43660bf1df96074f34a635aad50e56/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a01dbe67b43660bf1df96074f34a635aad50e56/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=5a01dbe67b43660bf1df96074f34a635aad50e56", "patch": "@@ -221,6 +221,7 @@ nav, .content {\n a {\n     text-decoration: none;\n     color: #000;\n+    background: transparent;\n }\n \n .content a, .block a.current { font-weight: bold; }"}]}