{"sha": "1b843896c8b0a994835e933e67ca4e3de042ce9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODQzODk2YzhiMGE5OTQ4MzVlOTMzZTY3Y2E0ZTNkZTA0MmNlOWY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-26T14:08:24Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-26T14:08:24Z"}, "message": "Move `qualify_min_const_fn` out of rustc into clippy", "tree": {"sha": "108f55987f0c5b71908e1abf1ff875d1052dc346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108f55987f0c5b71908e1abf1ff875d1052dc346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b843896c8b0a994835e933e67ca4e3de042ce9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b843896c8b0a994835e933e67ca4e3de042ce9f", "html_url": "https://github.com/rust-lang/rust/commit/1b843896c8b0a994835e933e67ca4e3de042ce9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b843896c8b0a994835e933e67ca4e3de042ce9f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "html_url": "https://github.com/rust-lang/rust/commit/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "850cafcf89811c32091393e7dba612fc2b0784b1", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b843896c8b0a994835e933e67ca4e3de042ce9f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b843896c8b0a994835e933e67ca4e3de042ce9f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=1b843896c8b0a994835e933e67ca4e3de042ce9f", "patch": "@@ -36,7 +36,6 @@ pub mod match_branches;\n pub mod no_landing_pads;\n pub mod nrvo;\n pub mod promote_consts;\n-pub mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n pub mod remove_unneeded_drops;\n pub mod required_consts;"}, {"sha": "c3ff34e6e1eedd86002c0fc3151c5208c1ff471b", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=1b843896c8b0a994835e933e67ca4e3de042ce9f", "patch": "@@ -6,6 +6,7 @@\n #![feature(concat_idents)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n+#![feature(in_band_lifetimes)]\n #![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e5f7cc51111203756298c993bc47be8e4bc4ff3f", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1b843896c8b0a994835e933e67ca4e3de042ce9f", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "96d9905027b628e2f2c14ba8f0d20f2b2d77869f", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1b843896c8b0a994835e933e67ca4e3de042ce9f", "patch": "@@ -20,6 +20,7 @@ pub mod paths;\n pub mod ptr;\n pub mod sugg;\n pub mod usage;\n+pub mod qualify_min_const_fn;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;"}, {"sha": "9fa9b0341b109f03cbe8062edb8fc0f378e02995", "filename": "src/tools/clippy/clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b843896c8b0a994835e933e67ca4e3de042ce9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=1b843896c8b0a994835e933e67ca4e3de042ce9f", "patch": "@@ -14,7 +14,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     // Prevent const trait methods from being annotated as `stable`.\n     if tcx.features().staged_api {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        if crate::const_eval::is_parent_const_impl_raw(tcx, hir_id) {\n+        if rustc_mir::const_eval::is_parent_const_impl_raw(tcx, hir_id) {\n             return Err((body.span, \"trait methods cannot be stable const fn\".into()));\n         }\n     }\n@@ -32,13 +32,13 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | ty::PredicateAtom::ConstEquate(..)\n                 | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateAtom::ObjectSafe(_) => {\n-                    bug!(\"object safe predicate on function: {:#?}\", predicate)\n+                    panic!(\"object safe predicate on function: {:#?}\", predicate)\n                 }\n                 ty::PredicateAtom::ClosureKind(..) => {\n-                    bug!(\"closure kind predicate on function: {:#?}\", predicate)\n+                    panic!(\"closure kind predicate on function: {:#?}\", predicate)\n                 }\n                 ty::PredicateAtom::Subtype(_) => {\n-                    bug!(\"subtype predicate on function: {:#?}\", predicate)\n+                    panic!(\"subtype predicate on function: {:#?}\", predicate)\n                 }\n                 ty::PredicateAtom::Trait(pred, constness) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n@@ -343,7 +343,7 @@ fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bo\n \n     // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n     // opt-in via `allow_internal_unstable`.\n-    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n+    rustc_mir::transform::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n }\n \n /// Returns `true` if the given library feature gate is allowed within the function with the given `DefId`.\n@@ -362,7 +362,7 @@ pub fn lib_feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbo\n \n     // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n     // opt-in via `allow_internal_unstable`.\n-    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n+    rustc_mir::transform::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n }\n \n fn check_terminator(\n@@ -407,8 +407,8 @@ fn check_terminator(\n             if let ty::FnDef(fn_def_id, _) = *fn_ty.kind() {\n                 // Allow unstable const if we opt in by using #[allow_internal_unstable]\n                 // on function or macro declaration.\n-                if !crate::const_eval::is_min_const_fn(tcx, fn_def_id)\n-                    && !crate::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n+                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id)\n+                    && !rustc_mir::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n                         .map(|feature| {\n                             span.allows_unstable(feature)\n                                 || lib_feature_allowed(tcx, def_id, feature)", "previous_filename": "compiler/rustc_mir/src/transform/qualify_min_const_fn.rs"}]}