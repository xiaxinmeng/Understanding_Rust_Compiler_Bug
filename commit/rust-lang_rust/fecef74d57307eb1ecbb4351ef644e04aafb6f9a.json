{"sha": "fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlY2VmNzRkNTczMDdlYjFlY2JiNDM1MWVmNjQ0ZTA0YWFmYjZmOWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-23T00:31:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: De-`@mut` the inherent implementations list", "tree": {"sha": "654c1a4422cb9d7f23647150f36ced7b9cea62e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654c1a4422cb9d7f23647150f36ced7b9cea62e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "html_url": "https://github.com/rust-lang/rust/commit/fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed819c9a81d138ab876c42ad35025ff432845a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed819c9a81d138ab876c42ad35025ff432845a2c", "html_url": "https://github.com/rust-lang/rust/commit/ed819c9a81d138ab876c42ad35025ff432845a2c"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "b09b448e1fe08b61d021ef0d532baa4739597273", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "patch": "@@ -449,7 +449,8 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n     let inherent_impls = ecx.tcx.inherent_impls.borrow();\n     match inherent_impls.get().find(&exp.def_id) {\n         Some(implementations) => {\n-            for &base_impl in implementations.iter() {\n+            let implementations = implementations.borrow();\n+            for &base_impl in implementations.get().iter() {\n                 for &m in base_impl.methods.iter() {\n                     if m.explicit_self == ast::sty_static {\n                         encode_reexported_static_method(ecx, ebml_w, exp,\n@@ -884,7 +885,8 @@ fn encode_inherent_implementations(ecx: &EncodeContext,\n     match inherent_impls.get().find(&def_id) {\n         None => {}\n         Some(&implementations) => {\n-            for implementation in implementations.iter() {\n+            let implementations = implementations.borrow();\n+            for implementation in implementations.get().iter() {\n                 ebml_w.start_tag(tag_items_data_item_inherent_impl);\n                 encode_def_id(ebml_w, implementation.did);\n                 ebml_w.end_tag();"}, {"sha": "1fc95839c8d415592fc53c9e0b0f45fcdf8a2282", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "patch": "@@ -287,7 +287,8 @@ impl DeadVisitor {\n         match inherent_impls.get().find(&def_id) {\n             None => (),\n             Some(ref impl_list) => {\n-                for impl_ in impl_list.iter() {\n+                let impl_list = impl_list.borrow();\n+                for impl_ in impl_list.get().iter() {\n                     for method in impl_.methods.iter() {\n                         if self.live_symbols.contains(&method.def_id.node) {\n                             return true;"}, {"sha": "ff925305acf166cfb17e45fcb7ccc43ef5f868ab", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "patch": "@@ -338,7 +338,7 @@ struct ctxt_ {\n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_impls: RefCell<HashMap<ast::DefId, @mut ~[@Impl]>>,\n+    inherent_impls: RefCell<HashMap<ast::DefId, @RefCell<~[@Impl]>>>,\n \n     // Maps a def_id of an impl to an Impl structure.\n     // Note that this contains all of the impls that we know about,\n@@ -4561,14 +4561,18 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n             let mut inherent_impls = tcx.inherent_impls.borrow_mut();\n             match inherent_impls.get().find(&type_id) {\n                 None => {\n-                    implementation_list = @mut ~[];\n+                    implementation_list = @RefCell::new(~[]);\n                     inherent_impls.get().insert(type_id, implementation_list);\n                 }\n                 Some(&existing_implementation_list) => {\n                     implementation_list = existing_implementation_list;\n                 }\n             }\n-            implementation_list.push(implementation);\n+            {\n+                let mut implementation_list =\n+                    implementation_list.borrow_mut();\n+                implementation_list.get().push(implementation);\n+            }\n         }\n \n         // Store the implementation info."}, {"sha": "0f92cdaae63ff37111ae27fef3267a99ea2f7558", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "patch": "@@ -536,7 +536,8 @@ impl<'a> LookupContext<'a> {\n         let inherent_impls = self.tcx().inherent_impls.borrow();\n         let opt_impl_infos = inherent_impls.get().find(&did);\n         for impl_infos in opt_impl_infos.iter() {\n-            for impl_info in impl_infos.iter() {\n+            let impl_infos = impl_infos.borrow();\n+            for impl_info in impl_infos.get().iter() {\n                 let mut inherent_candidates = self.inherent_candidates\n                                                   .borrow_mut();\n                 self.push_candidates_from_impl(inherent_candidates.get(),"}, {"sha": "b7e0e2078d932f8ec4f7aa3466d3d81b29d254e8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fecef74d57307eb1ecbb4351ef644e04aafb6f9a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "patch": "@@ -45,6 +45,7 @@ use syntax::codemap::Span;\n use syntax::opt_vec;\n use syntax::visit;\n \n+use std::cell::RefCell;\n use std::hashmap::HashSet;\n use std::result::Ok;\n use std::vec;\n@@ -391,15 +392,16 @@ impl CoherenceChecker {\n         let mut inherent_impls = tcx.inherent_impls.borrow_mut();\n         match inherent_impls.get().find(&base_def_id) {\n             None => {\n-                implementation_list = @mut ~[];\n+                implementation_list = @RefCell::new(~[]);\n                 inherent_impls.get().insert(base_def_id, implementation_list);\n             }\n             Some(&existing_implementation_list) => {\n                 implementation_list = existing_implementation_list;\n             }\n         }\n \n-        implementation_list.push(implementation);\n+        let mut implementation_list = implementation_list.borrow_mut();\n+        implementation_list.get().push(implementation);\n     }\n \n     pub fn add_trait_impl(&self,"}]}