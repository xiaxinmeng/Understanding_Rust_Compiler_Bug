{"sha": "e51f1b7e275584872525bbfbd7c481595b99f237", "node_id": "C_kwDOAAsO6NoAKGU1MWYxYjdlMjc1NTg0ODcyNTI1YmJmYmQ3YzQ4MTU5NWI5OWYyMzc", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-07-11T13:26:58Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-07-11T13:26:58Z"}, "message": "Keep unstable target features for asm feature checking\n\nInline assembly uses the target features to determine which registers\nare available on the current target. However it needs to be able to\naccess unstable target features for this.\n\nFixes #99071", "tree": {"sha": "ef52561e7cbc5a173e79f07186424b8241f6c0b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef52561e7cbc5a173e79f07186424b8241f6c0b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51f1b7e275584872525bbfbd7c481595b99f237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51f1b7e275584872525bbfbd7c481595b99f237", "html_url": "https://github.com/rust-lang/rust/commit/e51f1b7e275584872525bbfbd7c481595b99f237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51f1b7e275584872525bbfbd7c481595b99f237/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b00252aeb77b10db04d65dc9e12ce758def4b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b00252aeb77b10db04d65dc9e12ce758def4b5", "html_url": "https://github.com/rust-lang/rust/commit/50b00252aeb77b10db04d65dc9e12ce758def4b5"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "da6e788700624b25d6b31bf8145d5ea2564d5e48", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -167,7 +167,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         }\n     }\n \n-    fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n+    fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<rustc_span::Symbol> {\n         vec![]\n     }\n "}, {"sha": "91c1fa6026c4870bee5d13c395f7bd4c64012d8c", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -133,8 +133,8 @@ impl CodegenBackend for GccCodegenBackend {\n         )\n     }\n \n-    fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n-        target_features(sess)\n+    fn target_features(&self, sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n+        target_features(sess, allow_unstable)\n     }\n }\n \n@@ -291,12 +291,12 @@ pub fn target_cpu(sess: &Session) -> &str {\n     }\n }\n \n-pub fn target_features(sess: &Session) -> Vec<Symbol> {\n+pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     supported_target_features(sess)\n         .iter()\n         .filter_map(\n             |&(feature, gate)| {\n-                if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n+                if sess.is_nightly_build() || allow_unstable || gate.is_none() { Some(feature) } else { None }\n             },\n         )\n         .filter(|_feature| {"}, {"sha": "c87d9a5406d3b88607011f947b2d4ffcad8160b6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -324,8 +324,8 @@ impl CodegenBackend for LlvmCodegenBackend {\n         llvm_util::print_version();\n     }\n \n-    fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n-        target_features(sess)\n+    fn target_features(&self, sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n+        target_features(sess, allow_unstable)\n     }\n \n     fn codegen_crate<'tcx>("}, {"sha": "5b3b7db12b7ced85539c16cb132e32661cfc5bd8", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -233,26 +233,29 @@ pub fn check_tied_features(\n \n // Used to generate cfg variables and apply features\n // Must express features in the way Rust understands them\n-pub fn target_features(sess: &Session) -> Vec<Symbol> {\n+pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n-    let mut features: Vec<Symbol> =\n-        supported_target_features(sess)\n-            .iter()\n-            .filter_map(|&(feature, gate)| {\n-                if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n-            })\n-            .filter(|feature| {\n-                // check that all features in a given smallvec are enabled\n-                for llvm_feature in to_llvm_features(sess, feature) {\n-                    let cstr = SmallCStr::new(llvm_feature);\n-                    if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n-                        return false;\n-                    }\n+    let mut features: Vec<Symbol> = supported_target_features(sess)\n+        .iter()\n+        .filter_map(|&(feature, gate)| {\n+            if sess.is_nightly_build() || allow_unstable || gate.is_none() {\n+                Some(feature)\n+            } else {\n+                None\n+            }\n+        })\n+        .filter(|feature| {\n+            // check that all features in a given smallvec are enabled\n+            for llvm_feature in to_llvm_features(sess, feature) {\n+                let cstr = SmallCStr::new(llvm_feature);\n+                if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n+                    return false;\n                 }\n-                true\n-            })\n-            .map(|feature| Symbol::intern(feature))\n-            .collect();\n+            }\n+            true\n+        })\n+        .map(|feature| Symbol::intern(feature))\n+        .collect();\n \n     // LLVM 14 changed the ABI for i128 arguments to __float/__fix builtins on Win64\n     // (see https://reviews.llvm.org/D110413). This unstable target feature is intended for use"}, {"sha": "779bd3ea278ec25f36bfb979e2b754a861e8d4cc", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -59,7 +59,7 @@ impl<'tcx, T> Backend<'tcx> for T where\n pub trait CodegenBackend {\n     fn init(&self, _sess: &Session) {}\n     fn print(&self, _req: PrintRequest, _sess: &Session) {}\n-    fn target_features(&self, _sess: &Session) -> Vec<Symbol> {\n+    fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<Symbol> {\n         vec![]\n     }\n     fn print_passes(&self) {}"}, {"sha": "a75383715a9ae76fcbac979ffeb9bb3c0074d9b6", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -48,7 +48,10 @@ pub fn add_configuration(\n ) {\n     let tf = sym::target_feature;\n \n-    let target_features = codegen_backend.target_features(sess);\n+    let unstable_target_features = codegen_backend.target_features(sess, true);\n+    sess.unstable_target_features.extend(unstable_target_features.iter().cloned());\n+\n+    let target_features = codegen_backend.target_features(sess, false);\n     sess.target_features.extend(target_features.iter().cloned());\n \n     cfg.extend(target_features.into_iter().map(|feat| (tf, Some(feat))));"}, {"sha": "5a83a1f6caec44a5a2b8b94174b1274bca0e99b7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -194,6 +194,9 @@ pub struct Session {\n \n     /// Set of enabled features for the current target.\n     pub target_features: FxHashSet<Symbol>,\n+\n+    /// Set of enabled features for the current target, including unstable ones.\n+    pub unstable_target_features: FxHashSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1341,6 +1344,7 @@ pub fn build_session(\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,\n         target_features: FxHashSet::default(),\n+        unstable_target_features: FxHashSet::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "016fafd3aec165b4d901a4dba9204bea1f358cb5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51f1b7e275584872525bbfbd7c481595b99f237/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e51f1b7e275584872525bbfbd7c481595b99f237", "patch": "@@ -3198,7 +3198,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n /// Computes the set of target features used in a function for the purposes of\n /// inline assembly.\n fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx FxHashSet<Symbol> {\n-    let mut target_features = tcx.sess.target_features.clone();\n+    let mut target_features = tcx.sess.unstable_target_features.clone();\n     if tcx.def_kind(did).has_codegen_attrs() {\n         let attrs = tcx.codegen_fn_attrs(did);\n         target_features.extend(&attrs.target_features);"}]}