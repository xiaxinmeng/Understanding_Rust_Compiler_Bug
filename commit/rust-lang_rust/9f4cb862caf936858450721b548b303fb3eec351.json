{"sha": "9f4cb862caf936858450721b548b303fb3eec351", "node_id": "C_kwDOAAsO6NoAKDlmNGNiODYyY2FmOTM2ODU4NDUwNzIxYjU0OGIzMDNmYjNlZWMzNTE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-02T17:47:04Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-03T15:50:53Z"}, "message": "Replace Fn impls with RPIT impls in rustc_index\n\nThis is cleaner and removes an unstable feature usage", "tree": {"sha": "1a8845c54d7b45f2a16d989b9b6c0d258f276196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8845c54d7b45f2a16d989b9b6c0d258f276196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4cb862caf936858450721b548b303fb3eec351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4cb862caf936858450721b548b303fb3eec351", "html_url": "https://github.com/rust-lang/rust/commit/9f4cb862caf936858450721b548b303fb3eec351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4cb862caf936858450721b548b303fb3eec351/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98f28907ec148a2aeff6bcdaa90151bdca05424", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98f28907ec148a2aeff6bcdaa90151bdca05424", "html_url": "https://github.com/rust-lang/rust/commit/e98f28907ec148a2aeff6bcdaa90151bdca05424"}], "stats": {"total": 73, "additions": 23, "deletions": 50}, "files": [{"sha": "f22d355e61344d9f0dbddb567d84b2fbd165ff33", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=9f4cb862caf936858450721b548b303fb3eec351", "patch": "@@ -144,7 +144,7 @@ impl<R> MemberConstraintSet<'tcx, R>\n where\n     R: Copy + Hash + Eq,\n {\n-    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> {\n+    crate fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> + '_ {\n         self.constraints.indices()\n     }\n "}, {"sha": "734a5b4972bcce6c3700489252412bd877a4d8bc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=9f4cb862caf936858450721b548b303fb3eec351", "patch": "@@ -497,7 +497,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Returns an iterator over all the region indices.\n-    pub fn regions(&self) -> impl Iterator<Item = RegionVid> {\n+    pub fn regions(&self) -> impl Iterator<Item = RegionVid> + '_ {\n         self.definitions.indices()\n     }\n "}, {"sha": "a72a27e07bd77fb2cc74f0ef85140aac307be79a", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=9f4cb862caf936858450721b548b303fb3eec351", "patch": "@@ -4,7 +4,6 @@\n #![feature(iter_zip)]\n #![feature(min_specialization)]\n #![feature(test)]\n-#![feature(fn_traits)]\n \n pub mod bit_set;\n pub mod vec;"}, {"sha": "56ea04539e57fc7abcc40be853fbc9425d079f8b", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=9f4cb862caf936858450721b548b303fb3eec351", "patch": "@@ -3,9 +3,9 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::iter::{self, FromIterator};\n+use std::iter::FromIterator;\n use std::marker::PhantomData;\n-use std::ops::{Index, IndexMut, Range, RangeBounds};\n+use std::ops::{Index, IndexMut, RangeBounds};\n use std::slice;\n use std::vec;\n \n@@ -518,8 +518,6 @@ impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n     }\n }\n \n-pub type Enumerated<I, J> = iter::Map<iter::Enumerate<J>, IntoIdx<I>>;\n-\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n     pub fn new() -> Self {\n@@ -596,8 +594,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn into_iter_enumerated(self) -> Enumerated<I, vec::IntoIter<T>> {\n-        self.raw.into_iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn into_iter_enumerated(\n+        self,\n+    ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {\n+        self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -606,13 +606,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated(&self) -> Enumerated<I, slice::Iter<'_, T>> {\n-        self.raw.iter().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &T)> + ExactSizeIterator + '_ {\n+        self.raw.iter().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n-    pub fn indices(&self) -> iter::Map<Range<usize>, IntoIdx<I>> {\n-        (0..self.len()).map(IntoIdx { _marker: PhantomData })\n+    pub fn indices(&self) -> impl DoubleEndedIterator<Item = I> + ExactSizeIterator + 'static {\n+        (0..self.len()).map(|n| I::new(n))\n     }\n \n     #[inline]\n@@ -621,8 +623,10 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn iter_enumerated_mut(&mut self) -> Enumerated<I, slice::IterMut<'_, T>> {\n-        self.raw.iter_mut().enumerate().map(IntoIdx { _marker: PhantomData })\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &mut T)> + ExactSizeIterator + '_ {\n+        self.raw.iter_mut().enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -638,7 +642,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n         &'a mut self,\n         range: R,\n     ) -> impl Iterator<Item = (I, T)> + 'a {\n-        self.raw.drain(range).enumerate().map(IntoIdx { _marker: PhantomData })\n+        self.raw.drain(range).enumerate().map(|(n, t)| (I::new(n), t))\n     }\n \n     #[inline]\n@@ -832,36 +836,5 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n     }\n }\n \n-pub struct IntoIdx<I: Idx> {\n-    _marker: PhantomData<fn(&I)>,\n-}\n-impl<I: Idx, T> FnOnce<((usize, T),)> for IntoIdx<I> {\n-    type Output = (I, T);\n-\n-    extern \"rust-call\" fn call_once(self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx, T> FnMut<((usize, T),)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, ((n, t),): ((usize, T),)) -> Self::Output {\n-        (I::new(n), t)\n-    }\n-}\n-\n-impl<I: Idx> FnOnce<(usize,)> for IntoIdx<I> {\n-    type Output = I;\n-\n-    extern \"rust-call\" fn call_once(self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n-impl<I: Idx> FnMut<(usize,)> for IntoIdx<I> {\n-    extern \"rust-call\" fn call_mut(&mut self, (n,): (usize,)) -> Self::Output {\n-        I::new(n)\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "f2b341593826b3e0e3dbd9705e023d9452611f6f", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cb862caf936858450721b548b303fb3eec351/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=9f4cb862caf936858450721b548b303fb3eec351", "patch": "@@ -1,6 +1,5 @@\n-use core::slice::Iter;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Enumerated, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -337,7 +336,9 @@ impl MovePathLookup {\n \n     /// An enumerated iterator of `local`s and their associated\n     /// `MovePathIndex`es.\n-    pub fn iter_locals_enumerated(&self) -> Enumerated<Local, Iter<'_, MovePathIndex>> {\n+    pub fn iter_locals_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (Local, &MovePathIndex)> + ExactSizeIterator {\n         self.locals.iter_enumerated()\n     }\n }"}]}