{"sha": "01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmJhMmM1MzJjMWY4YmZjMTQ2M2Q2NzJjNmIyZmM3OWJkOTY0OTU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-30T01:27:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-08T02:03:42Z"}, "message": "Eliminate the `SessionGlobals` from `librustc_ast`.\n\nBy moving `{known,used}_attrs` from `SessionGlobals` to `Session`. This\nmeans they are accessed via the `Session`, rather than via TLS. A few\n`Attr` methods and `librustc_ast` functions are now methods of\n`Session`.\n\nAll of this required passing a `Session` to lots of functions that didn't\nalready have one. Some of these functions also had arguments removed, because\nthose arguments could be accessed directly via the `Session` argument.\n\n`contains_feature_attr()` was dead, and is removed.\n\nSome functions were moved from `librustc_ast` elsewhere because they now need\nto access `Session`, which isn't available in that crate.\n- `entry_point_type()` --> `librustc_builtin_macros`\n- `global_allocator_spans()` --> `librustc_metadata`\n- `is_proc_macro_attr()` --> `Session`", "tree": {"sha": "bdcc81b213b5b65329abc96ae85550d24bbbc124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcc81b213b5b65329abc96ae85550d24bbbc124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "html_url": "https://github.com/rust-lang/rust/commit/01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7fa264ae71e155f6ba7997cb31e969cb3b723c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fa264ae71e155f6ba7997cb31e969cb3b723c6", "html_url": "https://github.com/rust-lang/rust/commit/a7fa264ae71e155f6ba7997cb31e969cb3b723c6"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "6a141f1fc786d2548f11241faa5793d7111ff7e9", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 return;\n             }\n             if cx.access_levels.is_exported(item.hir_id)\n-                && !is_proc_macro(&item.attrs)\n+                && !is_proc_macro(cx.sess(), &item.attrs)\n                 && attr_by_name(&item.attrs, \"no_mangle\").is_none()\n             {\n                 check_must_use_candidate(\n@@ -262,7 +262,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n             } else if cx.access_levels.is_exported(item.hir_id)\n-                && !is_proc_macro(&item.attrs)\n+                && !is_proc_macro(cx.sess(), &item.attrs)\n                 && trait_ref_of_method(cx, item.hir_id).is_none()\n             {\n                 check_must_use_candidate(\n@@ -294,7 +294,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n \n-                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n+                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(cx.sess(), &item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "4e49bdbdd21bd02a8b04c50f3bfd1ed991eced46", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "patch": "@@ -102,7 +102,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n                 \"this seems like a manual implementation of the non-exhaustive pattern\",\n                 |diag| {\n                     if_chain! {\n-                        if !attr::contains_name(&item.attrs, sym!(non_exhaustive));\n+                        if !item.attrs.iter().any(|attr| attr.has_name(sym!(non_exhaustive)));\n                         let header_span = cx.sess.source_map().span_until_char(item.span, '{');\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {\n@@ -154,7 +154,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n                 \"this seems like a manual implementation of the non-exhaustive pattern\",\n                 |diag| {\n                     if_chain! {\n-                        if !attr::contains_name(&item.attrs, sym!(non_exhaustive));\n+                        if !item.attrs.iter().any(|attr| attr.has_name(sym!(non_exhaustive)));\n                         let header_span = find_header_span(cx, item, data);\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {"}, {"sha": "603440c0f83763963e1bde30b9245b7a669c70f0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "patch": "@@ -2,7 +2,6 @@ use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n     Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n };\n-use rustc_ast::attr;\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -385,7 +384,7 @@ impl EarlyLintPass for NonExpressiveNames {\n }\n \n fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attribute], decl: &FnDecl, blk: &Block) {\n-    if !attr::contains_name(attrs, sym!(test)) {\n+    if !attrs.iter().any(|attr| attr.has_name(sym!(test))) {\n         let mut visitor = SimilarNamesLocalVisitor {\n             names: Vec::new(),\n             cx,"}, {"sha": "407527251da225d4d2b454c8f5eb77f5a84b7812", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "patch": "@@ -1,5 +1,4 @@\n use rustc_ast::ast;\n-use rustc_ast::expand::is_proc_macro_attr;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n use std::str::FromStr;\n@@ -126,6 +125,6 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n \n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n-pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(is_proc_macro_attr)\n+pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+    attrs.iter().any(|attr| sess.is_proc_macro_attr(attr))\n }"}, {"sha": "95a12fe193547d863783a5e6a2fbd4af9e8fed91", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bba2c532c1f8bfc1463d672c6b2fc79bd96495/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "patch": "@@ -932,7 +932,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// Checks for the `#[automatically_derived]` attribute all `#[derive]`d\n /// implementations have.\n pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n-    attr::contains_name(attrs, sym!(automatically_derived))\n+    attrs.iter().any(|attr| attr.has_name(sym!(automatically_derived)))\n }\n \n /// Remove blocks around an expression."}]}