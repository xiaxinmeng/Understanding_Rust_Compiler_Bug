{"sha": "210e059750911193af87eb514da0517d6d122189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMGUwNTk3NTA5MTExOTNhZjg3ZWI1MTRkYTA1MTdkNmQxMjIxODk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-11-07T02:30:49Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-11-19T10:17:56Z"}, "message": "clearly define `int` and `uint` to fix unsoundness\n\nThis fixes the gap in the language definition causing #18726 by defining\na clear bound on the maximum size for libraries to enforce.\n\nCloses #18069", "tree": {"sha": "eb5a46123640c18d19ee38fa637206b5e51fe368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5a46123640c18d19ee38fa637206b5e51fe368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210e059750911193af87eb514da0517d6d122189", "comment_count": 21, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210e059750911193af87eb514da0517d6d122189", "html_url": "https://github.com/rust-lang/rust/commit/210e059750911193af87eb514da0517d6d122189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210e059750911193af87eb514da0517d6d122189/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "html_url": "https://github.com/rust-lang/rust/commit/e09d98603e608c9e47d4c89f7b4dca87a4b56da3"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "5ee03f1b1d33863b32385c57f53a6656323f0754", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -3557,17 +3557,14 @@ The machine types are the following:\n \n #### Machine-dependent integer types\n \n-The Rust type `uint` [^rustuint] is an\n-unsigned integer type with target-machine-dependent size. Its size, in\n-bits, is equal to the number of bits required to hold any memory address on\n-the target machine.\n-\n-The Rust type `int` [^rustint]  is a two's complement signed integer type with\n-target-machine-dependent size. Its size, in bits, is equal to the size of the\n-rust type `uint` on the same target machine.\n-\n-[^rustuint]: A Rust `uint` is analogous to a C99 `uintptr_t`.\n-[^rustint]: A Rust `int` is analogous to a C99 `intptr_t`.\n+The `uint` type is an unsigned integer type with the same number of bits as the\n+platform's pointer type. It can represent every memory address in the process.\n+\n+The `int` type is a signed integer type with the same number of bits as the\n+platform's pointer type. The theoretical upper bound on object and array size\n+is the maximum `int` value. This ensures that `int` can be used to calculate\n+differences between pointers into an object or array and can address every byte\n+within an object along with one byte past the end.\n \n ### Textual types\n "}, {"sha": "5ef78c1475bf50c9f6b45d5f332503769040f223", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -464,17 +464,17 @@ fn ensure_struct_fits_in_address_space(ccx: &CrateContext,\n                                        scapegoat: ty::t) {\n     let mut offset = 0;\n     for &llty in fields.iter() {\n-        // Invariant: offset < ccx.max_obj_size() <= 1<<61\n+        // Invariant: offset < ccx.obj_size_bound() <= 1<<61\n         if !packed {\n             let type_align = machine::llalign_of_min(ccx, llty);\n             offset = roundup(offset, type_align);\n         }\n-        // type_align is a power-of-2, so still offset < ccx.max_obj_size()\n-        // llsize_of_alloc(ccx, llty) is also less than ccx.max_obj_size()\n+        // type_align is a power-of-2, so still offset < ccx.obj_size_bound()\n+        // llsize_of_alloc(ccx, llty) is also less than ccx.obj_size_bound()\n         // so the sum is less than 1<<62 (and therefore can't overflow).\n         offset += machine::llsize_of_alloc(ccx, llty);\n \n-        if offset >= ccx.max_obj_size() {\n+        if offset >= ccx.obj_size_bound() {\n             ccx.report_overbig_object(scapegoat);\n         }\n     }\n@@ -493,11 +493,11 @@ fn ensure_enum_fits_in_address_space(ccx: &CrateContext,\n     let discr_size = machine::llsize_of_alloc(ccx, ll_inttype(ccx, discr));\n     let (field_size, field_align) = union_size_and_align(fields);\n \n-    // field_align < 1<<32, discr_size <= 8, field_size < MAX_OBJ_SIZE <= 1<<61\n+    // field_align < 1<<32, discr_size <= 8, field_size < OBJ_SIZE_BOUND <= 1<<61\n     // so the sum is less than 1<<62 (and can't overflow).\n     let total_size = roundup(discr_size, field_align) + field_size;\n \n-    if total_size >= ccx.max_obj_size() {\n+    if total_size >= ccx.obj_size_bound() {\n         ccx.report_overbig_object(scapegoat);\n     }\n }"}, {"sha": "c0066ff4d81e1324505487d90066e320770ad917", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -703,8 +703,23 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local.trait_cache\n     }\n \n-    pub fn max_obj_size(&self) -> u64 {\n-        1<<31 /* FIXME #18069: select based on architecture */\n+    /// Return exclusive upper bound on object size.\n+    ///\n+    /// The theoretical maximum object size is defined as the maximum positive `int` value. This\n+    /// ensures that the `offset` semantics remain well-defined by allowing it to correctly index\n+    /// every address within an object along with one byte past the end, along with allowing `int`\n+    /// to store the difference between any two pointers into an object.\n+    ///\n+    /// The upper bound on 64-bit currently needs to be lower because LLVM uses a 64-bit integer to\n+    /// represent object size in bits. It would need to be 1 << 61 to account for this, but is\n+    /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable\n+    /// address space on 64-bit ARMv8 and x86_64.\n+    pub fn obj_size_bound(&self) -> u64 {\n+        match self.sess().target.target.target_word_size[] {\n+            \"32\" => 1 << 31,\n+            \"64\" => 1 << 47,\n+            _ => unreachable!() // error handled by config::build_target_config\n+        }\n     }\n \n     pub fn report_overbig_object(&self, obj: ty::t) -> ! {"}, {"sha": "6bba40ccc7a718840b351e7456cf099c153b2d4b", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -34,7 +34,7 @@ fn ensure_array_fits_in_address_space(ccx: &CrateContext,\n                                       scapegoat: ty::t) {\n     let esz = machine::llsize_of_alloc(ccx, llet);\n     match esz.checked_mul(size) {\n-        Some(n) if n < ccx.max_obj_size() => {}\n+        Some(n) if n < ccx.obj_size_bound() => {}\n         _ => { ccx.report_overbig_object(scapegoat) }\n     }\n }"}, {"sha": "4a85cb5753b7f64600a215d380260b135cbcd0b7", "filename": "src/test/compile-fail/huge-enum.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -12,6 +12,12 @@\n \n // FIXME: work properly with higher limits\n \n+#[cfg(target_word_size = \"32\")]\n fn main() {\n     let big: Option<[u32, ..(1<<29)-1]> = None;\n }\n+\n+#[cfg(target_word_size = \"64\")]\n+fn main() {\n+    let big: Option<[u32, ..(1<<45)-1]> = None;\n+}"}, {"sha": "d494e0bf40dea8a28712b1251379e0328c39eaaa", "filename": "src/test/run-pass/huge-largest-array.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/210e059750911193af87eb514da0517d6d122189/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e059750911193af87eb514da0517d6d122189/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs?ref=210e059750911193af87eb514da0517d6d122189", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::size_of;\n+\n+#[cfg(target_word_size = \"32\")]\n+pub fn main() {\n+    assert_eq!(size_of::<[u8, ..(1 << 31) - 1]>(), (1 << 31) - 1);\n+}\n+\n+#[cfg(target_word_size = \"64\")]\n+pub fn main() {\n+    assert_eq!(size_of::<[u8, ..(1 << 47) - 1]>(), (1 << 47) - 1);\n+}"}]}