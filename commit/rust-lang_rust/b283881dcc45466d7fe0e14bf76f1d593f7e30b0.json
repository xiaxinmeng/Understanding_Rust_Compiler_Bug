{"sha": "b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODM4ODFkY2M0NTQ2NmQ3ZmUwZTE0YmY3NmYxZDU5M2Y3ZTMwYjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-17T23:24:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T01:27:46Z"}, "message": "rollup merge of #22394: alexcrichton/vec-from-iter-comment\n\nRequested by Niko in #22200 (and is good to have anyway)", "tree": {"sha": "70aaea3aa68044267538836e52b07e0190d9f116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70aaea3aa68044267538836e52b07e0190d9f116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "html_url": "https://github.com/rust-lang/rust/commit/b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b283881dcc45466d7fe0e14bf76f1d593f7e30b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8450d69bbb7bb5c288fba01295551b78a5a8c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8450d69bbb7bb5c288fba01295551b78a5a8c03", "html_url": "https://github.com/rust-lang/rust/commit/d8450d69bbb7bb5c288fba01295551b78a5a8c03"}, {"sha": "95a28c9bbdd581c97a515df765df33a23d4bc019", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a28c9bbdd581c97a515df765df33a23d4bc019", "html_url": "https://github.com/rust-lang/rust/commit/95a28c9bbdd581c97a515df765df33a23d4bc019"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "245711f67059ae838191cb2b839d06220ca02fc5", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b283881dcc45466d7fe0e14bf76f1d593f7e30b0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b283881dcc45466d7fe0e14bf76f1d593f7e30b0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "patch": "@@ -1407,7 +1407,7 @@ impl<T> ops::DerefMut for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n-    fn from_iter<I:Iterator<Item=T>>(iterator: I) -> Vec<T> {\n+    fn from_iter<I:Iterator<Item=T>>(mut iterator: I) -> Vec<T> {\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n \n@@ -1417,22 +1417,31 @@ impl<T> FromIterator<T> for Vec<T> {\n         //          vector.push(item);\n         //      }\n         //\n-        // This equivalent crucially runs the iterator precisely once. The\n-        // optimization below (eliding bound/growth checks) means that we\n-        // actually run the iterator twice. To ensure the \"moral equivalent\" we\n-        // do a `fuse()` operation to ensure that the iterator continues to\n-        // return `None` after seeing the first `None`.\n-        let mut i = iterator.fuse();\n-        for element in i.by_ref().take(vector.capacity()) {\n+        // This equivalent crucially runs the iterator precisely once. Below we\n+        // actually in theory run the iterator twice (one without bounds checks\n+        // and one with). To achieve the \"moral equivalent\", we use the `if`\n+        // statement below to break out early.\n+        //\n+        // If the first loop has terminated, then we have one of two conditions.\n+        //\n+        // 1. The underlying iterator returned `None`. In this case we are\n+        //    guaranteed that less than `vector.capacity()` elements have been\n+        //    returned, so we break out early.\n+        // 2. The underlying iterator yielded `vector.capacity()` elements and\n+        //    has not yielded `None` yet. In this case we run the iterator to\n+        //    its end below.\n+        for element in iterator.by_ref().take(vector.capacity()) {\n             let len = vector.len();\n             unsafe {\n                 ptr::write(vector.get_unchecked_mut(len), element);\n                 vector.set_len(len + 1);\n             }\n         }\n \n-        for element in i {\n-            vector.push(element)\n+        if vector.len() == vector.capacity() {\n+            for element in iterator {\n+                vector.push(element);\n+            }\n         }\n         vector\n     }"}]}