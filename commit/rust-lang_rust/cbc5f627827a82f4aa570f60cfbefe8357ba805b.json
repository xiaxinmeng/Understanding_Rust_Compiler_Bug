{"sha": "cbc5f627827a82f4aa570f60cfbefe8357ba805b", "node_id": "C_kwDOAAsO6NoAKGNiYzVmNjI3ODI3YTgyZjRhYTU3MGY2MGNmYmVmZTgzNTdiYTgwNWI", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-07-20T14:33:50Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-08-05T01:43:39Z"}, "message": "Move shared logic of `try_rfold` and `advance_back_by` into `iter_try_rfold`", "tree": {"sha": "de455d5f03734fbf561867cc64e14c69cd860f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de455d5f03734fbf561867cc64e14c69cd860f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc5f627827a82f4aa570f60cfbefe8357ba805b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc5f627827a82f4aa570f60cfbefe8357ba805b", "html_url": "https://github.com/rust-lang/rust/commit/cbc5f627827a82f4aa570f60cfbefe8357ba805b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc5f627827a82f4aa570f60cfbefe8357ba805b/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff8d0527956aefc2da09d93fe14a3e87fd6ca1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff8d0527956aefc2da09d93fe14a3e87fd6ca1a", "html_url": "https://github.com/rust-lang/rust/commit/8ff8d0527956aefc2da09d93fe14a3e87fd6ca1a"}], "stats": {"total": 119, "additions": 65, "deletions": 54}, "files": [{"sha": "67f9d7fcc94db30734a0c89e94f3d68615fd3454", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 65, "deletions": 54, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/cbc5f627827a82f4aa570f60cfbefe8357ba805b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc5f627827a82f4aa570f60cfbefe8357ba805b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=cbc5f627827a82f4aa570f60cfbefe8357ba805b", "patch": "@@ -108,6 +108,11 @@ where\n     {\n         self.inner.rfold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -254,6 +259,11 @@ where\n     {\n         self.inner.rfold(init, fold)\n     }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.inner.advance_back_by(n)\n+    }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n@@ -330,6 +340,46 @@ where\n     }\n }\n \n+impl<I, U> FlattenCompat<I, U>\n+where\n+    I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U>>,\n+{\n+    /// Folds over the inner iterators in reverse order as long as the given function returns\n+    /// successfully, always storing the most recent inner iterator in `self.backiter`.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `try_rfold` and\n+    /// `advance_back_by` methods.\n+    #[inline]\n+    fn iter_try_rfold<Acc, Fold, R>(&mut self, mut acc: Acc, mut fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, &mut U) -> R,\n+        R: Try<Output = Acc>,\n+    {\n+        #[inline]\n+        fn flatten<'a, T: IntoIterator, Acc, R: Try>(\n+            backiter: &'a mut Option<T::IntoIter>,\n+            fold: &'a mut impl FnMut(Acc, &mut T::IntoIter) -> R,\n+        ) -> impl FnMut(Acc, T) -> R + 'a {\n+            move |acc, iter| fold(acc, backiter.insert(iter.into_iter()))\n+        }\n+\n+        if let Some(iter) = &mut self.backiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.backiter = None;\n+\n+        acc = self.iter.try_rfold(acc, flatten(&mut self.backiter, &mut fold))?;\n+        self.backiter = None;\n+\n+        if let Some(iter) = &mut self.frontiter {\n+            acc = fold(acc, iter)?;\n+        }\n+        self.frontiter = None;\n+\n+        try { acc }\n+    }\n+}\n+\n impl<I, U> Iterator for FlattenCompat<I, U>\n where\n     I: Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n@@ -452,42 +502,20 @@ where\n     }\n \n     #[inline]\n-    fn try_rfold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R\n+    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Output = Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Output = Acc>>(\n-            backiter: &'a mut Option<T::IntoIter>,\n-            fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n-        ) -> impl FnMut(Acc, T) -> R + 'a\n-        where\n-            T::IntoIter: DoubleEndedIterator,\n-        {\n-            move |acc, x| {\n-                let mut mid = x.into_iter();\n-                let r = mid.try_rfold(acc, &mut *fold);\n-                *backiter = Some(mid);\n-                r\n-            }\n-        }\n-\n-        if let Some(ref mut back) = self.backiter {\n-            init = back.try_rfold(init, &mut fold)?;\n-        }\n-        self.backiter = None;\n-\n-        init = self.iter.try_rfold(init, flatten(&mut self.backiter, &mut fold))?;\n-        self.backiter = None;\n-\n-        if let Some(ref mut front) = self.frontiter {\n-            init = front.try_rfold(init, &mut fold)?;\n+        fn flatten<U: DoubleEndedIterator, Acc, R: Try<Output = Acc>>(\n+            mut fold: impl FnMut(Acc, U::Item) -> R,\n+        ) -> impl FnMut(Acc, &mut U) -> R {\n+            move |acc, iter| iter.try_rfold(acc, &mut fold)\n         }\n-        self.frontiter = None;\n \n-        try { init }\n+        self.iter_try_rfold(init, flatten(fold))\n     }\n \n     #[inline]\n@@ -521,36 +549,19 @@ where\n     #[inline]\n     #[rustc_inherit_overflow_checks]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        loop {\n-            if let Some(ref mut back) = self.backiter {\n-                match back.advance_back_by(rem) {\n-                    ret @ Ok(_) => return ret,\n-                    Err(advanced) => rem -= advanced,\n-                }\n-            }\n-            match self.iter.next_back() {\n-                Some(iterable) => self.backiter = Some(iterable.into_iter()),\n-                _ => break,\n-            }\n-        }\n-\n-        self.backiter = None;\n-\n-        if let Some(ref mut front) = self.frontiter {\n-            match front.advance_back_by(rem) {\n-                ret @ Ok(_) => return ret,\n-                Err(advanced) => rem -= advanced,\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n+            match iter.advance_back_by(n) {\n+                Ok(()) => ControlFlow::BREAK,\n+                Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n \n-        if rem > 0 {\n-            return Err(n - rem);\n+        match self.iter_try_rfold(n, advance) {\n+            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n+            _ => Ok(()),\n         }\n-\n-        self.frontiter = None;\n-\n-        Ok(())\n     }\n }\n "}]}