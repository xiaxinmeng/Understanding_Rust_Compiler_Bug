{"sha": "b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjU1NzhhNGExMDQ5ZjBhMjkyMDVlMzVjNjFmMGY0N2UzYWU2ZGM=", "commit": {"author": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-03T15:24:38Z"}, "committer": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-09-03T15:24:38Z"}, "message": "backticks and testcase", "tree": {"sha": "9801c86799f1b65e250ad653ab1fdb4c0e15ef4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9801c86799f1b65e250ad653ab1fdb4c0e15ef4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "html_url": "https://github.com/rust-lang/rust/commit/b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/comments", "author": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1615a8a2b6cc41352856cb9630b1e450d881a0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1615a8a2b6cc41352856cb9630b1e450d881a0c5", "html_url": "https://github.com/rust-lang/rust/commit/1615a8a2b6cc41352856cb9630b1e450d881a0c5"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "db2fbbad8763217a76312ce7679252ce9162b175", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "patch": "@@ -52,7 +52,7 @@ declare_clippy_lint! {\n /// **Known problems:** Will add unnecessary pair of parentheses when the\n /// expression is not wrapped in a pair but starts with a opening parenthesis\n /// and ends with a closing one.\n-/// I.e: let _ = (f()+1)..(f()+1) results in let _ = ((f()+1)..(f()+1)).\n+/// I.e: `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..(f()+1))`.\n ///\n /// **Example:**\n /// ```rust"}, {"sha": "1ee3637f266d7654eda12f7ebcc2ef476bd533f7", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "patch": "@@ -27,6 +27,7 @@ fn main() {\n     let _ = ..11-1;\n     let _ = ..=11-1;\n     let _ = ..=(11-1);\n+    let _ = (1..11+1);\n     let _ = (f()+1)..(f()+1);\n \n     let mut vec: Vec<()> = std::vec::Vec::new();"}, {"sha": "3fe4e7ca073f990b6bfb6863397681b3bfa4b2e3", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825578a4a1049f0a29205e35c61f0f47e3ae6dc/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=b825578a4a1049f0a29205e35c61f0f47e3ae6dc", "patch": "@@ -41,8 +41,14 @@ error: an exclusive range would be more readable\n error: an inclusive range would be more readable\n   --> $DIR/range_plus_minus_one.rs:30:13\n    |\n-28 |     let _ = (f()+1)..(f()+1);\n+30 |     let _ = (1..11+1);\n+   |             ^^^^^^^^^ help: use: `(1..=11)`\n+\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:31:13\n+   |\n+31 |     let _ = (f()+1)..(f()+1);\n    |             ^^^^^^^^^^^^^^^^ help: use: `((f()+1)..=f())`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}