{"sha": "0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzNlY2ZhYjE1ZmU1YmFmNDVjZmQ0NTJjMjMxN2E3ZjE4ZjY5YmQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-13T19:19:16Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-15T23:22:56Z"}, "message": "Split ops tests", "tree": {"sha": "b18db1ef1670a0f22079d2f610b7b2ff65a9f58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18db1ef1670a0f22079d2f610b7b2ff65a9f58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "html_url": "https://github.com/rust-lang/rust/commit/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976fafcf4fb8008255ce57bc62738a46f8a9152f", "url": "https://api.github.com/repos/rust-lang/rust/commits/976fafcf4fb8008255ce57bc62738a46f8a9152f", "html_url": "https://github.com/rust-lang/rust/commit/976fafcf4fb8008255ce57bc62738a46f8a9152f"}], "stats": {"total": 289, "additions": 137, "deletions": 152}, "files": [{"sha": "6e3802aae6a49ad64f73b3317976e92373573b4d", "filename": "crates/core_simd/tests/f32_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_float_tests! { SimdF32, f32, i32 }"}, {"sha": "da31cc3161bd0564bd87457d21dd433d6fc5b02d", "filename": "crates/core_simd/tests/f64_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_float_tests! { SimdF64, f64, i64 }"}, {"sha": "618a75250bdad5f40dd8264e680650a9b9d3d9e1", "filename": "crates/core_simd/tests/float.rs", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ffloat.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -1,139 +0,0 @@\n-macro_rules! impl_op_test {\n-    { unary, $vector:ty, $scalar:ty, $trait:ident :: $fn:ident } => {\n-        test_helpers::test_lanes! {\n-            fn $fn<const LANES: usize>() {\n-                test_helpers::test_unary_elementwise(\n-                    &<$vector as core::ops::$trait>::$fn,\n-                    &<$scalar as core::ops::$trait>::$fn,\n-                    &|_| true,\n-                );\n-            }\n-        }\n-    };\n-    { binary, $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident } => {\n-        mod $fn {\n-            use super::*;\n-\n-            test_helpers::test_lanes! {\n-                fn normal<const LANES: usize>() {\n-                    test_helpers::test_binary_elementwise(\n-                        &<$vector as core::ops::$trait>::$fn,\n-                        &<$scalar as core::ops::$trait>::$fn,\n-                        &|_, _| true,\n-                    );\n-                }\n-\n-                fn scalar_rhs<const LANES: usize>() {\n-                    test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &<$vector as core::ops::$trait<$scalar>>::$fn,\n-                        &<$scalar as core::ops::$trait>::$fn,\n-                        &|_, _| true,\n-                    );\n-                }\n-\n-                fn scalar_lhs<const LANES: usize>() {\n-                    test_helpers::test_binary_scalar_lhs_elementwise(\n-                        &<$scalar as core::ops::$trait<$vector>>::$fn,\n-                        &<$scalar as core::ops::$trait>::$fn,\n-                        &|_, _| true,\n-                    );\n-                }\n-\n-                fn assign<const LANES: usize>() {\n-                    test_helpers::test_binary_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        &|mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        &|_, _| true,\n-                    )\n-                }\n-\n-                fn assign_scalar_rhs<const LANES: usize>() {\n-                    test_helpers::test_binary_scalar_rhs_elementwise(\n-                        &|mut a, b| { <$vector as core::ops::$trait_assign<$scalar>>::$fn_assign(&mut a, b); a },\n-                        &|mut a, b| { <$scalar as core::ops::$trait_assign>::$fn_assign(&mut a, b); a },\n-                        &|_, _| true,\n-                    )\n-                }\n-            }\n-        }\n-    };\n-}\n-\n-macro_rules! impl_tests {\n-    { $vector:ident, $scalar:tt, $int_scalar:tt } => {\n-        mod $scalar {\n-            type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n-            type Scalar = $scalar;\n-            type IntScalar = $int_scalar;\n-\n-            impl_op_test! { unary, Vector<LANES>, Scalar, Neg::neg }\n-            impl_op_test! { binary, Vector<LANES>, Scalar, Add::add, AddAssign::add_assign }\n-            impl_op_test! { binary, Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign }\n-            impl_op_test! { binary, Vector<LANES>, Scalar, Mul::mul, SubAssign::sub_assign }\n-            impl_op_test! { binary, Vector<LANES>, Scalar, Div::div, DivAssign::div_assign }\n-            impl_op_test! { binary, Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign }\n-\n-            test_helpers::test_lanes! {\n-                fn abs<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::abs,\n-                        &Scalar::abs,\n-                        &|_| true,\n-                    )\n-                }\n-\n-                fn ceil<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::ceil,\n-                        &Scalar::ceil,\n-                        &|_| true,\n-                    )\n-                }\n-\n-                fn floor<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::floor,\n-                        &Scalar::floor,\n-                        &|_| true,\n-                    )\n-                }\n-\n-                fn round_from_int<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::round_from_int,\n-                        &|x| x as Scalar,\n-                        &|_| true,\n-                    )\n-                }\n-\n-                fn to_int_unchecked<const LANES: usize>() {\n-                    // The maximum integer that can be represented by the equivalently sized float has\n-                    // all of the mantissa digits set to 1, pushed up to the MSB.\n-                    const ALL_MANTISSA_BITS: IntScalar = ((1 << <Scalar>::MANTISSA_DIGITS) - 1);\n-                    const MAX_REPRESENTABLE_VALUE: Scalar =\n-                        (ALL_MANTISSA_BITS << (core::mem::size_of::<Scalar>() * 8 - <Scalar>::MANTISSA_DIGITS as usize - 1)) as Scalar;\n-\n-                    let mut runner = proptest::test_runner::TestRunner::default();\n-                    runner.run(\n-                        &test_helpers::array::UniformArrayStrategy::new(-MAX_REPRESENTABLE_VALUE..MAX_REPRESENTABLE_VALUE),\n-                        |x| {\n-                            let result_1 = unsafe { Vector::from_array(x).to_int_unchecked().to_array() };\n-                            let result_2 = {\n-                                let mut result = [0; LANES];\n-                                for (i, o) in x.iter().zip(result.iter_mut()) {\n-                                    *o = unsafe { i.to_int_unchecked() };\n-                                }\n-                                result\n-                            };\n-                            test_helpers::prop_assert_biteq!(result_1, result_2);\n-                            Ok(())\n-                        },\n-                    ).unwrap();\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl_tests! { SimdF32, f32, i32 }\n-impl_tests! { SimdF64, f64, i64 }"}, {"sha": "874324463cf17637538b65ce3c227a9f542eca48", "filename": "crates/core_simd/tests/i128_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdI128, i128 }"}, {"sha": "ebdbf60bce493303436db29d92af1df1633bab38", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdI16, i16 }"}, {"sha": "5c2c41cdb18dd378c9ca5fb5cf70cfc1dc54a0ff", "filename": "crates/core_simd/tests/i32_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdI32, i32 }"}, {"sha": "9321755d6719bdb0534e439270382134ed49af22", "filename": "crates/core_simd/tests/i64_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdI64, i64 }"}, {"sha": "bea49c3a646855a394f7af7ab9e020649d75262b", "filename": "crates/core_simd/tests/i8_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdI8, i8 }"}, {"sha": "5ec29f232738bc033a1feebab7edf6653ba1d5af", "filename": "crates/core_simd/tests/isize_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_signed_tests! { SimdIsize, isize }"}, {"sha": "dc920c649d5585af2e08d6086d5b007b2276e78c", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "renamed", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -1,3 +1,4 @@\n+#[macro_export]\n macro_rules! impl_unary_op_test {\n     { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $scalar_fn:expr } => {\n         test_helpers::test_lanes! {\n@@ -15,6 +16,7 @@ macro_rules! impl_unary_op_test {\n     };\n }\n \n+#[macro_export]\n macro_rules! impl_binary_op_test {\n     { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr } => {\n         mod $fn {\n@@ -68,6 +70,7 @@ macro_rules! impl_binary_op_test {\n     };\n }\n \n+#[macro_export]\n macro_rules! impl_binary_checked_op_test {\n     { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $trait_assign:ident :: $fn_assign:ident, $scalar_fn:expr, $check_fn:expr } => {\n         mod $fn {\n@@ -121,6 +124,7 @@ macro_rules! impl_binary_checked_op_test {\n     };\n }\n \n+#[macro_export]\n macro_rules! impl_signed_tests {\n     { $vector:ident, $scalar:tt } => {\n         mod $scalar {\n@@ -151,6 +155,7 @@ macro_rules! impl_signed_tests {\n     }\n }\n \n+#[macro_export]\n macro_rules! impl_unsigned_tests {\n     { $vector:ident, $scalar:tt } => {\n         mod $scalar {\n@@ -171,16 +176,79 @@ macro_rules! impl_unsigned_tests {\n     }\n }\n \n-impl_signed_tests! { SimdI8, i8 }\n-impl_signed_tests! { SimdI16, i16 }\n-impl_signed_tests! { SimdI32, i32 }\n-impl_signed_tests! { SimdI64, i64 }\n-impl_signed_tests! { SimdI128, i128 }\n-impl_signed_tests! { SimdIsize, isize }\n-\n-impl_unsigned_tests! { SimdU8, u8 }\n-impl_unsigned_tests! { SimdU16, u16 }\n-impl_unsigned_tests! { SimdU32, u32 }\n-impl_unsigned_tests! { SimdU64, u64 }\n-impl_unsigned_tests! { SimdU128, u128 }\n-impl_unsigned_tests! { SimdUsize, usize }\n+#[macro_export]\n+macro_rules! impl_float_tests {\n+    { $vector:ident, $scalar:tt, $int_scalar:tt } => {\n+        mod $scalar {\n+            type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n+            type Scalar = $scalar;\n+            type IntScalar = $int_scalar;\n+\n+            impl_unary_op_test!(Vector<LANES>, Scalar, Neg::neg);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Add::add, AddAssign::add_assign);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Sub::sub, SubAssign::sub_assign);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Mul::mul, SubAssign::sub_assign);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign);\n+            impl_binary_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign);\n+\n+            test_helpers::test_lanes! {\n+                fn abs<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::abs,\n+                        &Scalar::abs,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn ceil<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::ceil,\n+                        &Scalar::ceil,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn floor<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::floor,\n+                        &Scalar::floor,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn round_from_int<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::round_from_int,\n+                        &|x| x as Scalar,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn to_int_unchecked<const LANES: usize>() {\n+                    // The maximum integer that can be represented by the equivalently sized float has\n+                    // all of the mantissa digits set to 1, pushed up to the MSB.\n+                    const ALL_MANTISSA_BITS: IntScalar = ((1 << <Scalar>::MANTISSA_DIGITS) - 1);\n+                    const MAX_REPRESENTABLE_VALUE: Scalar =\n+                        (ALL_MANTISSA_BITS << (core::mem::size_of::<Scalar>() * 8 - <Scalar>::MANTISSA_DIGITS as usize - 1)) as Scalar;\n+\n+                    let mut runner = proptest::test_runner::TestRunner::default();\n+                    runner.run(\n+                        &test_helpers::array::UniformArrayStrategy::new(-MAX_REPRESENTABLE_VALUE..MAX_REPRESENTABLE_VALUE),\n+                        |x| {\n+                            let result_1 = unsafe { Vector::from_array(x).to_int_unchecked().to_array() };\n+                            let result_2 = {\n+                                let mut result = [0; LANES];\n+                                for (i, o) in x.iter().zip(result.iter_mut()) {\n+                                    *o = unsafe { i.to_int_unchecked() };\n+                                }\n+                                result\n+                            };\n+                            test_helpers::prop_assert_biteq!(result_1, result_2);\n+                            Ok(())\n+                        },\n+                    ).unwrap();\n+                }\n+            }\n+        }\n+    }\n+}", "previous_filename": "crates/core_simd/tests/integer.rs"}, {"sha": "eea7e3297c6689f3844778863cab2408fde70ac8", "filename": "crates/core_simd/tests/u128_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdU128, u128 }"}, {"sha": "ce9951a87c0a1c511c7ddd8adfb63c33e8a8bc93", "filename": "crates/core_simd/tests/u16_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdU16, u16 }"}, {"sha": "87bedbd43b7c66e79a4ad5087e604c46f86dbce6", "filename": "crates/core_simd/tests/u32_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdU32, u32 }"}, {"sha": "ec76891da66ed288b53070ec34eac7ef63413364", "filename": "crates/core_simd/tests/u64_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdU64, u64 }"}, {"sha": "00a63d8461336f5ed7d1f26c2241efd9e7acf227", "filename": "crates/core_simd/tests/u8_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdU8, u8 }"}, {"sha": "dd49c656cbe82843b164f4ccee6c22416b2f08d1", "filename": "crates/core_simd/tests/usize_ops.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs?ref=0ec3ecfab15fe5baf45cfd452c2317a7f18f69bd", "patch": "@@ -0,0 +1,4 @@\n+#[macro_use]\n+#[path = \"ops_macros.rs\"]\n+mod macros;\n+impl_unsigned_tests! { SimdUsize, usize }"}]}