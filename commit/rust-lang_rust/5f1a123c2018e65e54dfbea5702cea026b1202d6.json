{"sha": "5f1a123c2018e65e54dfbea5702cea026b1202d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWExMjNjMjAxOGU2NWU1NGRmYmVhNTcwMmNlYTAyNmIxMjAyZDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-18T08:21:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T08:21:40Z"}, "message": "Rollup merge of #54273 - csmoe:lint_ty_lit, r=estebank\n\nSuggest to change numeric literal instead of casting\n\nCloses #54160\nr? @estebank", "tree": {"sha": "2b2743f7c629c6d376871905694355f9526d3048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2743f7c629c6d376871905694355f9526d3048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1a123c2018e65e54dfbea5702cea026b1202d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboLWUCRBK7hj4Ov3rIwAAdHIIAGShBtdPkC69MEkYdSpRBwjn\ngJKq7xHVKFbP6yLOv8Tqb8a+AYBMYIr7WaTBYVE+9poTrmRAYNmIAU3NypSge/sF\n40Kdtkx+/fMnxhSealWaIIeEGZ2HFRWp6rMtSMyQtyxTQu503p8q9MnUwAqpu8st\nfMypj21t+J9FmC1IZ1LftrA3Zs6NMcqWv5bXt2bZVMf1CY4ifROTFfOLmRPlndJw\nwkqnh5MGOAjidVIcz4uvKE60zCcWW+wEWuFJdjRACDcvpsG1gLh9lNobj/jdYTYT\nSTulOoFG3kVr3zylcEsrbZpvkNECRYfJCF2nUqlAZQ5iG5w6GGQrs8YIAdHrnH0=\n=taFZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b2743f7c629c6d376871905694355f9526d3048\nparent 22d38123ba1515cb107ab08905e9b2a231d6628c\nparent 2fb6585f33bf1af3b6b5143347eb534cebd257e4\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1537258900 +0200\ncommitter GitHub <noreply@github.com> 1537258900 +0200\n\nRollup merge of #54273 - csmoe:lint_ty_lit, r=estebank\n\nSuggest to change numeric literal instead of casting\n\nCloses #54160\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1a123c2018e65e54dfbea5702cea026b1202d6", "html_url": "https://github.com/rust-lang/rust/commit/5f1a123c2018e65e54dfbea5702cea026b1202d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1a123c2018e65e54dfbea5702cea026b1202d6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d38123ba1515cb107ab08905e9b2a231d6628c", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d38123ba1515cb107ab08905e9b2a231d6628c", "html_url": "https://github.com/rust-lang/rust/commit/22d38123ba1515cb107ab08905e9b2a231d6628c"}, {"sha": "2fb6585f33bf1af3b6b5143347eb534cebd257e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6585f33bf1af3b6b5143347eb534cebd257e4", "html_url": "https://github.com/rust-lang/rust/commit/2fb6585f33bf1af3b6b5143347eb534cebd257e4"}], "stats": {"total": 134, "additions": 113, "deletions": 21}, "files": [{"sha": "e78cd4891a5ea99fa4004b55a02b508b29c74a9e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5f1a123c2018e65e54dfbea5702cea026b1202d6", "patch": "@@ -415,10 +415,55 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           src,\n                                           if needs_paren { \")\" } else { \"\" },\n                                           expected_ty);\n-            let into_suggestion = format!(\"{}{}{}.into()\",\n-                                          if needs_paren { \"(\" } else { \"\" },\n-                                          src,\n-                                          if needs_paren { \")\" } else { \"\" });\n+            let into_suggestion = format!(\n+                \"{}{}{}.into()\",\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                if needs_paren { \")\" } else { \"\" },\n+            );\n+            let literal_is_ty_suffixed = |expr: &hir::Expr| {\n+                if let hir::ExprKind::Lit(lit) = &expr.node {\n+                    lit.node.is_suffixed()\n+                } else {\n+                    false\n+                }\n+            };\n+\n+            let into_sugg = into_suggestion.clone();\n+            let suggest_to_change_suffix_or_into = |err: &mut DiagnosticBuilder,\n+                                                    note: Option<&str>| {\n+                let suggest_msg = if literal_is_ty_suffixed(expr) {\n+                    format!(\n+                        \"change the type of the numeric literal from `{}` to `{}`\",\n+                        checked_ty,\n+                        expected_ty,\n+                    )\n+                } else {\n+                    match note {\n+                        Some(note) => format!(\"{}, which {}\", msg, note),\n+                        _ => format!(\"{} in a lossless way\", msg),\n+                    }\n+                };\n+\n+                let suffix_suggestion = format!(\n+                    \"{}{}{}{}\",\n+                    if needs_paren { \"(\" } else { \"\" },\n+                    src.trim_right_matches(&checked_ty.to_string()),\n+                    expected_ty,\n+                    if needs_paren { \")\" } else { \"\" },\n+                );\n+\n+                err.span_suggestion_with_applicability(\n+                    expr.span,\n+                    &suggest_msg,\n+                    if literal_is_ty_suffixed(expr) {\n+                        suffix_suggestion\n+                    } else {\n+                        into_sugg\n+                    },\n+                    Applicability::MachineApplicable,\n+                );\n+            };\n \n             match (&expected_ty.sty, &checked_ty.sty) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n@@ -444,11 +489,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n+                            suggest_to_change_suffix_or_into(\n+                                err,\n+                                Some(will_sign_extend),\n                             );\n                         }\n                     }\n@@ -477,12 +520,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_zero_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n-                            );\n+                           suggest_to_change_suffix_or_into(\n+                               err,\n+                               Some(will_zero_extend),\n+                           );\n                         }\n                     }\n                     true\n@@ -583,12 +624,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n-                        err.span_suggestion_with_applicability(\n-                            expr.span,\n-                            &format!(\"{} in a lossless way\", msg),\n-                            into_suggestion,\n-                            Applicability::MachineApplicable\n-                        );\n+                       suggest_to_change_suffix_or_into(\n+                           err,\n+                           None,\n+                       );\n                     } else if can_cast {\n                         err.span_suggestion_with_applicability(\n                             expr.span,"}, {"sha": "516b2e8dd30bfec3403206898feb70faad717314", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs?ref=5f1a123c2018e65e54dfbea5702cea026b1202d6", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: u16) {}\n+fn foo1(_: f64) {}\n+fn foo2(_: i32) {}\n+\n+fn main() {\n+    foo(1u8);\n+    foo1(2f32);\n+    foo2(3i16);\n+}\n+"}, {"sha": "e2fe1a0914d4f22af6cf167b7f60a00bf729b87b", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1a123c2018e65e54dfbea5702cea026b1202d6/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=5f1a123c2018e65e54dfbea5702cea026b1202d6", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:16:9\n+   |\n+LL |     foo(1u8);\n+   |         ^^^ expected u16, found u8\n+help: change the type of the numeric literal from `u8` to `u16`\n+   |\n+LL |     foo(1u16);\n+   |         ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:17:10\n+   |\n+LL |     foo1(2f32);\n+   |          ^^^^ expected f64, found f32\n+help: change the type of the numeric literal from `f32` to `f64`\n+   |\n+LL |     foo1(2f64);\n+   |          ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:18:10\n+   |\n+LL |     foo2(3i16);\n+   |          ^^^^ expected i32, found i16\n+help: change the type of the numeric literal from `i16` to `i32`\n+   |\n+LL |     foo2(3i32);\n+   |          ^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}