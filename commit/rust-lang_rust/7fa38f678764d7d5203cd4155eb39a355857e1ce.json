{"sha": "7fa38f678764d7d5203cd4155eb39a355857e1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTM4ZjY3ODc2NGQ3ZDUyMDNjZDQxNTVlYjM5YTM1NTg1N2UxY2U=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-21T20:54:22Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T15:09:39Z"}, "message": "Fix FP with `mut_mut` and `for` loops", "tree": {"sha": "506ac082576647fa705fb6982d91ff95c22a7467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506ac082576647fa705fb6982d91ff95c22a7467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa38f678764d7d5203cd4155eb39a355857e1ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXc+SzAAoJEF5CfHlMukXocMoP/2aGMiB8Y5uubbVLCTDjtURg\nXHiJrAmkMKjonMwk7HUgIqfakbfUNEFXUeH6R0lit/Xppg6ibhGBnYfOC9xPc6po\nKu6eDAn3iHhnWgyfab2MxUjKLoZgqDs6HqxV1b9vpKrOeGr+q/GA0o9J1YY+gf3m\nk/np+1PWeMJJhhyUq3eonpzP40FdqahRLeFZ2uBGM3HPJNGm4DSEDY6cu+Y4whf+\naDAgIQb3pzgzclmCZHSzIlW39m5Twk/P+P5GIZeaUXEqqdVbY+WYNaG4n4g7UA9U\n84LNRkd67HQEBqkw7eXEE+hLLi2GXbzL+V0zcXVwPJwRA1yDX4yKeKHMKLSJ57tQ\n1gFHjHPsBeybJwUnMWD3DGdIp34rIFEfl1tGyLMNrbhjs11b7XQUjGS2AOZ08QGc\ny2vtPDvxmRCafPbUtisKNsrLRrLIbax7fhoKa+qoasX6ugmekNx0Pkaq3ZeJ38Eo\nsVTACLV/P0U/LyAsjXEIKL+0ulCE8bz/EsSPFkBSL6zRIhyKJbXxo4C0yR24byyZ\ndtTVumJCQifA/J/Nn5Dwd2pFcWVsGy+X+Z/8tnEke+RhMkpP2bupV6XvuywERBTv\nnPmPs/viwJKhEBIEpbbqKljAaM7jxRf4uKgAGslc3no5J4o0Fbm09/CWjL9CUdyr\nk3+TR3GlKn2zW0cGFr4S\n=acnU\n-----END PGP SIGNATURE-----", "payload": "tree 506ac082576647fa705fb6982d91ff95c22a7467\nparent 5f6b982bc945ae2f2ee9f8d2629c5efb18f7daf1\nauthor mcarton <cartonmartin+git@gmail.com> 1466542462 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467212979 +0200\n\nFix FP with `mut_mut` and `for` loops\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa38f678764d7d5203cd4155eb39a355857e1ce", "html_url": "https://github.com/rust-lang/rust/commit/7fa38f678764d7d5203cd4155eb39a355857e1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa38f678764d7d5203cd4155eb39a355857e1ce/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6b982bc945ae2f2ee9f8d2629c5efb18f7daf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6b982bc945ae2f2ee9f8d2629c5efb18f7daf1", "html_url": "https://github.com/rust-lang/rust/commit/5f6b982bc945ae2f2ee9f8d2629c5efb18f7daf1"}], "stats": {"total": 90, "additions": 69, "deletions": 21}, "files": [{"sha": "8a5439fb11e316d05101dec89bc21c9e2857800f", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7fa38f678764d7d5203cd4155eb39a355857e1ce/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa38f678764d7d5203cd4155eb39a355857e1ce/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=7fa38f678764d7d5203cd4155eb39a355857e1ce", "patch": "@@ -1,7 +1,8 @@\n+use rustc::hir;\n+use rustc::hir::intravisit;\n use rustc::lint::*;\n use rustc::ty::{TypeAndMut, TyRef};\n-use rustc::hir::*;\n-use utils::{in_external_macro, span_lint};\n+use utils::{in_external_macro, recover_for_loop, span_lint};\n \n /// **What it does:** This lint checks for instances of `mut mut` references.\n ///\n@@ -27,30 +28,56 @@ impl LintPass for MutMut {\n }\n \n impl LateLintPass for MutMut {\n-    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        if in_external_macro(cx, expr.span) {\n+    fn check_block(&mut self, cx: &LateContext, block: &hir::Block) {\n+        intravisit::walk_block(&mut MutVisitor { cx: cx }, block);\n+    }\n+\n+    fn check_ty(&mut self, cx: &LateContext, ty: &hir::Ty) {\n+        use rustc::hir::intravisit::Visitor;\n+\n+        MutVisitor { cx: cx }.visit_ty(ty);\n+    }\n+}\n+\n+pub struct MutVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for MutVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'v hir::Expr) {\n+        if in_external_macro(self.cx, expr.span) {\n             return;\n         }\n \n-        if let ExprAddrOf(MutMutable, ref e) = expr.node {\n-            if let ExprAddrOf(MutMutable, _) = e.node {\n-                span_lint(cx, MUT_MUT, expr.span, \"generally you want to avoid `&mut &mut _` if possible\");\n-            } else {\n-                if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n-                    span_lint(cx,\n-                              MUT_MUT,\n-                              expr.span,\n-                              \"this expression mutably borrows a mutable reference. Consider reborrowing\");\n-                }\n+        if let Some((_, arg, body)) = recover_for_loop(expr) {\n+            // A `for` loop lowers to:\n+            // ```rust\n+            // match ::std::iter::Iterator::next(&mut iter) {\n+            // //                                ^^^^\n+            // ```\n+            // Let's ignore the generated code.\n+            intravisit::walk_expr(self, arg);\n+            intravisit::walk_expr(self, body);\n+        } else if let hir::ExprAddrOf(hir::MutMutable, ref e) = expr.node {\n+            if let hir::ExprAddrOf(hir::MutMutable, _) = e.node {\n+                span_lint(self.cx, MUT_MUT, expr.span, \"generally you want to avoid `&mut &mut _` if possible\");\n+            } else if let TyRef(_, TypeAndMut { mutbl: hir::MutMutable, .. }) = self.cx.tcx.expr_ty(e).sty {\n+                span_lint(self.cx,\n+                          MUT_MUT,\n+                          expr.span,\n+                          \"this expression mutably borrows a mutable reference. Consider reborrowing\");\n             }\n         }\n     }\n \n-    fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n-        if let TyRptr(_, MutTy { ty: ref pty, mutbl: MutMutable }) = ty.node {\n-            if let TyRptr(_, MutTy { mutbl: MutMutable, .. }) = pty.node {\n-                span_lint(cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n+    fn visit_ty(&mut self, ty: &hir::Ty) {\n+        if let hir::TyRptr(_, hir::MutTy { ty: ref pty, mutbl: hir::MutMutable }) = ty.node {\n+            if let hir::TyRptr(_, hir::MutTy { mutbl: hir::MutMutable, .. }) = pty.node {\n+                span_lint(self.cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n             }\n+\n         }\n+\n+        intravisit::walk_ty(self, ty);\n     }\n }"}, {"sha": "edcc6906f082827a702f9583479e40198ef92bfc", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7fa38f678764d7d5203cd4155eb39a355857e1ce/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa38f678764d7d5203cd4155eb39a355857e1ce/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=7fa38f678764d7d5203cd4155eb39a355857e1ce", "patch": "@@ -2,16 +2,15 @@\n #![plugin(clippy)]\n \n #![allow(unused, no_effect, unnecessary_operation)]\n+#![deny(mut_mut)]\n \n //#![plugin(regex_macros)]\n //extern crate regex;\n \n-#[deny(mut_mut)]\n fn fun(x : &mut &mut u32) -> bool { //~ERROR generally you want to avoid `&mut &mut\n     **x > 0\n }\n \n-#[deny(mut_mut)]\n fn less_fun(x : *mut *mut u32) {\n   let y = x;\n }\n@@ -21,23 +20,45 @@ macro_rules! mut_ptr {\n     //~^ ERROR generally you want to avoid `&mut &mut\n }\n \n-#[deny(mut_mut)]\n #[allow(unused_mut, unused_variables)]\n fn main() {\n     let mut x = &mut &mut 1u32; //~ERROR generally you want to avoid `&mut &mut\n     {\n         let mut y = &mut x; //~ERROR this expression mutably borrows a mutable reference\n     }\n \n+    if fun(x) {\n+        let y : &mut &mut u32 = &mut &mut 2;\n+        //~^ ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n+        **y + **x;\n+    }\n+\n     if fun(x) {\n         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n         //~^ ERROR generally you want to avoid `&mut &mut\n         //~| ERROR generally you want to avoid `&mut &mut\n         //~| ERROR generally you want to avoid `&mut &mut\n         //~| ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n         ***y + **x;\n     }\n \n     let mut z = mut_ptr!(&mut 3u32);\n     //~^ NOTE in this expansion of mut_ptr!\n }\n+\n+fn issue939() {\n+    let array = [5, 6, 7, 8, 9];\n+    let mut args = array.iter().skip(2);\n+    for &arg in &mut args {\n+        println!(\"{}\", arg);\n+    }\n+\n+    let args = &mut args;\n+    for arg in args {\n+        println!(\":{}\", arg);\n+    }\n+}"}]}