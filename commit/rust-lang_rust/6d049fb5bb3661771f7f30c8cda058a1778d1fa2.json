{"sha": "6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDQ5ZmI1YmIzNjYxNzcxZjdmMzBjOGNkYTA1OGExNzc4ZDFmYTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-04T15:33:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-10T10:21:39Z"}, "message": "incr.comp.: Cache DepNodes with corresponding query results.", "tree": {"sha": "668243bd42fafc3bb28ac2b149c0e0fc3c0ef80d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/668243bd42fafc3bb28ac2b149c0e0fc3c0ef80d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "html_url": "https://github.com/rust-lang/rust/commit/6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0363a23c357e9ace418573b424233353eea62cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0363a23c357e9ace418573b424233353eea62cbc", "html_url": "https://github.com/rust-lang/rust/commit/0363a23c357e9ace418573b424233353eea62cbc"}], "stats": {"total": 120, "additions": 85, "deletions": 35}, "files": [{"sha": "277b69262c92d2e633968a60f7e28ee526f12a6c", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "patch": "@@ -19,21 +19,24 @@ use super::debug::EdgeFilter;\n \n pub struct DepGraphEdges {\n     nodes: Vec<DepNode>,\n-    indices: FxHashMap<DepNode, IdIndex>,\n-    edges: FxHashSet<(IdIndex, IdIndex)>,\n+    indices: FxHashMap<DepNode, DepNodeIndex>,\n+    edges: FxHashSet<(DepNodeIndex, DepNodeIndex)>,\n     task_stack: Vec<OpenTask>,\n     forbidden_edge: Option<EdgeFilter>,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-struct IdIndex {\n+pub struct DepNodeIndex {\n     index: u32\n }\n \n-impl IdIndex {\n-    fn new(v: usize) -> IdIndex {\n+impl DepNodeIndex {\n+\n+    pub const INVALID: DepNodeIndex = DepNodeIndex { index: ::std::u32::MAX };\n+\n+    fn new(v: usize) -> DepNodeIndex {\n         assert!((v & 0xFFFF_FFFF) == v);\n-        IdIndex { index: v as u32 }\n+        DepNodeIndex { index: v as u32 }\n     }\n \n     fn index(self) -> usize {\n@@ -80,7 +83,7 @@ impl DepGraphEdges {\n         }\n     }\n \n-    fn id(&self, index: IdIndex) -> DepNode {\n+    fn id(&self, index: DepNodeIndex) -> DepNode {\n         self.nodes[index.index()]\n     }\n \n@@ -101,7 +104,7 @@ impl DepGraphEdges {\n         });\n     }\n \n-    pub fn pop_task(&mut self, key: DepNode) {\n+    pub fn pop_task(&mut self, key: DepNode) -> DepNodeIndex {\n         let popped_node = self.task_stack.pop().unwrap();\n \n         if let OpenTask::Regular {\n@@ -117,6 +120,8 @@ impl DepGraphEdges {\n                 let source_id = self.get_or_create_node(read);\n                 self.edges.insert((source_id, target_id));\n             }\n+\n+            target_id\n         } else {\n             bug!(\"pop_task() - Expected regular task to be popped\")\n         }\n@@ -129,7 +134,7 @@ impl DepGraphEdges {\n         });\n     }\n \n-    pub fn pop_anon_task(&mut self, kind: DepKind) -> DepNode {\n+    pub fn pop_anon_task(&mut self, kind: DepKind) -> DepNodeIndex {\n         let popped_node = self.task_stack.pop().unwrap();\n \n         if let OpenTask::Anon {\n@@ -155,8 +160,8 @@ impl DepGraphEdges {\n                 hash: fingerprint,\n             };\n \n-            if self.indices.contains_key(&target_dep_node) {\n-                return target_dep_node;\n+            if let Some(&index) = self.indices.get(&target_dep_node) {\n+                return index;\n             }\n \n             let target_id = self.get_or_create_node(target_dep_node);\n@@ -166,7 +171,7 @@ impl DepGraphEdges {\n                 self.edges.insert((source_id, target_id));\n             }\n \n-            target_dep_node\n+            target_id\n         } else {\n             bug!(\"pop_anon_task() - Expected anonymous task to be popped\")\n         }\n@@ -210,6 +215,11 @@ impl DepGraphEdges {\n         }\n     }\n \n+    pub fn read_index(&mut self, source: DepNodeIndex) {\n+        let dep_node = self.nodes[source.index()];\n+        self.read(dep_node);\n+    }\n+\n     pub fn query(&self) -> DepGraphQuery {\n         let edges: Vec<_> = self.edges.iter()\n                                       .map(|&(i, j)| (self.id(i), self.id(j)))\n@@ -229,7 +239,7 @@ impl DepGraphEdges {\n     }\n \n     #[inline]\n-    fn get_or_create_node(&mut self, dep_node: DepNode) -> IdIndex {\n+    fn get_or_create_node(&mut self, dep_node: DepNode) -> DepNodeIndex {\n         let DepGraphEdges {\n             ref mut indices,\n             ref mut nodes,\n@@ -239,7 +249,7 @@ impl DepGraphEdges {\n         *indices.entry(dep_node).or_insert_with(|| {\n             let next_id = nodes.len();\n             nodes.push(dep_node);\n-            IdIndex::new(next_id)\n+            DepNodeIndex::new(next_id)\n         })\n      }\n }"}, {"sha": "de8b7ddb6ca81ccfa2670643a3270ba6cb2918ee", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "patch": "@@ -17,7 +17,7 @@ use super::dep_node::{DepNode, DepKind, WorkProductId};\n use super::query::DepGraphQuery;\n use super::raii;\n use super::safe::DepGraphSafe;\n-use super::edges::DepGraphEdges;\n+use super::edges::{DepGraphEdges, DepNodeIndex};\n \n #[derive(Clone)]\n pub struct DepGraph {\n@@ -108,16 +108,27 @@ impl DepGraph {\n     ///   `arg` parameter.\n     ///\n     /// [README]: README.md\n-    pub fn with_task<C, A, R>(&self, key: DepNode, cx: C, arg: A, task: fn(C, A) -> R) -> R\n-        where C: DepGraphSafe, A: DepGraphSafe\n+    pub fn with_task<C, A, R>(&self,\n+                              key: DepNode,\n+                              cx: C,\n+                              arg: A,\n+                              task: fn(C, A) -> R)\n+                              -> (R, DepNodeIndex)\n+        where C: DepGraphSafe\n     {\n-        let _task = self.in_task(key);\n-        task(cx, arg)\n+        if let Some(ref data) = self.data {\n+            data.edges.borrow_mut().push_task(key);\n+            let result = task(cx, arg);\n+            let dep_node_index = data.edges.borrow_mut().pop_task(key);\n+            (result, dep_node_index)\n+        } else {\n+            (task(cx, arg), DepNodeIndex::INVALID)\n+        }\n     }\n \n     /// Execute something within an \"anonymous\" task, that is, a task the\n     /// DepNode of which is determined by the list of inputs it read from.\n-    pub fn with_anon_task<OP,R>(&self, dep_kind: DepKind, op: OP) -> (R, DepNode)\n+    pub fn with_anon_task<OP,R>(&self, dep_kind: DepKind, op: OP) -> (R, DepNodeIndex)\n         where OP: FnOnce() -> R\n     {\n         if let Some(ref data) = self.data {\n@@ -126,7 +137,7 @@ impl DepGraph {\n             let dep_node = data.edges.borrow_mut().pop_anon_task(dep_kind);\n             (result, dep_node)\n         } else {\n-            (op(), DepNode::new_no_params(DepKind::Krate))\n+            (op(), DepNodeIndex::INVALID)\n         }\n     }\n \n@@ -137,6 +148,13 @@ impl DepGraph {\n         }\n     }\n \n+    #[inline]\n+    pub fn read_index(&self, v: DepNodeIndex) {\n+        if let Some(ref data) = self.data {\n+            data.edges.borrow_mut().read_index(v);\n+        }\n+    }\n+\n     /// Only to be used during graph loading\n     #[inline]\n     pub fn add_edge_directly(&self, source: DepNode, target: DepNode) {"}, {"sha": "ac0c88ced93c83962d6b1c46471a29eb2700d477", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "patch": "@@ -22,6 +22,7 @@ pub use self::dep_node::DepNode;\n pub use self::dep_node::WorkProductId;\n pub use self::graph::DepGraph;\n pub use self::graph::WorkProduct;\n+pub use self::edges::DepNodeIndex;\n pub use self::query::DepGraphQuery;\n pub use self::safe::AssertDepGraphSafe;\n pub use self::safe::DepGraphSafe;"}, {"sha": "e94308f351011660bd911f5aa8aafe5118fcbf5e", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::{DepConstructor, DepNode};\n+use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n@@ -186,7 +186,7 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n \n struct QueryMap<D: QueryDescription> {\n     phantom: PhantomData<D>,\n-    map: FxHashMap<D::Key, D::Value>,\n+    map: FxHashMap<D::Key, (D::Value, DepNodeIndex)>,\n }\n \n impl<M: QueryDescription> QueryMap<M> {\n@@ -580,7 +580,8 @@ macro_rules! define_maps {\n                        key,\n                        span);\n \n-                if let Some(result) = tcx.maps.$name.borrow().map.get(&key) {\n+                if let Some(&(ref result, dep_node_index)) = tcx.maps.$name.borrow().map.get(&key) {\n+                    tcx.dep_graph.read_index(dep_node_index);\n                     return Ok(f(result));\n                 }\n \n@@ -591,26 +592,46 @@ macro_rules! define_maps {\n                     span = key.default_span(tcx)\n                 }\n \n-                let _task = tcx.dep_graph.in_task(Self::to_dep_node(tcx, &key));\n-\n-                let result = tcx.cycle_check(span, Query::$name(key), || {\n-                    let provider = tcx.maps.providers[key.map_crate()].$name;\n-                    provider(tcx.global_tcx(), key)\n+                let (result, dep_node_index) = tcx.cycle_check(span, Query::$name(key), || {\n+                    let dep_node = Self::to_dep_node(tcx, &key);\n+\n+                    if dep_node.kind.is_anon() {\n+                        tcx.dep_graph.with_anon_task(dep_node.kind, || {\n+                            let provider = tcx.maps.providers[key.map_crate()].$name;\n+                            provider(tcx.global_tcx(), key)\n+                        })\n+                    } else {\n+                        fn run_provider<'a, 'tcx, 'lcx>(tcx: TyCtxt<'a, 'tcx, 'lcx>,\n+                                                        key: $K)\n+                                                        -> $V {\n+                            let provider = tcx.maps.providers[key.map_crate()].$name;\n+                            provider(tcx.global_tcx(), key)\n+                        }\n+\n+                        tcx.dep_graph.with_task(dep_node, tcx, key, run_provider)\n+                    }\n                 })?;\n \n-                Ok(f(tcx.maps.$name.borrow_mut().map.entry(key).or_insert(result)))\n+                tcx.dep_graph.read_index(dep_node_index);\n+\n+                Ok(f(&tcx.maps\n+                         .$name\n+                         .borrow_mut()\n+                         .map\n+                         .entry(key)\n+                         .or_insert((result, dep_node_index))\n+                         .0))\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)\n                            -> Result<$V, CycleError<'a, $tcx>> {\n-                // We register the `read` here, but not in `force`, since\n-                // `force` does not give access to the value produced (and thus\n-                // we actually don't read it).\n-                tcx.dep_graph.read(Self::to_dep_node(tcx, &key));\n                 Self::try_get_with(tcx, span, key, Clone::clone)\n             }\n \n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n+                // Ignore dependencies, since we not reading the computed value\n+                let _task = tcx.dep_graph.in_ignore();\n+\n                 match Self::try_get_with(tcx, span, key, |_| ()) {\n                     Ok(()) => {}\n                     Err(e) => tcx.report_cycle(e)"}, {"sha": "9feccc1337266ab0d0d2fd9852b2b846683cac94", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d049fb5bb3661771f7f30c8cda058a1778d1fa2/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6d049fb5bb3661771f7f30c8cda058a1778d1fa2", "patch": "@@ -1120,7 +1120,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .into_iter()\n         .map(|cgu| {\n             let dep_node = cgu.work_product_dep_node();\n-            let (stats, module) =\n+            let ((stats, module), _) =\n                 tcx.dep_graph.with_task(dep_node,\n                                         AssertDepGraphSafe(&shared_ccx),\n                                         AssertDepGraphSafe(cgu),"}]}