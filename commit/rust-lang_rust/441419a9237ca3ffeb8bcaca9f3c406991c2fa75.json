{"sha": "441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTQxOWE5MjM3Y2EzZmZlYjhiY2FjYTlmM2M0MDY5OTFjMmZhNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-06T09:31:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-06T09:31:05Z"}, "message": "properly catch invalid-drop-fn errors", "tree": {"sha": "517fc58e7de4a10abfe9cfef0c07b9220da00103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517fc58e7de4a10abfe9cfef0c07b9220da00103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "html_url": "https://github.com/rust-lang/rust/commit/441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19bd72e62390740afd8d6afd5fd57c04e8469b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19bd72e62390740afd8d6afd5fd57c04e8469b4f", "html_url": "https://github.com/rust-lang/rust/commit/19bd72e62390740afd8d6afd5fd57c04e8469b4f"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "ffe71eb3a0924c8008fd65fd657542d0ed9e77cd", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "patch": "@@ -3,8 +3,7 @@ use super::{AllocId, Pointer, RawConst, ScalarMaybeUndef};\n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::LayoutError;\n use crate::ty::query::TyCtxtAt;\n-use crate::ty::tls;\n-use crate::ty::{self, layout, Ty};\n+use crate::ty::{self, layout, tls, FnSig, Ty};\n \n use rustc_data_structures::sync::Lock;\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n@@ -329,7 +328,7 @@ impl fmt::Display for CheckInAllocMsg {\n }\n \n /// Error information for when the program caused Undefined Behavior.\n-pub enum UndefinedBehaviorInfo {\n+pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n     /// Unreachable code was executed.\n@@ -347,6 +346,8 @@ pub enum UndefinedBehaviorInfo {\n     PointerArithOverflow,\n     /// Invalid metadata in a wide pointer (using `str` to avoid allocations).\n     InvalidMeta(&'static str),\n+    /// Invalid drop function in vtable.\n+    InvalidDropFn(FnSig<'tcx>),\n     /// Reading a C string that does not end within its allocation.\n     UnterminatedCString(Pointer),\n     /// Dereferencing a dangling pointer after it got freed.\n@@ -393,7 +394,7 @@ pub enum UndefinedBehaviorInfo {\n     },\n }\n \n-impl fmt::Display for UndefinedBehaviorInfo {\n+impl fmt::Display for UndefinedBehaviorInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n@@ -406,6 +407,11 @@ impl fmt::Display for UndefinedBehaviorInfo {\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n+            InvalidDropFn(sig) => write!(\n+                f,\n+                \"invalid drop function signature: got {}, expected exactly one argument which must be a pointer type\",\n+                sig\n+            ),\n             UnterminatedCString(p) => write!(\n                 f,\n                 \"reading a null-terminated string starting at {} with no null found before end of allocation\",\n@@ -448,9 +454,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n             InvalidFunctionPointer(p) => {\n                 write!(f, \"using {} as function pointer but it does not point to a function\", p)\n             }\n-            InvalidStr(err) => {\n-                write!(f, \"this string is not valid UTF-8: {}\", err)\n-            }\n+            InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {}\", err),\n             InvalidUndefBytes(Some(p)) => write!(\n                 f,\n                 \"reading uninitialized memory at {}, but this operation requires initialized memory\",\n@@ -554,7 +558,7 @@ impl dyn MachineStopType {\n \n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n-    UndefinedBehavior(UndefinedBehaviorInfo),\n+    UndefinedBehavior(UndefinedBehaviorInfo<'tcx>),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n     Unsupported(UnsupportedOpInfo),"}, {"sha": "db836d88dd05eaa0b45850dcaab7f7f266becb49", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "patch": "@@ -327,8 +327,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn read_str(&self, mplace: MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;\n-        let str = ::std::str::from_utf8(bytes)\n-            .map_err(|err| err_ub!(InvalidStr(err)))?;\n+        let str = ::std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;\n         Ok(str)\n     }\n "}, {"sha": "23673487d2b23b6cb906e259c41048b931362a1f", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "patch": "@@ -147,13 +147,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();\n         if args.len() != 1 {\n-            throw_ub_format!(\"drop fn should have 1 argument, but signature is {:?}\", fn_sig);\n+            throw_ub!(InvalidDropFn(fn_sig));\n         }\n         let ty = args[0]\n             .builtin_deref(true)\n-            .ok_or_else(|| {\n-                err_ub_format!(\"drop fn argument type {} is not a pointer type\", args[0])\n-            })?\n+            .ok_or_else(|| err_ub!(InvalidDropFn(fn_sig)))?\n             .ty;\n         Ok((drop_instance, ty))\n     }"}, {"sha": "2c62070b1b1d9d1698128304bb1e139e63e98c2d", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441419a9237ca3ffeb8bcaca9f3c406991c2fa75/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=441419a9237ca3ffeb8bcaca9f3c406991c2fa75", "patch": "@@ -313,6 +313,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     self.ecx.read_drop_type_from_vtable(vtable),\n                     self.path,\n+                    err_ub!(InvalidDropFn(..)) |\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n                     err_unsup!(ReadBytesAsPointer) =>"}]}