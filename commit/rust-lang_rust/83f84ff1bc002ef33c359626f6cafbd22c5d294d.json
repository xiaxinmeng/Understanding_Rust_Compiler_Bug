{"sha": "83f84ff1bc002ef33c359626f6cafbd22c5d294d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjg0ZmYxYmMwMDJlZjMzYzM1OTYyNmY2Y2FmYmQyMmM1ZDI5NGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-14T19:58:04Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-15T08:21:20Z"}, "message": "Use out-of-tree rustc serialize\n\nAnd remove a few data structures in favour of rls-data ones", "tree": {"sha": "3b2efb37525d97b774a64ba6be572bd7ac9c7946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2efb37525d97b774a64ba6be572bd7ac9c7946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f84ff1bc002ef33c359626f6cafbd22c5d294d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f84ff1bc002ef33c359626f6cafbd22c5d294d", "html_url": "https://github.com/rust-lang/rust/commit/83f84ff1bc002ef33c359626f6cafbd22c5d294d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f84ff1bc002ef33c359626f6cafbd22c5d294d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77e52875b13ec4554cf963b3b0e25743772752d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77e52875b13ec4554cf963b3b0e25743772752d", "html_url": "https://github.com/rust-lang/rust/commit/a77e52875b13ec4554cf963b3b0e25743772752d"}], "stats": {"total": 175, "additions": 80, "deletions": 95}, "files": [{"sha": "818a6c2f7c5c9e4761469cef9e600e51baf0ec6c", "filename": "src/Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -27,7 +27,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -75,7 +75,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -122,7 +122,7 @@ name = \"cmake\"\n version = \"0.1.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -140,7 +140,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -196,7 +196,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -205,7 +205,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.43\"\n+version = \"0.3.44\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -410,7 +410,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"rls-data\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/nrc/rls-data#eb8de823771ef33edf78dc18fc0b279e6c4b6336\"\n+source = \"git+https://github.com/nrc/rls-data#aa5268cae09f4594303b0560c55627dfa8f75839\"\n dependencies = [\n  \"rls-span 0.1.0 (git+https://github.com/nrc/rls-span)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -604,7 +604,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -719,7 +719,7 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rls-data 0.1.0 (git+https://github.com/nrc/rls-data)\",\n  \"rustc 0.0.0\",\n- \"serialize 0.0.0\",\n+ \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -779,7 +779,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -827,7 +827,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -998,7 +998,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n+\"checksum gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a32cd40070d7611ab76343dcb3204b2bb28c8a9450989a83a3d590248142f439\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2249f6f0dc5a3bb2b3b1a8f797dfccbc4b053344d773d654ad565e51427d335\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\""}, {"sha": "c4cbe426548a1acbdb2e10fc6a237ad9b66dcb24", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }\n-serialize = { path = \"../libserialize\" }\n+# FIXME should move rustc serialize out of tree\n+rustc-serialize = \"0.3\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n rls-data = { git = \"https://github.com/nrc/rls-data\" }"}, {"sha": "d4ded71a3339091fa2b53af1e650b0f3770ef25e", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -28,7 +28,7 @@ pub struct CrateData {\n \n /// Data for any entity in the Rust language. The actual data contained varies\n /// with the kind of entity being queried. See the nested structs for details.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub enum Data {\n     /// Data for Enums.\n     EnumData(EnumData),\n@@ -79,7 +79,7 @@ pub enum Data {\n     VariableRefData(VariableRefData),\n }\n \n-#[derive(Eq, PartialEq, Clone, Copy, Debug, RustcEncodable)]\n+#[derive(Eq, PartialEq, Clone, Copy, Debug)]\n pub enum Visibility {\n     Public,\n     Restricted,\n@@ -109,7 +109,7 @@ impl<'a> From<&'a hir::Visibility> for Visibility {\n }\n \n /// Data for the prelude of a crate.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n     pub crate_root: String,\n@@ -118,7 +118,7 @@ pub struct CratePreludeData {\n }\n \n /// Data for enum declarations.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct EnumData {\n     pub id: NodeId,\n     pub name: String,\n@@ -134,7 +134,7 @@ pub struct EnumData {\n }\n \n /// Data for extern crates.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ExternCrateData {\n     pub id: NodeId,\n     pub name: String,\n@@ -145,15 +145,15 @@ pub struct ExternCrateData {\n }\n \n /// Data about a function call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct FunctionCallData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n \n /// Data for all kinds of functions and methods.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct FunctionData {\n     pub id: NodeId,\n     pub name: String,\n@@ -170,14 +170,14 @@ pub struct FunctionData {\n }\n \n /// Data about a function call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct FunctionRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ImplData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -186,7 +186,7 @@ pub struct ImplData {\n     pub self_ref: Option<DefId>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n // FIXME: this struct should not exist. However, removing it requires heavy\n // refactoring of dump_visitor.rs. See PR 31838 for more info.\n pub struct ImplData2 {\n@@ -200,15 +200,15 @@ pub struct ImplData2 {\n     pub self_ref: Option<TypeRefData>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct InheritanceData {\n     pub span: Span,\n     pub base_id: DefId,\n     pub deriv_id: NodeId\n }\n \n /// Data about a macro declaration.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MacroData {\n     pub span: Span,\n     pub name: String,\n@@ -217,7 +217,7 @@ pub struct MacroData {\n }\n \n /// Data about a macro use.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MacroUseData {\n     pub span: Span,\n     pub name: String,\n@@ -230,7 +230,7 @@ pub struct MacroUseData {\n }\n \n /// Data about a method call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MethodCallData {\n     pub span: Span,\n     pub scope: NodeId,\n@@ -239,7 +239,7 @@ pub struct MethodCallData {\n }\n \n /// Data for method declarations (methods with a body are treated as functions).\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct MethodData {\n     pub id: NodeId,\n     pub name: String,\n@@ -256,7 +256,7 @@ pub struct MethodData {\n }\n \n /// Data for modules.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ModData {\n     pub id: NodeId,\n     pub name: String,\n@@ -272,15 +272,15 @@ pub struct ModData {\n }\n \n /// Data for a reference to a module.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ModRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: Option<DefId>,\n     pub qualname: String\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct StructData {\n     pub span: Span,\n     pub name: String,\n@@ -296,7 +296,7 @@ pub struct StructData {\n     pub attributes: Vec<Attribute>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct StructVariantData {\n     pub span: Span,\n     pub name: String,\n@@ -311,7 +311,7 @@ pub struct StructVariantData {\n     pub attributes: Vec<Attribute>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TraitData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -326,7 +326,7 @@ pub struct TraitData {\n     pub attributes: Vec<Attribute>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TupleVariantData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -342,7 +342,7 @@ pub struct TupleVariantData {\n }\n \n /// Data for a typedef.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TypeDefData {\n     pub id: NodeId,\n     pub name: String,\n@@ -357,15 +357,15 @@ pub struct TypeDefData {\n }\n \n /// Data for a reference to a type or trait.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct TypeRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: Option<DefId>,\n     pub qualname: String,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct UseData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -375,7 +375,7 @@ pub struct UseData {\n     pub visibility: Visibility,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct UseGlobData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -385,7 +385,7 @@ pub struct UseGlobData {\n }\n \n /// Data for local and global variables (consts and statics).\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct VariableData {\n     pub id: NodeId,\n     pub kind: VariableKind,\n@@ -402,7 +402,7 @@ pub struct VariableData {\n     pub attributes: Vec<Attribute>,\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub enum VariableKind {\n     Static,\n     Const,\n@@ -412,7 +412,7 @@ pub enum VariableKind {\n \n /// Data for the use of some item (e.g., the use of a local variable, which\n /// will refer to that variables declaration (by ref_id)).\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct VariableRefData {\n     pub name: String,\n     pub span: Span,\n@@ -424,7 +424,7 @@ pub struct VariableRefData {\n /// Encodes information about the signature of a definition. This should have\n /// enough information to create a nice display about a definition without\n /// access to the source code.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct Signature {\n     pub span: Span,\n     pub text: String,\n@@ -438,7 +438,7 @@ pub struct Signature {\n \n /// An element of a signature. `start` and `end` are byte offsets into the `text`\n /// of the parent `Signature`.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct SigElement {\n     pub id: DefId,\n     pub start: usize,"}, {"sha": "4efc3d7baa6497012cdc8eb249fa81b5d3a45420", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -139,7 +139,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             let lo_loc = self.span.sess.codemap().lookup_char_pos(c.span.lo);\n             ExternalCrateData {\n                 name: c.name,\n-                num: CrateNum::from_u32(c.number),\n+                num: c.number,\n                 file_name: SpanUtils::make_path_string(&lo_loc.file.name),\n             }\n         }).collect();"}, {"sha": "bf296283da42608a58fb899f03b270e6660953f5", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -21,7 +21,7 @@ use std::path::PathBuf;\n \n use data::{self, Visibility, SigElement};\n \n-use rls_data::{SpanData, CratePreludeData};\n+use rls_data::{SpanData, CratePreludeData, Attribute};\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n@@ -55,13 +55,6 @@ pub fn span_from_span(span: Span, cm: &CodeMap) -> SpanData {\n     }\n }\n \n-/// Represent an arbitrary attribute on a code element\n-#[derive(Clone, Debug, RustcEncodable)]\n-pub struct Attribute {\n-    pub value: String,\n-    pub span: SpanData,\n-}\n-\n impl Lower for Vec<ast::Attribute> {\n     type Target = Vec<Attribute>;\n \n@@ -102,7 +95,7 @@ impl Lower for data::CratePreludeData {\n }\n \n /// Data for enum declarations.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct EnumData {\n     pub id: DefId,\n     pub value: String,\n@@ -138,7 +131,7 @@ impl Lower for data::EnumData {\n }\n \n /// Data for extern crates.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ExternCrateData {\n     pub id: DefId,\n     pub name: String,\n@@ -164,7 +157,7 @@ impl Lower for data::ExternCrateData {\n }\n \n /// Data about a function call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct FunctionCallData {\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -184,7 +177,7 @@ impl Lower for data::FunctionCallData {\n }\n \n /// Data for all kinds of functions and methods.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct FunctionData {\n     pub id: DefId,\n     pub name: String,\n@@ -222,7 +215,7 @@ impl Lower for data::FunctionData {\n }\n \n /// Data about a function call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct FunctionRefData {\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -240,7 +233,7 @@ impl Lower for data::FunctionRefData {\n         }\n     }\n }\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ImplData {\n     pub id: DefId,\n     pub span: SpanData,\n@@ -263,7 +256,7 @@ impl Lower for data::ImplData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct InheritanceData {\n     pub span: SpanData,\n     pub base_id: DefId,\n@@ -283,7 +276,7 @@ impl Lower for data::InheritanceData {\n }\n \n /// Data about a macro declaration.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MacroData {\n     pub span: SpanData,\n     pub name: String,\n@@ -305,7 +298,7 @@ impl Lower for data::MacroData {\n }\n \n /// Data about a macro use.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MacroUseData {\n     pub span: SpanData,\n     pub name: String,\n@@ -331,7 +324,7 @@ impl Lower for data::MacroUseData {\n }\n \n /// Data about a method call.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct MethodCallData {\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -353,7 +346,7 @@ impl Lower for data::MethodCallData {\n }\n \n /// Data for method declarations (methods with a body are treated as functions).\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct MethodData {\n     pub id: DefId,\n     pub name: String,\n@@ -391,7 +384,7 @@ impl Lower for data::MethodData {\n }\n \n /// Data for modules.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ModData {\n     pub id: DefId,\n     pub name: String,\n@@ -427,7 +420,7 @@ impl Lower for data::ModData {\n }\n \n /// Data for a reference to a module.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct ModRefData {\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -448,7 +441,7 @@ impl Lower for data::ModRefData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct StructData {\n     pub span: SpanData,\n     pub name: String,\n@@ -485,7 +478,7 @@ impl Lower for data::StructData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct StructVariantData {\n     pub span: SpanData,\n     pub name: String,\n@@ -520,7 +513,7 @@ impl Lower for data::StructVariantData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TraitData {\n     pub span: SpanData,\n     pub name: String,\n@@ -555,7 +548,7 @@ impl Lower for data::TraitData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TupleVariantData {\n     pub span: SpanData,\n     pub id: DefId,\n@@ -591,7 +584,7 @@ impl Lower for data::TupleVariantData {\n }\n \n /// Data for a typedef.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct TypeDefData {\n     pub id: DefId,\n     pub name: String,\n@@ -625,7 +618,7 @@ impl Lower for data::TypeDefData {\n }\n \n /// Data for a reference to a type or trait.\n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct TypeRefData {\n     pub span: SpanData,\n     pub scope: DefId,\n@@ -646,7 +639,7 @@ impl Lower for data::TypeRefData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct UseData {\n     pub id: DefId,\n     pub span: SpanData,\n@@ -671,7 +664,7 @@ impl Lower for data::UseData {\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct UseGlobData {\n     pub id: DefId,\n     pub span: SpanData,\n@@ -695,7 +688,7 @@ impl Lower for data::UseGlobData {\n }\n \n /// Data for local and global variables (consts and statics).\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct VariableData {\n     pub id: DefId,\n     pub name: String,\n@@ -736,7 +729,7 @@ impl Lower for data::VariableData {\n \n /// Data for the use of some item (e.g., the use of a local variable, which\n /// will refer to that variables declaration (by ref_id)).\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Debug)]\n pub struct VariableRefData {\n     pub name: String,\n     pub span: SpanData,\n@@ -757,7 +750,7 @@ impl Lower for data::VariableRefData {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct Signature {\n     pub span: SpanData,\n     pub text: String,"}, {"sha": "3b7625bdcc1beeb32e075ae4ae4f674699ab31a6", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -143,15 +143,6 @@ fn id_from_def_id(id: DefId) -> Id {\n     }\n }\n \n-impl Into<rls_data::Attribute> for Attribute {\n-    fn into(self) -> rls_data::Attribute {\n-        rls_data::Attribute {\n-            value: self.value,\n-            span: self.span,\n-        }\n-    }\n-}\n-\n impl Into<Import> for ExternCrateData {\n     fn into(self) -> Import {\n         Import {\n@@ -200,7 +191,7 @@ impl Into<Def> for EnumData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -219,7 +210,7 @@ impl Into<Def> for TupleVariantData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -237,7 +228,7 @@ impl Into<Def> for StructVariantData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -255,7 +246,7 @@ impl Into<Def> for StructData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -273,7 +264,7 @@ impl Into<Def> for TraitData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -291,7 +282,7 @@ impl Into<Def> for FunctionData {\n             decl_id: None,\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -309,7 +300,7 @@ impl Into<Def> for MethodData {\n             decl_id: self.decl_id.map(|id| id_from_def_id(id)),\n             docs: self.docs,\n             sig: Some(self.sig.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -345,7 +336,7 @@ impl Into<Def> for TypeDefData {\n             decl_id: None,\n             docs: String::new(),\n             sig: self.sig.map(|s| s.into()),\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }\n@@ -368,7 +359,7 @@ impl Into<Def> for VariableData {\n             decl_id: None,\n             docs: self.docs,\n             sig: None,\n-            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n+            attributes: self.attributes,\n         }\n     }\n }"}, {"sha": "ec637268d91a4493cb89dc203648edf2be6a76d5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f84ff1bc002ef33c359626f6cafbd22c5d294d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=83f84ff1bc002ef33c359626f6cafbd22c5d294d", "patch": "@@ -26,7 +26,7 @@\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-extern crate serialize as rustc_serialize;\n+extern crate rustc_serialize;\n extern crate syntax_pos;\n \n extern crate rls_data;"}]}