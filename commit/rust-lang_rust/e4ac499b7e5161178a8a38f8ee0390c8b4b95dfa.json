{"sha": "e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YWM0OTliN2U1MTYxMTc4YThhMzhmOGVlMDM5MGM4YjRiOTVkZmE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-19T22:27:30Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-22T18:02:56Z"}, "message": "Remove many RefCells from DocContext\n\nI left some of them so this change doesn't balloon in size and because\nremoving the RefCell in `DocContext.resolver` would require compiler\nchanges.\n\nThanks to `@jyn514` for making this a lot easier with #82020!", "tree": {"sha": "c2291afd19b7935fca63498ddea993ec1219e0ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2291afd19b7935fca63498ddea993ec1219e0ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "html_url": "https://github.com/rust-lang/rust/commit/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15598a83db88ec7a32ea18a44dd6309f32edc07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15598a83db88ec7a32ea18a44dd6309f32edc07e", "html_url": "https://github.com/rust-lang/rust/commit/15598a83db88ec7a32ea18a44dd6309f32edc07e"}], "stats": {"total": 116, "additions": 56, "deletions": 60}, "files": [{"sha": "a24cb0a0f93a1ece262be2ff118b163a99933c3e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n         let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n-        if !self.cx.generated_synthetics.borrow_mut().insert((ty, trait_def_id)) {\n+        if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;\n         }"}, {"sha": "94b82037e75e9ab2126101cd30008cbb5f11fb55", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -22,8 +22,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n-            if !self.cx.renderinfo.borrow().access_levels.is_public(trait_def_id)\n-                || self.cx.generated_synthetics.borrow_mut().get(&(ty, trait_def_id)).is_some()\n+            if !self.cx.renderinfo.access_levels.is_public(trait_def_id)\n+                || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {\n                 continue;\n             }\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.cx.generated_synthetics.borrow_mut().insert((ty, trait_def_id));\n+                self.cx.generated_synthetics.insert((ty, trait_def_id));\n                 let provided_trait_methods = self\n                     .cx\n                     .tcx"}, {"sha": "ea75d1614bd806bb2dc1386b3feb0720f3c775a7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -122,7 +122,7 @@ crate fn try_inline(\n     let target_attrs = load_attrs(cx, did);\n     let attrs = box merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n-    cx.renderinfo.borrow_mut().inlined.insert(did);\n+    cx.renderinfo.inlined.insert(did);\n     let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n@@ -156,7 +156,7 @@ crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n ///\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n-crate fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n+crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n@@ -181,9 +181,9 @@ crate fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKin\n     };\n \n     if did.is_local() {\n-        cx.renderinfo.borrow_mut().exact_paths.insert(did, fqn);\n+        cx.renderinfo.exact_paths.insert(did, fqn);\n     } else {\n-        cx.renderinfo.borrow_mut().external_paths.insert(did, (fqn, kind));\n+        cx.renderinfo.external_paths.insert(did, (fqn, kind));\n     }\n }\n \n@@ -317,7 +317,7 @@ crate fn build_impl(\n     attrs: Option<Attrs<'_>>,\n     ret: &mut Vec<clean::Item>,\n ) {\n-    if !cx.renderinfo.borrow_mut().inlined.insert(did) {\n+    if !cx.renderinfo.inlined.insert(did) {\n         return;\n     }\n \n@@ -329,7 +329,7 @@ crate fn build_impl(\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n             let did = traitref.def_id;\n-            if !cx.renderinfo.borrow().access_levels.is_public(did) {\n+            if !cx.renderinfo.access_levels.is_public(did) {\n                 return;\n             }\n \n@@ -361,7 +361,7 @@ crate fn build_impl(\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(did) = for_.def_id() {\n-            if !cx.renderinfo.borrow().access_levels.is_public(did) {\n+            if !cx.renderinfo.access_levels.is_public(did) {\n                 return;\n             }\n \n@@ -613,20 +613,19 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n     }\n \n     {\n-        if cx.external_traits.borrow().contains_key(&did)\n-            || cx.active_extern_traits.borrow().contains(&did)\n+        if cx.external_traits.borrow().contains_key(&did) || cx.active_extern_traits.contains(&did)\n         {\n             return;\n         }\n     }\n \n     {\n-        cx.active_extern_traits.borrow_mut().insert(did);\n+        cx.active_extern_traits.insert(did);\n     }\n \n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n     cx.external_traits.borrow_mut().insert(did, trait_);\n-    cx.active_extern_traits.borrow_mut().remove(&did);\n+    cx.active_extern_traits.remove(&did);\n }"}, {"sha": "b6e7046210596a41d41e7391d6de895eb8f89ab6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -357,7 +357,7 @@ impl Clean<Lifetime> for hir::Lifetime {\n                 | rl::Region::LateBound(_, node_id, _)\n                 | rl::Region::Free(_, node_id),\n             ) => {\n-                if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n+                if let Some(lt) = cx.lt_substs.get(&node_id).cloned() {\n                     return lt;\n                 }\n             }\n@@ -644,7 +644,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => unreachable!(),\n                     GenericParamDefKind::Type { did, ref bounds, .. } => {\n-                        cx.impl_trait_bounds.borrow_mut().insert(did.into(), bounds.clone());\n+                        cx.impl_trait_bounds.insert(did.into(), bounds.clone());\n                     }\n                     GenericParamDefKind::Const { .. } => unreachable!(),\n                 }\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 unreachable!();\n             }\n \n-            cx.impl_trait_bounds.borrow_mut().insert(param, bounds);\n+            cx.impl_trait_bounds.insert(param, bounds);\n         }\n \n         // Now that `cx.impl_trait_bounds` is populated, we can process\n@@ -1291,10 +1291,10 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n     match qpath {\n         hir::QPath::Resolved(None, ref path) => {\n             if let Res::Def(DefKind::TyParam, did) = path.res {\n-                if let Some(new_ty) = cx.ty_substs.borrow().get(&did).cloned() {\n+                if let Some(new_ty) = cx.ty_substs.get(&did).cloned() {\n                     return new_ty;\n                 }\n-                if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did.into()) {\n+                if let Some(bounds) = cx.impl_trait_bounds.remove(&did.into()) {\n                     return ImplTrait(bounds);\n                 }\n             }\n@@ -1304,7 +1304,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 // Substitute private type aliases\n                 if let Some(def_id) = def_id.as_local() {\n                     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    if !cx.renderinfo.borrow().access_levels.is_exported(def_id.to_def_id()) {\n+                    if !cx.renderinfo.access_levels.is_exported(def_id.to_def_id()) {\n                         alias = Some(&cx.tcx.hir().expect_item(hir_id).kind);\n                     }\n                 }\n@@ -1651,7 +1651,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Projection(ref data) => data.clean(cx),\n \n             ty::Param(ref p) => {\n-                if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&p.index.into()) {\n+                if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n                     ImplTrait(bounds)\n                 } else {\n                     Generic(p.name)"}, {"sha": "d2eee49f0c968305243892cf00dac5f6a3713ceb", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -23,10 +23,9 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     let krate = cx.tcx.hir().krate();\n     let module = crate::visit_ast::RustdocVisitor::new(&mut cx).visit(krate);\n \n-    let mut r = cx.renderinfo.get_mut();\n-    r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n-    r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n-    r.owned_box_did = cx.tcx.lang_items().owned_box();\n+    cx.renderinfo.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+    cx.renderinfo.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+    cx.renderinfo.owned_box_did = cx.tcx.lang_items().owned_box();\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates().iter() {\n@@ -494,10 +493,10 @@ crate fn enter_impl_trait<F, R>(cx: &mut DocContext<'_>, f: F) -> R\n where\n     F: FnOnce(&mut DocContext<'_>) -> R,\n {\n-    let old_bounds = mem::take(&mut *cx.impl_trait_bounds.get_mut());\n+    let old_bounds = mem::take(&mut cx.impl_trait_bounds);\n     let r = f(cx);\n-    assert!(cx.impl_trait_bounds.borrow().is_empty());\n-    *cx.impl_trait_bounds.get_mut() = old_bounds;\n+    assert!(cx.impl_trait_bounds.is_empty());\n+    cx.impl_trait_bounds = old_bounds;\n     r\n }\n "}, {"sha": "8fceb00eeae513b1a9b5feed85fc4b78dbac0e87", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -42,32 +42,37 @@ crate type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n crate struct DocContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n+    /// Name resolver. Used for intra-doc links.\n+    ///\n+    /// The `Rc<RefCell<...>>` wrapping is needed because that is what's returned by\n+    /// [`Queries::expansion()`].\n+    // FIXME: see if we can get rid of this RefCell somehow\n     crate resolver: Rc<RefCell<interface::BoxedResolver>>,\n     /// Used for normalization.\n     ///\n     /// Most of this logic is copied from rustc_lint::late.\n     crate param_env: ParamEnv<'tcx>,\n     /// Later on moved into `cache`\n-    crate renderinfo: RefCell<RenderInfo>,\n+    crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n-    crate active_extern_traits: RefCell<FxHashSet<DefId>>,\n+    crate active_extern_traits: FxHashSet<DefId>,\n     // The current set of type and lifetime substitutions,\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type parameter -> substituted type\n-    crate ty_substs: RefCell<FxHashMap<DefId, clean::Type>>,\n+    crate ty_substs: FxHashMap<DefId, clean::Type>,\n     /// Table `DefId` of lifetime parameter -> substituted lifetime\n-    crate lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n+    crate lt_substs: FxHashMap<DefId, clean::Lifetime>,\n     /// Table `DefId` of const parameter -> substituted const\n-    crate ct_substs: RefCell<FxHashMap<DefId, clean::Constant>>,\n+    crate ct_substs: FxHashMap<DefId, clean::Constant>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n-    crate impl_trait_bounds: RefCell<FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>>,\n+    crate impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     crate fake_def_ids: FxHashMap<CrateNum, DefIndex>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n-    crate generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n+    crate generated_synthetics: FxHashSet<(Ty<'tcx>, DefId)>,\n     crate auto_traits: Vec<DefId>,\n     /// The options given to rustdoc that could be relevant to a pass.\n     crate render_options: RenderOptions,\n@@ -112,14 +117,14 @@ impl<'tcx> DocContext<'tcx> {\n         F: FnOnce(&mut Self) -> R,\n     {\n         let (old_tys, old_lts, old_cts) = (\n-            mem::replace(&mut *self.ty_substs.get_mut(), ty_substs),\n-            mem::replace(&mut *self.lt_substs.get_mut(), lt_substs),\n-            mem::replace(&mut *self.ct_substs.get_mut(), ct_substs),\n+            mem::replace(&mut self.ty_substs, ty_substs),\n+            mem::replace(&mut self.lt_substs, lt_substs),\n+            mem::replace(&mut self.ct_substs, ct_substs),\n         );\n         let r = f(self);\n-        *self.ty_substs.get_mut() = old_tys;\n-        *self.lt_substs.get_mut() = old_lts;\n-        *self.ct_substs.get_mut() = old_cts;\n+        self.ty_substs = old_tys;\n+        self.lt_substs = old_lts;\n+        self.ct_substs = old_cts;\n         r\n     }\n \n@@ -509,7 +514,7 @@ crate fn run_global_ctxt(\n         param_env: ParamEnv::empty(),\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n-        renderinfo: RefCell::new(renderinfo),\n+        renderinfo,\n         ty_substs: Default::default(),\n         lt_substs: Default::default(),\n         ct_substs: Default::default(),\n@@ -642,7 +647,7 @@ crate fn run_global_ctxt(\n     // The main crate doc comments are always collapsed.\n     krate.collapsed = true;\n \n-    (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n+    (krate, ctxt.renderinfo, ctxt.render_options)\n }\n \n /// Due to <https://github.com/rust-lang/rust/pull/73566>,"}, {"sha": "c3365b844ecb8352a405b70449691dfbaf29463e", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n     }\n \n     fn print_results(&self) {\n-        let output_format = self.ctx.renderinfo.borrow().output_format;\n+        let output_format = self.ctx.renderinfo.output_format;\n         if output_format.is_json() {\n             println!(\"{}\", self.to_json());\n             return;"}, {"sha": "0271a5b78a7efa32fe10ab2b2a9ce832d768f510", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -48,11 +48,10 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n                     let self_ty = cx.tcx.type_of(def_id);\n                     let impls = get_auto_trait_and_blanket_impls(cx, self_ty, def_id);\n-                    let mut renderinfo = cx.renderinfo.borrow_mut();\n \n-                    new_items.extend(impls.filter(|i| renderinfo.inlined.insert(i.def_id)));\n+                    new_items.extend(impls.filter(|i| cx.renderinfo.inlined.insert(i.def_id)));\n                 }\n-            })\n+            });\n         }\n     }\n "}, {"sha": "e8e1bead84fb61ca7c895a9e0d09bfb5b53fc157", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -97,8 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n-    } else if tests.found_tests > 0 && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n-    {\n+    } else if tests.found_tests > 0 && !cx.renderinfo.access_levels.is_public(item.def_id) {\n         cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,"}, {"sha": "f83eab6799ee66e38a1cba38639a1ea9727580c0", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -17,7 +17,7 @@ crate const STRIP_PRIVATE: Pass = Pass {\n crate fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = DefIdSet::default();\n-    let access_levels = cx.renderinfo.borrow().access_levels.clone();\n+    let access_levels = cx.renderinfo.access_levels.clone();\n \n     // strip all private items\n     {"}, {"sha": "4d42c181d8cf26d22c4b3a341bb19458a22ddf45", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             assert_eq!(cur_mod_def_id, macro_parent_def_id);\n             cur_mod.macros.push((def, None));\n         }\n-        self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n+        self.cx.renderinfo.exact_paths = self.exact_paths;\n         top_level_module\n     }\n \n@@ -199,12 +199,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx\n-                            .renderinfo\n-                            .get_mut()\n-                            .access_levels\n-                            .map\n-                            .insert(did, AccessLevel::Public);\n+                        self.cx.renderinfo.access_levels.map.insert(did, AccessLevel::Public);\n                     }\n                 }\n             }\n@@ -216,7 +211,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None => return false,\n         };\n \n-        let is_private = !self.cx.renderinfo.borrow().access_levels.is_public(res_did);\n+        let is_private = !self.cx.renderinfo.access_levels.is_public(res_did);\n         let is_hidden = inherits_doc_hidden(self.cx, res_hir_id);\n \n         // Only inline if requested or if the item would otherwise be stripped."}, {"sha": "daed5bd107db16f468033e38652d59d6b8af04f0", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=e4ac499b7e5161178a8a38f8ee0390c8b4b95dfa", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     crate fn new(cx: &'a mut crate::core::DocContext<'tcx>) -> LibEmbargoVisitor<'a, 'tcx> {\n         LibEmbargoVisitor {\n             tcx: cx.tcx,\n-            access_levels: &mut cx.renderinfo.get_mut().access_levels,\n+            access_levels: &mut cx.renderinfo.access_levels,\n             prev_level: Some(AccessLevel::Public),\n             visited_mods: FxHashSet::default(),\n         }"}]}