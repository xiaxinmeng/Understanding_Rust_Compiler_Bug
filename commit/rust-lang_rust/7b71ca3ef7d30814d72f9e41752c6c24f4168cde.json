{"sha": "7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzFjYTNlZjdkMzA4MTRkNzJmOWU0MTc1MmM2YzI0ZjQxNjhjZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T01:43:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:28Z"}, "message": "librustc: De-`@mut` `break_ln` and `cont_ln` in liveness", "tree": {"sha": "2d9a64590cea3a46ec28c9a71dbd2bb9d742508a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9a64590cea3a46ec28c9a71dbd2bb9d742508a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "html_url": "https://github.com/rust-lang/rust/commit/7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b71ca3ef7d30814d72f9e41752c6c24f4168cde/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb33285e6169552e58d10197c11cd2f8702291f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb33285e6169552e58d10197c11cd2f8702291f", "html_url": "https://github.com/rust-lang/rust/commit/2fb33285e6169552e58d10197c11cd2f8702291f"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "33e8ecd291f0324121785c84972ab5f814e2a1eb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b71ca3ef7d30814d72f9e41752c6c24f4168cde/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b71ca3ef7d30814d72f9e41752c6c24f4168cde/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7b71ca3ef7d30814d72f9e41752c6c24f4168cde", "patch": "@@ -110,6 +110,7 @@ use middle::typeck;\n use middle::moves;\n \n use std::cast::transmute;\n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::io;\n use std::str;\n@@ -577,7 +578,7 @@ static ACC_READ: uint = 1u;\n static ACC_WRITE: uint = 2u;\n static ACC_USE: uint = 4u;\n \n-type LiveNodeMap = @mut HashMap<NodeId, LiveNode>;\n+type LiveNodeMap = @RefCell<HashMap<NodeId, LiveNode>>;\n \n pub struct Liveness {\n     tcx: ty::ctxt,\n@@ -604,8 +605,8 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n         users: @mut vec::from_elem(ir.num_live_nodes * ir.num_vars,\n                                    invalid_users()),\n         loop_scope: @mut ~[],\n-        break_ln: @mut HashMap::new(),\n-        cont_ln: @mut HashMap::new()\n+        break_ln: @RefCell::new(HashMap::new()),\n+        cont_ln: @RefCell::new(HashMap::new()),\n     }\n }\n \n@@ -1091,7 +1092,8 @@ impl Liveness {\n               // Now that we know the label we're going to,\n               // look it up in the break loop nodes table\n \n-              match self.break_ln.find(&sc) {\n+              let break_ln = self.break_ln.borrow();\n+              match break_ln.get().find(&sc) {\n                   Some(&b) => b,\n                   None => self.tcx.sess.span_bug(expr.span,\n                                                  \"Break to unknown label\")\n@@ -1105,7 +1107,8 @@ impl Liveness {\n               // Now that we know the label we're going to,\n               // look it up in the continue loop nodes table\n \n-              match self.cont_ln.find(&sc) {\n+              let cont_ln = self.cont_ln.borrow();\n+              match cont_ln.get().find(&sc) {\n                   Some(&b) => b,\n                   None => self.tcx.sess.span_bug(expr.span,\n                                                  \"Loop to unknown label\")\n@@ -1383,8 +1386,12 @@ impl Liveness {\n                            -> R {\n       debug!(\"with_loop_nodes: {} {}\", loop_node_id, *break_ln);\n         self.loop_scope.push(loop_node_id);\n-        self.break_ln.insert(loop_node_id, break_ln);\n-        self.cont_ln.insert(loop_node_id, cont_ln);\n+        {\n+            let mut this_break_ln = self.break_ln.borrow_mut();\n+            let mut this_cont_ln = self.cont_ln.borrow_mut();\n+            this_break_ln.get().insert(loop_node_id, break_ln);\n+            this_cont_ln.get().insert(loop_node_id, cont_ln);\n+        }\n         let r = f();\n         self.loop_scope.pop();\n         r"}]}