{"sha": "87e8613fd41e7a4237a146cbe49835bb88295df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTg2MTNmZDQxZTdhNDIzN2ExNDZjYmU0OTgzNWJiODgyOTVkZjY=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T15:46:41Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:00:23Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "830a58d6762de2f51b9bb81ec8375b4c1419cd7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830a58d6762de2f51b9bb81ec8375b4c1419cd7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e8613fd41e7a4237a146cbe49835bb88295df6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYJcACgkQj1SKWi7R\nP1jmTg//aINUxCZ285azq7IAk2PBxlJ86lwTtkAZ2fxqmvAoy0cscGZSJpeOLNm6\n8ymwuOHuj6FRepiEIeWbgcNlIa+cl4wywYeVaHzOU2rJLlKyQtLZWn2X2KPFDxzm\nav3mY8Yb7YaXmo/yMD5F286jbe9u/jSAkiQFZxSibPMaGikrDKY+0+EzQuaIwoFu\nBOfkFqZlBGBMSLg8P6FAsnEY0QWpUURBBUjEdJnQaY2h2JaxbQqpQoYGIbtsqTYR\nEFt408bRSPIMcKolbV9epZriILzJC3smMGUCsSVBg+P6wz8b/hZGwhqff5bcwr7G\nBv9UK8RH9bdegpEYh+WbXj6QVu1IV/9hkGJ+SFLujdsh6IlqLnwWtHMO6/IUtSuG\nPQsAC5eR2PIkoYWy7oMiaho8BNIhu1GIpUtu9FBGjZmU0ftsvu+FMg0oeVIxG5dm\ntgVsaP1rQgghUaqzncCxiyTaiC8ThKgwI1RLbSRbHXfnfNytNjveXXZgvK3Y6jA5\nPFK4k/pe1+31QSUSXdk72VZD2S9jCEHSliMxLvpK6SJolG7RSQh5pXxO8Dqdoctk\nUypZvzIdJdvp1d+Y8pTk8XXnBQI+QFkXJM2GkjIAxX/kr1bcr7OEuIE1z1odqU/z\nFbBmmUCF9CgXNaOTg2Z8ut8yyU9SXmqdqo1lag8ADwgV0CS4QW8=\n=poNp\n-----END PGP SIGNATURE-----", "payload": "tree 830a58d6762de2f51b9bb81ec8375b4c1419cd7c\nparent 8301de16dafc81a3b5d94aa0707ad83bdb56a599\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561132001 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140823 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e8613fd41e7a4237a146cbe49835bb88295df6", "html_url": "https://github.com/rust-lang/rust/commit/87e8613fd41e7a4237a146cbe49835bb88295df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e8613fd41e7a4237a146cbe49835bb88295df6/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8301de16dafc81a3b5d94aa0707ad83bdb56a599", "url": "https://api.github.com/repos/rust-lang/rust/commits/8301de16dafc81a3b5d94aa0707ad83bdb56a599", "html_url": "https://github.com/rust-lang/rust/commit/8301de16dafc81a3b5d94aa0707ad83bdb56a599"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "c610de3febffb4167d5573c75c52d869dcf72585", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -2004,7 +2004,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+    pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -2025,7 +2025,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+    pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -2529,8 +2529,8 @@ enum UnderflowResult<'a, K, V> {\n     Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n }\n \n-fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>)\n-                                   -> UnderflowResult<'a, K, V> {\n+fn handle_underfull_node<K, V>(node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>)\n+                               -> UnderflowResult<'_, K, V> {\n     let parent = if let Ok(parent) = node.ascend() {\n         parent\n     } else {"}, {"sha": "7cf077d61d687b1f9ea48932f7611c584704a601", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -394,7 +394,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Temporarily takes out another, immutable reference to the same node.\n-    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> {\n+    fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n         NodeRef {\n             height: self.height,\n             node: self.node,"}, {"sha": "89d24a234e9bcf199849134823cef0c75f13a1e5", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -552,7 +552,7 @@ impl String {\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n+    pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n         let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n \n         let (first_valid, first_broken) = if let Some(chunk) = iter.next() {"}, {"sha": "0eda2c3c8e9f3e6ba347656e6d8be03f8557ead1", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -498,7 +498,7 @@ macro_rules! impls{\n /// #     end: *const T,\n /// #     phantom: PhantomData<&'a T>,\n /// # }\n-/// fn borrow_vec<'a, T>(vec: &'a Vec<T>) -> Slice<'a, T> {\n+/// fn borrow_vec<T>(vec: &Vec<T>) -> Slice<T> {\n ///     let ptr = vec.as_ptr();\n ///     Slice {\n ///         start: ptr,"}, {"sha": "9cff474a760306be8f639270d67b5fed39802cd1", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -105,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n /// impl Index<Side> for Balance {\n ///     type Output = Weight;\n ///\n-///     fn index<'a>(&'a self, index: Side) -> &'a Self::Output {\n+///     fn index(&self, index: Side) -> &Self::Output {\n ///         println!(\"Accessing {:?}-side of balance immutably\", index);\n ///         match index {\n ///             Side::Left => &self.left,\n@@ -115,7 +115,7 @@ pub trait Index<Idx: ?Sized> {\n /// }\n ///\n /// impl IndexMut<Side> for Balance {\n-///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Self::Output {\n+///     fn index_mut(&mut self, index: Side) -> &mut Self::Output {\n ///         println!(\"Accessing {:?}-side of balance mutably\", index);\n ///         match index {\n ///             Side::Left => &mut self.left,"}, {"sha": "89fb707001589339874dbf48609ffd63ebeef200", "filename": "src/libproc_macro/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -74,7 +74,7 @@ impl<T: LambdaL> ScopedCell<T> {\n     }\n \n     /// Sets the value in `self` to `value` while running `f`.\n-    pub fn set<'a, R>(&self, value: <T as ApplyL<'a>>::Out, f: impl FnOnce() -> R) -> R {\n+    pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {\n         self.replace(value, |_| f())\n     }\n }"}, {"sha": "a9c4c7345c284e5f95e9a0fbe29e6af2c665cd8f", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -140,7 +140,7 @@ fn wait_timeout_receiver<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n     new_guard\n }\n \n-fn abort_selection<'a, T>(guard: &mut MutexGuard<'a , State<T>>) -> bool {\n+fn abort_selection<T>(guard: &mut MutexGuard<'_, State<T>>) -> bool {\n     match mem::replace(&mut guard.blocker, NoneBlocked) {\n         NoneBlocked => true,\n         BlockedSender(token) => {"}, {"sha": "e25bab4ff6104bc2c63bf8700c0d6502fc9a740e", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -673,7 +673,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "a9b8bc6a96298f551aa07b0ddbc3fbe737a18114", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -894,7 +894,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming<'_> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "36fb1fb5ff68d7086a397d037cc09c509c0e4f24", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -195,7 +195,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n     }\n }\n \n-pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n+pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0\n         Some(i) => &v[..i],"}, {"sha": "322a17ee43d075ecf8a2b0720f8b3e2850be4ae4", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -19,7 +19,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'\\\\'\n }\n \n-pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix<'a>> {\n+pub fn parse_prefix(path: &OsStr) -> Option<Prefix> {\n     use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]"}, {"sha": "8789abe55c3d0b526d9526a5ea10f333d72e918c", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -16,7 +16,7 @@ pub mod test {\n             p.join(path)\n         }\n \n-        pub fn path<'a>(&'a self) -> &'a Path {\n+        pub fn path(&self) -> &Path {\n             let TempDir(ref p) = *self;\n             p\n         }"}, {"sha": "453b6ebf3c49d5c2f60f2030057b95482108f553", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -440,12 +440,12 @@ pub fn contains_name(attrs: &[Attribute], name: Symbol) -> bool {\n     })\n }\n \n-pub fn find_by_name<'a>(attrs: &'a [Attribute], name: Symbol) -> Option<&'a Attribute> {\n+pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n-pub fn filter_by_name<'a>(attrs: &'a [Attribute], name: Symbol)\n-    -> impl Iterator<Item = &'a Attribute> {\n+pub fn filter_by_name(attrs: &[Attribute], name: Symbol)\n+                      -> impl Iterator<Item=&Attribute> {\n     attrs.iter().filter(move |attr| attr.check_name(name))\n }\n "}, {"sha": "fc8aa4793bc6111eba60d007e077c69ac1d7be7c", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -901,7 +901,7 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n /// # Returns\n ///\n /// The parsed non-terminal.\n-fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> Nonterminal {\n+fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     if name == sym::tt {\n         return token::NtTT(p.parse_token_tree());\n     }"}, {"sha": "f037a09e9b4df1c3ed594c50cac99a346c0d4984", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e8613fd41e7a4237a146cbe49835bb88295df6/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=87e8613fd41e7a4237a146cbe49835bb88295df6", "patch": "@@ -20,7 +20,7 @@ pub fn string_to_stream(source_str: String) -> TokenStream {\n }\n \n /// Map string to parser (via tts)\n-pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n+pub fn string_to_parser(ps: &ParseSess, source_str: String) -> Parser {\n     new_parser_from_source_str(ps, PathBuf::from(\"bogofile\").into(), source_str)\n }\n "}]}