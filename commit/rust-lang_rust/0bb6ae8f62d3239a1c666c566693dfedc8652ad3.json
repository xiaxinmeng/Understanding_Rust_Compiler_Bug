{"sha": "0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjZhZThmNjJkMzIzOWExYzY2NmM1NjY2OTNkZmVkYzg2NTJhZDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-02-26T17:58:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-03-01T14:27:30Z"}, "message": "Place::Local(x) is now Place::Base(PlaceBase::Local(x))", "tree": {"sha": "688756701c5f963e6dc492504775456d2a4fde7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688756701c5f963e6dc492504775456d2a4fde7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlx5QVMACgkQiMlBzaHU\nZDLROw//SZvuritebuuW8vLs5n9WiZzA2TMiDT3C7X4yH0XBDpBG0/5JUZuVmG1C\nPNq+aVR858KZvtWn6HMOk7BrjWuSgBVCxMiun7zy6TecuDsB0CfbAQtYLMy/HiJo\nNJo+7+x19p+S5DBNbNTxFllTD0h4SN2wWzYjkiUDhGpWw8PLNp/4qZAD+ZcRXAs2\nPRPpJoaFZLXAcDm+i6JjPT96RSb9rNervN5g1RhZAjLlc9eG1bIqJkDMBrnwFV0G\nLPj5sHDDbfCYEpEN4+hwf44hI61tS6UvfepC1q3SwUHgm1j2GeGFatGGhl5CRS7E\n6C5IaB2keSspmgQt2JjEekvDb/QWhFGWJIlFTuKgHL8+MMDVZAv9+9oCwKn0ZR18\nwtmbEaIOzU0Atgh3SfAnnlELSX1TV3zleQM0tfwavBu8A9u+lRTGcr4/RHkwBfAa\nNtBpTq5TivoY1j4riW4dUE/nOJMIl26V2UJ5fDEYdguYbEBBtnX0W+QPifc5XA+M\nf5OMjtd20w7mvHjwcj1Xi/hoZt3uylSQQ73BtRWsLFzX91iFnIrorjpHM+6Fz37B\nCDCHiT2B92asbsRQG/Tu2AoKLPkkkHCRkKaSLA6Ip5D2B9a1v+yLOVBKABy9AKYQ\nLG5WAkDuKk4ka1LLloqr6qkzvn9Tsfh+Bx7zDp9/YYJOvGG2zxY=\n=/fJ7\n-----END PGP SIGNATURE-----", "payload": "tree 688756701c5f963e6dc492504775456d2a4fde7e\nparent 909045d848dd1614ae2440a93966c683f8aa83e1\nauthor Santiago Pastorino <spastorino@gmail.com> 1551203893 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1551450450 -0300\n\nPlace::Local(x) is now Place::Base(PlaceBase::Local(x))\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "html_url": "https://github.com/rust-lang/rust/commit/0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909045d848dd1614ae2440a93966c683f8aa83e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/909045d848dd1614ae2440a93966c683f8aa83e1", "html_url": "https://github.com/rust-lang/rust/commit/909045d848dd1614ae2440a93966c683f8aa83e1"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b496a9b7d41d7327daf1947da77458f8a6c1387a", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "patch": "@@ -275,7 +275,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                             .to_owned(),\n                     ),\n                 )?;\n-                let arg_dest = this.eval_place(&mir::Place::Local(arg_local))?;\n+                let arg_dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n                 this.write_scalar(data, arg_dest)?;\n \n                 assert!(args.next().is_none(), \"__rust_maybe_catch_panic argument has more arguments than expected\");"}, {"sha": "cf6a885c605c29acd80a018a8a7838ff5d1254a1", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "patch": "@@ -121,11 +121,11 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // First argument: pointer to `main()`.\n     let main_ptr = ecx.memory_mut().create_fn_alloc(main_instance).with_default_tag();\n-    let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n+    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n     ecx.write_scalar(Scalar::Ptr(main_ptr), dest)?;\n \n     // Second argument (argc): `1`.\n-    let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n+    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n     let argc = Scalar::from_uint(config.args.len() as u128, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n     // Store argc for macOS's `_NSGetArgc`.\n@@ -137,7 +137,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // FIXME: extract main source file path.\n     // Third argument (`argv`): created from `config.args`.\n-    let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n+    let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n     // For Windows, construct a command string with all the aguments.\n     let mut cmd = String::new();\n     for arg in config.args.iter() {\n@@ -437,12 +437,12 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n         // First argument: `size`.\n         // (`0` is allowed here -- this is expected to be handled by the lang item).\n-        let arg = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n+        let arg = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n         let size = layout.size.bytes();\n         ecx.write_scalar(Scalar::from_uint(size, arg.layout.size), arg)?;\n \n         // Second argument: `align`.\n-        let arg = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n+        let arg = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n         let align = layout.align.abi.bytes();\n         ecx.write_scalar(Scalar::from_uint(align, arg.layout.size), arg)?;\n "}, {"sha": "796c2e5f9827ab861b62c67bdb64776ee05bc5b5", "filename": "src/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb6ae8f62d3239a1c666c566693dfedc8652ad3/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=0bb6ae8f62d3239a1c666c566693dfedc8652ad3", "patch": "@@ -151,7 +151,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             let arg_local = this.frame().mir.args_iter().next().ok_or_else(\n                 || EvalErrorKind::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n             )?;\n-            let dest = this.eval_place(&mir::Place::Local(arg_local))?;\n+            let dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n             this.write_scalar(ptr, dest)?;\n \n             // step until out of stackframes"}]}