{"sha": "99b7662971e97cf53669b2f5620dcd9ff8b98bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Yjc2NjI5NzFlOTdjZjUzNjY5YjJmNTYyMGRjZDlmZjhiOThiYzM=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-23T03:44:55Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-25T05:21:07Z"}, "message": "libsyntax: Get rid of some logic for some obsolete syntax.", "tree": {"sha": "7ad10bc71c7eb116dd7316b11f9e24d6fd30ba7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad10bc71c7eb116dd7316b11f9e24d6fd30ba7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b7662971e97cf53669b2f5620dcd9ff8b98bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b7662971e97cf53669b2f5620dcd9ff8b98bc3", "html_url": "https://github.com/rust-lang/rust/commit/99b7662971e97cf53669b2f5620dcd9ff8b98bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b7662971e97cf53669b2f5620dcd9ff8b98bc3/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12308db3d23fe59b7ccfed6c535896ac6fdb5abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/12308db3d23fe59b7ccfed6c535896ac6fdb5abe", "html_url": "https://github.com/rust-lang/rust/commit/12308db3d23fe59b7ccfed6c535896ac6fdb5abe"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "5a5e310e56f43c4a75e6abe79b3d9383fdf36065", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99b7662971e97cf53669b2f5620dcd9ff8b98bc3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b7662971e97cf53669b2f5620dcd9ff8b98bc3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=99b7662971e97cf53669b2f5620dcd9ff8b98bc3", "patch": "@@ -1184,15 +1184,7 @@ impl Parser {\n     pub fn is_named_argument(&self) -> bool {\n         let offset = match *self.token {\n             token::BINOP(token::AND) => 1,\n-            token::BINOP(token::MINUS) => 1,\n             token::ANDAND => 1,\n-            token::BINOP(token::PLUS) => {\n-                if self.look_ahead(1, |t| *t == token::BINOP(token::PLUS)) {\n-                    2\n-                } else {\n-                    1\n-                }\n-            },\n             _ if token::is_keyword(keywords::Mut, self.token) => 1,\n             _ => 0\n         };\n@@ -1802,7 +1794,7 @@ impl Parser {\n                 return self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts, EMPTY_CTXT));\n             } else if *self.token == token::LBRACE {\n                 // This might be a struct literal.\n-                if self.looking_at_record_literal() {\n+                if self.looking_at_struct_literal() {\n                     // It's a struct literal.\n                     self.bump();\n                     let mut fields = ~[];\n@@ -2513,12 +2505,11 @@ impl Parser {\n         }\n     }\n \n-    // For distingishing between record literals and blocks\n-    fn looking_at_record_literal(&self) -> bool {\n+    // For distingishing between struct literals and blocks\n+    fn looking_at_struct_literal(&self) -> bool {\n         *self.token == token::LBRACE &&\n-            (self.look_ahead(1, |t| token::is_keyword(keywords::Mut, t)) ||\n-             (self.look_ahead(1, |t| token::is_plain_ident(t)) &&\n-              self.look_ahead(2, |t| *t == token::COLON)))\n+        (self.look_ahead(1, |t| token::is_plain_ident(t)) &&\n+         self.look_ahead(2, |t| *t == token::COLON))\n     }\n \n     fn parse_match_expr(&self) -> @Expr {"}]}