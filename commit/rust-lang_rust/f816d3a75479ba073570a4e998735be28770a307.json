{"sha": "f816d3a75479ba073570a4e998735be28770a307", "node_id": "C_kwDOAAsO6NoAKGY4MTZkM2E3NTQ3OWJhMDczNTcwYTRlOTk4NzM1YmUyODc3MGEzMDc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T11:23:14Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:33:53Z"}, "message": "add a splash of color", "tree": {"sha": "244eb164750d92246dd12890829db3d2004143ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/244eb164750d92246dd12890829db3d2004143ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f816d3a75479ba073570a4e998735be28770a307", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAweEACgkQzXazX3c0\ndp79XQ//UIi6vFwVhn/dfYkxJR8g/sKJcieAINJ1PxOdNVZA2aezE2lSxbjPu80V\nIYIDA0Zf/sX68JtsXoUj2hbcICH+aLbsTlYL93NZ8ZSi0XlgWMSHQyzvdSccBDqb\neVqwLOcTcdjrTP/p2tzBXWYJr9sjXKB26VOF8Vcva2GN5UxODZQCF7ausVJ/8WaN\nMl5S9TNH/7/YtI2HEMX+4w5668pqn6CAg4Q8x21Xf9u6kgoK1YlezXhp8eVMgLyO\n2XqUy+CaZziCv/DmD1dq2LDebzPudzaPhi79SiCF9sDoRMin1nmVcTKM7VpcVLG2\n/d//BcsaVuCMgeQCqtWbAlIEB2mH4CpBcOgPbaUypgpH3WMvVzvcqN/zVyOwv8LW\nhOctOxEjmIlZzZFDJH8OWT5No+0vQsjNdKQF+Rvf1FCm813v9ejBplPCZIYYhwSM\n+9EQjA0MsDHSWG/h4mV5AkLb4nIK1VR11VEMX3ApoZpKJ9wNvXPoHHbC3KmUkPD7\ncttdkyfUQkond38aV/lWFrO6nH9bVVj0IpzTa6wATpTWPPZznEfC+K+tCAtGXcGL\nt8e9n3y5T20y7odGm+C8aYdhKvO7P1btCsvLOzjXsdwBh7EaYbdn0ho3DUuF3oyb\nbNAoyGy78It16BbNHIJZwxFBrgVX9hTXxYLIwmhNh5IrCHo5GsY=\n=I0rN\n-----END PGP SIGNATURE-----", "payload": "tree 244eb164750d92246dd12890829db3d2004143ea\nparent f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677756194 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677771233 +0100\n\nadd a splash of color\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f816d3a75479ba073570a4e998735be28770a307", "html_url": "https://github.com/rust-lang/rust/commit/f816d3a75479ba073570a4e998735be28770a307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f816d3a75479ba073570a4e998735be28770a307/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "html_url": "https://github.com/rust-lang/rust/commit/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232"}], "stats": {"total": 111, "additions": 82, "deletions": 29}, "files": [{"sha": "8195823efaffacbd25d619fcc96866cc3ebee9d0", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=f816d3a75479ba073570a4e998735be28770a307", "patch": "@@ -11,6 +11,17 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"atty\"\n+version = \"0.2.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"autocfg\"\n version = \"1.1.0\"\n@@ -36,6 +47,7 @@ dependencies = [\n name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"build_helper\",\n  \"cc\",\n  \"cmake\",\n@@ -59,6 +71,7 @@ dependencies = [\n  \"walkdir\",\n  \"winapi\",\n  \"xz2\",\n+ \"yansi-term\",\n ]\n \n [[package]]\n@@ -800,3 +813,12 @@ name = \"yansi\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n+\n+[[package]]\n+name = \"yansi-term\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\n+dependencies = [\n+ \"winapi\",\n+]"}, {"sha": "e704799867b39571b0c77450ea8810fe2e81e2be", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=f816d3a75479ba073570a4e998735be28770a307", "patch": "@@ -30,6 +30,7 @@ path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n [dependencies]\n+atty = \"0.2.14\"\n build_helper = { path = \"../tools/build_helper\" }\n cmake = \"0.1.38\"\n fd-lock = \"3.0.8\"\n@@ -52,6 +53,7 @@ opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n walkdir = \"2\"\n+yansi-term = \"0.1.2\"\n \n # Dependencies needed by the build-metrics feature\n sysinfo = { version = \"0.26.0\", optional = true }"}, {"sha": "bfa237aa14d865eec92d34703f0323aa25123732", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f816d3a75479ba073570a4e998735be28770a307", "patch": "@@ -87,6 +87,9 @@ pub struct Config {\n     pub patch_binaries_for_nix: bool,\n     pub stage0_metadata: Stage0Metadata,\n \n+    pub stdout_is_tty: bool,\n+    pub stderr_is_tty: bool,\n+\n     pub on_fail: Option<String>,\n     pub stage: u32,\n     pub keep_stage: Vec<u32>,\n@@ -822,6 +825,9 @@ impl Config {\n         config.deny_warnings = true;\n         config.bindir = \"bin\".into();\n \n+        config.stdout_is_tty = atty::is(atty::Stream::Stdout);\n+        config.stderr_is_tty = atty::is(atty::Stream::Stderr);\n+\n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n "}, {"sha": "0eff8769b6091aaaba5942611a7de1bf896e07a5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f816d3a75479ba073570a4e998735be28770a307", "patch": "@@ -89,6 +89,7 @@ pub use crate::builder::PathSet;\n use crate::cache::{Interned, INTERNER};\n pub use crate::config::Config;\n pub use crate::flags::Subcommand;\n+use yansi_term::Color;\n \n const LLVM_TOOLS: &[&str] = &[\n     \"llvm-cov\",      // used to generate coverage report\n@@ -1575,6 +1576,23 @@ to download LLVM rather than building it.\n \n         self.config.ninja_in_file\n     }\n+\n+    pub fn color_for_stdout(&self, color: Color, message: &str) -> String {\n+        self.color_for_inner(color, message, self.config.stdout_is_tty)\n+    }\n+\n+    pub fn color_for_stderr(&self, color: Color, message: &str) -> String {\n+        self.color_for_inner(color, message, self.config.stderr_is_tty)\n+    }\n+\n+    fn color_for_inner(&self, color: Color, message: &str, is_tty: bool) -> String {\n+        let use_color = match self.config.color {\n+            flags::Color::Always => true,\n+            flags::Color::Never => false,\n+            flags::Color::Auto => is_tty,\n+        };\n+        if use_color { color.paint(message).to_string() } else { message.to_string() }\n+    }\n }\n \n #[cfg(unix)]"}, {"sha": "b5ab486f3ac685af88cd0939b25ffd5051dc2106", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f816d3a75479ba073570a4e998735be28770a307/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=f816d3a75479ba073570a4e998735be28770a307", "patch": "@@ -10,6 +10,7 @@ use crate::builder::Builder;\n use std::io::{BufRead, BufReader, Write};\n use std::process::{ChildStdout, Command, Stdio};\n use std::time::Duration;\n+use yansi_term::Color;\n \n const TERSE_TESTS_PER_LINE: usize = 88;\n \n@@ -37,13 +38,12 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     builder.verbose(&format!(\"running: {cmd:?}\"));\n \n     let mut process = cmd.spawn().unwrap();\n-    let stdout = process.stdout.take().unwrap();\n-    let verbose = builder.config.verbose_tests;\n-    let handle = std::thread::spawn(move || Renderer::new(stdout, verbose).render_all());\n \n-    let result = process.wait().unwrap();\n-    handle.join().expect(\"test formatter thread failed\");\n+    // This runs until the stdout of the child is closed, which means the child exited. We don't\n+    // run this on another thread since the builder is not Sync.\n+    Renderer::new(process.stdout.take().unwrap(), builder).render_all();\n \n+    let result = process.wait().unwrap();\n     if !result.success() && builder.is_verbose() {\n         println!(\n             \"\\n\\ncommand did not execute successfully: {cmd:?}\\n\\\n@@ -54,21 +54,21 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     result.success()\n }\n \n-struct Renderer {\n+struct Renderer<'a> {\n     stdout: BufReader<ChildStdout>,\n     failures: Vec<TestOutcome>,\n-    verbose: bool,\n+    builder: &'a Builder<'a>,\n     tests_count: Option<usize>,\n     executed_tests: usize,\n     terse_tests_in_line: usize,\n }\n \n-impl Renderer {\n-    fn new(stdout: ChildStdout, verbose: bool) -> Self {\n+impl<'a> Renderer<'a> {\n+    fn new(stdout: ChildStdout, builder: &'a Builder<'a>) -> Self {\n         Self {\n             stdout: BufReader::new(stdout),\n             failures: Vec::new(),\n-            verbose,\n+            builder,\n             tests_count: None,\n             executed_tests: 0,\n             terse_tests_in_line: 0,\n@@ -99,7 +99,7 @@ impl Renderer {\n \n     fn render_test_outcome(&mut self, outcome: Outcome<'_>, test: &TestOutcome) {\n         self.executed_tests += 1;\n-        if self.verbose {\n+        if self.builder.config.verbose_tests {\n             self.render_test_outcome_verbose(outcome, test);\n         } else {\n             self.render_test_outcome_terse(outcome, test);\n@@ -109,12 +109,13 @@ impl Renderer {\n     fn render_test_outcome_verbose(&self, outcome: Outcome<'_>, test: &TestOutcome) {\n         if let Some(exec_time) = test.exec_time {\n             println!(\n-                \"test {} ... {outcome} (in {:.2?})\",\n+                \"test {} ... {} (in {:.2?})\",\n                 test.name,\n+                outcome.long(self.builder),\n                 Duration::from_secs_f64(exec_time)\n             );\n         } else {\n-            println!(\"test {} ... {outcome}\", test.name);\n+            println!(\"test {} ... {}\", test.name, outcome.long(self.builder));\n         }\n     }\n \n@@ -130,20 +131,13 @@ impl Renderer {\n         }\n \n         self.terse_tests_in_line += 1;\n-        print!(\n-            \"{}\",\n-            match outcome {\n-                Outcome::Ok => \".\",\n-                Outcome::Failed => \"F\",\n-                Outcome::Ignored { .. } => \"i\",\n-            }\n-        );\n+        print!(\"{}\", outcome.short(self.builder));\n         let _ = std::io::stdout().flush();\n     }\n \n     fn render_suite_outcome(&self, outcome: Outcome<'_>, suite: &SuiteOutcome) {\n         // The terse output doesn't end with a newline, so we need to add it ourselves.\n-        if !self.verbose {\n+        if !self.builder.config.verbose_tests {\n             println!();\n         }\n \n@@ -163,8 +157,9 @@ impl Renderer {\n         }\n \n         println!(\n-            \"\\ntest result: {outcome}. {} passed; {} failed; {} ignored; {} measured; \\\n+            \"\\ntest result: {}. {} passed; {} failed; {} ignored; {} measured; \\\n              {} filtered out; finished in {:.2?}\\n\",\n+            outcome.long(self.builder),\n             suite.passed,\n             suite.failed,\n             suite.ignored,\n@@ -213,13 +208,23 @@ enum Outcome<'a> {\n     Ignored { reason: Option<&'a str> },\n }\n \n-impl std::fmt::Display for Outcome<'_> {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+impl Outcome<'_> {\n+    fn short(&self, builder: &Builder<'_>) -> String {\n         match self {\n-            Outcome::Ok => f.write_str(\"ok\"),\n-            Outcome::Failed => f.write_str(\"FAILED\"),\n-            Outcome::Ignored { reason: None } => f.write_str(\"ignored\"),\n-            Outcome::Ignored { reason: Some(reason) } => write!(f, \"ignored, {reason}\"),\n+            Outcome::Ok => builder.color_for_stdout(Color::Green, \".\"),\n+            Outcome::Failed => builder.color_for_stdout(Color::Red, \"F\"),\n+            Outcome::Ignored { .. } => builder.color_for_stdout(Color::Yellow, \"i\"),\n+        }\n+    }\n+\n+    fn long(&self, builder: &Builder<'_>) -> String {\n+        match self {\n+            Outcome::Ok => builder.color_for_stdout(Color::Green, \"ok\"),\n+            Outcome::Failed => builder.color_for_stdout(Color::Red, \"FAILED\"),\n+            Outcome::Ignored { reason: None } => builder.color_for_stdout(Color::Yellow, \"ignored\"),\n+            Outcome::Ignored { reason: Some(reason) } => {\n+                builder.color_for_stdout(Color::Yellow, &format!(\"ignored, {reason}\"))\n+            }\n         }\n     }\n }"}]}