{"sha": "59ccc1efb368a9a3b036510f7b2d56519608da85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Y2NjMWVmYjM2OGE5YTNiMDM2NTEwZjdiMmQ1NjUxOTYwOGRhODU=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-05T19:16:57Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-07T15:40:48Z"}, "message": "needless_collect: replace paths with diag items\n\nRelated to: #5393", "tree": {"sha": "aaa277a143677bba505a7d184a00ffead76dd8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaa277a143677bba505a7d184a00ffead76dd8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ccc1efb368a9a3b036510f7b2d56519608da85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccc1efb368a9a3b036510f7b2d56519608da85", "html_url": "https://github.com/rust-lang/rust/commit/59ccc1efb368a9a3b036510f7b2d56519608da85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ccc1efb368a9a3b036510f7b2d56519608da85/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21607d9b504281a00325065955dd825334ad6ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21607d9b504281a00325065955dd825334ad6ef", "html_url": "https://github.com/rust-lang/rust/commit/a21607d9b504281a00325065955dd825334ad6ef"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "6a9aa08426c0621ddeaf067986ee012253779746", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59ccc1efb368a9a3b036510f7b2d56519608da85/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ccc1efb368a9a3b036510f7b2d56519608da85/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=59ccc1efb368a9a3b036510f7b2d56519608da85", "patch": "@@ -2,8 +2,8 @@ use super::NEEDLESS_COLLECT;\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{is_trait_method, path_to_local_id, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_trait_method, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n@@ -30,7 +30,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         then {\n             let is_empty_sugg = Some(\"next().is_none()\".to_string());\n             let method_name = &*method.ident.name.as_str();\n-            let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) || \n+            let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                         is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n                 match method_name {\n                     \"len\" => Some(\"count()\".to_string()),\n@@ -45,7 +45,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                     _ => None,\n                 }\n             }\n-            else if match_type(cx, ty, &paths::BTREEMAP) ||\n+            else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n                 is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n                 match method_name {\n                     \"is_empty\" => is_empty_sugg,\n@@ -98,7 +98,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n-                    match_type(cx, ty, &paths::LINKED_LIST);\n+                    is_type_diagnostic_item(cx, ty, sym::LinkedList);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if let [iter_call] = &*iter_calls;\n                 then {"}]}