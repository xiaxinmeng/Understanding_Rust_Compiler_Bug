{"sha": "fd9f7da68ed23934ace0ae86b39d47f6078011a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOWY3ZGE2OGVkMjM5MzRhY2UwYWU4NmIzOWQ0N2Y2MDc4MDExYTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-23T20:27:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-23T20:28:27Z"}, "message": "Make traits with by-value-self be considered object safe.", "tree": {"sha": "87be8792470f52f715ae1d82595fe699d1c249aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87be8792470f52f715ae1d82595fe699d1c249aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9f7da68ed23934ace0ae86b39d47f6078011a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9f7da68ed23934ace0ae86b39d47f6078011a0", "html_url": "https://github.com/rust-lang/rust/commit/fd9f7da68ed23934ace0ae86b39d47f6078011a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9f7da68ed23934ace0ae86b39d47f6078011a0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe512dacc84932de7eb044c0961598f9203446b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe512dacc84932de7eb044c0961598f9203446b9", "html_url": "https://github.com/rust-lang/rust/commit/fe512dacc84932de7eb044c0961598f9203446b9"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "64835a666faef46d6fe23c518d88108d5dbe7663", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=fd9f7da68ed23934ace0ae86b39d47f6078011a0", "patch": "@@ -42,9 +42,6 @@ pub enum ObjectSafetyViolation<'tcx> {\n /// Reasons a method might not be object-safe.\n #[derive(Copy,Clone,Debug)]\n pub enum MethodViolationCode {\n-    /// e.g., `fn(self)`\n-    ByValueSelf,\n-\n     /// e.g., `fn foo()`\n     StaticMethod,\n \n@@ -204,17 +201,15 @@ fn object_safety_violations_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n         return None;\n     }\n \n-    // The method's first parameter must be something that derefs to\n-    // `&self`. For now, we only accept `&self` and `Box<Self>`.\n+    // The method's first parameter must be something that derefs (or\n+    // autorefs) to `&self`. For now, we only accept `self`, `&self`\n+    // and `Box<Self>`.\n     match method.explicit_self {\n-        ty::ByValueExplicitSelfCategory => {\n-            return Some(MethodViolationCode::ByValueSelf);\n-        }\n-\n         ty::StaticExplicitSelfCategory => {\n             return Some(MethodViolationCode::StaticMethod);\n         }\n \n+        ty::ByValueExplicitSelfCategory |\n         ty::ByReferenceExplicitSelfCategory(..) |\n         ty::ByBoxExplicitSelfCategory => {\n         }"}, {"sha": "630530cf11f841186dcb2e0c899e2b6d1ab28661", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=fd9f7da68ed23934ace0ae86b39d47f6078011a0", "patch": "@@ -133,14 +133,6 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                      in the supertrait listing\");\n             }\n \n-            ObjectSafetyViolation::Method(method, MethodViolationCode::ByValueSelf) => {\n-                tcx.sess.span_note(\n-                    span,\n-                    &format!(\"method `{}` has a receiver type of `Self`, \\\n-                              which cannot be used with a trait object\",\n-                             method.name.user_string(tcx)));\n-            }\n-\n             ObjectSafetyViolation::Method(method, MethodViolationCode::StaticMethod) => {\n                 tcx.sess.span_note(\n                     span,"}, {"sha": "d682ef7d70c9db931e5cbb28f74bee4b2c3ed41c", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=fd9f7da68ed23934ace0ae86b39d47f6078011a0", "patch": "@@ -15,8 +15,7 @@ fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n-    //~^ ERROR object-safe\n-    //~| ERROR mismatched types\n+    //~^ ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::FnOnce(isize)>`\n     //~| expected ()"}, {"sha": "1b20a902c9d527c7bc3ac6a204847d2939e415bc", "filename": "src/test/compile-fail/object-safety-by-value-self-use.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs?ref=fd9f7da68ed23934ace0ae86b39d47f6078011a0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that while a trait with by-value self is object-safe, we\n+// can't actually invoke it from an object (yet...?).\n+\n+#![feature(rustc_attrs)]\n+\n+trait Bar {\n+    fn bar(self);\n+}\n+\n+trait Baz {\n+    fn baz(self: Self);\n+}\n+\n+fn use_bar(t: Box<Bar>) {\n+    t.bar() //~ ERROR cannot move a value of type Bar\n+}\n+\n+fn main() { }\n+"}, {"sha": "976717249e8eb2400fe6e307b625bd0fc8e73e18", "filename": "src/test/compile-fail/object-safety-by-value-self.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9f7da68ed23934ace0ae86b39d47f6078011a0/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs?ref=fd9f7da68ed23934ace0ae86b39d47f6078011a0", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that we correctly prevent users from making trait objects\n-// from traits with a `fn(self)` method, unless `where Self : Sized`\n-// is present on the method.\n+// Check that a trait with by-value self is considered object-safe.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n \n trait Bar {\n     fn bar(self);\n@@ -26,27 +27,19 @@ trait Quux {\n }\n \n fn make_bar<T:Bar>(t: &T) -> &Bar {\n-    t\n-        //~^ ERROR `Bar` is not object-safe\n-        //~| NOTE method `bar` has a receiver type of `Self`\n+    t // legal\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n-    t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n-        //~| NOTE method `bar` has a receiver type of `Self`\n+    t as &Bar // legal\n }\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n-    t\n-        //~^ ERROR `Baz` is not object-safe\n-        //~| NOTE method `baz` has a receiver type of `Self`\n+    t // legal\n }\n \n fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n-    t as &Baz\n-        //~^ ERROR `Baz` is not object-safe\n-        //~| NOTE method `baz` has a receiver type of `Self`\n+    t as &Baz // legal\n }\n \n fn make_quux<T:Quux>(t: &T) -> &Quux {\n@@ -57,5 +50,6 @@ fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n     t as &Quux\n }\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n }"}]}