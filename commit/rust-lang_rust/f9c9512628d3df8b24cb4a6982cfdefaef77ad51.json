{"sha": "f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Yzk1MTI2MjhkM2RmOGIyNGNiNGE2OTgyY2ZkZWZhZWY3N2FkNTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T07:24:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T07:24:10Z"}, "message": "Rollup merge of #58309 - wesleywiser:add_more_profiler_events, r=michaelwoerister\n\nAdd more profiler events\n\n- Adds Start\\Stop events for time spent loading incremental query results from disk.\n\n- Adds Start\\Stop events for time spent blocked waiting for queries to complete (when parallel queries are enabled).\n\nr? @michaelwoerister", "tree": {"sha": "2c021f8e20c357cb6a65b4b2486ad2c442ee02b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c021f8e20c357cb6a65b4b2486ad2c442ee02b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZReaCRBK7hj4Ov3rIwAAdHIIAD0UOranIhsjuMX6oog5Hv0k\npFTGV6N6FY244+V5Xi7oL2EL6MbNn4H3jTX9Eq/dAnaBd1YgaMVhE2jWyMGY/vb6\nqkrKR7MynLVhAfQka0jbbVBRpcDuOcUUGqyup9+wlLmOi2+Jw+Yw9YQLLZEYTyzn\nlg6f34Tvb3ia7WP56FIIyR/lRvW9rSEK8msqtqTdbVMfTkVrNkQH9Y7njNj2yDI1\nNvxooLB17D80aByA/5L6SGBH8Aj7izF+vFG/vdgCM2Z2zd6W4/85t5zZ+rgt7vSx\nidmn7d1R1BBPdvTPfvjexjK3KnRI2fXaslZCmv+C1vVRfSU0sWc+KyBSPVyrs4k=\n=uFjL\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c021f8e20c357cb6a65b4b2486ad2c442ee02b0\nparent c67d4749a547a0c937e257ad9e0248075178ddc4\nparent e9ebc2e9561d285b0e9991943a834da18cb65c1f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550129050 +0100\ncommitter GitHub <noreply@github.com> 1550129050 +0100\n\nRollup merge of #58309 - wesleywiser:add_more_profiler_events, r=michaelwoerister\n\nAdd more profiler events\n\n- Adds Start\\Stop events for time spent loading incremental query results from disk.\n\n- Adds Start\\Stop events for time spent blocked waiting for queries to complete (when parallel queries are enabled).\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "html_url": "https://github.com/rust-lang/rust/commit/f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c9512628d3df8b24cb4a6982cfdefaef77ad51/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67d4749a547a0c937e257ad9e0248075178ddc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67d4749a547a0c937e257ad9e0248075178ddc4", "html_url": "https://github.com/rust-lang/rust/commit/c67d4749a547a0c937e257ad9e0248075178ddc4"}, {"sha": "e9ebc2e9561d285b0e9991943a834da18cb65c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ebc2e9561d285b0e9991943a834da18cb65c1f", "html_url": "https://github.com/rust-lang/rust/commit/e9ebc2e9561d285b0e9991943a834da18cb65c1f"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "19b39be8a4ddff0c1404ab9fd63ee52de58cb941", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9512628d3df8b24cb4a6982cfdefaef77ad51/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9512628d3df8b24cb4a6982cfdefaef77ad51/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "patch": "@@ -124,7 +124,15 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             let job = match lock.active.entry((*key).clone()) {\n                 Entry::Occupied(entry) => {\n                     match *entry.get() {\n-                        QueryResult::Started(ref job) => job.clone(),\n+                        QueryResult::Started(ref job) => {\n+                            //For parallel queries, we'll block and wait until the query running\n+                            //in another thread has completed. Record how long we wait in the\n+                            //self-profiler\n+                            #[cfg(parallel_compiler)]\n+                            tcx.sess.profiler(|p| p.query_blocked_start(Q::NAME, Q::CATEGORY));\n+\n+                            job.clone()\n+                        },\n                         QueryResult::Poisoned => FatalError.raise(),\n                     }\n                 }\n@@ -160,7 +168,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             // thread\n             #[cfg(parallel_compiler)]\n             {\n-                if let Err(cycle) = job.r#await(tcx, span) {\n+                let result = job.r#await(tcx, span);\n+                tcx.sess.profiler(|p| p.query_blocked_end(Q::NAME, Q::CATEGORY));\n+\n+                if let Err(cycle) = result {\n                     return TryGetJob::JobCompleted(Err(cycle));\n                 }\n             }\n@@ -441,7 +452,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // First we try to load the result from the on-disk cache\n         let result = if Q::cache_on_disk(self.global_tcx(), key.clone()) &&\n                         self.sess.opts.debugging_opts.incremental_queries {\n+            self.sess.profiler(|p| p.incremental_load_result_start(Q::NAME));\n             let result = Q::try_load_from_disk(self.global_tcx(), prev_dep_node_index);\n+            self.sess.profiler(|p| p.incremental_load_result_end(Q::NAME));\n \n             // We always expect to find a cached result for things that\n             // can be forced from DepNode."}, {"sha": "c90bd12a3100f27ed3dffc933297c24cc35d39ba", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 57, "deletions": 18, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f9c9512628d3df8b24cb4a6982cfdefaef77ad51/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c9512628d3df8b24cb4a6982cfdefaef77ad51/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=f9c9512628d3df8b24cb4a6982cfdefaef77ad51", "patch": "@@ -25,16 +25,28 @@ pub enum ProfilerEvent {\n     GenericActivityEnd { category: ProfileCategory, time: Instant },\n     QueryCacheHit { query_name: &'static str, category: ProfileCategory },\n     QueryCount { query_name: &'static str, category: ProfileCategory, count: usize },\n+    IncrementalLoadResultStart { query_name: &'static str, time: Instant },\n+    IncrementalLoadResultEnd { query_name: &'static str, time: Instant },\n+    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: Instant },\n+    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: Instant },\n }\n \n impl ProfilerEvent {\n     fn is_start_event(&self) -> bool {\n         use self::ProfilerEvent::*;\n \n         match self {\n-            QueryStart { .. } | GenericActivityStart { .. } => true,\n-            QueryEnd { .. } | GenericActivityEnd { .. } |\n-            QueryCacheHit { .. } | QueryCount { .. } => false,\n+            QueryStart { .. } |\n+            GenericActivityStart { .. } |\n+            IncrementalLoadResultStart { .. } |\n+            QueryBlockedStart { .. } => true,\n+\n+            QueryEnd { .. } |\n+            GenericActivityEnd { .. } |\n+            QueryCacheHit { .. } |\n+            QueryCount { .. } |\n+            IncrementalLoadResultEnd { .. } |\n+            QueryBlockedEnd { .. } => false,\n         }\n     }\n }\n@@ -57,12 +69,7 @@ impl CategoryResultData {\n     }\n \n     fn total_time(&self) -> u64 {\n-        let mut total = 0;\n-        for (_, time) in &self.query_times {\n-            total += time;\n-        }\n-\n-        total\n+        self.query_times.iter().map(|(_, time)| time).sum()\n     }\n \n     fn total_cache_data(&self) -> (u64, u64) {\n@@ -121,13 +128,7 @@ impl CalculatedResults {\n     }\n \n     fn total_time(&self) -> u64 {\n-        let mut total = 0;\n-\n-        for (_, data) in &self.categories {\n-            total += data.total_time();\n-        }\n-\n-        total\n+        self.categories.iter().map(|(_, data)| data.total_time()).sum()\n     }\n \n     fn with_options(mut self, opts: &Options) -> CalculatedResults {\n@@ -225,6 +226,40 @@ impl SelfProfiler {\n         })\n     }\n \n+    #[inline]\n+    pub fn incremental_load_result_start(&mut self, query_name: &'static str) {\n+        self.record(ProfilerEvent::IncrementalLoadResultStart {\n+            query_name,\n+            time: Instant::now(),\n+        })\n+    }\n+\n+    #[inline]\n+    pub fn incremental_load_result_end(&mut self, query_name: &'static str) {\n+        self.record(ProfilerEvent::IncrementalLoadResultEnd {\n+            query_name,\n+            time: Instant::now(),\n+        })\n+    }\n+\n+    #[inline]\n+    pub fn query_blocked_start(&mut self, query_name: &'static str, category: ProfileCategory) {\n+        self.record(ProfilerEvent::QueryBlockedStart {\n+            query_name,\n+            category,\n+            time: Instant::now(),\n+        })\n+    }\n+\n+    #[inline]\n+    pub fn query_blocked_end(&mut self, query_name: &'static str, category: ProfileCategory) {\n+        self.record(ProfilerEvent::QueryBlockedEnd {\n+            query_name,\n+            category,\n+            time: Instant::now(),\n+        })\n+    }\n+\n     #[inline]\n     fn record(&mut self, event: ProfilerEvent) {\n         let thread_id = std::thread::current().id();\n@@ -317,6 +352,10 @@ impl SelfProfiler {\n                         result_data.query_cache_stats.entry(query_name).or_insert((0, 0));\n                     *totals += *count as u64;\n                 },\n+                //we don't summarize incremental load result events in the simple output mode\n+                IncrementalLoadResultStart { .. } | IncrementalLoadResultEnd { .. } => { },\n+                //we don't summarize parallel query blocking in the simple output mode\n+                QueryBlockedStart { .. } | QueryBlockedEnd { .. } => { },\n             }\n         }\n \n@@ -361,9 +400,9 @@ impl SelfProfiler {\n             .unwrap();\n \n         let mut categories: Vec<_> = results.categories.iter().collect();\n-        categories.sort_by(|(_, data1), (_, data2)| data2.total_time().cmp(&data1.total_time()));\n+        categories.sort_by_cached_key(|(_, d)| d.total_time());\n \n-        for (category, data) in categories {\n+        for (category, data) in categories.iter().rev() {\n             let (category_hits, category_total) = data.total_cache_data();\n             let category_hit_percent = calculate_percent(category_hits, category_total);\n "}]}