{"sha": "3dd00bac7c60452055b657903da9c736149140ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDAwYmFjN2M2MDQ1MjA1NWI2NTc5MDNkYTljNzM2MTQ5MTQwYWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-15T16:18:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-15T16:18:32Z"}, "message": "ci: Remove Travis/AppVeyor configuration\n\nNow that we've fully moved to Azure Pipelines and bors has been updated\nto only gate on Azure this commit removes the remaining Travis/AppVeyor\nsupport contained in this repository. Most of the deletions here are\nrelated to producing better output on Travis by folding certain\nsections. This isn't supported by Azure so there's no need to keep it\naround, and if Azure ever adds support we can always add it back!", "tree": {"sha": "a80c143c8c073b829a44921fbf5f9fa32f6863db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a80c143c8c073b829a44921fbf5f9fa32f6863db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd00bac7c60452055b657903da9c736149140ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd00bac7c60452055b657903da9c736149140ad", "html_url": "https://github.com/rust-lang/rust/commit/3dd00bac7c60452055b657903da9c736149140ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd00bac7c60452055b657903da9c736149140ad/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278e5fd2152bfba3234f97560a378bdb03e24a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/278e5fd2152bfba3234f97560a378bdb03e24a3d", "html_url": "https://github.com/rust-lang/rust/commit/278e5fd2152bfba3234f97560a378bdb03e24a3d"}], "stats": {"total": 245, "additions": 11, "deletions": 234}, "files": [{"sha": "1d35ea0efacc247512c214f8baec0b6cdb0fe1ee", "filename": ".travis.yml", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/278e5fd2152bfba3234f97560a378bdb03e24a3d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/278e5fd2152bfba3234f97560a378bdb03e24a3d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=278e5fd2152bfba3234f97560a378bdb03e24a3d", "patch": "@@ -1,10 +0,0 @@\n-language: shell\n-script: echo Travis CI is not used anymore\n-\n-branches:\n-  only:\n-    - auto\n-    - try\n-\n-notifications:\n-  email: false"}, {"sha": "003de85184c32b3c4ffa35747f01148c24b948d7", "filename": "appveyor.yml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/278e5fd2152bfba3234f97560a378bdb03e24a3d/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/278e5fd2152bfba3234f97560a378bdb03e24a3d/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=278e5fd2152bfba3234f97560a378bdb03e24a3d", "patch": "@@ -1,9 +0,0 @@\n-clone_depth: 1\n-build: false\n-\n-test_script:\n-  - echo AppVeyor is not used anymore\n-\n-branches:\n-  only:\n-    - auto"}, {"sha": "11b082ac3f6d8ad226e162f99e630c2b15eb440b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -50,7 +50,6 @@ impl Step for Std {\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -99,7 +98,6 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind));\n         rustc_cargo(builder, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -153,7 +151,6 @@ impl Step for CodegenBackend {\n \n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n                   args(builder.kind),\n@@ -190,7 +187,6 @@ impl Step for Test {\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, cargo_subcommand(builder.kind));\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -239,7 +235,6 @@ impl Step for Rustdoc {\n                                            SourceType::InTree,\n                                            &[]);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,"}, {"sha": "9ced04a5c808a1f64937e27c3fc58b679a8f7341", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -95,7 +95,6 @@ impl Step for Std {\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n@@ -422,7 +421,6 @@ impl Step for Test {\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n@@ -555,7 +553,6 @@ impl Step for Rustc {\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n         builder.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n@@ -710,7 +707,6 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n                               vec![],"}, {"sha": "7011b7f1664c7832ce5fa03c357d468bebad7cb3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -128,7 +128,7 @@ use build_helper::{\n };\n use filetime::FileTime;\n \n-use crate::util::{exe, libdir, OutputFolder, CiEnv};\n+use crate::util::{exe, libdir, CiEnv};\n \n mod cc_detect;\n mod channel;\n@@ -1092,19 +1092,6 @@ impl Build {\n         }\n     }\n \n-    /// Fold the output of the commands after this method into a group. The fold\n-    /// ends when the returned object is dropped. Folding can only be used in\n-    /// the Travis CI environment.\n-    pub fn fold_output<D, F>(&self, name: F) -> Option<OutputFolder>\n-        where D: Into<String>, F: FnOnce() -> D\n-    {\n-        if !self.config.dry_run && self.ci_env == CiEnv::Travis {\n-            Some(OutputFolder::new(name().into()))\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Updates the actual toolstate of a tool.\n     ///\n     /// The toolstates are saved to the file specified by the key"}, {"sha": "f8d1abe299473669443286e0b086a23bb37a093b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -104,7 +104,6 @@ impl Step for Llvm {\n             }\n         }\n \n-        let _folder = builder.fold_output(|| \"llvm\");\n         let descriptor = if emscripten { \"Emscripten \" } else { \"\" };\n         builder.info(&format!(\"Building {}LLVM for {}\", descriptor, target));\n         let _time = util::timeit(&builder);\n@@ -493,7 +492,6 @@ impl Step for Lld {\n             return out_dir\n         }\n \n-        let _folder = builder.fold_output(|| \"lld\");\n         builder.info(&format!(\"Building LLD for {}\", target));\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n@@ -560,7 +558,6 @@ impl Step for TestHelpers {\n             return\n         }\n \n-        let _folder = builder.fold_output(|| \"build_test_helpers\");\n         builder.info(\"Building test helpers\");\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();"}, {"sha": "26fd7585ab5d1c6f86291bc00e4275444c20be55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -713,7 +713,6 @@ impl Step for Tidy {\n             cmd.arg(\"--verbose\");\n         }\n \n-        let _folder = builder.fold_output(|| \"tidy\");\n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n     }\n@@ -1310,7 +1309,6 @@ impl Step for Compiletest {\n \n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n-        let _folder = builder.fold_output(|| format!(\"test_{}\", suite));\n         builder.info(&format!(\n             \"Check compiletest suite={} mode={} ({} -> {})\",\n             suite, mode, &compiler.host, target\n@@ -1320,7 +1318,6 @@ impl Step for Compiletest {\n \n         if let Some(compare_mode) = compare_mode {\n             cmd.arg(\"--compare-mode\").arg(compare_mode);\n-            let _folder = builder.fold_output(|| format!(\"test_{}_{}\", suite, compare_mode));\n             builder.info(&format!(\n                 \"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n                 suite, mode, compare_mode, &compiler.host, target\n@@ -1364,7 +1361,6 @@ impl Step for DocTest {\n         // tests for all files that end in `*.md`\n         let mut stack = vec![builder.src.join(self.path)];\n         let _time = util::timeit(&builder);\n-        let _folder = builder.fold_output(|| format!(\"test_{}\", self.name));\n \n         let mut files = Vec::new();\n         while let Some(p) = stack.pop() {\n@@ -1495,7 +1491,6 @@ impl Step for ErrorIndex {\n             .env(\"CFG_BUILD\", &builder.config.build)\n             .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n \n-        let _folder = builder.fold_output(|| \"test_error_index\");\n         builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run(&mut tool);\n@@ -1819,14 +1814,6 @@ impl Step for Crate {\n             );\n         }\n \n-        let _folder = builder.fold_output(|| {\n-            format!(\n-                \"{}_stage{}-{}\",\n-                test_kind.subcommand(),\n-                compiler.stage,\n-                krate\n-            )\n-        });\n         builder.info(&format!(\n             \"{} {} stage{} ({} -> {})\",\n             test_kind, krate, compiler.stage, &compiler.host, target\n@@ -1894,8 +1881,6 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"--quiet\");\n         }\n \n-        let _folder = builder\n-            .fold_output(|| format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage));\n         builder.info(&format!(\n             \"{} rustdoc stage{} ({} -> {})\",\n             test_kind, compiler.stage, &compiler.host, target"}, {"sha": "15a329a5b91529334c24a91d3d3c703cc50a77d8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -74,7 +74,6 @@ impl Step for ToolBuild {\n             &self.extra_features,\n         );\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n@@ -509,7 +508,6 @@ impl Step for Rustdoc {\n             &[],\n         );\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n         builder.info(&format!(\"Building rustdoc for stage{} ({})\",\n             target_compiler.stage, target_compiler.host));\n         builder.run(&mut cargo);"}, {"sha": "98ae7b692bb3c7524bc01bde8bbfea1b799f8fcf", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -6,10 +6,10 @@\n use std::env;\n use std::str;\n use std::fs;\n-use std::io::{self, Write};\n+use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::time::{SystemTime, Instant};\n+use std::time::Instant;\n \n use build_helper::t;\n \n@@ -254,90 +254,20 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     }\n }\n \n-/// An RAII structure that indicates all output until this instance is dropped\n-/// is part of the same group.\n-///\n-/// On Travis CI, these output will be folded by default, together with the\n-/// elapsed time in this block. This reduces noise from unnecessary logs,\n-/// allowing developers to quickly identify the error.\n-///\n-/// Travis CI supports folding by printing `travis_fold:start:<name>` and\n-/// `travis_fold:end:<name>` around the block. Time elapsed is recognized\n-/// similarly with `travis_time:[start|end]:<name>`. These are undocumented, but\n-/// can easily be deduced from source code of the [Travis build commands].\n-///\n-/// [Travis build commands]:\n-/// https://github.com/travis-ci/travis-build/blob/f603c0089/lib/travis/build/templates/header.sh\n-pub struct OutputFolder {\n-    name: String,\n-    start_time: SystemTime, // we need SystemTime to get the UNIX timestamp.\n-}\n-\n-impl OutputFolder {\n-    /// Creates a new output folder with the given group name.\n-    pub fn new(name: String) -> OutputFolder {\n-        // \"\\r\" moves the cursor to the beginning of the line, and \"\\x1b[0K\" is\n-        // the ANSI escape code to clear from the cursor to end of line.\n-        // Travis seems to have trouble when _not_ using \"\\r\\x1b[0K\", that will\n-        // randomly put lines to the top of the webpage.\n-        print!(\"travis_fold:start:{0}\\r\\x1b[0Ktravis_time:start:{0}\\r\\x1b[0K\", name);\n-        OutputFolder {\n-            name,\n-            start_time: SystemTime::now(),\n-        }\n-    }\n-}\n-\n-impl Drop for OutputFolder {\n-    fn drop(&mut self) {\n-        use std::time::*;\n-        use std::u64;\n-\n-        fn to_nanos(duration: Result<Duration, SystemTimeError>) -> u64 {\n-            match duration {\n-                Ok(d) => d.as_secs() * 1_000_000_000 + d.subsec_nanos() as u64,\n-                Err(_) => u64::MAX,\n-            }\n-        }\n-\n-        let end_time = SystemTime::now();\n-        let duration = end_time.duration_since(self.start_time);\n-        let start = self.start_time.duration_since(UNIX_EPOCH);\n-        let finish = end_time.duration_since(UNIX_EPOCH);\n-        println!(\n-            \"travis_fold:end:{0}\\r\\x1b[0K\\n\\\n-                travis_time:end:{0}:start={1},finish={2},duration={3}\\r\\x1b[0K\",\n-            self.name,\n-            to_nanos(start),\n-            to_nanos(finish),\n-            to_nanos(duration)\n-        );\n-        io::stdout().flush().unwrap();\n-    }\n-}\n-\n /// The CI environment rustbuild is running in. This mainly affects how the logs\n /// are printed.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum CiEnv {\n     /// Not a CI environment.\n     None,\n-    /// The Travis CI environment, for Linux (including Docker) and macOS builds.\n-    Travis,\n-    /// The AppVeyor environment, for Windows builds.\n-    AppVeyor,\n     /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n     AzurePipelines,\n }\n \n impl CiEnv {\n     /// Obtains the current CI environment.\n     pub fn current() -> CiEnv {\n-        if env::var(\"TRAVIS\").ok().map_or(false, |e| &*e == \"true\") {\n-            CiEnv::Travis\n-        } else if env::var(\"APPVEYOR\").ok().map_or(false, |e| &*e == \"True\") {\n-            CiEnv::AppVeyor\n-        } else if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n+        if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AzurePipelines\n         } else {\n             CiEnv::None"}, {"sha": "367e43849923fca154a6867d158431a214d2f8c7", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -20,7 +20,7 @@ Images will output artifacts in an `obj` dir at the root of a repository.\n \n - Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n - `scripts` contains files shared by docker images\n-- `disabled` contains images that are not built on travis\n+- `disabled` contains images that are not built on CI\n \n ## Docker Toolbox on Windows\n "}, {"sha": "dea41bee6e05c1324dfdb716d45090bd07ada0bb", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -17,9 +17,6 @@ dist=$objdir/build/dist\n \n source \"$ci_dir/shared.sh\"\n \n-travis_fold start build_docker\n-travis_time_start\n-\n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n     if [ \"$CI\" != \"\" ]; then\n       hash_key=/tmp/.docker-hash-key.txt\n@@ -94,7 +91,6 @@ elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n         echo Cannot run disabled images on CI!\n         exit 1\n     fi\n-    # retry messes with the pipe from tar to docker. Not needed on non-travis\n     # Transform changes the context of disabled Dockerfiles to match the enabled ones\n     tar --transform 's#^./disabled/#./#' -C $docker_dir -c . | docker \\\n       build \\\n@@ -107,9 +103,6 @@ else\n     exit 1\n fi\n \n-travis_fold end build_docker\n-travis_time_finish\n-\n mkdir -p $HOME/.cargo\n mkdir -p $objdir/tmp\n mkdir -p $objdir/cores\n@@ -144,8 +137,6 @@ exec docker \\\n   --env DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --env CI \\\n-  --env TRAVIS \\\n-  --env TRAVIS_BRANCH \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\"}, {"sha": "56186a8b6a686b3288807e69bc2731c48d20711a", "filename": "src/ci/docker/x86_64-gnu-tools/repo.sh", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -5,8 +5,7 @@\n #\n # The function relies on a GitHub bot user, which should have a Personal access\n # token defined in the environment variable $TOOLSTATE_REPO_ACCESS_TOKEN. If for\n-# some reason you need to change the token, please update `.travis.yml` and\n-# `appveyor.yml`:\n+# some reason you need to change the token, please update `.azure-pipelines/*`.\n #\n #   1. Generate a new Personal access token:\n #\n@@ -18,28 +17,9 @@\n #           Save it somewhere secure, as the token would be gone once you leave\n #           the page.\n #\n-#   2. Encrypt the token for Travis CI\n+#   2. Update the variable group in Azure Pipelines\n #\n-#       * Install the `travis` tool locally (`gem install travis`).\n-#       * Encrypt the token:\n-#           ```\n-#           travis -r rust-lang/rust encrypt \\\n-#                   TOOLSTATE_REPO_ACCESS_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n-#           ```\n-#       * Copy output to replace the existing one in `.travis.yml`.\n-#       * Details of this step can be found in\n-#           <https://docs.travis-ci.com/user/encryption-keys/>\n-#\n-#   3. Encrypt the token for AppVeyor\n-#\n-#       * Login to AppVeyor using your main account, and login as the rust-lang\n-#           organization.\n-#       * Open the [\"Encrypt data\" tool](https://ci.appveyor.com/tools/encrypt)\n-#       * Paste the 40-digit token into the \"Value to encrypt\" box, then click\n-#           \"Encrypt\"\n-#       * Copy the output to replace the existing one in `appveyor.yml`.\n-#       * Details of this step can be found in\n-#           <https://www.appveyor.com/docs/how-to/git-push/>\n+#       * Ping a member of the infrastructure team to do this.\n #\n #   4. Replace the email address below if the bot account identity is changed\n #"}, {"sha": "c7c3b0a5fbf5b0733064b0a46695e8f9a80c80ff", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -11,9 +11,6 @@ set -o nounset\n ci_dir=$(cd $(dirname $0) && pwd)\n . \"$ci_dir/shared.sh\"\n \n-travis_fold start init_repo\n-travis_time_start\n-\n REPO_DIR=\"$1\"\n CACHE_DIR=\"$2\"\n \n@@ -73,5 +70,3 @@ retry sh -c \"git submodule deinit -f $use_git && \\\n     git submodule sync && \\\n     git submodule update -j 16 --init --recursive $use_git\"\n wait\n-travis_fold end init_repo\n-travis_time_finish"}, {"sha": "b40bef776657302526ccb992d41dfe5580103384", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -91,27 +91,14 @@ if [ \"$RUN_CHECK_WITH_PARALLEL_QUERIES\" != \"\" ]; then\n   rm -rf build\n fi\n \n-travis_fold start configure\n-travis_time_start\n $SRC/configure $RUST_CONFIGURE_ARGS\n-travis_fold end configure\n-travis_time_finish\n \n-travis_fold start make-prepare\n-travis_time_start\n retry make prepare\n-travis_fold end make-prepare\n-travis_time_finish\n \n-travis_fold start check-bootstrap\n-travis_time_start\n make check-bootstrap\n-travis_fold end check-bootstrap\n-travis_time_finish\n \n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating.\n-travis_fold start log-system-info\n if isOSX; then\n     system_profiler SPHardwareDataType || true\n     sysctl hw || true\n@@ -121,19 +108,14 @@ else\n     cat /proc/meminfo || true\n     ncpus=$(grep processor /proc/cpuinfo | wc -l)\n fi\n-travis_fold end log-system-info\n \n if [ ! -z \"$SCRIPT\" ]; then\n   sh -x -c \"$SCRIPT\"\n else\n   do_make() {\n-    travis_fold start \"make-$1\"\n-    travis_time_start\n     echo \"make -j $ncpus $1\"\n     make -j $ncpus $1\n     local retval=$?\n-    travis_fold end \"make-$1\"\n-    travis_time_finish\n     return $retval\n   }\n "}, {"sha": "b093a07ec5c5aac8f116a21ee571b14c3fa8208a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3dd00bac7c60452055b657903da9c736149140ad/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=3dd00bac7c60452055b657903da9c736149140ad", "patch": "@@ -25,53 +25,13 @@ function retry {\n }\n \n function isCI {\n-  [ \"$CI\" = \"true\" ] || [ \"$TRAVIS\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+  [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n }\n \n function isOSX {\n-  [ \"$TRAVIS_OS_NAME\" = \"osx\" ] || [ \"$AGENT_OS\" = \"Darwin\" ]\n+  [ \"$AGENT_OS\" = \"Darwin\" ]\n }\n \n function getCIBranch {\n-  if [ \"$TRAVIS\" = \"true\" ]; then\n-    echo \"$TRAVIS_BRANCH\"\n-  elif [ \"$APPVEYOR\" = \"True\" ]; then\n-    echo \"$APPVEYOR_REPO_BRANCH\"\n-  else\n-    echo \"$BUILD_SOURCEBRANCHNAME\"\n-  fi;\n+  echo \"$BUILD_SOURCEBRANCHNAME\"\n }\n-\n-if ! declare -F travis_fold; then\n-  if [ \"${TRAVIS-false}\" = 'true' ]; then\n-    # This is a trimmed down copy of\n-    # https://github.com/travis-ci/travis-build/blob/master/lib/travis/build/templates/header.sh\n-    travis_fold() {\n-      echo -en \"travis_fold:$1:$2\\r\\033[0K\"\n-    }\n-    travis_time_start() {\n-      travis_timer_id=$(printf %08x $(( RANDOM * RANDOM )))\n-      travis_start_time=$(travis_nanoseconds)\n-      echo -en \"travis_time:start:$travis_timer_id\\r\\033[0K\"\n-    }\n-    travis_time_finish() {\n-      travis_end_time=$(travis_nanoseconds)\n-      local duration=$(($travis_end_time-$travis_start_time))\n-      local msg=\"travis_time:end:$travis_timer_id\"\n-      echo -en \"\\n$msg:start=$travis_start_time,finish=$travis_end_time,duration=$duration\\r\\033[0K\"\n-    }\n-    if [ $(uname) = 'Darwin' ]; then\n-      travis_nanoseconds() {\n-        date -u '+%s000000000'\n-      }\n-    else\n-      travis_nanoseconds() {\n-        date -u '+%s%N'\n-      }\n-    fi\n-  else\n-    travis_fold() { return 0; }\n-    travis_time_start() { return 0; }\n-    travis_time_finish() { return 0; }\n-  fi\n-fi"}]}