{"sha": "05faeb50f3d78aac24b9581e846d010d815d7747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZmFlYjUwZjNkNzhhYWMyNGI5NTgxZTg0NmQwMTBkODE1ZDc3NDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-12T15:21:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T15:21:39Z"}, "message": "Merge #6153\n\n6153: Improve prime_caches and display its progress r=matklad a=jonas-schievink\n\nIt now computes the `CrateDefMap` of all crates, which is generally a reasonable approximation for \"IDE features ready\". There is still some delay after this finishes, I suspect mostly due to impl collection, which takes a while, but this should be an improvement already.\r\n\r\nFor more accurate progress reports, this topologically sorts all crates before starting this operation. ~~Because that is also the ordering in which parallelization makes sense (which was previously attempted in https://github.com/rust-analyzer/rust-analyzer/pull/3529), I decided to throw that into the mix as well. It still doesn't provide *that* much of a performance boost, but it does scale beyond the current single-core architecture, and adding it was very easy.~~\r\n\r\n~~Unfortunately, as written, this will not tell the user which crate is actually causing slowdowns, since the displayed crate is the last one that was *started*, not the one we are currently *blocked* on, but that seems fairly difficult to implement unless I'm missing something.~~\r\n\r\n(I have removed rayon for now since it does not work correctly with cancellation.)\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "3d9b18ddb480dbfa2b2593b31660b3776629d514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9b18ddb480dbfa2b2593b31660b3776629d514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05faeb50f3d78aac24b9581e846d010d815d7747", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhHSDCRBK7hj4Ov3rIwAAdHIIABL4gxixUmGWAQlPbfgWRzh5\nsScSv41ScS5uuIjen6NtSOPmuYdF9E4L9P8wn3rcrsflUa5ZAr/9EHF3pfqx2Hjn\npIAUi0dovZ8yQCYMR7t9chHjqGsvaIaNUS62pJNIJCDOWDjNkhn/EcBCSCV7bQ2b\neBS6Hx2IW/5zLr515uu8SSq2nhE9i9AtPI7TOEDFSU1WABrM/ofDMfFbhRSm+UUS\nMuuraOF+9e2OT2FD3/Nla3hrQbvKGKet85KF5sPXMJxG3QPCTch3Wcf2wQSLykVP\nxPnmk0SqquAG+VgW3GBXdDB4NeapEfuyWsDpFK9CXaPOX8nlXrRGkqHYesWBWMo=\n=YTGN\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d9b18ddb480dbfa2b2593b31660b3776629d514\nparent fac59f4f28e3ede6c88999aa43d28e7caa7df3a7\nparent cde7392ec809599e6337d91561971e08c8e06831\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602516099 +0000\ncommitter GitHub <noreply@github.com> 1602516099 +0000\n\nMerge #6153\n\n6153: Improve prime_caches and display its progress r=matklad a=jonas-schievink\n\nIt now computes the `CrateDefMap` of all crates, which is generally a reasonable approximation for \"IDE features ready\". There is still some delay after this finishes, I suspect mostly due to impl collection, which takes a while, but this should be an improvement already.\r\n\r\nFor more accurate progress reports, this topologically sorts all crates before starting this operation. ~~Because that is also the ordering in which parallelization makes sense (which was previously attempted in https://github.com/rust-analyzer/rust-analyzer/pull/3529), I decided to throw that into the mix as well. It still doesn't provide *that* much of a performance boost, but it does scale beyond the current single-core architecture, and adding it was very easy.~~\r\n\r\n~~Unfortunately, as written, this will not tell the user which crate is actually causing slowdowns, since the displayed crate is the last one that was *started*, not the one we are currently *blocked* on, but that seems fairly difficult to implement unless I'm missing something.~~\r\n\r\n(I have removed rayon for now since it does not work correctly with cancellation.)\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05faeb50f3d78aac24b9581e846d010d815d7747", "html_url": "https://github.com/rust-lang/rust/commit/05faeb50f3d78aac24b9581e846d010d815d7747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05faeb50f3d78aac24b9581e846d010d815d7747/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7", "html_url": "https://github.com/rust-lang/rust/commit/fac59f4f28e3ede6c88999aa43d28e7caa7df3a7"}, {"sha": "cde7392ec809599e6337d91561971e08c8e06831", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde7392ec809599e6337d91561971e08c8e06831", "html_url": "https://github.com/rust-lang/rust/commit/cde7392ec809599e6337d91561971e08c8e06831"}], "stats": {"total": 132, "additions": 119, "deletions": 13}, "files": [{"sha": "215ac4b41dd7825778f188b122f64665c8f96c16", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=05faeb50f3d78aac24b9581e846d010d815d7747", "patch": "@@ -221,6 +221,34 @@ impl CrateGraph {\n         deps.into_iter()\n     }\n \n+    /// Returns all crates in the graph, sorted in topological order (ie. dependencies of a crate\n+    /// come before the crate itself).\n+    pub fn crates_in_topological_order(&self) -> Vec<CrateId> {\n+        let mut res = Vec::new();\n+        let mut visited = FxHashSet::default();\n+\n+        for krate in self.arena.keys().copied() {\n+            go(self, &mut visited, &mut res, krate);\n+        }\n+\n+        return res;\n+\n+        fn go(\n+            graph: &CrateGraph,\n+            visited: &mut FxHashSet<CrateId>,\n+            res: &mut Vec<CrateId>,\n+            source: CrateId,\n+        ) {\n+            if !visited.insert(source) {\n+                return;\n+            }\n+            for dep in graph[source].dependencies.iter() {\n+                go(graph, visited, res, dep.crate_id)\n+            }\n+            res.push(source)\n+        }\n+    }\n+\n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n         let (&crate_id, _) ="}, {"sha": "aaf9b3b4b7dc16ad24fefb7593aa4b0b0dd6961c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=05faeb50f3d78aac24b9581e846d010d815d7747", "patch": "@@ -77,6 +77,7 @@ pub use crate::{\n     hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n+    prime_caches::PrimeCachesProgress,\n     references::{\n         Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, RenameError,\n     },\n@@ -223,8 +224,11 @@ impl Analysis {\n         self.with_db(|db| status::status(&*db, file_id))\n     }\n \n-    pub fn prime_caches(&self, files: Vec<FileId>) -> Cancelable<()> {\n-        self.with_db(|db| prime_caches::prime_caches(db, files))\n+    pub fn prime_caches<F>(&self, cb: F) -> Cancelable<()>\n+    where\n+        F: Fn(PrimeCachesProgress) + Sync + std::panic::UnwindSafe,\n+    {\n+        self.with_db(move |db| prime_caches::prime_caches(db, &cb))\n     }\n \n     /// Gets the text of the source file."}, {"sha": "9687c2734a096d54f19125e15caff6c40441e9b0", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=05faeb50f3d78aac24b9581e846d010d815d7747", "patch": "@@ -3,10 +3,45 @@\n //! request takes longer to compute. This modules implemented prepopulating of\n //! various caches, it's not really advanced at the moment.\n \n-use crate::{FileId, RootDatabase};\n+use base_db::SourceDatabase;\n+use hir::db::DefDatabase;\n \n-pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n-    for file in files {\n-        let _ = crate::syntax_highlighting::highlight(db, file, None, false);\n+use crate::RootDatabase;\n+\n+#[derive(Debug)]\n+pub enum PrimeCachesProgress {\n+    Started,\n+    /// We started indexing a crate.\n+    StartedOnCrate {\n+        on_crate: String,\n+        n_done: usize,\n+        n_total: usize,\n+    },\n+    /// We finished indexing all crates.\n+    Finished,\n+}\n+\n+pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress) + Sync)) {\n+    let _p = profile::span(\"prime_caches\");\n+    let graph = db.crate_graph();\n+    let topo = &graph.crates_in_topological_order();\n+\n+    cb(PrimeCachesProgress::Started);\n+\n+    // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that.\n+    // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n+    // cancellation, so we cannot use rayon.\n+    for (i, krate) in topo.iter().enumerate() {\n+        let crate_name =\n+            graph[*krate].declaration_name.as_ref().map(ToString::to_string).unwrap_or_default();\n+\n+        cb(PrimeCachesProgress::StartedOnCrate {\n+            on_crate: crate_name,\n+            n_done: i,\n+            n_total: topo.len(),\n+        });\n+        db.crate_def_map(*krate);\n     }\n+\n+    cb(PrimeCachesProgress::Finished);\n }"}, {"sha": "fb18f90147fb33fb57095688cd0bb45b2e22b583", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=05faeb50f3d78aac24b9581e846d010d815d7747", "patch": "@@ -7,6 +7,7 @@ use std::{\n \n use base_db::VfsPath;\n use crossbeam_channel::{select, Receiver};\n+use ide::PrimeCachesProgress;\n use ide::{Canceled, FileId};\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n@@ -61,7 +62,7 @@ pub(crate) enum Task {\n     Response(Response),\n     Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n     Workspaces(Vec<anyhow::Result<ProjectWorkspace>>),\n-    Unit,\n+    PrimeCaches(PrimeCachesProgress),\n }\n \n impl fmt::Debug for Event {\n@@ -197,7 +198,28 @@ impl GlobalState {\n                     }\n                 }\n                 Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n-                Task::Unit => (),\n+                Task::PrimeCaches(progress) => {\n+                    let (state, message, fraction);\n+                    match progress {\n+                        PrimeCachesProgress::Started => {\n+                            state = Progress::Begin;\n+                            message = None;\n+                            fraction = 0.0;\n+                        }\n+                        PrimeCachesProgress::StartedOnCrate { on_crate, n_done, n_total } => {\n+                            state = Progress::Report;\n+                            message = Some(format!(\"{}/{} ({})\", n_done, n_total, on_crate));\n+                            fraction = Progress::fraction(n_done, n_total);\n+                        }\n+                        PrimeCachesProgress::Finished => {\n+                            state = Progress::End;\n+                            message = None;\n+                            fraction = 1.0;\n+                        }\n+                    };\n+\n+                    self.report_progress(\"indexing\", state, message, Some(fraction));\n+                }\n             },\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n@@ -573,12 +595,18 @@ impl GlobalState {\n                 Task::Diagnostics(diagnostics)\n             })\n         }\n-        self.task_pool.handle.spawn({\n-            let subs = subscriptions;\n+        self.task_pool.handle.spawn_with_sender({\n             let snap = self.snapshot();\n-            move || {\n-                snap.analysis.prime_caches(subs).unwrap_or_else(|_: Canceled| ());\n-                Task::Unit\n+            move |sender| {\n+                snap.analysis\n+                    .prime_caches(|progress| {\n+                        sender.send(Task::PrimeCaches(progress)).unwrap();\n+                    })\n+                    .unwrap_or_else(|_: Canceled| {\n+                        // Pretend that we're done, so that the progress bar is removed. Otherwise\n+                        // the editor may complain about it already existing.\n+                        sender.send(Task::PrimeCaches(PrimeCachesProgress::Finished)).unwrap()\n+                    });\n             }\n         });\n     }"}, {"sha": "83389373903221fae63de9f15b88336076a759a4", "filename": "crates/rust-analyzer/src/thread_pool.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Frust-analyzer%2Fsrc%2Fthread_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05faeb50f3d78aac24b9581e846d010d815d7747/crates%2Frust-analyzer%2Fsrc%2Fthread_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fthread_pool.rs?ref=05faeb50f3d78aac24b9581e846d010d815d7747", "patch": "@@ -23,6 +23,17 @@ impl<T> TaskPool<T> {\n         })\n     }\n \n+    pub(crate) fn spawn_with_sender<F>(&mut self, task: F)\n+    where\n+        F: FnOnce(Sender<T>) + Send + 'static,\n+        T: Send + 'static,\n+    {\n+        self.inner.execute({\n+            let sender = self.sender.clone();\n+            move || task(sender)\n+        })\n+    }\n+\n     pub(crate) fn len(&self) -> usize {\n         self.inner.queued_count()\n     }"}]}