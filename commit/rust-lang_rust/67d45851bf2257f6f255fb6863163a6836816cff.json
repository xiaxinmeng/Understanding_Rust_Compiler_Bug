{"sha": "67d45851bf2257f6f255fb6863163a6836816cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDQ1ODUxYmYyMjU3ZjZmMjU1ZmI2ODYzMTYzYTY4MzY4MTZjZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-24T15:13:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T15:13:25Z"}, "message": "Merge #6618\n\n6618: Properly infer tuple patterns when encountering ellipsis r=Veykril a=Veykril\n\nWe basically just split the subpatterns into two halves when the ellipsis is present and then offset the latter half to account for the ignored bindings.\r\n\r\nFixes #6616\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4624bd445774dd7a6eb1cf12ccfac9f105948c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4624bd445774dd7a6eb1cf12ccfac9f105948c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d45851bf2257f6f255fb6863163a6836816cff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvSMVCRBK7hj4Ov3rIwAAdHIIAKdOnsU5ekQGXSM1FlkQ2Cbj\nIgkuYWGTzKL/VWNjivA4Uee1iYOHNJUs5uL4HdMKjycwlFG6LhB+zKkoDnSr/7Ql\njcFZpMXXznNjWOOlECVN/LTSbkEVAYGQZpVOXRG6iqQZLZ9fO2jN0ZUSiimB1V07\nfofyQmoUxN4Hl3PSUOQg66X/HDRWJ20f//4k8aueNXQoldNhnbA2JYwG+uiXc3BY\nnuZ1yn6E36p9Ow1AI3Wa0KJMn+Ir3g4H9fjhS6hL6aY+vQiQj/7OcLVS6QyEWJnK\n3MGV4qB6UdI01vdEGCv1fkAJ2CgTLQPndBX4+4TD37iFRUzDlHjCk+lCo34cKSg=\n=VXi8\n-----END PGP SIGNATURE-----\n", "payload": "tree 4624bd445774dd7a6eb1cf12ccfac9f105948c81\nparent f7e63bdf916ed168dd676f44a2c59feb4f5ff131\nparent a5efefd3d788a6c5a7fb6a56a0da32f9bf62584e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606230805 +0000\ncommitter GitHub <noreply@github.com> 1606230805 +0000\n\nMerge #6618\n\n6618: Properly infer tuple patterns when encountering ellipsis r=Veykril a=Veykril\n\nWe basically just split the subpatterns into two halves when the ellipsis is present and then offset the latter half to account for the ignored bindings.\r\n\r\nFixes #6616\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d45851bf2257f6f255fb6863163a6836816cff", "html_url": "https://github.com/rust-lang/rust/commit/67d45851bf2257f6f255fb6863163a6836816cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d45851bf2257f6f255fb6863163a6836816cff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e63bdf916ed168dd676f44a2c59feb4f5ff131", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e63bdf916ed168dd676f44a2c59feb4f5ff131", "html_url": "https://github.com/rust-lang/rust/commit/f7e63bdf916ed168dd676f44a2c59feb4f5ff131"}, {"sha": "a5efefd3d788a6c5a7fb6a56a0da32f9bf62584e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5efefd3d788a6c5a7fb6a56a0da32f9bf62584e", "html_url": "https://github.com/rust-lang/rust/commit/a5efefd3d788a6c5a7fb6a56a0da32f9bf62584e"}], "stats": {"total": 141, "additions": 129, "deletions": 12}, "files": [{"sha": "b70ec55eb5c50bf9a0f9b41b35981112933a623e", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/67d45851bf2257f6f255fb6863163a6836816cff/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d45851bf2257f6f255fb6863163a6836816cff/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=67d45851bf2257f6f255fb6863163a6836816cff", "patch": "@@ -23,6 +23,7 @@ impl<'a> InferenceContext<'a> {\n         expected: &Ty,\n         default_bm: BindingMode,\n         id: PatId,\n+        ellipsis: Option<usize>,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n         let var_data = def.map(|it| variant_data(self.db.upcast(), it));\n@@ -34,8 +35,15 @@ impl<'a> InferenceContext<'a> {\n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n+        let (pre, post) = match ellipsis {\n+            Some(idx) => subpats.split_at(idx),\n+            None => (&subpats[..], &[][..]),\n+        };\n+        let post_idx_offset = field_tys.iter().count() - post.len();\n \n-        for (i, &subpat) in subpats.iter().enumerate() {\n+        let pre_iter = pre.iter().enumerate();\n+        let post_iter = (post_idx_offset..).zip(post.iter());\n+        for (i, &subpat) in pre_iter.chain(post_iter) {\n             let expected_ty = var_data\n                 .as_ref()\n                 .and_then(|d| d.field(&Name::new_tuple_field(i)))\n@@ -111,20 +119,29 @@ impl<'a> InferenceContext<'a> {\n         let expected = expected;\n \n         let ty = match &body[pat] {\n-            Pat::Tuple { ref args, .. } => {\n+            &Pat::Tuple { ref args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n                     Some(parameters) => &*parameters.0,\n                     _ => &[],\n                 };\n-                let expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n \n-                let inner_tys = args\n-                    .iter()\n-                    .zip(expectations_iter)\n-                    .map(|(&pat, ty)| self.infer_pat(pat, ty, default_bm))\n-                    .collect();\n+                let (pre, post) = match ellipsis {\n+                    Some(idx) => args.split_at(idx),\n+                    None => (&args[..], &[][..]),\n+                };\n+                let n_uncovered_patterns = expectations.len().saturating_sub(args.len());\n+                let mut expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n+                let mut infer_pat = |(&pat, ty)| self.infer_pat(pat, ty, default_bm);\n+\n+                let mut inner_tys = Vec::with_capacity(n_uncovered_patterns + args.len());\n+                inner_tys.extend(pre.iter().zip(expectations_iter.by_ref()).map(&mut infer_pat));\n+                inner_tys.extend(expectations_iter.by_ref().take(n_uncovered_patterns).cloned());\n+                inner_tys.extend(post.iter().zip(expectations_iter).map(infer_pat));\n \n-                Ty::apply(TypeCtor::Tuple { cardinality: args.len() as u16 }, Substs(inner_tys))\n+                Ty::apply(\n+                    TypeCtor::Tuple { cardinality: inner_tys.len() as u16 },\n+                    Substs(inner_tys.into()),\n+                )\n             }\n             Pat::Or(ref pats) => {\n                 if let Some((first_pat, rest)) = pats.split_first() {\n@@ -150,9 +167,14 @@ impl<'a> InferenceContext<'a> {\n                 let subty = self.infer_pat(*pat, expectation, default_bm);\n                 Ty::apply_one(TypeCtor::Ref(*mutability), subty)\n             }\n-            Pat::TupleStruct { path: p, args: subpats, .. } => {\n-                self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm, pat)\n-            }\n+            Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n+                p.as_ref(),\n+                subpats,\n+                expected,\n+                default_bm,\n+                pat,\n+                *ellipsis,\n+            ),\n             Pat::Record { path: p, args: fields, ellipsis: _ } => {\n                 self.infer_record_pat(p.as_ref(), fields, expected, default_bm, pat)\n             }"}, {"sha": "5a5f48fd05b28a8234c5f335f368ef80f9847204", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/67d45851bf2257f6f255fb6863163a6836816cff/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d45851bf2257f6f255fb6863163a6836816cff/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=67d45851bf2257f6f255fb6863163a6836816cff", "patch": "@@ -679,3 +679,98 @@ fn box_pattern() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn tuple_ellipsis_pattern() {\n+    check_infer(\n+        r#\"\n+fn foo(tuple: (u8, i16, f32)) {\n+    match tuple {\n+        (.., b, c) => {},\n+        (a, .., c) => {},\n+        (a, b, ..) => {},\n+        (a, b) => {/*too short*/}\n+        (a, b, c, d) => {/*too long*/}\n+        _ => {}\n+    }\n+}\"#,\n+        expect![[r#\"\n+            7..12 'tuple': (u8, i16, f32)\n+            30..224 '{     ...   } }': ()\n+            36..222 'match ...     }': ()\n+            42..47 'tuple': (u8, i16, f32)\n+            58..68 '(.., b, c)': (u8, i16, f32)\n+            63..64 'b': i16\n+            66..67 'c': f32\n+            72..74 '{}': ()\n+            84..94 '(a, .., c)': (u8, i16, f32)\n+            85..86 'a': u8\n+            92..93 'c': f32\n+            98..100 '{}': ()\n+            110..120 '(a, b, ..)': (u8, i16, f32)\n+            111..112 'a': u8\n+            114..115 'b': i16\n+            124..126 '{}': ()\n+            136..142 '(a, b)': (u8, i16, f32)\n+            137..138 'a': u8\n+            140..141 'b': i16\n+            146..161 '{/*too short*/}': ()\n+            170..182 '(a, b, c, d)': (u8, i16, f32, {unknown})\n+            171..172 'a': u8\n+            174..175 'b': i16\n+            177..178 'c': f32\n+            180..181 'd': {unknown}\n+            186..200 '{/*too long*/}': ()\n+            209..210 '_': (u8, i16, f32)\n+            214..216 '{}': ()\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn tuple_struct_ellipsis_pattern() {\n+    check_infer(\n+        r#\"\n+struct Tuple(u8, i16, f32);\n+fn foo(tuple: Tuple) {\n+    match tuple {\n+        Tuple(.., b, c) => {},\n+        Tuple(a, .., c) => {},\n+        Tuple(a, b, ..) => {},\n+        Tuple(a, b) => {/*too short*/}\n+        Tuple(a, b, c, d) => {/*too long*/}\n+        _ => {}\n+    }\n+}\"#,\n+        expect![[r#\"\n+            35..40 'tuple': Tuple\n+            49..268 '{     ...   } }': ()\n+            55..266 'match ...     }': ()\n+            61..66 'tuple': Tuple\n+            77..92 'Tuple(.., b, c)': Tuple\n+            87..88 'b': i16\n+            90..91 'c': f32\n+            96..98 '{}': ()\n+            108..123 'Tuple(a, .., c)': Tuple\n+            114..115 'a': u8\n+            121..122 'c': f32\n+            127..129 '{}': ()\n+            139..154 'Tuple(a, b, ..)': Tuple\n+            145..146 'a': u8\n+            148..149 'b': i16\n+            158..160 '{}': ()\n+            170..181 'Tuple(a, b)': Tuple\n+            176..177 'a': u8\n+            179..180 'b': i16\n+            185..200 '{/*too short*/}': ()\n+            209..226 'Tuple(... c, d)': Tuple\n+            215..216 'a': u8\n+            218..219 'b': i16\n+            221..222 'c': f32\n+            224..225 'd': {unknown}\n+            230..244 '{/*too long*/}': ()\n+            253..254 '_': Tuple\n+            258..260 '{}': ()\n+        \"#]],\n+    );\n+}"}]}