{"sha": "bcf875f46ae5142c42ddac8094e1b6652182d4be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjg3NWY0NmFlNTE0MmM0MmRkYWM4MDk0ZTFiNjY1MjE4MmQ0YmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T09:52:00Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T10:38:58Z"}, "message": "Clean up import_map.rs", "tree": {"sha": "39bd0c4ffe2386efbbb75a4e3c7e23d732144de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39bd0c4ffe2386efbbb75a4e3c7e23d732144de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf875f46ae5142c42ddac8094e1b6652182d4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf875f46ae5142c42ddac8094e1b6652182d4be", "html_url": "https://github.com/rust-lang/rust/commit/bcf875f46ae5142c42ddac8094e1b6652182d4be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf875f46ae5142c42ddac8094e1b6652182d4be/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781b514e5886cbaff88483cdeddc504effef299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/781b514e5886cbaff88483cdeddc504effef299c", "html_url": "https://github.com/rust-lang/rust/commit/781b514e5886cbaff88483cdeddc504effef299c"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "f2e4ca2db545815461e0c259bcd87b3d23f64b04", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bcf875f46ae5142c42ddac8094e1b6652182d4be/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf875f46ae5142c42ddac8094e1b6652182d4be/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=bcf875f46ae5142c42ddac8094e1b6652182d4be", "patch": "@@ -1,10 +1,8 @@\n //! A map of all publicly exported items in a crate.\n \n-use std::cmp::Ordering;\n-use std::{collections::hash_map::Entry, fmt, sync::Arc};\n+use std::{cmp::Ordering, collections::hash_map::Entry, fmt, sync::Arc};\n \n use fst::{self, Streamer};\n-use itertools::Itertools;\n use ra_db::CrateId;\n use rustc_hash::FxHashMap;\n \n@@ -118,7 +116,7 @@ impl ImportMap {\n             let start = last_batch_start;\n             last_batch_start = idx + 1;\n \n-            let key: String = fst_path(&importables[start].1).collect();\n+            let key = fst_path(&importables[start].1);\n \n             builder.insert(key, start as u64).unwrap();\n         }\n@@ -137,7 +135,8 @@ impl ImportMap {\n \n impl PartialEq for ImportMap {\n     fn eq(&self, other: &Self) -> bool {\n-        self.importables == other.importables\n+        // `fst` and `importables` are built from `map`, so we don't need to compare them.\n+        self.map == other.map\n     }\n }\n \n@@ -163,18 +162,16 @@ impl fmt::Debug for ImportMap {\n     }\n }\n \n-fn fst_path(path: &ModPath) -> impl Iterator<Item = char> + '_ {\n-    path.segments\n-        .iter()\n-        .map(|name| name.as_text().unwrap())\n-        .intersperse(\"::\")\n-        .flat_map(|s| s.chars().map(|c| c.to_ascii_lowercase()))\n+fn fst_path(path: &ModPath) -> String {\n+    let mut s = path.to_string();\n+    s.make_ascii_lowercase();\n+    s\n }\n \n fn cmp((_, lhs): &(&ItemInNs, &ModPath), (_, rhs): &(&ItemInNs, &ModPath)) -> Ordering {\n-    let lhs_chars = fst_path(lhs);\n-    let rhs_chars = fst_path(rhs);\n-    lhs_chars.cmp(rhs_chars)\n+    let lhs_str = fst_path(lhs);\n+    let rhs_str = fst_path(rhs);\n+    lhs_str.cmp(&rhs_str)\n }\n \n #[derive(Debug)]\n@@ -184,8 +181,8 @@ pub struct Query {\n }\n \n impl Query {\n-    pub fn new(query: impl AsRef<str>) -> Self {\n-        Self { query: query.as_ref().to_lowercase(), anchor_end: false }\n+    pub fn new(query: &str) -> Self {\n+        Self { query: query.to_lowercase(), anchor_end: false }\n     }\n \n     /// Only returns items whose paths end with the (case-insensitive) query string as their last\n@@ -197,14 +194,13 @@ impl Query {\n \n /// Searches dependencies of `krate` for an importable path matching `query`.\n ///\n-/// This returns all items that could be imported from within `krate`, excluding paths inside\n-/// `krate` itself.\n+/// This returns a list of items that could be imported from dependencies of `krate`.\n pub fn search_dependencies<'a>(\n     db: &'a dyn DefDatabase,\n     krate: CrateId,\n     query: Query,\n ) -> Vec<ItemInNs> {\n-    let _p = ra_prof::profile(\"import_map::global_search\").detail(|| format!(\"{:?}\", query));\n+    let _p = ra_prof::profile(\"search_dependencies\").detail(|| format!(\"{:?}\", query));\n \n     let graph = db.crate_graph();\n     let import_maps: Vec<_> =\n@@ -239,7 +235,7 @@ pub fn search_dependencies<'a>(\n             // `importables` whose paths match `path`.\n             res.extend(importables.iter().copied().take_while(|item| {\n                 let item_path = &import_map.map[item];\n-                fst_path(item_path).eq(fst_path(path))\n+                fst_path(item_path) == fst_path(path)\n             }));\n         }\n     }\n@@ -252,14 +248,15 @@ mod tests {\n     use super::*;\n     use crate::test_db::TestDB;\n     use insta::assert_snapshot;\n+    use itertools::Itertools;\n     use ra_db::fixture::WithFixture;\n     use ra_db::{SourceDatabase, Upcast};\n \n     fn import_map(ra_fixture: &str) -> String {\n         let db = TestDB::with_files(ra_fixture);\n         let crate_graph = db.crate_graph();\n \n-        let import_maps: Vec<_> = crate_graph\n+        let s = crate_graph\n             .iter()\n             .filter_map(|krate| {\n                 let cdata = &crate_graph[krate];\n@@ -269,9 +266,8 @@ mod tests {\n \n                 Some(format!(\"{}:\\n{:?}\", name, map))\n             })\n-            .collect();\n-\n-        import_maps.join(\"\\n\")\n+            .join(\"\\n\");\n+        s\n     }\n \n     fn search_dependencies_of(ra_fixture: &str, krate_name: &str, query: Query) -> String {\n@@ -304,7 +300,6 @@ mod tests {\n                     )\n                 })\n             })\n-            .collect::<Vec<_>>()\n             .join(\"\\n\")\n     }\n "}, {"sha": "660bdfe3365b2f20182ede8f1c4abd356e049669", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcf875f46ae5142c42ddac8094e1b6652182d4be/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf875f46ae5142c42ddac8094e1b6652182d4be/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=bcf875f46ae5142c42ddac8094e1b6652182d4be", "patch": "@@ -67,13 +67,6 @@ impl Name {\n             _ => None,\n         }\n     }\n-\n-    pub fn as_text(&self) -> Option<&str> {\n-        match &self.0 {\n-            Repr::Text(s) => Some(s.as_str()),\n-            _ => None,\n-        }\n-    }\n }\n \n pub trait AsName {"}]}