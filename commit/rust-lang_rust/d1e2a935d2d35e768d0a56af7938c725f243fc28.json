{"sha": "d1e2a935d2d35e768d0a56af7938c725f243fc28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTJhOTM1ZDJkMzVlNzY4ZDBhNTZhZjc5MzhjNzI1ZjI0M2ZjMjg=", "commit": {"author": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-07-22T03:55:19Z"}, "committer": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-07-22T03:55:19Z"}, "message": "Readding lifetime parameters and removing allocation", "tree": {"sha": "2300f3f832d64c90ac09649d5452a079366662a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2300f3f832d64c90ac09649d5452a079366662a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e2a935d2d35e768d0a56af7938c725f243fc28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e2a935d2d35e768d0a56af7938c725f243fc28", "html_url": "https://github.com/rust-lang/rust/commit/d1e2a935d2d35e768d0a56af7938c725f243fc28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e2a935d2d35e768d0a56af7938c725f243fc28/comments", "author": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "html_url": "https://github.com/rust-lang/rust/commit/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "b9f5c6fcab9092a3d4565c5980a82f65888ff664", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=d1e2a935d2d35e768d0a56af7938c725f243fc28", "patch": "@@ -1016,12 +1016,12 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-pub struct Drain<T> {\n-    iter: vec::Drain<T>,\n+pub struct Drain<'a, T: 'a> {\n+    iter: vec::Drain<'a, T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Iterator for Drain<T> {\n+impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n \n     #[inline]\n@@ -1036,15 +1036,15 @@ impl<T> Iterator for Drain<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> DoubleEndedIterator for Drain<T> {\n+impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ExactSizeIterator for Drain<T> {}\n+impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {"}, {"sha": "f3d31ceea1347441bd4123f26feee5e1b41a87ea", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d1e2a935d2d35e768d0a56af7938c725f243fc28", "patch": "@@ -73,8 +73,8 @@ use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ops;\n use core::ptr;\n+use core::ptr::Shared;\n use core::slice;\n-use super::vec_deque::VecDeque;\n \n use super::SpecExtend;\n use super::range::RangeArgument;\n@@ -844,20 +844,20 @@ impl<T> Vec<T> {\n         let end = *range.end().unwrap_or(&len);\n         assert!(start <= end);\n         assert!(end <= len);\n-        let mut drain_vec = VecDeque::new();\n \n         unsafe {\n-            for i in start..end {\n-                    let p = self.as_ptr().offset(i as isize);\n-                    drain_vec.push_back(ptr::read(p));\n+            // set self.vec length's to start, to be safe in case Drain is leaked\n+            self.set_len(start);\n+            // Use the borrow in the IterMut to indicate borrowing behavior of the\n+            // whole Drain iterator (like &mut T).\n+            let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().offset(start as isize),\n+                                                        end - start);\n+            Drain {\n+                tail_start: end,\n+                tail_len: len - end,\n+                iter: range_slice.iter(),\n+                vec: Shared::new(self as *mut _),\n             }\n-            let src = self.as_ptr().offset(end as isize);\n-            let dst = self.as_mut_ptr().offset(start as isize);\n-            ptr::copy(src, dst, len - end);\n-            self.set_len(len - (end - start));\n-        }\n-        Drain {\n-            deque: drain_vec\n         }\n     }\n \n@@ -1756,43 +1756,64 @@ impl<T> Drop for IntoIter<T> {\n /// [`drain`]: struct.Vec.html#method.drain\n /// [`Vec`]: struct.Vec.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-pub struct Drain<T> {\n+pub struct Drain<'a, T: 'a> {\n+    /// Index of tail to preserve\n+    tail_start: usize,\n+    /// Length of tail\n+    tail_len: usize,\n     /// Current remaining range to remove\n-    deque: VecDeque<T>\n+    iter: slice::Iter<'a, T>,\n+    vec: Shared<Vec<T>>,\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<T: Sync> Sync for Drain<T> {}\n+unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<T: Send> Send for Drain<T> {}\n+unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Iterator for Drain<T> {\n+impl<'a, T> Iterator for Drain<'a, T> {\n     type Item = T;\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        self.deque.pop_front()\n+        self.iter.next().map(|elt| unsafe { ptr::read(elt as *const _) })\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        (self.deque.len(), Some(self.deque.len()))\n+        self.iter.size_hint()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> DoubleEndedIterator for Drain<T> {\n+impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n-        self.deque.pop_back()\n+        self.iter.next_back().map(|elt| unsafe { ptr::read(elt as *const _) })\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Drop for Drain<T> {\n+impl<'a, T> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n+        // exhaust self first\n+        while let Some(_) = self.next() {}\n+\n+        if self.tail_len > 0 {\n+            unsafe {\n+                let source_vec = &mut **self.vec;\n+                // memmove back untouched tail, update to new length\n+                let start = source_vec.len();\n+                let tail = self.tail_start;\n+                let src = source_vec.as_ptr().offset(tail as isize);\n+                let dst = source_vec.as_mut_ptr().offset(start as isize);\n+                ptr::copy(src, dst, self.tail_len);\n+                source_vec.set_len(start + self.tail_len);\n+            }\n+        }\n     }\n }\n \n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ExactSizeIterator for Drain<T> {}\n+impl<'a, T> ExactSizeIterator for Drain<'a, T> {}"}, {"sha": "e2a57bd8d3862df021cf5325a4c68a5b926901d8", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=d1e2a935d2d35e768d0a56af7938c725f243fc28", "patch": "@@ -296,5 +296,5 @@ fn test_extend_specialization() {\n \n #[allow(dead_code)]\n fn assert_covariance() {\n-    fn drain<'new>(d: Drain<&'static str>) -> Drain<&'new str> { d }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n }"}, {"sha": "7a6bd958a5f8c7cb915c5756e055d1d25a65be78", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e2a935d2d35e768d0a56af7938c725f243fc28/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=d1e2a935d2d35e768d0a56af7938c725f243fc28", "patch": "@@ -513,7 +513,7 @@ fn test_cow_from() {\n \n #[allow(dead_code)]\n fn assert_covariance() {\n-    fn drain<'new>(d: Drain<&'static str>) -> Drain<&'new str> { d }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n }\n \n #[bench]"}]}