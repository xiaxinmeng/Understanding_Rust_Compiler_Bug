{"sha": "d09db1660b0c7baca06029369bc48b8d9c604f0a", "node_id": "C_kwDOAAsO6NoAKGQwOWRiMTY2MGIwYzdiYWNhMDYwMjkzNjliYzQ4YjhkOWM2MDRmMGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T21:33:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T00:13:44Z"}, "message": "fix and slightly improve data race reports", "tree": {"sha": "bbe3d74901b264fd6eabd7531073e637d6d8ede7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe3d74901b264fd6eabd7531073e637d6d8ede7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09db1660b0c7baca06029369bc48b8d9c604f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09db1660b0c7baca06029369bc48b8d9c604f0a", "html_url": "https://github.com/rust-lang/rust/commit/d09db1660b0c7baca06029369bc48b8d9c604f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09db1660b0c7baca06029369bc48b8d9c604f0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfdedae840a3703fc8fe4e7c958645f416087625", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdedae840a3703fc8fe4e7c958645f416087625", "html_url": "https://github.com/rust-lang/rust/commit/dfdedae840a3703fc8fe4e7c958645f416087625"}], "stats": {"total": 197, "additions": 101, "deletions": 96}, "files": [{"sha": "4b402b51fc59da040346c4d35d4a748cb84f71a6", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -882,7 +882,7 @@ impl VClockAlloc {\n     ) -> InterpResult<'tcx> {\n         let (current_index, current_clocks) = global.current_thread_state(thread_mgr);\n         let write_clock;\n-        let (other_action, other_thread, other_clock) = if range.write\n+        let (other_action, other_thread, _other_clock) = if range.write\n             > current_clocks.clock[range.write_index]\n         {\n             // Convert the write action into the vector clock it\n@@ -920,14 +920,12 @@ impl VClockAlloc {\n \n         // Throw the data-race detection.\n         throw_ub_format!(\n-            \"Data race detected between {} on {} and {} on {} at {:?} (current vector clock = {:?}, conflicting timestamp = {:?})\",\n+            \"Data race detected between {} on {} and {} on {} at {:?}\",\n             action,\n             current_thread_info,\n             other_action,\n             other_thread_info,\n             ptr_dbg,\n-            current_clocks.clock,\n-            other_clock\n         )\n     }\n \n@@ -1208,8 +1206,7 @@ impl GlobalState {\n         };\n \n         // Setup the main-thread since it is not explicitly created:\n-        // uses vector index and thread-id 0, also the rust runtime gives\n-        // the main-thread a name of \"main\".\n+        // uses vector index and thread-id 0.\n         let index = global_state.vector_clocks.get_mut().push(ThreadClockSet::default());\n         global_state.vector_info.get_mut().push(ThreadId::new(0));\n         global_state\n@@ -1448,12 +1445,8 @@ impl GlobalState {\n         vector: VectorIdx,\n     ) -> String {\n         let thread = self.vector_info.borrow()[vector];\n-        let thread_name = thread_mgr.get_thread_name();\n-        format!(\n-            \"Thread(id = {:?}, name = {:?})\",\n-            thread.to_u32(),\n-            String::from_utf8_lossy(thread_name)\n-        )\n+        let thread_name = thread_mgr.get_thread_name(thread);\n+        format!(\"thread `{}`\", String::from_utf8_lossy(thread_name))\n     }\n \n     /// Acquire a lock, express that the previous call of"}, {"sha": "f7cc9c4732ace716df4d117017c463cd3c82fdae", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -9,7 +9,7 @@\n //! Note that this implementation does not take into account of C++20's memory model revision to SC accesses\n //! and fences introduced by P0668 (<https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0668r5.html>).\n //! This implementation is not fully correct under the revised C++20 model and may generate behaviours C++20\n-//! disallows.\n+//! disallows (<https://github.com/rust-lang/miri/issues/2301>).\n //!\n //! Rust follows the C++20 memory model (except for the Consume ordering and some operations not performable through C++'s\n //! std::atomic<T> API). It is therefore possible for this implementation to generate behaviours never observable when the"}, {"sha": "420eeb810fd874a75fb77a45a6bbea1211c10915", "filename": "src/thread.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -170,6 +170,14 @@ impl<'mir, 'tcx> Default for Thread<'mir, 'tcx> {\n     }\n }\n \n+impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n+    fn new(name: &str) -> Self {\n+        let mut thread = Thread::default();\n+        thread.thread_name = Some(Vec::from(name.as_bytes()));\n+        thread\n+    }\n+}\n+\n /// A specific moment in time.\n #[derive(Debug)]\n pub enum Time {\n@@ -230,7 +238,7 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n     fn default() -> Self {\n         let mut threads = IndexVec::new();\n         // Create the main thread and add it to the list of threads.\n-        let mut main_thread = Thread::default();\n+        let mut main_thread = Thread::new(\"main\");\n         // The main thread can *not* be joined on.\n         main_thread.join_status = ThreadJoinStatus::Detached;\n         threads.push(main_thread);\n@@ -379,15 +387,20 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     }\n \n     /// Set the name of the active thread.\n-    fn set_thread_name(&mut self, new_thread_name: Vec<u8>) {\n+    fn set_active_thread_name(&mut self, new_thread_name: Vec<u8>) {\n         self.active_thread_mut().thread_name = Some(new_thread_name);\n     }\n \n     /// Get the name of the active thread.\n-    pub fn get_thread_name(&self) -> &[u8] {\n+    pub fn get_active_thread_name(&self) -> &[u8] {\n         self.active_thread_ref().thread_name()\n     }\n \n+    /// Get the name of the given thread.\n+    pub fn get_thread_name(&self, thread: ThreadId) -> &[u8] {\n+        self.threads[thread].thread_name()\n+    }\n+\n     /// Put the thread into the blocked state.\n     fn block_thread(&mut self, thread: ThreadId) {\n         let state = &mut self.threads[thread].state;\n@@ -475,7 +488,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         for (i, thread) in self.threads.iter_enumerated_mut() {\n             if thread.state == ThreadState::BlockedOnJoin(self.active_thread) {\n                 // The thread has terminated, mark happens-before edge to joining thread\n-                if let Some(_) = data_race {\n+                if data_race.is_some() {\n                     joined_threads.push(i);\n                 }\n                 trace!(\"unblocking {:?} because {:?} terminated\", i, self.active_thread);\n@@ -683,7 +696,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     #[inline]\n     fn set_active_thread_name(&mut self, new_thread_name: Vec<u8>) {\n         let this = self.eval_context_mut();\n-        this.machine.threads.set_thread_name(new_thread_name);\n+        this.machine.threads.set_active_thread_name(new_thread_name);\n     }\n \n     #[inline]\n@@ -692,7 +705,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'mir: 'c,\n     {\n         let this = self.eval_context_ref();\n-        this.machine.threads.get_thread_name()\n+        this.machine.threads.get_active_thread_name()\n     }\n \n     #[inline]"}, {"sha": "754fccd63b13d1638260e5d0dd7c8669c113dcd4", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -94,8 +94,6 @@ regexes! {\n     \"([0-9]+: ) +0x[0-9a-f]+ - (.*)\" => \"$1$2\",\n     // erase long hexadecimals\n     r\"0x[0-9a-fA-F]+[0-9a-fA-F]{2,2}\" => \"$$HEX\",\n-    // erase clocks\n-    r\"VClock\\(\\[[^\\]]+\\]\\)\"      => \"VClock\",\n     // erase specific alignments\n     \"alignment [0-9]+\"               => \"alignment ALIGN\",\n     // erase thread caller ids"}, {"sha": "1eac8ce0f26c6e58feab38b05208f1c6950b630b", "filename": "tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n             let pointer = &*ptr.0;\n \n             // Note: could also error due to reading uninitialized memory, but the data-race detector triggers first.\n-            *pointer.load(Ordering::Relaxed) //~ ERROR Data race detected between Read on Thread(id = 2) and Allocate on Thread(id = 1)\n+            *pointer.load(Ordering::Relaxed) //~ ERROR Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "2049e4f4a193ade7a4dc8d121ae40935d397095c", "filename": "tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n   --> $DIR/alloc_read_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "e618b72a822700750910631a101b15558cf5f197", "filename": "tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1)\n+            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "82e3d92479d94aa2b4d06fbedacf77cb1a443a02", "filename": "tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n   --> $DIR/alloc_write_race.rs:LL:CC\n    |\n LL |             *pointer.load(Ordering::Relaxed) = 2;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "3b948eea9805102cc3d29963ac1fee2a740a3ed3", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).load(Ordering::SeqCst)\n-            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1)\n+            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "4b5355e866e25c03c3c10a5c99c67297619c584b", "filename": "tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n    |\n LL |             intrinsics::atomic_load_seqcst(c.0 as *mut usize)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "44b4eebee8051efe9573b8af359411233775cadd", "filename": "tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1)\n+            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "3eb9f17bae760043648a76c3ac99e5e6a17fa22a", "filename": "tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "44dc1a9084168fc74c2dee884ecbb693c77e0b92", "filename": "tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() //~ ERROR Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1)\n+            *atomic_ref.get_mut() //~ ERROR Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "810fa54d41cee261e5a110e6b75e810dde52c91f", "filename": "tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut()\n-   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "b4b21b64fc1fb00d81b86295846ca30a3fa6754f", "filename": "tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(32, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 32); //~ ERROR Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1)\n+            atomic_store(c.0 as *mut usize, 32); //~ ERROR Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "77f69e2bc3400fded011b23c061db9540ae887cc", "filename": "tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n    |\n LL |             atomic_store(c.0 as *mut usize, 32);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "b1a4cfb98bd1359b8c2471fc0967c6173d0c3e2b", "filename": "tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(64, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 64); //~ ERROR Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1)\n+            atomic_store(c.0 as *mut usize, 64); //~ ERROR Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "8e70de5e4aff6c1e9136440962693df67496ad9e", "filename": "tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n    |\n LL |             atomic_store(c.0 as *mut usize, 64);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "dbdce8f6237ce98f5a231b598696be40de21c8a9", "filename": "tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1)\n+            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "310c2ed7df8a1f7cbd2f39823715800296953a02", "filename": "tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n   --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n    |\n LL |             *atomic_ref.get_mut() = 32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "65325b60f2f39471d203d09133aa414c88638cd4", "filename": "tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -34,7 +34,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1)\n+            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         })\n     };\n "}, {"sha": "efdc913ce27a92143e9157276fd3785e04376ba1", "filename": "tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/dangling_thread_async_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "09e7032c933085d9d0ed48d5075eb703422b5ef1", "filename": "tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -33,6 +33,6 @@ fn main() {\n     spawn(|| ()).join().unwrap();\n \n     unsafe {\n-        *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1)\n+        *c.0 = 64; //~ ERROR Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n     }\n }"}, {"sha": "899cfdd095e385eaae79741f184d4d6c5aa3331d", "filename": "tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/dangling_thread_race.rs:LL:CC\n    |\n LL |         *c.0 = 64;\n-   |         ^^^^^^^^^ Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |         ^^^^^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "ff2ac8ca522a5ed175fe7d16e2fea98f36343008", "filename": "tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1)\n+                //~^ ERROR Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "9e35fb7b6bd82397f570b0e05d336aa7af7be483", "filename": "tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n   --> $DIR/dealloc_read_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,7 +7,7 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "4bb6444f6a626610c743b152d3e5bf03b461b16b", "filename": "tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            // Also an error of the form: Data race detected between Read on Thread(id = 2) and Deallocate on Thread(id = 1)\n+            // Also an error of the form: Data race detected between Read on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 //~ ERROR dereferenced after this allocation got freed\n         });"}, {"sha": "e079581a0d89bca1f05f721ba314b4a8ff7796a3", "filename": "tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n+            } //~ ERROR Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "b1e7d3649ecb32a4aa81e7479667bd3e71357161", "filename": "tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n   --> $DIR/dealloc_read_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "9cd0ebc64252178de411727de16de17295711833", "filename": "tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1)\n+                //~^ ERROR Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "a9ac03eb31db9820eb6c83ca3d9389352bf4a5ba", "filename": "tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,4 +1,4 @@\n-error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/dealloc_write_race1.rs:LL:CC\n    |\n LL | /             __rust_dealloc(\n@@ -7,7 +7,7 @@ LL | |                 ptr.0 as *mut _,\n LL | |                 std::mem::size_of::<usize>(),\n LL | |                 std::mem::align_of::<usize>(),\n LL | |             );\n-   | |_____________^ Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   | |_____________^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "9b1b8f0614754755e4ef67980a97c6bd428bdd40", "filename": "tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            // Also an error of the form: Data race detected between Write on Thread(id = 2) and Deallocate on Thread(id = 1)\n+            // Also an error of the form: Data race detected between Write on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 = 2; //~ ERROR dereferenced after this allocation got freed\n         });"}, {"sha": "2f12570892732e4f04b9e9349658510aee21eab3", "filename": "tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2)\n+            } //~ ERROR Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "622ac25189be51f180e10d3576e5e4b4025d6b64", "filename": "tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/dealloc_write_race_stack.rs:LL:CC\n    |\n LL |             }\n-   |             ^ Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^ Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "6f0735fac897c6c666dbdb82ccf48e7dc34a7b36", "filename": "tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5)\n+            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "4426952e44b55ca2282f14081e3c4bc2e88ee835", "filename": "tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/enable_after_join_to_main.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "5a8c2e585f49a66fbaddf32ef5a3634647d3278c", "filename": "tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     // The fence is useless, since it did not happen-after the `store` in the other thread.\n     // Hence this is a data race.\n     // Also see https://github.com/rust-lang/miri/issues/2192.\n-    unsafe { V = 2 } //~ERROR Data race detected\n+    unsafe { V = 2 } //~ERROR Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n }"}, {"sha": "b9cffeda27befff56ae4aac714b7529f70b3f306", "filename": "tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/fence_after_load.rs:LL:CC\n    |\n LL |     unsafe { V = 2 }\n-   |              ^^^^^ Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |              ^^^^^ Data race detected between Write on thread `main` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "eeb49bb42ab7ca4480122b8753863883967e1de4", "filename": "tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1)\n+            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "a65e7006cf0a80234d669eb762e1048c1b2daf1b", "filename": "tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n   --> $DIR/read_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "124f12d1ecd28fe9ab4b74c41e13bfbc9c338e8a", "filename": "tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -43,7 +43,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)\n+            stack_var //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "390b3ab38ede0d508dc216b0691df6d5e323684d", "filename": "tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/read_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var\n-   |             ^^^^^^^^^ Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "faa23a150e3fabb3fdf3ab3345b25c11e995082a", "filename": "tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n+                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "85de60c02655094d5544d58e04dee70030c4178d", "filename": "tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/relax_acquire_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "ab6926102a2a170ed684a9acd2b2a700274c364e", "filename": "tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             sleep(Duration::from_millis(500));\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n+                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "db333d756f855da20514c9b826fc7cd2a9f0bd5f", "filename": "tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/release_seq_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "d3d18f0e2540dacfca93c114774faaebb25ba079", "filename": "tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1)\n+                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "f4c38d5315006a386bc59c55ef1aaf0b75b76dd1", "filename": "tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/release_seq_race_same_thread.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "800b1043c00b5e0051ce0d204d99e54b81e8f670", "filename": "tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -39,7 +39,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1)\n+                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "346fcc31b9c06539989317a5fdf34b67a5a7c4df", "filename": "tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/rmw_race.rs:LL:CC\n    |\n LL |                 *c.0\n-   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |                 ^^^^ Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "989ae31a6d281f199faa9f4ffbbc1f536d17d05a", "filename": "tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1)\n+            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "e6254281aef36ccd041094780fb42bb6b6220739", "filename": "tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/write_write_race.rs:LL:CC\n    |\n LL |             *c.0 = 64;\n-   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "3c1eabbf251b2cc6f929bf3a0d203281f50c61f5", "filename": "tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var = 1usize; //~ ERROR Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2)\n+            stack_var = 1usize; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n \n             // read to silence errors\n             stack_var"}, {"sha": "1f7318e6f95152eba9e0b53e50db0f8223f51305", "filename": "tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+error: Undefined Behavior: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n   --> $DIR/write_write_race_stack.rs:LL:CC\n    |\n LL |             stack_var = 1usize;\n-   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>` at ALLOC\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "bf7a59da973cdfc2e5ead089a8dd164968e9a67a", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09db1660b0c7baca06029369bc48b8d9c604f0a/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=d09db1660b0c7baca06029369bc48b8d9c604f0a", "patch": "@@ -218,7 +218,8 @@ fn test_prctl_thread_name() {\n             libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n             0,\n         );\n-        assert_eq!(b\"<unnamed>\\0\", &buf);\n+        // Rust runtime might set thread name, so we allow two options here.\n+        assert!(&buf[..10] == b\"<unnamed>\\0\" || &buf[..5] == b\"main\\0\");\n         let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n         assert_eq!(\n             libc::prctl("}]}