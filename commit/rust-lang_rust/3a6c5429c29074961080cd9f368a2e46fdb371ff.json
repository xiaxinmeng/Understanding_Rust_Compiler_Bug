{"sha": "3a6c5429c29074961080cd9f368a2e46fdb371ff", "node_id": "C_kwDOAAsO6NoAKDNhNmM1NDI5YzI5MDc0OTYxMDgwY2Q5ZjM2OGEyZTQ2ZmRiMzcxZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T05:11:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T05:11:51Z"}, "message": "Rollup merge of #108319 - compiler-errors:dont-project-to-specializable-rpitits, r=lcnr\n\nDon't project specializable RPITIT projection\n\nThis effective rejects specialization + RPITIT/AFIT (usages of `impl Trait` in traits) because the implementation is significantly complicated over making regular \"default\" trait method bodies work.\n\nI have another PR that experimentally fixes all this, but the code may not be worth investing in.", "tree": {"sha": "dccec39a468457dc70bbb569645d54782fa1737c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccec39a468457dc70bbb569645d54782fa1737c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6c5429c29074961080cd9f368a2e46fdb371ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/DuXCRBK7hj4Ov3rIwAA/qoIAG8WH4dJXPmlgei24EpZNQhx\niPxR1u42pmeCbne6RepZ0rEUPcJCcHLN/djLvTTAgoL8gfiSwmBmXCL1CJNOjLsj\nVPdCYF9tSm46JDIvJt+Bz0Xlzxutff7KqSuZ3KUW299eafzp8EbIpKVX7nFInxiw\nLWb3erOa12vYgrPIkIhvlMzbli8t/HoQIM5zhxTU9fIhURkcdnKzl2MhFq7ZZo8h\nsUTxpWrLXsPglgQTLUYXvIiw5Ma3gRgtyLfvojC7qyfXjOUafGElXZoC7yNKapLO\nojfc9ci0jFW2rFSZthMko0jnh4SupfRFXkJhR9l+sWHs7cGAbRYs42EL4YxgMW4=\n=XD4h\n-----END PGP SIGNATURE-----\n", "payload": "tree dccec39a468457dc70bbb569645d54782fa1737c\nparent 58136ffa92c81ec9e6ac1f91773254914da2ca01\nparent 9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677474711 +0100\ncommitter GitHub <noreply@github.com> 1677474711 +0100\n\nRollup merge of #108319 - compiler-errors:dont-project-to-specializable-rpitits, r=lcnr\n\nDon't project specializable RPITIT projection\n\nThis effective rejects specialization + RPITIT/AFIT (usages of `impl Trait` in traits) because the implementation is significantly complicated over making regular \"default\" trait method bodies work.\n\nI have another PR that experimentally fixes all this, but the code may not be worth investing in.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6c5429c29074961080cd9f368a2e46fdb371ff", "html_url": "https://github.com/rust-lang/rust/commit/3a6c5429c29074961080cd9f368a2e46fdb371ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6c5429c29074961080cd9f368a2e46fdb371ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58136ffa92c81ec9e6ac1f91773254914da2ca01", "url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "html_url": "https://github.com/rust-lang/rust/commit/58136ffa92c81ec9e6ac1f91773254914da2ca01"}, {"sha": "9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "html_url": "https://github.com/rust-lang/rust/commit/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9"}], "stats": {"total": 131, "additions": 126, "deletions": 5}, "files": [{"sha": "b0dc6b1dcacc321798a78c94416fe5d90157881b", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a6c5429c29074961080cd9f368a2e46fdb371ff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6c5429c29074961080cd9f368a2e46fdb371ff/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=3a6c5429c29074961080cd9f368a2e46fdb371ff", "patch": "@@ -648,6 +648,13 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n             tcx.fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n         .fold_with(&mut collector);\n+\n+    debug_assert_ne!(\n+        collector.types.len(),\n+        0,\n+        \"expect >1 RPITITs in call to `collect_return_position_impl_trait_in_trait_tys`\"\n+    );\n+\n     let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n     trait_sig.error_reported()?;\n     let trait_return_ty = trait_sig.output();"}, {"sha": "d542240be9b24f9faaefcc28e261a0cdf469a57e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a6c5429c29074961080cd9f368a2e46fdb371ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6c5429c29074961080cd9f368a2e46fdb371ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=3a6c5429c29074961080cd9f368a2e46fdb371ff", "patch": "@@ -1307,21 +1307,38 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n-                    Ok(())\n+                    let Ok(leaf_def) = specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) else {\n+                        return Err(());\n+                    };\n+                    // Only reveal a specializable default if we're past type-checking\n+                    // and the obligation is monomorphic, otherwise passes such as\n+                    // transmute checking and polymorphic MIR optimizations could\n+                    // get a result which isn't correct for all monomorphizations.\n+                    if leaf_def.is_final()\n+                        || (obligation.param_env.reveal() == Reveal::All\n+                            && !selcx\n+                                .infcx\n+                                .resolve_vars_if_possible(obligation.predicate.trait_ref(tcx))\n+                                .still_further_specializable())\n+                    {\n+                        candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                        Ok(())\n+                    } else {\n+                        Err(())\n+                    }\n                 }\n                 Ok(None) => {\n                     candidate_set.mark_ambiguous();\n-                    return Err(());\n+                    Err(())\n                 }\n                 Ok(Some(_)) => {\n                     // Don't know enough about the impl to provide a useful signature\n-                    return Err(());\n+                    Err(())\n                 }\n                 Err(e) => {\n                     debug!(error = ?e, \"selection error\");\n                     candidate_set.mark_error(e);\n-                    return Err(());\n+                    Err(())\n                 }\n             }\n         });"}, {"sha": "afd3db5e0525ef416737786bc8bb896bd8eed7f8", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3a6c5429c29074961080cd9f368a2e46fdb371ff/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6c5429c29074961080cd9f368a2e46fdb371ff/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs?ref=3a6c5429c29074961080cd9f368a2e46fdb371ff", "patch": "@@ -0,0 +1,71 @@\n+// edition: 2021\n+// known-bug: #108309\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(min_specialization)]\n+\n+struct MyStruct;\n+\n+trait MyTrait<T> {\n+    async fn foo(_: T) -> &'static str;\n+}\n+\n+impl<T> MyTrait<T> for MyStruct {\n+    default async fn foo(_: T) -> &'static str {\n+        \"default\"\n+    }\n+}\n+\n+impl MyTrait<i32> for MyStruct {\n+    async fn foo(_: i32) -> &'static str {\n+        \"specialized\"\n+    }\n+}\n+\n+async fn async_main() {\n+    assert_eq!(MyStruct::foo(42).await, \"specialized\");\n+    assert_eq!(indirection(42).await, \"specialized\");\n+}\n+\n+async fn indirection<T>(x: T) -> &'static str {\n+    //explicit type coercion is currently necessary\n+    // because of https://github.com/rust-lang/rust/issues/67918\n+    <MyStruct as MyTrait<T>>::foo(x).await\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "371122ea71ec0e2ec43918f8638a737945f7a413", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a6c5429c29074961080cd9f368a2e46fdb371ff/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a6c5429c29074961080cd9f368a2e46fdb371ff/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr?ref=3a6c5429c29074961080cd9f368a2e46fdb371ff", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-specializable-projection.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:14:35\n+   |\n+LL |     default async fn foo(_: T) -> &'static str {\n+   |                                   ^^^^^^^^^^^^ expected associated type, found future\n+   |\n+note: type in trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:10:27\n+   |\n+LL |     async fn foo(_: T) -> &'static str;\n+   |                           ^^^^^^^^^^^^\n+   = note: expected signature `fn(_) -> impl Future<Output = &'static str>`\n+              found signature `fn(_) -> impl Future<Output = &'static str>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0053`."}]}