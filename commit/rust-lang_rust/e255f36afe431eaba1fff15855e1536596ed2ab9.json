{"sha": "e255f36afe431eaba1fff15855e1536596ed2ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNTVmMzZhZmU0MzFlYWJhMWZmZjE1ODU1ZTE1MzY1OTZlZDJhYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-12T05:15:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-12T05:15:16Z"}, "message": "Auto merge of #4365 - lukas-code:async_new_ret_no_self, r=flip1995\n\nnew_ret_no_self: allow Self in inner type for impl Trait return types\n\nCheck the inner types of associated types of a trait when checking for Self in the return type of a `new` method. This means that the following will no longer warn:\n```rust\ntrait Trait {\n    type Inner;\n}\n\nstruct S;\n\nimpl S {\n    fn new() -> impl Trait<Inner = Option<Self>> {\n        struct TraitImpl;\n\n        impl Trait for TraitImpl {\n            type Inner = Option<S>;\n        }\n\n        TraitImpl\n    }\n}\n```\n```rust\n#![feature(async_await)]\n\nstruct Connection;\n\nimpl Connection {\n    async fn new() -> Result<Self, ()> {\n        Ok(S)\n    }\n}\n```\ncloses #4359\n\nchangelog: fix `new_ret_no_self` lint for async `new` functions.", "tree": {"sha": "6ef28d8d4df27fbd9c941f926156d72db58d925f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef28d8d4df27fbd9c941f926156d72db58d925f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e255f36afe431eaba1fff15855e1536596ed2ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e255f36afe431eaba1fff15855e1536596ed2ab9", "html_url": "https://github.com/rust-lang/rust/commit/e255f36afe431eaba1fff15855e1536596ed2ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e255f36afe431eaba1fff15855e1536596ed2ab9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1de3d3775630b233790e41f0c7064a7d4ec495", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1de3d3775630b233790e41f0c7064a7d4ec495", "html_url": "https://github.com/rust-lang/rust/commit/ed1de3d3775630b233790e41f0c7064a7d4ec495"}, {"sha": "d55315808d88b2020068002995c83ac735cd777c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55315808d88b2020068002995c83ac735cd777c", "html_url": "https://github.com/rust-lang/rust/commit/d55315808d88b2020068002995c83ac735cd777c"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "fc78355c399f3a934a16d1670e0cb429558dc0f4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e255f36afe431eaba1fff15855e1536596ed2ab9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e255f36afe431eaba1fff15855e1536596ed2ab9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e255f36afe431eaba1fff15855e1536596ed2ab9", "patch": "@@ -1070,11 +1070,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                         (Predicate::Projection(poly_projection_predicate), _) => {\n                             let binder = poly_projection_predicate.ty();\n                             let associated_type = binder.skip_binder();\n-                            let associated_type_is_self_type = same_tys(cx, ty, associated_type);\n \n-                            // if the associated type is self, early return and do not trigger lint\n-                            if associated_type_is_self_type {\n-                                return;\n+                            // walk the associated type and check for Self\n+                            for inner_type in associated_type.walk() {\n+                                if same_tys(cx, ty, inner_type) {\n+                                    return;\n+                                }\n                             }\n                         },\n                         (_, _) => {},"}, {"sha": "5ae2b32c1bb08fc2a6a9f78165c4666032a1e392", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e255f36afe431eaba1fff15855e1536596ed2ab9/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e255f36afe431eaba1fff15855e1536596ed2ab9/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=e255f36afe431eaba1fff15855e1536596ed2ab9", "patch": "@@ -1,5 +1,7 @@\n // aux-build:option_helpers.rs\n+// compile-flags: --edition 2018\n \n+#![feature(async_await)]\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(\n     clippy::blacklisted_name,\n@@ -11,7 +13,6 @@\n     clippy::needless_pass_by_value,\n     clippy::default_trait_access,\n     clippy::use_self,\n-    clippy::new_ret_no_self,\n     clippy::useless_format,\n     clippy::wrong_self_convention\n )]\n@@ -138,6 +139,22 @@ impl<T> V<T> {\n     }\n }\n \n+struct AsyncNew;\n+\n+impl AsyncNew {\n+    async fn new() -> Option<Self> {\n+        None\n+    }\n+}\n+\n+struct BadNew;\n+\n+impl BadNew {\n+    fn new() -> i32 {\n+        0\n+    }\n+}\n+\n impl Mul<T> for T {\n     type Output = T;\n     // No error, obviously."}, {"sha": "8d09c49f005befedce599c4b840910498f43ac97", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e255f36afe431eaba1fff15855e1536596ed2ab9/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e255f36afe431eaba1fff15855e1536596ed2ab9/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=e255f36afe431eaba1fff15855e1536596ed2ab9", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:36:5\n+  --> $DIR/methods.rs:37:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -8,8 +8,18 @@ LL | |     }\n    |\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n+error: methods called `new` usually return `Self`\n+  --> $DIR/methods.rs:153:5\n+   |\n+LL | /     fn new() -> i32 {\n+LL | |         0\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n+\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:158:13\n+  --> $DIR/methods.rs:175:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -21,7 +31,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:162:13\n+  --> $DIR/methods.rs:179:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -31,7 +41,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:166:13\n+  --> $DIR/methods.rs:183:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,15 +51,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:171:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:173:13\n+  --> $DIR/methods.rs:190:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -59,7 +69,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:177:13\n+  --> $DIR/methods.rs:194:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -70,15 +80,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:205:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:192:13\n+  --> $DIR/methods.rs:209:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -90,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:196:13\n+  --> $DIR/methods.rs:213:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -100,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:200:13\n+  --> $DIR/methods.rs:217:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +120,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:230:13\n+  --> $DIR/methods.rs:247:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +129,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:233:13\n+  --> $DIR/methods.rs:250:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -129,7 +139,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:249:13\n+  --> $DIR/methods.rs:266:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +148,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:252:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -148,15 +158,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:258:13\n+  --> $DIR/methods.rs:275:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:261:13\n+  --> $DIR/methods.rs:278:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -166,15 +176,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:267:13\n+  --> $DIR/methods.rs:284:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:270:13\n+  --> $DIR/methods.rs:287:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -184,12 +194,12 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:285:13\n+  --> $DIR/methods.rs:302:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 21 previous errors\n "}]}