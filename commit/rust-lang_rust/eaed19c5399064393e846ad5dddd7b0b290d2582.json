{"sha": "eaed19c5399064393e846ad5dddd7b0b290d2582", "node_id": "C_kwDOAAsO6NoAKGVhZWQxOWM1Mzk5MDY0MzkzZTg0NmFkNWRkZGQ3YjBiMjkwZDI1ODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T12:08:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T12:08:15Z"}, "message": "Auto merge of #14104 - Veykril:castable-expect, r=Veykril\n\nfix: Implement Expactation::Castable and add a test case for it\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/11571", "tree": {"sha": "643f2f9da79f2f734f98af35bfca07c6499cf917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643f2f9da79f2f734f98af35bfca07c6499cf917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaed19c5399064393e846ad5dddd7b0b290d2582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaed19c5399064393e846ad5dddd7b0b290d2582", "html_url": "https://github.com/rust-lang/rust/commit/eaed19c5399064393e846ad5dddd7b0b290d2582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaed19c5399064393e846ad5dddd7b0b290d2582/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5341a6fa7f1c8aa03c21f3ca78e691c51ea36cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5341a6fa7f1c8aa03c21f3ca78e691c51ea36cd1", "html_url": "https://github.com/rust-lang/rust/commit/5341a6fa7f1c8aa03c21f3ca78e691c51ea36cd1"}, {"sha": "f8f1cb93e0afefb5613494c95834f5cf0b9a4357", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f1cb93e0afefb5613494c95834f5cf0b9a4357", "html_url": "https://github.com/rust-lang/rust/commit/f8f1cb93e0afefb5613494c95834f5cf0b9a4357"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "43a24c7136dacaa7bed2c7dfb22e8d5840e76a6f", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=eaed19c5399064393e846ad5dddd7b0b290d2582", "patch": "@@ -1024,7 +1024,7 @@ impl<'a> InferenceContext<'a> {\n pub(crate) enum Expectation {\n     None,\n     HasType(Ty),\n-    // Castable(Ty), // rustc has this, we currently just don't propagate an expectation for casts\n+    Castable(Ty),\n     RValueLikeUnsized(Ty),\n }\n \n@@ -1077,6 +1077,7 @@ impl Expectation {\n         match self {\n             Expectation::None => Expectation::None,\n             Expectation::HasType(t) => Expectation::HasType(table.resolve_ty_shallow(t)),\n+            Expectation::Castable(t) => Expectation::Castable(table.resolve_ty_shallow(t)),\n             Expectation::RValueLikeUnsized(t) => {\n                 Expectation::RValueLikeUnsized(table.resolve_ty_shallow(t))\n             }\n@@ -1086,17 +1087,18 @@ impl Expectation {\n     fn to_option(&self, table: &mut unify::InferenceTable<'_>) -> Option<Ty> {\n         match self.resolve(table) {\n             Expectation::None => None,\n-            Expectation::HasType(t) |\n-            // Expectation::Castable(t) |\n-            Expectation::RValueLikeUnsized(t) => Some(t),\n+            Expectation::HasType(t)\n+            | Expectation::Castable(t)\n+            | Expectation::RValueLikeUnsized(t) => Some(t),\n         }\n     }\n \n     fn only_has_type(&self, table: &mut unify::InferenceTable<'_>) -> Option<Ty> {\n         match self {\n             Expectation::HasType(t) => Some(table.resolve_ty_shallow(t)),\n-            // Expectation::Castable(_) |\n-            Expectation::RValueLikeUnsized(_) | Expectation::None => None,\n+            Expectation::Castable(_) | Expectation::RValueLikeUnsized(_) | Expectation::None => {\n+                None\n+            }\n         }\n     }\n "}, {"sha": "f0655291b8bba0ee10f174c6fb1e37ac8336965b", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=eaed19c5399064393e846ad5dddd7b0b290d2582", "patch": "@@ -610,9 +610,9 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n             Expr::Cast { expr, type_ref } => {\n-                // FIXME: propagate the \"castable to\" expectation (and find a test case that shows this is necessary)\n-                let _inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 let cast_ty = self.make_ty(type_ref);\n+                let _inner_ty =\n+                    self.infer_expr_inner(*expr, &Expectation::Castable(cast_ty.clone()));\n                 // FIXME check the cast...\n                 cast_ty\n             }"}, {"sha": "6f6b334c9476a5f6863115d39b727c530b119a20", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaed19c5399064393e846ad5dddd7b0b290d2582/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=eaed19c5399064393e846ad5dddd7b0b290d2582", "patch": "@@ -3200,3 +3200,34 @@ fn func() {\n     \"#,\n     );\n }\n+#[test]\n+fn castable_to() {\n+    check_infer(\n+        r#\"\n+//- minicore: sized\n+#[lang = \"owned_box\"]\n+pub struct Box<T: ?Sized> {\n+    inner: *mut T,\n+}\n+impl<T> Box<T> {\n+    fn new(t: T) -> Self { loop {} }\n+}\n+\n+fn func() {\n+    let x = Box::new([]) as Box<[i32; 0]>;\n+}\n+\"#,\n+        expect![[r#\"\n+            99..100 't': T\n+            113..124 '{ loop {} }': Box<T>\n+            115..122 'loop {}': !\n+            120..122 '{}': ()\n+            138..184 '{     ...0]>; }': ()\n+            148..149 'x': Box<[i32; 0]>\n+            152..160 'Box::new': fn new<[i32; 0]>([i32; 0]) -> Box<[i32; 0]>\n+            152..164 'Box::new([])': Box<[i32; 0]>\n+            152..181 'Box::n...2; 0]>': Box<[i32; 0]>\n+            161..163 '[]': [i32; 0]\n+        \"#]],\n+    );\n+}"}]}