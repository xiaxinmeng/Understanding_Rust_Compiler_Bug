{"sha": "64779233238b3dcadae13bdeebac82445c1e8f6d", "node_id": "C_kwDOAAsO6NoAKDY0Nzc5MjMzMjM4YjNkY2FkYWUxM2JkZWViYWM4MjQ0NWMxZThmNmQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-07T17:28:57Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-07T17:28:57Z"}, "message": "Split out `infalliable_detructuring_match`", "tree": {"sha": "7ec3e5372d5b486b930ad321d3538ed4f84d29ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec3e5372d5b486b930ad321d3538ed4f84d29ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64779233238b3dcadae13bdeebac82445c1e8f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64779233238b3dcadae13bdeebac82445c1e8f6d", "html_url": "https://github.com/rust-lang/rust/commit/64779233238b3dcadae13bdeebac82445c1e8f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64779233238b3dcadae13bdeebac82445c1e8f6d/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1093c56189e1386376715f4a61990b90289cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1093c56189e1386376715f4a61990b90289cca", "html_url": "https://github.com/rust-lang/rust/commit/fb1093c56189e1386376715f4a61990b90289cca"}], "stats": {"total": 84, "additions": 48, "deletions": 36}, "files": [{"sha": "2472acb6f6e8b6f974fcf898010e45140bc021ff", "filename": "clippy_lints/src/matches/infalliable_detructuring_match.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/64779233238b3dcadae13bdeebac82445c1e8f6d/clippy_lints%2Fsrc%2Fmatches%2Finfalliable_detructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64779233238b3dcadae13bdeebac82445c1e8f6d/clippy_lints%2Fsrc%2Fmatches%2Finfalliable_detructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Finfalliable_detructuring_match.rs?ref=64779233238b3dcadae13bdeebac82445c1e8f6d", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{path_to_local_id, peel_blocks, strip_pat_refs};\n+use rustc_errors::Applicability;\n+use rustc_hir::{ExprKind, Local, MatchSource, PatKind, QPath};\n+use rustc_lint::LateContext;\n+\n+use super::INFALLIBLE_DESTRUCTURING_MATCH;\n+\n+pub(crate) fn check(cx: &LateContext<'_>, local: &Local<'_>) -> bool {\n+    if_chain! {\n+        if !local.span.from_expansion();\n+        if let Some(expr) = local.init;\n+        if let ExprKind::Match(target, arms, MatchSource::Normal) = expr.kind;\n+        if arms.len() == 1 && arms[0].guard.is_none();\n+        if let PatKind::TupleStruct(\n+            QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n+        if args.len() == 1;\n+        if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n+        let body = peel_blocks(arms[0].body);\n+        if path_to_local_id(body, arg);\n+\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                INFALLIBLE_DESTRUCTURING_MATCH,\n+                local.span,\n+                \"you seem to be trying to use `match` to destructure a single infallible pattern. \\\n+                Consider using `let`\",\n+                \"try this\",\n+                format!(\n+                    \"let {}({}) = {};\",\n+                    snippet_with_applicability(cx, variant_name.span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, local.pat.span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, target.span, \"..\", &mut applicability),\n+                ),\n+                applicability,\n+            );\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "0adfa424ee146165a79b29f8837604b474390fea", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/64779233238b3dcadae13bdeebac82445c1e8f6d/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64779233238b3dcadae13bdeebac82445c1e8f6d/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=64779233238b3dcadae13bdeebac82445c1e8f6d", "patch": "@@ -1,14 +1,13 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{is_wild, meets_msrv, msrvs, path_to_local_id, peel_blocks, strip_pat_refs};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{is_wild, meets_msrv, msrvs};\n use if_chain::if_chain;\n-use rustc_errors::Applicability;\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n+mod infalliable_detructuring_match;\n mod match_as_ref;\n mod match_bool;\n mod match_like_matches;\n@@ -637,38 +636,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        if_chain! {\n-            if !local.span.from_expansion();\n-            if let Some(expr) = local.init;\n-            if let ExprKind::Match(target, arms, MatchSource::Normal) = expr.kind;\n-            if arms.len() == 1 && arms[0].guard.is_none();\n-            if let PatKind::TupleStruct(\n-                QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n-            if args.len() == 1;\n-            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n-            let body = peel_blocks(arms[0].body);\n-            if path_to_local_id(body, arg);\n-\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                self.infallible_destructuring_match_linted = true;\n-                span_lint_and_sugg(\n-                    cx,\n-                    INFALLIBLE_DESTRUCTURING_MATCH,\n-                    local.span,\n-                    \"you seem to be trying to use `match` to destructure a single infallible pattern. \\\n-                    Consider using `let`\",\n-                    \"try this\",\n-                    format!(\n-                        \"let {}({}) = {};\",\n-                        snippet_with_applicability(cx, variant_name.span, \"..\", &mut applicability),\n-                        snippet_with_applicability(cx, local.pat.span, \"..\", &mut applicability),\n-                        snippet_with_applicability(cx, target.span, \"..\", &mut applicability),\n-                    ),\n-                    applicability,\n-                );\n-            }\n-        }\n+        self.infallible_destructuring_match_linted |= infalliable_detructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}]}