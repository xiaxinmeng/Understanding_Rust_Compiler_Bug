{"sha": "a94b2cb034c2521d52e54632b775e181eb7e0bc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NGIyY2IwMzRjMjUyMWQ1MmU1NDYzMmI3NzVlMTgxZWI3ZTBiYzc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T16:54:17Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T16:55:36Z"}, "message": "Add safety docs about T's invariants in MaybeUninit::assume_init_drop.", "tree": {"sha": "a30262ffe2c15b18900d485fa6e3cf7aba18ace8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30262ffe2c15b18900d485fa6e3cf7aba18ace8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94b2cb034c2521d52e54632b775e181eb7e0bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94b2cb034c2521d52e54632b775e181eb7e0bc7", "html_url": "https://github.com/rust-lang/rust/commit/a94b2cb034c2521d52e54632b775e181eb7e0bc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94b2cb034c2521d52e54632b775e181eb7e0bc7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14efd1d0a2f0fa112e4359b9db1e9857589c796", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14efd1d0a2f0fa112e4359b9db1e9857589c796", "html_url": "https://github.com/rust-lang/rust/commit/a14efd1d0a2f0fa112e4359b9db1e9857589c796"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "0d1d563b5ceec95e9f64c477fff677d19d32ad39", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a94b2cb034c2521d52e54632b775e181eb7e0bc7/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b2cb034c2521d52e54632b775e181eb7e0bc7/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=a94b2cb034c2521d52e54632b775e181eb7e0bc7", "patch": "@@ -580,17 +580,23 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// # Safety\n     ///\n-    /// Calling this when the content is not yet fully initialized causes undefined\n-    /// behavior: it is up to the caller to guarantee that the `MaybeUninit<T>` really\n-    /// is in an initialized state.\n-    ///\n-    /// This function runs the destructor of the contained value in place.\n-    /// Afterwards, the memory is considered uninitialized again, but remains unmodified.\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is\n+    /// in an initialized state. Calling this when the content is not yet fully\n+    /// initialized causes undefined behavior.\n+    ///\n+    /// On top of that, all additional invariants of the type `T` must be\n+    /// satisfied, as the `Drop` implementation of `T` (or its members) may\n+    /// rely on this. For example, a `1`-initialized [`Vec<T>`] is considered\n+    /// initialized (under the current implementation; this does not constitute\n+    /// a stable guarantee) because the only requirement the compiler knows\n+    /// about it is that the data pointer must be non-null. Dropping such a\n+    /// `Vec<T>` however will cause undefined behaviour.\n     ///\n     /// [`assume_init`]: MaybeUninit::assume_init\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     pub unsafe fn assume_init_drop(&mut self) {\n-        // SAFETY: the caller must guarantee that `self` is initialized.\n+        // SAFETY: the caller must guarantee that `self` is initialized and\n+        // satisfies all invariants of `T`.\n         // Dropping the value in place is safe if that is the case.\n         unsafe { ptr::drop_in_place(self.as_mut_ptr()) }\n     }"}]}