{"sha": "a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZmEyM2E1YmJiZmZjMTVjN2VmNmRmNTc4MTQ3OGRkYzdhNDU2NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-05T00:21:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-05T00:21:59Z"}, "message": "Auto merge of #46305 - irinagpopa:backstory, r=alexcrichton,eddyb\n\nMove rustc_back modules where they belong.", "tree": {"sha": "03581d3d67d316ccbbb98e189e626017dcbe0a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03581d3d67d316ccbbb98e189e626017dcbe0a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "html_url": "https://github.com/rust-lang/rust/commit/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8a35299572c7d246cd9ab13d0d5c962aba053c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8a35299572c7d246cd9ab13d0d5c962aba053c", "html_url": "https://github.com/rust-lang/rust/commit/cd8a35299572c7d246cd9ab13d0d5c962aba053c"}, {"sha": "2c175df013a701321e44bcdba3c7ba7772ed3b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c175df013a701321e44bcdba3c7ba7772ed3b94", "html_url": "https://github.com/rust-lang/rust/commit/2c175df013a701321e44bcdba3c7ba7772ed3b94"}], "stats": {"total": 252, "additions": 57, "deletions": 195}, "files": [{"sha": "dc15486fe7cb25c4cc1ad5b67d914a763582b2bf", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -1687,7 +1687,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1701,7 +1700,6 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -1891,7 +1889,6 @@ name = \"rustc_plugin\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1963,6 +1960,7 @@ dependencies = [\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1999,7 +1997,6 @@ dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -2017,6 +2014,7 @@ dependencies = [\n  \"html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "06c9995663e68e2cd5246054ba8bc53ae85dd321", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -46,6 +46,7 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n+#![feature(from_ref)]\n #![feature(i128)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]"}, {"sha": "75cd230e1e5e2a180bd5fb565353b4cf34fb7f8f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -26,7 +26,7 @@\n \n use self::TargetLint::*;\n \n-use rustc_back::slice;\n+use std::slice;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n@@ -308,7 +308,7 @@ impl LintStore {\n                     Some(ids) => CheckLintNameResult::Ok(&ids.0),\n                 }\n             }\n-            Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::ref_slice(id)),\n+            Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }\n }"}, {"sha": "3683425cee5b45ab0a34ab25d9f692d480d32190", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -31,7 +31,7 @@ use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use util::common::ErrorReported;\n use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n-use rustc_back::slice;\n+use std::slice;\n \n use hir;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -530,7 +530,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         if lifetime_ref.is_elided() {\n-            self.resolve_elided_lifetimes(slice::ref_slice(lifetime_ref));\n+            self.resolve_elided_lifetimes(slice::from_ref(lifetime_ref));\n             return;\n         }\n         if lifetime_ref.is_static() {"}, {"sha": "5e5b9dc4d8493d07726391ed6a151da3d40448be", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -25,7 +25,7 @@ use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n-use rustc_back::slice;\n+use std::slice;\n use hir::{self, InlineAsm};\n use std::ascii;\n use std::borrow::{Cow};\n@@ -754,28 +754,28 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors(&self) -> Cow<[BasicBlock]> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Goto { target: ref b } => slice::ref_slice(b).into_cow(),\n+            Goto { target: ref b } => slice::from_ref(b).into_cow(),\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n             Resume | GeneratorDrop => (&[]).into_cow(),\n             Return => (&[]).into_cow(),\n             Unreachable => (&[]).into_cow(),\n             Call { destination: Some((_, t)), cleanup: Some(c), .. } => vec![t, c].into_cow(),\n             Call { destination: Some((_, ref t)), cleanup: None, .. } =>\n-                slice::ref_slice(t).into_cow(),\n-            Call { destination: None, cleanup: Some(ref c), .. } => slice::ref_slice(c).into_cow(),\n+                slice::from_ref(t).into_cow(),\n+            Call { destination: None, cleanup: Some(ref c), .. } => slice::from_ref(c).into_cow(),\n             Call { destination: None, cleanup: None, .. } => (&[]).into_cow(),\n             Yield { resume: t, drop: Some(c), .. } => vec![t, c].into_cow(),\n-            Yield { resume: ref t, drop: None, .. } => slice::ref_slice(t).into_cow(),\n+            Yield { resume: ref t, drop: None, .. } => slice::from_ref(t).into_cow(),\n             DropAndReplace { target, unwind: Some(unwind), .. } |\n             Drop { target, unwind: Some(unwind), .. } => {\n                 vec![target, unwind].into_cow()\n             }\n             DropAndReplace { ref target, unwind: None, .. } |\n             Drop { ref target, unwind: None, .. } => {\n-                slice::ref_slice(target).into_cow()\n+                slice::from_ref(target).into_cow()\n             }\n             Assert { target, cleanup: Some(unwind), .. } => vec![target, unwind].into_cow(),\n-            Assert { ref target, .. } => slice::ref_slice(target).into_cow(),\n+            Assert { ref target, .. } => slice::from_ref(target).into_cow(),\n             FalseEdges { ref real_target, ref imaginary_targets } => {\n                 let mut s = vec![*real_target];\n                 s.extend_from_slice(imaginary_targets);"}, {"sha": "ccf1db778d2967f6e9971c4225efed55245edb5e", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -28,20 +28,15 @@\n \n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![feature(libc)]\n \n extern crate syntax;\n-extern crate libc;\n extern crate rand;\n extern crate serialize;\n #[macro_use] extern crate log;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n-pub mod tempdir;\n pub mod target;\n-pub mod slice;\n-pub mod dynamic_lib;\n \n use std::str::FromStr;\n "}, {"sha": "5d8fc3acefd6f932829d8fefcbe86aa459ba2cc5", "filename": "src/librustc_back/slice.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd8a35299572c7d246cd9ab13d0d5c962aba053c/src%2Flibrustc_back%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8a35299572c7d246cd9ab13d0d5c962aba053c/src%2Flibrustc_back%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fslice.rs?ref=cd8a35299572c7d246cd9ab13d0d5c962aba053c", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::mem;\n-\n-pub fn ref_slice<T>(ptr: &T) -> &[T; 1] {\n-    unsafe { mem::transmute(ptr) }\n-}\n-\n-pub fn mut_ref_slice<T>(ptr: &mut T) -> &mut [T; 1] {\n-    unsafe { mem::transmute(ptr) }\n-}"}, {"sha": "1a2515366224c04cb585884fc110c90e1dd40073", "filename": "src/librustc_back/tempdir.rs", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/cd8a35299572c7d246cd9ab13d0d5c962aba053c/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8a35299572c7d246cd9ab13d0d5c962aba053c/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=cd8a35299572c7d246cd9ab13d0d5c962aba053c", "patch": "@@ -1,114 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::env;\n-use std::io::{self, Error, ErrorKind};\n-use std::fs;\n-use std::path::{self, PathBuf, Path};\n-use rand::{thread_rng, Rng};\n-\n-/// A wrapper for a path to temporary directory implementing automatic\n-/// scope-based deletion.\n-pub struct TempDir {\n-    path: Option<PathBuf>,\n-}\n-\n-// How many times should we (re)try finding an unused random name? It should be\n-// enough that an attacker will run out of luck before we run out of patience.\n-const NUM_RETRIES: u32 = 1 << 31;\n-// How many characters should we include in a random file name? It needs to\n-// be enough to dissuade an attacker from trying to preemptively create names\n-// of that length, but not so huge that we unnecessarily drain the random number\n-// generator of entropy.\n-const NUM_RAND_CHARS: usize = 12;\n-\n-impl TempDir {\n-    /// Attempts to make a temporary directory inside of `tmpdir` whose name\n-    /// will have the prefix `prefix`. The directory will be automatically\n-    /// deleted once the returned wrapper is destroyed.\n-    ///\n-    /// If no directory can be created, `Err` is returned.\n-    #[allow(deprecated)] // rand usage\n-    pub fn new_in<P: AsRef<Path>>(tmpdir: P, prefix: &str)\n-                                  -> io::Result<TempDir> {\n-        Self::_new_in(tmpdir.as_ref(), prefix)\n-    }\n-\n-    fn _new_in(tmpdir: &Path, prefix: &str) -> io::Result<TempDir> {\n-        let storage;\n-        let mut tmpdir = tmpdir;\n-        if !tmpdir.is_absolute() {\n-            let cur_dir = env::current_dir()?;\n-            storage = cur_dir.join(tmpdir);\n-            tmpdir = &storage;\n-            // return TempDir::new_in(&cur_dir.join(tmpdir), prefix);\n-        }\n-\n-        let mut rng = thread_rng();\n-        for _ in 0..NUM_RETRIES {\n-            let suffix: String = rng.gen_ascii_chars().take(NUM_RAND_CHARS).collect();\n-            let leaf = if !prefix.is_empty() {\n-                format!(\"{}.{}\", prefix, suffix)\n-            } else {\n-                // If we're given an empty string for a prefix, then creating a\n-                // directory starting with \".\" would lead to it being\n-                // semi-invisible on some systems.\n-                suffix\n-            };\n-            let path = tmpdir.join(&leaf);\n-            match fs::create_dir(&path) {\n-                Ok(_) => return Ok(TempDir { path: Some(path) }),\n-                Err(ref e) if e.kind() == ErrorKind::AlreadyExists => {}\n-                Err(e) => return Err(e)\n-            }\n-        }\n-\n-        Err(Error::new(ErrorKind::AlreadyExists,\n-                       \"too many temporary directories already exist\"))\n-    }\n-\n-    /// Attempts to make a temporary directory inside of `env::temp_dir()` whose\n-    /// name will have the prefix `prefix`. The directory will be automatically\n-    /// deleted once the returned wrapper is destroyed.\n-    ///\n-    /// If no directory can be created, `Err` is returned.\n-    pub fn new(prefix: &str) -> io::Result<TempDir> {\n-        TempDir::new_in(&env::temp_dir(), prefix)\n-    }\n-\n-    /// Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\n-    /// This discards the wrapper so that the automatic deletion of the\n-    /// temporary directory is prevented.\n-    pub fn into_path(mut self) -> PathBuf {\n-        self.path.take().unwrap()\n-    }\n-\n-    /// Access the wrapped `std::path::Path` to the temporary directory.\n-    pub fn path(&self) -> &path::Path {\n-        self.path.as_ref().unwrap()\n-    }\n-\n-    fn cleanup_dir(&mut self) -> io::Result<()> {\n-        match self.path {\n-            Some(ref p) => fs::remove_dir_all(p),\n-            None => Ok(())\n-        }\n-    }\n-}\n-\n-impl Drop for TempDir {\n-    fn drop(&mut self) {\n-        let _ = self.cleanup_dir();\n-    }\n-}\n-\n-// the tests for this module need to change the path using change_dir,\n-// and this doesn't play nicely with other tests so these unit tests are located\n-// in src/test/run-pass/tempfile.rs"}, {"sha": "25f02537490fa8d694a52ff0a366692622c54d45", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -15,6 +15,5 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "ddee122d0a6bd1a4d91d7a248892ced94b2a7bff", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::{self, HirId};\n use rustc::lint::builtin::UNUSED_MUT;\n use rustc::ty;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n-use rustc_back::slice;\n+use std::slice;\n use syntax::ptr::P;\n \n use borrowck::BorrowckCtxt;\n@@ -26,7 +26,7 @@ pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n     }.visit_expr(&body.value);\n     let mut cx = UnusedMutCx { bccx, used_mut };\n     for arg in body.arguments.iter() {\n-        cx.check_unused_mut_pat(slice::ref_slice(&arg.pat));\n+        cx.check_unused_mut_pat(slice::from_ref(&arg.pat));\n     }\n     cx.visit_expr(&body.value);\n }\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedMutCx<'a, 'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &hir::Local) {\n-        self.check_unused_mut_pat(slice::ref_slice(&local.pat));\n+        self.check_unused_mut_pat(slice::from_ref(&local.pat));\n     }\n }\n "}, {"sha": "be173db23a52a3c4d2f7e86245143dd6ee383e87", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -15,14 +15,14 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(from_ref)]\n #![feature(match_default_bindings)]\n #![feature(quote)]\n \n #[macro_use] extern crate log;\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n-extern crate rustc_back;\n \n // for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n // refers to the borrowck-specific graphviz adapter traits."}, {"sha": "e8d404af4defa9a669b2073981e82cb9d3763735", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "e22f7f141642d44a0cda87edf17c70a8ffa6e1fc", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -31,7 +31,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n-use rustc_back::slice;\n+use std::slice;\n \n use syntax::ast;\n use syntax::ptr::P;\n@@ -114,15 +114,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n         });\n \n         // Check legality of move bindings and `@` patterns.\n-        self.check_patterns(false, slice::ref_slice(&loc.pat));\n+        self.check_patterns(false, slice::from_ref(&loc.pat));\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body) {\n         intravisit::walk_body(self, body);\n \n         for arg in &body.arguments {\n             self.check_irrefutable(&arg.pat, \"function argument\");\n-            self.check_patterns(false, slice::ref_slice(&arg.pat));\n+            self.check_patterns(false, slice::from_ref(&arg.pat));\n         }\n     }\n }"}, {"sha": "d4110f0091aeb0bc83d9e18cf343dc76afacd0ad", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -24,12 +24,12 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(i128_type)]\n+#![feature(from_ref)]\n \n extern crate arena;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n-extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors;"}, {"sha": "e1c5cde42eccfd702acfd5028534ffed28dc44b3", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -556,7 +556,7 @@ impl<'a> CrateLoader<'a> {\n         use std::{env, mem};\n         use proc_macro::TokenStream;\n         use proc_macro::__internal::Registry;\n-        use rustc_back::dynamic_lib::DynamicLibrary;\n+        use dynamic_lib::DynamicLibrary;\n         use syntax_ext::deriving::custom::ProcMacroDerive;\n         use syntax_ext::proc_macro_impl::{AttrProcMacro, BangProcMacro};\n "}, {"sha": "1b42fa03a4fb621e3957708aac4424e122c4c670", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "previous_filename": "src/librustc_back/dynamic_lib.rs"}, {"sha": "6c1ca36232307f1c75443ae9a13b50863b533944", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -16,12 +16,14 @@\n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(i128_type)]\n+#![feature(libc)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n #![feature(rustc_private)]\n \n+extern crate libc;\n #[macro_use]\n extern crate log;\n #[macro_use]\n@@ -54,6 +56,7 @@ mod link_args;\n \n pub mod creader;\n pub mod cstore;\n+pub mod dynamic_lib;\n pub mod locator;\n \n __build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "d8fa1da1ce219e1a3b66cf94c4043da5a98aac76", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "3df56c4e728ca6f29330100205a4632e95481a90", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -71,7 +71,6 @@\n #[macro_use] extern crate syntax;\n \n extern crate rustc;\n-extern crate rustc_back;\n extern crate rustc_metadata;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;"}, {"sha": "8a4ec03b20efcc74f14efa5b958ccb04dda050a2", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -115,7 +115,7 @@ impl<'a> PluginLoader<'a> {\n                         span: Span,\n                         path: PathBuf,\n                         symbol: String) -> PluginRegistrarFun {\n-        use rustc_back::dynamic_lib::DynamicLibrary;\n+        use rustc_metadata::dynamic_lib::DynamicLibrary;\n \n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(&path);"}, {"sha": "d8318ea808221f19853a4935379e2ac80a11fcb7", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -32,6 +32,7 @@ rustc_trans_utils = { path = \"../librustc_trans_utils\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+tempdir = \"0.3\"\n \n [target.\"cfg(windows)\".dependencies]\n cc = \"1.0.1\""}, {"sha": "a182d7c6fbe06ec1c8cf004c1f68333f25287fa0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -26,7 +26,7 @@ use {CrateTranslation, CrateInfo};\n use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n use rustc_back::{PanicStrategy, RelroLevel, LinkerFlavor};\n use context::get_reloc_model;\n use llvm;"}, {"sha": "3c2e56bf2a12721b0402c551eea71d692357d12e", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -63,6 +63,7 @@ extern crate rustc_errors as errors;\n extern crate serialize;\n #[cfg(windows)]\n extern crate cc; // Used to locate MSVC\n+extern crate tempdir;\n \n pub use base::trans_crate;\n use back::bytecode::RLIB_BYTECODE_EXTENSION;"}, {"sha": "c3245842b42562453cede6656306ffc69091fc8b", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -15,7 +15,6 @@ syntax = { path = \"../libsyntax\" }\n arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "e20706a0d5abbae84e2b6d6ee33365347cfe31e7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -23,7 +23,7 @@ use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n-use rustc_back::slice;\n+use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n@@ -782,7 +782,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"associated_path_def_to_ty: {:?}::{}\", ty, assoc_name);\n \n-        self.prohibit_type_params(slice::ref_slice(item_segment));\n+        self.prohibit_type_params(slice::from_ref(item_segment));\n \n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n@@ -859,7 +859,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n         let trait_def_id = tcx.parent_def_id(item_def_id).unwrap();\n \n-        self.prohibit_type_params(slice::ref_slice(item_segment));\n+        self.prohibit_type_params(slice::from_ref(item_segment));\n \n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty"}, {"sha": "efcf498b72c1433376448627b9c47b4d74905194", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -87,7 +87,7 @@ use self::TupleArgumentsFlag::*;\n use astconv::AstConv;\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc_back::slice::ref_slice;\n+use std::slice;\n use namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n@@ -130,7 +130,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Node;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n-use rustc_back::slice;\n use rustc_const_math::ConstInt;\n \n mod autoderef;\n@@ -4152,7 +4151,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(cached_def) = self.tables.borrow().type_dependent_defs().get(hir_id) {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            return (*cached_def, Some(ty), slice::ref_slice(&**item_segment))\n+            return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.name;\n         let def = match self.resolve_ufcs(span, item_name, ty, node_id) {\n@@ -4171,7 +4170,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Write back the new resolution.\n         self.tables.borrow_mut().type_dependent_defs_mut().insert(hir_id, def);\n-        (def, Some(ty), slice::ref_slice(&**item_segment))\n+        (def, Some(ty), slice::from_ref(&**item_segment))\n     }\n \n     pub fn check_decl_initializer(&self,\n@@ -4309,7 +4308,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             CoerceMany::new(coerce_to_ty)\n         } else {\n             let tail_expr: &[P<hir::Expr>] = match tail_expr {\n-                Some(e) => ref_slice(e),\n+                Some(e) => slice::from_ref(e),\n                 None => &[],\n             };\n             CoerceMany::with_coercion_sites(coerce_to_ty, tail_expr)"}, {"sha": "bf8f9d8b24a0d2877cb795b12cc5315d6e65f892", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -77,6 +77,7 @@ This API is completely unstable and subject to change.\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(conservative_impl_trait)]\n+#![feature(from_ref)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n #![feature(quote)]\n@@ -90,7 +91,6 @@ extern crate syntax_pos;\n extern crate arena;\n #[macro_use] extern crate rustc;\n extern crate rustc_platform_intrinsics as intrinsics;\n-extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;"}, {"sha": "fd8a6e0b5932644b486550888585d58d48566ca5", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -14,6 +14,7 @@ doctest = false\n log = \"0.3\"\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n html-diff = \"0.0.5\"\n+tempdir = \"0.3\"\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "f0bb87015f80579cd398bcf5569c2caf9e379df7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -48,6 +48,7 @@ extern crate std_unicode;\n #[macro_use] extern crate log;\n extern crate rustc_errors as errors;\n extern crate pulldown_cmark;\n+extern crate tempdir;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "1a1e60a6945edd2fc26bb7e3c8a7fbe5292aec89", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -16,7 +16,7 @@ use std::mem;\n use std::string::String;\n use std::path::PathBuf;\n \n-use rustc_back::dynamic_lib as dl;\n+use rustc_metadata::dynamic_lib as dl;\n \n pub type PluginResult = clean::Crate;\n pub type PluginCallback = fn (clean::Crate) -> PluginResult;"}, {"sha": "74a16cb867d74015fad38da8f309f14a9119d3b1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -27,8 +27,8 @@ use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc_back::dynamic_lib::DynamicLibrary;\n-use rustc_back::tempdir::TempDir;\n+use rustc_metadata::dynamic_lib::DynamicLibrary;\n+use tempdir::TempDir;\n use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;"}, {"sha": "27387332c1c1f50b0a7c4f5f8fbb3ff8eba44a3e", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate rustc_metadata;\n \n-use rustc_back::dynamic_lib::DynamicLibrary;\n+use rustc_metadata::dynamic_lib::DynamicLibrary;\n use std::path::Path;\n \n pub fn main() {"}, {"sha": "7a15a4cb3a2e8ee9d853e475c45287aae93692a4", "filename": "src/test/run-pass-fulldeps/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -14,9 +14,9 @@\n // do the runtime check that these functions aren't exported.\n #![allow(private_no_mangle_fns)]\n \n-extern crate rustc_back;\n+extern crate rustc_metadata;\n \n-use rustc_back::dynamic_lib::DynamicLibrary;\n+use rustc_metadata::dynamic_lib::DynamicLibrary;\n \n #[no_mangle]\n pub fn foo() { bar(); }"}, {"sha": "ba42cb870c97edf124f38b8192c76314cfb0074f", "filename": "src/test/run-pass-fulldeps/create-dir-all-bare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -12,11 +12,11 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     let td = TempDir::new(\"create-dir-all-bare\").unwrap();"}, {"sha": "121fd4a9825df0d3770b66ed3db7a1da5a468bf8", "filename": "src/test/run-pass-fulldeps/issue-15149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15149.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -13,13 +13,13 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs;\n use std::process;\n use std::str;\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly"}, {"sha": "7a2a4343522bb05e4ce8b062c246a3441f527793", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -15,11 +15,11 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::ffi::CString;\n use std::fs::{self, File};\n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn rename_directory() {\n     let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");"}, {"sha": "535ab711f5bcf62ee8803cd4c229a5809ec6775d", "filename": "src/test/run-pass-fulldeps/stdio-from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -12,15 +12,15 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::env;\n use std::fs::File;\n use std::io;\n use std::io::{Read, Write};\n use std::process::{Command, Stdio};\n \n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n fn main() {\n     if env::args().len() > 1 {"}, {"sha": "16f7e2832853663452934ebbd86f0be7dc52783c", "filename": "src/test/run-pass-fulldeps/switch-stdout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4fa23a5bbbffc15c7ef6df5781478ddc7a45640/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fswitch-stdout.rs?ref=a4fa23a5bbbffc15c7ef6df5781478ddc7a45640", "patch": "@@ -10,12 +10,12 @@\n \n #![feature(rustc_private)]\n \n-extern crate rustc_back;\n+extern crate tempdir;\n \n use std::fs::File;\n use std::io::{Read, Write};\n \n-use rustc_back::tempdir::TempDir;\n+use tempdir::TempDir;\n \n #[cfg(unix)]\n fn switch_stdout_to(file: File) {"}]}