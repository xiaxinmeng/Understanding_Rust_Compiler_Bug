{"sha": "7f6034862d0a22c7337eb428c67fcdb23b9168ae", "node_id": "C_kwDOAAsO6NoAKDdmNjAzNDg2MmQwYTIyYzczMzdlYjQyOGM2N2ZjZGIyM2I5MTY4YWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T12:44:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T13:14:13Z"}, "message": "pass clippy::cast_possible_truncation", "tree": {"sha": "4d2b0519b0c375a480441877233ee39a47d0441f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2b0519b0c375a480441877233ee39a47d0441f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6034862d0a22c7337eb428c67fcdb23b9168ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6034862d0a22c7337eb428c67fcdb23b9168ae", "html_url": "https://github.com/rust-lang/rust/commit/7f6034862d0a22c7337eb428c67fcdb23b9168ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6034862d0a22c7337eb428c67fcdb23b9168ae/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67a6ff09911736f331933074939dd4fb7b38200", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67a6ff09911736f331933074939dd4fb7b38200", "html_url": "https://github.com/rust-lang/rust/commit/b67a6ff09911736f331933074939dd4fb7b38200"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "caae17b202235e7248f25bc0d59381222a6f0b7d", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -29,6 +29,7 @@\n     clippy::cast_possible_wrap, // unsigned -> signed\n     clippy::cast_sign_loss, // signed -> unsigned\n     clippy::cast_lossless,\n+    clippy::cast_possible_truncation,\n )]\n \n extern crate rustc_apfloat;"}, {"sha": "9182b2a72173b912dc84e4fcaada16c7d8f92dd7", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -171,9 +171,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             );\n         }\n \n-        let lineno: u32 = lo.line as u32;\n+        // `u32` is not enough to fit line/colno, which can be `usize`. It seems unlikely that a\n+        // file would have more than 2^32 lines or columns, but whatever, just default to 0.\n+        let lineno: u32 = u32::try_from(lo.line).unwrap_or(0);\n         // `lo.col` is 0-based - add 1 to make it 1-based for the caller.\n-        let colno: u32 = lo.col.0 as u32 + 1;\n+        let colno: u32 = u32::try_from(lo.col.0 + 1).unwrap_or(0);\n \n         let dest = this.force_allocation(dest)?;\n         if let ty::Adt(adt, _) = dest.layout.ty.kind() {"}, {"sha": "208e7ea788f7dbf2c880b6916d09291b1af27f85", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -82,8 +82,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let align = this.min_align(size, kind);\n             let ptr = this.allocate_ptr(Size::from_bytes(size), align, kind.into())?;\n             if zero_init {\n-                // We just allocated this, the access is definitely in-bounds.\n-                this.write_bytes_ptr(ptr.into(), iter::repeat(0u8).take(size as usize)).unwrap();\n+                // We just allocated this, the access is definitely in-bounds and fits into our address space.\n+                this.write_bytes_ptr(\n+                    ptr.into(),\n+                    iter::repeat(0u8).take(usize::try_from(size).unwrap()),\n+                )\n+                .unwrap();\n             }\n             Ok(ptr.into())\n         }\n@@ -529,7 +533,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n-                #[allow(clippy::cast_sign_loss)]\n+                #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;\n \n                 if let Some(idx) = this\n@@ -550,7 +554,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n-                #[allow(clippy::cast_sign_loss)]\n+                #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;\n \n                 let idx = this"}, {"sha": "4c2d08ffceabce8d6f29b88958a4fa2652ef41ed", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -117,10 +117,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let byte_count = ty_layout.size.checked_mul(count, this).ok_or_else(|| {\n                     err_ub_format!(\"overflow computing total size of `{intrinsic_name}`\")\n                 })?;\n-                this.write_bytes_ptr(\n-                    ptr,\n-                    iter::repeat(val_byte).take(byte_count.bytes() as usize),\n-                )?;\n+                this.write_bytes_ptr(ptr, iter::repeat(val_byte).take(byte_count.bytes_usize()))?;\n             }\n \n             // Floating-point operations"}, {"sha": "dc31237a3199751ed18d67313f5c000a995775e4", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -785,8 +785,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             trace!(\"read: FD mapped to {:?}\", file_descriptor);\n             // We want to read at most `count` bytes. We are sure that `count` is not negative\n             // because it was a target's `usize`. Also we are sure that its smaller than\n-            // `usize::MAX` because it is a host's `isize`.\n-            let mut bytes = vec![0; count as usize];\n+            // `usize::MAX` because it is bounded by the host's `isize`.\n+            let mut bytes = vec![0; usize::try_from(count).unwrap()];\n             // `File::read` never returns a value larger than `count`,\n             // so this cannot fail.\n             let result ="}, {"sha": "eab5f99c8785170a055b3557515cc5a0375e4e9a", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -84,7 +84,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         io::stderr().write(buf_cont)\n                     };\n-                    res.ok().map(|n| n as u32)\n+                    // We write at most `n` bytes, which is a `u32`, so we cannot have written more than that.\n+                    res.ok().map(|n| u32::try_from(n).unwrap())\n                 } else {\n                     throw_unsup_format!(\n                         \"on Windows, writing to anything except stdout/stderr is not supported\""}, {"sha": "29afe52cafd6c003b0c9a494fdc5472975f82c1f", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6034862d0a22c7337eb428c67fcdb23b9168ae/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=7f6034862d0a22c7337eb428c67fcdb23b9168ae", "patch": "@@ -116,7 +116,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Initialize with `0`.\n                 this.write_bytes_ptr(\n                     system_info.ptr,\n-                    iter::repeat(0u8).take(system_info.layout.size.bytes() as usize),\n+                    iter::repeat(0u8).take(system_info.layout.size.bytes_usize()),\n                 )?;\n                 // Set selected fields.\n                 let word_layout = this.machine.layouts.u16;"}]}