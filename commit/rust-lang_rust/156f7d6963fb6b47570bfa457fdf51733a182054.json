{"sha": "156f7d6963fb6b47570bfa457fdf51733a182054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NmY3ZDY5NjNmYjZiNDc1NzBiZmE0NTdmZGY1MTczM2ExODIwNTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-17T17:50:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T17:50:08Z"}, "message": "Merge #6553\n\n6553: Auto imports in completion r=matklad a=SomeoneToIgnore\n\n![completion](https://user-images.githubusercontent.com/2690773/99155339-ae4fb380-26bf-11eb-805a-655b1706ce70.gif)\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/1062 but does not handle the completion order, since it's a separate task for https://github.com/rust-analyzer/rust-analyzer/issues/4922 , https://github.com/rust-analyzer/rust-analyzer/issues/4922 and maybe something else.\r\n\r\n2 quirks in the current implementation:\r\n\r\n* traits are not auto imported during method completion\r\n\r\nIf I understand the current situation right, we cannot search for traits by a **part** of a method name, we need a full name with correct case to get a trait for it.\r\n\r\n* VSCode (?) autocompletion is not as rigid as in Intellij Rust as you can notice on the animation.\r\n\r\nIntellij is able to refresh the completions on every new symbol added, yet VS Code does not query the completions on every symbol for me.\r\nWith a few debug prints placed in RA, I've observed the following behaviour: after the first set of completion suggestions is received, next symbol input does not trigger a server request, if the completions contain this symbol.\r\nWhen more symbols added, the existing completion suggestions are filtered out until none are left and only then, on the next symbol it queries for completions.\r\nIt seems like the only alternative to get an updated set of results is to manually retrigger it with Esc and Ctrl + Space.\r\n\r\nDespite the eerie latter bullet, the completion seems to work pretty fine and fast nontheless, but if you have any ideas on how to make it more smooth, I'll gladly try it out.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "1070543fd0be92d3ab720bc297962a5dad5e64e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1070543fd0be92d3ab720bc297962a5dad5e64e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156f7d6963fb6b47570bfa457fdf51733a182054", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftA1QCRBK7hj4Ov3rIwAAdHIIAIoaCwrQ4cDfGNwwDjyJvioe\n91gheK0MxP+6Rgij8VhzPeLSrbucLqUkzggv6Ag7m32Pc38BwKR/BRzIXxLNohMM\n9TTmwF156eUoVxKOF/q28Jez1rWEUqs6S1W/yPlup9YxWNlW14F6ruEBy0Wyf2a8\nPia3vMhIR2Xp2TA2IHFuaUjIS1CvH2q30Y+c+Ue6YldEhga20iwSkjk0m0cZPh7a\nYdTQSGuzLQ+5f4qYPMgu9r/JFd1UW6yP48evIi4Lp1YH8avSGin2MLDMJSytqIDy\n+wp9CqMYFQAdUALAFe4jdzp+JWUen4ulfYCyw/BqWtZ1oXXhv02x37juZdI4M1Y=\n=pFKY\n-----END PGP SIGNATURE-----\n", "payload": "tree 1070543fd0be92d3ab720bc297962a5dad5e64e8\nparent f4b4f17662a7a1c80743b3108bb0da28b0fe47e5\nparent 16f0b2fdde2fba8f45cc18a8de11b45751c0f923\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605635408 +0000\ncommitter GitHub <noreply@github.com> 1605635408 +0000\n\nMerge #6553\n\n6553: Auto imports in completion r=matklad a=SomeoneToIgnore\n\n![completion](https://user-images.githubusercontent.com/2690773/99155339-ae4fb380-26bf-11eb-805a-655b1706ce70.gif)\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/1062 but does not handle the completion order, since it's a separate task for https://github.com/rust-analyzer/rust-analyzer/issues/4922 , https://github.com/rust-analyzer/rust-analyzer/issues/4922 and maybe something else.\r\n\r\n2 quirks in the current implementation:\r\n\r\n* traits are not auto imported during method completion\r\n\r\nIf I understand the current situation right, we cannot search for traits by a **part** of a method name, we need a full name with correct case to get a trait for it.\r\n\r\n* VSCode (?) autocompletion is not as rigid as in Intellij Rust as you can notice on the animation.\r\n\r\nIntellij is able to refresh the completions on every new symbol added, yet VS Code does not query the completions on every symbol for me.\r\nWith a few debug prints placed in RA, I've observed the following behaviour: after the first set of completion suggestions is received, next symbol input does not trigger a server request, if the completions contain this symbol.\r\nWhen more symbols added, the existing completion suggestions are filtered out until none are left and only then, on the next symbol it queries for completions.\r\nIt seems like the only alternative to get an updated set of results is to manually retrigger it with Esc and Ctrl + Space.\r\n\r\nDespite the eerie latter bullet, the completion seems to work pretty fine and fast nontheless, but if you have any ideas on how to make it more smooth, I'll gladly try it out.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156f7d6963fb6b47570bfa457fdf51733a182054", "html_url": "https://github.com/rust-lang/rust/commit/156f7d6963fb6b47570bfa457fdf51733a182054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156f7d6963fb6b47570bfa457fdf51733a182054/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b4f17662a7a1c80743b3108bb0da28b0fe47e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b4f17662a7a1c80743b3108bb0da28b0fe47e5", "html_url": "https://github.com/rust-lang/rust/commit/f4b4f17662a7a1c80743b3108bb0da28b0fe47e5"}, {"sha": "16f0b2fdde2fba8f45cc18a8de11b45751c0f923", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f0b2fdde2fba8f45cc18a8de11b45751c0f923", "html_url": "https://github.com/rust-lang/rust/commit/16f0b2fdde2fba8f45cc18a8de11b45751c0f923"}], "stats": {"total": 465, "additions": 369, "deletions": 96}, "files": [{"sha": "b236d69cc52c2f42f5fdab0ad44bb33f9a90e939", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -255,6 +255,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"assists\",\n  \"base_db\",\n+ \"either\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\","}, {"sha": "d665837a2f3bad0b4b8279ca1ca16f2cfdac8fda", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -98,7 +98,8 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let range = ctx.sema.original_range(import_assets.syntax_under_caret()).range;\n     let group = import_group_message(import_assets.import_candidate());\n-    let scope = ImportScope::find_insert_use_container(import_assets.syntax_under_caret(), ctx)?;\n+    let scope =\n+        ImportScope::find_insert_use_container(import_assets.syntax_under_caret(), &ctx.sema)?;\n     for (import, _) in proposed_imports {\n         acc.add_group(\n             &group,"}, {"sha": "cac77c49bbc46fdc601245e4881f945e1689e1ea", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -143,8 +143,7 @@ fn insert_import(\n     if let Some(mut mod_path) = mod_path {\n         mod_path.segments.pop();\n         mod_path.segments.push(variant_hir_name.clone());\n-        let scope = ImportScope::find_insert_use_container(scope_node, ctx)?;\n-\n+        let scope = ImportScope::find_insert_use_container(scope_node, &ctx.sema)?;\n         *rewriter += insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use.merge);\n     }\n     Some(())"}, {"sha": "453a6cebfb8cbca4082fe0433f6084ee451840bf", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -62,19 +62,21 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n-    let found_traits = imports_locator::find_imports(&ctx.sema, current_crate, trait_token.text())\n-        .into_iter()\n-        .filter_map(|candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n-            either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n-            _ => None,\n-        })\n-        .flat_map(|trait_| {\n-            current_module\n-                .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n-                .as_ref()\n-                .map(mod_path_to_ast)\n-                .zip(Some(trait_))\n-        });\n+    let found_traits =\n+        imports_locator::find_exact_imports(&ctx.sema, current_crate, trait_token.text())\n+            .filter_map(\n+                |candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n+                    either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n+                    _ => None,\n+                },\n+            )\n+            .flat_map(|trait_| {\n+                current_module\n+                    .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n+                    .as_ref()\n+                    .map(mod_path_to_ast)\n+                    .zip(Some(trait_))\n+            });\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {"}, {"sha": "a66db9ae3a15f271b78fc8a9a7e58edda1b1ae9e", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn replace_qualified_name_with_use(\n     }\n \n     let target = path.syntax().text_range();\n-    let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n+    let scope = ImportScope::find_insert_use_container(path.syntax(), &ctx.sema)?;\n     let syntax = scope.as_syntax_node();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),"}, {"sha": "66c0cdd5faf37b7ea82d0898e6528044922a40cc", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -22,8 +22,7 @@ use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n };\n \n-pub use insert_use::MergeBehaviour;\n-pub(crate) use insert_use::{insert_use, ImportScope};\n+pub use insert_use::{insert_use, ImportScope, MergeBehaviour};\n \n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n     let mut segments = Vec::new();"}, {"sha": "ff5c0e78ee8c20f2d2ea70859f17b4a925bebc3d", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -179,21 +179,25 @@ impl ImportAssets {\n             }\n         };\n \n-        let mut res = imports_locator::find_imports(sema, current_crate, &self.get_search_query())\n-            .into_iter()\n-            .filter_map(filter)\n-            .filter_map(|candidate| {\n-                let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n-                if let Some(prefix_kind) = prefixed {\n-                    self.module_with_name_to_import.find_use_path_prefixed(db, item, prefix_kind)\n-                } else {\n-                    self.module_with_name_to_import.find_use_path(db, item)\n-                }\n-                .map(|path| (path, item))\n-            })\n-            .filter(|(use_path, _)| !use_path.segments.is_empty())\n-            .take(20)\n-            .collect::<Vec<_>>();\n+        let mut res =\n+            imports_locator::find_exact_imports(sema, current_crate, &self.get_search_query())\n+                .filter_map(filter)\n+                .filter_map(|candidate| {\n+                    let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n+                    if let Some(prefix_kind) = prefixed {\n+                        self.module_with_name_to_import.find_use_path_prefixed(\n+                            db,\n+                            item,\n+                            prefix_kind,\n+                        )\n+                    } else {\n+                        self.module_with_name_to_import.find_use_path(db, item)\n+                    }\n+                    .map(|path| (path, item))\n+                })\n+                .filter(|(use_path, _)| use_path.len() > 1)\n+                .take(20)\n+                .collect::<Vec<_>>();\n         res.sort_by_key(|(path, _)| path.clone());\n         res\n     }"}, {"sha": "423782a0e0e728f426dd3bbe881fe00572ebbd07", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,6 +1,8 @@\n //! Handle syntactic aspects of inserting a new `use`.\n use std::{cmp::Ordering, iter::successors};\n \n+use hir::Semantics;\n+use ide_db::RootDatabase;\n use itertools::{EitherOrBoth, Itertools};\n use syntax::{\n     algo::SyntaxRewriter,\n@@ -13,8 +15,8 @@ use syntax::{\n };\n use test_utils::mark;\n \n-#[derive(Debug)]\n-pub(crate) enum ImportScope {\n+#[derive(Debug, Clone)]\n+pub enum ImportScope {\n     File(ast::SourceFile),\n     Module(ast::ItemList),\n }\n@@ -31,14 +33,14 @@ impl ImportScope {\n     }\n \n     /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n-    pub(crate) fn find_insert_use_container(\n+    pub fn find_insert_use_container(\n         position: &SyntaxNode,\n-        ctx: &crate::assist_context::AssistContext,\n+        sema: &Semantics<'_, RootDatabase>,\n     ) -> Option<Self> {\n-        ctx.sema.ancestors_with_macros(position.clone()).find_map(Self::from)\n+        sema.ancestors_with_macros(position.clone()).find_map(Self::from)\n     }\n \n-    pub(crate) fn as_syntax_node(&self) -> &SyntaxNode {\n+    pub fn as_syntax_node(&self) -> &SyntaxNode {\n         match self {\n             ImportScope::File(file) => file.syntax(),\n             ImportScope::Module(item_list) => item_list.syntax(),\n@@ -88,7 +90,7 @@ fn is_inner_comment(token: SyntaxToken) -> bool {\n }\n \n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n-pub(crate) fn insert_use<'a>(\n+pub fn insert_use<'a>(\n     scope: &ImportScope,\n     path: ast::Path,\n     merge: Option<MergeBehaviour>,"}, {"sha": "e7df9d955656bcf1b450ed2358b35a5254c42faa", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -13,6 +13,7 @@ doctest = false\n itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n+either = \"1.6.1\"\n \n assists = { path = \"../assists\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "9b7d6c5809131b2819176037086402d516113267", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -90,7 +90,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = render_macro(RenderContext::new(ctx), name, macro_) {\n+        if let Some(item) = render_macro(RenderContext::new(ctx), None, name, macro_) {\n             self.add(item);\n         }\n     }\n@@ -101,7 +101,7 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let item = render_fn(RenderContext::new(ctx), local_name, func);\n+        let item = render_fn(RenderContext::new(ctx), None, local_name, func);\n         self.add(item)\n     }\n \n@@ -123,7 +123,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         path: ModPath,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), None, variant, Some(path));\n+        let item = render_enum_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n         self.add(item);\n     }\n \n@@ -133,7 +133,7 @@ impl Completions {\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), local_name, variant, None);\n+        let item = render_enum_variant(RenderContext::new(ctx), None, local_name, variant, None);\n         self.add(item);\n     }\n }"}, {"sha": "86c143b637f713bfbee8e25c574b1108947a26db", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,10 +1,16 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n+use assists::utils::ImportScope;\n+use either::Either;\n use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use ide_db::imports_locator;\n use syntax::AstNode;\n use test_utils::mark;\n \n-use crate::{CompletionContext, Completions};\n+use crate::{\n+    render::{render_resolution_with_import, RenderContext},\n+    CompletionContext, Completions,\n+};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n@@ -37,6 +43,8 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         }\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n+\n+    fuzzy_completion(acc, ctx).unwrap_or_default()\n }\n \n fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n@@ -63,6 +71,45 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n     }\n }\n \n+fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+    let _p = profile::span(\"fuzzy_completion\");\n+    let current_module = ctx.scope.module()?;\n+    let anchor = ctx.name_ref_syntax.as_ref()?;\n+    let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n+\n+    let potential_import_name = ctx.token.to_string();\n+\n+    let possible_imports =\n+        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, 400)\n+            .filter_map(|import_candidate| match import_candidate {\n+                // when completing outside the use declaration, modules are pretty useless\n+                // and tend to bloat the completion suggestions a lot\n+                Either::Left(ModuleDef::Module(_)) => None,\n+                Either::Left(module_def) => Some((\n+                    current_module.find_use_path(ctx.db, module_def)?,\n+                    ScopeDef::ModuleDef(module_def),\n+                )),\n+                Either::Right(macro_def) => Some((\n+                    current_module.find_use_path(ctx.db, macro_def)?,\n+                    ScopeDef::MacroDef(macro_def),\n+                )),\n+            })\n+            .filter(|(mod_path, _)| mod_path.len() > 1)\n+            .filter_map(|(import_path, definition)| {\n+                render_resolution_with_import(\n+                    RenderContext::new(ctx),\n+                    import_path.clone(),\n+                    import_scope.clone(),\n+                    ctx.config.merge,\n+                    &definition,\n+                )\n+            })\n+            .take(20);\n+\n+    acc.add_all(possible_imports);\n+    Some(())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -676,4 +723,85 @@ impl My<|>\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn function_fuzzy_completion() {\n+        check_edit(\n+            \"stdin\",\n+            r#\"\n+//- /lib.rs crate:dep\n+pub mod io {\n+    pub fn stdin() {}\n+};\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    stdi<|>\n+}\n+\"#,\n+            r#\"\n+use dep::io::stdin;\n+\n+fn main() {\n+    stdin()$0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_fuzzy_completion() {\n+        check_edit(\n+            \"macro_with_curlies!\",\n+            r#\"\n+//- /lib.rs crate:dep\n+/// Please call me as macro_with_curlies! {}\n+#[macro_export]\n+macro_rules! macro_with_curlies {\n+    () => {}\n+}\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    curli<|>\n+}\n+\"#,\n+            r#\"\n+use dep::macro_with_curlies;\n+\n+fn main() {\n+    macro_with_curlies! {$0}\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_fuzzy_completion() {\n+        check_edit(\n+            \"ThirdStruct\",\n+            r#\"\n+//- /lib.rs crate:dep\n+pub struct FirstStruct;\n+pub mod some_module {\n+    pub struct SecondStruct;\n+    pub struct ThirdStruct;\n+}\n+\n+//- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n+fn main() {\n+    this<|>\n+}\n+\"#,\n+            r#\"\n+use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n+\n+fn main() {\n+    ThirdStruct\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "82874ff256a610cb37a4388bc69ea9a40fea70e7", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -4,12 +4,15 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n+use assists::utils::MergeBehaviour;\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n     pub enable_postfix_completions: bool,\n     pub add_call_parenthesis: bool,\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n+    pub merge: Option<MergeBehaviour>,\n }\n \n impl CompletionConfig {\n@@ -30,6 +33,7 @@ impl Default for CompletionConfig {\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n             snippet_cap: Some(SnippetCap { _private: () }),\n+            merge: Some(MergeBehaviour::Full),\n         }\n     }\n }"}, {"sha": "b13c3f37628a608a5875b6520e8aecbb69034353", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -2,8 +2,9 @@\n \n use std::fmt;\n \n-use hir::{Documentation, Mutability};\n-use syntax::TextRange;\n+use assists::utils::{insert_use, mod_path_to_ast, ImportScope, MergeBehaviour};\n+use hir::{Documentation, ModPath, Mutability};\n+use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -31,6 +32,7 @@ pub struct CompletionItem {\n     ///\n     /// Typically, replaces `source_range` with new identifier.\n     text_edit: TextEdit,\n+\n     insert_text_format: InsertTextFormat,\n \n     /// What item (struct, function, etc) are we completing.\n@@ -199,8 +201,10 @@ impl CompletionItem {\n             trigger_call_info: None,\n             score: None,\n             ref_match: None,\n+            import_data: None,\n         }\n     }\n+\n     /// What user sees in pop-up in the UI.\n     pub fn label(&self) -> &str {\n         &self.label\n@@ -257,6 +261,7 @@ impl CompletionItem {\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -273,23 +278,50 @@ pub(crate) struct Builder {\n \n impl Builder {\n     pub(crate) fn build(self) -> CompletionItem {\n-        let label = self.label;\n-        let text_edit = match self.text_edit {\n+        let mut label = self.label;\n+        let mut lookup = self.lookup;\n+        let mut insert_text = self.insert_text;\n+        let mut text_edits = TextEdit::builder();\n+\n+        if let Some((import_path, import_scope, merge_behaviour)) = self.import_data {\n+            let import = mod_path_to_ast(&import_path);\n+            let mut import_path_without_last_segment = import_path;\n+            let _ = import_path_without_last_segment.segments.pop();\n+\n+            if !import_path_without_last_segment.segments.is_empty() {\n+                if lookup.is_none() {\n+                    lookup = Some(label.clone());\n+                }\n+                if insert_text.is_none() {\n+                    insert_text = Some(label.clone());\n+                }\n+                label = format!(\"{}::{}\", import_path_without_last_segment, label);\n+            }\n+\n+            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n+            if let Some(old_ast) = rewriter.rewrite_root() {\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n+            }\n+        }\n+\n+        let original_edit = match self.text_edit {\n             Some(it) => it,\n-            None => TextEdit::replace(\n-                self.source_range,\n-                self.insert_text.unwrap_or_else(|| label.clone()),\n-            ),\n+            None => {\n+                TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n+            }\n         };\n \n+        let mut resulting_edit = text_edits.finish();\n+        resulting_edit.union(original_edit).expect(\"Failed to unite text edits\");\n+\n         CompletionItem {\n             source_range: self.source_range,\n             label,\n             insert_text_format: self.insert_text_format,\n-            text_edit,\n+            text_edit: resulting_edit,\n             detail: self.detail,\n             documentation: self.documentation,\n-            lookup: self.lookup,\n+            lookup,\n             kind: self.kind,\n             completion_kind: self.completion_kind,\n             deprecated: self.deprecated.unwrap_or(false),\n@@ -358,6 +390,13 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n+    pub(crate) fn import_data(\n+        mut self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> Builder {\n+        self.import_data = import_data;\n+        self\n+    }\n     pub(crate) fn set_ref_match(\n         mut self,\n         ref_match: Option<(Mutability, CompletionScore)>,"}, {"sha": "e892d4de8590a6c76d00f452a4ff5baa11e3b737", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -9,7 +9,8 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use hir::{Documentation, HasAttrs, HirDisplay, Mutability, ScopeDef, Type};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::mark;\n@@ -42,7 +43,22 @@ pub(crate) fn render_resolution<'a>(\n     local_name: String,\n     resolution: &ScopeDef,\n ) -> Option<CompletionItem> {\n-    Render::new(ctx).render_resolution(local_name, resolution)\n+    Render::new(ctx).render_resolution(local_name, None, resolution)\n+}\n+\n+pub(crate) fn render_resolution_with_import<'a>(\n+    ctx: RenderContext<'a>,\n+    import: ModPath,\n+    import_scope: ImportScope,\n+    merge_behaviour: Option<MergeBehaviour>,\n+    resolution: &ScopeDef,\n+) -> Option<CompletionItem> {\n+    let local_name = import.segments.last()?.to_string();\n+    Render::new(ctx).render_resolution(\n+        local_name,\n+        Some((import, import_scope, merge_behaviour)),\n+        resolution,\n+    )\n }\n \n /// Interface for data and methods required for items rendering.\n@@ -131,6 +147,7 @@ impl<'a> Render<'a> {\n     fn render_resolution(\n         self,\n         local_name: String,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n         use hir::ModuleDef::*;\n@@ -142,15 +159,15 @@ impl<'a> Render<'a> {\n \n         let kind = match resolution {\n             ScopeDef::ModuleDef(Function(func)) => {\n-                let item = render_fn(self.ctx, Some(local_name), *func);\n+                let item = render_fn(self.ctx, import_data, Some(local_name), *func);\n                 return Some(item);\n             }\n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item = render_enum_variant(self.ctx, Some(local_name), *var, None);\n+                let item = render_enum_variant(self.ctx, import_data, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n-                let item = render_macro(self.ctx, local_name, *mac);\n+                let item = render_macro(self.ctx, import_data, local_name, *mac);\n                 return item;\n             }\n \n@@ -175,6 +192,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n+                .import_data(import_data)\n                 .build();\n                 return Some(item);\n             }\n@@ -227,7 +245,12 @@ impl<'a> Render<'a> {\n             }\n         }\n \n-        let item = item.kind(kind).set_documentation(docs).set_ref_match(ref_match).build();\n+        let item = item\n+            .kind(kind)\n+            .import_data(import_data)\n+            .set_documentation(docs)\n+            .set_ref_match(ref_match)\n+            .build();\n         Some(item)\n     }\n \n@@ -425,6 +448,28 @@ fn main() { let _: m::Spam = S<|> }\n                         insert: \"m\",\n                         kind: Module,\n                     },\n+                    CompletionItem {\n+                        label: \"m::Spam\",\n+                        source_range: 75..76,\n+                        text_edit: TextEdit {\n+                            indels: [\n+                                Indel {\n+                                    insert: \"use m::Spam;\",\n+                                    delete: 0..0,\n+                                },\n+                                Indel {\n+                                    insert: \"\\n\\n\",\n+                                    delete: 0..0,\n+                                },\n+                                Indel {\n+                                    insert: \"Spam\",\n+                                    delete: 75..76,\n+                                },\n+                            ],\n+                        },\n+                        kind: Enum,\n+                        lookup: \"Spam\",\n+                    },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,"}, {"sha": "6070e9b1d7935033dfa8cfcb7a8070db8b1b2287", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,5 +1,6 @@\n //! Renderer for `enum` variants.\n \n+use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n use itertools::Itertools;\n use test_utils::mark;\n@@ -11,11 +12,12 @@ use crate::{\n \n pub(crate) fn render_enum_variant<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     local_name: Option<String>,\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n-    EnumVariantRender::new(ctx, local_name, variant, path).render()\n+    EnumVariantRender::new(ctx, local_name, variant, path).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -60,7 +62,10 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    fn render(self) -> CompletionItem {\n+    fn render(\n+        self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -69,6 +74,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n+        .import_data(import_data)\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "9dd5cd18c569031b9ffee4abd0aa327e0768feac", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for function calls.\n \n-use hir::{HasSource, Type};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{HasSource, ModPath, Type};\n use syntax::{ast::Fn, display::function_declaration};\n \n use crate::{\n@@ -10,10 +11,11 @@ use crate::{\n \n pub(crate) fn render_fn<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n-    FunctionRender::new(ctx, local_name, fn_).render()\n+    FunctionRender::new(ctx, local_name, fn_).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -36,14 +38,18 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, fn_, ast_node }\n     }\n \n-    fn render(self) -> CompletionItem {\n+    fn render(\n+        self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.fn_))\n             .set_deprecated(self.ctx.is_deprecated(self.fn_))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n+            .import_data(import_data)\n             .build()\n     }\n "}, {"sha": "fead59e41c09bafed1495af05a3efdd751741892", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for macro invocations.\n \n-use hir::{Documentation, HasSource};\n+use assists::utils::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasSource, ModPath};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n@@ -11,10 +12,11 @@ use crate::{\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n+    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n-    MacroRender::new(ctx, name, macro_).render()\n+    MacroRender::new(ctx, name, macro_).render(import_data)\n }\n \n #[derive(Debug)]\n@@ -36,7 +38,10 @@ impl<'a> MacroRender<'a> {\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    fn render(&self) -> Option<CompletionItem> {\n+    fn render(\n+        &self,\n+        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    ) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {\n@@ -48,6 +53,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n+                .import_data(import_data)\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "37ed092ad0ad43ed6c70acfc914be095a91fb89d", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -110,15 +110,9 @@ impl Crate {\n     pub fn query_external_importables(\n         self,\n         db: &dyn DefDatabase,\n-        query: &str,\n+        query: import_map::Query,\n     ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n-        import_map::search_dependencies(\n-            db,\n-            self.into(),\n-            import_map::Query::new(query).anchor_end().case_sensitive().limit(40),\n-        )\n-        .into_iter()\n-        .map(|item| match item {\n+        import_map::search_dependencies(db, self.into(), query).into_iter().map(|item| match item {\n             ItemInNs::Types(mod_id) | ItemInNs::Values(mod_id) => Either::Left(mod_id.into()),\n             ItemInNs::Macros(mac_id) => Either::Right(mac_id.into()),\n         })"}, {"sha": "5fea25ef1b710b7e732e0a0c99196757fbc29e92", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -49,6 +49,7 @@ pub use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     find_path::PrefixKind,\n+    import_map,\n     item_scope::ItemInNs,\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},"}, {"sha": "9d8ea7368d3a5141ae14dff7d03f18b45917e3a7", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -1,36 +1,70 @@\n //! This module contains an import search funcionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n-use hir::{Crate, MacroDef, ModuleDef, Semantics};\n+use hir::{import_map, Crate, MacroDef, ModuleDef, Semantics};\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n     defs::{Definition, NameClass},\n-    symbol_index::{self, FileSymbol, Query},\n+    symbol_index::{self, FileSymbol},\n     RootDatabase,\n };\n use either::Either;\n use rustc_hash::FxHashSet;\n \n-pub fn find_imports<'a>(\n+pub fn find_exact_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n     name_to_import: &str,\n-) -> Vec<Either<ModuleDef, MacroDef>> {\n-    let _p = profile::span(\"search_for_imports\");\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_exact_imports\");\n+    find_imports(\n+        sema,\n+        krate,\n+        {\n+            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n+            local_query.exact();\n+            local_query.limit(40);\n+            local_query\n+        },\n+        import_map::Query::new(name_to_import).anchor_end().case_sensitive().limit(40),\n+    )\n+}\n+\n+pub fn find_similar_imports<'a>(\n+    sema: &Semantics<'a, RootDatabase>,\n+    krate: Crate,\n+    name_to_import: &str,\n+    limit: usize,\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_similar_imports\");\n+    find_imports(\n+        sema,\n+        krate,\n+        {\n+            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n+            local_query.limit(limit);\n+            local_query\n+        },\n+        import_map::Query::new(name_to_import).limit(limit),\n+    )\n+}\n+\n+fn find_imports<'a>(\n+    sema: &Semantics<'a, RootDatabase>,\n+    krate: Crate,\n+    local_query: symbol_index::Query,\n+    external_query: import_map::Query,\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+    let _p = profile::span(\"find_similar_imports\");\n     let db = sema.db;\n \n     // Query dependencies first.\n     let mut candidates: FxHashSet<_> =\n-        krate.query_external_importables(db, name_to_import).collect();\n+        krate.query_external_importables(db, external_query).collect();\n \n     // Query the local crate using the symbol index.\n-    let local_results = {\n-        let mut query = Query::new(name_to_import.to_string());\n-        query.exact();\n-        query.limit(40);\n-        symbol_index::crate_symbols(db, krate.into(), query)\n-    };\n+    let local_results = symbol_index::crate_symbols(db, krate.into(), local_query);\n \n     candidates.extend(\n         local_results\n@@ -43,7 +77,7 @@ pub fn find_imports<'a>(\n             }),\n     );\n \n-    candidates.into_iter().collect()\n+    candidates.into_iter()\n }\n \n fn get_name_definition<'a>("}, {"sha": "5fc6800cf2fd9a6e934f73ed325ac8018470c1b8", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -294,10 +294,6 @@ impl Config {\n             max_length: data.inlayHints_maxLength,\n         };\n \n-        self.completion.enable_postfix_completions = data.completion_postfix_enable;\n-        self.completion.add_call_parenthesis = data.completion_addCallParenthesis;\n-        self.completion.add_call_argument_snippets = data.completion_addCallArgumentSnippets;\n-\n         self.assist.insert_use.merge = match data.assist_importMergeBehaviour {\n             MergeBehaviourDef::None => None,\n             MergeBehaviourDef::Full => Some(MergeBehaviour::Full),\n@@ -309,6 +305,11 @@ impl Config {\n             ImportPrefixDef::BySelf => PrefixKind::BySelf,\n         };\n \n+        self.completion.enable_postfix_completions = data.completion_postfix_enable;\n+        self.completion.add_call_parenthesis = data.completion_addCallParenthesis;\n+        self.completion.add_call_argument_snippets = data.completion_addCallArgumentSnippets;\n+        self.completion.merge = self.assist.insert_use.merge;\n+\n         self.call_info_full = data.callInfo_full;\n \n         self.lens = LensConfig {"}, {"sha": "118e7276f2b2e700ceba5a2b3c60ffdd69a97e79", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f7d6963fb6b47570bfa457fdf51733a182054/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=156f7d6963fb6b47570bfa457fdf51733a182054", "patch": "@@ -573,7 +573,7 @@ pub(crate) fn handle_completion(\n         .flat_map(|item| to_proto::completion_item(&line_index, line_endings, item))\n         .collect();\n \n-    let completion_list = lsp_types::CompletionList { is_incomplete: false, items };\n+    let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n }\n "}]}