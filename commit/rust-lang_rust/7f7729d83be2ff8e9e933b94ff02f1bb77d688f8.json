{"sha": "7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNzcyOWQ4M2JlMmZmOGU5ZTkzM2I5NGZmMDJmMWJiNzdkNjg4Zjg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-04T23:32:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-04T23:32:09Z"}, "message": "Don't create impl candidates when obligation contains errors\n\nFixes #72839\n\nIn PR #72621, trait selection was modified to no longer bail out early\nwhen an error type was encountered. This allowed us treat `ty::Error` as\n`Sized`, causing us to avoid emitting a spurious \"not sized\" error after\na type error had already occured.\n\nHowever, this means that we may now try to match an impl candidate\nagainst the error type. Since the error type will unify with almost\nanything, this can cause us to infinitely recurse (eventually triggering\nan overflow) when trying to verify certain `where` clauses.\n\nThis commit causes us to skip generating any impl candidates when an\nerror type is involved.", "tree": {"sha": "25ab52601c9930f70cdfc2f675727046f5d1094b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ab52601c9930f70cdfc2f675727046f5d1094b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7ZhdkACgkQtAh+UQ6Y\nsWR+xRAAleTX5REeV6y7TzONeb9STd7e/Uz5tf+fKygz7gJNxWyO+NamciK/zNJR\nJiwmgySBTTuj1h9Uv17zYvpyi1zy77uimZOU/3CAxKqeAHMoflZ5CSp+VvsfOOnk\nBrROUY1thYZ5CexRxIPqWz6VAT4kypb7WXCJUYVun7lKoYCOT6NF2YFbz3KZM2J+\nJkgA3KKZccFo2Qo78/2EUPezVoGGGuYNXtn39kwyl7pwhksQgznUu8wAUacgA8IP\n6wihNW9bLU6sl+aEUx51mpQKERGKQYFnXH303YSMg5BWlMeDlLcqW4FDgKFXasIA\nbcaZnTGZCQ9SQa4wcNTkUVL0nDtCQiozI82ENmonaOJeLsrzAPR9VTIJq4xgSrUe\na2SGzuOOW8jXrwD8E5EpKdCIg+/WSJQDVOL/kX+lx22oGe1PXmOF0j6TmBXF+IWN\n5UitNfEcQULU9Tpr9wq1fxGxqNXSoNnDbWt2tF0X1zbX3l/T2dX6EklJqvepX9xo\nfLdYulMANF1yEIGaf6DgZDgotVAiH66Y/rJw1e55skkgr4y65n3f18K/hiufoWdZ\nEueG4hpKAxVDWou9KODQY1+XNZym38IhFYk/JFY1HnJ8chqCmgKzByAlmXnZl5kB\n/xrC9ikNQhdq4hiVTpQ1B1qtzxWVZGjU+A1FPIb19pRIvurL0Bw=\n=RI5Q\n-----END PGP SIGNATURE-----", "payload": "tree 25ab52601c9930f70cdfc2f675727046f5d1094b\nparent 3d5d0f898c2f3998e50c2180c6202f193c3acdbc\nauthor Aaron Hill <aa1ronham@gmail.com> 1591313529 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1591313529 -0400\n\nDon't create impl candidates when obligation contains errors\n\nFixes #72839\n\nIn PR #72621, trait selection was modified to no longer bail out early\nwhen an error type was encountered. This allowed us treat `ty::Error` as\n`Sized`, causing us to avoid emitting a spurious \"not sized\" error after\na type error had already occured.\n\nHowever, this means that we may now try to match an impl candidate\nagainst the error type. Since the error type will unify with almost\nanything, this can cause us to infinitely recurse (eventually triggering\nan overflow) when trying to verify certain `where` clauses.\n\nThis commit causes us to skip generating any impl candidates when an\nerror type is involved.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "html_url": "https://github.com/rust-lang/rust/commit/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "html_url": "https://github.com/rust-lang/rust/commit/3d5d0f898c2f3998e50c2180c6202f193c3acdbc"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "2bd0acb3cc0f1e322b41ad0a662b4a489c178969", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "patch": "@@ -331,6 +331,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<(), SelectionError<'tcx>> {\n         debug!(\"assemble_candidates_from_impls(obligation={:?})\", obligation);\n \n+        // Essentially any user-written impl will match with an error type,\n+        // so creating `ImplCandidates` isn't useful. However, we might\n+        // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)\n+        // This helps us avoid overflow: see issue #72839\n+        // Since compilation is already guarnateed to fail, this is just\n+        // to try to show the 'nicest' possible errors to the user.\n+        if obligation.references_error() {\n+            return Ok(());\n+        }\n+\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),"}, {"sha": "6562d228409f3be683fec286d726c5a6b2303f5c", "filename": "src/test/ui/issues/issue-72839-error-overflow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.rs?ref=7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #72839\n+// Tests that we do not overflow during trait selection after\n+// a type error occurs\n+use std::ops::Rem;\n+trait Foo {}\n+struct MyStruct<T>(T);\n+\n+impl<T, U> Rem<MyStruct<T>> for MyStruct<U> where MyStruct<U>: Rem<MyStruct<T>> {\n+    type Output = u8;\n+    fn rem(self, _: MyStruct<T>) -> Self::Output {\n+        panic!()\n+    }\n+}\n+\n+fn main() {}\n+\n+fn foo() {\n+    if missing_var % 8 == 0 {} //~ ERROR cannot find\n+}"}, {"sha": "c4b6f90ca69a31725c34944fdee670e82fb21514", "filename": "src/test/ui/issues/issue-72839-error-overflow.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7729d83be2ff8e9e933b94ff02f1bb77d688f8/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72839-error-overflow.stderr?ref=7f7729d83be2ff8e9e933b94ff02f1bb77d688f8", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `missing_var` in this scope\n+  --> $DIR/issue-72839-error-overflow.rs:18:8\n+   |\n+LL |     if missing_var % 8 == 0 {}\n+   |        ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}