{"sha": "c05ba8a298e904cabcaa1d96367b058537f541e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNWJhOGEyOThlOTA0Y2FiY2FhMWQ5NjM2N2IwNTg1MzdmNTQxZTQ=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-03T07:46:23Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-11T16:40:20Z"}, "message": "Append target-specific tools directory ($(RUST)/bin/rustlib/<triple>/bin/) to PATH during linking,\nso that rustc can invoke them.", "tree": {"sha": "80900fdc7dabcbd2d728ac3956fe33272dfe0efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80900fdc7dabcbd2d728ac3956fe33272dfe0efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05ba8a298e904cabcaa1d96367b058537f541e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05ba8a298e904cabcaa1d96367b058537f541e4", "html_url": "https://github.com/rust-lang/rust/commit/c05ba8a298e904cabcaa1d96367b058537f541e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05ba8a298e904cabcaa1d96367b058537f541e4/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c02af434a7447824b3c0c105c4af57d3d6c50e", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c02af434a7447824b3c0c105c4af57d3d6c50e", "html_url": "https://github.com/rust-lang/rust/commit/76c02af434a7447824b3c0c105c4af57d3d6c50e"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "018bfecd369a7128617b343adc962780b5f112d8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c05ba8a298e904cabcaa1d96367b058537f541e4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05ba8a298e904cabcaa1d96367b058537f541e4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c05ba8a298e904cabcaa1d96367b058537f541e4", "patch": "@@ -32,6 +32,7 @@ use serialize::{json, Encodable};\n \n use std::io;\n use std::io::fs;\n+use std::os;\n use arena::TypedArena;\n use syntax::ast;\n use syntax::attr;\n@@ -258,18 +259,26 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             // dependent dlls. Note that this uses cfg!(windows) as opposed to\n             // targ_cfg because syntax extensions are always loaded for the host\n             // compiler, not for the target.\n+            let mut _old_path = String::new();\n             if cfg!(windows) {\n-                sess.host_filesearch().add_dylib_search_paths();\n+                _old_path = os::getenv(\"PATH\").unwrap_or(_old_path);\n+                let mut new_path = sess.host_filesearch().get_dylib_search_paths();\n+                new_path.push_all_move(os::split_paths(_old_path.as_slice()));\n+                os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 deriving_hash_type_parameter: sess.features.default_type_params.get(),\n                 crate_name: crate_name.to_string(),\n             };\n-            syntax::ext::expand::expand_crate(&sess.parse_sess,\n+            let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,\n                                               macros,\n                                               syntax_exts,\n-                                              krate)\n+                                              krate);\n+            if cfg!(windows) {\n+                os::setenv(\"PATH\", _old_path);\n+            }\n+            ret\n         }\n     );\n \n@@ -509,11 +518,18 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &CrateTranslation,\n                            outputs: &OutputFilenames) {\n+    let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n+    let mut new_path = os::split_paths(old_path.as_slice());\n+    new_path.push_all_move(sess.host_filesearch().get_tools_search_paths());\n+    os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n+\n     time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            outputs,\n                            trans.link.crate_name.as_slice()));\n+\n+    os::setenv(\"PATH\", old_path);\n }\n \n pub fn stop_after_phase_3(sess: &Session) -> bool {"}, {"sha": "bdabb3efb98ba5dbbb9fb3a4cfb424997d3cbec4", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c05ba8a298e904cabcaa1d96367b058537f541e4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05ba8a298e904cabcaa1d96367b058537f541e4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=c05ba8a298e904cabcaa1d96367b058537f541e4", "patch": "@@ -13,7 +13,6 @@\n use std::cell::RefCell;\n use std::os;\n use std::io::fs;\n-use std::dynamic_lib::DynamicLibrary;\n use std::collections::HashSet;\n \n use util::fs as myfs;\n@@ -134,11 +133,24 @@ impl<'a> FileSearch<'a> {\n         }\n     }\n \n-    pub fn add_dylib_search_paths(&self) {\n+    // Returns a list of directories where target-specific dylibs might be located.\n+    pub fn get_dylib_search_paths(&self) -> Vec<Path> {\n+        let mut paths = Vec::new();\n         self.for_each_lib_search_path(|lib_search_path| {\n-            DynamicLibrary::prepend_search_path(lib_search_path);\n+            paths.push(lib_search_path.clone());\n             FileDoesntMatch\n-        })\n+        });\n+        paths\n+    }\n+\n+    // Returns a list of directories where target-specific tool binaries are located.\n+    pub fn get_tools_search_paths(&self) -> Vec<Path> {\n+        let mut p = Path::new(self.sysroot);\n+        p.push(find_libdir(self.sysroot));\n+        p.push(rustlibdir());\n+        p.push(self.triple);\n+        p.push(\"bin\");\n+        vec![p]\n     }\n }\n "}]}