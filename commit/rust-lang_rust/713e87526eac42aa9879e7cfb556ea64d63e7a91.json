{"sha": "713e87526eac42aa9879e7cfb556ea64d63e7a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxM2U4NzUyNmVhYzQyYWE5ODc5ZTdjZmI1NTZlYTY0ZDYzZTdhOTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-04-14T15:30:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-04-14T15:30:31Z"}, "message": "Use new attribute syntax in python files in src/etc too (#13478)", "tree": {"sha": "c94084ee13a07e5dfa52827517629143571f6bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94084ee13a07e5dfa52827517629143571f6bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713e87526eac42aa9879e7cfb556ea64d63e7a91", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713e87526eac42aa9879e7cfb556ea64d63e7a91", "html_url": "https://github.com/rust-lang/rust/commit/713e87526eac42aa9879e7cfb556ea64d63e7a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713e87526eac42aa9879e7cfb556ea64d63e7a91/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e754810c78a25c902b76c74ba8f04d0dcdc6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e754810c78a25c902b76c74ba8f04d0dcdc6f1", "html_url": "https://github.com/rust-lang/rust/commit/e2e754810c78a25c902b76c74ba8f04d0dcdc6f1"}], "stats": {"total": 1214, "additions": 607, "deletions": 607}, "files": [{"sha": "51bec8f4c249b37c10011026a50a10af84b25a5d", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -37,7 +37,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n {error_deriving}"}, {"sha": "d5c74e367340eb3e01c53340202c53ff43bdb27e", "filename": "src/etc/unicode.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -411,8 +411,8 @@ def emit_decomp_module(f, canon, compat, combine):\n \n // The following code was generated by \"src/etc/unicode.py\"\n \n-#[allow(missing_doc)];\n-#[allow(non_uppercase_statics)];\n+#![allow(missing_doc)]\n+#![allow(non_uppercase_statics)]\n \n ''')\n "}, {"sha": "0ff2098e6f234009b083904acc1248efdbd92b12", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -126,7 +126,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n     fn fold_crate(&mut self, krate: ast::Crate) -> ast::Crate {\n         if !no_prelude(krate.attrs.as_slice()) {\n             // only add `use std::prelude::*;` if there wasn't a\n-            // `#[no_implicit_prelude];` at the crate level.\n+            // `#![no_implicit_prelude]` at the crate level.\n             ast::Crate {\n                 module: self.fold_mod(&krate.module),\n                 ..krate\n@@ -138,7 +138,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n \n     fn fold_item(&mut self, item: @ast::Item) -> SmallVector<@ast::Item> {\n         if !no_prelude(item.attrs.as_slice()) {\n-            // only recur if there wasn't `#[no_implicit_prelude];`\n+            // only recur if there wasn't `#![no_implicit_prelude]`\n             // on this item, i.e. this means that the prelude is not\n             // implicitly imported though the whole subtree\n             fold::noop_fold_item(item, self)"}, {"sha": "58a0a5859f9f57c9e5674d5f661e94c0a120f280", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// #[warn(deprecated_mode)];\n+// #![warn(deprecated_mode)]\n \n use middle::ty;\n use middle::ty_fold;"}, {"sha": "f4f4be7172c09ca695889bdef9a425498f3cc8ee", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -250,7 +250,7 @@ strings and instead directly write the output. Under the hood, this function is\n actually invoking the `write` function defined in this module. Example usage is:\n \n ```rust\n-# #[allow(unused_must_use)];\n+# #![allow(unused_must_use)]\n use std::io;\n \n let mut w = io::MemWriter::new();\n@@ -699,7 +699,7 @@ uniform_fn_call_workaround! {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::fmt;\n /// use std::io;\n ///"}, {"sha": "e7d0c03551f79311763a806f8b74896a2341a355", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -125,7 +125,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::{BufferedWriter, File};\n ///\n /// let file = File::open(&Path::new(\"message.txt\"));\n@@ -287,7 +287,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::{BufferedStream, File};\n ///\n /// let file = File::open(&Path::new(\"message.txt\"));"}, {"sha": "11271d71cbeb7fe8fe093c3d73145cedb3282f2d", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -89,7 +89,7 @@ impl Reader for ChanReader {\n /// # Example\n ///\n /// ```\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::ChanWriter;\n ///\n /// let (tx, rx) = channel();"}, {"sha": "c24d67f18cfebf8340a08478bccb81d4aec6bddc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -28,7 +28,7 @@ particular bits of it, etc.\n # Example\n \n ```rust\n-# #[allow(unused_must_use)];\n+# #![allow(unused_must_use)]\n use std::io::{File, fs};\n \n let path = Path::new(\"foo.txt\");\n@@ -162,7 +162,7 @@ impl File {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #[allow(unused_must_use)];\n+    /// # #![allow(unused_must_use)]\n     /// use std::io::File;\n     ///\n     /// let mut f = File::create(&Path::new(\"foo.txt\"));\n@@ -220,7 +220,7 @@ impl File {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::fs;\n ///\n /// let p = Path::new(\"/some/file/path.txt\");\n@@ -290,7 +290,7 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::fs;\n ///\n /// fs::rename(&Path::new(\"foo\"), &Path::new(\"bar\"));\n@@ -314,7 +314,7 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::fs;\n ///\n /// fs::copy(&Path::new(\"foo.txt\"), &Path::new(\"bar.txt\"));\n@@ -364,7 +364,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io;\n /// use std::io::fs;\n ///\n@@ -416,7 +416,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io;\n /// use std::io::fs;\n ///\n@@ -437,7 +437,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::fs;\n ///\n /// let p = Path::new(\"/some/dir\");"}, {"sha": "36e29700c5d6596c626d5b4653a88c481223a525", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -44,7 +44,7 @@ fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64>\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::MemWriter;\n ///\n /// let mut w = MemWriter::new();\n@@ -125,7 +125,7 @@ impl Seek for MemWriter {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::MemReader;\n ///\n /// let mut r = MemReader::new(vec!(0, 1, 2));\n@@ -209,7 +209,7 @@ impl Buffer for MemReader {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::BufWriter;\n ///\n /// let mut buf = [0, ..4];\n@@ -267,7 +267,7 @@ impl<'a> Seek for BufWriter<'a> {\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::BufReader;\n ///\n /// let mut buf = [0, 1, 2, 3];"}, {"sha": "0ee2da7bb7009c33a0b33a4452f40b4c56698f21", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -46,7 +46,7 @@ Some examples of obvious things you might want to do\n * Write a line to a file\n \n     ```rust\n-    # #[allow(unused_must_use)];\n+    # #![allow(unused_must_use)]\n     use std::io::File;\n \n     let mut file = File::create(&Path::new(\"message.txt\"));\n@@ -82,7 +82,7 @@ Some examples of obvious things you might want to do\n * Make a simple TCP client connection and request\n \n     ```rust,should_fail\n-    # #[allow(unused_must_use)];\n+    # #![allow(unused_must_use)]\n     use std::io::net::ip::SocketAddr;\n     use std::io::net::tcp::TcpStream;\n \n@@ -159,7 +159,7 @@ be an error.\n If you wanted to handle the error though you might write:\n \n ```rust\n-# #[allow(unused_must_use)];\n+# #![allow(unused_must_use)]\n use std::io::File;\n \n match File::create(&Path::new(\"diary.txt\")).write(bytes!(\"Met a girl.\\n\")) {"}, {"sha": "49e6bcff8eb277c0a132945d3bf16606452465e3", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -31,7 +31,7 @@ use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n /// # Example\n ///\n /// ```rust\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::net::tcp::TcpStream;\n /// use std::io::net::ip::{Ipv4Addr, SocketAddr};\n ///"}, {"sha": "86d8be494010663e9aad917a721d1723df399dad", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -31,7 +31,7 @@ use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n /// # Example\n ///\n /// ```rust,no_run\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::net::udp::UdpSocket;\n /// use std::io::net::ip::{Ipv4Addr, SocketAddr};\n ///"}, {"sha": "6f48abb31c7121358ebfaa742824e66c2d0d7a4b", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -52,7 +52,7 @@ impl UnixStream {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #[allow(unused_must_use)];\n+    /// # #![allow(unused_must_use)]\n     /// use std::io::net::unix::UnixStream;\n     ///\n     /// let server = Path::new(\"path/to/my/socket\");\n@@ -98,7 +98,7 @@ impl UnixListener {\n     /// ```\n     /// # fn main() {}\n     /// # fn foo() {\n-    /// # #[allow(unused_must_use)];\n+    /// # #![allow(unused_must_use)]\n     /// use std::io::net::unix::UnixListener;\n     /// use std::io::{Listener, Acceptor};\n     ///"}, {"sha": "77a97f4e2590bd0256522791e25ae6dd2eb0a0bf", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -37,7 +37,7 @@ impl PipeStream {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #[allow(unused_must_use)];\n+    /// # #![allow(unused_must_use)]\n     /// extern crate libc;\n     ///\n     /// use std::io::pipe::PipeStream;"}, {"sha": "5f47e2279015770825ca315895ed13cd3a18e859", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -18,7 +18,7 @@ about the stream or terminal to which it is attached.\n # Example\n \n ```rust\n-# #[allow(unused_must_use)];\n+# #![allow(unused_must_use)]\n use std::io;\n \n let mut out = io::stdout();"}, {"sha": "06a6a6da79671f28c285c8e81c61321c6f343a6c", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -29,7 +29,7 @@\n /// # Example\n ///\n /// ```should_fail\n-/// # #[allow(unreachable_code)];\n+/// # #![allow(unreachable_code)]\n /// fail!();\n /// fail!(\"this is a terrible mistake!\");\n /// fail!(4); // fail with the value of 4 to be collected elsewhere\n@@ -188,7 +188,7 @@ macro_rules! format(\n /// # Example\n ///\n /// ```\n-/// # #[allow(unused_must_use)];\n+/// # #![allow(unused_must_use)]\n /// use std::io::MemWriter;\n ///\n /// let mut w = MemWriter::new();"}, {"sha": "fd5319d7e6da89aeb0207cba70b04cce3f1f698a", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"anonexternmod#0.1\"];\n+#![crate_id=\"anonexternmod#0.1\"]\n \n extern crate libc;\n "}, {"sha": "ec48862ff399707c2349e8573144f3bcc716e4fc", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"cci_impl_lib\"];\n+#![crate_id=\"cci_impl_lib\"]\n \n pub trait uint_helpers {\n     fn to(&self, v: uint, f: |uint|);"}, {"sha": "2619ac71d99f674cc9ddc4ca7b3c1157eef37ac4", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"cci_iter_lib\"];\n+#![crate_id=\"cci_iter_lib\"]\n \n #[inline]\n pub fn iter<T>(v: &[T], f: |&T|) {"}, {"sha": "e66e89f34808cc6841f1d91a0961aeb4e5312c3c", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::RefCell;\n "}, {"sha": "e9f82ef94133eac39f7cfa96d5b361011c7d8232", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"cci_no_inline_lib\"];\n+#![crate_id=\"cci_no_inline_lib\"]\n \n \n // same as cci_iter_lib, more-or-less, but not marked inline"}, {"sha": "360ab79c5b4c407f5a094f9ed1c7998748717c9b", "filename": "src/test/auxiliary/changing-crates-a1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fchanging-crates-a1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"a\"];\n+#![crate_id = \"a\"]\n \n pub fn foo<T>() {}"}, {"sha": "650b3ac7dcaa291ade83e5cab582dc373f2618d1", "filename": "src/test/auxiliary/changing-crates-a2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fchanging-crates-a2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"a\"];\n+#![crate_id = \"a\"]\n \n pub fn foo<T>() { println!(\"hello!\"); }\n "}, {"sha": "63bdb889fd00aba162a3b57c56343dd320ce9685", "filename": "src/test/auxiliary/changing-crates-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fchanging-crates-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fchanging-crates-b.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"b\"];\n+#![crate_id = \"b\"]\n \n extern crate a;\n "}, {"sha": "f7b42e05d7f8daeb071dd0951288cdc294141d4a", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-#[crate_id=\"crate_method_reexport_grrrrrrr2\"];\n+#![feature(managed_boxes)]\n+#![crate_id=\"crate_method_reexport_grrrrrrr2\"]\n \n pub use name_pool::add;\n "}, {"sha": "eddedfa36bb301657b77b5b91a4a6a9053eaeead", "filename": "src/test/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve1#0.1\"];\n+#![crate_id=\"crateresolve1#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 10 }"}, {"sha": "48042de0bad45830c9bad3e554e266c09c990fbf", "filename": "src/test/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve1#0.2\"];\n+#![crate_id=\"crateresolve1#0.2\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 20 }"}, {"sha": "c126560fe3eb2cbec9ffbe01433625ecaa4afa40", "filename": "src/test/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve1#0.3\"];\n+#![crate_id=\"crateresolve1#0.3\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 30 }"}, {"sha": "f436e7c95d1bfa37f566a5d4d4fa4907a49f394f", "filename": "src/test/auxiliary/crateresolve2-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve2#0.1\"];\n+#![crate_id=\"crateresolve2#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 10 }"}, {"sha": "1f92ce5943ce5aa1a9052ef582a8a36bdd2e57e6", "filename": "src/test/auxiliary/crateresolve2-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve2#0.2\"];\n+#![crate_id=\"crateresolve2#0.2\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 20 }"}, {"sha": "fe064b7e5e66a904c33584e9a1d7a2c9cd2d1d19", "filename": "src/test/auxiliary/crateresolve2-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve2#0.3\"];\n+#![crate_id=\"crateresolve2#0.3\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 30 }"}, {"sha": "9d00b92182e7b137dd40cb7dba271937a3d0b96a", "filename": "src/test/auxiliary/crateresolve3-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve3#0.1\"];\n+#![crate_id=\"crateresolve3#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 10 }"}, {"sha": "117e585e9ad299b6a83b3a3665590dd5dfe3625c", "filename": "src/test/auxiliary/crateresolve3-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve3#0.2\"];\n+#![crate_id=\"crateresolve3#0.2\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn g() -> int { 20 }"}, {"sha": "dfe1d92c5933b87bc79fe8ff5f9bf25871f585b3", "filename": "src/test/auxiliary/crateresolve4a-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve4a#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve4a#0.1\"]\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 10 }"}, {"sha": "196751e99fa8900223adc6ff135afc4c3ebcb566", "filename": "src/test/auxiliary/crateresolve4a-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve4a#0.2\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve4a#0.2\"]\n+#![crate_type = \"lib\"]\n \n pub fn g() -> int { 20 }"}, {"sha": "41eb0d604bd5de9af8bae8c7d084094a0747042e", "filename": "src/test/auxiliary/crateresolve4b-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,8 +10,8 @@\n \n // aux-build:crateresolve4a-1.rs\n // aux-build:crateresolve4a-2.rs\n-#[crate_id=\"crateresolve4b#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve4b#0.1\"]\n+#![crate_type = \"lib\"]\n \n extern crate crateresolve4a = \"crateresolve4a#0.2\";\n "}, {"sha": "51541c8764c5f5e2cc96fea35cc6abbb64dee546", "filename": "src/test/auxiliary/crateresolve4b-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,8 +10,8 @@\n \n // aux-build:crateresolve4a-1.rs\n // aux-build:crateresolve4a-2.rs\n-#[crate_id=\"crateresolve4b#0.2\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve4b#0.2\"]\n+#![crate_type = \"lib\"]\n \n extern crate crateresolve4a = \"crateresolve4a#0.1\";\n "}, {"sha": "1d3704ba23db8881e5b8b8f3b52383bf389fea62", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve5#0.1\"];\n+#![crate_id=\"crateresolve5#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub struct NameVal { pub name: ~str, pub val: int }\n "}, {"sha": "be0032b9e010679ef1ebd7d4e5942d5a19af905a", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve5#0.2\"];\n+#![crate_id=\"crateresolve5#0.2\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub struct NameVal { pub name: ~str, pub val: int }\n pub fn struct_nameval() -> NameVal {"}, {"sha": "062d606a4c1c297ad8136ac69419d145b9212042", "filename": "src/test/auxiliary/crateresolve8-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // default link meta for 'package_id' will be equal to filestem\n-#[crate_id=\"crateresolve8#0.1\"];\n+#![crate_id=\"crateresolve8#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 20 }"}, {"sha": "a0d7ae7cd2fbaf82f82614cc401d62d2bb1d6d47", "filename": "src/test/auxiliary/crateresolve_calories-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve_calories#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve_calories#0.1\"]\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 100 }"}, {"sha": "bbad91625cc7ac6e80b588111ee368b744407336", "filename": "src/test/auxiliary/crateresolve_calories-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"crateresolve_calories#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"crateresolve_calories#0.1\"]\n+#![crate_type = \"lib\"]\n \n pub fn f() -> int { 200 }"}, {"sha": "0e0a206500821c369103f51be3117514eb5b521a", "filename": "src/test/auxiliary/default_type_params_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n pub struct Heap;\n "}, {"sha": "32c963f3287a24ae6a645c9ed2f71a7d48944ca3", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"externcallback#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"externcallback#0.1\"]\n+#![crate_type = \"lib\"]\n \n extern crate libc;\n "}, {"sha": "0fb6adfcda19fa0032c737bd9c7fde7f8121eb9f", "filename": "src/test/auxiliary/extern_mod_ordering_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fextern_mod_ordering_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fextern_mod_ordering_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_mod_ordering_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub mod extern_mod_ordering_lib {\n     pub fn f() {}"}, {"sha": "8ef806621368030f948e77e9b1fa6f189f8f5f9e", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"foreign_lib\"];\n+#![crate_id=\"foreign_lib\"]\n \n pub mod rustrt {\n     extern crate libc;"}, {"sha": "9b9379e19e5888b2754137365736997421a03c43", "filename": "src/test/auxiliary/impl_privacy_xc_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub struct Fish {\n     pub x: int"}, {"sha": "fa0d447a8edf7c5b09c454589ed8c76ed3e2dcd9", "filename": "src/test/auxiliary/inline_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Finline_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Finline_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finline_dtor.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"inline_dtor#0.1\"];\n+#![crate_id=\"inline_dtor#0.1\"]\n \n pub struct Foo;\n "}, {"sha": "095cc3ec1a04d5489fa35c93ecf31b0f63948e4c", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"issue6919_3#0.1\"];\n+#![crate_id=\"issue6919_3#0.1\"]\n \n // part of issue-6919.rs\n "}, {"sha": "560844332a128d4718362b8a7debb61deb7436a0", "filename": "src/test/auxiliary/issue-11224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11224.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(dead_code)];\n+#![deny(dead_code)]\n \n mod inner {\n     pub trait Trait {"}, {"sha": "5a59a8d6ee9c27a0cd51f2f88042ed2e0630d38b", "filename": "src/test/auxiliary/issue-11908-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#[crate_id = \"collections#0.11-pre\"];\n-#[crate_type = \"dylib\"];\n+#![crate_id = \"collections#0.11-pre\"]\n+#![crate_type = \"dylib\"]"}, {"sha": "01e7af0af712c2b0a8cbe2a3232e4c39bba7a5f6", "filename": "src/test/auxiliary/issue-11908-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#[crate_id = \"collections#0.11-pre\"];\n-#[crate_type = \"rlib\"];\n+#![crate_id = \"collections#0.11-pre\"]\n+#![crate_type = \"rlib\"]"}, {"sha": "858d7269cd87400a8d68a46414136fff22323b6f", "filename": "src/test/auxiliary/issue-12133-dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-12133-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-12133-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-12133-dylib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,4 +10,4 @@\n \n // no-prefer-dynamic\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]"}, {"sha": "8e46acca1244fbfeea75bb9b612b415ec60ce3e3", "filename": "src/test/auxiliary/issue-12133-rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-12133-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-12133-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-12133-rlib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,4 +10,4 @@\n \n // no-prefer-dynamic\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]"}, {"sha": "a34ec980bda2237e35b5a2759f90ca52815159fa", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"a\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"a\"]\n+#![crate_type = \"lib\"]\n \n pub trait i<T> { }\n "}, {"sha": "0e444a43c7cef3057c8d0388bfc94e42c41e5caf", "filename": "src/test/auxiliary/issue-2414-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"a#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"a#0.1\"]\n+#![crate_type = \"lib\"]\n \n type t1 = uint;\n "}, {"sha": "51fd979f961c65ed37fdbf3e9477081add18c7a3", "filename": "src/test/auxiliary/issue-2414-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[crate_id=\"b#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"b#0.1\"]\n+#![crate_type = \"lib\"]\n \n extern crate a;"}, {"sha": "8d096a9b7e793a6a7b069ddd4e239b9730b66e5c", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"issue_2526#0.2\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"issue_2526#0.2\"]\n+#![crate_type = \"lib\"]\n \n struct arc_destruct<T> {\n   _data: int,"}, {"sha": "3e76d9e4c6c71536b857b5fb38d3dd356c9c4411", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-#[crate_id=\"req\"];\n-#[crate_type = \"lib\"];\n+#![feature(managed_boxes)]\n+#![crate_id=\"req\"]\n+#![crate_type = \"lib\"]\n \n extern crate collections;\n "}, {"sha": "dbb863da90a56dcea2e7bf960e70388881036dc2", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"socketlib\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"socketlib\"]\n+#![crate_type = \"lib\"]\n \n pub mod socket {\n     extern crate libc;"}, {"sha": "cc75ca6f3af914a2af25944d3b36f9e531187f77", "filename": "src/test/auxiliary/issue-4208-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-4208-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-4208-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-4208-cc.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"numeric#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"numeric#0.1\"]\n+#![crate_type = \"lib\"]\n \n pub trait Trig<T> {\n     fn sin(&self) -> T;"}, {"sha": "64282d590bee7d4188cda3ceab9dbd57edbcb56d", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate collections;\n "}, {"sha": "c0c884f5480c04b5840785bbf64ce1b2c4f244f1", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n pub struct BTree<V> {\n     pub node: TreeItem<V>,"}, {"sha": "934c4f52af00d5f99f20f49f7dd9e8a6fedf4d21", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub enum maybe<T> { just(T), nothing }\n "}, {"sha": "03f685c949a4bac02161c05a1a1e6fd8571e04a0", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n extern crate issue2378a;\n "}, {"sha": "e51624dec38802575a452171c345bb03883a7952", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"a#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"a#0.1\"]\n+#![crate_type = \"lib\"]\n \n trait to_strz {\n     fn to_strz() -> ~str;"}, {"sha": "4beb8118e210e8194efada7f8db5b81c9260b28f", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"c#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"c#0.1\"]\n+#![crate_type = \"lib\"]\n \n extern crate a;\n "}, {"sha": "8a9fa4dbc4adfd2d5eb112ff34e4f4a0417470f0", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_imports)];\n+#![allow(unused_imports)]\n #![feature(globs)]\n \n extern crate issue_2316_a;"}, {"sha": "320e0ceed0f461e089bcb370e4080756f5b71394", "filename": "src/test/auxiliary/issue_3136_a.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rc", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rc?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub mod issue_3136_a;"}, {"sha": "ef7e4d0fc09859418190323a7109feb6ffb643a7", "filename": "src/test/auxiliary/issue_3979_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"issue_3979_traits#0.1\"];\n+#![crate_id=\"issue_3979_traits#0.1\"]\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub trait Positioned {\n   fn SetX(&mut self, int);"}, {"sha": "000cc100a12f32ffb4b519420a73717f8f3cca72", "filename": "src/test/auxiliary/issue_9123.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_9123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fissue_9123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_9123.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub trait X {\n     fn x() {"}, {"sha": "7e090523984dadc719db7b261a34140edd071097", "filename": "src/test/auxiliary/kinds_in_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n \n // Tests that metadata serialization works for the `Copy` kind.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub fn f<T:Copy>() {}\n "}, {"sha": "b63aa18b75d346a6ff9314503d0eebaabfc0a164", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#[crate_id=\"lint_stability#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"lint_stability#0.1\"]\n+#![crate_type = \"lib\"]\n \n #[deprecated]\n pub fn deprecated() {}"}, {"sha": "56053a0cd752045f111c37c2c3b93de12532d667", "filename": "src/test/auxiliary/macro_crate_def_only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_def_only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_def_only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_def_only.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n #[macro_export]\n macro_rules! make_a_5("}, {"sha": "4e933be509256cb283aa185c94bd92d73056c01a", "filename": "src/test/auxiliary/macro_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#[feature(macro_registrar)];\n+#![feature(macro_registrar)]\n \n extern crate syntax;\n "}, {"sha": "5864f8393528a505a69205fc2ef94e93623e7461", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#[feature(globs, macro_registrar, macro_rules, quote, managed_boxes)];\n+#![feature(globs, macro_registrar, macro_rules, quote, managed_boxes)]\n \n extern crate syntax;\n "}, {"sha": "1e8c15f6b44cbf4eeda16d06e216e1a7abf422bc", "filename": "src/test/auxiliary/macro_export_inner_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_export_inner_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmacro_export_inner_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_export_inner_module.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n pub mod inner {\n     #[macro_export]"}, {"sha": "6ff6da716a9e035aa8a2fba8e80fa0548f700168", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub struct S {\n     x: int,"}, {"sha": "acd5ef0953e6e1fe7957096af0a95b8c1bcd5874", "filename": "src/test/auxiliary/newtype_struct_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub struct Au(pub int);"}, {"sha": "7cfae6d121da1cdce8dad0e6a6390839afbd207c", "filename": "src/test/auxiliary/no_std_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_std];\n+#![no_std]\n \n pub fn foo() {}"}, {"sha": "c08f725ff0a28d8ae646d73cee4ac1d4a2a39eb4", "filename": "src/test/auxiliary/static-function-pointer-aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-function-pointer-aux.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"static-function-pointer-aux\"];\n+#![crate_id=\"static-function-pointer-aux\"]\n \n pub fn f(x: int) -> int { -x }\n "}, {"sha": "4e0489b068500dd3058d2104ae0a85a47a8831a2", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"static_methods_crate#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"static_methods_crate#0.1\"]\n+#![crate_type = \"lib\"]\n \n use std::int;\n "}, {"sha": "0216e7c5854b8fcd531c3e7646531fea4583609f", "filename": "src/test/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n static private: int = 0;\n pub static public: int = 0;"}, {"sha": "3f386ab55d585625a6aabdb0817f48d0f1b3dabd", "filename": "src/test/auxiliary/struct_destructuring_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub struct S {\n     pub x: int,"}, {"sha": "159ecdcb42a62bb9a81f72b66880e5c84ddf3892", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"trait_default_method_xc_aux\"];\n+#![crate_id=\"trait_default_method_xc_aux\"]\n \n pub struct Something { pub x: int }\n "}, {"sha": "2efb8a17239da8c0eeb877e36d899c5294026eb2", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // Test library crate for cross-crate usages of traits inheriting\n // from the builtin kinds. Mostly tests metadata correctness.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub trait RequiresShare : Share { }\n pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }"}, {"sha": "ddab6836bb83cb1fbfda20da46c47b0744e62fa5", "filename": "src/test/auxiliary/xc_private_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub struct Struct {\n     pub x: int"}, {"sha": "7619513a2a626d8ae75569a8e8af27f0b713cdc6", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n // used by the rpass test\n "}, {"sha": "10a000f118e0bc92112c60aa5e93514ecfc942ef", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // Microbenchmarks for various functions in std and extra\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n extern crate rand;\n extern crate time;"}, {"sha": "80fea6d49321dd70fe1089ff2b8cd4804ce6090b", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::io;\n use std::io::stdio::StdReader;"}, {"sha": "813a75cfb4d32d35d830af109551b3d68f2233a2", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate collections;\n extern crate time;"}, {"sha": "250d22db374a69e69c8d811ca5009397b5ab787b", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: unreachable statement\n \n-#[deny(unreachable_code)];\n+#![deny(unreachable_code)]\n \n fn main() {\n     return;"}, {"sha": "5a4ed1d3df8c5417a0a8658e3bc17349600cb366", "filename": "src/test/compile-fail/issue-10656.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern: missing documentation for crate\n \n-#[deny(missing_doc)];\n-#[crate_type=\"lib\"];\n+#![deny(missing_doc)]\n+#![crate_type=\"lib\"]"}, {"sha": "9b78130b7039bc5d3201cc9f4cf3fdc39e1ca844", "filename": "src/test/compile-fail/issue-12133-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-12133-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-12133-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12133-3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -14,7 +14,7 @@\n \n // error-pattern: dylib output requested, but some depenencies could not\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n extern crate a = \"issue-12133-rlib\";\n extern crate b = \"issue-12133-dylib\";"}, {"sha": "54bcf415d2eadbc6d72cd1cf10dc440c3c36a080", "filename": "src/test/compile-fail/issue-6596.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n // error-pattern: unknown macro variable `nonexistent`\n "}, {"sha": "f3429b97cfcb97b213398242909f9daabcce8dc0", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: unreachable statement\n \n-#[deny(unreachable_code)];\n+#![deny(unreachable_code)]\n \n fn f() -> ! {\n     return fail!();"}, {"sha": "321c0ff01935b948314befd3578f20245897db6e", "filename": "src/test/compile-fail/multiple-macro-registrars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: multiple macro registration functions found\n \n-#[feature(macro_registrar)];\n+#![feature(macro_registrar)]\n \n // the registration function isn't typechecked yet\n #[macro_registrar]"}, {"sha": "c4c75bc760f4c6cf8eab755016012936b43ae6d6", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -14,7 +14,7 @@\n So we try to compile with junk link_args and make sure they are visible in\n the compiler output. */\n \n-#[feature(link_args)];\n+#![feature(link_args)]\n \n #[link_args = \"aFdEfSeVEEE\"]\n extern {}"}, {"sha": "4921c130010934163d06dac869a11fcfe7de9411", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_std];\n+#![no_std]\n \n // error-pattern:requires `start` lang_item\n "}, {"sha": "72b4153be2c5a1b18ed686d1e4602aaa08b472dc", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:mismatched types: expected `char` but found\n // Issue #876\n \n-#[no_implicit_prelude];\n+#![no_implicit_prelude]\n use std::vec::Vec;\n \n fn last<T>(v: Vec<&T> ) -> std::option::Option<T> {"}, {"sha": "2a620e96892a794894e1da3589d002ad0b982a3d", "filename": "src/test/debug-info/basic-types-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -51,7 +51,7 @@\n // check:$14 = 3.5\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n static B: bool = false;\n static I: int = -1;"}, {"sha": "e06af6445ccfbd56eb73adba4fafcb45c69e7081", "filename": "src/test/debug-info/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -48,7 +48,7 @@\n // check:[...]![...]_yyy([...])([...]);\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let unit: () = ();"}, {"sha": "1580f73461734de4132cf45860f4eeee37ad5789", "filename": "src/test/debug-info/basic-types-mut-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -86,7 +86,7 @@\n // debugger:detach\n // debugger:quit\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n static mut B: bool = false;\n static mut I: int = -1;"}, {"sha": "9c32fcfb945a30ce98706d4edb6b000f5629ea78", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -49,7 +49,7 @@\n // debugger:print f64\n // check:$14 = 3.5\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let b: bool = false;"}, {"sha": "3d0f6632e5044f04c99d8be2945f5153f29541db", "filename": "src/test/debug-info/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -59,7 +59,7 @@\n // debugger:print *f64_ref\n // check:$14 = 3.5\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let bool_val: bool = true;"}, {"sha": "4007e35dec3f92c8f75d5efb99d8c014b1c21da4", "filename": "src/test/debug-info/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -24,7 +24,7 @@\n // debugger:print *the_c_ref\n // check:$3 = TheC\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n enum ABC { TheA, TheB, TheC }\n "}, {"sha": "3512bc63395905d1c1c1c7e0902ba357f039101b", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -24,8 +24,8 @@\n // debugger:print *univariant_ref\n // check:$3 = {4820353753753434}\n \n-#[allow(unused_variable)];\n-#[feature(struct_variant)];\n+#![allow(unused_variable)]\n+#![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "e12ebe643a4f309cc4cbac5ef3878b4bf85eda35", "filename": "src/test/debug-info/borrowed-managed-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n@@ -61,7 +61,7 @@\n // debugger:print *f64_ref\n // check:$14 = 3.5\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let bool_box: @bool = @true;"}, {"sha": "c5f4bf0ac6288a8e931ea74b337c0d9aa16cfcf3", "filename": "src/test/debug-info/borrowed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -45,8 +45,8 @@\n // debugger:print *unique_val_interior_ref_2\n // check:$10 = 26.5\n \n-#[feature(managed_boxes)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unused_variable)]\n \n struct SomeStruct {\n     x: int,"}, {"sha": "5cc69c94d596b65959cdb4d8d0e1c280ee69d356", "filename": "src/test/debug-info/borrowed-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // compile-flags:-g\n // debugger:rbreak zzz\n@@ -29,7 +29,7 @@\n // debugger:print *unique_val_ref\n // check:$4 = {-17, -22}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);"}, {"sha": "98cf0905f2ae48a10b5c2474d1d3a5646e94a820", "filename": "src/test/debug-info/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -59,7 +59,7 @@\n // debugger:print *f64_ref\n // check:$14 = 3.5\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n \n fn main() {"}, {"sha": "208dd52f9ace234c2bb0d32fadbc94ad8a7a2b53", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -24,8 +24,8 @@\n // debugger:print d->val\n // check:$4 = false\n \n-#[feature(managed_boxes)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unused_variable)]\n \n fn main() {\n     let a = ~1;"}, {"sha": "84b35134ad58197d678f1af5a2d71b03406c6e4b", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -27,8 +27,8 @@\n // debugger:print managed_dtor->val\n // check:$4 = {x = 33, y = 333, z = 3333, w = 33333}\n \n-#[feature(managed_boxes)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unused_variable)]\n \n struct StructWithSomePadding {\n     x: i16,"}, {"sha": "ce876e9907f0faf48cc07332523d2c87fd687485", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -43,7 +43,7 @@\n // check:$7 = {{Case1, x = 0, y = 8970181431921507452}, {Case1, 0, 2088533116, 2088533116}}\n // debugger:continue\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n #[deriving(Clone)]\n struct Struct {"}, {"sha": "f8973f79c5fd8f0b076b2fefe999cf0eb760cd04", "filename": "src/test/debug-info/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // compile-flags:-g\n // debugger:rbreak zzz"}, {"sha": "08104c2341ecfedd3c99ac3ae6f88b21dc942078", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -36,7 +36,7 @@\n // debugger:print struct_with_drop\n // check:$7 = {{a = OneHundred, b = Vienna}, 9}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n enum AnEnum {\n     OneHundred = 100,"}, {"sha": "246857d345c45eecd226bb7536b6fc21d17429ec", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -181,7 +181,7 @@\n // check:$49 = 62\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: i64,"}, {"sha": "5aabf1fe82ff11d1d45ee19ff47f087784a27ac7", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -125,7 +125,7 @@\n // debugger:print *nn\n // check:$43 = 56\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: i64,"}, {"sha": "bf4a4079ea810a6f20bd19841dd339f5a0bc595f", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -30,7 +30,7 @@\n // debugger:print struct_padded_at_end\n // check:$5 = {x = {22, 23}, y = {24, 25}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct NoPadding1 {\n     x: [u32, ..3],"}, {"sha": "a5e6732aaab6e8106a825d515254f338504b0c5c", "filename": "src/test/debug-info/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -130,7 +130,7 @@\n // check:$32 = 45\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n \n "}, {"sha": "6f273057a1b3c56d5c9f07290d19862fee46c13f", "filename": "src/test/debug-info/function-prologue-stepping-no-split-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -127,7 +127,7 @@\n // check:$32 = 45\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n #[no_split_stack]\n fn immediate_args(a: int, b: bool, c: f64) {"}, {"sha": "224e7aaed21242e3289c8a7fa8d891cab2a578e2", "filename": "src/test/debug-info/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -32,7 +32,7 @@\n // check:$5 = 5\n // debugger:continue\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n struct Struct {\n     x: int"}, {"sha": "e32110a41f44031c20768e2e3553f198e218e344", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -29,7 +29,7 @@\n // debugger:print univariant\n // check:$4 = {a = -1}\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n // NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n // substituted with something of size `xx` bits and the same alignment as an integer type of the"}, {"sha": "6838af277282f2a88ff5aa58e708bc4cbf9bd758", "filename": "src/test/debug-info/include_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Finclude_string.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -22,7 +22,7 @@\n // check:$3 = 48\n // debugger:continue\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n // This test case makes sure that debug info does not ICE when include_str is\n // used multiple times (see issue #11322)."}, {"sha": "6cbaedfde658cb4360ab6be846363c5aa475e794", "filename": "src/test/debug-info/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -65,7 +65,7 @@\n // check:$15 = 400\n // debugger:continue\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! trivial(\n     ($e1:expr) => ($e1)"}, {"sha": "36ccc91e88b058999ba66c5c3092751c9de374c0", "filename": "src/test/debug-info/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -29,7 +29,7 @@\n // debugger:continue\n \n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: i64,"}, {"sha": "a7fb3b3022e3ace30dcd27e2100c2d89d7590fa1", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -24,8 +24,8 @@\n // debugger:print univariant->val\n // check:$3 = {-9747455}\n \n-#[allow(unused_variable)];\n-#[feature(struct_variant, managed_boxes)];\n+#![allow(unused_variable)]\n+#![feature(struct_variant, managed_boxes)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "45989fd0d2b6beacece74e23d5d489c22bd064b2", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // compile-flags:-g\n // debugger:rbreak zzz\n@@ -29,7 +29,7 @@\n // debugger:print unique.ptr[3]->val\n // check:$4 = 13\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n "}, {"sha": "79fb353ac4d018305ff2301f637a854ad471f9a4", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // compile-flags:-g\n // debugger:set print pretty off\n@@ -27,7 +27,7 @@\n // debugger:print managed_within_unique->y->val\n // check:$3 = -4\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct ContainsManaged {\n     x: int,"}, {"sha": "3ef78c49a54c1c404e5c90400d9d4f6571b9e7de", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -64,7 +64,7 @@\n // check:$15 = -10\n // debugger:continue\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n enum Enum {\n     Variant1 { x: u16, y: u16 },"}, {"sha": "524974a00013888d00bfa1b44e178e1ae4975080", "filename": "src/test/debug-info/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -28,7 +28,7 @@\n // debugger:print abc\n // check:$3 = 30303\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn function_one() {\n     let abc = 10101;"}, {"sha": "c93fc8b9cf202475a99c7d7475ade4d22775bb66", "filename": "src/test/debug-info/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -28,7 +28,7 @@\n // debugger:print c\n // check:$3 = 30303\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn function_one() {\n     let a = 10101;"}, {"sha": "31bfaded88aeecd2d5eb5229ebb89c5f0cd44d50", "filename": "src/test/debug-info/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fnil-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -21,7 +21,7 @@\n // debugger:print second\n // check:$2 = {<No data fields>}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n enum ANilEnum {}\n enum AnotherNilEnum {}"}, {"sha": "b025b3a4a557d93b5dd79db9218201f7b3827c2b", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -35,7 +35,7 @@\n \n // debugger:continue\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator."}, {"sha": "242169291014f9fa0a7d17ec80bea8bc3e206210", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -42,7 +42,7 @@\n // debugger:print deeplyNested\n // check:$8 = {a = {a = 1, b = {x = 2, y = 3, z = 4}, c = 5, d = {x = 6, y = 7, z = 8}}, b = {a = 9, b = {x = 10, y = 11, z = 12}, c = {x = 13, y = 14, z = 15}, d = 16}, c = {a = 17, b = {x = 18, y = 19, z = 20}, c = 21, d = {x = 22, y = 23, z = 24}}, d = {a = 25, b = {x = 26, y = 27, z = 28}, c = 29, d = {x = 30, y = 31, z = 32}}, e = {a = 33, b = {x = 34, y = 35, z = 36}, c = {x = 37, y = 38, z = 39}, d = 40}, f = {a = 41, b = {x = 42, y = 43, z = 44}, c = 45, d = {x = 46, y = 47, z = 48}}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n #[packed]\n struct Packed {"}, {"sha": "2b7df0083d6648093e2ca0553f99d7c0b1791bcf", "filename": "src/test/debug-info/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -35,7 +35,7 @@\n // debugger:print sizeof(packedInPacked)\n // check:$6 = 40\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n #[packed]\n struct Packed {"}, {"sha": "aea8ab1b2b83ec18814b8c8240a760bb671b5ace", "filename": "src/test/debug-info/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -16,7 +16,7 @@\n // Test whether compiling a recursive enum definition crashes debug info generation. The test case\n // is taken from issue #11083.\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n pub struct Window<'a> {\n     callbacks: WindowCallbacks<'a>"}, {"sha": "ca178468941e67df6207a6910ab5b238fb38e09b", "filename": "src/test/debug-info/recursive-struct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // compile-flags:-g\n // debugger:set print pretty off\n@@ -102,8 +102,8 @@\n \n // debugger:continue\n \n-#[allow(unused_variable)];\n-#[feature(struct_variant)];\n+#![allow(unused_variable)]\n+#![feature(struct_variant)]\n \n enum Opt<T> {\n     Empty,"}, {"sha": "983972774162fdcbc9293b93834f1caa23fe5790", "filename": "src/test/debug-info/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimd.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -41,7 +41,7 @@\n // debugger:continue\n \n #![allow(experimental)]\n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n use std::unstable::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "736ab76f7dbdbbcaa15d03118a5027181f180de2", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -72,8 +72,8 @@\n // debugger:print 'simple-struct::PADDING_AT_END'\n // check:$18 = {x = -27, y = 28}\n \n-#[allow(unused_variable)];\n-#[allow(dead_code)];\n+#![allow(unused_variable)]\n+#![allow(dead_code)]\n \n struct NoPadding16 {\n     x: u16,"}, {"sha": "256a34ff0ab13a64851c36ced103cb8e94dfa815", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -69,8 +69,8 @@\n // debugger:print 'simple-tuple::PADDING_AT_END'\n // check:$21 = {116, 117}\n \n-#[allow(unused_variable)];\n-#[allow(dead_code)];\n+#![allow(unused_variable)]\n+#![allow(dead_code)]\n \n static mut NO_PADDING_8: (i8, u8) = (-50, 50);\n static mut NO_PADDING_16: (i16, i16, u16) = (-1, 2, 3);"}, {"sha": "68bc470e6b1b4662440a7e3929008a43ed1dd9a6", "filename": "src/test/debug-info/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -32,7 +32,7 @@\n // check:$5 = 5\n // debugger:continue\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n struct Struct {\n     x: int"}, {"sha": "9b3931428bb7e6dd553fd01f0d1be4fd9697f277", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -26,7 +26,7 @@\n // debugger:print univariant\n // check:$3 = {{x = 123, y = 456, z = 789}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Struct {\n     x: u32,"}, {"sha": "182fb3d096544565ec901a5af3abce48b1264ad9", "filename": "src/test/debug-info/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -25,7 +25,7 @@\n // debugger:print padding_at_end_parent\n // check:$3 = {x = {x = 10, y = 11}, y = {x = 12, y = 13}, z = {x = 14, y = 15}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Simple {\n     x: i32"}, {"sha": "cb68245a48e5897d16acca68f08441830d20a6e8", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -29,8 +29,8 @@\n // debugger:print univariant\n // check:$4 = {a = -1}\n \n-#[allow(unused_variable)];\n-#[feature(struct_variant)];\n+#![allow(unused_variable)]\n+#![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "ae439611c40fe6b3f680d42f4c5409014aadbbf6", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -26,7 +26,7 @@\n // debugger:print nested\n // check:$4 = {a = {a = {x = 7890, y = 9870}}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct NoDestructor {\n     x: i32,"}, {"sha": "8d114a3f8ddee62008a94b544023e65cd9ef24a9", "filename": "src/test/debug-info/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n // compile-flags:-g\n // debugger:run\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n trait Trait {\n     fn method(&self) -> int { 0 }"}, {"sha": "242f59ad4de66efdeac1a04d2b84b5a2fad44a55", "filename": "src/test/debug-info/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -41,7 +41,7 @@\n // debugger:print mixed_padding\n // check:$10 = {x = {{40, 41, 42}, {43, 44}}, y = {45, 46, 47, 48}}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct NoPadding1 {\n     x: (i32, i32),"}, {"sha": "1008af246a0a42ba3bf6abaff6c5a83907005651", "filename": "src/test/debug-info/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -33,7 +33,7 @@\n // debugger:print padding_at_end2\n // check:$7 = {{21, 22}, 23}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n fn main() {\n     let no_padding1: ((u32, u32), u32, u32) = ((0, 1), 2, 3);"}, {"sha": "176e4b0a69f1bb694b6d1be65bf648449b09627d", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -29,7 +29,7 @@\n // debugger:print univariant\n // check:$4 = {-1}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "1c2cc8832856ba0d0e003d844b56c9b10f8d44fb", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -24,8 +24,8 @@\n // debugger:print *univariant\n // check:$3 = {123234}\n \n-#[allow(unused_variable)];\n-#[feature(struct_variant)];\n+#![allow(unused_variable)]\n+#![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "8dd22e6061791c5c94b9d9b8e73fc10209698be8", "filename": "src/test/debug-info/var-captured-in-nested-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -48,8 +48,8 @@\n // check:$14 = 8\n // debugger:continue\n \n-#[feature(managed_boxes)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: int,"}, {"sha": "83b26e08975977cede59b043718288059489c61c", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -22,7 +22,7 @@\n // debugger:print *owned\n // check:$3 = 5\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: int,"}, {"sha": "4daaf8f7a0e62951c9026e44d5c4055195098c7e", "filename": "src/test/debug-info/var-captured-in-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -28,8 +28,8 @@\n // debugger:print managed->val\n // check:$6 = 7\n \n-#[feature(managed_boxes)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unused_variable)]\n \n struct Struct {\n     a: int,"}, {"sha": "6171facc42bc5fd47b9c9cc318a0be50f426a353", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -53,7 +53,7 @@\n // debugger:print *((int64_t[2]*)('vec-slices::MUT_VECT_SLICE'.data_ptr))\n // check:$15 = {64, 65}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct AStruct {\n     x: i16,"}, {"sha": "e1ee1ae02120810e25c9f640b70a4b214a7951f8", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -21,7 +21,7 @@\n // debugger:print vec::VECT\n // check:$2 = {4, 5, 6}\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n static mut VECT: [i32, ..3] = [1, 2, 3];\n "}, {"sha": "3ab23beaeb947090408ae40f30e2563370f9cc50", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n // previously ambiguous (e.g. 'if true { } *val;' gets parsed as a\n // binop)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::Cell;\n "}, {"sha": "a0a11e00295699bfeba22daac1cf0d24dd23b2ac", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:meep\n fn f(_a: int, _b: int, _c: @int) { fail!(\"moop\"); }"}, {"sha": "4f3dfaa80b939a0913583fa98560f446497d62dc", "filename": "src/test/run-fail/doublefail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublefail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unreachable_code)];\n+#![allow(unreachable_code)]\n \n //error-pattern:One\n fn main() {"}, {"sha": "64e779de047af683d77b9eb0e49c002f3bf58141", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_assignment)];\n-#[allow(unused_variable)];\n+#![allow(dead_assignment)]\n+#![allow(unused_variable)]\n \n // error-pattern:wooooo\n fn main() {"}, {"sha": "c27ddef8711b89b42459d245683b2ea47b5a8f17", "filename": "src/test/run-fail/issue-2272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:explicit failure\n // Issue #2272 - unwind this without leaking the unique pointer"}, {"sha": "0385059736cfbae5c846302076bd332002ddcd6d", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unnecessary_allocation)];\n-#[allow(unreachable_code)];\n-#[allow(unused_variable)];\n+#![allow(unnecessary_allocation)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variable)]\n \n \n // error-pattern:so long"}, {"sha": "5669131aeee536946b88a1763af14251d5d9b160", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:beep boop\n \n-#[allow(unused_variable)];\n+#![allow(unused_variable)]\n \n struct Point { x: int, y: int }\n "}, {"sha": "9728c84b9005dca097e0b9e93e5d43aaad4bfb92", "filename": "src/test/run-fail/match-bot-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:explicit failure\n \n-#[allow(unreachable_code)];\n-#[allow(unused_variable)];\n+#![allow(unreachable_code)]\n+#![allow(unused_variable)]\n \n fn foo(s: ~str) { }\n "}, {"sha": "584be2d89b7564afdc60fe95cf52e0be892b5af2", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,8 +12,8 @@\n // as a _|_-typed thing, not a str-typed thing\n // error-pattern:bye\n \n-#[allow(unreachable_code)];\n-#[allow(unused_variable)];\n+#![allow(unreachable_code)]\n+#![allow(unused_variable)]\n \n struct T { t: ~str }\n "}, {"sha": "02c9c6a44ef6e75529a64bb96cec765731fa43cf", "filename": "src/test/run-fail/unwind-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn main() {\n     let _a = @0;"}, {"sha": "3fabbdff9b3b3febeef6ba8cfc21edea791742cd", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:fail\n "}, {"sha": "2e4ebf5ea34b0ed1cd1e12dac5710816647d05c7", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cast;\n "}, {"sha": "44d69cb516b733c8fa5bd6a91b64a18a6e1f5129", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn failfn() {\n     fail!();"}, {"sha": "dcfaccf5ab78900323bba89be103c1d132c27821", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn failfn() {\n     fail!();"}, {"sha": "bfe72835f453b7e337483b8d1ab5ccab816ebd30", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn failfn() {\n     fail!();"}, {"sha": "07d978a191d409bc496be140b60c258cdf0ecd6f", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn failfn() {\n     fail!();"}, {"sha": "9d7a9d113995bc444557e057ce90cfe0ff99879c", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn failfn() {\n     fail!();"}, {"sha": "97570ec552e00ca27f76e431da2b2f4b7dc16b67", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn main() {\n     @0;"}, {"sha": "acb211e597fdc8aca88ae59e33a9a0b4e6a3851f", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:fail\n "}, {"sha": "6e85491964153fd0aed37cbc6aee5992f6b39df4", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:fail\n "}, {"sha": "1b4eebae2d53207341b8147d74e527097efca7ad", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,9 +10,9 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n-#[allow(unreachable_code)];\n-#[allow(unused_variable)];\n+#![feature(managed_boxes)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variable)]\n \n fn x(it: |int|) {\n     fail!();"}, {"sha": "b0ec375a5cbd08cf8f2c79fca4e8baab64aa2620", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn x(it: |int|) {\n     let _a = @0;"}, {"sha": "74f3e97cbba7e7701a225466b855d5963956a8f4", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:fail\n "}, {"sha": "ef8ffd2df43189f2df772087f48401257f962eeb", "filename": "src/test/run-fail/unwind-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Issue #945\n // error-pattern:non-exhaustive match failure"}, {"sha": "59aaa7addcc94e203c0957a0db00684118528331", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // exec-env:RUST_NEWRT=1\n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate collections;\n "}, {"sha": "99e01391f201909d438ca8f68fc87d6f2fc736e2", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:fail\n fn f(_a: @int) {"}, {"sha": "c52cb3a1ebfa3738f5db2816627d028c7de9e45e", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn main() {\n     let _a = @0;"}, {"sha": "62b4c1c98cb2b927bc7d63f7070aad2f0704c3da", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n fn f() -> Vec<int> { fail!(); }"}, {"sha": "f265655e0ef6ae764b0e29f62ef3584ca6c61e4d", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n fn f() -> Vec<int> { fail!(); }"}, {"sha": "92093a90cfd02d22c472bdf7d7f87b247c946ffc", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n fn f() -> Vec<int> { fail!(); }"}, {"sha": "1a7d7d84763692acb205e7fd88ddfbff678db878", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:squirrel\n "}, {"sha": "15db0fbd5cbd1159afade98cd649fc50f3d74f30", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // error-pattern:quux\n "}, {"sha": "eb0e69fe87784d09f27d5851d0ef1ce4d5f586cb", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn f() {\n     let _a = @0;"}, {"sha": "7108d4df54f25c08a2f08d0dc636e0c1108874db", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n // error-pattern:fail"}, {"sha": "ca77f692533850f6e1637f85657a6bdb49a58b74", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n // error-pattern:fail"}, {"sha": "a70585d6b1d7681930a2a9a36d722f31f1fcef4e", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn f() {\n     fail!();"}, {"sha": "0a0b26083579df730a8ea8fafaa78484ef7a290a", "filename": "src/test/run-fail/while-body-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(while_true)];\n+#![allow(while_true)]\n \n // error-pattern:quux\n fn main() { let _x: int = { while true { fail!(\"quux\"); } ; 8 } ; }"}, {"sha": "24058c4fb936efed6303d86694885c1983070a71", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(while_true)];\n+#![allow(while_true)]\n \n // error-pattern:giraffe\n fn main() {"}, {"sha": "bb68ba4916888478b2614275361ce256a3dff7b0", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"boot#0.1\"];\n-#[crate_type=\"dylib\"];\n+#![crate_id=\"boot#0.1\"]\n+#![crate_type=\"dylib\"]\n \n extern crate rustuv;\n extern crate green;"}, {"sha": "7a78ec29a82b85acd9a4fd819878a47a9abad048", "filename": "src/test/run-make/bootstrap-from-c-with-native/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"boot#0.1\"];\n-#[crate_type=\"dylib\"];\n+#![crate_id=\"boot#0.1\"]\n+#![crate_type=\"dylib\"]\n \n extern crate native;\n "}, {"sha": "04253be71d454222c99d85cb26f8ff3703fc0542", "filename": "src/test/run-make/c-dynamic-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n #[link(name = \"cfoo\")]\n extern {"}, {"sha": "a1f01bd2b626ca6a10ec4b055903cb96b95d565a", "filename": "src/test/run-make/c-dynamic-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n \n #[link(name = \"cfoo\")]\n extern {"}, {"sha": "32675bcba1e0a1d2802be8eaadb653074a60c067", "filename": "src/test/run-make/c-link-to-rust-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n #[no_mangle]\n pub extern \"C\" fn foo() {}"}, {"sha": "1bb1901670035c4ad6c04084ca4fc81af281faaa", "filename": "src/test/run-make/c-link-to-rust-staticlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"staticlib\"];\n+#![crate_type = \"staticlib\"]\n \n #[no_mangle]\n pub extern \"C\" fn foo() {}"}, {"sha": "04253be71d454222c99d85cb26f8ff3703fc0542", "filename": "src/test/run-make/c-static-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n #[link(name = \"cfoo\")]\n extern {"}, {"sha": "a1f01bd2b626ca6a10ec4b055903cb96b95d565a", "filename": "src/test/run-make/c-static-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n \n #[link(name = \"cfoo\")]\n extern {"}, {"sha": "db3759036d8c09f03d2e8deb6b4166883c293dc4", "filename": "src/test/run-make/crate-data-smoke/crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"foo#0.11-pre\"];\n+#![crate_id = \"foo#0.11-pre\"]\n \n // Querying about the crate metadata should *not* parse the entire crate, it\n // only needs the crate attributes (which are guaranteed to be at the top) be"}, {"sha": "b40e055b3cba91642646a3aef6228df1e60fef48", "filename": "src/test/run-make/crate-data-smoke/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"mylib\"];\n-#[crate_type = \"lib\"];\n+#![crate_id = \"mylib\"]\n+#![crate_type = \"lib\"]"}, {"sha": "94b8371e5375790d2bf63bcee91e4db536506e08", "filename": "src/test/run-make/crate-data-smoke/rlib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"mylib\"];\n-#[crate_type = \"rlib\"];\n+#![crate_id = \"mylib\"]\n+#![crate_type = \"rlib\"]"}, {"sha": "4255b1d934d9c668edd49fa6a75944fc5c09d85d", "filename": "src/test/run-make/dep-info-custom/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"foo#0.1\"];\n+#![crate_id=\"foo#0.1\"]\n \n pub mod foo;\n pub mod bar;"}, {"sha": "4255b1d934d9c668edd49fa6a75944fc5c09d85d", "filename": "src/test/run-make/dep-info/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"foo#0.1\"];\n+#![crate_id=\"foo#0.1\"]\n \n pub mod foo;\n pub mod bar;"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make/duplicate-output-flavors/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fduplicate-output-flavors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fduplicate-output-flavors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fduplicate-output-flavors%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]"}, {"sha": "5437c935c4e9520dce90475222c1183d32b9ca3c", "filename": "src/test/run-make/dylib-chain/m1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n pub fn m1() {}"}, {"sha": "b464f32eae204a08321ea7520721c436d1ea8ee1", "filename": "src/test/run-make/dylib-chain/m2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n extern crate m1;\n \n pub fn m2() { m1::m1() }"}, {"sha": "bf431cc827b0b450e231aaf25eb33a64fa6ae81d", "filename": "src/test/run-make/dylib-chain/m3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n extern crate m2;\n \n pub fn m3() { m2::m2() }"}, {"sha": "11c61169de97b0b95c9f12634ff634c8fce98c27", "filename": "src/test/run-make/issue-12446/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-12446%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n \n extern {\n     fn some_c_symbol();"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make/lto-smoke/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Flto-smoke%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Flto-smoke%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]"}, {"sha": "7696c27ad71fcf53f3eac8aeaf677722fdcf268d", "filename": "src/test/run-make/mixing-deps/both.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fboth.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n \n pub static foo: int = 4;"}, {"sha": "cb74a5eb240ab4f621fcea3a9a37a660514d12cf", "filename": "src/test/run-make/mixing-deps/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n extern crate both;\n \n use std::cast;"}, {"sha": "1a5bd658cd9aa633f05a0e552fc13d32b3dd19a4", "filename": "src/test/run-make/mixing-libs/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n extern crate rlib;\n \n pub fn dylib() { rlib::rlib() }"}, {"sha": "ad0ea67b9ab15140a2297a935942d61bf6310dcd", "filename": "src/test/run-make/mixing-libs/rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Frlib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n pub fn rlib() {}"}, {"sha": "020fbc3299b6831db6acecb421d34bc2c9706c9c", "filename": "src/test/run-make/output-type-permutations/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"bar\"];\n+#![crate_id = \"bar\"]\n \n fn main() {}"}, {"sha": "e3afa352938d6769d60936320f4dd72b1c692374", "filename": "src/test/run-make/rlib-chain/m1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n pub fn m1() {}"}, {"sha": "2b4c181134b31a540675d4927e09b8ec90300ba6", "filename": "src/test/run-make/rlib-chain/m2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n extern crate m1;\n \n pub fn m2() { m1::m1() }"}, {"sha": "6323a9e65aae1a7a357892995894a1b96bb260d3", "filename": "src/test/run-make/rlib-chain/m3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n extern crate m2;\n \n pub fn m3() { m2::m2() }"}, {"sha": "8128ba05885bdc5ece8975b813c705a4737f97bf", "filename": "src/test/run-make/rustdoc-hidden-line/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"foo#0.1\"];\n+#![crate_id=\"foo#0.1\"]\n \n /// The '# ' lines should be removed from the output, but the #[deriving] should be\n /// retained."}, {"sha": "dda66f051bc8e5f829c2d93ace664476755e29f2", "filename": "src/test/run-make/rustdoc-json/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"foo#0.1\"];\n+#![crate_id = \"foo#0.1\"]\n \n //! Very docs\n "}, {"sha": "dda66f051bc8e5f829c2d93ace664476755e29f2", "filename": "src/test/run-make/rustdoc-smoke/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"foo#0.1\"];\n+#![crate_id = \"foo#0.1\"]\n \n //! Very docs\n "}, {"sha": "5e75e1cd1cbdcfa701237d14d46bb65ec307430e", "filename": "src/test/run-make/static-unwinding/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]\n \n pub static mut statik: int = 0;\n "}, {"sha": "6010e60e95c1c69fde51a45d7c0319c5199cab53", "filename": "src/test/run-make/staticlib-blank-lib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"staticlib\"];\n+#![crate_type = \"staticlib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n extern {}"}, {"sha": "2ec6e3834a113a82189a1839522900248de6635f", "filename": "src/test/run-make/suspicious-library/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsuspicious-library%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n pub fn foo() {}"}, {"sha": "fdb29974cd800a6b39f38c7e38ef5966f1787b1b", "filename": "src/test/run-make/symlinked-libraries/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"dylib\"];\n+#![crate_type = \"dylib\"]\n \n pub fn bar() {}"}, {"sha": "3b53af830e618a4dc2e11244749846dffce77be8", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -46,7 +46,7 @@ fn main() {\n \n         {\n             let _ = write!(&mut File::create(&main_file).unwrap(),\n-                           r\"\\#[feature(non_ascii_idents)]; fn main() \\{ {} \\}\",\n+                           r\"\\#![feature(non_ascii_idents)] fn main() \\{ {} \\}\",\n                            // random string of length n\n                            range(0, n).map(|_| random_char()).collect::<~str>());\n         }"}, {"sha": "4243fcb05d5cd5fc23f4e88cf5ca80d78aca0249", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // ignore-test\n \n #![feature(quote)]\n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate syntax;\n "}, {"sha": "5025cc12b4a64083806f5ae325ca9aca172458a5", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android\n #![feature(quote)]\n-#[deny(unused_variable)];\n+#![deny(unused_variable)]\n \n extern crate syntax;\n "}, {"sha": "43288d9044ec5c7b0a5513544441048ed3873bf7", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(type_limits)];\n+#![allow(type_limits)]\n \n // Unsigned integer operations\n pub fn main() {"}, {"sha": "304325906d72dcab4210f9e38cb74a556193c2e6", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test FIXME(#5121)\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate time;\n extern crate serialize;"}, {"sha": "039df373d7a1167fc4f966e9ed94ed7922ded88a", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // Testing that method lookup automatically both borrows vectors to slices\n // and also references them to create the &self pointer\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n trait MyIter {\n     fn test_imm(&self);"}, {"sha": "a9bfd78794dc59ade890b98095e86bf9c57a77d7", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n trait double {\n     fn double(self) -> uint;"}, {"sha": "e9c57c2d7b02306c305f2760a7380565cf6b0a59", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n trait Foo {\n     fn foo(&self) -> ~str;"}, {"sha": "66b9d0430a126af14b6f2f4f1f57b217c95f58fc", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn borrow(x: &int, f: |x: &int|) {\n     f(x)"}, {"sha": "881a5b4d3f6ff3512b2f5ab5b09678cce32bb294", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n struct Foo {\n   a: int"}, {"sha": "f05b8c67d77e2e304db26f05813df513e738e76a", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;"}, {"sha": "b9ccda05e4bb20a315f4066d5261bfaeebebcd6a", "filename": "src/test/run-pass/borrowck-preserve-box-in-moved-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-moved-value.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n // Test that we root `x` even though it is found in immutable memory,\n // because it is moved.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn free<T>(x: @T) {}\n "}, {"sha": "0896d4de625c91367f3eb88b88469f13f6771de1", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;"}, {"sha": "cfb9a4b91df176ca6620ecc8b14d4b9186b2db24", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;"}, {"sha": "52ea474dbf55072c5a0195462a4934210f686f28", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn testfn(cond: bool) {\n     let mut x = @3;"}, {"sha": "749c8063950038b84b14b22df48824d9a08e0a26", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;"}, {"sha": "aa0ff316239df082d39efb75f1439c3e47cd49a3", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n struct F { f: @G }"}, {"sha": "b9961f44c736d7d676fa48e03036323b500dfe58", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n fn borrow<'r,T>(x: &'r T) -> &'r T {x}"}, {"sha": "7704d7eb262d1ff69d1a876bd5fb8905495a3eba", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::Cell;\n "}, {"sha": "b5600cd7db220286036a94caaebcb6f4da64cec2", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n pub fn main() {\n     let (&x, &y) = (&3, &'a');"}, {"sha": "2934e86b3f7d4e53b6a35a2dea55d82c4c006575", "filename": "src/test/run-pass/box-in-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n pub fn main() {\n     let i: (@int, int) = (@10, 10);"}, {"sha": "85284be38991e3747d824f8e3f60320bf6b4fc53", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn some_box(x: int) -> @int { return @x; }\n "}, {"sha": "fc7e0d5e7228a28e7d402dac3096db447875846d", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn some_box(x: int) -> @int { return @x; }\n "}, {"sha": "c78ea59c10deddb6bcb4cc2ef60b56d8e799d89c", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Box<T> {c: @T}\n "}, {"sha": "5f9b5a4b81447e603175b1dcfbda6202d3513dfc", "filename": "src/test/run-pass/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n pub fn main() { let x: @int = @10; assert!((*x == 10)); }"}, {"sha": "88823ba1105cb0fc430f9a678e480ff11f8e87bd", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // Regression test that rustc doesn't recurse infinitely substituting\n // the boxed type parameter\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Tree<T> {\n     parent: Option<T>"}, {"sha": "099374b593781fefe8c55e0190c7bfca065c9a5d", "filename": "src/test/run-pass/can-copy-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n \n // Tests that type parameters with the `Copy` are implicitly copyable.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n fn can_copy_copy<T:Copy>(v: T) {\n     let _a = v;"}, {"sha": "081a756af69dd47d02a1ec26676c51025e7dd3b5", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:cci_borrow_lib.rs\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;"}, {"sha": "5400053406c5bfaa0c9e8099dbab4c055118b467", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:cci_nested_lib.rs\n \n-#[feature(globs, managed_boxes)];\n+#![feature(globs, managed_boxes)]\n \n extern crate cci_nested_lib;\n use cci_nested_lib::*;"}, {"sha": "ec9ef3815013697c7f45fcc08ad2450e73ac703a", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-notfoo.rs)\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n #[cfg(foo)]\n #[macro_escape]"}, {"sha": "fb44176ec2212c347b89f50efe80f5af17d77f00", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-foo.rs)\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n #[cfg(foo)]\n #[macro_escape]"}, {"sha": "679d50e8a6e0d555247e602c98240f84e0d2d192", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n trait noisy {\n   fn speak(&mut self) -> int;"}, {"sha": "276d02f48b4e03a910183816de0aa5b1735b68dd", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-freebsd FIXME fails on BSD\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n trait noisy {\n   fn speak(&mut self);"}, {"sha": "ca87d7b311a5adde26a4136cb83aba3e56ea3eed", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct kitten {\n     cat: Option<cat>,"}, {"sha": "007349c6ec1c7ff60efb82522f7bf1ba1a01d597", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::task;\n "}, {"sha": "e352fc0be981e48e6fca066bc31125bab97fe538", "filename": "src/test/run-pass/cleanup-rvalue-for-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -11,7 +11,7 @@\n // Test that the lifetime of rvalues in for loops is extended\n // to the for loop itself.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n use std::ops::Drop;\n "}, {"sha": "f6f0da745ab74e6882eed518127be7a3ee8173f8", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -12,7 +12,7 @@\n // statement or end of block, as appropriate given the temporary\n // lifetime rules.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n use std::ops::Drop;\n "}, {"sha": "802417da2c2e86495b27099d0cad949760901bca", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_must_use, dead_code)];\n+#![allow(unused_must_use, dead_code)]\n \n use std::io::MemWriter;\n "}, {"sha": "be186a95a77be9f045fe3ccf0b3226a1971a07c6", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({"}, {"sha": "56cfcfae7a6f239fa943a2076ce0b4866feaba79", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n enum E {\n     S0 { s: ~str },"}, {"sha": "c985eb6337ee89d618f61f1b24a2b803fa5b3af8", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -15,7 +15,7 @@\n // memory, which makes for some *confusing* logs. That's why these are here\n // instead of in std.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n extern crate libc;\n \n extern crate native;\n@@ -31,7 +31,7 @@ macro_rules! succeed( ($e:expr) => (\n macro_rules! iotest (\n     { fn $name:ident() $b:block $($a:attr)* } => (\n         mod $name {\n-            #[allow(unused_imports)];\n+            #![allow(unused_imports)]\n \n             use std::io::timer;\n             use libc;"}, {"sha": "9ccf3d2d6c3a06cbba0591e3cbd4e390f3a4075e", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // This is a regression test that the metadata for the\n // name_pool::methods impl in the other crate is reachable from this"}, {"sha": "f04e383cb3dc6d70660213917db6984e68dc1ef0", "filename": "src/test/run-pass/crateresolve8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:crateresolve8-1.rs\n \n-#[crate_id=\"crateresolve8#0.1\"];\n+#![crate_id=\"crateresolve8#0.1\"]\n \n extern crate crateresolve8 = \"crateresolve8#0.1\";\n //extern crate crateresolve8(vers = \"0.1\");"}, {"sha": "3737aa7cc866fcd7ea18e7c046e6750c235064a2", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::RefCell;\n "}, {"sha": "15a8a2e9eac2d6334bb003e5ae6f564a6ba5f037", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::Cell;\n "}, {"sha": "fdc3a106e02cbb057a10dedbeaac75ddd845ca5f", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n pub fn main() {\n     let x: @int = @10;"}, {"sha": "9dc5bcc0f0296584694e3146d762283a29bdecdb", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n #[deriving(Eq, TotalEq, Ord, TotalOrd)]\n enum ES<T> {"}, {"sha": "2e47940a26c2e179a2171a060d08d812199467c5", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -13,7 +13,7 @@\n \n // ignore-test FIXME(#5121)\n \n-#[feature(struct_variant, managed_boxes)];\n+#![feature(struct_variant, managed_boxes)]\n \n extern crate rand;\n extern crate serialize;"}, {"sha": "b4ff97912a169b42e3cadc97328d41a153807c26", "filename": "src/test/run-pass/deriving-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! define_vec (\n     () => ("}, {"sha": "c455aebbe46ed348c5d85fd62c92eac2462983d0", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n extern crate rand;\n "}, {"sha": "ed38cf5411ee1b521cf9773df4fea42e74de9dfb", "filename": "src/test/run-pass/deriving-show-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n use std::fmt;\n "}, {"sha": "18800ac0438fad2e17751f6054d85d97c98eddf6", "filename": "src/test/run-pass/deriving-show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant, macro_rules)];\n+#![feature(struct_variant, macro_rules)]\n \n #[deriving(Show)]\n struct Unit;"}, {"sha": "3e22db301d35e9e2451d349f1620239558ae6d3e", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n #[deriving(Eq, Show)]\n enum S {"}, {"sha": "f782a9bb17742599766888f90b35b100cc2278d9", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::num::Zero;\n "}, {"sha": "df1e4132cb737cd63d0d9918420c8311a44c534f", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -10,7 +10,7 @@\n \n // Just testing that fail!() type checks in statement or expr\n \n-#[allow(unreachable_code)];\n+#![allow(unreachable_code)]\n \n fn f() {\n     fail!();"}, {"sha": "9a3c38d45b4cf96fa61cdaabee99b051aa44b38e", "filename": "src/test/run-pass/double-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Quux {\n     bar: int"}, {"sha": "da23a1ebd07a628c498ea240ff984ad8ed5555d6", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n enum t { foo(@int), }\n "}, {"sha": "42a1e563285c583710ab05aedf75fb81244c5b27", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_mut)];\n+#![allow(unused_mut)]\n \n \n pub fn main() { let mut _v: Vec<int> = Vec::new(); }"}, {"sha": "35d58cefe0da41d6035e647399119fbabe6ea46b", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{"}, {"sha": "acd1846407ec1302de620b768f293d2fff1a19b1", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n /*!\n  * This is a regression test for a bug in LLVM, fixed in upstream r179587,"}, {"sha": "df9f6b6a8a7df3c95b2fbbf3ac96858f5d423ec2", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_assignment)];\n-#[allow(unused_variable)];\n-#[feature(struct_variant)];\n+#![allow(dead_assignment)]\n+#![allow(unused_variable)]\n+#![feature(struct_variant)]\n \n enum Animal {\n     Dog (~str, f64),"}, {"sha": "80011daf560ad1af7ccc5bde7350e0fd1f8da3e8", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_assignment)];\n+#![allow(dead_assignment)]\n \n pub fn main() {\n     let x : ~str = ~\"hello\";"}, {"sha": "5bf89ce7de2663cc9b22e367879eb6ccb0ef14df", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-#[allow(dead_assignment)];\n+#![feature(managed_boxes)]\n+#![allow(dead_assignment)]\n \n pub fn main() {\n     let x : [@int, ..5] = [@1,@2,@3,@4,@5];"}, {"sha": "f8e1dc27e32f81fa38c9e5938a17bae7bb41b859", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_assignment)];\n+#![allow(dead_assignment)]\n \n pub fn main() {\n     let x : &[int] = &[1,2,3,4,5];"}, {"sha": "f97afa2f3e0eaf877210844afe670c1e030817b6", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n use s = std::num::strconv;\n use to_str = std::num::strconv::float_to_str_common;"}, {"sha": "3e079af56ebf9906f195f49b2620ce0e41b0bd30", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n enum list_cell<T> { cons(@list_cell<T>), nil }\n "}, {"sha": "c9554246eba07249a13db08fc6f910b2c07f3b0a", "filename": "src/test/run-pass/expr-block-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n pub fn main() { let x = { @100 }; assert!((*x == 100)); }"}, {"sha": "623a93292c642e8bcf1de73e25fe1dcce0d6d087", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n type compare<T> = |@T, @T|: 'static -> bool;\n "}, {"sha": "cb690a86f810be961297f75d9a8a613895d401af", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n type compare<'a, T> = |T, T|: 'a -> bool;"}, {"sha": "400c9f8023a31feed4844410e9213ce7cf3c324c", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Regression test for issue #388\n pub fn main() { let _x = { { @10 } }; }"}, {"sha": "f8ae245ee29b84b993525c5c4fa6f7f2490af652", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Make sure we drop the refs of the temporaries needed to return the\n // values from the else if branch"}, {"sha": "1b52235ef871cca36b66bc4d6328f00e1cc40078", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713e87526eac42aa9879e7cfb556ea64d63e7a91/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=713e87526eac42aa9879e7cfb556ea64d63e7a91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Regression test for issue #388\n pub fn main() {"}]}