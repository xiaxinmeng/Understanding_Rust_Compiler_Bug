{"sha": "40cd0310db7f67867b305c28fb87b5b660e77df1", "node_id": "C_kwDOAAsO6NoAKDQwY2QwMzEwZGI3ZjY3ODY3YjMwNWMyOGZiODdiNWI2NjBlNzdkZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T04:23:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T04:23:06Z"}, "message": "Auto merge of #109714 - matthiaskrgr:rollup-wipns5h, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #109149 (Improve error message when writer is forgotten in write and writeln macro)\n - #109367 (Streamline fast rejection)\n - #109548 (AnnotationColumn struct to fix hard tab column numbers in errors)\n - #109694 (do not panic on failure to acquire jobserver token)\n - #109705 (new solver: check for intercrate mode when accessing the cache)\n - #109708 (Specialization involving RPITITs is broken so ignore the diagnostic differences)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9f0086ae2c2407c7c348c254fef54c0b19ca0c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0086ae2c2407c7c348c254fef54c0b19ca0c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40cd0310db7f67867b305c28fb87b5b660e77df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40cd0310db7f67867b305c28fb87b5b660e77df1", "html_url": "https://github.com/rust-lang/rust/commit/40cd0310db7f67867b305c28fb87b5b660e77df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40cd0310db7f67867b305c28fb87b5b660e77df1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd27bb5572553a4dc9a2d6f21d9a3a68ff8a233", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd27bb5572553a4dc9a2d6f21d9a3a68ff8a233", "html_url": "https://github.com/rust-lang/rust/commit/acd27bb5572553a4dc9a2d6f21d9a3a68ff8a233"}, {"sha": "439c68ceeb4b7337db47bf08955d438f5b8e5804", "url": "https://api.github.com/repos/rust-lang/rust/commits/439c68ceeb4b7337db47bf08955d438f5b8e5804", "html_url": "https://github.com/rust-lang/rust/commit/439c68ceeb4b7337db47bf08955d438f5b8e5804"}], "stats": {"total": 447, "additions": 345, "deletions": 102}, "files": [{"sha": "2dda4cd169410e878690c3d94c3ced52599f66d3", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1452,8 +1452,8 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                         Err(e) => {\n                             let msg = &format!(\"failed to acquire jobserver token: {}\", e);\n                             shared_emitter.fatal(msg);\n-                            // Exit the coordinator thread\n-                            panic!(\"{}\", msg)\n+                            codegen_done = true;\n+                            codegen_aborted = true;\n                         }\n                     }\n                 }"}, {"sha": "9872b3bda1e065f4361f03cd722a70876c6e3778", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -202,7 +202,10 @@ impl AnnotateSnippetEmitterWriter {\n                             annotations: annotations\n                                 .iter()\n                                 .map(|annotation| SourceAnnotation {\n-                                    range: (annotation.start_col, annotation.end_col),\n+                                    range: (\n+                                        annotation.start_col.display,\n+                                        annotation.end_col.display,\n+                                    ),\n                                     label: annotation.label.as_deref().unwrap_or_default(),\n                                     annotation_type: annotation_type_for_level(*level),\n                                 })"}, {"sha": "d6fd057c5a4763fadcb2a6c62615b9a502647c9a", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -12,7 +12,9 @@ use Destination::*;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{FileLines, SourceFile, Span};\n \n-use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n+use crate::snippet::{\n+    Annotation, AnnotationColumn, AnnotationType, Line, MultilineAnnotation, Style, StyledString,\n+};\n use crate::styled_buffer::StyledBuffer;\n use crate::translation::{to_fluent_args, Translate};\n use crate::{\n@@ -858,7 +860,7 @@ impl EmitterWriter {\n         let mut short_start = true;\n         for ann in &line.annotations {\n             if let AnnotationType::MultilineStart(depth) = ann.annotation_type {\n-                if source_string.chars().take(ann.start_col).all(|c| c.is_whitespace()) {\n+                if source_string.chars().take(ann.start_col.display).all(|c| c.is_whitespace()) {\n                     let style = if ann.is_primary {\n                         Style::UnderlinePrimary\n                     } else {\n@@ -1093,15 +1095,15 @@ impl EmitterWriter {\n                         '_',\n                         line_offset + pos,\n                         width_offset + depth,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n                         style,\n                     );\n                 }\n                 _ if self.teach => {\n                     buffer.set_style_range(\n                         line_offset,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n-                        (code_offset + annotation.end_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n+                        (code_offset + annotation.end_col.display).saturating_sub(left),\n                         style,\n                         annotation.is_primary,\n                     );\n@@ -1133,7 +1135,7 @@ impl EmitterWriter {\n                 for p in line_offset + 1..=line_offset + pos {\n                     buffer.putc(\n                         p,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n                         '|',\n                         style,\n                     );\n@@ -1169,9 +1171,9 @@ impl EmitterWriter {\n             let style =\n                 if annotation.is_primary { Style::LabelPrimary } else { Style::LabelSecondary };\n             let (pos, col) = if pos == 0 {\n-                (pos + 1, (annotation.end_col + 1).saturating_sub(left))\n+                (pos + 1, (annotation.end_col.display + 1).saturating_sub(left))\n             } else {\n-                (pos + 2, annotation.start_col.saturating_sub(left))\n+                (pos + 2, annotation.start_col.display.saturating_sub(left))\n             };\n             if let Some(ref label) = annotation.label {\n                 buffer.puts(line_offset + pos, code_offset + col, label, style);\n@@ -1208,7 +1210,7 @@ impl EmitterWriter {\n             } else {\n                 ('-', Style::UnderlineSecondary)\n             };\n-            for p in annotation.start_col..annotation.end_col {\n+            for p in annotation.start_col.display..annotation.end_col.display {\n                 buffer.putc(\n                     line_offset + 1,\n                     (code_offset + p).saturating_sub(left),\n@@ -1459,7 +1461,7 @@ impl EmitterWriter {\n                                         &annotated_file.file.name,\n                                         line.line_index\n                                     ),\n-                                    annotations[0].start_col + 1,\n+                                    annotations[0].start_col.file + 1,\n                                 ),\n                                 Style::LineAndColumn,\n                             );\n@@ -1546,7 +1548,7 @@ impl EmitterWriter {\n                 buffer.prepend(buffer_msg_line_offset + 1, \"::: \", Style::LineNumber);\n                 let loc = if let Some(first_line) = annotated_file.lines.first() {\n                     let col = if let Some(first_annotation) = first_line.annotations.first() {\n-                        format!(\":{}\", first_annotation.start_col + 1)\n+                        format!(\":{}\", first_annotation.start_col.file + 1)\n                     } else {\n                         String::new()\n                     };\n@@ -1607,8 +1609,8 @@ impl EmitterWriter {\n                 let mut span_left_margin = usize::MAX;\n                 for line in &annotated_file.lines {\n                     for ann in &line.annotations {\n-                        span_left_margin = min(span_left_margin, ann.start_col);\n-                        span_left_margin = min(span_left_margin, ann.end_col);\n+                        span_left_margin = min(span_left_margin, ann.start_col.display);\n+                        span_left_margin = min(span_left_margin, ann.end_col.display);\n                     }\n                 }\n                 if span_left_margin == usize::MAX {\n@@ -1625,11 +1627,12 @@ impl EmitterWriter {\n                         annotated_file.file.get_line(line.line_index - 1).map_or(0, |s| s.len()),\n                     );\n                     for ann in &line.annotations {\n-                        span_right_margin = max(span_right_margin, ann.start_col);\n-                        span_right_margin = max(span_right_margin, ann.end_col);\n+                        span_right_margin = max(span_right_margin, ann.start_col.display);\n+                        span_right_margin = max(span_right_margin, ann.end_col.display);\n                         // FIXME: account for labels not in the same line\n                         let label_right = ann.label.as_ref().map_or(0, |l| l.len() + 1);\n-                        label_right_margin = max(label_right_margin, ann.end_col + label_right);\n+                        label_right_margin =\n+                            max(label_right_margin, ann.end_col.display + label_right);\n                     }\n                 }\n \n@@ -2352,17 +2355,17 @@ impl FileWithAnnotatedLines {\n                         depth: 1,\n                         line_start: lo.line,\n                         line_end: hi.line,\n-                        start_col: lo.col_display,\n-                        end_col: hi.col_display,\n+                        start_col: AnnotationColumn::from_loc(&lo),\n+                        end_col: AnnotationColumn::from_loc(&hi),\n                         is_primary,\n                         label,\n                         overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file, ml));\n                 } else {\n                     let ann = Annotation {\n-                        start_col: lo.col_display,\n-                        end_col: hi.col_display,\n+                        start_col: AnnotationColumn::from_loc(&lo),\n+                        end_col: AnnotationColumn::from_loc(&hi),\n                         is_primary,\n                         label,\n                         annotation_type: AnnotationType::Singleline,\n@@ -2551,7 +2554,13 @@ fn num_overlap(\n     (b_start..b_end + extra).contains(&a_start) || (a_start..a_end + extra).contains(&b_start)\n }\n fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n-    num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n+    num_overlap(\n+        a1.start_col.display,\n+        a1.end_col.display + padding,\n+        a2.start_col.display,\n+        a2.end_col.display,\n+        false,\n+    )\n }\n \n fn emit_to_destination("}, {"sha": "98eb70b5fceeeaf70a5af67bc85b3fba5ee91a91", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1,20 +1,46 @@\n // Code for annotating snippets.\n \n-use crate::Level;\n+use crate::{Level, Loc};\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Line {\n     pub line_index: usize,\n     pub annotations: Vec<Annotation>,\n }\n \n+#[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Default)]\n+pub struct AnnotationColumn {\n+    /// the (0-indexed) column for *display* purposes, counted in characters, not utf-8 bytes\n+    pub display: usize,\n+    /// the (0-indexed) column in the file, counted in characters, not utf-8 bytes.\n+    ///\n+    /// this may be different from `self.display`,\n+    /// e.g. if the file contains hard tabs, because we convert tabs to spaces for error messages.\n+    ///\n+    /// for example:\n+    /// ```text\n+    /// (hard tab)hello\n+    ///           ^ this is display column 4, but file column 1\n+    /// ```\n+    ///\n+    /// we want to keep around the correct file offset so that column numbers in error messages\n+    /// are correct. (motivated by <https://github.com/rust-lang/rust/issues/109537>)\n+    pub file: usize,\n+}\n+\n+impl AnnotationColumn {\n+    pub fn from_loc(loc: &Loc) -> AnnotationColumn {\n+        AnnotationColumn { display: loc.col_display, file: loc.col.0 }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct MultilineAnnotation {\n     pub depth: usize,\n     pub line_start: usize,\n     pub line_end: usize,\n-    pub start_col: usize,\n-    pub end_col: usize,\n+    pub start_col: AnnotationColumn,\n+    pub end_col: AnnotationColumn,\n     pub is_primary: bool,\n     pub label: Option<String>,\n     pub overlaps_exactly: bool,\n@@ -36,7 +62,12 @@ impl MultilineAnnotation {\n     pub fn as_start(&self) -> Annotation {\n         Annotation {\n             start_col: self.start_col,\n-            end_col: self.start_col + 1,\n+            end_col: AnnotationColumn {\n+                // these might not correspond to the same place anymore,\n+                // but that's okay for our purposes\n+                display: self.start_col.display + 1,\n+                file: self.start_col.file + 1,\n+            },\n             is_primary: self.is_primary,\n             label: None,\n             annotation_type: AnnotationType::MultilineStart(self.depth),\n@@ -45,7 +76,12 @@ impl MultilineAnnotation {\n \n     pub fn as_end(&self) -> Annotation {\n         Annotation {\n-            start_col: self.end_col.saturating_sub(1),\n+            start_col: AnnotationColumn {\n+                // these might not correspond to the same place anymore,\n+                // but that's okay for our purposes\n+                display: self.end_col.display.saturating_sub(1),\n+                file: self.end_col.file.saturating_sub(1),\n+            },\n             end_col: self.end_col,\n             is_primary: self.is_primary,\n             label: self.label.clone(),\n@@ -55,8 +91,8 @@ impl MultilineAnnotation {\n \n     pub fn as_line(&self) -> Annotation {\n         Annotation {\n-            start_col: 0,\n-            end_col: 0,\n+            start_col: Default::default(),\n+            end_col: Default::default(),\n             is_primary: self.is_primary,\n             label: None,\n             annotation_type: AnnotationType::MultilineLine(self.depth),\n@@ -92,14 +128,14 @@ pub enum AnnotationType {\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Annotation {\n-    /// Start column, 0-based indexing -- counting *characters*, not\n-    /// utf-8 bytes. Note that it is important that this field goes\n+    /// Start column.\n+    /// Note that it is important that this field goes\n     /// first, so that when we sort, we sort orderings by start\n     /// column.\n-    pub start_col: usize,\n+    pub start_col: AnnotationColumn,\n \n     /// End column within the line (exclusive)\n-    pub end_col: usize,\n+    pub end_col: AnnotationColumn,\n \n     /// Is this annotation derived from primary span\n     pub is_primary: bool,\n@@ -118,12 +154,13 @@ impl Annotation {\n         matches!(self.annotation_type, AnnotationType::MultilineLine(_))\n     }\n \n+    /// Length of this annotation as displayed in the stderr output\n     pub fn len(&self) -> usize {\n         // Account for usize underflows\n-        if self.end_col > self.start_col {\n-            self.end_col - self.start_col\n+        if self.end_col.display > self.start_col.display {\n+            self.end_col.display - self.start_col.display\n         } else {\n-            self.start_col - self.end_col\n+            self.start_col.display - self.end_col.display\n         }\n     }\n "}, {"sha": "95d1a7df69867ef0b14d93dfe83e22ee5167b4de", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -245,6 +245,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    fn suggest_missing_writer(\n+        &self,\n+        rcvr_ty: Ty<'tcx>,\n+        args: (&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>]),\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let (ty_str, _ty_file) = self.tcx.short_ty_string(rcvr_ty);\n+        let mut err =\n+            struct_span_err!(self.tcx.sess, args.0.span, E0599, \"cannot write into `{}`\", ty_str);\n+        err.span_note(\n+            args.0.span,\n+            \"must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\",\n+        );\n+        if let ExprKind::Lit(_) = args.0.kind {\n+            err.span_help(\n+                args.0.span.shrink_to_lo(),\n+                \"a writer is needed before this format string\",\n+            );\n+        };\n+\n+        err\n+    }\n+\n     pub fn report_no_match_method_error(\n         &self,\n         mut span: Span,\n@@ -323,16 +345,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let mut err = struct_span_err!(\n-            tcx.sess,\n-            span,\n-            E0599,\n-            \"no {} named `{}` found for {} `{}` in the current scope\",\n-            item_kind,\n-            item_name,\n-            rcvr_ty.prefix_string(self.tcx),\n-            ty_str_reported,\n-        );\n+        let is_write = sugg_span.ctxt().outer_expn_data().macro_def_id.map_or(false, |def_id| {\n+            tcx.is_diagnostic_item(sym::write_macro, def_id)\n+                || tcx.is_diagnostic_item(sym::writeln_macro, def_id)\n+        }) && item_name.name == Symbol::intern(\"write_fmt\");\n+        let mut err = if is_write\n+            && let Some(args) = args\n+        {\n+            self.suggest_missing_writer(rcvr_ty, args)\n+        } else {\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0599,\n+                \"no {} named `{}` found for {} `{}` in the current scope\",\n+                item_kind,\n+                item_name,\n+                rcvr_ty.prefix_string(self.tcx),\n+                ty_str_reported,\n+            )\n+        };\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }"}, {"sha": "0a6e94248e6e69ba4b12937589b0c57d6535eb45", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::Mutability;\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n+use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitableExt};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -188,22 +188,24 @@ pub struct DeepRejectCtxt {\n }\n \n impl DeepRejectCtxt {\n-    pub fn generic_args_may_unify<'tcx>(\n+    pub fn substs_refs_may_unify<'tcx>(\n         self,\n-        obligation_arg: ty::GenericArg<'tcx>,\n-        impl_arg: ty::GenericArg<'tcx>,\n+        obligation_substs: SubstsRef<'tcx>,\n+        impl_substs: SubstsRef<'tcx>,\n     ) -> bool {\n-        match (obligation_arg.unpack(), impl_arg.unpack()) {\n-            // We don't fast reject based on regions for now.\n-            (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => true,\n-            (GenericArgKind::Type(obl), GenericArgKind::Type(imp)) => {\n-                self.types_may_unify(obl, imp)\n-            }\n-            (GenericArgKind::Const(obl), GenericArgKind::Const(imp)) => {\n-                self.consts_may_unify(obl, imp)\n+        iter::zip(obligation_substs, impl_substs).all(|(obl, imp)| {\n+            match (obl.unpack(), imp.unpack()) {\n+                // We don't fast reject based on regions for now.\n+                (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => true,\n+                (GenericArgKind::Type(obl), GenericArgKind::Type(imp)) => {\n+                    self.types_may_unify(obl, imp)\n+                }\n+                (GenericArgKind::Const(obl), GenericArgKind::Const(imp)) => {\n+                    self.consts_may_unify(obl, imp)\n+                }\n+                _ => bug!(\"kind mismatch: {obl} {imp}\"),\n             }\n-            _ => bug!(\"kind mismatch: {obligation_arg} {impl_arg}\"),\n-        }\n+        })\n     }\n \n     pub fn types_may_unify<'tcx>(self, obligation_ty: Ty<'tcx>, impl_ty: Ty<'tcx>) -> bool {\n@@ -258,9 +260,7 @@ impl DeepRejectCtxt {\n             },\n             ty::Adt(obl_def, obl_substs) => match k {\n                 &ty::Adt(impl_def, impl_substs) => {\n-                    obl_def == impl_def\n-                        && iter::zip(obl_substs, impl_substs)\n-                            .all(|(obl, imp)| self.generic_args_may_unify(obl, imp))\n+                    obl_def == impl_def && self.substs_refs_may_unify(obl_substs, impl_substs)\n                 }\n                 _ => false,\n             },"}, {"sha": "91b56fe3522ca6e6ebecfad9457d17c1482097b8", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ToPredicate, TypeVisitableExt};\n use rustc_span::{sym, DUMMY_SP};\n-use std::iter;\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self), ret)]\n@@ -144,9 +143,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "d7ad730b4a321ebca95165f96e47b99aa7531523", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -47,6 +47,22 @@ impl<'tcx> SearchGraph<'tcx> {\n         self.mode\n     }\n \n+    /// We do not use the global cache during coherence.\n+    ///\n+    /// The trait solver behavior is different for coherence\n+    /// so we would have to add the solver mode to the cache key.\n+    /// This is probably not worth it as trait solving during\n+    /// coherence tends to already be incredibly fast.\n+    ///\n+    /// We could add another global cache for coherence instead,\n+    /// but that's effort so let's only do it if necessary.\n+    pub(super) fn should_use_global_cache(&self) -> bool {\n+        match self.mode {\n+            SolverMode::Normal => true,\n+            SolverMode::Coherence => false,\n+        }\n+    }\n+\n     pub(super) fn is_empty(&self) -> bool {\n         self.stack.is_empty() && self.provisional_cache.is_empty()\n     }\n@@ -191,8 +207,10 @@ impl<'tcx> SearchGraph<'tcx> {\n         canonical_goal: CanonicalGoal<'tcx>,\n         mut loop_body: impl FnMut(&mut Self) -> QueryResult<'tcx>,\n     ) -> QueryResult<'tcx> {\n-        if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n-            return result;\n+        if self.should_use_global_cache() {\n+            if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n+                return result;\n+            }\n         }\n \n         match self.try_push_stack(tcx, canonical_goal) {\n@@ -252,9 +270,8 @@ impl<'tcx> SearchGraph<'tcx> {\n             // dependencies, our non-root goal may no longer appear as child of the root goal.\n             //\n             // See https://github.com/rust-lang/rust/pull/108071 for some additional context.\n-            let should_cache_globally = matches!(self.solver_mode(), SolverMode::Normal)\n-                && (!self.overflow_data.did_overflow() || self.stack.is_empty());\n-            if should_cache_globally {\n+            let can_cache = !self.overflow_data.did_overflow() || self.stack.is_empty();\n+            if self.should_use_global_cache() && can_cache {\n                 tcx.new_solver_evaluation_cache.insert(\n                     current_goal.goal,\n                     dep_node,"}, {"sha": "f522a8f7e65d191d016e9d1745bc3b399d82e9e8", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1,7 +1,5 @@\n //! Dealing with trait goals, i.e. `T: Trait<'a, U>`.\n \n-use std::iter;\n-\n use super::{assembly, EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n@@ -41,9 +39,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(\n+            goal.predicate.trait_ref.substs,\n+            impl_trait_ref.skip_binder().substs,\n+        ) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "d360158fdf818421abb3fb7288acab49ae316667", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -79,8 +79,9 @@ pub fn overlapping_impls(\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {\n-        (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n-            .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n+        (Some(a), Some(b)) => {\n+            drcx.substs_refs_may_unify(a.skip_binder().substs, b.skip_binder().substs)\n+        }\n         (None, None) => {\n             let self_ty1 = tcx.type_of(impl1_def_id).skip_binder();\n             let self_ty2 = tcx.type_of(impl2_def_id).skip_binder();"}, {"sha": "47a351590b1de3ef1953ffa3f0745565a31adb75", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -11,7 +11,7 @@ use hir::LangItem;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_middle::ty::fast_reject::TreatProjections;\n+use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n use crate::traits;\n@@ -344,6 +344,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n+        let obligation_substs = obligation.predicate.skip_binder().trait_ref.substs;\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n@@ -352,7 +354,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // consider a \"quick reject\". This avoids creating more types\n                 // and so forth that we need to.\n                 let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n-                if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n+                if !drcx.substs_refs_may_unify(obligation_substs, impl_trait_ref.0.substs) {\n                     return;\n                 }\n                 if self.reject_fn_ptr_impls("}, {"sha": "3ed3dd2d20d84062f42a43458e7ca7ba948f630b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -45,7 +45,6 @@ use rustc_infer::traits::TraitEngineExt;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n@@ -2533,19 +2532,6 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         Ok(Normalized { value: impl_substs, obligations: nested_obligations })\n     }\n \n-    fn fast_reject_trait_refs(\n-        &mut self,\n-        obligation: &TraitObligation<'tcx>,\n-        impl_trait_ref: &ty::TraitRef<'tcx>,\n-    ) -> bool {\n-        // We can avoid creating type variables and doing the full\n-        // substitution if we find that any of the input types, when\n-        // simplified, do not match.\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs)\n-            .any(|(obl, imp)| !drcx.generic_args_may_unify(obl, imp))\n-    }\n-\n     /// Normalize `where_clause_trait_ref` and try to match it against\n     /// `obligation`. If successful, return any predicates that\n     /// result from the normalization."}, {"sha": "3b9104fc35484d504403ae3b6cddd6079007b0ed", "filename": "tests/run-make/jobserver-error/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Frun-make%2Fjobserver-error%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Frun-make%2Fjobserver-error%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fjobserver-error%2FMakefile?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,8 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+# only-linux\n+\n+# Test compiler behavior in case: `jobserver-auth` points to correct pipe which is not jobserver.\n+\n+all:\n+\tbash -c 'echo \"fn main() {}\" | MAKEFLAGS=\"--jobserver-auth=3,3\" $(RUSTC) - 3</dev/null' 2>&1 | diff jobserver.stderr -"}, {"sha": "d18e15a2628892834dab1a42dc04bbf41fb75753", "filename": "tests/run-make/jobserver-error/jobserver.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Frun-make%2Fjobserver-error%2Fjobserver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Frun-make%2Fjobserver-error%2Fjobserver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fjobserver-error%2Fjobserver.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,4 @@\n+error: failed to acquire jobserver token: early EOF on jobserver pipe\n+\n+error: aborting due to previous error\n+"}, {"sha": "1e67cdca248d4fc330cad1ac806852ef736f61b4", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-specializable-projection.rs:4:12\n+  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: async associated function in trait cannot be specialized\n-  --> $DIR/dont-project-to-specializable-projection.rs:14:5\n+  --> $DIR/dont-project-to-specializable-projection.rs:16:5\n    |\n LL |     default async fn foo(_: T) -> &'static str {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.stderr"}, {"sha": "fa89c6b77e0b9d8bb1d48e8aac154a549f59cb85", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.next.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,34 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:16:35\n+   |\n+LL |     default async fn foo(_: T) -> &'static str {\n+   |                                   ^^^^^^^^^^^^ expected associated type, found future\n+   |\n+note: type in trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:12:27\n+   |\n+LL |     async fn foo(_: T) -> &'static str;\n+   |                           ^^^^^^^^^^^^\n+   = note: expected signature `fn(_) -> impl Future<Output = &'static str>`\n+              found signature `fn(_) -> impl Future<Output = &'static str>`\n+\n+error: async associated function in trait cannot be specialized\n+  --> $DIR/dont-project-to-specializable-projection.rs:16:5\n+   |\n+LL |     default async fn foo(_: T) -> &'static str {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "7183eaccc9327c545cafe9b405c65ab07ff556a4", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -1,5 +1,7 @@\n // edition: 2021\n // known-bug: #108309\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(min_specialization)]"}, {"sha": "93418b7651c8bbe55fc761aa5307c6af3c7ef381", "filename": "tests/ui/diagnostic-width/auxiliary/tab_column_numbers.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-tab\n+\n+pub struct S;\n+impl S {\n+\t\tfn method(&self) {}\n+}"}, {"sha": "2abb0bcde95e31ca6a783f71ee8e99eebaacf62d", "filename": "tests/ui/diagnostic-width/tab-column-numbers.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,12 @@\n+// Test for #109537: ensure that column numbers are correctly generated when using hard tabs.\n+// aux-build:tab_column_numbers.rs\n+\n+// ignore-tidy-tab\n+\n+extern crate tab_column_numbers;\n+\n+fn main() {\n+\tlet s = tab_column_numbers::S;\n+\ts.method();\n+\t//~^ ERROR method `method` is private\n+}"}, {"sha": "ea4e1ff52a9e9c4d32aee4675b75264608d798b7", "filename": "tests/ui/diagnostic-width/tab-column-numbers.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,14 @@\n+error[E0624]: method `method` is private\n+  --> $DIR/tab-column-numbers.rs:10:4\n+   |\n+LL |     s.method();\n+   |       ^^^^^^ private method\n+   |\n+  ::: $DIR/auxiliary/tab_column_numbers.rs:5:3\n+   |\n+LL |         fn method(&self) {}\n+   |         ---------------- private method defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0624`."}, {"sha": "7df965c3684e2709ba54d90993435c26c0049061", "filename": "tests/ui/macros/missing-writer.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fmacros%2Fmissing-writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fmacros%2Fmissing-writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmissing-writer.rs?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,17 @@\n+// Check error for missing writer in writeln! and write! macro\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    write!(\"{}_{}\", x, y);\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP you might be missing a string literal to format with\n+    //~| ERROR cannot write into `&'static str`\n+    //~| NOTE must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+    //~| HELP a writer is needed before this format string\n+    writeln!(\"{}_{}\", x, y);\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP you might be missing a string literal to format with\n+    //~| ERROR cannot write into `&'static str`\n+    //~| NOTE must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+    //~| HELP a writer is needed before this format string\n+}"}, {"sha": "86dfe7d65ea6255bf11dba625675ae6057aac561", "filename": "tests/ui/macros/missing-writer.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fmacros%2Fmissing-writer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fmacros%2Fmissing-writer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmissing-writer.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -0,0 +1,59 @@\n+error: format argument must be a string literal\n+  --> $DIR/missing-writer.rs:5:21\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |                     ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     write!(\"{}_{}\", \"{} {}\", x, y);\n+   |                     ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/missing-writer.rs:11:23\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |                       ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     writeln!(\"{}_{}\", \"{} {}\", x, y);\n+   |                       ++++++++\n+\n+error[E0599]: cannot write into `&'static str`\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |     -------^^^^^^^------- method not found in `&str`\n+   |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |            ^^^^^^^\n+help: a writer is needed before this format string\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |            ^\n+\n+error[E0599]: cannot write into `&'static str`\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |     ---------^^^^^^^------- method not found in `&str`\n+   |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |              ^^^^^^^\n+help: a writer is needed before this format string\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |              ^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "94710f4503f56d1dda7eb045047aeeac53780054", "filename": "tests/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40cd0310db7f67867b305c28fb87b5b660e77df1/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=40cd0310db7f67867b305c28fb87b5b660e77df1", "patch": "@@ -21,18 +21,22 @@ note: required by a bound in `BufWriter`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n \n error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn Write>`, but its trait bounds were not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `BufWriter<&dyn Write>` due to unsatisfied trait bounds\n+   |     ---------^^---------------- method cannot be called on `BufWriter<&dyn Write>` due to unsatisfied trait bounds\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n    = note: doesn't satisfy `BufWriter<&dyn std::io::Write>: std::io::Write`\n    |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+   |\n+LL |     writeln!(fp, \"hello world\").unwrap();\n+   |              ^^\n    = note: the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write`\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n-   = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}]}