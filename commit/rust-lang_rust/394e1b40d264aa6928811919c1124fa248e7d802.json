{"sha": "394e1b40d264aa6928811919c1124fa248e7d802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NGUxYjQwZDI2NGFhNjkyODgxMTkxOWMxMTI0ZmEyNDhlN2Q4MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-27T02:44:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-27T02:44:35Z"}, "message": "Auto merge of #73779 - Manishearth:rollup-lwqd9jm, r=Manishearth\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #72771 (Warn if linking to a private item)\n - #72937 (Fortanix SGX target libunwind build process changes)\n - #73485 (Perform obligation deduplication to avoid buggy `ExistentialMismatch`)\n - #73529 (Add liballoc impl SpecFromElem for i8)\n - #73579 (add missing doc links)\n - #73627 (Shortcuts for min/max on double-ended BTreeMap/BTreeSet iterators)\n - #73691 (Bootstrap: detect Windows based on sys.platform)\n - #73694 (Document the Self keyword)\n - #73718 (Document the super keyword)\n - #73728 (Document some invariants correctly/more)\n - #73738 (Remove irrelevant comment)\n - #73765 (Remove blank line)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c5f5b84ccf059b6fd65653bfb8871a4ebef3855d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f5b84ccf059b6fd65653bfb8871a4ebef3855d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/394e1b40d264aa6928811919c1124fa248e7d802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/394e1b40d264aa6928811919c1124fa248e7d802", "html_url": "https://github.com/rust-lang/rust/commit/394e1b40d264aa6928811919c1124fa248e7d802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/394e1b40d264aa6928811919c1124fa248e7d802/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda8a7fde92a0be3f18b863bf35bebf195f8ed5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda8a7fde92a0be3f18b863bf35bebf195f8ed5c", "html_url": "https://github.com/rust-lang/rust/commit/dda8a7fde92a0be3f18b863bf35bebf195f8ed5c"}, {"sha": "50026aed2493da03cb0c669497ca489d57c93729", "url": "https://api.github.com/repos/rust-lang/rust/commits/50026aed2493da03cb0c669497ca489d57c93729", "html_url": "https://github.com/rust-lang/rust/commit/50026aed2493da03cb0c669497ca489d57c93729"}], "stats": {"total": 561, "additions": 445, "deletions": 116}, "files": [{"sha": "1949d70e5deea1b370f1f583651b02a39a99a56a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -184,6 +184,7 @@ def default_build_triple():\n     ostype = require([\"uname\", \"-s\"], exit=required)\n     cputype = require(['uname', '-m'], exit=required)\n \n+    # If we do not have `uname`, assume Windows.\n     if ostype is None or cputype is None:\n         return 'x86_64-pc-windows-msvc'\n \n@@ -236,6 +237,11 @@ def default_build_triple():\n         if ostype.endswith('WOW64'):\n             cputype = 'x86_64'\n         ostype = 'pc-windows-gnu'\n+    elif sys.platform == 'win32':\n+        # Some Windows platforms might have a `uname` command that returns a\n+        # non-standard string (e.g. gnuwin32 tools returns `windows32`). In\n+        # these cases, fall back to using sys.platform.\n+        return 'x86_64-pc-windows-msvc'\n     else:\n         err = \"unknown OS type: {}\".format(ostype)\n         sys.exit(err)"}, {"sha": "b07ff21755e0cae97296bc2027241624b2b1d274", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -131,26 +131,13 @@ fn copy_third_party_objects(\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<(PathBuf, DependencyType)> {\n-    let libdir = builder.sysroot_libdir(*compiler, target);\n     let mut target_deps = vec![];\n \n-    // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.\n-    //\n-    // This target needs to be linked to Fortanix's port of llvm's libunwind.\n-    // libunwind requires support for rwlock and printing to stderr,\n-    // which is provided by std for this target.\n+    // FIXME: remove this in 2021\n     if target == \"x86_64-fortanix-unknown-sgx\" {\n-        let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let src =\n-            env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n-        copy_and_stamp(\n-            builder,\n-            &*libdir,\n-            Path::new(&src),\n-            \"libunwind.a\",\n-            &mut target_deps,\n-            DependencyType::Target,\n-        );\n+        if env::var_os(\"X86_FORTANIX_SGX_LIBS\").is_some() {\n+            builder.info(\"Warning: X86_FORTANIX_SGX_LIBS environment variable is ignored, libunwind is now compiled as part of rustbuild\");\n+        }\n     }\n \n     if builder.config.sanitizers && compiler.stage != 0 {"}, {"sha": "1f1c2460023525049c10769abe694b8f1d03f3a6", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -71,9 +71,7 @@ RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n COPY dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh /usr/bin/x86_64-fortanix-unknown-sgx-clang-11\n RUN ln -s /usr/bin/x86_64-fortanix-unknown-sgx-clang-11 /usr/bin/x86_64-fortanix-unknown-sgx-clang++-11\n-# We pass the commit id of the port of LLVM's libunwind to the build script.\n-# Any update to the commit id here, should cause the container image to be re-built from this point on.\n-RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"800f95131fe6acd20b96b6f4723ca3c820f3d379\"\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh\n \n COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n RUN /tmp/build-wasi-toolchain.sh\n@@ -105,8 +103,6 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n ENV TARGETS=$TARGETS,armv7-unknown-linux-gnueabi\n ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabi\n \n-ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n-\n # As per https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1300211\n # we need asm in the search path for gcc-7 (for gnux32) but not in the search path of the\n # cross compilers."}, {"sha": "78bf4527feff19e953c4d06d4f4bd4e0ecc6fd8d", "filename": "src/ci/docker/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -3,14 +3,7 @@\n set -eu\n source shared.sh\n \n-if [ -z \"$1\" ]; then\n-    echo \"Usage: ${0} <commit_id>\"\n-    exit -1\n-fi\n-\n target=\"x86_64-fortanix-unknown-sgx\"\n-url=\"https://github.com/fortanix/llvm-project/archive/${1}.tar.gz\"\n-repo_name=\"llvm-project\"\n \n install_prereq() {\n     curl https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -\n@@ -24,39 +17,4 @@ install_prereq() {\n             clang-11\n }\n \n-build_unwind() {\n-    set -x\n-    dir_name=\"${target}_temp\"\n-    rm -rf ${dir_name}\n-    mkdir -p ${dir_name}\n-    pushd ${dir_name}\n-\n-    # Clone Fortanix's fork of llvm-project which has a port of libunwind\n-    fetch_github_commit_archive \"$repo_name\" \"$url\"\n-    cd \"${repo_name}/libunwind\"\n-\n-    # Build libunwind\n-    mkdir -p build\n-    cd build\n-    target_CC=\"CC_${target//-/_}\"\n-    target_CXX=\"CXX_${target//-/_}\"\n-    target_CFLAGS=\"CFLAGS_${target//-/_}\"\n-    target_CXXFLAGS=\"CXXFLAGS_${target//-/_}\"\n-    cmake -DCMAKE_BUILD_TYPE=\"RELEASE\" -DRUST_SGX=1 -G \"Unix Makefiles\" \\\n-        -DCMAKE_C_COMPILER=\"${!target_CC}\" -DCMAKE_CXX_COMPILER=\"${!target_CXX}\" \\\n-        -DCMAKE_C_FLAGS=\"${!target_CFLAGS}\" -DCMAKE_CXX_FLAGS=\"${!target_CXXFLAGS}\" \\\n-        -DCMAKE_C_COMPILER_TARGET=$target -DCMAKE_CXX_COMPILER_TARGET=$target \\\n-        -DLLVM_ENABLE_WARNINGS=1 -DLIBUNWIND_ENABLE_WERROR=1 -DLIBUNWIND_ENABLE_PEDANTIC=0 \\\n-        -DLLVM_PATH=../../llvm/ ../\n-    make unwind_static\n-    install -D \"lib/libunwind.a\" \"/${target}/lib/libunwind.a\"\n-\n-    popd\n-    rm -rf ${dir_name}\n-\n-    { set +x; } 2>/dev/null\n-}\n-\n-set -x\n hide_output install_prereq\n-build_unwind"}, {"sha": "bb9091a66594bda1665309811e38deab38fe4bd4", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -1396,6 +1396,14 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1458,6 +1466,14 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1595,6 +1611,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn last(mut self) -> Option<&'a K> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a K> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1768,6 +1792,14 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1853,6 +1885,14 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "d8959966fe5ad38a8f846780af27892a77fba621", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -1291,12 +1291,22 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next()\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1321,6 +1331,7 @@ impl<T> Iterator for IntoIter<T> {\n     fn next(&mut self) -> Option<T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n@@ -1359,6 +1370,14 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n@@ -1429,6 +1448,10 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n         };\n         (self_len.saturating_sub(other_len), Some(self_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1460,6 +1483,10 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n         // the number of elements to less than half the range of usize.\n         (0, Some(a_len + b_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1516,6 +1543,10 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n             IntersectionInner::Answer(Some(_)) => (1, Some(1)),\n         }\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1541,6 +1572,10 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n         // No checked_add - see SymmetricDifference::size_hint.\n         (max(a_len, b_len), Some(a_len + b_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "5408faa079c1532ee3462acb023416ffd9ef145e", "filename": "src/liballoc/raw_vec/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec%2Ftests.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -12,7 +12,6 @@ fn allocator_param() {\n     //\n     // Instead, this just checks that the `RawVec` methods do at\n     // least go through the Allocator API when it reserves\n-\n     // storage.\n \n     // A dumb allocator that consumes a fixed amount of fuel"}, {"sha": "682d829d219f31ee918ed1fb42ef9c65a00b5189", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -309,6 +309,41 @@ fn test_iter_mixed() {\n     test(size, map.into_iter());\n }\n \n+#[test]\n+fn test_iter_min_max() {\n+    let mut a = BTreeMap::new();\n+    assert_eq!(a.iter().min(), None);\n+    assert_eq!(a.iter().max(), None);\n+    assert_eq!(a.iter_mut().min(), None);\n+    assert_eq!(a.iter_mut().max(), None);\n+    assert_eq!(a.range(..).min(), None);\n+    assert_eq!(a.range(..).max(), None);\n+    assert_eq!(a.range_mut(..).min(), None);\n+    assert_eq!(a.range_mut(..).max(), None);\n+    assert_eq!(a.keys().min(), None);\n+    assert_eq!(a.keys().max(), None);\n+    assert_eq!(a.values().min(), None);\n+    assert_eq!(a.values().max(), None);\n+    assert_eq!(a.values_mut().min(), None);\n+    assert_eq!(a.values_mut().max(), None);\n+    a.insert(1, 42);\n+    a.insert(2, 24);\n+    assert_eq!(a.iter().min(), Some((&1, &42)));\n+    assert_eq!(a.iter().max(), Some((&2, &24)));\n+    assert_eq!(a.iter_mut().min(), Some((&1, &mut 42)));\n+    assert_eq!(a.iter_mut().max(), Some((&2, &mut 24)));\n+    assert_eq!(a.range(..).min(), Some((&1, &42)));\n+    assert_eq!(a.range(..).max(), Some((&2, &24)));\n+    assert_eq!(a.range_mut(..).min(), Some((&1, &mut 42)));\n+    assert_eq!(a.range_mut(..).max(), Some((&2, &mut 24)));\n+    assert_eq!(a.keys().min(), Some(&1));\n+    assert_eq!(a.keys().max(), Some(&2));\n+    assert_eq!(a.values().min(), Some(&24));\n+    assert_eq!(a.values().max(), Some(&42));\n+    assert_eq!(a.values_mut().min(), Some(&mut 24));\n+    assert_eq!(a.values_mut().max(), Some(&mut 42));\n+}\n+\n fn range_keys(map: &BTreeMap<i32, i32>, range: impl RangeBounds<i32>) -> Vec<i32> {\n     map.range(range)\n         .map(|(&k, &v)| {"}, {"sha": "b6c34b7c6c346dae023617482ffba7cbff6917d7", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -33,6 +33,37 @@ fn test_hash() {\n     assert_eq!(hash(&x), hash(&y));\n }\n \n+#[test]\n+fn test_iter_min_max() {\n+    let mut a = BTreeSet::new();\n+    assert_eq!(a.iter().min(), None);\n+    assert_eq!(a.iter().max(), None);\n+    assert_eq!(a.range(..).min(), None);\n+    assert_eq!(a.range(..).max(), None);\n+    assert_eq!(a.difference(&BTreeSet::new()).min(), None);\n+    assert_eq!(a.difference(&BTreeSet::new()).max(), None);\n+    assert_eq!(a.intersection(&a).min(), None);\n+    assert_eq!(a.intersection(&a).max(), None);\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).min(), None);\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).max(), None);\n+    assert_eq!(a.union(&a).min(), None);\n+    assert_eq!(a.union(&a).max(), None);\n+    a.insert(1);\n+    a.insert(2);\n+    assert_eq!(a.iter().min(), Some(&1));\n+    assert_eq!(a.iter().max(), Some(&2));\n+    assert_eq!(a.range(..).min(), Some(&1));\n+    assert_eq!(a.range(..).max(), Some(&2));\n+    assert_eq!(a.difference(&BTreeSet::new()).min(), Some(&1));\n+    assert_eq!(a.difference(&BTreeSet::new()).max(), Some(&2));\n+    assert_eq!(a.intersection(&a).min(), Some(&1));\n+    assert_eq!(a.intersection(&a).max(), Some(&2));\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).min(), Some(&1));\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).max(), Some(&2));\n+    assert_eq!(a.union(&a).min(), Some(&1));\n+    assert_eq!(a.union(&a).max(), Some(&2));\n+}\n+\n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)\n where\n     F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut dyn FnMut(&i32) -> bool) -> bool,"}, {"sha": "c2cf64393adf8db1a1b62438629a9eac8521a920", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -1801,6 +1801,21 @@ impl<T: Clone> SpecFromElem for T {\n     }\n }\n \n+impl SpecFromElem for i8 {\n+    #[inline]\n+    fn from_elem(elem: i8, n: usize) -> Vec<i8> {\n+        if elem == 0 {\n+            return Vec { buf: RawVec::with_capacity_zeroed(n), len: n };\n+        }\n+        unsafe {\n+            let mut v = Vec::with_capacity(n);\n+            ptr::write_bytes(v.as_mut_ptr(), elem as u8, n);\n+            v.set_len(n);\n+            v\n+        }\n+    }\n+}\n+\n impl SpecFromElem for u8 {\n     #[inline]\n     fn from_elem(elem: u8, n: usize) -> Vec<u8> {\n@@ -1845,7 +1860,6 @@ macro_rules! impl_is_zero {\n     };\n }\n \n-impl_is_zero!(i8, |x| x == 0);\n impl_is_zero!(i16, |x| x == 0);\n impl_is_zero!(i32, |x| x == 0);\n impl_is_zero!(i64, |x| x == 0);"}, {"sha": "46e6ea7cd18660a35cbec63c115314805a2f4fb0", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -358,12 +358,13 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///     - an (unstable) [extern type], then this function is always safe to\n ///       call, but may panic or otherwise return the wrong value, as the\n ///       extern type's layout is not known. This is the same behavior as\n-///       [`size_of_val`] on a reference to an extern type tail.\n+///       [`size_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n+/// [`size_of_val`]: ../../core/mem/fn.size_of_val.html\n ///\n /// # Examples\n ///\n@@ -492,12 +493,13 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n ///     - an (unstable) [extern type], then this function is always safe to\n ///       call, but may panic or otherwise return the wrong value, as the\n ///       extern type's layout is not known. This is the same behavior as\n-///       [`align_of_val`] on a reference to an extern type tail.\n+///       [`align_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n /// [slice]: ../../std/primitive.slice.html\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n+/// [`align_of_val`]: ../../core/mem/fn.align_of_val.html\n ///\n /// # Examples\n ///"}, {"sha": "7aca6af3de6f3641f5daefcf0b0b9b3b422c3e55", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -142,11 +142,6 @@ use crate::{\n     ops::{self, Deref, DerefMut},\n };\n \n-// Note that this is not a lang item per se, but it has a hidden dependency on\n-// `Iterator`, which is one. The compiler assumes that the `next` method of\n-// `Iterator` is an enumeration with one type parameter and two variants,\n-// which basically means it must be `Option`.\n-\n /// The `Option` type. See [the module level documentation](index.html) for more.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[rustc_diagnostic_item = \"option_type\"]"}, {"sha": "e9a8b9095bf72d2845da10d211fef979bdf61e73", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -617,12 +617,22 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n         a: &Self,\n         b: &Self,\n     ) -> RelateResult<'tcx, Self> {\n-        if a.len() != b.len() {\n+        let tcx = relation.tcx();\n+\n+        // FIXME: this is wasteful, but want to do a perf run to see how slow it is.\n+        // We need to perform this deduplication as we sometimes generate duplicate projections\n+        // in `a`.\n+        let mut a_v: Vec<_> = a.into_iter().collect();\n+        let mut b_v: Vec<_> = b.into_iter().collect();\n+        a_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        a_v.dedup();\n+        b_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        b_v.dedup();\n+        if a_v.len() != b_v.len() {\n             return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));\n         }\n \n-        let tcx = relation.tcx();\n-        let v = a.iter().zip(b.iter()).map(|(ep_a, ep_b)| {\n+        let v = a_v.into_iter().zip(b_v.into_iter()).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n             match (ep_a, ep_b) {\n                 (Trait(ref a), Trait(ref b)) => Ok(Trait(relation.relate(a, b)?)),"}, {"sha": "e1c5a4f5b18852ef01196f73db3abcf9818df95c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -350,14 +350,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n-        let op = self.ecx.eval_place_to_op(place, None).ok();\n+        let op = match self.ecx.eval_place_to_op(place, None) {\n+            Ok(op) => op,\n+            Err(e) => {\n+                trace!(\"get_const failed: {}\", e);\n+                return None;\n+            }\n+        };\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n-        match op.map(|ret| self.ecx.try_read_immediate(ret)) {\n-            Some(Ok(Ok(imm))) => Some(imm.into()),\n+        Some(match self.ecx.try_read_immediate(op) {\n+            Ok(Ok(imm)) => imm.into(),\n             _ => op,\n-        }\n+        })\n     }\n \n     /// Remove `local` from the pool of `Locals`. Allows writing to them,\n@@ -872,8 +878,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 let can_const_prop = self.can_const_prop[place.local];\n                 if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                    // This will return None for variables that are from other blocks,\n-                    // so it should be okay to propagate from here on down.\n+                    // This will return None if the above `const_prop` invocation only \"wrote\" a\n+                    // type whose creation requires no write. E.g. a generator whose initial state\n+                    // consists solely of uninitialized memory (so it doesn't capture any locals).\n                     if let Some(value) = self.get_const(place) {\n                         if self.should_const_prop(value) {\n                             trace!(\"replacing {:?} with {:?}\", rval, value);"}, {"sha": "d01545619c8fa22527adc559943cd8a00301eef4", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -48,8 +48,10 @@ pub fn target() -> Result<Target, String> {\n         \"ENCLAVE_SIZE\",\n         \"CFGDATA_BASE\",\n         \"DEBUG\",\n-        \"EH_FRM_HDR_BASE\",\n-        \"EH_FRM_HDR_SIZE\",\n+        \"EH_FRM_HDR_OFFSET\",\n+        \"EH_FRM_HDR_LEN\",\n+        \"EH_FRM_OFFSET\",\n+        \"EH_FRM_LEN\",\n         \"TEXT_BASE\",\n         \"TEXT_SIZE\",\n     ];"}, {"sha": "35b15cf717cee1270b687315e450e8dacf8717c7", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -123,10 +123,6 @@ pub struct Options {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     pub default_passes: DefaultPassOption,\n-    /// Document items that have lower than `pub` visibility.\n-    pub document_private: bool,\n-    /// Document items that have `doc(hidden)`.\n-    pub document_hidden: bool,\n     /// Any passes manually selected by the user.\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n@@ -177,8 +173,6 @@ impl fmt::Debug for Options {\n             .field(\"test_args\", &self.test_args)\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n-            .field(\"document_private\", &self.document_private)\n-            .field(\"document_hidden\", &self.document_hidden)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n@@ -250,6 +244,10 @@ pub struct RenderOptions {\n     pub generate_search_filter: bool,\n     /// Option (disabled by default) to generate files used by RLS and some other tools.\n     pub generate_redirect_pages: bool,\n+    /// Document items that have lower than `pub` visibility.\n+    pub document_private: bool,\n+    /// Document items that have `doc(hidden)`.\n+    pub document_hidden: bool,\n }\n \n impl Options {\n@@ -567,8 +565,6 @@ impl Options {\n             should_test,\n             test_args,\n             default_passes,\n-            document_private,\n-            document_hidden,\n             manual_passes,\n             display_warnings,\n             show_coverage,\n@@ -597,6 +593,8 @@ impl Options {\n                 markdown_playground_url,\n                 generate_search_filter,\n                 generate_redirect_pages,\n+                document_private,\n+                document_hidden,\n             },\n             output_format,\n         })"}, {"sha": "8ab6c74289d1798d1f7ada7bb0e73d8a15bf5e2e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -62,6 +62,8 @@ pub struct DocContext<'tcx> {\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     pub generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n     pub auto_traits: Vec<DefId>,\n+    /// The options given to rustdoc that could be relevant to a pass.\n+    pub render_options: RenderOptions,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -281,8 +283,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         describe_lints,\n         lint_cap,\n         mut default_passes,\n-        mut document_private,\n-        document_hidden,\n         mut manual_passes,\n         display_warnings,\n         render_options,\n@@ -448,6 +448,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         .cloned()\n                         .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n                         .collect(),\n+                    render_options,\n                 };\n                 debug!(\"crate: {:?}\", tcx.hir().krate());\n \n@@ -524,7 +525,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n \n                     if attr.is_word() && name == sym::document_private_items {\n-                        document_private = true;\n+                        ctxt.render_options.document_private = true;\n                     }\n                 }\n \n@@ -544,9 +545,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 for p in passes {\n                     let run = match p.condition {\n                         Always => true,\n-                        WhenDocumentPrivate => document_private,\n-                        WhenNotDocumentPrivate => !document_private,\n-                        WhenNotDocumentHidden => !document_hidden,\n+                        WhenDocumentPrivate => ctxt.render_options.document_private,\n+                        WhenNotDocumentPrivate => !ctxt.render_options.document_private,\n+                        WhenNotDocumentHidden => !ctxt.render_options.document_hidden,\n                     };\n                     if run {\n                         debug!(\"running pass {}\", p.pass.name);\n@@ -556,7 +557,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 ctxt.sess().abort_if_errors();\n \n-                (krate, ctxt.renderinfo.into_inner(), render_options)\n+                (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n             })\n         })\n     })"}, {"sha": "a453a8b3dcb2ae23cec835fe71c990c960740a9d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -468,7 +468,7 @@ impl clean::Path {\n \n pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let cache = cache();\n-    if !did.is_local() && !cache.access_levels.is_public(did) {\n+    if !did.is_local() && !cache.access_levels.is_public(did) && !cache.document_private {\n         return None;\n     }\n "}, {"sha": "04c4685213b2e7df6ad05df902306e7c7156afef", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -469,6 +469,7 @@ pub fn run(\n         static_root_path,\n         generate_search_filter,\n         generate_redirect_pages,\n+        document_private,\n         ..\n     } = options;\n \n@@ -546,7 +547,7 @@ pub fn run(\n     scx.ensure_dir(&dst)?;\n     krate = sources::render(&dst, &mut scx, krate)?;\n     let (new_crate, index, cache) =\n-        Cache::from_krate(renderinfo, &extern_html_root_urls, &dst, krate);\n+        Cache::from_krate(renderinfo, document_private, &extern_html_root_urls, &dst, krate);\n     krate = new_crate;\n     let cache = Arc::new(cache);\n     let mut cx = Context {"}, {"sha": "1b5c8a9378e41efbd55ce77343bd0817b63e86e7", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -91,6 +91,10 @@ crate struct Cache {\n     /// The version of the crate being documented, if given from the `--crate-version` flag.\n     pub crate_version: Option<String>,\n \n+    /// Whether to document private items.\n+    /// This is stored in `Cache` so it doesn't need to be passed through all rustdoc functions.\n+    pub document_private: bool,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n     stack: Vec<String>,\n     parent_stack: Vec<DefId>,\n@@ -126,6 +130,7 @@ crate struct Cache {\n impl Cache {\n     pub fn from_krate(\n         renderinfo: RenderInfo,\n+        document_private: bool,\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n         mut krate: clean::Crate,\n@@ -160,6 +165,7 @@ impl Cache {\n             stripped_mod: false,\n             access_levels,\n             crate_version: krate.version.take(),\n+            document_private,\n             orphan_impl_items: Vec::new(),\n             orphan_trait_impls: Vec::new(),\n             traits: krate.external_traits.replace(Default::default()),"}, {"sha": "8da74f375d9ceb1916e17c5da9e584e545a84268", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -178,6 +178,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });\n+            debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, result, ns);\n             let result = match result {\n                 Ok((_, Res::Err)) => Err(ErrorKind::ResolutionFailure),\n                 _ => result.map_err(|_| ErrorKind::ResolutionFailure),\n@@ -202,7 +203,13 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n-                    _ => return Ok((res, extra_fragment.clone())),\n+                    other => {\n+                        debug!(\n+                            \"failed to resolve {} in namespace {:?} (got {:?})\",\n+                            path_str, ns, other\n+                        );\n+                        return Ok((res, extra_fragment.clone()));\n+                    }\n                 };\n \n                 if value != (ns == ValueNS) {\n@@ -555,12 +562,13 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             } else {\n                 (parts[0].to_owned(), None)\n             };\n+            let resolved_self;\n+            let mut path_str;\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let mut path_str = if let Some(prefix) =\n-                    [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n-                        .iter()\n-                        .find(|p| link.starts_with(**p))\n+                path_str = if let Some(prefix) = [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n+                    .iter()\n+                    .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(TypeNS);\n                     link.trim_start_matches(prefix)\n@@ -614,7 +622,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 let base_node =\n                     if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n \n-                let resolved_self;\n                 // replace `Self` with suitable item's parent name\n                 if path_str.starts_with(\"Self::\") {\n                     if let Some(ref name) = parent_name {\n@@ -760,6 +767,32 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             if let Res::PrimTy(_) = res {\n                 item.attrs.links.push((ori_link, None, fragment));\n             } else {\n+                debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n+                if let Some(local) = res.opt_def_id().and_then(|def_id| def_id.as_local()) {\n+                    use rustc_hir::def_id::LOCAL_CRATE;\n+\n+                    let hir_id = self.cx.tcx.hir().as_local_hir_id(local);\n+                    if !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_id)\n+                        && !self.cx.render_options.document_private\n+                    {\n+                        let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+                        let err_msg = format!(\n+                            \"public documentation for `{}` links to a private item\",\n+                            item_name\n+                        );\n+                        build_diagnostic(\n+                            cx,\n+                            &item,\n+                            path_str,\n+                            &dox,\n+                            link_range,\n+                            &err_msg,\n+                            \"this item is private\",\n+                            None,\n+                        );\n+                        continue;\n+                    }\n+                }\n                 let id = register_res(cx, res);\n                 item.attrs.links.push((ori_link, Some(id), fragment));\n             }"}, {"sha": "d972cf6db18cf15d224c7cbe0e6d65f77705a1f6", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -1217,11 +1217,66 @@ mod self_keyword {}\n /// The implementing type within a [`trait`] or [`impl`] block, or the current type within a type\n /// definition.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// Within a type definition:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// struct Node {\n+///     elem: i32,\n+///     // `Self` is a `Node` here.\n+///     next: Option<Box<Self>>,\n+/// }\n+/// ```\n+///\n+/// In an [`impl`] block:\n+///\n+/// ```\n+/// struct Foo(i32);\n+///\n+/// impl Foo {\n+///     fn new() -> Self {\n+///         Self(0)\n+///     }\n+/// }\n+///\n+/// assert_eq!(Foo::new().0, Foo(0).0);\n+/// ```\n+///\n+/// Generic parameters are implicit with `Self`:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// struct Wrap<T> {\n+///     elem: T,\n+/// }\n+///\n+/// impl<T> Wrap<T> {\n+///     fn new(elem: T) -> Self {\n+///         Self { elem }\n+///     }\n+/// }\n+/// ```\n+///\n+/// In a [`trait`] definition and related [`impl`] block:\n+///\n+/// ```\n+/// trait Example {\n+///     fn example() -> Self;\n+/// }\n+///\n+/// struct Foo(i32);\n+///\n+/// impl Example for Foo {\n+///     fn example() -> Self {\n+///         Self(42)\n+///     }\n+/// }\n+///\n+/// assert_eq!(Foo::example().0, Foo(42).0);\n+/// ```\n ///\n /// [`impl`]: keyword.impl.html\n /// [`trait`]: keyword.trait.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod self_upper_keyword {}\n \n #[doc(keyword = \"static\")]\n@@ -1345,10 +1400,26 @@ mod struct_keyword {}\n //\n /// The parent of the current [module].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// # fn main() {}\n+/// mod a {\n+///     pub fn foo() {}\n+/// }\n+/// mod b {\n+///     pub fn foo() {\n+///         super::a::foo(); // call a's foo function\n+///     }\n+/// }\n+/// ```\n+///\n+/// It is also possible to use `super` multiple times: `super::super::foo`,\n+/// going up the ancestor chain.\n+///\n+/// See the [Reference] for more information.\n ///\n /// [module]: ../reference/items/modules.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// [Reference]: ../reference/paths.html#super\n mod super_keyword {}\n \n #[doc(keyword = \"trait\")]"}, {"sha": "f61bcf06f081550abac509e657e152f80edac9b7", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -11,7 +11,7 @@ IMAGE_BASE:\n     .long 1                    /* type = NT_VERSION */\n 0:  .asciz \"toolchain-version\" /* name */\n 1:  .align 4\n-2:  .long 0                    /* desc - toolchain version number, 32-bit LE */\n+2:  .long 1                    /* desc - toolchain version number, 32-bit LE */\n 3:  .align 4\n \n .section .rodata\n@@ -60,10 +60,14 @@ IMAGE_BASE:\n     globvar TEXT_BASE 8\n     /*  The size in bytes of enclacve text section */\n     globvar TEXT_SIZE 8\n-    /*  The base address (relative to enclave start) of the enclave EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_BASE 8\n-    /*  The size in bytes of enclacve EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_SIZE 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_OFFSET 8\n+    /*  The size in bytes of enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_LEN 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame section */\n+    globvar EH_FRM_OFFSET 8\n+    /*  The size in bytes of enclacve .eh_frame section */\n+    globvar EH_FRM_LEN 8\n \n .org .Lxsave_clear+512\n .Lxsave_header:"}, {"sha": "31d235cf679db1ff072ce923f089f923b5004293", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -9,6 +9,8 @@ fn main() {\n     {\n         // Build the unwinding from libunwind C/C++ source code.\n         llvm_libunwind::compile();\n+    } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+        llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n             // linking for musl is handled in lib.rs\n@@ -55,6 +57,7 @@ mod llvm_libunwind {\n \n     /// Compile the libunwind C/C++ source code.\n     pub fn compile() {\n+        let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n         let target_env = env::var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n         let target_vendor = env::var(\"CARGO_CFG_TARGET_VENDOR\").unwrap();\n         let target_endian_little = env::var(\"CARGO_CFG_TARGET_ENDIAN\").unwrap() != \"big\";\n@@ -75,6 +78,35 @@ mod llvm_libunwind {\n             cfg.flag(\"/EHsc\");\n             cfg.define(\"_CRT_SECURE_NO_WARNINGS\", None);\n             cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+        } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            cfg.cpp(false);\n+\n+            cfg.static_flag(true);\n+            cfg.opt_level(3);\n+\n+            cfg.flag(\"-nostdinc++\");\n+            cfg.flag(\"-fno-exceptions\");\n+            cfg.flag(\"-fno-rtti\");\n+            cfg.flag(\"-fstrict-aliasing\");\n+            cfg.flag(\"-funwind-tables\");\n+            cfg.flag(\"-fvisibility=hidden\");\n+            cfg.flag(\"-fno-stack-protector\");\n+            cfg.flag(\"-ffreestanding\");\n+            cfg.flag(\"-fexceptions\");\n+\n+            // easiest way to undefine since no API available in cc::Build to undefine\n+            cfg.flag(\"-U_FORTIFY_SOURCE\");\n+            cfg.define(\"_FORTIFY_SOURCE\", \"0\");\n+\n+            cfg.flag_if_supported(\"-fvisibility-global-new-delete-hidden\");\n+\n+            cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+            cfg.define(\"RUST_SGX\", \"1\");\n+            cfg.define(\"__NO_STRING_INLINES\", None);\n+            cfg.define(\"__NO_MATH_INLINES\", None);\n+            cfg.define(\"_LIBUNWIND_IS_BAREMETAL\", None);\n+            cfg.define(\"__LIBUNWIND_IS_NATIVE_ONLY\", None);\n+            cfg.define(\"NDEBUG\", None);\n         } else {\n             cfg.flag(\"-std=c99\");\n             cfg.flag(\"-std=c++11\");\n@@ -103,6 +135,10 @@ mod llvm_libunwind {\n             unwind_sources.push(\"Unwind_AppleExtras.cpp\");\n         }\n \n+        if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            unwind_sources.push(\"UnwindRustSgx.c\");\n+        }\n+\n         let root = Path::new(\"../llvm-project/libunwind\");\n         cfg.include(root.join(\"include\"));\n         for src in unwind_sources {"}, {"sha": "0a8dafdaf94667ef591fcc5f9ad5f8fd00c28cb3", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -0,0 +1,10 @@\n+warning: `[DontDocMe]` public documentation for `DocMe` links to a private item\n+  --> $DIR/intra-links-private.rs:6:11\n+   |\n+LL | /// docs [DontDocMe]\n+   |           ^^^^^^^^^ this item is private\n+   |\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7906aba5b1a9c27265a2b17ae1ae8a6045c3885", "filename": "src/test/rustdoc-ui/intra-links-private.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// revisions: public private\n+// [private]compile-flags: --document-private-items\n+#![cfg_attr(private, deny(intra_doc_resolution_failure))]\n+\n+/// docs [DontDocMe]\n+//[public]~^ WARNING `[DontDocMe]` public documentation for `DocMe` links to a private item\n+// FIXME: for [private] we should also make sure the link was actually generated\n+pub struct DocMe;\n+struct DontDocMe;"}, {"sha": "21cb7eb9040bdecead088b4b46b3defe7705056c", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -0,0 +1,6 @@\n+// ignore-test\n+// check-pass\n+\n+/// docs [label][with#anchor#error]\n+//~^ WARNING has an issue with the link anchor\n+pub struct S;"}, {"sha": "5bbc62b76dd044fc85f91a8ea7143c855e70bc7d", "filename": "src/test/rustdoc-ui/reference-link-has-one-warning.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-has-one-warning.stderr?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -0,0 +1,10 @@\n+warning: `[with#anchor#error]` has an issue with the link anchor.\n+  --> $DIR/reference-link-has-one-warning.rs:3:18\n+   |\n+LL | /// docs [label][with#anchor#error]\n+   |                  ^^^^^^^^^^^^^^^^^ only one `#` is allowed in a link\n+   |\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c0e8837749eb4ca93677ce4de379ba37354a8fd3", "filename": "src/test/ui/issues/issue-59326.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394e1b40d264aa6928811919c1124fa248e7d802/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59326.rs?ref=394e1b40d264aa6928811919c1124fa248e7d802", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+trait Service {\n+    type S;\n+}\n+\n+trait Framing {\n+    type F;\n+}\n+\n+impl Framing for () {\n+    type F = ();\n+}\n+\n+trait HttpService<F: Framing>: Service<S = F::F> {}\n+\n+type BoxService = Box<dyn HttpService<(), S = ()>>;\n+\n+fn build_server<F: FnOnce() -> BoxService>(_: F) {}\n+\n+fn make_server<F: Framing>() -> Box<dyn HttpService<F, S = F::F>> {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    build_server(|| make_server())\n+}"}]}