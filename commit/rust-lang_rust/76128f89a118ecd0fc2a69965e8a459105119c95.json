{"sha": "76128f89a118ecd0fc2a69965e8a459105119c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MTI4Zjg5YTExOGVjZDBmYzJhNjk5NjVlOGE0NTkxMDUxMTljOTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T18:22:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T11:45:31Z"}, "message": "Fix tidy.", "tree": {"sha": "57392f84c184bead09b01a511102496208eade28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57392f84c184bead09b01a511102496208eade28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76128f89a118ecd0fc2a69965e8a459105119c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76128f89a118ecd0fc2a69965e8a459105119c95", "html_url": "https://github.com/rust-lang/rust/commit/76128f89a118ecd0fc2a69965e8a459105119c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76128f89a118ecd0fc2a69965e8a459105119c95/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daff3e346c4d8a79fdf20fcc92a7919c28f53840", "url": "https://api.github.com/repos/rust-lang/rust/commits/daff3e346c4d8a79fdf20fcc92a7919c28f53840", "html_url": "https://github.com/rust-lang/rust/commit/daff3e346c4d8a79fdf20fcc92a7919c28f53840"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "97228c8f2403882df34d8ccd17279960f046693e", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=76128f89a118ecd0fc2a69965e8a459105119c95", "patch": "@@ -169,7 +169,8 @@ impl hir::Pat {\n         self.each_binding(|annotation, _, _, _| {\n             match annotation {\n                 hir::BindingAnnotation::Ref => match result {\n-                    None | Some(hir::Mutability::Immutable) => result = Some(hir::Mutability::Immutable),\n+                    None | Some(hir::Mutability::Immutable) =>\n+                        result = Some(hir::Mutability::Immutable),\n                     _ => {}\n                 }\n                 hir::BindingAnnotation::RefMut => result = Some(hir::Mutability::Mutable),"}, {"sha": "26055d329bcbd19736321a6604a474600b172a67", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=76128f89a118ecd0fc2a69965e8a459105119c95", "patch": "@@ -1571,8 +1571,10 @@ impl EncodeContext<'tcx> {\n                 };\n                 EntryKind::ForeignFn(self.lazy(data))\n             }\n-            hir::ForeignItemKind::Static(_, hir::Mutability::Mutable) => EntryKind::ForeignMutStatic,\n-            hir::ForeignItemKind::Static(_, hir::Mutability::Immutable) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemKind::Static(_, hir::Mutability::Mutable) =>\n+                EntryKind::ForeignMutStatic,\n+            hir::ForeignItemKind::Static(_, hir::Mutability::Immutable) =>\n+                EntryKind::ForeignImmStatic,\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         });\n         record!(self.per_def.visibility[def_id] <-"}, {"sha": "87a431a7fb80d3a102228be6eb521f93e0a87eec", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=76128f89a118ecd0fc2a69965e8a459105119c95", "patch": "@@ -250,7 +250,9 @@ fn place_components_conflict<'tcx>(\n                     // Shouldn't be tracked\n                     bug!(\"Tracking borrow behind shared reference.\");\n                 }\n-                (ProjectionElem::Deref, ty::Ref(_, _, hir::Mutability::Mutable), AccessDepth::Drop) => {\n+                (ProjectionElem::Deref,\n+                 ty::Ref(_, _, hir::Mutability::Mutable),\n+                 AccessDepth::Drop) => {\n                     // Values behind a mutable reference are not access either by dropping a\n                     // value, or by StorageDead\n                     debug!(\"borrow_conflicts_with_place: drop access behind ptr\");"}, {"sha": "3245f2cca79cbe2aa5cda07fd1e483542e069537", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76128f89a118ecd0fc2a69965e8a459105119c95/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=76128f89a118ecd0fc2a69965e8a459105119c95", "patch": "@@ -627,7 +627,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     ) -> Result<CastKind, CastError> {\n         // array-ptr-cast.\n \n-        if m_expr.mutbl == hir::Mutability::Immutable && m_cast.mutbl == hir::Mutability::Immutable {\n+        if m_expr.mutbl == hir::Mutability::Immutable &&\n+            m_cast.mutbl == hir::Mutability::Immutable {\n             if let ty::Array(ety, _) = m_expr.ty.kind {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of"}]}