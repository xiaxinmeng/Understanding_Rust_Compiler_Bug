{"sha": "c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "node_id": "C_kwDOAAsO6NoAKGM5Y2Y4YWVhYjhkNWI2OGYxODNiMjdkNDZiODc2NWEwMDI2ZjU0NGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-07T21:55:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T21:55:26Z"}, "message": "Rollup merge of #97831 - tmiasko:rm-always-live-locals-struct, r=davidtwco\n\nRemove `AlwaysLiveLocals` wrapper struct\n\nIt is just a wrapper around a `BitSet` and\ndoesn't have any functionality of its own.", "tree": {"sha": "c46e8708392749de89de1d3ba4cc640f2dedf3ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c46e8708392749de89de1d3ba4cc640f2dedf3ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJin8lOCRBK7hj4Ov3rIwAAlIIIAB90LYfZOWr2eP9D+Og/qPR+\nmGEGP7jJmFyfI5F9hUhxKl3oMVNOj6NYRjGQWbASnUnw54FUw+4F5tzN7i890aMO\nCSmufYZFxmzAvdp+4hSUXELWDUK4Bw+asc5m3BSR7LJ+Q82oEsavCiVg5x1KCdRT\nVUr1V9VSn0g//zXv8XtMKRbG9EfYP97r0jXGqom6lKQSZiHLe0smUHWppyI4YbZI\nRXKar/Cv3uD9lkiP54O+/BjWjtc1uxTiGRvMxvd/++jz7tj2SRWYYyEQKmFG8IfK\nN861BfUxRSGT+lfssWGa9e649x5UBz0kxysPDdld18jxMXZsjiV42jTmrw+4iP4=\n=Kf3S\n-----END PGP SIGNATURE-----\n", "payload": "tree c46e8708392749de89de1d3ba4cc640f2dedf3ec\nparent 36e9cbc0be5382c9009512a7238b90bd196ca803\nparent 631d767fee70a7514f212b7de72a77dc32587c0a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654638926 +0200\ncommitter GitHub <noreply@github.com> 1654638926 +0200\n\nRollup merge of #97831 - tmiasko:rm-always-live-locals-struct, r=davidtwco\n\nRemove `AlwaysLiveLocals` wrapper struct\n\nIt is just a wrapper around a `BitSet` and\ndoesn't have any functionality of its own.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "html_url": "https://github.com/rust-lang/rust/commit/c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e9cbc0be5382c9009512a7238b90bd196ca803", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e9cbc0be5382c9009512a7238b90bd196ca803", "html_url": "https://github.com/rust-lang/rust/commit/36e9cbc0be5382c9009512a7238b90bd196ca803"}, {"sha": "631d767fee70a7514f212b7de72a77dc32587c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/631d767fee70a7514f212b7de72a77dc32587c0a", "html_url": "https://github.com/rust-lang/rust/commit/631d767fee70a7514f212b7de72a77dc32587c0a"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "4c23f84bd0075aa30f53150df2fbb5a3b44a12ef", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::storage::always_live_locals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n@@ -715,7 +715,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Now mark those locals as dead that we do not want to initialize\n         // Mark locals that use `Storage*` annotations as dead on function entry.\n-        let always_live = AlwaysLiveLocals::new(self.body());\n+        let always_live = always_live_locals(self.body());\n         for local in locals.indices() {\n             if !always_live.contains(local) {\n                 locals[local].value = LocalValue::Dead;"}, {"sha": "3f54d8642970c05c3afb918cb54fdc51fa4964ae", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n-use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::storage::always_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::{Size, VariantIdx};\n \n@@ -48,7 +48,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n         let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n \n-        let always_live_locals = AlwaysLiveLocals::new(body);\n+        let always_live_locals = always_live_locals(body);\n         let storage_liveness = MaybeStorageLive::new(always_live_locals)\n             .into_engine(tcx, body)\n             .iterate_to_fixpoint()"}, {"sha": "33d294181472931b760f91473eec1e5f1f82a709", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "patch": "@@ -1,18 +1,17 @@\n pub use super::*;\n \n-use crate::storage::AlwaysLiveLocals;\n use crate::{CallReturnPlaces, GenKill, Results, ResultsRefCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::cell::RefCell;\n \n #[derive(Clone)]\n pub struct MaybeStorageLive {\n-    always_live_locals: AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n }\n \n impl MaybeStorageLive {\n-    pub fn new(always_live_locals: AlwaysLiveLocals) -> Self {\n+    pub fn new(always_live_locals: BitSet<Local>) -> Self {\n         MaybeStorageLive { always_live_locals }\n     }\n }"}, {"sha": "4a354c4c65b08430964665479d3bec6fc73e0ffb", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "patch": "@@ -7,35 +7,17 @@ use rustc_middle::mir::{self, Local};\n //\n // FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n // as a field in the `LocalDecl` for each `Local`.\n-#[derive(Debug, Clone)]\n-pub struct AlwaysLiveLocals(BitSet<Local>);\n+pub fn always_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n+    let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n \n-impl AlwaysLiveLocals {\n-    pub fn new(body: &mir::Body<'_>) -> Self {\n-        let mut always_live_locals = AlwaysLiveLocals(BitSet::new_filled(body.local_decls.len()));\n-\n-        for block in body.basic_blocks() {\n-            for statement in &block.statements {\n-                use mir::StatementKind::{StorageDead, StorageLive};\n-                if let StorageLive(l) | StorageDead(l) = statement.kind {\n-                    always_live_locals.0.remove(l);\n-                }\n+    for block in body.basic_blocks() {\n+        for statement in &block.statements {\n+            use mir::StatementKind::{StorageDead, StorageLive};\n+            if let StorageLive(l) | StorageDead(l) = statement.kind {\n+                always_live_locals.remove(l);\n             }\n         }\n-\n-        always_live_locals\n     }\n \n-    pub fn into_inner(self) -> BitSet<Local> {\n-        self.0\n-    }\n-}\n-\n-impl std::ops::Deref for AlwaysLiveLocals {\n-    type Target = BitSet<Local>;\n-\n-    #[inline]\n-    fn deref(&self) -> &Self::Target {\n-        &self.0\n-    }\n+    always_live_locals\n }"}, {"sha": "89895fddd0cfabd8f6cf1847e4968f7ff5fca872", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf8aeab8d5b68f183b27d46b8765a0026f544a/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=c9cf8aeab8d5b68f183b27d46b8765a0026f544a", "patch": "@@ -228,7 +228,7 @@ struct TransformVisitor<'tcx> {\n     suspension_points: Vec<SuspensionPoint<'tcx>>,\n \n     // The set of locals that have no `StorageLive`/`StorageDead` annotations.\n-    always_live_locals: storage::AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n \n     // The original RETURN_PLACE local\n     new_ret_local: Local,\n@@ -450,7 +450,7 @@ struct LivenessInfo {\n fn locals_live_across_suspend_points<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n-    always_live_locals: &storage::AlwaysLiveLocals,\n+    always_live_locals: &BitSet<Local>,\n     movable: bool,\n ) -> LivenessInfo {\n     let body_ref: &Body<'_> = &body;\n@@ -615,7 +615,7 @@ impl ops::Deref for GeneratorSavedLocals {\n fn compute_storage_conflicts<'mir, 'tcx>(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n-    always_live_locals: storage::AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n     requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), saved_locals.domain_size());\n@@ -625,7 +625,7 @@ fn compute_storage_conflicts<'mir, 'tcx>(\n \n     // Locals that are always live or ones that need to be stored across\n     // suspension points are not eligible for overlap.\n-    let mut ineligible_locals = always_live_locals.into_inner();\n+    let mut ineligible_locals = always_live_locals;\n     ineligible_locals.intersect(&**saved_locals);\n \n     // Compute the storage conflicts for all eligible locals.\n@@ -1300,7 +1300,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             },\n         );\n \n-        let always_live_locals = storage::AlwaysLiveLocals::new(&body);\n+        let always_live_locals = storage::always_live_locals(&body);\n \n         let liveness_info =\n             locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);"}]}