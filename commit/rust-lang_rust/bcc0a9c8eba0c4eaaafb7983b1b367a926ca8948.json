{"sha": "bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzBhOWM4ZWJhMGM0ZWFhYWZiNzk4M2IxYjM2N2E5MjZjYTg5NDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-18T09:43:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T14:05:00Z"}, "message": "modify leak-check to track only outgoing edges from placeholders\n\nAlso, update the affected tests. This seems strictly better but it is\nactually more permissive than I initially intended. In particular it\naccepts this\n\n```\nforall<'a, 'b> {\n  exists<'intersection> {\n    'a: 'intersection,\n    'b: 'intersection,\n  }\n}\n```\n\nand I'm not sure I want to accept that. It implies that we have a\n`'empty` in the new universe intoduced by the `forall`.", "tree": {"sha": "98cd4d5a3ed85a1f4f036fb26788d172b3409e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98cd4d5a3ed85a1f4f036fb26788d172b3409e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "html_url": "https://github.com/rust-lang/rust/commit/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "html_url": "https://github.com/rust-lang/rust/commit/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3"}], "stats": {"total": 420, "additions": 219, "deletions": 201}, "files": [{"sha": "111a7b997a4867eaa8c6a46d12871213bd295940", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -42,10 +42,23 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n                 _ => bug!(\"leak_check: expected placeholder found {:?}\", placeholder_region,),\n             };\n \n-            // Find all regions that are related to this placeholder\n-            // in some way. This means any region that either outlives\n-            // or is outlived by a placeholder.\n-            let mut taint_set = TaintSet::new(TaintDirections::both(), placeholder_region);\n+            // Find all regions that this placeholder `!p` must outlive -- i.e.,\n+            // any region `r` where `!p: r` must hold. It is an error if any\n+            // such region `r` is another placeholder or in a universe that\n+            // can't see the placeholder. (This is actually incorrect, because\n+            // we don't take into account the possibility of bounds in\n+            // environment that tell us that the placeholder may be related to\n+            // other regions).\n+            //\n+            // Note that we *don't* look for cases like `r: !p`. This is\n+            // because:\n+            //\n+            // * If `r` is some other placeholder `!p1`, then we'll find the\n+            //   error when we search the regions that `!p1` must outlive.\n+            // * If `r` is a variable in some outer universe, then it can\n+            //   potentially be assigned to `'static`, so this relation could\n+            //   hold.\n+            let mut taint_set = TaintSet::new(TaintDirections::outgoing(), placeholder_region);\n             taint_set.fixed_point(\n                 tcx,\n                 self.undo_log.region_constraints(),"}, {"sha": "6977fd47a2e85f03ead9066f7d3b6ef41812d651", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -28,14 +28,14 @@ fn expect_free_supply_bound() {\n     // Here, we are given a function whose region is bound at closure level,\n     // but we expect one bound in the argument. Error results.\n     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-    //~^ ERROR type mismatch\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, we are given a `fn(&u32)` but we expect a `fn(&'x\n     // u32)`. In principle, this could be ok, but we demand equality.\n     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR type mismatch\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_closure() {\n@@ -44,7 +44,7 @@ fn expect_bound_supply_free_from_closure() {\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-    //~^ ERROR type mismatch\n+    //~^ ERROR mismatched types\n     });\n }\n "}, {"sha": "8a183bb704b4d7220010883ec6bed11131141264", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -36,46 +36,33 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:30:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:30:52\n    |\n-LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-   |    ------------------------------------------ required by a bound in this\n-LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n-...\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n+   |                                                    ^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `for<'r> fn(&'r u32)`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:37:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:37:53\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n-...\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                     ^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&'x u32)`\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:46:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:46:53\n    |\n-LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-   |    ------------------------------------------- required by a bound in this\n-LL |     where F: FnOnce(fn(&u32), &i32)\n-   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n-...\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+   |                                                     ^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r> fn(&'r u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0308, E0631.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n-LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n-   | |__________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n-              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "b3e3f5dc401cf22161f590df7d1d3a609cbba560", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |                            ^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }"}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n-LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n-   | |______________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n-              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n-LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n-   | |______________________________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n-              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:39:26\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-...\n-LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n-LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n-   | |______________________________________________________________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n-              found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "c4e838e6887b58f2dd1f40747181aef27761638a", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,11 +1,11 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/hr-subtype.rs:100:1\n+  --> $DIR/hr-subtype.rs:96:1\n    |\n LL | / fn main() {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^"}, {"sha": "995ec64d53b83b6ad6b67ec891e2663972316e63", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -42,10 +42,6 @@ macro_rules! check {\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n             //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n             //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n-            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n-            //[bound_co_a_co_b_ret_contra_a]~^^^^^^^ ERROR\n-            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR\n-            //[bound_co_a_b_vs_bound_co_a]~^^^^^^^^^ ERROR\n         }\n     }\n }\n@@ -103,4 +99,8 @@ fn main() {\n //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR fatal error triggered by #[rustc_error]\n //[bound_co_a_vs_bound_co_b]~^^^^ ERROR fatal error triggered by #[rustc_error]\n //[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_a_b_vs_bound_a]~^^^^^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_co_a_b_vs_bound_co_a]~^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_co_a_co_b_ret_contra_a]~^^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^^ ERROR fatal error triggered by #[rustc_error]\n }"}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -2,9 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |            -------------------   ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n-   |            |\n-   |            expected due to this\n+   |                                  ^^^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n               found fn pointer `fn(&u32)`"}, {"sha": "921061916fc95b7d46c891db83d39cfae29499a5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -32,5 +32,5 @@ fn main() {\n     // NB. *However*, the reinstated leak-check gives an error here.\n \n     foo::<()>();\n-    //~^ ERROR not satisfied\n+    //~^ ERROR implementation of `Trait` is not general enough\n }"}, {"sha": "fe8209d054c8ad641044ddda3eda030241b2ec80", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,18 +1,14 @@\n-error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: Trait<for<'b> fn(&'b u32)>,\n-   |        -------------------------- required by this bound in `foo`\n+LL | trait Trait<T> {}\n+   | ----------------- trait `Trait` defined here\n ...\n LL |     foo::<()>();\n-   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(&'a u32)>>\n+   = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n+   = note: ...but `()` actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ebb3abf184856de4a69b9fe9eceeed0f22da89f1", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,19 +1,12 @@\n-error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n+error[E0308]: mismatched types\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n    |\n-LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    -------------------- required by a bound in this\n-LL |     where B : for<'ccx> Bar<'ccx>\n-   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n-...\n LL |     want_bar_for_any_ccx(b);\n-   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |     ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-help: consider further restricting this bound\n-   |\n-LL |     where B : Qux + for<'ccx> Bar<'ccx>\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected type `for<'ccx> Bar<'ccx>`\n+              found type `Bar<'static>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bf7373059a074485da4a23bdf776783768c493bc", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,16 +1,16 @@\n-error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:24:17\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL | fn want_hrtb<T>()\n-   |    --------- required by a bound in this\n-LL |     where T : for<'a> Foo<&'a isize>\n-   |               ---------------------- required by this bound in `want_hrtb`\n+LL | / trait Foo<X> {\n+LL | |     fn foo(&self, x: X) { }\n+LL | | }\n+   | |_- trait `Foo` defined here\n ...\n-LL |     want_hrtb::<StaticInt>()\n-   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+LL |       want_hrtb::<StaticInt>()\n+   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <StaticInt as Foo<&'static isize>>\n+   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but `StaticInt` actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:30:17"}, {"sha": "eb6549099fe6a85b303af4529e473833abba5993", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -38,5 +38,5 @@ fn assert_foo<T: Foo>() {}\n \n fn main() {\n     assert_foo::<fn(&i32)>();\n-    //~^ ERROR the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n+    //~^ ERROR implementation of `Foo` is not general enough\n }"}, {"sha": "0865aa4224b9731c805a3684be62b100749e370a", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,15 +1,16 @@\n-error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n-  --> $DIR/issue-46989.rs:40:18\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/issue-46989.rs:40:5\n    |\n-LL | fn assert_foo<T: Foo>() {}\n-   |                  --- required by this bound in `assert_foo`\n+LL | / trait Foo {\n+LL | |\n+LL | | }\n+   | |_- trait `Foo` defined here\n ...\n-LL |     assert_foo::<fn(&i32)>();\n-   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+LL |       assert_foo::<fn(&i32)>();\n+   |       ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <fn(A) as Foo>\n+   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n+   = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ba82300fabea9f6282d152dc0b49a54ebb355f9", "filename": "src/test/ui/issues/issue-57362-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -17,7 +17,7 @@ impl<T> Trait for fn(&T) {\n \n fn f() {\n     let a: fn(_) = |_: &u8| {};\n-    a.f(); //~ ERROR no method named `f`\n+    a.f(); //~ ERROR implementation of `Trait` is not general enough\n }\n \n fn main() {}"}, {"sha": "24408420b1373d122c88061f1ada2ab5c26960d7", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,16 @@\n-error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current scope\n+error: implementation of `Trait` is not general enough\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n-LL |     a.f();\n-   |       ^ method not found in `fn(&u8)`\n+LL | / trait Trait {\n+LL | |     fn f(self);\n+LL | | }\n+   | |_- trait `Trait` defined here\n+...\n+LL |       a.f();\n+   |         ^ implementation of `Trait` is not general enough\n    |\n-   = note: `a` is a function, perhaps you wish to call it\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-note: `Trait` defines an item `f`, perhaps you need to implement it\n-  --> $DIR/issue-57362-1.rs:8:1\n-   |\n-LL | trait Trait {\n-   | ^^^^^^^^^^^\n+   = note: `Trait` would have to be implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `for<'r> fn(&'r u8)`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "7b6594abc96472e5f6b1f727b886bd7bcf326aaa", "filename": "src/test/ui/issues/issue-57362-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -19,7 +19,9 @@ impl<'a> X for fn(&'a ()) {\n }\n \n fn g() {\n-    let x = <fn (&())>::make_g(); //~ ERROR no function or associated item\n+    let x = <fn (&())>::make_g();\n+    //~^ ERROR implementation of `X` is not general enough\n+    //~| ERROR implementation of `X` is not general enough\n }\n \n fn main() {}"}, {"sha": "dfd48ec22275b440f111986305e96a4b2ba0ddce", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,16 +1,33 @@\n-error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n-  --> $DIR/issue-57362-2.rs:22:25\n+error: implementation of `X` is not general enough\n+  --> $DIR/issue-57362-2.rs:22:13\n    |\n-LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+LL | / trait X {\n+LL | |     type G;\n+LL | |     fn make_g() -> Self::G;\n+LL | | }\n+   | |_- trait `X` defined here\n+...\n+LL |       let x = <fn (&())>::make_g();\n+   |               ^^^^^^^^^^^^^^^^^^ implementation of `X` is not general enough\n    |\n-   = help: items from traits can only be used if the trait is implemented and in scope\n-note: `X` defines an item `make_g`, perhaps you need to implement it\n-  --> $DIR/issue-57362-2.rs:8:1\n+   = note: `X` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n+\n+error: implementation of `X` is not general enough\n+  --> $DIR/issue-57362-2.rs:22:13\n+   |\n+LL | / trait X {\n+LL | |     type G;\n+LL | |     fn make_g() -> Self::G;\n+   | |     ----------------------- due to a where-clause on `X::make_g`...\n+LL | | }\n+   | |_- trait `X` defined here\n+...\n+LL |       let x = <fn (&())>::make_g();\n+   |               ^^^^^^^^^^^^^^^^^^ doesn't satisfy where-clause\n    |\n-LL | trait X {\n-   | ^^^^^^^\n+   = note: ...`X` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: ...but `X` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "5e24a99bcc3311503721d0ec05cc7133d060c0d1", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -3,21 +3,21 @@\n // error. However, now that we handle subtyping correctly, we no\n // longer get an error, because we recognize these two types as\n // equivalent!\n-//\n-// Whoops -- now that we reinstituted the leak-check, we get an error\n-// again.\n \n fn foo(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n+    // The two types above are actually equivalent. With the older\n+    // leak check, though, we didn't consider them as equivalent, and\n+    // hence we gave errors. But now we've fixed that.\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n+        _ => y,\n     };\n }\n \n-fn bar(\n+fn foo_cast(\n     x: fn(&u8, &u8),\n     y: for<'a> fn(&'a u8, &'a u8),\n ) {\n@@ -28,5 +28,30 @@ fn bar(\n     };\n }\n \n+fn bar(\n+    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n+    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+) {\n+    // The two types above are not equivalent. With the older LUB/GLB\n+    // algorithm, this may have worked (I don't remember), but now it\n+    // doesn't because we require equality.\n+    let z = match 22 {\n+        0 => x,\n+        _ => y, //~ ERROR `match` arms have incompatible types\n+    };\n+}\n+\n+fn bar_cast(\n+    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n+    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+) {\n+    // But we can *upcast* explicitly the type of `x` and figure\n+    // things out:\n+    let z = match 22 {\n+        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+        _ => y,\n+    };\n+}\n+\n fn main() {\n }"}, {"sha": "d242fb7789aa1e76635ef7d26861077e647568b2", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,17 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr.rs:16:14\n+  --> $DIR/old-lub-glb-hr.rs:40:14\n    |\n LL |       let z = match 22 {\n    |  _____________-\n LL | |         0 => x,\n-   | |              - this is found to be of type `for<'r, 's> fn(&'r u8, &'s u8)`\n+   | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n LL | |         _ => y,\n-   | |              ^ expected bound lifetime parameter, found concrete lifetime\n+   | |              ^ expected bound lifetime parameter 'a, found concrete lifetime\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note:    expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n-           found fn pointer `for<'a> fn(&'a u8, &'a u8)`\n+   = note:    expected type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+           found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n \n error: aborting due to previous error\n "}, {"sha": "7848f770a70cf0b56f23e1730a4e121e47a5a3b4", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -11,10 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:12\n    |\n LL |     want_G(baz);\n-   |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n+   |            ^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n+              found fn pointer `for<'r> fn(&'r S) -> &'r S`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0ce38e69f6b0fa8c29c4a45f5305713e7e6f7d15", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -18,5 +18,5 @@ fn foo<T>(x: &T)\n {}\n \n fn main() {\n-    foo(&X); //~ ERROR trait bound\n+    foo(&X); //~ ERROR implementation of `Bar` is not general enough\n }"}, {"sha": "b3cadf5b1b078859b0b251a3f63d9046ec1b5505", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=bcc0a9c8eba0c4eaaafb7983b1b367a926ca8948", "patch": "@@ -1,17 +1,16 @@\n-error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n+error: implementation of `Bar` is not general enough\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL | fn foo<T>(x: &T)\n-   |    --- required by a bound in this\n-LL |     where for<'a> &'a T: Bar\n-   |                          --- required by this bound in `foo`\n+LL | / trait Bar {\n+LL | |     fn bar(&self);\n+LL | | }\n+   | |_- trait `Bar` defined here\n ...\n-LL |     foo(&X);\n-   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n+LL |       foo(&X);\n+   |       ^^^ implementation of `Bar` is not general enough\n    |\n-   = help: the following implementations were found:\n-             <&'static u32 as Bar>\n+   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n+   = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}]}