{"sha": "1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDE4ZjkyMzdiNmFjNDhjYTg0NjEzMDdmMmE0ZWFmMjczZWUzOTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T09:32:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T09:32:28Z"}, "message": "Merge #991\n\n991: Use Marker argument for item parsers r=matklad a=pcpthm\n\nBefore doing this for expressions, I found that the pattern (Marker argument) should be applied to the item parsers because visiblity and modifiers are parsed in a separate function.\r\n\r\nFixed some parser bugs:\r\n- Fix pub_expr: `pub 42;` was allowed.\r\n- Fix incorrect parsing of crate::path: incorrectly parsed as `crate` as a visibility.\n\nCo-authored-by: pcpthm <pcpthm@gmail.com>", "tree": {"sha": "7971e3753c74b98e0e5b4120adb8706a86d99e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7971e3753c74b98e0e5b4120adb8706a86d99e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "html_url": "https://github.com/rust-lang/rust/commit/1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7c117567ab55046a9303fc7a6676a50008ad4f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c117567ab55046a9303fc7a6676a50008ad4f33", "html_url": "https://github.com/rust-lang/rust/commit/7c117567ab55046a9303fc7a6676a50008ad4f33"}, {"sha": "76075c74103b3204ebc1bde54a330629d9e00811", "url": "https://api.github.com/repos/rust-lang/rust/commits/76075c74103b3204ebc1bde54a330629d9e00811", "html_url": "https://github.com/rust-lang/rust/commit/76075c74103b3204ebc1bde54a330629d9e00811"}], "stats": {"total": 230, "additions": 149, "deletions": 81}, "files": [{"sha": "e428faffbf150362e3d5e7b0ea1cf1a79526e844", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -86,7 +86,7 @@ impl BlockLike {\n     }\n }\n \n-fn opt_visibility(p: &mut Parser) {\n+fn opt_visibility(p: &mut Parser) -> bool {\n     match p.current() {\n         PUB_KW => {\n             let m = p.start();\n@@ -116,13 +116,19 @@ fn opt_visibility(p: &mut Parser) {\n         }\n         // test crate_keyword_vis\n         // crate fn main() { }\n-        CRATE_KW => {\n+        // struct S { crate field: u32 }\n+        // struct T(crate u32);\n+        //\n+        // test crate_keyword_path\n+        // fn foo() { crate::foo(); }\n+        CRATE_KW if p.nth(1) != COLONCOLON => {\n             let m = p.start();\n             p.bump();\n             m.complete(p, VISIBILITY);\n         }\n-        _ => (),\n+        _ => return false,\n     }\n+    true\n }\n \n fn opt_alias(p: &mut Parser) {"}, {"sha": "83812e938a47972deaa2b54000803747bb33028b", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -67,8 +67,6 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             Err(m) => m,\n         };\n \n-        // test pub_expr\n-        // fn foo() { pub 92; } //FIXME\n         if has_attrs {\n             m.abandon(p);\n             p.error(\"expected a let statement or an item after attributes in block\");"}, {"sha": "c24e6d1e0b576d9b79bbde0c389a2a2c9dba43e1", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 40, "deletions": 53, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -67,11 +67,14 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n }\n \n pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Result<(), Marker> {\n-    opt_visibility(p);\n-    if let Some(kind) = items_without_modifiers(p) {\n-        m.complete(p, kind);\n-        return Ok(());\n-    }\n+    // test_err pub_expr\n+    // fn foo() { pub 92; }\n+    let has_visibility = opt_visibility(p);\n+\n+    let m = match items_without_modifiers(p, m) {\n+        Ok(()) => return Ok(()),\n+        Err(m) => m,\n+    };\n \n     let mut has_mods = false;\n \n@@ -152,34 +155,29 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n             m.complete(p, IMPL_BLOCK);\n         }\n         _ => {\n-            if !has_mods {\n+            if !has_visibility && !has_mods {\n                 return Err(m);\n             } else {\n-                p.error(\"expected fn, trait or impl\");\n+                if has_mods {\n+                    p.error(\"expected fn, trait or impl\");\n+                } else {\n+                    p.error(\"expected an item\");\n+                }\n                 m.complete(p, ERROR);\n             }\n         }\n     }\n     Ok(())\n }\n \n-fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n+fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     let la = p.nth(1);\n-    let kind = match p.current() {\n+    match p.current() {\n         // test extern_crate\n         // extern crate foo;\n-        EXTERN_KW if la == CRATE_KW => {\n-            extern_crate_item(p);\n-            EXTERN_CRATE_ITEM\n-        }\n-        TYPE_KW => {\n-            type_def(p);\n-            TYPE_ALIAS_DEF\n-        }\n-        MOD_KW => {\n-            mod_item(p);\n-            MODULE\n-        }\n+        EXTERN_KW if la == CRATE_KW => extern_crate_item(p, m),\n+        TYPE_KW => type_def(p, m),\n+        MOD_KW => mod_item(p, m),\n         STRUCT_KW => {\n             // test struct_items\n             // struct Foo;\n@@ -190,14 +188,7 @@ fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, STRUCT_KW);\n-            if p.at(SEMI) {\n-                p.err_and_bump(\n-                    \"expected item, found `;`\\n\\\n-                     consider removing this semicolon\",\n-                );\n-            }\n-            STRUCT_DEF\n+            nominal::struct_def(p, m, STRUCT_KW);\n         }\n         IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n@@ -206,47 +197,41 @@ fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, UNION_KW);\n-            STRUCT_DEF\n-        }\n-        ENUM_KW => {\n-            nominal::enum_def(p);\n-            ENUM_DEF\n-        }\n-        USE_KW => {\n-            use_item::use_item(p);\n-            USE_ITEM\n-        }\n-        CONST_KW if (la == IDENT || la == MUT_KW) => {\n-            consts::const_def(p);\n-            CONST_DEF\n-        }\n-        STATIC_KW => {\n-            consts::static_def(p);\n-            STATIC_DEF\n+            nominal::struct_def(p, m, UNION_KW);\n         }\n+        ENUM_KW => nominal::enum_def(p, m),\n+        USE_KW => use_item::use_item(p, m),\n+        CONST_KW if (la == IDENT || la == MUT_KW) => consts::const_def(p, m),\n+        STATIC_KW => consts::static_def(p, m),\n         // test extern_block\n         // extern {}\n         EXTERN_KW\n             if la == L_CURLY || ((la == STRING || la == RAW_STRING) && p.nth(2) == L_CURLY) =>\n         {\n             abi(p);\n             extern_item_list(p);\n-            EXTERN_BLOCK\n+            m.complete(p, EXTERN_BLOCK);\n         }\n-        _ => return None,\n+        _ => return Err(m),\n     };\n-    Some(kind)\n+    if p.at(SEMI) {\n+        p.err_and_bump(\n+            \"expected item, found `;`\\n\\\n+             consider removing this semicolon\",\n+        );\n+    }\n+    Ok(())\n }\n \n-fn extern_crate_item(p: &mut Parser) {\n+fn extern_crate_item(p: &mut Parser, m: Marker) {\n     assert!(p.at(EXTERN_KW));\n     p.bump();\n     assert!(p.at(CRATE_KW));\n     p.bump();\n     name_ref(p);\n     opt_alias(p);\n     p.expect(SEMI);\n+    m.complete(p, EXTERN_CRATE_ITEM);\n }\n \n pub(crate) fn extern_item_list(p: &mut Parser) {\n@@ -295,7 +280,7 @@ fn fn_def(p: &mut Parser, flavor: ItemFlavor) {\n \n // test type_item\n // type Foo = Bar;\n-fn type_def(p: &mut Parser) {\n+fn type_def(p: &mut Parser, m: Marker) {\n     assert!(p.at(TYPE_KW));\n     p.bump();\n \n@@ -317,9 +302,10 @@ fn type_def(p: &mut Parser) {\n         types::type_(p);\n     }\n     p.expect(SEMI);\n+    m.complete(p, TYPE_ALIAS_DEF);\n }\n \n-pub(crate) fn mod_item(p: &mut Parser) {\n+pub(crate) fn mod_item(p: &mut Parser, m: Marker) {\n     assert!(p.at(MOD_KW));\n     p.bump();\n \n@@ -329,6 +315,7 @@ pub(crate) fn mod_item(p: &mut Parser) {\n     } else if !p.eat(SEMI) {\n         p.error(\"expected `;` or `{`\");\n     }\n+    m.complete(p, MODULE);\n }\n \n pub(crate) fn mod_item_list(p: &mut Parser) {"}, {"sha": "e6e6011c6a50d1b5f972a57e4df2f3d44d552cca", "filename": "crates/ra_parser/src/grammar/items/consts.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,14 +1,14 @@\n use super::*;\n \n-pub(super) fn static_def(p: &mut Parser) {\n-    const_or_static(p, STATIC_KW)\n+pub(super) fn static_def(p: &mut Parser, m: Marker) {\n+    const_or_static(p, m, STATIC_KW, STATIC_DEF)\n }\n \n-pub(super) fn const_def(p: &mut Parser) {\n-    const_or_static(p, CONST_KW)\n+pub(super) fn const_def(p: &mut Parser, m: Marker) {\n+    const_or_static(p, m, CONST_KW, CONST_DEF)\n }\n \n-fn const_or_static(p: &mut Parser, kw: SyntaxKind) {\n+fn const_or_static(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n     assert!(p.at(kw));\n     p.bump();\n     p.eat(MUT_KW); // TODO: validator to forbid const mut\n@@ -18,4 +18,5 @@ fn const_or_static(p: &mut Parser, kw: SyntaxKind) {\n         expressions::expr(p);\n     }\n     p.expect(SEMI);\n+    m.complete(p, def);\n }"}, {"sha": "a3579eebddef764ce978c55550bb818535ab0dbc", "filename": "crates/ra_parser/src/grammar/items/nominal.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-pub(super) fn struct_def(p: &mut Parser, kind: SyntaxKind) {\n+pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n     assert!(p.at(STRUCT_KW) || p.at_contextual_kw(\"union\"));\n     p.bump_remap(kind);\n \n@@ -12,19 +12,16 @@ pub(super) fn struct_def(p: &mut Parser, kind: SyntaxKind) {\n             match p.current() {\n                 SEMI => {\n                     p.bump();\n-                    return;\n                 }\n                 L_CURLY => named_field_def_list(p),\n                 _ => {\n                     //TODO: special case `(` error message\n                     p.error(\"expected `;` or `{`\");\n-                    return;\n                 }\n             }\n         }\n         SEMI if kind == STRUCT_KW => {\n             p.bump();\n-            return;\n         }\n         L_CURLY => named_field_def_list(p),\n         L_PAREN if kind == STRUCT_KW => {\n@@ -37,16 +34,15 @@ pub(super) fn struct_def(p: &mut Parser, kind: SyntaxKind) {\n         }\n         _ if kind == STRUCT_KW => {\n             p.error(\"expected `;`, `{`, or `(`\");\n-            return;\n         }\n         _ => {\n             p.error(\"expected `{`\");\n-            return;\n         }\n     }\n+    m.complete(p, STRUCT_DEF);\n }\n \n-pub(super) fn enum_def(p: &mut Parser) {\n+pub(super) fn enum_def(p: &mut Parser, m: Marker) {\n     assert!(p.at(ENUM_KW));\n     p.bump();\n     name_r(p, ITEM_RECOVERY_SET);\n@@ -57,6 +53,7 @@ pub(super) fn enum_def(p: &mut Parser) {\n     } else {\n         p.error(\"expected `{`\")\n     }\n+    m.complete(p, ENUM_DEF);\n }\n \n pub(crate) fn enum_variant_list(p: &mut Parser) {"}, {"sha": "ea2f9460406e589636ed77a8e90f2ea8be15d268", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,10 +1,11 @@\n use super::*;\n \n-pub(super) fn use_item(p: &mut Parser) {\n+pub(super) fn use_item(p: &mut Parser, m: Marker) {\n     assert!(p.at(USE_KW));\n     p.bump();\n     use_tree(p);\n     p.expect(SEMI);\n+    m.complete(p, USE_ITEM);\n }\n \n /// Parse a use 'tree', such as `some::path` in `use some::path;`"}, {"sha": "b87fe46bd61af437237452d6168b7bd04fad4251", "filename": "crates/ra_syntax/tests/data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 40)\n-  STRUCT_DEF@[0; 40)\n+  STRUCT_DEF@[0; 39)\n     STRUCT_KW@[0; 6)\n     WHITESPACE@[6; 7)\n     NAME@[7; 8)\n@@ -35,5 +35,5 @@ SOURCE_FILE@[0; 40)\n       R_CURLY@[38; 39)\n       err: `expected item, found `;`\n consider removing this semicolon`\n-    ERROR@[39; 40)\n-      SEMI@[39; 40)\n+  ERROR@[39; 40)\n+    SEMI@[39; 40)"}, {"sha": "2976f68625fb34e6abbc9e561f7db77a594a25d3", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0008_pub_expr.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -0,0 +1 @@\n+fn foo() { pub 92; }"}, {"sha": "e65d9c9e1a913bafd8bcc2674faa421930f1aecd", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0008_pub_expr.txt", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@[0; 29)\n+SOURCE_FILE@[0; 21)\n   FN_DEF@[0; 20)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n@@ -11,15 +11,15 @@ SOURCE_FILE@[0; 29)\n     BLOCK@[9; 20)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 11)\n-      EXPR_STMT@[11; 18)\n+      ERROR@[11; 14)\n         VISIBILITY@[11; 14)\n           PUB_KW@[11; 14)\n-        WHITESPACE@[14; 15)\n+          err: `expected an item`\n+      WHITESPACE@[14; 15)\n+      EXPR_STMT@[15; 18)\n         LITERAL@[15; 17)\n           INT_NUMBER@[15; 17) \"92\"\n         SEMI@[17; 18)\n       WHITESPACE@[18; 19)\n       R_CURLY@[19; 20)\n   WHITESPACE@[20; 21)\n-  COMMENT@[21; 28)\n-  WHITESPACE@[28; 29)", "previous_filename": "crates/ra_syntax/tests/data/parser/inline/ok/0035_pub_expr.txt"}, {"sha": "d9d99d2d3d7fe3d48390d4bbdc9b99c47d68c50f", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0035_pub_expr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0035_pub_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0035_pub_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0035_pub_expr.rs?ref=7c117567ab55046a9303fc7a6676a50008ad4f33", "patch": "@@ -1 +0,0 @@\n-fn foo() { pub 92; } //FIXME"}, {"sha": "e2b5f2161dfc106669ae902045b91235b7e87bf6", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0040_crate_keyword_vis.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1 +1,3 @@\n crate fn main() { }\n+struct S { crate field: u32 }\n+struct T(crate u32);"}, {"sha": "695734d54f59a247edc15febf6ed71712776680e", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0040_crate_keyword_vis.txt", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.txt?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@[0; 20)\n+SOURCE_FILE@[0; 71)\n   FN_DEF@[0; 19)\n     VISIBILITY@[0; 5)\n       CRATE_KW@[0; 5)\n@@ -16,3 +16,47 @@ SOURCE_FILE@[0; 20)\n       WHITESPACE@[17; 18)\n       R_CURLY@[18; 19)\n   WHITESPACE@[19; 20)\n+  STRUCT_DEF@[20; 49)\n+    STRUCT_KW@[20; 26)\n+    WHITESPACE@[26; 27)\n+    NAME@[27; 28)\n+      IDENT@[27; 28) \"S\"\n+    WHITESPACE@[28; 29)\n+    NAMED_FIELD_DEF_LIST@[29; 49)\n+      L_CURLY@[29; 30)\n+      WHITESPACE@[30; 31)\n+      NAMED_FIELD_DEF@[31; 47)\n+        VISIBILITY@[31; 36)\n+          CRATE_KW@[31; 36)\n+        WHITESPACE@[36; 37)\n+        NAME@[37; 42)\n+          IDENT@[37; 42) \"field\"\n+        COLON@[42; 43)\n+        WHITESPACE@[43; 44)\n+        PATH_TYPE@[44; 47)\n+          PATH@[44; 47)\n+            PATH_SEGMENT@[44; 47)\n+              NAME_REF@[44; 47)\n+                IDENT@[44; 47) \"u32\"\n+      WHITESPACE@[47; 48)\n+      R_CURLY@[48; 49)\n+  WHITESPACE@[49; 50)\n+  STRUCT_DEF@[50; 70)\n+    STRUCT_KW@[50; 56)\n+    WHITESPACE@[56; 57)\n+    NAME@[57; 58)\n+      IDENT@[57; 58) \"T\"\n+    POS_FIELD_DEF_LIST@[58; 69)\n+      L_PAREN@[58; 59)\n+      POS_FIELD_DEF@[59; 68)\n+        VISIBILITY@[59; 64)\n+          CRATE_KW@[59; 64)\n+        WHITESPACE@[64; 65)\n+        PATH_TYPE@[65; 68)\n+          PATH@[65; 68)\n+            PATH_SEGMENT@[65; 68)\n+              NAME_REF@[65; 68)\n+                IDENT@[65; 68) \"u32\"\n+      R_PAREN@[68; 69)\n+    SEMI@[69; 70)\n+  WHITESPACE@[70; 71)"}, {"sha": "0f454d121d6981d327cbf24a9395a04ecc0f9483", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0125_crate_keyword_path.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rs?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -0,0 +1 @@\n+fn foo() { crate::foo(); }"}, {"sha": "7c637b079e0e7e15a63cf68599233045d9b30e35", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0125_crate_keyword_path.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd18f9237b6ac48ca8461307f2a4eaf273ee394/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.txt?ref=1cd18f9237b6ac48ca8461307f2a4eaf273ee394", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@[0; 27)\n+  FN_DEF@[0; 26)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 26)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      EXPR_STMT@[11; 24)\n+        CALL_EXPR@[11; 23)\n+          PATH_EXPR@[11; 21)\n+            PATH@[11; 21)\n+              PATH@[11; 16)\n+                PATH_SEGMENT@[11; 16)\n+                  CRATE_KW@[11; 16)\n+              COLONCOLON@[16; 18)\n+              PATH_SEGMENT@[18; 21)\n+                NAME_REF@[18; 21)\n+                  IDENT@[18; 21) \"foo\"\n+          ARG_LIST@[21; 23)\n+            L_PAREN@[21; 22)\n+            R_PAREN@[22; 23)\n+        SEMI@[23; 24)\n+      WHITESPACE@[24; 25)\n+      R_CURLY@[25; 26)\n+  WHITESPACE@[26; 27)"}]}