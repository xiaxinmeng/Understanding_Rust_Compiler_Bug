{"sha": "6787f124b5557120cd1e4557cbdb59aa7f215be6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ODdmMTI0YjU1NTcxMjBjZDFlNDU1N2NiZGI1OWFhN2YyMTViZTY=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T14:13:00Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Clean up RPIT a bit", "tree": {"sha": "810aa041297e9ff450dbb3a8a05f09a10c08f8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/810aa041297e9ff450dbb3a8a05f09a10c08f8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6787f124b5557120cd1e4557cbdb59aa7f215be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6787f124b5557120cd1e4557cbdb59aa7f215be6", "html_url": "https://github.com/rust-lang/rust/commit/6787f124b5557120cd1e4557cbdb59aa7f215be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6787f124b5557120cd1e4557cbdb59aa7f215be6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0718682cffaae34e5c106c793c60f6706fc04b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0718682cffaae34e5c106c793c60f6706fc04b05", "html_url": "https://github.com/rust-lang/rust/commit/0718682cffaae34e5c106c793c60f6706fc04b05"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "12d63b54da04481443170d6cccf9307dc20ee6f7", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=6787f124b5557120cd1e4557cbdb59aa7f215be6", "patch": "@@ -144,6 +144,7 @@ fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<a\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n         let blk = sb.to_def(src)?;\n \n+        // TODO this check doesn't work\n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();\n "}, {"sha": "dec6bd84c2e41337b8786b8577eb3534c1ad720c", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=6787f124b5557120cd1e4557cbdb59aa7f215be6", "patch": "@@ -34,7 +34,6 @@ use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use ra_syntax::SmolStr;\n-use test_utils::tested_by;\n \n use super::{\n     primitive::{FloatTy, IntTy},\n@@ -289,29 +288,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n     }\n \n-    /// Replaces `impl Trait` in `ty` by type variables and obligations for\n-    /// those variables. This is done for function arguments when calling a\n-    /// function, and for return types when inside the function body, i.e. in\n-    /// the cases where the `impl Trait` is 'transparent'. In other cases, `impl\n-    /// Trait` is represented by `Ty::Opaque`.\n-    fn insert_vars_for_impl_trait(&mut self, ty: Ty) -> Ty {\n-        ty.fold(&mut |ty| match ty {\n-            Ty::Opaque(preds) => {\n-                tested_by!(insert_vars_for_impl_trait);\n-                let var = self.table.new_type_var();\n-                let var_subst = Substs::builder(1).push(var.clone()).build();\n-                self.obligations.extend(\n-                    preds\n-                        .iter()\n-                        .map(|pred| pred.clone().subst_bound_vars(&var_subst))\n-                        .filter_map(Obligation::from_predicate),\n-                );\n-                var\n-            }\n-            _ => ty,\n-        })\n-    }\n-\n     /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n@@ -487,8 +463,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Variable);\n-        self.return_ty = self.insert_vars_for_impl_trait(return_ty);\n+        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n+        self.return_ty = return_ty;\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "6222bd90e6e0aed31ba1a2c69eabcd5f152ded3d", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6787f124b5557120cd1e4557cbdb59aa7f215be6", "patch": "@@ -635,7 +635,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     continue;\n                 }\n \n-                let param_ty = self.insert_vars_for_impl_trait(param_ty);\n                 let param_ty = self.normalize_associated_types_in(param_ty);\n                 self.infer_expr_coerce(arg, &Expectation::has_type(param_ty.clone()));\n             }"}, {"sha": "0f754eb9c75515c3ed8767723127102802a6da16", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=6787f124b5557120cd1e4557cbdb59aa7f215be6", "patch": "@@ -6,5 +6,4 @@ test_utils::marks!(\n     type_var_resolves_to_int_var\n     match_ergonomics_ref\n     coerce_merge_fail_fallback\n-    insert_vars_for_impl_trait\n );"}, {"sha": "134cea8d86cd96d12e05bfe7686c6a1c11a260ce", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6787f124b5557120cd1e4557cbdb59aa7f215be6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6787f124b5557120cd1e4557cbdb59aa7f215be6", "patch": "@@ -1,7 +1,6 @@\n use insta::assert_snapshot;\n \n use ra_db::fixture::WithFixture;\n-use test_utils::covers;\n \n use super::{infer, infer_with_mismatches, type_at, type_at_pos};\n use crate::test_db::TestDB;\n@@ -1650,7 +1649,6 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n \n #[test]\n fn unify_impl_trait() {\n-    covers!(insert_vars_for_impl_trait);\n     assert_snapshot!(\n         infer_with_mismatches(r#\"\n trait Trait<T> {}\n@@ -1682,26 +1680,26 @@ fn test() -> impl Trait<i32> {\n     [172; 183) '{ loop {} }': T\n     [174; 181) 'loop {}': !\n     [179; 181) '{}': ()\n-    [214; 310) '{     ...t()) }': S<i32>\n+    [214; 310) '{     ...t()) }': S<{unknown}>\n     [224; 226) 's1': S<u32>\n-    [229; 230) 'S': S<u32>(T) -> S<T>\n+    [229; 230) 'S': S<u32>(u32) -> S<u32>\n     [229; 241) 'S(default())': S<u32>\n-    [231; 238) 'default': fn default<u32>() -> T\n+    [231; 238) 'default': fn default<u32>() -> u32\n     [231; 240) 'default()': u32\n-    [247; 250) 'foo': fn foo(impl Trait<u32>) -> ()\n+    [247; 250) 'foo': fn foo<S<u32>>(S<u32>) -> ()\n     [247; 254) 'foo(s1)': ()\n     [251; 253) 's1': S<u32>\n     [264; 265) 'x': i32\n-    [273; 276) 'bar': fn bar<i32>(impl Trait<T>) -> T\n+    [273; 276) 'bar': fn bar<i32, S<i32>>(S<i32>) -> i32\n     [273; 290) 'bar(S(...lt()))': i32\n-    [277; 278) 'S': S<i32>(T) -> S<T>\n+    [277; 278) 'S': S<i32>(i32) -> S<i32>\n     [277; 289) 'S(default())': S<i32>\n-    [279; 286) 'default': fn default<i32>() -> T\n+    [279; 286) 'default': fn default<i32>() -> i32\n     [279; 288) 'default()': i32\n-    [296; 297) 'S': S<i32>(T) -> S<T>\n-    [296; 308) 'S(default())': S<i32>\n-    [298; 305) 'default': fn default<i32>() -> T\n-    [298; 307) 'default()': i32\n+    [296; 297) 'S': S<{unknown}>({unknown}) -> S<{unknown}>\n+    [296; 308) 'S(default())': S<{unknown}>\n+    [298; 305) 'default': fn default<{unknown}>() -> {unknown}\n+    [298; 307) 'default()': {unknown}\n     \"###\n     );\n }"}]}