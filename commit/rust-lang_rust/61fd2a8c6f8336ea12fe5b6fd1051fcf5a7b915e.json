{"sha": "61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "node_id": "C_kwDOAAsO6NoAKDYxZmQyYThjNmY4MzM2ZWExMmZlNWI2ZmQxMDUxZmNmNWE3YjkxNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T14:25:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T14:25:27Z"}, "message": "Auto merge of #9499 - kraktus:nonstandard_macro_braces, r=xFrednet\n\n[`nonstandard_macro_braces`] Do not modify macro arguments\n\nfix #9498\n\nbased on top of https://github.com/rust-lang/rust-clippy/pull/9471\n\nAlso simplify the lint by not caring about code format which should be `rustfmt` job, and turn the lint into machine Applicable\n\nchangelog: Suggestion: [`nonstandard_macro_braces`]: The suggestion is now machine applicable and will no longer replace brackets inside the macro argument.\n  [#9499](https://github.com/rust-lang/rust-clippy/pull/9499)", "tree": {"sha": "cb539dab308a7076b55d9108dccf94f8d5056c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb539dab308a7076b55d9108dccf94f8d5056c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "html_url": "https://github.com/rust-lang/rust/commit/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c170adbec8b0a4aa3d69ae8ef329479564f6df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c170adbec8b0a4aa3d69ae8ef329479564f6df", "html_url": "https://github.com/rust-lang/rust/commit/c2c170adbec8b0a4aa3d69ae8ef329479564f6df"}, {"sha": "a390115c6f0e40001e87a8fd6fdaf864ddd81cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a390115c6f0e40001e87a8fd6fdaf864ddd81cf4", "html_url": "https://github.com/rust-lang/rust/commit/a390115c6f0e40001e87a8fd6fdaf864ddd81cf4"}], "stats": {"total": 215, "additions": 111, "deletions": 104}, "files": [{"sha": "5e38a95c40b3de34327db7935f97b21fc3ece7e6", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "patch": "@@ -3,16 +3,17 @@ use std::{\n     hash::{Hash, Hasher},\n };\n \n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use serde::{de, Deserialize};\n \n declare_clippy_lint! {\n@@ -39,8 +40,8 @@ declare_clippy_lint! {\n \n const BRACES: &[(&str, &str)] = &[(\"(\", \")\"), (\"{\", \"}\"), (\"[\", \"]\")];\n \n-/// The (name, (open brace, close brace), source snippet)\n-type MacroInfo<'a> = (Symbol, &'a (String, String), String);\n+/// The (callsite span, (open brace, close brace), source snippet)\n+type MacroInfo<'a> = (Span, &'a (String, String), String);\n \n #[derive(Clone, Debug, Default)]\n pub struct MacroBraces {\n@@ -62,33 +63,29 @@ impl_lint_pass!(MacroBraces => [NONSTANDARD_MACRO_BRACES]);\n \n impl EarlyLintPass for MacroBraces {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, item.span, self) {\n-            let span = item.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, item.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, stmt.span, self) {\n-            let span = stmt.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, stmt.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, expr.span, self) {\n-            let span = expr.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, expr.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, ty.span, self) {\n-            let span = ty.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, ty.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n@@ -102,48 +99,44 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n                 .last()\n                 .map_or(false, |e| e.macro_def_id.map_or(false, DefId::is_local))\n     };\n+    let span_call_site = span.ctxt().outer_expn_data().call_site;\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n         let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n-        if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n+        if let Some(snip) = snippet_opt(cx, span_call_site);\n         // we must check only invocation sites\n         // https://github.com/rust-lang/rust-clippy/issues/7422\n         if snip.starts_with(&format!(\"{}!\", name));\n         if unnested_or_local();\n         // make formatting consistent\n         let c = snip.replace(' ', \"\");\n         if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n-        if !mac_braces.done.contains(&span.ctxt().outer_expn_data().call_site);\n+        if !mac_braces.done.contains(&span_call_site);\n         then {\n-            Some((mac_name, braces, snip))\n+            Some((span_call_site, braces, snip))\n         } else {\n             None\n         }\n     }\n }\n \n-fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), name: Symbol, span: Span) {\n-    let with_space = &format!(\"! {}\", braces.0);\n-    let without_space = &format!(\"!{}\", braces.0);\n-    let mut help = snip;\n-    for b in BRACES.iter().filter(|b| b.0 != braces.0) {\n-        help = help.replace(b.0, &braces.0).replace(b.1, &braces.1);\n-        // Only `{` traditionally has space before the brace\n-        if braces.0 != \"{\" && help.contains(with_space) {\n-            help = help.replace(with_space, without_space);\n-        } else if braces.0 == \"{\" && help.contains(without_space) {\n-            help = help.replace(without_space, with_space);\n-        }\n+fn emit_help(cx: &EarlyContext<'_>, snip: &str, braces: &(String, String), span: Span) {\n+    if let Some((macro_name, macro_args_str)) = snip.split_once('!') {\n+        let mut macro_args = macro_args_str.trim().to_string();\n+        // now remove the wrong braces\n+        macro_args.remove(0);\n+        macro_args.pop();\n+        span_lint_and_sugg(\n+            cx,\n+            NONSTANDARD_MACRO_BRACES,\n+            span,\n+            &format!(\"use of irregular braces for `{}!` macro\", macro_name),\n+            \"consider writing\",\n+            format!(\"{}!{}{}{}\", macro_name, braces.0, macro_args, braces.1),\n+            Applicability::MachineApplicable,\n+        );\n     }\n-    span_lint_and_help(\n-        cx,\n-        NONSTANDARD_MACRO_BRACES,\n-        span,\n-        &format!(\"use of irregular braces for `{}!` macro\", name),\n-        Some(span),\n-        &format!(\"consider writing `{}`\", help),\n-    );\n }\n \n fn macro_braces(conf: FxHashSet<MacroMatcher>) -> FxHashMap<String, (String, String)> {"}, {"sha": "01d135764dffdf467fa72e2acc63c9bc33dc2c45", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed?ref=61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "patch": "@@ -0,0 +1,62 @@\n+// aux-build:proc_macro_derive.rs\n+// run-rustfix\n+\n+#![warn(clippy::nonstandard_macro_braces)]\n+\n+extern crate proc_macro_derive;\n+extern crate quote;\n+\n+use quote::quote;\n+\n+#[derive(proc_macro_derive::DeriveSomething)]\n+pub struct S;\n+\n+proc_macro_derive::foo_bar!();\n+\n+#[rustfmt::skip]\n+macro_rules! test {\n+    () => {\n+        vec![0, 0, 0]\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! test2 {\n+    ($($arg:tt)*) => {\n+        format_args!($($arg)*)\n+    };\n+}\n+\n+macro_rules! type_pos {\n+    ($what:ty) => {\n+        Vec<$what>\n+    };\n+}\n+\n+macro_rules! printlnfoo {\n+    ($thing:expr) => {\n+        println!(\"{}\", $thing)\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _ = vec![1, 2, 3];\n+    let _ = format!(\"ugh {} stop being such a good compiler\", \"hello\");\n+    let _ = matches!({}, ());\n+    let _ = quote!{let x = 1;};\n+    let _ = quote::quote!{match match match};\n+    let _ = test!(); // trigger when macro def is inside our own crate\n+    let _ = vec![1,2,3];\n+\n+    let _ = quote::quote! {true || false};\n+    let _ = vec! [0 ,0 ,0];\n+    let _ = format!(\"fds{}fds\", 10);\n+    let _ = test2![\"{}{}{}\", 1, 2, 3];\n+\n+    let _: type_pos![usize] = vec![];\n+\n+    eprint![\"test if user config overrides defaults\"];\n+\n+    printlnfoo![\"test if printlnfoo is triggered by println\"];\n+}"}, {"sha": "72883e8270c3b96dfb4fc8a745a4460842a2a84e", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs?ref=61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "patch": "@@ -1,4 +1,5 @@\n // aux-build:proc_macro_derive.rs\n+// run-rustfix\n \n #![warn(clippy::nonstandard_macro_braces)]\n "}, {"sha": "7ae3815978c7742c24f0cc78937d348816146d33", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 16, "deletions": 65, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "patch": "@@ -1,106 +1,57 @@\n error: use of irregular braces for `vec!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n    |\n LL |     let _ = vec! {1, 2, 3};\n-   |             ^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^ help: consider writing: `vec![1, 2, 3]`\n    |\n    = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n-help: consider writing `vec![1, 2, 3]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n-   |\n-LL |     let _ = vec! {1, 2, 3};\n-   |             ^^^^^^^^^^^^^^\n \n error: use of irregular braces for `format!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n-   |\n-LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `format!(\"ugh () stop being such a good compiler\", \"hello\")`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n    |\n LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `format!(\"ugh {} stop being such a good compiler\", \"hello\")`\n \n error: use of irregular braces for `matches!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n-   |\n-LL |     let _ = matches!{{}, ()};\n-   |             ^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `matches!((), ())`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n    |\n LL |     let _ = matches!{{}, ()};\n-   |             ^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^ help: consider writing: `matches!({}, ())`\n \n error: use of irregular braces for `quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n-   |\n-LL |     let _ = quote!(let x = 1;);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `quote! {let x = 1;}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n    |\n LL |     let _ = quote!(let x = 1;);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider writing: `quote!{let x = 1;}`\n \n error: use of irregular braces for `quote::quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:48:13\n    |\n LL |     let _ = quote::quote!(match match match);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `quote::quote! {match match match}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n-   |\n-LL |     let _ = quote::quote!(match match match);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `quote::quote!{match match match}`\n \n error: use of irregular braces for `vec!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:18:9\n+  --> $DIR/conf_nonstandard_macro_braces.rs:19:9\n    |\n LL |         vec!{0, 0, 0}\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ help: consider writing: `vec![0, 0, 0]`\n ...\n LL |     let _ = test!(); // trigger when macro def is inside our own crate\n    |             ------- in this macro invocation\n    |\n-help: consider writing `vec![0, 0, 0]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:18:9\n-   |\n-LL |         vec!{0, 0, 0}\n-   |         ^^^^^^^^^^^^^\n-...\n-LL |     let _ = test!(); // trigger when macro def is inside our own crate\n-   |             ------- in this macro invocation\n    = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: use of irregular braces for `type_pos!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:57:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `type_pos![usize]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n-   |\n-LL |     let _: type_pos!(usize) = vec![];\n-   |            ^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^ help: consider writing: `type_pos![usize]`\n \n error: use of irregular braces for `eprint!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n-   |\n-LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `eprint![\"test if user config overrides defaults\"]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:59:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `eprint![\"test if user config overrides defaults\"]`\n \n error: aborting due to 8 previous errors\n "}]}