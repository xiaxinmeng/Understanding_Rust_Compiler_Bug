{"sha": "47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "node_id": "C_kwDOAAsO6NoAKDQ3YjhkMjZlZmYyOTkzNDg2Zjk3ZjAwYjRlNWQ0OGZhNTY4N2JhMGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T07:44:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T07:44:32Z"}, "message": "Use `ensure` for `UnusedBrokenConst`.", "tree": {"sha": "2584d2a38a62e1f403aad5ba0b0ed799f6fbfdd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2584d2a38a62e1f403aad5ba0b0ed799f6fbfdd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "html_url": "https://github.com/rust-lang/rust/commit/47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b8d26eff2993486f97f00b4e5d48fa5687ba0a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae1d9746876fe395cea4b734c7ef27dda55e21f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae1d9746876fe395cea4b734c7ef27dda55e21f", "html_url": "https://github.com/rust-lang/rust/commit/dae1d9746876fe395cea4b734c7ef27dda55e21f"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "8266f1566c423f76a89f40b1c84d4f972f257a36", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47b8d26eff2993486f97f00b4e5d48fa5687ba0a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b8d26eff2993486f97f00b4e5d48fa5687ba0a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "patch": "@@ -1610,13 +1610,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {\n             hir::ItemKind::Const(_, body_id) => {\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n                 // trigger the query once for all constants since that will already report the errors\n-                // FIXME: Use ensure here\n-                let _ = cx.tcx.const_eval_poly(def_id);\n+                cx.tcx.ensure().const_eval_poly(def_id);\n             }\n             hir::ItemKind::Static(_, _, body_id) => {\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n-                // FIXME: Use ensure here\n-                let _ = cx.tcx.eval_static_initializer(def_id);\n+                cx.tcx.ensure().eval_static_initializer(def_id);\n             }\n             _ => {}\n         }"}, {"sha": "4895b53bb2677ed8fae9ecb3e62d3d277ca0a113", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47b8d26eff2993486f97f00b4e5d48fa5687ba0a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b8d26eff2993486f97f00b4e5d48fa5687ba0a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=47b8d26eff2993486f97f00b4e5d48fa5687ba0a", "patch": "@@ -3,7 +3,7 @@ use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId}\n use crate::mir;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::InternalSubsts;\n-use crate::ty::{self, query::TyCtxtAt, TyCtxt};\n+use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -171,6 +171,39 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     }\n }\n \n+impl<'tcx> TyCtxtEnsure<'tcx> {\n+    /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n+    /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n+    /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub fn const_eval_poly(self, def_id: DefId) {\n+        // In some situations def_id will have substitutions within scope, but they aren't allowed\n+        // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n+        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n+        // encountered.\n+        let substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        let instance = ty::Instance::new(def_id, substs);\n+        let cid = GlobalId { instance, promoted: None };\n+        let param_env =\n+            self.tcx.param_env(def_id).with_reveal_all_normalized(self.tcx).with_const();\n+        // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n+        // improve caching of queries.\n+        let inputs = self.tcx.erase_regions(param_env.and(cid));\n+        self.eval_to_const_value_raw(inputs)\n+    }\n+\n+    /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    pub fn eval_static_initializer(self, def_id: DefId) {\n+        trace!(\"eval_static_initializer: Need to compute {:?}\", def_id);\n+        assert!(self.tcx.is_static(def_id));\n+        let instance = ty::Instance::mono(self.tcx, def_id);\n+        let gid = GlobalId { instance, promoted: None };\n+        let param_env = ty::ParamEnv::reveal_all().with_const();\n+        trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n+        self.eval_to_allocation_raw(param_env.and(gid))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Destructure a type-level constant ADT or array into its variant index and its field values.\n     /// Panics if the destructuring fails, use `try_destructure_const` for fallible version."}]}