{"sha": "b2e36e6c2d229126b59e892c9147fbb68115d292", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTM2ZTZjMmQyMjkxMjZiNTllODkyYzkxNDdmYmI2ODExNWQyOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T17:52:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T17:52:21Z"}, "message": "Auto merge of #71431 - Dylan-DPC:rollup-rvm6tfy, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #71280 (Miri: mplace_access_checked: offer option to force different alignment on place)\n - #71336 (Exhaustively match on `{Statement,Terminator}Kind` during const checking)\n - #71370 (Added detailed error code explanation for issue E0696 in Rust compiler.)\n - #71401 (visit_place_base is just visit_local)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "19503bd32ce13ba6ec09ad004898782b0bc0d0dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19503bd32ce13ba6ec09ad004898782b0bc0d0dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e36e6c2d229126b59e892c9147fbb68115d292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e36e6c2d229126b59e892c9147fbb68115d292", "html_url": "https://github.com/rust-lang/rust/commit/b2e36e6c2d229126b59e892c9147fbb68115d292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e36e6c2d229126b59e892c9147fbb68115d292/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e90d64266b8a4b53935d629786e69610b33f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e90d64266b8a4b53935d629786e69610b33f25", "html_url": "https://github.com/rust-lang/rust/commit/82e90d64266b8a4b53935d629786e69610b33f25"}, {"sha": "238e8228d4f78425231113b8a8368abd0d01e9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/238e8228d4f78425231113b8a8368abd0d01e9a7", "html_url": "https://github.com/rust-lang/rust/commit/238e8228d4f78425231113b8a8368abd0d01e9a7"}], "stats": {"total": 163, "additions": 128, "deletions": 35}, "files": [{"sha": "5ce60b8b3d406468583c430ad25363e952deda79", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -204,7 +204,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 };\n             }\n \n-            self.visit_place_base(&place_ref.local, context, location);\n+            self.visit_local(&place_ref.local, context, location);\n             self.visit_projection(place_ref.local, place_ref.projection, context, location);\n         }\n     }"}, {"sha": "bf4a6c52ab858ff1bfd190bd9c602ca0438fbd14", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -386,6 +386,7 @@ E0691: include_str!(\"./error_codes/E0691.md\"),\n E0692: include_str!(\"./error_codes/E0692.md\"),\n E0693: include_str!(\"./error_codes/E0693.md\"),\n E0695: include_str!(\"./error_codes/E0695.md\"),\n+E0696: include_str!(\"./error_codes/E0696.md\"),\n E0697: include_str!(\"./error_codes/E0697.md\"),\n E0698: include_str!(\"./error_codes/E0698.md\"),\n E0699: include_str!(\"./error_codes/E0699.md\"),\n@@ -604,7 +605,6 @@ E0753: include_str!(\"./error_codes/E0753.md\"),\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n //  E0694, // an unknown tool name found in scoped attributes\n-    E0696, // `continue` pointing to a labeled block\n //  E0702, // replaced with a generic attribute input check\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`\n //  E0709, // multiple different lifetimes used in arguments of `async fn`"}, {"sha": "fc32d1cc5f7983f380e9640f349c8b9d0206c287", "filename": "src/librustc_error_codes/error_codes/E0696.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_error_codes%2Ferror_codes%2FE0696.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_error_codes%2Ferror_codes%2FE0696.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0696.md?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -0,0 +1,49 @@\n+A function is using `continue` keyword incorrectly.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0696\n+fn continue_simple() {\n+    'b: {\n+        continue; // error!\n+    }\n+}\n+fn continue_labeled() {\n+    'b: {\n+        continue 'b; // error!\n+    }\n+}\n+fn continue_crossing() {\n+    loop {\n+        'b: {\n+            continue; // error!\n+        }\n+    }\n+}\n+```\n+\n+Here we have used the `continue` keyword incorrectly. As we\n+have seen above that `continue` pointing to a labeled block.\n+\n+To fix this we have to use the labeled block properly.\n+For example:\n+\n+```\n+fn continue_simple() {\n+    'b: loop {\n+        continue ; // ok!\n+    }\n+}\n+fn continue_labeled() {\n+    'b: loop {\n+        continue 'b; // ok!\n+    }\n+}\n+fn continue_crossing() {\n+    loop {\n+        'b: loop {\n+            continue; // ok!\n+        }\n+    }\n+}\n+```"}, {"sha": "633524605360825120545557b90b4d16f5303127", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -163,13 +163,6 @@ macro_rules! make_mir_visitor {\n                 self.super_place(place, context, location);\n             }\n \n-            fn visit_place_base(&mut self,\n-                                local: & $($mutability)? Local,\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.super_place_base(local, context, location);\n-            }\n-\n             visit_place_fns!($($mutability)?);\n \n             fn visit_constant(&mut self,\n@@ -710,13 +703,6 @@ macro_rules! make_mir_visitor {\n                 );\n             }\n \n-            fn super_place_base(&mut self,\n-                                local: & $($mutability)? Local,\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.visit_local(local, context, location);\n-            }\n-\n             fn super_local_decl(&mut self,\n                                 local: Local,\n                                 local_decl: & $($mutability)? LocalDecl<'tcx>) {\n@@ -847,7 +833,7 @@ macro_rules! visit_place_fns {\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             if let Some(new_projection) = self.process_projection(&place.projection, location) {\n                 place.projection = self.tcx().intern_place_elems(&new_projection);\n@@ -936,7 +922,7 @@ macro_rules! visit_place_fns {\n                 };\n             }\n \n-            self.visit_place_base(&place.local, context, location);\n+            self.visit_local(&place.local, context, location);\n \n             self.visit_projection(place.local, &place.projection, context, location);\n         }"}, {"sha": "348958ee6c59a77e287b59cf3c2091f09128cff7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -333,7 +333,7 @@ where\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n         let place = self.ref_to_mplace(val)?;\n-        self.mplace_access_checked(place)\n+        self.mplace_access_checked(place, None)\n     }\n \n     /// Check if the given place is good for memory access with the given\n@@ -358,15 +358,20 @@ where\n \n     /// Return the \"access-checked\" version of this `MPlace`, where for non-ZST\n     /// this is definitely a `Pointer`.\n+    ///\n+    /// `force_align` must only be used when correct alignment does not matter,\n+    /// like in Stacked Borrows.\n     pub fn mplace_access_checked(\n         &self,\n         mut place: MPlaceTy<'tcx, M::PointerTag>,\n+        force_align: Option<Align>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let (size, align) = self\n             .size_and_align_of_mplace(place)?\n             .unwrap_or((place.layout.size, place.layout.align.abi));\n         assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n-        place.mplace.align = align; // maximally strict checking\n+        // Check (stricter) dynamic alignment, unless forced otherwise.\n+        place.mplace.align = force_align.unwrap_or(align);\n         // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n         if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n             place.mplace.ptr = ptr.into();"}, {"sha": "129dfe98e5ea7dd4dfeeb50259e466e85e1b3b28", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -648,7 +648,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator_kind(kind, location);\n     }\n \n-    fn visit_place_base(\n+    fn visit_local(\n         &mut self,\n         _place_local: &Local,\n         _context: mir::visit::PlaceContext,"}, {"sha": "c4b94b70938d33505fb7b204a8738cd517108d06", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -147,6 +147,10 @@ impl NonConstOp for IfOrMatch {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct InlineAsm;\n+impl NonConstOp for InlineAsm {}\n+\n #[derive(Debug)]\n pub struct LiveDrop;\n impl NonConstOp for LiveDrop {"}, {"sha": "1a0f875191b3bcd1bfac92af035d1b2aff9420cc", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -276,7 +276,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_place_base(&place.local, ctx, location);\n+                    self.visit_local(&place.local, ctx, location);\n                     self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n@@ -289,7 +289,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_place_base(&place.local, ctx, location);\n+                    self.visit_local(&place.local, ctx, location);\n                     self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n@@ -386,14 +386,13 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         }\n     }\n \n-    fn visit_place_base(&mut self, place_local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, place_local: &Local, context: PlaceContext, location: Location) {\n         trace!(\n-            \"visit_place_base: place_local={:?} context={:?} location={:?}\",\n+            \"visit_local: place_local={:?} context={:?} location={:?}\",\n             place_local,\n             context,\n             location,\n         );\n-        self.super_place_base(place_local, context, location);\n     }\n \n     fn visit_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n@@ -478,14 +477,24 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             StatementKind::Assign(..) | StatementKind::SetDiscriminant { .. } => {\n                 self.super_statement(statement, location);\n             }\n-            StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _) => {\n+\n+            StatementKind::FakeRead(\n+                FakeReadCause::ForMatchedPlace\n+                | FakeReadCause::ForMatchGuard\n+                | FakeReadCause::ForGuardBinding,\n+                _,\n+            ) => {\n+                self.super_statement(statement, location);\n                 self.check_op(ops::IfOrMatch);\n             }\n-            // FIXME(eddyb) should these really do nothing?\n-            StatementKind::FakeRead(..)\n+            StatementKind::LlvmInlineAsm { .. } => {\n+                self.super_statement(statement, location);\n+                self.check_op(ops::InlineAsm);\n+            }\n+\n+            StatementKind::FakeRead(FakeReadCause::ForLet | FakeReadCause::ForIndex, _)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Nop => {}\n@@ -572,7 +581,19 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 }\n             }\n \n-            _ => {}\n+            // FIXME: Some of these are only caught by `min_const_fn`, but should error here\n+            // instead.\n+            TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Yield { .. } => {}\n         }\n     }\n }"}, {"sha": "257b6b4a5cfae650c952df502ccf7374c6501424", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n                 self.tcx,\n             );\n         } else {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n@@ -154,7 +154,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 self.tcx,\n             );\n         } else {\n-            self.visit_place_base(&mut place.local, context, location);\n+            self.visit_local(&mut place.local, context, location);\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {"}, {"sha": "c2ab97e54f0c8252d8b4092fb71ad24208c51646", "filename": "src/test/ui/consts/inline_asm.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -0,0 +1,6 @@\n+#![feature(llvm_asm)]\n+\n+const _: () = unsafe { llvm_asm!(\"nop\") };\n+//~^ ERROR contains unimplemented expression type\n+\n+fn main() {}"}, {"sha": "0a064c8136651e45e1e33bf15ce2f73117de04e5", "filename": "src/test/ui/consts/inline_asm.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -0,0 +1,11 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/inline_asm.rs:3:24\n+   |\n+LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "ddc4767b83aa1aba535c82980bd78627d570e6fc", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -11,4 +11,6 @@ static TEST_BAD: () = {\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE inline assembly is not supported\n+    //~| WARN skipping const checks\n+    //~| NOTE in this expansion of llvm_asm!\n };"}, {"sha": "444a0172621e214022e94cc486efbe2e6083ad3f", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -1,3 +1,11 @@\n+warning: skipping const checks\n+  --> $DIR/inline_asm.rs:10:14\n+   |\n+LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:10:14\n    |\n@@ -6,6 +14,6 @@ LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9b8693dc584c491ab6f8c94dca6582f680001e1d", "filename": "src/test/ui/label/label_break_value_continue.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e36e6c2d229126b59e892c9147fbb68115d292/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr?ref=b2e36e6c2d229126b59e892c9147fbb68115d292", "patch": "@@ -21,4 +21,5 @@ LL |             continue;\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0695`.\n+Some errors have detailed explanations: E0695, E0696.\n+For more information about an error, try `rustc --explain E0695`."}]}