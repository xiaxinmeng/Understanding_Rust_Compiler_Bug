{"sha": "8147e6e427a1b3c4aedcd9fd85bd457888f80972", "node_id": "C_kwDOAAsO6NoAKDgxNDdlNmU0MjdhMWIzYzRhZWRjZDlmZDg1YmQ0NTc4ODhmODA5NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T22:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T22:56:53Z"}, "message": "Auto merge of #103069 - matthiaskrgr:rollup-xxsx6sk, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #102092 (refactor: use grep -E/-F instead of fgrep/egrep)\n - #102781 (Improved documentation for `std::io::Error`)\n - #103017 (Avoid dropping TLS Key on sgx)\n - #103039 (checktools: fix comments)\n - #103045 (Remove leading newlines from integer primitive doc examples)\n - #103047 (Update browser-ui-test version to fix some flaky tests)\n - #103054 (Clean up rust-logo rustdoc GUI test)\n - #103059 (Fix `Duration::{try_,}from_secs_f{32,64}(-0.0)`)\n - #103067 (More alphabetical sorting)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a52cac2a5c92bedd81aff8169141a4ef382bdabd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a52cac2a5c92bedd81aff8169141a4ef382bdabd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8147e6e427a1b3c4aedcd9fd85bd457888f80972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8147e6e427a1b3c4aedcd9fd85bd457888f80972", "html_url": "https://github.com/rust-lang/rust/commit/8147e6e427a1b3c4aedcd9fd85bd457888f80972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8147e6e427a1b3c4aedcd9fd85bd457888f80972/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf15a9e5263fcea065a7ae9c179b2d24c2deb670", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf15a9e5263fcea065a7ae9c179b2d24c2deb670", "html_url": "https://github.com/rust-lang/rust/commit/bf15a9e5263fcea065a7ae9c179b2d24c2deb670"}, {"sha": "a96f1a8a1eef38f024d6fcff932f55a2a760a395", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96f1a8a1eef38f024d6fcff932f55a2a760a395", "html_url": "https://github.com/rust-lang/rust/commit/a96f1a8a1eef38f024d6fcff932f55a2a760a395"}], "stats": {"total": 450, "additions": 221, "deletions": 229}, "files": [{"sha": "83407ee8f9d32e891d6584d23512115004c8f75a", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 112, "deletions": 96, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -13,17 +13,25 @@ pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n // if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted\n \n const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"aclass\", Some(sym::arm_target_feature)),\n-    (\"mclass\", Some(sym::arm_target_feature)),\n-    (\"rclass\", Some(sym::arm_target_feature)),\n-    (\"dsp\", Some(sym::arm_target_feature)),\n-    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"aes\", Some(sym::arm_target_feature)),\n     (\"crc\", Some(sym::arm_target_feature)),\n     (\"crypto\", Some(sym::arm_target_feature)),\n-    (\"aes\", Some(sym::arm_target_feature)),\n-    (\"sha2\", Some(sym::arm_target_feature)),\n-    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"d32\", Some(sym::arm_target_feature)),\n     (\"dotprod\", Some(sym::arm_target_feature)),\n+    (\"dsp\", Some(sym::arm_target_feature)),\n+    (\"fp-armv8\", Some(sym::arm_target_feature)),\n+    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"mclass\", Some(sym::arm_target_feature)),\n+    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"rclass\", Some(sym::arm_target_feature)),\n+    (\"sha2\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n+    (\"thumb2\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),\n@@ -33,118 +41,115 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n-    (\"fp-armv8\", Some(sym::arm_target_feature)),\n-    // This is needed for inline assembly, but shouldn't be stabilized as-is\n-    // since it should be enabled per-function using #[instruction_set], not\n-    // #[target_feature].\n-    (\"thumb-mode\", Some(sym::arm_target_feature)),\n-    (\"thumb2\", Some(sym::arm_target_feature)),\n-    (\"d32\", Some(sym::arm_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd & FEAT_FP\n-    (\"neon\", None),\n-    // FEAT_FP16\n-    (\"fp16\", None),\n-    // FEAT_SVE\n-    (\"sve\", None),\n+    // tidy-alphabetical-start\n+    // FEAT_AES\n+    (\"aes\", None),\n+    // FEAT_BF16\n+    (\"bf16\", None),\n+    // FEAT_BTI\n+    (\"bti\", None),\n     // FEAT_CRC\n     (\"crc\", None),\n-    // FEAT_RAS\n-    (\"ras\", None),\n-    // FEAT_LSE\n-    (\"lse\", None),\n-    // FEAT_RDM\n-    (\"rdm\", None),\n-    // FEAT_RCPC\n-    (\"rcpc\", None),\n-    // FEAT_RCPC2\n-    (\"rcpc2\", None),\n-    // FEAT_DotProd\n-    (\"dotprod\", None),\n-    // FEAT_TME\n-    (\"tme\", None),\n-    // FEAT_FHM\n-    (\"fhm\", None),\n     // FEAT_DIT\n     (\"dit\", None),\n-    // FEAT_FLAGM\n-    (\"flagm\", None),\n-    // FEAT_SSBS\n-    (\"ssbs\", None),\n-    // FEAT_SB\n-    (\"sb\", None),\n-    // FEAT_PAUTH (address authentication)\n-    (\"paca\", None),\n-    // FEAT_PAUTH (generic authentication)\n-    (\"pacg\", None),\n+    // FEAT_DotProd\n+    (\"dotprod\", None),\n     // FEAT_DPB\n     (\"dpb\", None),\n     // FEAT_DPB2\n     (\"dpb2\", None),\n-    // FEAT_SVE2\n-    (\"sve2\", None),\n-    // FEAT_SVE2_AES\n-    (\"sve2-aes\", None),\n-    // FEAT_SVE2_SM4\n-    (\"sve2-sm4\", None),\n-    // FEAT_SVE2_SHA3\n-    (\"sve2-sha3\", None),\n-    // FEAT_SVE2_BitPerm\n-    (\"sve2-bitperm\", None),\n-    // FEAT_FRINTTS\n-    (\"frintts\", None),\n-    // FEAT_I8MM\n-    (\"i8mm\", None),\n     // FEAT_F32MM\n     (\"f32mm\", None),\n     // FEAT_F64MM\n     (\"f64mm\", None),\n-    // FEAT_BF16\n-    (\"bf16\", None),\n-    // FEAT_RAND\n-    (\"rand\", None),\n-    // FEAT_BTI\n-    (\"bti\", None),\n-    // FEAT_MTE\n-    (\"mte\", None),\n-    // FEAT_JSCVT\n-    (\"jsconv\", None),\n     // FEAT_FCMA\n     (\"fcma\", None),\n-    // FEAT_AES\n-    (\"aes\", None),\n+    // FEAT_FHM\n+    (\"fhm\", None),\n+    // FEAT_FLAGM\n+    (\"flagm\", None),\n+    // FEAT_FP16\n+    (\"fp16\", None),\n+    // FEAT_FRINTTS\n+    (\"frintts\", None),\n+    // FEAT_I8MM\n+    (\"i8mm\", None),\n+    // FEAT_JSCVT\n+    (\"jsconv\", None),\n+    // FEAT_LOR\n+    (\"lor\", None),\n+    // FEAT_LSE\n+    (\"lse\", None),\n+    // FEAT_MTE\n+    (\"mte\", None),\n+    // FEAT_AdvSimd & FEAT_FP\n+    (\"neon\", None),\n+    // FEAT_PAUTH (address authentication)\n+    (\"paca\", None),\n+    // FEAT_PAUTH (generic authentication)\n+    (\"pacg\", None),\n+    // FEAT_PAN\n+    (\"pan\", None),\n+    // FEAT_PMUv3\n+    (\"pmuv3\", None),\n+    // FEAT_RAND\n+    (\"rand\", None),\n+    // FEAT_RAS\n+    (\"ras\", None),\n+    // FEAT_RCPC\n+    (\"rcpc\", None),\n+    // FEAT_RCPC2\n+    (\"rcpc2\", None),\n+    // FEAT_RDM\n+    (\"rdm\", None),\n+    // FEAT_SB\n+    (\"sb\", None),\n     // FEAT_SHA1 & FEAT_SHA256\n     (\"sha2\", None),\n     // FEAT_SHA512 & FEAT_SHA3\n     (\"sha3\", None),\n     // FEAT_SM3 & FEAT_SM4\n     (\"sm4\", None),\n-    // FEAT_PAN\n-    (\"pan\", None),\n-    // FEAT_LOR\n-    (\"lor\", None),\n-    // FEAT_VHE\n-    (\"vh\", None),\n-    // FEAT_PMUv3\n-    (\"pmuv3\", None),\n     // FEAT_SPE\n     (\"spe\", None),\n+    // FEAT_SSBS\n+    (\"ssbs\", None),\n+    // FEAT_SVE\n+    (\"sve\", None),\n+    // FEAT_SVE2\n+    (\"sve2\", None),\n+    // FEAT_SVE2_AES\n+    (\"sve2-aes\", None),\n+    // FEAT_SVE2_BitPerm\n+    (\"sve2-bitperm\", None),\n+    // FEAT_SVE2_SHA3\n+    (\"sve2-sha3\", None),\n+    // FEAT_SVE2_SM4\n+    (\"sve2-sm4\", None),\n+    // FEAT_TME\n+    (\"tme\", None),\n     (\"v8.1a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.2a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.3a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.4a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.5a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.6a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.7a\", Some(sym::aarch64_ver_target_feature)),\n+    // FEAT_VHE\n+    (\"vh\", None),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"adx\", None),\n     (\"aes\", None),\n     (\"avx\", None),\n@@ -194,69 +199,80 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"xsavec\", None),\n     (\"xsaveopt\", None),\n     (\"xsaves\", None),\n+    // tidy-alphabetical-end\n ];\n \n const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n     (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-vector\", Some(sym::powerpc_target_feature)),\n+    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power9-vector\", Some(sym::powerpc_target_feature)),\n     (\"vsx\", Some(sym::powerpc_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"fp64\", Some(sym::mips_target_feature)),\n     (\"msa\", Some(sym::mips_target_feature)),\n     (\"virt\", Some(sym::mips_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"m\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-start\n     (\"a\", Some(sym::riscv_target_feature)),\n     (\"c\", Some(sym::riscv_target_feature)),\n-    (\"f\", Some(sym::riscv_target_feature)),\n     (\"d\", Some(sym::riscv_target_feature)),\n     (\"e\", Some(sym::riscv_target_feature)),\n+    (\"f\", Some(sym::riscv_target_feature)),\n+    (\"m\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n-    (\"zfinx\", Some(sym::riscv_target_feature)),\n-    (\"zdinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n-    (\"zfh\", Some(sym::riscv_target_feature)),\n-    (\"zfhmin\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),\n     (\"zbc\", Some(sym::riscv_target_feature)),\n-    (\"zbs\", Some(sym::riscv_target_feature)),\n     (\"zbkb\", Some(sym::riscv_target_feature)),\n     (\"zbkc\", Some(sym::riscv_target_feature)),\n     (\"zbkx\", Some(sym::riscv_target_feature)),\n+    (\"zbs\", Some(sym::riscv_target_feature)),\n+    (\"zdinx\", Some(sym::riscv_target_feature)),\n+    (\"zfh\", Some(sym::riscv_target_feature)),\n+    (\"zfhmin\", Some(sym::riscv_target_feature)),\n+    (\"zfinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n+    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zknd\", Some(sym::riscv_target_feature)),\n     (\"zkne\", Some(sym::riscv_target_feature)),\n     (\"zknh\", Some(sym::riscv_target_feature)),\n-    (\"zksed\", Some(sym::riscv_target_feature)),\n-    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkr\", Some(sym::riscv_target_feature)),\n-    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zks\", Some(sym::riscv_target_feature)),\n-    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zksed\", Some(sym::riscv_target_feature)),\n+    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkt\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"simd128\", None),\n+    // tidy-alphabetical-start\n     (\"atomics\", Some(sym::wasm_target_feature)),\n-    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"bulk-memory\", Some(sym::wasm_target_feature)),\n     (\"mutable-globals\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"reference-types\", Some(sym::wasm_target_feature)),\n     (\"sign-ext\", Some(sym::wasm_target_feature)),\n+    (\"simd128\", None),\n+    // tidy-alphabetical-end\n ];\n \n const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[(\"alu32\", Some(sym::bpf_target_feature))];"}, {"sha": "b413a85fee340f2a870a20396ec5b3242d34c45d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -652,7 +652,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(2), Some(1));\")]\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\")]\n@@ -704,7 +703,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_neg(), Some(-5));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\")]\n         /// ```\n@@ -820,7 +818,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!((-5\", stringify!($SelfT), \").checked_abs(), Some(5));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\")]\n         /// ```\n@@ -1026,7 +1023,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".saturating_mul(12), 120);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_mul(10), \", stringify!($SelfT), \"::MAX);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($SelfT), \"::MIN);\")]\n@@ -1085,7 +1081,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\")]\n@@ -1498,7 +1493,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($SelfT), \"::MIN, true));\")]\n         /// ```\n@@ -1593,7 +1587,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($SelfT), \"::MAX, true));\")]\n         /// ```\n@@ -1703,7 +1696,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_div(2), (2, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div(-1), (\", stringify!($SelfT), \"::MIN, true));\")]\n         /// ```\n@@ -1766,7 +1758,6 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_rem(2), (1, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem(-1), (0, true));\")]\n         /// ```"}, {"sha": "b177e5e3900289066cdb14adb0c580cdf3525b68", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -1456,7 +1456,6 @@ macro_rules! uint_impl {\n         /// Basic usage\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\")]\n         /// ```\n@@ -1551,7 +1550,6 @@ macro_rules! uint_impl {\n         /// Basic usage\n         ///\n         /// ```\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\")]\n         #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT), \"::MAX, true));\")]\n         /// ```"}, {"sha": "7cbb477d7a3469ee2a6391de9068db7295bb2d61", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -1279,7 +1279,7 @@ macro_rules! try_from_secs {\n         const MANT_MASK: $bits_ty = (1 << $mant_bits) - 1;\n         const EXP_MASK: $bits_ty = (1 << $exp_bits) - 1;\n \n-        if $secs.is_sign_negative() {\n+        if $secs < 0.0 {\n             return Err(FromFloatSecsError { kind: FromFloatSecsErrorKind::Negative });\n         }\n "}, {"sha": "b5c34f5df3b764dc4d3298e9408151a7a4101679", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -103,6 +103,7 @@\n #![feature(provide_any)]\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n+#![feature(duration_checked_float)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "a05128de471ab3580f56cfa0f35e8ae5cbf348dd", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -467,3 +467,11 @@ fn duration_const() {\n     const SATURATING_MUL: Duration = MAX.saturating_mul(2);\n     assert_eq!(SATURATING_MUL, MAX);\n }\n+\n+#[test]\n+fn from_neg_zero() {\n+    assert_eq!(Duration::try_from_secs_f32(-0.0), Ok(Duration::ZERO));\n+    assert_eq!(Duration::try_from_secs_f64(-0.0), Ok(Duration::ZERO));\n+    assert_eq!(Duration::from_secs_f32(-0.0), Duration::ZERO);\n+    assert_eq!(Duration::from_secs_f64(-0.0), Duration::ZERO);\n+}"}, {"sha": "3cabf24492eaf26216e811a85b158d25abbc136f", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -387,7 +387,7 @@ pub enum ErrorKind {\n impl ErrorKind {\n     pub(crate) fn as_str(&self) -> &'static str {\n         use ErrorKind::*;\n-        // Strictly alphabetical, please.  (Sadly rustfmt cannot do this yet.)\n+        // tidy-alphabetical-start\n         match *self {\n             AddrInUse => \"address in use\",\n             AddrNotAvailable => \"address not available\",\n@@ -431,6 +431,7 @@ impl ErrorKind {\n             WouldBlock => \"operation would block\",\n             WriteZero => \"write zero\",\n         }\n+        // tidy-alphabetical-end\n     }\n }\n \n@@ -481,6 +482,7 @@ impl Error {\n     /// originate from the OS itself. The `error` argument is an arbitrary\n     /// payload which will be contained in this [`Error`].\n     ///\n+    /// Note that this function allocates memory on the heap.\n     /// If no extra payload is required, use the `From` conversion from\n     /// `ErrorKind`.\n     ///\n@@ -495,7 +497,7 @@ impl Error {\n     /// // errors can also be created from other errors\n     /// let custom_error2 = Error::new(ErrorKind::Interrupted, custom_error);\n     ///\n-    /// // creating an error without payload\n+    /// // creating an error without payload (and without memory allocation)\n     /// let eof_error = Error::from(ErrorKind::UnexpectedEof);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "09c4ab3d3e901d8bc3d418054529705b25ba2317", "filename": "library/std/src/sys/sgx/abi/tls/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Ftls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Ftls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Ftls%2Fmod.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -111,6 +111,7 @@ impl Tls {\n             rtabort!(\"TLS limit exceeded\")\n         };\n         TLS_DESTRUCTOR[index].store(dtor.map_or(0, |f| f as usize), Ordering::Relaxed);\n+        unsafe { Self::current() }.data[index].set(ptr::null_mut());\n         Key::from_index(index)\n     }\n "}, {"sha": "02c076f1bb5f94c0b25f93784b904dfec77bba9c", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -14,77 +14,85 @@\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n     use std::arch::is_arm_feature_detected;\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n+    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n+    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n-    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n-    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n-    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n     println!(\"sha2: {}\", is_arm_feature_detected!(\"sha2\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n     use std::arch::is_aarch64_feature_detected;\n-    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n-    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n-    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n+    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));\n-    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n-    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n-    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n-    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n-    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"dotprod: {}\", is_aarch64_feature_detected!(\"dotprod\"));\n-    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n+    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n+    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n+    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n+    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n     println!(\"fhm: {}\", is_aarch64_feature_detected!(\"fhm\"));\n-    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"flagm: {}\", is_aarch64_feature_detected!(\"flagm\"));\n-    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n-    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n-    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n-    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n-    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n-    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n-    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n-    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n-    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n-    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n-    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"frintts: {}\", is_aarch64_feature_detected!(\"frintts\"));\n     println!(\"i8mm: {}\", is_aarch64_feature_detected!(\"i8mm\"));\n-    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n-    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n-    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n-    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n-    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n-    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n     println!(\"jsconv: {}\", is_aarch64_feature_detected!(\"jsconv\"));\n-    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n-    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n+    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n+    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n+    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n+    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n+    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n+    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n+    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n+    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n+    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n+    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n     println!(\"sha2: {}\", is_aarch64_feature_detected!(\"sha2\"));\n     println!(\"sha3: {}\", is_aarch64_feature_detected!(\"sha3\"));\n     println!(\"sm4: {}\", is_aarch64_feature_detected!(\"sm4\"));\n+    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n+    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n+    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n+    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n+    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n+    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n     use std::arch::is_powerpc_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n     use std::arch::is_powerpc64_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n@@ -102,9 +110,9 @@ fn x86_all() {\n     // the below is in alphabetical order and matches\n     // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs\n \n+    // tidy-alphabetical-start\n     println!(\"adx: {:?}\", is_x86_feature_detected!(\"adx\"));\n     println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n-    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n     println!(\"avx512bf16: {:?}\", is_x86_feature_detected!(\"avx512bf16\"));\n     println!(\"avx512bitalg: {:?}\", is_x86_feature_detected!(\"avx512bitalg\"));\n@@ -117,13 +125,14 @@ fn x86_all() {\n     println!(\"avx512ifma: {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n     println!(\"avx512pf: {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n     println!(\"avx512vaes: {:?}\", is_x86_feature_detected!(\"avx512vaes\"));\n-    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vbmi2: {:?}\", is_x86_feature_detected!(\"avx512vbmi2\"));\n+    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vl: {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n     println!(\"avx512vnni: {:?}\", is_x86_feature_detected!(\"avx512vnni\"));\n     println!(\"avx512vp2intersect: {:?}\", is_x86_feature_detected!(\"avx512vp2intersect\"));\n     println!(\"avx512vpclmulqdq: {:?}\", is_x86_feature_detected!(\"avx512vpclmulqdq\"));\n     println!(\"avx512vpopcntdq: {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n     println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n     println!(\"cmpxchg16b: {:?}\", is_x86_feature_detected!(\"cmpxchg16b\"));\n@@ -138,16 +147,17 @@ fn x86_all() {\n     println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n     println!(\"rtm: {:?}\", is_x86_feature_detected!(\"rtm\"));\n     println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n-    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n     println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n     println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n     println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n     println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n+    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n     println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n     println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n     println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n     println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n+    // tidy-alphabetical-end\n }"}, {"sha": "7fd0b1e8e6ff6b1336951281a67f9f9f3cccd5d9", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -1 +1 @@\n-0.12.3\n\\ No newline at end of file\n+0.12.4\n\\ No newline at end of file"}, {"sha": "3e1f39eaab5a4f577cb9092325d0aacabd45a846", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -4,7 +4,7 @@ set -eu\n \n X_PY=\"$1\"\n \n-# Try to test all the tools and store the build/test success in the TOOLSTATE_FILE\n+# Try to test the toolstate-tracked tools and store the build/test success in the TOOLSTATE_FILE.\n \n set +e\n python3 \"$X_PY\" test --stage 2 --no-fail-fast \\\n@@ -19,6 +19,8 @@ set -e\n \n # debugging: print out the saved toolstates\n cat /tmp/toolstate/toolstates.json\n+\n+# Test remaining tools that must pass.\n python3 \"$X_PY\" test --stage 2 check-tools\n python3 \"$X_PY\" test --stage 2 src/tools/clippy\n python3 \"$X_PY\" test --stage 2 src/tools/rustfmt"}, {"sha": "238f7f5b660277aa23c6715c3f20f29c08601410", "filename": "src/etc/cat-and-grep.sh", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fetc%2Fcat-and-grep.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Fetc%2Fcat-and-grep.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcat-and-grep.sh?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -26,7 +26,7 @@ Options:\n     -i      Case insensitive search.\n '\n \n-GREPPER=fgrep\n+GREPPER=grep\n INVERT=0\n GREPFLAGS='q'\n while getopts ':vieh' OPTION; do\n@@ -39,7 +39,7 @@ while getopts ':vieh' OPTION; do\n             GREPFLAGS=\"i$GREPFLAGS\"\n             ;;\n         e)\n-            GREPPER=egrep\n+            GREPFLAGS=\"E$GREPFLAGS\"\n             ;;\n         h)\n             echo \"$USAGE\"\n@@ -51,6 +51,12 @@ while getopts ':vieh' OPTION; do\n     esac\n done\n \n+if ! echo \"$GREPFLAGS\" | grep -q E\n+then\n+    # use F flag if there is not an E flag\n+    GREPFLAGS=\"F$GREPFLAGS\"\n+fi\n+\n shift $((OPTIND - 1))\n \n # use gnu version of tool if available (for bsd)"}, {"sha": "4c130b2ffec75a077746d201aa2da02e6acbfa67", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -2540,7 +2540,7 @@ impl SubstParam {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n     static_assert_size!(GenericArg, 48);\n@@ -2550,4 +2550,5 @@ mod size_asserts {\n     static_assert_size!(ItemKind, 88);\n     static_assert_size!(PathSegment, 40);\n     static_assert_size!(Type, 48);\n+    // tidy-alphabetical-end\n }"}, {"sha": "6c8dc85941931b2886346c08305c7fa562da544b", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "modified", "additions": 26, "deletions": 70, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -1,78 +1,34 @@\n // This test ensures that the correct style is applied to the rust logo in the sidebar.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n \n-// First we start with the dark theme.\n-local-storage: {\n-    \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+define-function: (\n+    \"check-logo\",\n+    (theme, filter),\n+    [\n+        // Going to the doc page.\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n+        // Changing theme.\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\".rust-logo\", {\"filter\": |filter|})),\n+        // Going to the source code page.\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"),\n+        // Changing theme (since it's local files, the local storage works by folder).\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\".rust-logo\", {\"filter\": |filter|})),\n+    ],\n )\n \n-// In the source view page now.\n-goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n-\n-local-storage: {\n-    \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+call-function: (\n+    \"check-logo\",\n+    (\"ayu\", \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"),\n )\n-\n-// Then with the ayu theme.\n-local-storage: {\n-    \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-preferred-dark-theme\": \"ayu\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+call-function: (\n+    \"check-logo\",\n+    (\"dark\", \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"),\n )\n-\n-// In the source view page now.\n-goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n-\n-local-storage: {\n-    \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-preferred-dark-theme\": \"ayu\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n-)\n-\n-// And finally with the light theme.\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"none\"},\n-)\n-\n-// In the source view page now.\n-goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n-\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-\n-assert-css: (\n-    \".rust-logo\",\n-    {\"filter\": \"none\"},\n+call-function: (\n+    \"check-logo\",\n+    (\"light\", \"none\"),\n )"}, {"sha": "f913f6cde3889fd374dd91a6fb0f8251f7d283b2", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -29,7 +29,8 @@ fn is_close_bracket(c: char) -> bool {\n     matches!(c, ')' | ']' | '}')\n }\n \n-const START_COMMENT: &str = \"// tidy-alphabetical-start\";\n+// Don't let tidy check this here :D\n+const START_COMMENT: &str = concat!(\"// tidy-alphabetical\", \"-start\");\n const END_COMMENT: &str = \"// tidy-alphabetical-end\";\n \n fn check_section<'a>(\n@@ -47,7 +48,7 @@ fn check_section<'a>(\n         if line.contains(START_COMMENT) {\n             tidy_error!(\n                 bad,\n-                \"{file}:{} found `// tidy-alphabetical-start` expecting `// tidy-alphabetical-end`\",\n+                \"{file}:{} found `{START_COMMENT}` expecting `{END_COMMENT}`\",\n                 line_idx\n             )\n         }\n@@ -102,10 +103,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if line.contains(START_COMMENT) {\n                 check_section(file, &mut lines, bad);\n                 if lines.peek().is_none() {\n-                    tidy_error!(\n-                        bad,\n-                        \"{file}: reached end of file expecting `// tidy-alphabetical-end`\"\n-                    )\n+                    tidy_error!(bad, \"{file}: reached end of file expecting `{END_COMMENT}`\")\n                 }\n             }\n         }"}, {"sha": "ca785042aaa6abfa867ef058f16e15f50ddbbea1", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147e6e427a1b3c4aedcd9fd85bd457888f80972/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=8147e6e427a1b3c4aedcd9fd85bd457888f80972", "patch": "@@ -90,7 +90,9 @@ fn main() {\n         check!(edition, &compiler_path);\n         check!(edition, &library_path);\n \n+        check!(alphabetical, &src_path);\n         check!(alphabetical, &compiler_path);\n+        check!(alphabetical, &library_path);\n \n         let collected = {\n             while handles.len() >= concurrency.get() {"}]}