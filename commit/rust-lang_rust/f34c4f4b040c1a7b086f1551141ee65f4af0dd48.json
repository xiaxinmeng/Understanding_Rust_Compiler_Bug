{"sha": "f34c4f4b040c1a7b086f1551141ee65f4af0dd48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGM0ZjRiMDQwYzFhN2IwODZmMTU1MTE0MWVlNjVmNGFmMGRkNDg=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-09-28T01:44:14Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-09-28T01:44:14Z"}, "message": "Remove trailing whitespace", "tree": {"sha": "ba4f1c0d0fe8b8ffef665b8dc922044fdc0d1aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4f1c0d0fe8b8ffef665b8dc922044fdc0d1aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34c4f4b040c1a7b086f1551141ee65f4af0dd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34c4f4b040c1a7b086f1551141ee65f4af0dd48", "html_url": "https://github.com/rust-lang/rust/commit/f34c4f4b040c1a7b086f1551141ee65f4af0dd48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34c4f4b040c1a7b086f1551141ee65f4af0dd48/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868d10160f81c9d836202ed1c0683b75730fe73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/868d10160f81c9d836202ed1c0683b75730fe73d", "html_url": "https://github.com/rust-lang/rust/commit/868d10160f81c9d836202ed1c0683b75730fe73d"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "47b66fc17b28134d2b5c8089a818e4db9ea9f08c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f34c4f4b040c1a7b086f1551141ee65f4af0dd48/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34c4f4b040c1a7b086f1551141ee65f4af0dd48/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=f34c4f4b040c1a7b086f1551141ee65f4af0dd48", "patch": "@@ -206,9 +206,9 @@ fn timsort<T: Ord>(array: &[mut T]) {\n \n         idx += runLen;\n         remaining -= runLen;\n-        if remaining == 0 { break; } \n+        if remaining == 0 { break; }\n     }\n-    \n+\n     ms.mergeForceCollapse(array);\n }\n \n@@ -288,18 +288,18 @@ fn countRunAndMakeAscending<T: Ord>(array: &[mut T]) -> uint {\n             run += 1;\n         }\n     }\n-    \n+\n     return run;\n }\n \n pure fn gallopLeft<T: Ord>(key: &const T, array: &[const T],\n-                            hint: uint) -> uint {  \n+                            hint: uint) -> uint {\n     let size = array.len();\n     assert size != 0 && hint < size;\n \n     let mut lastOfs = 0;\n     let mut ofs = 1;\n-    \n+\n     if *key > array[hint] {\n         // Gallop right until array[hint+lastOfs] < key <= array[hint+ofs]\n         let maxOfs = size - hint;\n@@ -319,7 +319,7 @@ pure fn gallopLeft<T: Ord>(key: &const T, array: &[const T],\n             ofs = (ofs << 1) + 1;\n             if ofs < lastOfs { ofs = maxOfs; } // uint overflow guard\n         }\n-        \n+\n         if ofs > maxOfs { ofs = maxOfs; }\n \n         let tmp = lastOfs;\n@@ -348,7 +348,7 @@ pure fn gallopRight<T: Ord>(key: &const T, array: &[const T],\n \n     let mut lastOfs = 0;\n     let mut ofs = 1;\n-    \n+\n     if *key >= array[hint] {\n         // Gallop right until array[hint+lastOfs] <= key < array[hint+ofs]\n         let maxOfs = size - hint;\n@@ -360,7 +360,7 @@ pure fn gallopRight<T: Ord>(key: &const T, array: &[const T],\n         if ofs > maxOfs { ofs = maxOfs; }\n \n         lastOfs += hint;\n-        ofs += hint;    \n+        ofs += hint;\n     } else {\n         // Gallop left until array[hint-ofs] <= key < array[hint-lastOfs]\n         let maxOfs = hint + 1;\n@@ -411,7 +411,7 @@ struct MergeState<T> {\n \n fn MergeState<T>() -> MergeState<T> {\n     let mut tmp = ~[];\n-    vec::reserve(&mut tmp, INITIAL_TMP_STORAGE); \n+    vec::reserve(&mut tmp, INITIAL_TMP_STORAGE);\n     MergeState {\n         minGallop: MIN_GALLOP,\n         tmp: tmp,\n@@ -469,7 +469,7 @@ impl<T: Ord> &MergeState<T> {\n     fn mergeLo(array: &[mut T], base1: uint, len1: uint,\n                 base2: uint, len2: uint) {\n         assert len1 != 0 && len2 != 0 && base1+len1 == base2;\n-        \n+\n         vec::reserve(&mut self.tmp, len1);\n \n         unsafe {\n@@ -563,7 +563,7 @@ impl<T: Ord> &MergeState<T> {\n                 minGallop -= 1;\n                 if !(count1 >= MIN_GALLOP || count2 >= MIN_GALLOP) {\n                     break;\n-                } \n+                }\n             }\n             if breakOuter { break; }\n             if minGallop < 0 { minGallop = 0; }\n@@ -655,7 +655,7 @@ impl<T: Ord> &MergeState<T> {\n                 }\n             }\n             if breakOuter { break; }\n-    \n+\n             // Start to gallop\n             loop {\n                 assert len2 > 1 && len1 != 0;\n@@ -692,15 +692,15 @@ impl<T: Ord> &MergeState<T> {\n                 minGallop -= 1;\n                 if !(count1 >= MIN_GALLOP || count2 >= MIN_GALLOP) {\n                     break;\n-                } \n+                }\n             }\n-            \n+\n             if breakOuter { break; }\n             if minGallop < 0 { minGallop = 0; }\n             minGallop += 2; // Penalize for leaving gallop\n         }\n         self.minGallop = if minGallop < 1 { 1 } else { minGallop };\n-        \n+\n         if len2 == 1 {\n             assert len1 > 0;\n             dest -= len1;\n@@ -757,8 +757,8 @@ impl<T: Ord> &MergeState<T> {\n // Moves elements to from dest to from\n // Unsafe as it makes the from parameter invalid between s2 and s2+len\n #[inline(always)]\n-unsafe fn moveVec<T>(dest: &[mut T], s1: uint, \n-                    from: &[const T], s2: uint, len: uint) {   \n+unsafe fn moveVec<T>(dest: &[mut T], s1: uint,\n+                    from: &[const T], s2: uint, len: uint) {\n     assert s1+len <= dest.len() && s2+len <= from.len();\n \n     do vec::as_mut_buf(dest) |p, _len| {\n@@ -818,7 +818,7 @@ mod test_qsort {\n     fn check_sort(v1: &[mut int], v2: &[mut int]) {\n         let len = vec::len::<int>(v1);\n         pure fn leual(a: &int, b: &int) -> bool { *a <= *b }\n-        quick_sort::<int>(leual, v1);\n+        quick_sort::<int>(v1, leual);\n         let mut i = 0u;\n         while i < len {\n             log(debug, v2[i]);\n@@ -859,7 +859,7 @@ mod test_qsort {\n \n         let expected = ~[1, 2, 3];\n \n-        sort::quick_sort(|x, y| { int::le(*x, *y) }, names);\n+        do sort::quick_sort(names) |x, y| { int::le(*x, *y) };\n \n         let immut_names = vec::from_mut(names);\n \n@@ -880,7 +880,7 @@ mod tests {\n         let len = vec::len::<int>(v1);\n         pure fn le(a: &int, b: &int) -> bool { *a <= *b }\n         let f = le;\n-        let v3 = merge_sort::<int>(f, v1);\n+        let v3 = merge_sort::<int>(v1, f);\n         let mut i = 0u;\n         while i < len {\n             log(debug, v3[i]);\n@@ -910,7 +910,7 @@ mod tests {\n     fn test_merge_sort_mutable() {\n         pure fn le(a: &int, b: &int) -> bool { *a <= *b }\n         let v1 = ~[mut 3, 2, 1];\n-        let v2 = merge_sort(le, v1);\n+        let v2 = merge_sort(v1, le);\n         assert v2 == ~[1, 2, 3];\n     }\n \n@@ -932,7 +932,7 @@ mod tests {\n                        \"Sally Mae\", \"JOE BOB\", \"Alex Andy\"];\n         let names2 = ~[\"Alex Andy\", \"Jack Brown\", \"joe bob\", \"Joe Bob\",\n                        \"JOE Bob\", \"JOE BOB\", \"Sally Mae\"];\n-        let names3 = merge_sort(ile, names1);\n+        let names3 = merge_sort(names1, ile);\n         assert names3 == names2;\n     }\n }"}]}