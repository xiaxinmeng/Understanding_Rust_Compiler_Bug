{"sha": "94a770a777d3995e80938a31ec51c6e85d7ab694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YTc3MGE3NzdkMzk5NWU4MDkzOGEzMWVjNTFjNmU4NWQ3YWI2OTQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:32:31Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:32:31Z"}, "message": "Use correct shape when rewriting the last arg with overflowing", "tree": {"sha": "e15739aa722956fa8e4e138cd737acc3c10304ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15739aa722956fa8e4e138cd737acc3c10304ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a770a777d3995e80938a31ec51c6e85d7ab694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a770a777d3995e80938a31ec51c6e85d7ab694", "html_url": "https://github.com/rust-lang/rust/commit/94a770a777d3995e80938a31ec51c6e85d7ab694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a770a777d3995e80938a31ec51c6e85d7ab694/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be19bab9dee0a4e54638327a3b072ceb0868484f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be19bab9dee0a4e54638327a3b072ceb0868484f", "html_url": "https://github.com/rust-lang/rust/commit/be19bab9dee0a4e54638327a3b072ceb0868484f"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "96132229c9038920b43b7ff3c418abcc5f56dbcb", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94a770a777d3995e80938a31ec51c6e85d7ab694/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a770a777d3995e80938a31ec51c6e85d7ab694/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=94a770a777d3995e80938a31ec51c6e85d7ab694", "patch": "@@ -1814,6 +1814,10 @@ where\n     let used_width = extra_offset(callee_str, shape);\n     let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n \n+    // 1 = \"(\" or \")\"\n+    let one_line_shape = shape\n+        .offset_left(last_line_width(callee_str) + 1)?\n+        .sub_width(1)?;\n     let nested_shape = shape_from_indent_style(\n         context,\n         shape,\n@@ -1828,6 +1832,7 @@ where\n         context,\n         args,\n         args_span,\n+        one_line_shape,\n         nested_shape,\n         one_line_width,\n         args_max_width,\n@@ -1867,7 +1872,8 @@ fn rewrite_call_args<'a, T>(\n     context: &RewriteContext,\n     args: &[&T],\n     span: Span,\n-    shape: Shape,\n+    one_line_shape: Shape,\n+    nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n     force_trailing_comma: bool,\n@@ -1882,7 +1888,7 @@ where\n         \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n-        |item| item.rewrite(context, shape),\n+        |item| item.rewrite(context, nested_shape),\n         span.lo(),\n         span.hi(),\n         true,\n@@ -1896,7 +1902,8 @@ where\n         context,\n         &mut item_vec,\n         &args[..],\n-        shape,\n+        one_line_shape,\n+        nested_shape,\n         one_line_width,\n         args_max_width,\n     );\n@@ -1912,7 +1919,7 @@ where\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape: nested_shape,\n         ends_with_newline: context.use_block_indent() && tactic == DefinitiveListTactic::Vertical,\n         preserve_newline: false,\n         config: context.config,\n@@ -1927,7 +1934,8 @@ fn try_overflow_last_arg<'a, T>(\n     context: &RewriteContext,\n     item_vec: &mut Vec<ListItem>,\n     args: &[&T],\n-    shape: Shape,\n+    one_line_shape: Shape,\n+    nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n ) -> DefinitiveListTactic\n@@ -1945,7 +1953,7 @@ where\n                 context.force_one_line_chain = true;\n             }\n         }\n-        last_arg_shape(&context, item_vec, shape, args_max_width).and_then(|arg_shape| {\n+        last_arg_shape(&context, item_vec, one_line_shape, args_max_width).and_then(|arg_shape| {\n             rewrite_last_arg_with_overflow(&context, args, &mut item_vec[args.len() - 1], arg_shape)\n         })\n     } else {"}]}