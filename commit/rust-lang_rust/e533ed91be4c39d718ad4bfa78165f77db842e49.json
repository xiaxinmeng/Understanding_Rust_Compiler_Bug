{"sha": "e533ed91be4c39d718ad4bfa78165f77db842e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzNlZDkxYmU0YzM5ZDcxOGFkNGJmYTc4MTY1Zjc3ZGI4NDJlNDk=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-27T10:26:38Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-27T10:28:33Z"}, "message": "Avoid storing interolated token in Parser.last_token", "tree": {"sha": "448f6e06d421f6a74d13199c750053067b3f3713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448f6e06d421f6a74d13199c750053067b3f3713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e533ed91be4c39d718ad4bfa78165f77db842e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e533ed91be4c39d718ad4bfa78165f77db842e49", "html_url": "https://github.com/rust-lang/rust/commit/e533ed91be4c39d718ad4bfa78165f77db842e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e533ed91be4c39d718ad4bfa78165f77db842e49/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47bfd8c93c71730628af48818dd04ed62cffee74", "url": "https://api.github.com/repos/rust-lang/rust/commits/47bfd8c93c71730628af48818dd04ed62cffee74", "html_url": "https://github.com/rust-lang/rust/commit/47bfd8c93c71730628af48818dd04ed62cffee74"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "883a54079d8d3e7bed485745f0049f3173ce49bf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e533ed91be4c39d718ad4bfa78165f77db842e49/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e533ed91be4c39d718ad4bfa78165f77db842e49/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e533ed91be4c39d718ad4bfa78165f77db842e49", "patch": "@@ -254,6 +254,7 @@ pub struct Parser<'a> {\n     pub cfg: CrateConfig,\n     /// the previous token or None (only stashed sometimes).\n     pub last_token: Option<Box<token::Token>>,\n+    last_token_interpolated: bool,\n     pub buffer: [TokenAndSpan; 4],\n     pub buffer_start: isize,\n     pub buffer_end: isize,\n@@ -361,6 +362,7 @@ impl<'a> Parser<'a> {\n             span: span,\n             last_span: span,\n             last_token: None,\n+            last_token_interpolated: false,\n             buffer: [\n                 placeholder.clone(),\n                 placeholder.clone(),\n@@ -542,10 +544,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// returns the span of expr, if it was not interpolated or the span of the interpolated token\n-    fn interpolated_or_expr_span(&self, expr: PResult<'a, P<Expr>>) -> PResult<'a, (Span, P<Expr>)> {\n-        let is_interpolated = self.token.is_interpolated();\n+    fn interpolated_or_expr_span(&self,\n+                                 expr: PResult<'a, P<Expr>>)\n+                                 -> PResult<'a, (Span, P<Expr>)> {\n         expr.map(|e| {\n-            if is_interpolated {\n+            if self.last_token_interpolated {\n                 (self.last_span, e)\n             } else {\n                 (e.span, e)\n@@ -939,12 +942,12 @@ impl<'a> Parser<'a> {\n         // Stash token for error recovery (sometimes; clone is not necessarily cheap).\n         self.last_token = if self.token.is_ident() ||\n                           self.token.is_path() ||\n-                          self.token.is_interpolated() ||\n                           self.token == token::Comma {\n             Some(Box::new(self.token.clone()))\n         } else {\n             None\n         };\n+        self.last_token_interpolated = self.token.is_interpolated();\n         let next = if self.buffer_start == self.buffer_end {\n             self.reader.real_token()\n         } else {\n@@ -2810,9 +2813,10 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n \n-            let lhs_span = match self.last_token {\n-                Some(ref lt) if lt.is_interpolated() => self.last_span,\n-                _ => lhs.span\n+            let lhs_span = if self.last_token_interpolated {\n+                self.last_span\n+            } else {\n+                lhs.span\n             };\n \n             let cur_op_span = self.span;"}]}