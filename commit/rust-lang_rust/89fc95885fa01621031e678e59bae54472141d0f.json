{"sha": "89fc95885fa01621031e678e59bae54472141d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmM5NTg4NWZhMDE2MjEwMzFlNjc4ZTU5YmFlNTQ0NzIxNDFkMGY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T00:23:25Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T14:02:59Z"}, "message": "std: serializing Options should use the right case", "tree": {"sha": "f078144949295ad829eef69cb4321a9d1d835157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f078144949295ad829eef69cb4321a9d1d835157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89fc95885fa01621031e678e59bae54472141d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89fc95885fa01621031e678e59bae54472141d0f", "html_url": "https://github.com/rust-lang/rust/commit/89fc95885fa01621031e678e59bae54472141d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89fc95885fa01621031e678e59bae54472141d0f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b290863be6fa40f0e4f91ba91ff8c5eeb08c6524", "url": "https://api.github.com/repos/rust-lang/rust/commits/b290863be6fa40f0e4f91ba91ff8c5eeb08c6524", "html_url": "https://github.com/rust-lang/rust/commit/b290863be6fa40f0e4f91ba91ff8c5eeb08c6524"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "8e4bbc87b087f1789e84cb35dd86cb420469a9dd", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fc95885fa01621031e678e59bae54472141d0f/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fc95885fa01621031e678e59bae54472141d0f/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=89fc95885fa01621031e678e59bae54472141d0f", "patch": "@@ -368,12 +368,12 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n \n impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n     fn encode(&self, s: &S) {\n-        do s.emit_enum(~\"option\") {\n+        do s.emit_enum(~\"Option\") {\n             match *self {\n-              None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n+              None => do s.emit_enum_variant(~\"None\", 0u, 0u) {\n               },\n \n-              Some(ref v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n+              Some(ref v) => do s.emit_enum_variant(~\"Some\", 1u, 1u) {\n                 s.emit_enum_variant_arg(0u, || v.encode(s))\n               }\n             }\n@@ -383,7 +383,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n     fn decode(d: &D) -> Option<T> {\n-        do d.read_enum(~\"option\") {\n+        do d.read_enum(~\"Option\") {\n             do d.read_enum_variant |i| {\n                 match i {\n                   0 => None,"}]}