{"sha": "87f63ca258416e55d89879ea7f89a8ca1064b665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjYzY2EyNTg0MTZlNTVkODk4NzllYTdmODlhOGNhMTA2NGI2NjU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-06-08T16:00:26Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-06-08T16:00:26Z"}, "message": "Add tests for associated types and inconsistent bounds", "tree": {"sha": "7830ac4e29b77588f1dfb23f4f4ae43857bc3efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7830ac4e29b77588f1dfb23f4f4ae43857bc3efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f63ca258416e55d89879ea7f89a8ca1064b665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f63ca258416e55d89879ea7f89a8ca1064b665", "html_url": "https://github.com/rust-lang/rust/commit/87f63ca258416e55d89879ea7f89a8ca1064b665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f63ca258416e55d89879ea7f89a8ca1064b665/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba35e8053499b694498184905f1be11b727cdf72", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba35e8053499b694498184905f1be11b727cdf72", "html_url": "https://github.com/rust-lang/rust/commit/ba35e8053499b694498184905f1be11b727cdf72"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "1a3bd3a8cd7cc32c4327f09a558f8bdd0097eead", "filename": "src/test/ui/trivial-bounds-inconsistent-projection-error.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs?ref=87f63ca258416e55d89879ea7f89a8ca1064b665", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+struct B;\n+\n+trait A {\n+    type X;\n+    fn get_x() -> Self::X;\n+}\n+\n+impl A for B {\n+    type X = u8;\n+    fn get_x() -> u8 { 0 }\n+}\n+\n+fn global_bound_is_hidden() -> u8\n+where\n+    B: A<X = i32>\n+{\n+    B::get_x() //~ ERROR\n+}\n+\n+fn main () {}"}, {"sha": "0f720bee2b4e66a3f3e2fc09de20de7444278204", "filename": "src/test/ui/trivial-bounds-inconsistent-projection-error.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=87f63ca258416e55d89879ea7f89a8ca1064b665", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trivial-bounds-inconsistent-projection-error.rs:30:5\n+   |\n+LL | fn global_bound_is_hidden() -> u8\n+   |                                -- expected `u8` because of return type\n+...\n+LL |     B::get_x() //~ ERROR\n+   |     ^^^^^^^^^^ expected u8, found i32\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8de6f06bf5f5de41b272f46c13f659894256449e", "filename": "src/test/ui/trivial-bounds-inconsistent-projection.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs?ref=87f63ca258416e55d89879ea7f89a8ca1064b665", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check that global bounds result in the expected choice of associated type\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+struct B;\n+\n+trait A {\n+    type X;\n+    fn get_x() -> Self::X;\n+}\n+\n+impl A for B {\n+    type X = u8;\n+    fn get_x() -> u8 { 0 }\n+}\n+\n+fn underspecified_bound() -> u8\n+where\n+    B: A\n+{\n+    B::get_x()\n+}\n+\n+fn inconsistent_bound() -> i32\n+where\n+    B: A<X = i32>\n+{\n+    B::get_x()\n+}\n+\n+fn redundant_bound() -> u8\n+where\n+    B: A<X = u8>\n+{\n+    B::get_x()\n+}\n+\n+fn inconsistent_dup_bound() -> i32\n+where\n+    B: A<X = i32> + A\n+{\n+    B::get_x()\n+}\n+\n+fn redundant_dup_bound() -> u8\n+where\n+    B: A<X = u8> + A\n+{\n+    B::get_x()\n+}\n+\n+fn main () {}"}, {"sha": "201a041830f84a372bdb74104d9575d5a9a3f52f", "filename": "src/test/ui/trivial-bounds-inconsistent-projection.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87f63ca258416e55d89879ea7f89a8ca1064b665/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr?ref=87f63ca258416e55d89879ea7f89a8ca1064b665", "patch": "@@ -0,0 +1,57 @@\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:29:1\n+   |\n+LL | / fn underspecified_bound() -> u8\n+LL | | where\n+LL | |     B: A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:36:1\n+   |\n+LL | / fn inconsistent_bound() -> i32\n+LL | | where\n+LL | |     B: A<X = i32>\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:43:1\n+   |\n+LL | / fn redundant_bound() -> u8\n+LL | | where\n+LL | |     B: A<X = u8>\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:50:1\n+   |\n+LL | / fn inconsistent_dup_bound() -> i32\n+LL | | where\n+LL | |     B: A<X = i32> + A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:57:1\n+   |\n+LL | / fn redundant_dup_bound() -> u8\n+LL | | where\n+LL | |     B: A<X = u8> + A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+"}]}