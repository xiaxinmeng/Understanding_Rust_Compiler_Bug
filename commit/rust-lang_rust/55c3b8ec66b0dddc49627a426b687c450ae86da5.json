{"sha": "55c3b8ec66b0dddc49627a426b687c450ae86da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzNiOGVjNjZiMGRkZGM0OTYyN2E0MjZiNjg3YzQ1MGFlODZkYTU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-30T17:19:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-07T07:54:38Z"}, "message": "Update compile-fail tests.", "tree": {"sha": "152ebb6a30822ef2721ba98a71050d9b63f9d252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152ebb6a30822ef2721ba98a71050d9b63f9d252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c3b8ec66b0dddc49627a426b687c450ae86da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c3b8ec66b0dddc49627a426b687c450ae86da5", "html_url": "https://github.com/rust-lang/rust/commit/55c3b8ec66b0dddc49627a426b687c450ae86da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c3b8ec66b0dddc49627a426b687c450ae86da5/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd4be9c2e4ef563aaa00f0d8a631e315547daf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd4be9c2e4ef563aaa00f0d8a631e315547daf0", "html_url": "https://github.com/rust-lang/rust/commit/9fd4be9c2e4ef563aaa00f0d8a631e315547daf0"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "fc465b268691eff7b7b8ee3af06b00f068cee75c", "filename": "src/test/compile-fail/E0534.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2FE0534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2FE0534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0534.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -11,4 +11,6 @@\n #[inline()] //~ ERROR E0534\n pub fn something() {}\n \n-fn main() {}\n+fn main() {\n+    something();\n+}"}, {"sha": "2fe94d43acdd1867b9ef7ec40d64911261c0b134", "filename": "src/test/compile-fail/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd, platform_intrinsics, core_intrinsics)]\n #![allow(warnings)]\n+#![crate_type = \"rlib\"]\n \n // Bad monomorphizations could previously cause LLVM asserts even though the\n // error was caught in the compiler.\n@@ -21,21 +22,19 @@ extern \"platform-intrinsic\" {\n use std::intrinsics;\n \n #[derive(Copy, Clone)]\n-struct Foo(i64);\n+pub struct Foo(i64);\n \n-unsafe fn test_cttz(v: Foo) -> Foo {\n+pub unsafe fn test_cttz(v: Foo) -> Foo {\n     intrinsics::cttz(v)\n     //~^ ERROR `cttz` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_fadd_fast(a: Foo, b: Foo) -> Foo {\n+pub unsafe fn test_fadd_fast(a: Foo, b: Foo) -> Foo {\n     intrinsics::fadd_fast(a, b)\n     //~^ ERROR `fadd_fast` intrinsic: expected basic float type, found `Foo`\n }\n \n-unsafe fn test_simd_add(a: Foo, b: Foo) -> Foo {\n+pub unsafe fn test_simd_add(a: Foo, b: Foo) -> Foo {\n     simd_add(a, b)\n     //~^ ERROR `simd_add` intrinsic: expected SIMD input type, found non-SIMD `Foo`\n }\n-\n-fn main() {}"}, {"sha": "1f19bd2f249b3f803acc102724dd557340270c96", "filename": "src/test/compile-fail/dupe-symbols-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -11,13 +11,13 @@\n #![crate_type=\"rlib\"]\n #![allow(warnings)]\n \n-mod a {\n+pub mod a {\n     #[no_mangle]\n     pub extern fn fail() {\n     }\n }\n \n-mod b {\n+pub mod b {\n     #[no_mangle]\n     pub extern fn fail() {\n     //~^ symbol `fail` is already defined"}, {"sha": "93b985b4fb063d9d27d9a422c1fbf0370461476f", "filename": "src/test/compile-fail/invalid-inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -21,4 +21,8 @@ fn b() {\n fn c() {\n }\n \n-fn main() {}\n+fn main() {\n+    a();\n+    b();\n+    c();\n+}"}, {"sha": "53b0d9f4e9f0ceda022d7453d727e7c2e1459e2a", "filename": "src/test/compile-fail/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -12,6 +12,7 @@\n \n #![recursion_limit = \"20\"]\n #![type_length_limit = \"20000000\"]\n+#![crate_type = \"rlib\"]\n \n #[derive(Clone)]\n struct A (B);\n@@ -66,5 +67,3 @@ impl D {\n pub fn matches() {\n     A(B::Variant1).matches(&(|| ()))\n }\n-\n-fn main() {}"}, {"sha": "a51a9e518ce5fe7e0d7aac6fd9f6b9b7922ac72f", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c3b8ec66b0dddc49627a426b687c450ae86da5/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=55c3b8ec66b0dddc49627a426b687c450ae86da5", "patch": "@@ -10,92 +10,91 @@\n \n #![feature(core_intrinsics)]\n #![allow(warnings)]\n+#![crate_type = \"rlib\"]\n \n use std::intrinsics;\n \n #[derive(Copy, Clone)]\n-struct Foo(i64);\n-type Bar = &'static Fn();\n-type Quux = [u8; 100];\n+pub struct Foo(i64);\n+pub type Bar = &'static Fn();\n+pub type Quux = [u8; 100];\n \n-unsafe fn test_bool_load(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_load(p: &mut bool, v: bool) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_store(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_store(p: &mut bool, v: bool) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_xchg(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_xchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_cxchg(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_cxchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_Foo_load(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_load(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_store(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_store(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_xchg(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_xchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_store(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_store(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_xchg(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_xchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_cxchg(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_cxchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n-\n-fn main() {}"}]}