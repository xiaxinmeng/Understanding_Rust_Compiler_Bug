{"sha": "0fac56717a1bce4e362d91d8f4e71d65676d49a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYWM1NjcxN2ExYmNlNGUzNjJkOTFkOGY0ZTcxZDY1Njc2ZDQ5YTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T12:55:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:34Z"}, "message": "syntax: Remove redundant span from `ast::Mac`\n\nAlso remove a couple of redundant `visit_mac` asserts", "tree": {"sha": "11b5ebb959a47b61f5e8a7e1853d85c8b62e7554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b5ebb959a47b61f5e8a7e1853d85c8b62e7554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fac56717a1bce4e362d91d8f4e71d65676d49a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fac56717a1bce4e362d91d8f4e71d65676d49a3", "html_url": "https://github.com/rust-lang/rust/commit/0fac56717a1bce4e362d91d8f4e71d65676d49a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fac56717a1bce4e362d91d8f4e71d65676d49a3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a81804b4d5f222f94758139b504aa2570528f9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81804b4d5f222f94758139b504aa2570528f9f1", "html_url": "https://github.com/rust-lang/rust/commit/a81804b4d5f222f94758139b504aa2570528f9f1"}], "stats": {"total": 90, "additions": 34, "deletions": 56}, "files": [{"sha": "1112274dc46a511524ba2ce1cf181fa285c01d59", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -927,7 +927,6 @@ impl<'a> Parser<'a> {\n                         ex = ExprKind::Mac(Mac {\n                             path,\n                             args,\n-                            span: lo.to(hi),\n                             prior_type_ascription: self.last_type_ascription,\n                         });\n                     } else if self.check(&token::OpenDelim(token::Brace)) {"}, {"sha": "9f3f6414b3ea1703624a7ca7b0c33a3e53d5f8b1", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -432,8 +432,6 @@ impl<'a> Parser<'a> {\n             let prev_span = self.prev_span;\n             self.complain_if_pub_macro(&visibility.node, prev_span);\n \n-            let mac_lo = self.token.span;\n-\n             // Item macro\n             let path = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::Not)?;\n@@ -446,7 +444,6 @@ impl<'a> Parser<'a> {\n             let mac = Mac {\n                 path,\n                 args,\n-                span: mac_lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n             };\n             let item =\n@@ -499,7 +496,6 @@ impl<'a> Parser<'a> {\n         if self.token.is_path_start() &&\n                 !(self.is_async_fn() && self.token.span.rust_2015()) {\n             let prev_span = self.prev_span;\n-            let lo = self.token.span;\n             let path = self.parse_path(PathStyle::Mod)?;\n \n             if path.segments.len() == 1 {\n@@ -525,7 +521,6 @@ impl<'a> Parser<'a> {\n             Ok(Some(Mac {\n                 path,\n                 args,\n-                span: lo.to(self.prev_span),\n                 prior_type_ascription: self.last_type_ascription,\n             }))\n         } else {"}, {"sha": "1127c4b2d5f88c0bb65725f789db5ff1164d7ea7", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -338,7 +338,7 @@ impl<'a> Parser<'a> {\n                     (None, self.parse_path(PathStyle::Expr)?)\n                 };\n                 match self.token.kind {\n-                    token::Not if qself.is_none() => self.parse_pat_mac_invoc(lo, path)?,\n+                    token::Not if qself.is_none() => self.parse_pat_mac_invoc(path)?,\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n                         self.parse_pat_range_starting_with_path(lo, qself, path)?\n                     }\n@@ -593,13 +593,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse macro invocation\n-    fn parse_pat_mac_invoc(&mut self, lo: Span, path: Path) -> PResult<'a, PatKind> {\n+    fn parse_pat_mac_invoc(&mut self, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let args = self.parse_mac_args()?;\n         let mac = Mac {\n             path,\n             args,\n-            span: lo.to(self.prev_span),\n             prior_type_ascription: self.last_type_ascription,\n         };\n         Ok(PatKind::Mac(mac))"}, {"sha": "b952e8814a361adec72a9e3fec9ad9b7dccd3d48", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -106,7 +106,6 @@ impl<'a> Parser<'a> {\n             let mac = Mac {\n                 path,\n                 args,\n-                span: lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n             };\n             let kind = if delim == token::Brace ||\n@@ -130,7 +129,7 @@ impl<'a> Parser<'a> {\n                 self.warn_missing_semicolon();\n                 StmtKind::Mac(P((mac, style, attrs.into())))\n             } else {\n-                let e = self.mk_expr(mac.span, ExprKind::Mac(mac), ThinVec::new());\n+                let e = self.mk_expr(lo.to(hi), ExprKind::Mac(mac), ThinVec::new());\n                 let e = self.maybe_recover_from_bad_qpath(e, true)?;\n                 let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n                 let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;"}, {"sha": "321427969051c54c24f464334a4d8235cd0a4039", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -181,7 +181,6 @@ impl<'a> Parser<'a> {\n                 let mac = Mac {\n                     path,\n                     args,\n-                    span: lo.to(self.prev_span),\n                     prior_type_ascription: self.last_type_ascription,\n                 };\n                 TyKind::Mac(mac)"}, {"sha": "29cfee8408f30d209f21333bd24010b116e61090", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -737,14 +737,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             |this| visit::walk_enum_def(this, enum_definition, generics, item_id))\n     }\n \n-    fn visit_mac(&mut self, mac: &Mac) {\n-        // when a new macro kind is added but the author forgets to set it up for expansion\n-        // because that's the only part that won't cause a compiler error\n-        self.session.diagnostic()\n-            .span_bug(mac.span, \"macro invocation missed in expansion; did you forget to override \\\n-                                 the relevant `fold_*()` method in `PlaceholderExpander`?\");\n-    }\n-\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         if let ImplItemKind::Method(ref sig, _) = ii.kind {\n             self.check_fn_decl(&sig.decl);"}, {"sha": "396d948433961ddbb013b8f8fca4660e60bd0a27", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -1515,14 +1515,6 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn visit_mac(&mut self, mac: &'l ast::Mac) {\n-        // These shouldn't exist in the AST at this point, log a span bug.\n-        span_bug!(\n-            mac.span,\n-            \"macro invocation should have been expanded out of AST\"\n-        );\n-    }\n-\n     fn visit_pat(&mut self, p: &'l ast::Pat) {\n         self.process_macro_use(p.span);\n         self.process_pat(p);"}, {"sha": "c537d43a4d6572f51cd14b1258ead51acbba93b2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -1379,10 +1379,15 @@ pub enum Movability {\n pub struct Mac {\n     pub path: Path,\n     pub args: P<MacArgs>,\n-    pub span: Span,\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n+impl Mac {\n+    pub fn span(&self) -> Span {\n+        self.path.span.to(self.args.span().unwrap_or(self.path.span))\n+    }\n+}\n+\n /// Arguments passed to an attribute or a function-like macro.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum MacArgs {\n@@ -1403,6 +1408,14 @@ impl MacArgs {\n         }\n     }\n \n+    pub fn span(&self) -> Option<Span> {\n+        match *self {\n+            MacArgs::Empty => None,\n+            MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),\n+            MacArgs::Eq(eq_span, ref tokens) => Some(eq_span.to(tokens.span().unwrap_or(eq_span))),\n+        }\n+    }\n+\n     /// Tokens inside the delimiters or after `=`.\n     /// Proc macros see these tokens, for example.\n     pub fn inner_tokens(&self) -> TokenStream {\n@@ -1432,12 +1445,6 @@ impl MacArgs {\n     }\n }\n \n-impl Mac {\n-    pub fn stream(&self) -> TokenStream {\n-        self.args.inner_tokens()\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub enum MacDelimiter {\n     Parenthesis,"}, {"sha": "2651c46773454413117754f1637b95b2f2329a9b", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -580,10 +580,9 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n }\n \n pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n-    let Mac { path, args, span, prior_type_ascription: _ } = mac;\n+    let Mac { path, args, prior_type_ascription: _ } = mac;\n     vis.visit_path(path);\n     visit_mac_args(args, vis);\n-    vis.visit_span(span);\n }\n \n pub fn noop_visit_macro_def<T: MutVisitor>(macro_def: &mut MacroDef, vis: &mut T) {"}, {"sha": "cb68fe8f4ff88f33494bed5c23e2773c152428f2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -1772,9 +1772,9 @@ impl<'a> State<'a> {\n             true,\n             None,\n             m.args.delim(),\n-            m.stream(),\n+            m.args.inner_tokens(),\n             true,\n-            m.span,\n+            m.span(),\n         );\n     }\n "}, {"sha": "491b9a9ade47ac933e6187fd66a66ad00ee624fc", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -225,6 +225,14 @@ impl TokenStream {\n         self.0.len()\n     }\n \n+    pub fn span(&self) -> Option<Span> {\n+        match &**self.0 {\n+            [] => None,\n+            [(tt, _)] => Some(tt.span()),\n+            [(tt_start, _), .., (tt_end, _)] => Some(tt_start.span().to(tt_end.span())),\n+        }\n+    }\n+\n     pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::default(),"}, {"sha": "f1071cea9ab76e78c9a84be8fef51bd08a46d57b", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -597,13 +597,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             InvocationKind::Bang { mac, .. } => match ext {\n                 SyntaxExtensionKind::Bang(expander) => {\n                     self.gate_proc_macro_expansion_kind(span, fragment_kind);\n-                    let tok_result = expander.expand(self.cx, span, mac.stream());\n+                    let tok_result = expander.expand(self.cx, span, mac.args.inner_tokens());\n                     self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n                     let prev = self.cx.current_expansion.prior_type_ascription;\n                     self.cx.current_expansion.prior_type_ascription = mac.prior_type_ascription;\n-                    let tok_result = expander.expand(self.cx, span, mac.stream());\n+                    let tok_result = expander.expand(self.cx, span, mac.args.inner_tokens());\n                     let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {"}, {"sha": "30e83c151e255f347503b5e9edafb6ab3e0b5b44", "filename": "src/libsyntax_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Ftests.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -272,7 +272,7 @@ fn ttdelim_span() {\n             \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n \n         let tts: Vec<_> = match expr.kind {\n-            ast::ExprKind::Mac(ref mac) => mac.stream().trees().collect(),\n+            ast::ExprKind::Mac(ref mac) => mac.args.inner_tokens().trees().collect(),\n             _ => panic!(\"not a macro\"),\n         };\n "}, {"sha": "74ade1de20e2a355cab5236db0b5d2982a0a828b", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -17,7 +17,6 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visi\n         ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n             args: P(ast::MacArgs::Empty),\n-            span: DUMMY_SP,\n             prior_type_ascription: None,\n         }\n     }"}, {"sha": "c788d062994050d04edc15e51305494601c1524a", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -39,7 +39,6 @@ pub fn expand_assert<'cx>(\n     let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         args,\n-        span: sp,\n         prior_type_ascription: None,\n     };\n     let if_expr = cx.expr_if("}, {"sha": "5bd84b43a7801bd14d99dc5bd13739cb7fc14a96", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fac56717a1bce4e362d91d8f4e71d65676d49a3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0fac56717a1bce4e362d91d8f4e71d65676d49a3", "patch": "@@ -340,14 +340,12 @@ pub fn combine_substructure(f: CombineSubstructureFunc<'_>)\n fn find_type_parameters(\n     ty: &ast::Ty,\n     ty_param_names: &[ast::Name],\n-    span: Span,\n     cx: &ExtCtxt<'_>,\n ) -> Vec<P<ast::Ty>> {\n     use syntax::visit;\n \n     struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n-        span: Span,\n         ty_param_names: &'a [ast::Name],\n         types: Vec<P<ast::Ty>>,\n     }\n@@ -366,18 +364,11 @@ fn find_type_parameters(\n         }\n \n         fn visit_mac(&mut self, mac: &ast::Mac) {\n-            let span = mac.span.with_ctxt(self.span.ctxt());\n-            self.cx.span_err(span, \"`derive` cannot be used on items with type macros\");\n+            self.cx.span_err(mac.span(), \"`derive` cannot be used on items with type macros\");\n         }\n     }\n \n-    let mut visitor = Visitor {\n-        ty_param_names,\n-        types: Vec::new(),\n-        span,\n-        cx,\n-    };\n-\n+    let mut visitor = Visitor { cx, ty_param_names, types: Vec::new() };\n     visit::Visitor::visit_ty(&mut visitor, ty);\n \n     visitor.types\n@@ -605,7 +596,7 @@ impl<'a> TraitDef<'a> {\n                     .collect();\n \n                 for field_ty in field_tys {\n-                    let tys = find_type_parameters(&field_ty, &ty_param_names, self.span, cx);\n+                    let tys = find_type_parameters(&field_ty, &ty_param_names, cx);\n \n                     for ty in tys {\n                         // if we have already handled this type, skip it"}]}