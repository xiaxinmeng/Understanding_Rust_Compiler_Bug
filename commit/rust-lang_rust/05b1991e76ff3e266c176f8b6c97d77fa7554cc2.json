{"sha": "05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YjE5OTFlNzZmZjNlMjY2YzE3NmY4YjZjOTdkNzdmYTc1NTRjYzI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-01T21:16:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-01T21:16:36Z"}, "message": "Rollup merge of #71760 - LeSeulArtichaut:document-unsafety, r=Mark-Simulacrum\n\nDocument unsafety for `*const T` and `*mut T`\n\nHelps with #66219\nr? @Mark-Simulacrum", "tree": {"sha": "cf6cde1d0d60c8846144631eacc35cb3add8d0cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6cde1d0d60c8846144631eacc35cb3add8d0cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerJG0CRBK7hj4Ov3rIwAAdHIIAILD89Qax3Ns4DNjYtde9/lT\nj/jImzi2I8XhxrxNzPNasUFeuamFzONSa1KPxXzahvzt/wbTzpXLwGIF6Fd70IFs\nwx1cWmW44r4DY2V5AmMaWeBqHX7gZnsd/u00YNR+fdb5e1bTM43fB832652WQsUN\nRVef2Ci9/7FjxFgUO4FChr0Sgw3VBvG8yJi+CQ1ZecaW9uP4kUAZq4Q4Z6zC0aov\nLozTd41VHMxINKkAK6M7lKJx27uno/etAAkzWHeGrujHFI8mwh3K/Ii0Nxf5WhBG\n10O40ChYFq5wCtmGEjEH7mtvOc6kdkMMho0c/d6IUzbRd/fSQmGD6vBpZBAA/LU=\n=5a0G\n-----END PGP SIGNATURE-----\n", "payload": "tree cf6cde1d0d60c8846144631eacc35cb3add8d0cf\nparent 8aad12b87dfaf154ec3626dbb51659f213548ba5\nparent d61debac64af9d9f0c18db55fe66144941aa76c7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588367796 +0200\ncommitter GitHub <noreply@github.com> 1588367796 +0200\n\nRollup merge of #71760 - LeSeulArtichaut:document-unsafety, r=Mark-Simulacrum\n\nDocument unsafety for `*const T` and `*mut T`\n\nHelps with #66219\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "html_url": "https://github.com/rust-lang/rust/commit/05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b1991e76ff3e266c176f8b6c97d77fa7554cc2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aad12b87dfaf154ec3626dbb51659f213548ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aad12b87dfaf154ec3626dbb51659f213548ba5", "html_url": "https://github.com/rust-lang/rust/commit/8aad12b87dfaf154ec3626dbb51659f213548ba5"}, {"sha": "d61debac64af9d9f0c18db55fe66144941aa76c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61debac64af9d9f0c18db55fe66144941aa76c7", "html_url": "https://github.com/rust-lang/rust/commit/d61debac64af9d9f0c18db55fe66144941aa76c7"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "94ad77d1ec683defe1a130aa400fc63df2ea6118", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05b1991e76ff3e266c176f8b6c97d77fa7554cc2/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b1991e76ff3e266c176f8b6c97d77fa7554cc2/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "patch": "@@ -3,8 +3,6 @@ use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n use crate::mem;\n \n-// ignore-tidy-undocumented-unsafe\n-\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns `true` if the pointer is null.\n@@ -215,6 +213,7 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n+        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.\n         unsafe { intrinsics::arith_offset(self, count) }\n     }\n \n@@ -702,6 +701,7 @@ impl<T: ?Sized> *const T {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n+        // SAFETY: `align` has been checked to be a power of 2 above\n         unsafe { align_offset(self, align) }\n     }\n }\n@@ -729,6 +729,8 @@ impl<T> *const [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n+        // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n+        // Only `std` can make this guarantee.\n         unsafe { Repr { rust: self }.raw }.len\n     }\n }"}, {"sha": "cf9e20aa56941a6f27a331610c3a59b94e645d60", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05b1991e76ff3e266c176f8b6c97d77fa7554cc2/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b1991e76ff3e266c176f8b6c97d77fa7554cc2/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=05b1991e76ff3e266c176f8b6c97d77fa7554cc2", "patch": "@@ -2,8 +2,6 @@ use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n \n-// ignore-tidy-undocumented-unsafe\n-\n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n     /// Returns `true` if the pointer is null.\n@@ -208,6 +206,7 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n+        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.\n         unsafe { intrinsics::arith_offset(self, count) as *mut T }\n     }\n \n@@ -890,6 +889,7 @@ impl<T: ?Sized> *mut T {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n+        // SAFETY: `align` has been checked to be a power of 2 above\n         unsafe { align_offset(self, align) }\n     }\n }\n@@ -917,6 +917,8 @@ impl<T> *mut [T] {\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n+        // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n+        // Only `std` can make this guarantee.\n         unsafe { Repr { rust_mut: self }.raw }.len\n     }\n }"}]}