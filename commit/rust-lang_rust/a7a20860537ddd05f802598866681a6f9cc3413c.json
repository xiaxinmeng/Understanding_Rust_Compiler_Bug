{"sha": "a7a20860537ddd05f802598866681a6f9cc3413c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTIwODYwNTM3ZGRkMDVmODAyNTk4ODY2NjgxYTZmOWNjMzQxM2M=", "commit": {"author": {"name": "Avi Dessauer", "email": "avi.the.coder@gmail.com", "date": "2020-05-18T03:00:19Z"}, "committer": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-23T01:53:48Z"}, "message": "Stability annotations on generic trait parameters", "tree": {"sha": "de644fb59111a3e170a99de204b490d460b0eab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de644fb59111a3e170a99de204b490d460b0eab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a20860537ddd05f802598866681a6f9cc3413c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a20860537ddd05f802598866681a6f9cc3413c", "html_url": "https://github.com/rust-lang/rust/commit/a7a20860537ddd05f802598866681a6f9cc3413c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a20860537ddd05f802598866681a6f9cc3413c/comments", "author": {"login": "Avi-D-coder", "id": 29133776, "node_id": "MDQ6VXNlcjI5MTMzNzc2", "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avi-D-coder", "html_url": "https://github.com/Avi-D-coder", "followers_url": "https://api.github.com/users/Avi-D-coder/followers", "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}", "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions", "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs", "repos_url": "https://api.github.com/users/Avi-D-coder/repos", "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3acf5129767db78a3d9d62e814ec86b8870d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3acf5129767db78a3d9d62e814ec86b8870d75", "html_url": "https://github.com/rust-lang/rust/commit/6d3acf5129767db78a3d9d62e814ec86b8870d75"}], "stats": {"total": 252, "additions": 226, "deletions": 26}, "files": [{"sha": "9ef17a934232ce71888277b1bee2257f18f5a501", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -1756,13 +1756,17 @@ impl EncodeContext<'a, 'tcx> {\n                         EntryKind::TypeParam,\n                         default.is_some(),\n                     );\n+                    if default.is_some() {\n+                        self.encode_stability(def_id.to_def_id());\n+                    }\n                 }\n                 GenericParamKind::Const { .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n                         EntryKind::ConstParam,\n                         true,\n                     );\n+                    // FIXME(const_generics:defaults)\n                 }\n             }\n         }"}, {"sha": "4c0e513e75ce119815eaa7d3b011fbcc0f778189", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -293,9 +293,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If `id` is `Some(_)`, this function will also check if the item at `def_id` has been\n     /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n     /// `id`.\n-    pub fn eval_stability(self, def_id: DefId, id: Option<HirId>, span: Span) -> EvalResult {\n+    pub fn eval_stability(\n+        self,\n+        def_id: DefId,\n+        id: Option<HirId>,\n+        span: Span,\n+        check_deprecation: bool,\n+    ) -> EvalResult {\n         // Deprecated attributes apply in-crate and cross-crate.\n-        if let Some(id) = id {\n+        if let (Some(id), true) = (id, check_deprecation) {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n                 let parent_def_id = self.hir().local_def_id(self.hir().get_parent_item(id));\n                 let skip = self\n@@ -395,21 +401,39 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Additionally, this function will also check if the item is deprecated. If so, and `id` is\n     /// not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n+        self.check_stability_internal(def_id, id, span, true, |span, def_id| {\n+            // The API could be uncallable for other reasons, for example when a private module\n+            // was referenced.\n+            self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n+        })\n+    }\n+\n+    /// Checks if an item is stable or error out.\n+    ///\n+    /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n+    /// exist, emits an error.\n+    ///\n+    /// Additionally when `inherit_dep` is `true`, this function will also check if the item is deprecated. If so, and `id` is\n+    /// not `None`, a deprecated lint attached to `id` will be emitted.\n+    pub fn check_stability_internal(\n+        self,\n+        def_id: DefId,\n+        id: Option<HirId>,\n+        span: Span,\n+        check_deprecation: bool,\n+        unmarked: impl FnOnce(Span, DefId) -> (),\n+    ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit()\n             })\n         };\n-        match self.eval_stability(def_id, id, span) {\n+        match self.eval_stability(def_id, id, span, check_deprecation) {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, is_soft } => {\n                 report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler)\n             }\n-            EvalResult::Unmarked => {\n-                // The API could be uncallable for other reasons, for example when a private module\n-                // was referenced.\n-                self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n-            }\n+            EvalResult::Unmarked => unmarked(span, def_id),\n         }\n     }\n "}, {"sha": "d658a58aeab1afff4c0cb661103880174dcd0f90", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -56,14 +56,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         attrs: &[Attribute],\n         item_sp: Span,\n         kind: AnnotationKind,\n+        inherit_deprecation: bool,\n         visit_children: F,\n     ) where\n         F: FnOnce(&mut Self),\n     {\n         debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n         let mut did_error = false;\n         if !self.tcx.features().staged_api {\n-            did_error = self.forbid_staged_api_attrs(hir_id, attrs);\n+            did_error = self.forbid_staged_api_attrs(hir_id, attrs, inherit_deprecation);\n         }\n \n         let depr =\n@@ -80,9 +81,11 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             let depr_entry = DeprecationEntry::local(depr.clone(), hir_id);\n             self.index.depr_map.insert(hir_id, depr_entry);\n         } else if let Some(parent_depr) = self.parent_depr.clone() {\n-            is_deprecated = true;\n-            info!(\"tagging child {:?} as deprecated from parent\", hir_id);\n-            self.index.depr_map.insert(hir_id, parent_depr);\n+            if inherit_deprecation {\n+                is_deprecated = true;\n+                info!(\"tagging child {:?} as deprecated from parent\", hir_id);\n+                self.index.depr_map.insert(hir_id, parent_depr);\n+            }\n         }\n \n         if self.tcx.features().staged_api {\n@@ -186,7 +189,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if stab.is_none() {\n             debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n-                if stab.level.is_unstable() {\n+                if inherit_deprecation && stab.level.is_unstable() {\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n@@ -237,7 +240,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     }\n \n     // returns true if an error occurred, used to suppress some spurious errors\n-    fn forbid_staged_api_attrs(&mut self, hir_id: HirId, attrs: &[Attribute]) -> bool {\n+    fn forbid_staged_api_attrs(&mut self, hir_id: HirId, attrs: &[Attribute], inherit_deprecation: bool) -> bool {\n         // Emit errors for non-staged-api crates.\n         let unstable_attrs = [\n             sym::unstable,\n@@ -265,7 +268,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         // Propagate unstability.  This can happen even for non-staged-api crates in case\n         // -Zforce-unstable-if-unmarked is set.\n         if let Some(stab) = self.parent_stab {\n-            if stab.level.is_unstable() {\n+            if inherit_deprecation && stab.level.is_unstable() {\n                 self.index.stab_map.insert(hir_id, stab);\n             }\n         }\n@@ -301,54 +304,82 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n-                    self.annotate(ctor_hir_id, &i.attrs, i.span, AnnotationKind::Required, |_| {})\n+                    self.annotate(\n+                        ctor_hir_id,\n+                        &i.attrs,\n+                        i.span,\n+                        AnnotationKind::Required,\n+                        true,\n+                        |_| {},\n+                    )\n                 }\n             }\n             _ => {}\n         }\n \n-        self.annotate(i.hir_id, &i.attrs, i.span, kind, |v| intravisit::walk_item(v, i));\n+        self.annotate(i.hir_id, &i.attrs, i.span, kind, true, |v| intravisit::walk_item(v, i));\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n-        self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n+        self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, true, |v| {\n             intravisit::walk_trait_item(v, ti);\n         });\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n-        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, |v| {\n+        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, true, |v| {\n             intravisit::walk_impl_item(v, ii);\n         });\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n-        self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required, |v| {\n+        self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required, true, |v| {\n             if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n-                v.annotate(ctor_hir_id, &var.attrs, var.span, AnnotationKind::Required, |_| {});\n+                v.annotate(\n+                    ctor_hir_id,\n+                    &var.attrs,\n+                    var.span,\n+                    AnnotationKind::Required,\n+                    true,\n+                    |_| {},\n+                );\n             }\n \n             intravisit::walk_variant(v, var, g, item_id)\n         })\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n-        self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n+        self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, true, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n-        self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n+        self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, true, |v| {\n             intravisit::walk_foreign_item(v, i);\n         });\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n+        self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, true, |_| {});\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n+        let kind = match &p.kind {\n+            // FIXME(const_generics:defaults)\n+            hir::GenericParamKind::Type { default, .. } if default.is_some() => {\n+                AnnotationKind::Container\n+            }\n+            _ => AnnotationKind::Prohibited,\n+        };\n+\n+        self.annotate(p.hir_id, &p.attrs, p.span, kind, false, |v| {\n+            intravisit::walk_generic_param(v, p);\n+        });\n     }\n }\n \n@@ -422,6 +453,10 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.check_missing_stability(md.hir_id, md.span);\n     }\n+\n+    // Note that we don't need to `check_missing_stability` for default generic parameters,\n+    // as we assume that any default generic parameters without attributes are automatically\n+    // stable (assuming they have not inherited instability from their parent).\n }\n \n fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n@@ -484,6 +519,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             &krate.item.attrs,\n             krate.item.span,\n             AnnotationKind::Required,\n+            true,\n             |v| intravisit::walk_crate(v, krate),\n         );\n     }"}, {"sha": "c4f1ee2e6f6d694233e1b3f34ff24d8ffa5202a1", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -360,7 +360,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n                     self.ast_region_to_region(&lt, Some(param)).into()\n                 }\n-                (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n+                (GenericParamDefKind::Type { has_default, .. }, GenericArg::Type(ty)) => {\n+                    if *has_default {\n+                        tcx.check_stability_internal(\n+                            param.def_id,\n+                            Some(arg.id()),\n+                            arg.span(),\n+                            false,\n+                            |_, _| (),\n+                        )\n+                    }\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.allow_ty_infer()) {\n                         inferred_params.push(ty.span);\n                         tcx.ty_error().into()"}, {"sha": "07e75594195eac2e0d1a7eb322db056347382a24", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -1227,7 +1227,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if let Some(uc) = unstable_candidates {\n             applicable_candidates.retain(|&(p, _)| {\n                 if let stability::EvalResult::Deny { feature, .. } =\n-                    self.tcx.eval_stability(p.item.def_id, None, self.span)\n+                    self.tcx.eval_stability(p.item.def_id, None, self.span, true)\n                 {\n                     uc.push((p, feature));\n                     return false;"}, {"sha": "7596fa07cbad4124dd1fe5cf8e7ba8f516cfbedf", "filename": "src/test/ui/stability-attribute/auxiliary/unstable_generic_param.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -0,0 +1,41 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = ()> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait2<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait3<T = ()> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: T,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct2<T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: T,\n+}\n+\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT1: Struct1 = Struct1 { field: 1 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT2: Struct2 = Struct2 { field: 1 };"}, {"sha": "b8d6ad631022b9664501536221f8fa6d13453ff3", "filename": "src/test/ui/stability-attribute/generics-default-stability.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -0,0 +1,59 @@\n+// aux-build:unstable_generic_param.rs\n+\n+extern crate unstable_generic_param;\n+\n+use unstable_generic_param::*;\n+\n+struct R;\n+\n+impl Trait1 for S {\n+    fn foo() -> () { () } // ok\n+}\n+\n+struct S;\n+\n+impl Trait1<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait1<isize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> isize { 0 }\n+}\n+\n+impl Trait2<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait3<usize> for S {\n+    fn foo() -> usize { 0 } // ok\n+}\n+\n+fn main() {\n+    // let _ = S;\n+\n+    // let _ = Struct1 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _: Struct1 = Struct1 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _: Struct1<isize> = Struct1 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    // let _ = STRUCT1; // ok\n+    // let _: Struct1 = STRUCT1; // ok\n+    // let _: Struct1<usize> = STRUCT1; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _: Struct1<usize> = STRUCT1; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _ = STRUCT1.field; // ok\n+    // let _: usize = STRUCT1.field; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _ = STRUCT1.field + 1; //~ ERROR use of unstable library feature 'unstable_default'\n+    // let _ = STRUCT1.field + 1usize; //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    // let _ = Struct2 { field: 1 }; // ok\n+    // let _: Struct2 = Struct2 { field: 1 }; // ok\n+    // let _: Struct2<usize> = Struct2 { field: 1 }; // ok\n+\n+    // let _ = STRUCT2;\n+    // let _: Struct2 = STRUCT2; // ok\n+    // let _: Struct2<usize> = STRUCT2; // ok\n+    // let _: Struct2<usize> = STRUCT2; // ok\n+    // let _ = STRUCT2.field; // ok\n+    // let _: usize = STRUCT2.field; // ok\n+    // let _ = STRUCT2.field + 1; // ok\n+    // let _ = STRUCT2.field + 1usize; // ok\n+}"}, {"sha": "1b7f4b85b59baf5666e0a09546cedeb7b49ba9c9", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7a20860537ddd05f802598866681a6f9cc3413c/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=a7a20860537ddd05f802598866681a6f9cc3413c", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:15:13\n+   |\n+LL | impl Trait1<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:19:13\n+   |\n+LL | impl Trait1<isize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:23:13\n+   |\n+LL | impl Trait2<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}