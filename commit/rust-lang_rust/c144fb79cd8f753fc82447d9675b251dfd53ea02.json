{"sha": "c144fb79cd8f753fc82447d9675b251dfd53ea02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDRmYjc5Y2Q4Zjc1M2ZjODI0NDdkOTY3NWIyNTFkZmQ1M2VhMDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-14T08:29:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-14T16:15:49Z"}, "message": "Rollup merge of #48970 - GuillaumeGomez:doc-examples, r=QuietMisdreavus\n\nAdd missing examples\n\nr? @QuietMisdreavus", "tree": {"sha": "ae2d050beb9da09175f7012ff451d3af45918c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae2d050beb9da09175f7012ff451d3af45918c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c144fb79cd8f753fc82447d9675b251dfd53ea02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqpSrUACgkQ/vbIBR0O\nATyXsQ//R9BPiY+1oEQoZS1LLQQJIjNieBkcziwZ1t5EM9q2ex+dq4mZhgRaDWZu\n2UvjcfWOF+2R2lei4VKvFP1wDpBZAGirzRTgfQnviUTlJ/vcJXrHmr3V3zLH5kQD\nfEPowBK3SpfnOah8tUD4AAEFdDBgfEbtt2wiRZDdYK7iP2k0ksKqaTZ1jBCX5F2C\nuSGZ+R44lHtFMStIbPorEAfRBacUY7EfwpqF5RccBt/RUBQcqxL2wcdjG2++LifX\nkdFlSFV7xkYKVNrUPvoo5K+qXIDu0DK7CE0pBQmPMHyThE3B5um8WRZYJUCt7hhB\nbY+LHySfue7yRSWi5cLztsFEZUxXVVwn1ZSoSawYq8a4JMF9vx26qlbxvswcwZjq\nLs3hoWe7d+/vpGUplrRHCItd1TbWtlAiXdMY6Suac4htRytNV8ldrWvH/z/Ev7i0\n6ikKSX+H5+Aexk6jErgKIv/acHlhh60GIY3iaVRpzH1KJIFAirxQTaMFefhvB6KU\nDHAbrSiAvIyvqkO3WdK8myVR0D8yK1V5qUjFeGtb/r1viq+GSdGjnRnepMIC6h6J\n3jbFoxoECkHBGKqninB6+D3KlAkVBi8oYAyNqFzEcW87LHOALO+qzs4KD9GWeilf\nTZzs4iwmLVE0LR2lGpFfTZIyyDw8zIiZ1XoUu43f1juJrODGF4U=\n=+fh1\n-----END PGP SIGNATURE-----", "payload": "tree ae2d050beb9da09175f7012ff451d3af45918c09\nparent 57f76783be2d63cd48e6acc6056bd84567dd0d0a\nparent da257b8fecacdb577592032dcaa9e4b5900cab2c\nauthor kennytm <kennytm@gmail.com> 1521016188 +0800\ncommitter kennytm <kennytm@gmail.com> 1521044149 +0800\n\nRollup merge of #48970 - GuillaumeGomez:doc-examples, r=QuietMisdreavus\n\nAdd missing examples\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c144fb79cd8f753fc82447d9675b251dfd53ea02", "html_url": "https://github.com/rust-lang/rust/commit/c144fb79cd8f753fc82447d9675b251dfd53ea02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c144fb79cd8f753fc82447d9675b251dfd53ea02/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f76783be2d63cd48e6acc6056bd84567dd0d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f76783be2d63cd48e6acc6056bd84567dd0d0a", "html_url": "https://github.com/rust-lang/rust/commit/57f76783be2d63cd48e6acc6056bd84567dd0d0a"}, {"sha": "da257b8fecacdb577592032dcaa9e4b5900cab2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da257b8fecacdb577592032dcaa9e4b5900cab2c", "html_url": "https://github.com/rust-lang/rust/commit/da257b8fecacdb577592032dcaa9e4b5900cab2c"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "13db6d5d659c991cf9348d641e8d195b6ff4be3d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 134, "deletions": 2, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/c144fb79cd8f753fc82447d9675b251dfd53ea02/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c144fb79cd8f753fc82447d9675b251dfd53ea02/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c144fb79cd8f753fc82447d9675b251dfd53ea02", "patch": "@@ -1379,27 +1379,159 @@ impl<'a> Formatter<'a> {\n         }\n     }\n \n-    /// Optionally specified integer width that the output should be\n+    /// Optionally specified integer width that the output should be.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if let Some(width) = formatter.width() {\n+    ///             // If we received a width, we use it\n+    ///             write!(formatter, \"{:width$}\", &format!(\"Foo({})\", self.0), width = width)\n+    ///         } else {\n+    ///             // Otherwise we do nothing special\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn width(&self) -> Option<usize> { self.width }\n \n-    /// Optionally specified precision for numeric types\n+    /// Optionally specified precision for numeric types.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(f32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if let Some(precision) = formatter.precision() {\n+    ///             // If we received a precision, we use it.\n+    ///             write!(formatter, \"Foo({1:.*})\", precision, self.0)\n+    ///         } else {\n+    ///             // Otherwise we default to 2.\n+    ///             write!(formatter, \"Foo({:.2})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Determines if the `+` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.sign_plus() {\n+    ///             write!(formatter,\n+    ///                    \"Foo({}{})\",\n+    ///                    if self.0 < 0 { '-' } else { '+' },\n+    ///                    self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool { self.flags & (1 << FlagV1::SignPlus as u32) != 0 }\n \n     /// Determines if the `-` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.sign_minus() {\n+    ///             // You want a minus sign? Have one!\n+    ///             write!(formatter, \"-Foo({})\", self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool { self.flags & (1 << FlagV1::SignMinus as u32) != 0 }\n \n     /// Determines if the `#` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.alternate() {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"{}\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool { self.flags & (1 << FlagV1::Alternate as u32) != 0 }\n \n     /// Determines if the `0` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         assert!(formatter.sign_aware_zero_pad());\n+    ///         assert_eq!(formatter.width(), Some(4));\n+    ///         // We ignore the formatter's options.\n+    ///         write!(formatter, \"{}\", self.0)\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0"}]}