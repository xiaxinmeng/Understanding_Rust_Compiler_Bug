{"sha": "03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYjJhYjhlMWYxMWYwZTA1MjM0ZGE5MTYyZWY1N2Y3YTMwYTY0YWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:56:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:56:09Z"}, "message": "rename syntax_mapping as well", "tree": {"sha": "c22506b45a1d477d90ce6c8fc2e0b81e0648a752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22506b45a1d477d90ce6c8fc2e0b81e0648a752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "html_url": "https://github.com/rust-lang/rust/commit/03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bb7d86ec6e7560ec6880a20eb8c5b984b2af52", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bb7d86ec6e7560ec6880a20eb8c5b984b2af52", "html_url": "https://github.com/rust-lang/rust/commit/80bb7d86ec6e7560ec6880a20eb8c5b984b2af52"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "6a22b0af54fcd29ec1be03238406f25044d73cea", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -23,8 +23,8 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let function =\n         source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, expr.syntax())?;\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_source_map(ctx.db);\n-    let node_expr = syntax_mapping.node_expr(expr)?;\n+    let source_map = function.body_source_map(ctx.db);\n+    let node_expr = source_map.node_expr(expr)?;\n     let match_expr_ty = infer_result[node_expr].clone();\n     let enum_def = match match_expr_ty {\n         Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,"}, {"sha": "6043f4028310db38e9fe81a478e83d7429060cc5", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -78,7 +78,7 @@ impl Body {\n         self.pats.iter()\n     }\n \n-    pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+    pub fn source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n         db.body_with_source_map(self.owner).1\n     }\n }"}, {"sha": "94c66be318fbbbdfb29eec8f36697bce7cd7cfb4", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -9,8 +9,8 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_source_map(ctx.db);\n-    let expr = match syntax_mapping.node_expr(receiver) {\n+    let source_map = function.body_source_map(ctx.db);\n+    let expr = match source_map.node_expr(receiver) {\n         Some(expr) => expr,\n         None => return,\n     };"}, {"sha": "6bef9624ee03ea456a207635fbeb5f842e7c3095", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -9,8 +9,8 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_source_map(ctx.db);\n-    let expr = match syntax_mapping.node_expr(struct_lit.into()) {\n+    let source_map = function.body_source_map(ctx.db);\n+    let expr = match source_map.node_expr(struct_lit.into()) {\n         Some(expr) => expr,\n         None => return,\n     };"}, {"sha": "1f284af56c788bec23635647cbbc87059a941a08", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -54,10 +54,10 @@ pub(crate) fn reference_definition(\n         if let Some(method_call) = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast) {\n             tested_by!(goto_definition_works_for_methods);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_source_map(db);\n+            let source_map = function.body_source_map(db);\n             let expr = ast::Expr::cast(method_call.syntax()).unwrap();\n             if let Some(func) =\n-                syntax_mapping.node_expr(expr).and_then(|it| infer_result.method_resolution(it))\n+                source_map.node_expr(expr).and_then(|it| infer_result.method_resolution(it))\n             {\n                 return Exact(NavigationTarget::from_function(db, func));\n             };\n@@ -66,10 +66,10 @@ pub(crate) fn reference_definition(\n         if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::FieldExpr::cast) {\n             tested_by!(goto_definition_works_for_fields);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_source_map(db);\n+            let source_map = function.body_source_map(db);\n             let expr = ast::Expr::cast(field_expr.syntax()).unwrap();\n             if let Some(field) =\n-                syntax_mapping.node_expr(expr).and_then(|it| infer_result.field_resolution(it))\n+                source_map.node_expr(expr).and_then(|it| infer_result.field_resolution(it))\n             {\n                 return Exact(NavigationTarget::from_field(db, field));\n             };\n@@ -80,11 +80,11 @@ pub(crate) fn reference_definition(\n             tested_by!(goto_definition_works_for_named_fields);\n \n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_source_map(db);\n+            let source_map = function.body_source_map(db);\n \n             let struct_lit = field_expr.syntax().ancestors().find_map(ast::StructLit::cast);\n \n-            if let Some(expr) = struct_lit.and_then(|lit| syntax_mapping.node_expr(lit.into())) {\n+            if let Some(expr) = struct_lit.and_then(|lit| source_map.node_expr(lit.into())) {\n                 let ty = infer_result[expr].clone();\n                 if let hir::Ty::Adt { def_id, .. } = ty {\n                     if let hir::AdtDef::Struct(s) = def_id {\n@@ -109,9 +109,8 @@ pub(crate) fn reference_definition(\n             Some(Resolution::Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n             Some(Resolution::LocalBinding(pat)) => {\n                 let body = resolver.body().expect(\"no body for local binding\");\n-                let syntax_mapping = body.syntax_mapping(db);\n-                let ptr =\n-                    syntax_mapping.pat_syntax(pat).expect(\"pattern not found in syntax mapping\");\n+                let source_map = body.source_map(db);\n+                let ptr = source_map.pat_syntax(pat).expect(\"pattern not found in syntax mapping\");\n                 let name =\n                     path.as_ident().cloned().expect(\"local binding from a multi-segment path\");\n                 let nav = NavigationTarget::from_scope_entry(file_id, name, ptr);"}, {"sha": "a2d203b4f92d6ce62dd123d8648b42c93a96d3c5", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b2ab8e1f11f0e05234da9162ef57f7a30a64af/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=03b2ab8e1f11f0e05234da9162ef57f7a30a64af", "patch": "@@ -132,10 +132,10 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     let parent_fn = node.ancestors().find_map(ast::FnDef::cast)?;\n     let function = hir::source_binder::function_from_source(db, frange.file_id, parent_fn)?;\n     let infer = function.infer(db);\n-    let syntax_mapping = function.body_source_map(db);\n-    if let Some(expr) = ast::Expr::cast(node).and_then(|e| syntax_mapping.node_expr(e)) {\n+    let source_map = function.body_source_map(db);\n+    if let Some(expr) = ast::Expr::cast(node).and_then(|e| source_map.node_expr(e)) {\n         Some(infer[expr].to_string())\n-    } else if let Some(pat) = ast::Pat::cast(node).and_then(|p| syntax_mapping.node_pat(p)) {\n+    } else if let Some(pat) = ast::Pat::cast(node).and_then(|p| source_map.node_pat(p)) {\n         Some(infer[pat].to_string())\n     } else {\n         None"}]}