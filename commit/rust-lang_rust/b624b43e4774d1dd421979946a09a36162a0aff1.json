{"sha": "b624b43e4774d1dd421979946a09a36162a0aff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MjRiNDNlNDc3NGQxZGQ0MjE5Nzk5NDZhMDlhMzYxNjJhMGFmZjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-17T00:49:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T18:40:16Z"}, "message": "Beginning of Operation Eliminate Folds\n\nStarted by rewriting collect_locals to use walk instead of fold", "tree": {"sha": "d1d7f5f48d49b8fecdc5e23bf2d100051e07c4ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d7f5f48d49b8fecdc5e23bf2d100051e07c4ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b624b43e4774d1dd421979946a09a36162a0aff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b624b43e4774d1dd421979946a09a36162a0aff1", "html_url": "https://github.com/rust-lang/rust/commit/b624b43e4774d1dd421979946a09a36162a0aff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b624b43e4774d1dd421979946a09a36162a0aff1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4964023c5e2b37771fb8dd20fbc024965c419870", "url": "https://api.github.com/repos/rust-lang/rust/commits/4964023c5e2b37771fb8dd20fbc024965c419870", "html_url": "https://github.com/rust-lang/rust/commit/4964023c5e2b37771fb8dd20fbc024965c419870"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "29f73a149c7867a1d27ee245c24e3795d126b377", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b624b43e4774d1dd421979946a09a36162a0aff1/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b624b43e4774d1dd421979946a09a36162a0aff1/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=b624b43e4774d1dd421979946a09a36162a0aff1", "patch": "@@ -19,12 +19,12 @@ import front::ast::decl;\n import front::ast::decl_local;\n import front::ast::def_id;\n import front::ast::ident;\n+\n import middle::fold::span;\n import middle::fold::respan;\n-import middle::fold::new_identity_fold;\n-import middle::fold::fold_block;\n-import middle::fold::fold_fn;\n-import middle::fold::fold_crate;\n+import middle::walk::walk_crate;\n+import middle::walk::walk_fn;\n+import middle::walk::ast_visitor;\n \n import aux::fn_info;\n import aux::var_info;\n@@ -36,19 +36,17 @@ fn var_is_local(def_id v, fn_info m) -> bool {\n   ret (m.vars.contains_key(v));\n }\n \n-fn collect_local(&@vec[tup(ident, def_id)] vars, &span sp, &@local loc)\n-    -> @decl {\n+fn collect_local(&@vec[tup(ident, def_id)] vars, &@local loc) -> () {\n     log(\"collect_local: pushing \" + loc.ident);\n-    vec::push[tup(ident, def_id)](*vars, tup(loc.ident, loc.id));\n-    ret @respan(sp, decl_local(loc));\n+    _vec::push[tup(ident, def_id)](*vars, tup(loc.ident, loc.id));\n }\n \n fn find_locals(_fn f) -> @vec[tup(ident,def_id)] {\n   auto res = @vec::alloc[tup(ident,def_id)](0u);\n \n-  auto fld = new_identity_fold[@vec[tup(ident, def_id)]]();\n-  fld = @rec(fold_decl_local = bind collect_local(_,_,_) with *fld);\n-  auto ignore = fold_fn[@vec[tup(ident, def_id)]](res, fld, f);\n+  auto visitor = walk::default_visitor();\n+  visitor = rec(visit_decl_pre=bind collect_local(res,_) with visitor);\n+  walk_fn(visitor, f);\n \n   ret res;\n }\n@@ -83,40 +81,47 @@ fn mk_fn_info(_fn f, def_id f_id, ident f_name) -> fn_info {\n     ret res;\n }\n \n-/* extends mk_fn_info to a function item, side-effecting the map fi from\n-   function IDs to fn_info maps */\n-fn mk_fn_info_item_fn(&crate_ctxt ccx, &span sp, &ident i, &_fn f,\n-                 &vec[ty_param] ty_params, &def_id id, &ann a) -> @item {\n-    auto f_inf = mk_fn_info(f, id, i);\n-    ccx.fm.insert(id, f_inf);\n-    //  log_err(\"inserting: \" + i);\n-    ret @respan(sp, item_fn(i, f, ty_params, id, a));\n-}\n-\n-/* extends mk_fn_info to an obj item, side-effecting the map fi from\n-   function IDs to fn_info maps */\n-fn mk_fn_info_item_obj(&crate_ctxt ccx, &span sp, &ident i, &_obj o,\n-                       &vec[ty_param] ty_params,\n-                       &obj_def_ids odid, &ann a) -> @item {\n-    auto all_methods = vec::clone[@method](o.methods);\n-    plus_option[@method](all_methods, o.dtor);\n-    auto f_inf;\n-    for (@method m in all_methods) {\n+/* extends mk_fn_info to an item, side-effecting the map fi from\n+   function IDs to fn_info maps\n+   only looks at function and object items. */\n+fn mk_fn_info_item (&crate_ctxt ccx, &@item i) -> () {\n+  alt (i.node) {\n+    case (item_fn(?i,?f,?ty_params,?id,?a)) {\n+      auto f_inf = mk_fn_info(f, id, i);\n+      ccx.fm.insert(id, f_inf);\n+    }\n+    case (item_obj(?i,?o,?ty_params,?odid,?a)) {\n+      auto all_methods = _vec::clone[@method](o.methods);\n+      plus_option[@method](all_methods, o.dtor);\n+      auto f_inf;\n+      for (@method m in all_methods) {\n         f_inf = mk_fn_info(m.node.meth, m.node.id, m.node.ident);\n         ccx.fm.insert(m.node.id, f_inf);\n+      }\n     }\n-    ret @respan(sp, item_obj(i, o, ty_params, odid, a));\n+    case (_) { ret; }\n+  }\n }\n \n-\n /* initializes the global fn_info_map (mapping each function ID, including\n    nested locally defined functions, onto a mapping from local variable name\n    to bit number) */\n fn mk_f_to_fn_info(&crate_ctxt ccx, @crate c) -> () {\n+  let ast_visitor vars_visitor = walk::default_visitor();\n+  vars_visitor = rec(visit_item_post=bind mk_fn_info_item(ccx,_)\n+\t\t     with vars_visitor);\n \n-  auto fld = new_identity_fold[crate_ctxt]();\n-  fld = @rec(fold_item_fn  = bind mk_fn_info_item_fn(_,_,_,_,_,_,_),\n-             fold_item_obj = bind mk_fn_info_item_obj(_,_,_,_,_,_,_)\n-               with *fld);\n-  fold_crate[crate_ctxt](ccx, fld, c);\n+  walk_crate(vars_visitor, *c);\n }\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//\n+"}]}