{"sha": "77cf02de189183c86d3e5f8e31a16d02201b5f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Y2YwMmRlMTg5MTgzYzg2ZDNlNWY4ZTMxYTE2ZDAyMjAxYjVmOGQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T17:49:50Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T21:35:18Z"}, "message": "Rollup merge of #49024 - draganmladjenovic:mips64_cabi_sret, r=sanxiyn\n\n rustc_trans: fix small aggregate returns for big-endian mips64 FFI\n\n Current model of threating small aggregate returns as smallest encompassing integer works only for little-endian mips64.\n The patch forces small aggregate return values to be viewed as one or two i64 chunks leaving to the casting implementation\n to handle endianes differences.", "tree": {"sha": "59d9b955b4537e7217bb91bf4fe6d86276248dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d9b955b4537e7217bb91bf4fe6d86276248dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77cf02de189183c86d3e5f8e31a16d02201b5f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqq5xYACgkQ/vbIBR0O\nATyqLQ/+J5wS97lPgeezlweF+Aq3AOZNDPT9LWqE6rDN+evIICSiHlM9iK5aB7zu\n3iGKo7eBgCv0HjhsCsWOyAiNcGsO1ycgZmiYSeueKS1RmVhHHlCab9jXCDLV68xF\nx15tV/k4IetimkWCxlmr/pN+z1munv9uOOcRJBjylEx4rMSvGh+Wo86XgiWZR1QE\nnmZj/P0RXVxHVQHK7yauQmH0Pg/DtFr246l/60ruKEPTL3abh9zktLsFeT+QA400\n+L5znBxYj1VKmgN9EXYLCYCEPk+9MYI1b50cGFyha24ISQ8qB/1eb6o3aUnOeWHl\nf2eOyBR3ePrbOSGmp5qB2hKwGO3di4IgLjcmvdq2Vxb2fyXucDahfVAogv9MN1lg\nb81Vg7rmI6zB0XyQATIfGqwkuCKi601tYcW27Z8s63PgJVQcFzbkzzWKa7QfvhCH\nHq6PoVtdVvkB3AEx4kfHTmH9rpFsFOXaZ/w9BNZIU5mAqA1/4VvrQcYHcr0bClDi\noxxn+iZ6yH8cMTJkZduH3M/U51cMpcuIR0ZXFweiZUNVrjz+hj13z8QT9/+fzviK\nzhkAZyc+YHozcnZX5K/NCsQbX3J1rwWmhx+0iAN+CwsebkB6zslPpkzthsAZOIOe\nZvshTH7bHferybAaOjckeAUZKHSlHrfq9n0W6/htNXxVB7rQL8c=\n=WOHh\n-----END PGP SIGNATURE-----", "payload": "tree 59d9b955b4537e7217bb91bf4fe6d86276248dc7\nparent 5a7aa6cae543f9507d916624d2e54b7f53ee9616\nparent 19b5113c8d948f7324b4ef8826d1833e84ba8b49\nauthor kennytm <kennytm@gmail.com> 1521136190 +0800\ncommitter kennytm <kennytm@gmail.com> 1521149718 +0800\n\nRollup merge of #49024 - draganmladjenovic:mips64_cabi_sret, r=sanxiyn\n\n rustc_trans: fix small aggregate returns for big-endian mips64 FFI\n\n Current model of threating small aggregate returns as smallest encompassing integer works only for little-endian mips64.\n The patch forces small aggregate return values to be viewed as one or two i64 chunks leaving to the casting implementation\n to handle endianes differences.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77cf02de189183c86d3e5f8e31a16d02201b5f8d", "html_url": "https://github.com/rust-lang/rust/commit/77cf02de189183c86d3e5f8e31a16d02201b5f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77cf02de189183c86d3e5f8e31a16d02201b5f8d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7aa6cae543f9507d916624d2e54b7f53ee9616", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7aa6cae543f9507d916624d2e54b7f53ee9616", "html_url": "https://github.com/rust-lang/rust/commit/5a7aa6cae543f9507d916624d2e54b7f53ee9616"}, {"sha": "19b5113c8d948f7324b4ef8826d1833e84ba8b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/19b5113c8d948f7324b4ef8826d1833e84ba8b49", "html_url": "https://github.com/rust-lang/rust/commit/19b5113c8d948f7324b4ef8826d1833e84ba8b49"}], "stats": {"total": 14, "additions": 1, "deletions": 13}, "files": [{"sha": "231fe4c6edb6737d5f35264e868f8cc615ba7a9c", "filename": "src/librustc_trans/cabi_mips64.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77cf02de189183c86d3e5f8e31a16d02201b5f8d/src%2Flibrustc_trans%2Fcabi_mips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cf02de189183c86d3e5f8e31a16d02201b5f8d/src%2Flibrustc_trans%2Fcabi_mips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips64.rs?ref=77cf02de189183c86d3e5f8e31a16d02201b5f8d", "patch": "@@ -28,18 +28,6 @@ fn extend_integer_width_mips(arg: &mut ArgType, bits: u64) {\n     arg.extend_integer_width_to(bits);\n }\n \n-fn bits_to_int_reg(bits: u64) -> Reg {\n-    if bits <= 8 {\n-        Reg::i8()\n-    } else if bits <= 16 {\n-        Reg::i16()\n-    } else if bits <= 32 {\n-        Reg::i32()\n-    } else {\n-        Reg::i64()\n-    }\n-}\n-\n fn float_reg<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &ArgType<'tcx>, i: usize) -> Option<Reg> {\n     match ret.layout.field(cx, i).abi {\n         layout::Abi::Scalar(ref scalar) => match scalar.value {\n@@ -82,7 +70,7 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n \n         // Cast to a uniform int structure\n         ret.cast_to(Uniform {\n-            unit: bits_to_int_reg(bits),\n+            unit: Reg::i64(),\n             total: size\n         });\n     } else {"}]}