{"sha": "6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjhjNmM2ZDlmZDFmODIyNmIzYWZkOWUxOGM2ZmIzY2QyZjExNzY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-21T10:58:28Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-21T10:58:28Z"}, "message": "Explain why we do not overwrite qualification of locals", "tree": {"sha": "7346152ebd83b58754003e8307f52661bb671de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7346152ebd83b58754003e8307f52661bb671de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "html_url": "https://github.com/rust-lang/rust/commit/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22aebd57c8ed5344260059abebbb938683ab4d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/22aebd57c8ed5344260059abebbb938683ab4d91", "html_url": "https://github.com/rust-lang/rust/commit/22aebd57c8ed5344260059abebbb938683ab4d91"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "399c6dbcb7ca65b203dd64ed51d235f2a6c0db57", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "patch": "@@ -277,9 +277,12 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             };\n             debug!(\"store to var {:?}\", index);\n             match &mut self.local_qualif[index] {\n-                // update\n+                // this is overly restrictive, because even full assignments do not clear the qualif\n+                // While we could special case full assignments, this would be inconsistent with\n+                // aggregates where we overwrite all fields via assignments, which would not get\n+                // that feature.\n                 Some(ref mut qualif) => *qualif = *qualif | self.qualif,\n-                // or insert\n+                // insert new qualification\n                 qualif @ None => *qualif = Some(self.qualif),\n             }\n             return;"}, {"sha": "806a74ee4530b0f798783a60930668b78d6c0ccc", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "patch": "@@ -1,13 +1,15 @@\n-// compile-pass\n-\n #![feature(const_let)]\n \n use std::cell::Cell;\n \n+// this is overly conservative. The reset to `None` should clear `a` of all qualifications\n+// while we could fix this, it would be inconsistent with `qualif_overwrite_2.rs`.\n+// We can fix this properly in the future by allowing constants that do not depend on generics\n+// to be checked by an analysis on the final value instead of looking at the body.\n const FOO: &Option<Cell<usize>> = {\n     let mut a = Some(Cell::new(0));\n-    a = None; // resets `qualif(a)` to `qualif(None)`\n-    &{a}\n+    a = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n+    &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n };\n \n fn main() {}"}, {"sha": "4fac64bf8063f19dbec23b44a35eb5278989fee8", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:8:5\n+  --> $DIR/qualif_overwrite.rs:12:5\n    |\n LL |     &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n    |     ^^^^"}, {"sha": "29557a3da47811d491291021e7fc49bc339d5872", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_let)]\n+\n+use std::cell::Cell;\n+\n+// const qualification is not smart enough to know about fields and always assumes that there might\n+// be other fields that caused the qualification\n+const FOO: &Option<Cell<usize>> = {\n+    let mut a = (Some(Cell::new(0)),);\n+    a.0 = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n+    &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n+};\n+\n+fn main() {}"}, {"sha": "181b728c7b76f2746f63f1e59a150238eccc4359", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=6db8c6c6d9fd1f8226b3afd9e18c6fb3cd2f1176", "patch": "@@ -0,0 +1,9 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/qualif_overwrite_2.rs:10:5\n+   |\n+LL |     &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0492`."}]}