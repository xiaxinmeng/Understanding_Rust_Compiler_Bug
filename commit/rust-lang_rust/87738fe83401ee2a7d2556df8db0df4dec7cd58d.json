{"sha": "87738fe83401ee2a7d2556df8db0df4dec7cd58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzM4ZmU4MzQwMWVlMmE3ZDI1NTZkZjhkYjBkZjRkZWM3Y2Q1OGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-07-29T23:11:50Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T01:44:35Z"}, "message": "Switch existential_type to type_alias_impl_trait", "tree": {"sha": "ca3df813aadf190c78f292eb752d4322bdd32205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca3df813aadf190c78f292eb752d4322bdd32205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87738fe83401ee2a7d2556df8db0df4dec7cd58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87738fe83401ee2a7d2556df8db0df4dec7cd58d", "html_url": "https://github.com/rust-lang/rust/commit/87738fe83401ee2a7d2556df8db0df4dec7cd58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87738fe83401ee2a7d2556df8db0df4dec7cd58d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435236b8877cdb98c82eaebfb7887782277265c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/435236b8877cdb98c82eaebfb7887782277265c5", "html_url": "https://github.com/rust-lang/rust/commit/435236b8877cdb98c82eaebfb7887782277265c5"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "dd298ce84fa051511615f3e0351d3afef600ee2d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=87738fe83401ee2a7d2556df8db0df4dec7cd58d", "patch": "@@ -453,9 +453,6 @@ declare_features! (\n     // Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Allows defining `existential type`s.\n-    (active, existential_type, \"1.28.0\", Some(63063), None),\n-\n     // Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n@@ -560,6 +557,9 @@ declare_features! (\n     // Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n \n+    // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n+    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -625,6 +625,9 @@ declare_features! (\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n+    // Allows defining `existential type`s.\n+    (removed, existential_type, \"1.38.0\", Some(63063), None,\n+     Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -2017,7 +2020,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Existential(..) => {\n                 gate_feature_post!(\n                     &self,\n-                    existential_type,\n+                    type_alias_impl_trait,\n                     i.span,\n                     \"existential types are unstable\"\n                 );\n@@ -2246,7 +2249,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ImplItemKind::Existential(..) => {\n                 gate_feature_post!(\n                     &self,\n-                    existential_type,\n+                    type_alias_impl_trait,\n                     ii.span,\n                     \"existential types are unstable\"\n                 );"}, {"sha": "ec95a2090d6f53df49a22edd87fdf662d6bf4d94", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=87738fe83401ee2a7d2556df8db0df4dec7cd58d", "patch": "@@ -6805,40 +6805,29 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_item(lo.to(prev_span), invalid, ItemKind::ForeignMod(m), visibility, attrs))\n     }\n \n-    /// Parses `type Foo = Bar;`\n-    /// or\n-    /// `existential type Foo: Bar;`\n-    /// or\n-    /// `return `None``\n+    /// Parses `type Foo = Bar;` or returns `None`\n     /// without modifying the parser state.\n     fn eat_type(&mut self) -> Option<PResult<'a, (Ident, AliasKind, ast::Generics)>> {\n         // This parses the grammar:\n         //     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n-        if self.check_keyword(kw::Type) ||\n-           self.check_keyword(kw::Existential) &&\n-                self.is_keyword_ahead(1, &[kw::Type]) {\n-            let existential = self.eat_keyword(kw::Existential);\n-            assert!(self.eat_keyword(kw::Type));\n-            Some(self.parse_existential_or_alias(existential))\n+        if self.eat_keyword(kw::Type) {\n+            Some(self.parse_type_alias())\n         } else {\n             None\n         }\n     }\n \n     /// Parses a type alias or existential type.\n-    fn parse_existential_or_alias(\n-        &mut self,\n-        existential: bool,\n-    ) -> PResult<'a, (Ident, AliasKind, ast::Generics)> {\n+    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, AliasKind, ast::Generics)> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n         tps.where_clause = self.parse_where_clause()?;\n-        let alias = if existential {\n-            self.expect(&token::Colon)?;\n+        self.expect(&token::Eq)?;\n+        let alias = if self.check_keyword(kw::Impl) {\n+            self.bump();\n             let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n             AliasKind::Existential(bounds)\n         } else {\n-            self.expect(&token::Eq)?;\n             let ty = self.parse_ty()?;\n             AliasKind::Weak(ty)\n         };"}, {"sha": "331a758aca8cfaf0e4716b78300491e78e4d830e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=87738fe83401ee2a7d2556df8db0df4dec7cd58d", "patch": "@@ -677,6 +677,7 @@ symbols! {\n         tuple_indexing,\n         Ty,\n         ty,\n+        type_alias_impl_trait,\n         TyCtxt,\n         TyKind,\n         type_alias_enum_variants,"}, {"sha": "6dfd2d10870e076dfc7d077488a429f2a1ecf76c", "filename": "src/test/ui/feature-gates/feature-gate-existential-type.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -1,17 +0,0 @@\n-// Check that existential types must be ungated to use the `existential` keyword\n-\n-existential type Foo: std::fmt::Debug; //~ ERROR existential types are unstable\n-\n-trait Bar {\n-    type Baa: std::fmt::Debug;\n-    fn define() -> Self::Baa;\n-}\n-\n-impl Bar for () {\n-    existential type Baa: std::fmt::Debug; //~ ERROR existential types are unstable\n-    fn define() -> Self::Baa { 0 }\n-}\n-\n-fn define() -> Foo { 0 }\n-\n-fn main() {}"}, {"sha": "30e25e55aff12ecb07ac19d16a2f9122146a1bcd", "filename": "src/test/ui/feature-gates/feature-gate-existential-type.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-existential-type.stderr?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: existential types are unstable\n-  --> $DIR/feature-gate-existential-type.rs:3:1\n-   |\n-LL | existential type Foo: std::fmt::Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n-   = help: add `#![feature(existential_type)]` to the crate attributes to enable\n-\n-error[E0658]: existential types are unstable\n-  --> $DIR/feature-gate-existential-type.rs:11:5\n-   |\n-LL |     existential type Baa: std::fmt::Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n-   = help: add `#![feature(existential_type)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e169cbcc34c447042d1f68db775492db2b131ef9", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=87738fe83401ee2a7d2556df8db0df4dec7cd58d", "patch": "@@ -0,0 +1,15 @@\n+type Foo = impl std::fmt::Debug; //~ ERROR existential types are unstable\n+\n+trait Bar {\n+    type Baa: std::fmt::Debug;\n+    fn define() -> Self::Baa;\n+}\n+\n+impl Bar for () {\n+    type Baa = impl std::fmt::Debug; //~ ERROR existential types are unstable\n+    fn define() -> Self::Baa { 0 }\n+}\n+\n+fn define() -> Foo { 0 }\n+\n+fn main() {}"}, {"sha": "83b16af85867b0908e814fbeacd18259bdefd01c", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87738fe83401ee2a7d2556df8db0df4dec7cd58d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=87738fe83401ee2a7d2556df8db0df4dec7cd58d", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: existential types are unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:1:1\n+   |\n+LL | type Foo = impl std::fmt::Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: existential types are unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:9:5\n+   |\n+LL |     type Baa = impl std::fmt::Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}