{"sha": "3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDE0MDMzZjdjMDg3NDkyYTczYzcwYmIxMWMxZjdiYWUxYjA2Yzk=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-30T17:20:38Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-01T16:59:12Z"}, "message": "Reinstate the error-code error over the feature gate error", "tree": {"sha": "5b912f43d96d3e1900f8c49477f2aaf07cfd38a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b912f43d96d3e1900f8c49477f2aaf07cfd38a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "html_url": "https://github.com/rust-lang/rust/commit/3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4158e58d79af7a538944c0acffbc0718551f221a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4158e58d79af7a538944c0acffbc0718551f221a", "html_url": "https://github.com/rust-lang/rust/commit/4158e58d79af7a538944c0acffbc0718551f221a"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "79e7c069a91c42cdb62d62be42c245702a32798d", "filename": "compiler/rustc_error_codes/src/error_codes/E0492.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -3,7 +3,6 @@ A borrow of a constant containing interior mutability was attempted.\n Erroneous code example:\n \n ```compile_fail,E0492\n-#![feature(const_refs_to_cell)]\n use std::sync::atomic::AtomicUsize;\n \n const A: AtomicUsize = AtomicUsize::new(0);\n@@ -31,7 +30,6 @@ static B: &'static AtomicUsize = &A; // ok!\n You can also have this error while using a cell type:\n \n ```compile_fail,E0492\n-#![feature(const_refs_to_cell)]\n use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);"}, {"sha": "764031c0dae47a97c974a9666f845939729029b4", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -209,11 +209,18 @@ impl NonConstOp for LiveDrop {\n }\n \n #[derive(Debug)]\n-pub struct CellBorrowBehindRef;\n-impl NonConstOp for CellBorrowBehindRef {\n+/// A borrow of a type that contains an `UnsafeCell` somewhere. The borrow never escapes to\n+/// the final value of the constant.\n+pub struct TransientCellBorrow;\n+impl NonConstOp for TransientCellBorrow {\n     fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n         Status::Unstable(sym::const_refs_to_cell)\n     }\n+    fn importance(&self) -> DiagnosticImportance {\n+        // The cases that cannot possibly work will already emit a `CellBorrow`, so we should\n+        // not additionally emit a feature gate error if activating the feature gate won't work.\n+        DiagnosticImportance::Secondary\n+    }\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n@@ -225,19 +232,18 @@ impl NonConstOp for CellBorrowBehindRef {\n }\n \n #[derive(Debug)]\n+/// A borrow of a type that contains an `UnsafeCell` somewhere. The borrow escapes to\n+/// the final value of the constant, and thus we cannot allow this (for now). We may allow\n+/// it in the future for static items.\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         match ccx.const_kind() {\n-            // The borrow checker does a much better job at handling these than we do\n-            hir::ConstContext::ConstFn => Status::Allowed,\n+            // The borrow checker does a much better job at handling these than we do.\n+            hir::ConstContext::ConstFn => Status::Unstable(sym::const_refs_to_cell),\n             _ => Status::Forbidden,\n         }\n     }\n-    fn importance(&self) -> DiagnosticImportance {\n-        // The problematic cases will already emit a `CellBorrowBehindRef`\n-        DiagnosticImportance::Secondary\n-    }\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,"}, {"sha": "f0ab3ff01005680a16173029ef4b26f9da609913", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -587,7 +587,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     // Note: This is only sound if every local that has a `StorageDead` has a\n                     // `StorageDead` in every control flow path leading to a `return` terminator.\n                     if self.local_has_storage_dead(place.local) {\n-                        self.check_op(ops::CellBorrowBehindRef);\n+                        self.check_op(ops::TransientCellBorrow);\n                     } else {\n                         self.check_op(ops::CellBorrow);\n                     }"}, {"sha": "32c68e69f4beda7d4d4ba48908ce00ae90aaf899", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_refs_to_cell)]\n-\n use std::cell::Cell;\n \n const FOO: &(Cell<usize>, bool) = {"}, {"sha": "221e449b6f9a9d584de4ac017ac1a681bd3e5bb7", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/partial_qualif.rs:8:5\n+  --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a}\n    |     ^^^^"}, {"sha": "9b3f6786ae6193f6e610077748a45cc19ffb03ef", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_refs_to_cell)]\n-\n use std::cell::Cell;\n \n // this is overly conservative. The reset to `None` should clear `a` of all qualifications"}, {"sha": "fbaae711d7c069f04746f0b679c4111625b0145a", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite.rs:12:5\n+  --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a}\n    |     ^^^^"}, {"sha": "fa79b5c14a73629e80853143aaff2217c7f83d2f", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_refs_to_cell)]\n-\n use std::cell::Cell;\n \n // const qualification is not smart enough to know about fields and always assumes that there might"}, {"sha": "a393c4e336d64981b945b5c8c95052c4f7dfaafe", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,5 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/qualif_overwrite_2.rs:10:5\n+  --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0}\n    |     ^^^^^^"}, {"sha": "2c735fcc9f91c1358ddac2badc6924953b6b6e02", "filename": "src/test/ui/error-codes/E0492.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_refs_to_cell)]\n-\n use std::sync::atomic::AtomicUsize;\n \n const A: AtomicUsize = AtomicUsize::new(0);"}, {"sha": "54306433b872cc39be6b858be50ffcf3a414d1a7", "filename": "src/test/ui/error-codes/E0492.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,11 +1,11 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/E0492.rs:6:33\n+  --> $DIR/E0492.rs:4:33\n    |\n LL | const B: &'static AtomicUsize = &A;\n    |                                 ^^\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/E0492.rs:7:34\n+  --> $DIR/E0492.rs:5:34\n    |\n LL | static C: &'static AtomicUsize = &A;\n    |                                  ^^"}, {"sha": "b11e83144edbbc5ef59679e6b8fc7ece7afea5ee", "filename": "src/test/ui/issues/issue-17718-const-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_refs_to_cell)]\n-\n use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);"}, {"sha": "b4330049689e5ca353108c3c4a2ccc4d8e6f2403", "filename": "src/test/ui/issues/issue-17718-const-borrow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed14033f7c087492a73c70bb11c1f7bae1b06c9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr?ref=3ed14033f7c087492a73c70bb11c1f7bae1b06c9", "patch": "@@ -1,17 +1,17 @@\n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:6:39\n+  --> $DIR/issue-17718-const-borrow.rs:4:39\n    |\n LL | const B: &'static UnsafeCell<usize> = &A;\n    |                                       ^^\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:11:39\n+  --> $DIR/issue-17718-const-borrow.rs:9:39\n    |\n LL | const E: &'static UnsafeCell<usize> = &D.a;\n    |                                       ^^^^\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n-  --> $DIR/issue-17718-const-borrow.rs:13:23\n+  --> $DIR/issue-17718-const-borrow.rs:11:23\n    |\n LL | const F: &'static C = &D;\n    |                       ^^"}]}