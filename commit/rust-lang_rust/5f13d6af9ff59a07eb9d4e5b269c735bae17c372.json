{"sha": "5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "node_id": "C_kwDOAAsO6NoAKDVmMTNkNmFmOWZmNTlhMDdlYjlkNGU1YjI2OWM3MzViYWUxN2MzNzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-24T16:28:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-24T16:28:53Z"}, "message": "Merge #11340\n\n11340: internal: Make syntax bridge fully infallible r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "98ffd1d7fa4219972fd854089b4a909f17e08290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ffd1d7fa4219972fd854089b4a909f17e08290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7tPFCRBK7hj4Ov3rIwAAJscIAHji/hIl92NWXxd+j0DkRqlo\nB5p06E5TmlfBih9lxy9pjbgOGFGx9rnp0PZVmoq4LV3rURPmkjzc25tpw1Hx8Rnn\n+SOKxlQUbU1bhbrqDX/VIu33ggg654F5FTnkAnKUfrgQFGJG1JQNDaVOa0KfHUg4\nz9bHGKImcHjh7AHFU4iz6qHHVvBVS25Im9mUgJLD9DUiIWT38sBG6VobjS3tSG3l\n1ggWtYUuuFYqdr+xRPRWJfkY9tvIzQeTx5Ga8hSt5DRtjKnsdJTb+jPPgq5nqYYW\nOt5wcm47o6JGWRy1BsjT66xuhvChDDujbduztbcB1SIZA/sgBAsQ76EHQEgu5Gk=\n=5dlA\n-----END PGP SIGNATURE-----\n", "payload": "tree 98ffd1d7fa4219972fd854089b4a909f17e08290\nparent 17afa2e7780f399df99bec802c4ab7d2f920f158\nparent 5088926ec38f2e00699da27988111128b7bda19c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643041733 +0000\ncommitter GitHub <noreply@github.com> 1643041733 +0000\n\nMerge #11340\n\n11340: internal: Make syntax bridge fully infallible r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "html_url": "https://github.com/rust-lang/rust/commit/5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17afa2e7780f399df99bec802c4ab7d2f920f158", "url": "https://api.github.com/repos/rust-lang/rust/commits/17afa2e7780f399df99bec802c4ab7d2f920f158", "html_url": "https://github.com/rust-lang/rust/commit/17afa2e7780f399df99bec802c4ab7d2f920f158"}, {"sha": "5088926ec38f2e00699da27988111128b7bda19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5088926ec38f2e00699da27988111128b7bda19c", "html_url": "https://github.com/rust-lang/rust/commit/5088926ec38f2e00699da27988111128b7bda19c"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "38c16503cc002aa7f2e52a4746ff0d6fb9e0267f", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "patch": "@@ -735,7 +735,7 @@ impl Attr {\n         hygiene: &Hygiene,\n         id: AttrId,\n     ) -> Option<Attr> {\n-        let (parse, _) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MetaItem).ok()?;\n+        let (parse, _) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MetaItem);\n         let ast = ast::Meta::cast(parse.syntax_node())?;\n \n         Self::from_src(db, ast, hygiene, id)"}, {"sha": "bd75c51cbc6f7d24a93f9c1ba9212dfb728124a0", "filename": "crates/hir_expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "patch": "@@ -72,7 +72,7 @@ struct BasicAdtInfo {\n }\n \n fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n-    let (parsed, token_map) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MacroItems)?; // FragmentKind::Items doesn't parse attrs?\n+    let (parsed, token_map) = mbe::token_tree_to_syntax_node(tt, mbe::TopEntryPoint::MacroItems); // FragmentKind::Items doesn't parse attrs?\n     let macro_items = ast::MacroItems::cast(parsed.syntax_node()).ok_or_else(|| {\n         debug!(\"derive node didn't parse\");\n         mbe::ExpandError::UnexpectedToken"}, {"sha": "69749decd5ccbae9cb59ca881241b6588944690d", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "patch": "@@ -202,8 +202,7 @@ pub fn expand_speculative(\n     };\n \n     let expand_to = macro_expand_to(db, actual_macro_call);\n-    let (node, rev_tmap) =\n-        token_tree_to_syntax_node(&speculative_expansion.value, expand_to).ok()?;\n+    let (node, rev_tmap) = token_tree_to_syntax_node(&speculative_expansion.value, expand_to);\n \n     let range = rev_tmap.first_range_by_token(token_id, token_to_map.kind())?;\n     let token = node.syntax_node().covering_element(range).into_token()?;\n@@ -264,17 +263,7 @@ fn parse_macro_expansion(\n     tracing::debug!(\"expanded = {}\", tt.as_debug_string());\n     tracing::debug!(\"kind = {:?}\", expand_to);\n \n-    let (parse, rev_token_map) = match token_tree_to_syntax_node(&tt, expand_to) {\n-        Ok(it) => it,\n-        Err(err) => {\n-            tracing::debug!(\n-                \"failed to parse expansion to {:?} = {}\",\n-                expand_to,\n-                tt.as_debug_string()\n-            );\n-            return ExpandResult::only_err(err);\n-        }\n-    };\n+    let (parse, rev_token_map) = token_tree_to_syntax_node(&tt, expand_to);\n \n     match result.err {\n         Some(err) => {\n@@ -502,7 +491,7 @@ fn macro_expand_to(db: &dyn AstDatabase, id: MacroCallId) -> ExpandTo {\n fn token_tree_to_syntax_node(\n     tt: &tt::Subtree,\n     expand_to: ExpandTo,\n-) -> Result<(Parse<SyntaxNode>, mbe::TokenMap), ExpandError> {\n+) -> (Parse<SyntaxNode>, mbe::TokenMap) {\n     let entry_point = match expand_to {\n         ExpandTo::Statements => mbe::TopEntryPoint::MacroStmts,\n         ExpandTo::Items => mbe::TopEntryPoint::MacroItems,"}, {"sha": "f2586fa9093dd63296d63c02c55e66fc4ffa4e9b", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "patch": "@@ -104,12 +104,13 @@ pub fn expand_eager_macro(\n     macro_call: InFile<ast::MacroCall>,\n     def: MacroDefId,\n     resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n-    mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n+    diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<MacroCallId, ErrorEmitted> {\n-    let parsed_args = diagnostic_sink.option_with(\n-        || Some(mbe::syntax_node_to_token_tree(macro_call.value.token_tree()?.syntax()).0),\n-        || err(\"malformed macro invocation\"),\n-    )?;\n+    let parsed_args = macro_call\n+        .value\n+        .token_tree()\n+        .map(|tt| mbe::syntax_node_to_token_tree(tt.syntax()).0)\n+        .unwrap_or_default();\n \n     let ast_map = db.ast_id_map(macro_call.file_id);\n     let call_id = InFile::new(macro_call.file_id, ast_map.ast_id(&macro_call.value));\n@@ -130,18 +131,15 @@ pub fn expand_eager_macro(\n     });\n     let arg_file_id = arg_id;\n \n-    let parsed_args = diagnostic_sink\n-        .result(mbe::token_tree_to_syntax_node(&parsed_args, mbe::TopEntryPoint::Expr))?\n-        .0;\n+    let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, mbe::TopEntryPoint::Expr).0;\n     let result = eager_macro_recur(\n         db,\n         InFile::new(arg_file_id.as_file(), parsed_args.syntax_node()),\n         krate,\n         resolver,\n         diagnostic_sink,\n     )?;\n-    let subtree =\n-        diagnostic_sink.option(to_subtree(&result), || err(\"failed to parse macro result\"))?;\n+    let subtree = to_subtree(&result);\n \n     if let MacroDefKind::BuiltInEager(eager, _) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n@@ -165,10 +163,10 @@ pub fn expand_eager_macro(\n     }\n }\n \n-fn to_subtree(node: &SyntaxNode) -> Option<tt::Subtree> {\n+fn to_subtree(node: &SyntaxNode) -> tt::Subtree {\n     let mut subtree = mbe::syntax_node_to_token_tree(node).0;\n     subtree.delimiter = None;\n-    Some(subtree)\n+    subtree\n }\n \n fn lazy_expand("}, {"sha": "bac1d4ba982f648a7fecced712af720d5d5d1675", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13d6af9ff59a07eb9d4e5b269c735bae17c372/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=5f13d6af9ff59a07eb9d4e5b269c735bae17c372", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n };\n use tt::buffer::{Cursor, TokenBuffer};\n \n-use crate::{to_parser_input::to_parser_input, tt_iter::TtIter, ExpandError, TokenMap};\n+use crate::{to_parser_input::to_parser_input, tt_iter::TtIter, TokenMap};\n \n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n@@ -46,7 +46,7 @@ pub fn syntax_node_to_token_tree_censored(\n pub fn token_tree_to_syntax_node(\n     tt: &tt::Subtree,\n     entry_point: parser::TopEntryPoint,\n-) -> Result<(Parse<SyntaxNode>, TokenMap), ExpandError> {\n+) -> (Parse<SyntaxNode>, TokenMap) {\n     let buffer = match tt {\n         tt::Subtree { delimiter: None, token_trees } => {\n             TokenBuffer::from_tokens(token_trees.as_slice())\n@@ -67,7 +67,7 @@ pub fn token_tree_to_syntax_node(\n         }\n     }\n     let (parse, range_map) = tree_sink.finish();\n-    Ok((parse, range_map))\n+    (parse, range_map)\n }\n \n /// Convert a string to a `TokenTree`"}]}