{"sha": "0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZmMyMDg2MGViOThhMjlkOWJiZWVhODBmMmFjYzViZTM4YzZiZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-25T20:08:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-25T20:08:00Z"}, "message": "Auto merge of #85499 - jackh726:assoc-type-norm-rebase, r=nikomatsakis\n\nNormalize projections under binders\n\nFixes #70243\nFixes #70120\nFixes #62529\nFixes #87219\n\nIssues to followup on after (probably fixed, but no test added here):\n#76956\n#56556\n#79207\n#85636\n\nr? `@nikomatsakis`", "tree": {"sha": "efaa6ae3d70c1f56bd4c9fb74a91e727743cbf02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efaa6ae3d70c1f56bd4c9fb74a91e727743cbf02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "html_url": "https://github.com/rust-lang/rust/commit/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0e554ee2c94e9b3865a8c2d24d720224512dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0e554ee2c94e9b3865a8c2d24d720224512dec", "html_url": "https://github.com/rust-lang/rust/commit/7b0e554ee2c94e9b3865a8c2d24d720224512dec"}, {"sha": "994a6bb667d8a0ae7bbc777f4d33994692dd7266", "url": "https://api.github.com/repos/rust-lang/rust/commits/994a6bb667d8a0ae7bbc777f4d33994692dd7266", "html_url": "https://github.com/rust-lang/rust/commit/994a6bb667d8a0ae7bbc777f4d33994692dd7266"}], "stats": {"total": 1202, "additions": 811, "deletions": 391}, "files": [{"sha": "8f90c7a8845ee24a2ff2d21e3cd8693312b719f7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -2483,10 +2483,9 @@ impl<'tcx> ty::Instance<'tcx> {\n                 // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping\n                 // track of a polymorphization `ParamEnv` to allow normalizing later.\n                 let mut sig = match *ty.kind() {\n-                    ty::FnDef(def_id, substs) if tcx.sess.opts.debugging_opts.polymorphize => tcx\n+                    ty::FnDef(def_id, substs) => tcx\n                         .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))\n                         .subst(tcx, substs),\n-                    ty::FnDef(def_id, substs) => tcx.fn_sig(def_id).subst(tcx, substs),\n                     _ => unreachable!(),\n                 };\n "}, {"sha": "ba9b6926526be010208f568415a9602c2043c62f", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -9,7 +9,9 @@\n \n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::{self, Ty};\n+use rustc_trait_selection::traits::query::normalize::AtExt;\n \n use rustc_index::vec::Idx;\n use rustc_span::Span;\n@@ -162,17 +164,49 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {\n         debug!(\"equate_normalized_input_or_output(a={:?}, b={:?})\", a, b);\n \n-        if let Err(terr) =\n+        if let Err(_) =\n             self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n         {\n-            span_mirbug!(\n-                self,\n-                Location::START,\n-                \"equate_normalized_input_or_output: `{:?}=={:?}` failed with `{:?}`\",\n-                a,\n-                b,\n-                terr\n-            );\n+            // FIXME(jackh726): This is a hack. It's somewhat like\n+            // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n+            // like to normalize *before* inserting into `local_decls`, but\n+            // doing so ends up causing some other trouble.\n+            let b = match self\n+                .infcx\n+                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+                .normalize(b)\n+            {\n+                Ok(n) => {\n+                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n+                    if n.obligations.iter().all(|o| {\n+                        matches!(\n+                            o.predicate.kind().skip_binder(),\n+                            ty::PredicateKind::RegionOutlives(_)\n+                                | ty::PredicateKind::TypeOutlives(_)\n+                        )\n+                    }) {\n+                        n.value\n+                    } else {\n+                        b\n+                    }\n+                }\n+                Err(_) => {\n+                    debug!(\"equate_inputs_and_outputs: NoSolution\");\n+                    b\n+                }\n+            };\n+            if let Err(terr) =\n+                self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n+            {\n+                span_mirbug!(\n+                    self,\n+                    Location::START,\n+                    \"equate_normalized_input_or_output: `{:?}=={:?}` failed with `{:?}`\",\n+                    a,\n+                    b,\n+                    terr\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "999b25319bf8d1120e92f9481e08334f90122313", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1053,6 +1053,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n         for user_annotation in self.user_type_annotations {\n             let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } = *user_annotation;\n+            let inferred_ty = self.normalize(inferred_ty, Locations::All(span));\n             let annotation = self.instantiate_canonical_with_fresh_inference_vars(span, user_ty);\n             match annotation {\n                 UserType::Ty(mut ty) => {"}, {"sha": "91b9ad0af356cdbf9dccb3df13f3df42be71cdcf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 59, "deletions": 44, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -362,25 +362,40 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n         if !needs_normalization(&ty, self.param_env.reveal()) {\n             return ty;\n         }\n-        // We don't want to normalize associated types that occur inside of region\n-        // binders, because they may contain bound regions, and we can't cope with that.\n+\n+        // We try to be a little clever here as a performance optimization in\n+        // cases where there are nested projections under binders.\n+        // For example:\n+        // ```\n+        // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)\n+        // ```\n+        // We normalize the substs on the projection before the projecting, but\n+        // if we're naive, we'll\n+        //   replace bound vars on inner, project inner, replace placeholders on inner,\n+        //   replace bound vars on outer, project outer, replace placeholders on outer\n         //\n-        // Example:\n+        // However, if we're a bit more clever, we can replace the bound vars\n+        // on the entire type before normalizing nested projections, meaning we\n+        //   replace bound vars on outer, project inner,\n+        //   project outer, replace placeholders on outer\n         //\n-        //     for<'a> fn(<T as Foo<&'a>>::A)\n+        // This is possible because the inner `'a` will already be a placeholder\n+        // when we need to normalize the inner projection\n         //\n-        // Instead of normalizing `<T as Foo<&'a>>::A` here, we'll\n-        // normalize it when we instantiate those bound regions (which\n-        // should occur eventually).\n+        // On the other hand, this does add a bit of complexity, since we only\n+        // replace bound vars if the current type is a `Projection` and we need\n+        // to make sure we don't forget to fold the substs regardless.\n \n-        let ty = ty.super_fold_with(self);\n         match *ty.kind() {\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n-                    Reveal::UserFacing => ty,\n+                    Reveal::UserFacing => ty.super_fold_with(self),\n \n                     Reveal::All => {\n+                        // N.b. there is an assumption here all this code can handle\n+                        // escaping bound vars.\n+\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             let obligation = Obligation::with_depth(\n@@ -392,6 +407,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                             self.selcx.infcx().report_overflow_error(&obligation, true);\n                         }\n \n+                        let substs = substs.super_fold_with(self);\n                         let generic_ty = self.tcx().type_of(def_id);\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.depth += 1;\n@@ -403,18 +419,13 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             }\n \n             ty::Projection(data) if !data.has_escaping_bound_vars() => {\n-                // This is kind of hacky -- we need to be able to\n-                // handle normalization within binders because\n-                // otherwise we wind up a need to normalize when doing\n-                // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n-                // we can't normalize with bound regions in scope. So\n-                // far now we just ignore binders but only normalize\n-                // if all bound regions are gone (and then we still\n-                // have to renormalize whenever we instantiate a\n-                // binder). It would be better to normalize in a\n-                // binding-aware fashion.\n+                // This branch is *mostly* just an optimization: when we don't\n+                // have escaping bound vars, we don't need to replace them with\n+                // placeholders (see branch below). *Also*, we know that we can\n+                // register an obligation to *later* project, since we know\n+                // there won't be bound vars there.\n \n+                let data = data.super_fold_with(self);\n                 let normalized_ty = normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n@@ -433,22 +444,23 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 normalized_ty\n             }\n \n-            ty::Projection(data) if !data.trait_ref(self.tcx()).has_escaping_bound_vars() => {\n-                // Okay, so you thought the previous branch was hacky. Well, to\n-                // extend upon this, when the *trait ref* doesn't have escaping\n-                // bound vars, but the associated item *does* (can only occur\n-                // with GATs), then we might still be able to project the type.\n-                // For this, we temporarily replace the bound vars with\n-                // placeholders. Note though, that in the case that we still\n-                // can't project for whatever reason (e.g. self type isn't\n-                // known enough), we *can't* register an obligation and return\n-                // an inference variable (since then that obligation would have\n-                // bound vars and that's a can of worms). Instead, we just\n-                // give up and fall back to pretending like we never tried!\n+            ty::Projection(data) => {\n+                // If there are escaping bound vars, we temporarily replace the\n+                // bound vars with placeholders. Note though, that in the case\n+                // that we still can't project for whatever reason (e.g. self\n+                // type isn't known enough), we *can't* register an obligation\n+                // and return an inference variable (since then that obligation\n+                // would have bound vars and that's a can of worms). Instead,\n+                // we just give up and fall back to pretending like we never tried!\n+                //\n+                // Note: this isn't necessarily the final approach here; we may\n+                // want to figure out how to register obligations with escaping vars\n+                // or handle this some other way.\n \n                 let infcx = self.selcx.infcx();\n                 let (data, mapped_regions, mapped_types, mapped_consts) =\n                     BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n+                let data = data.super_fold_with(self);\n                 let normalized_ty = opt_normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n@@ -459,16 +471,18 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 )\n                 .ok()\n                 .flatten()\n-                .unwrap_or_else(|| ty);\n-\n-                let normalized_ty = PlaceholderReplacer::replace_placeholders(\n-                    infcx,\n-                    mapped_regions,\n-                    mapped_types,\n-                    mapped_consts,\n-                    &self.universes,\n-                    normalized_ty,\n-                );\n+                .map(|normalized_ty| {\n+                    PlaceholderReplacer::replace_placeholders(\n+                        infcx,\n+                        mapped_regions,\n+                        mapped_types,\n+                        mapped_consts,\n+                        &self.universes,\n+                        normalized_ty,\n+                    )\n+                })\n+                .unwrap_or_else(|| ty.super_fold_with(self));\n+\n                 debug!(\n                     ?self.depth,\n                     ?ty,\n@@ -479,7 +493,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 normalized_ty\n             }\n \n-            _ => ty,\n+            _ => ty.super_fold_with(self),\n         }\n     }\n \n@@ -908,6 +922,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             // an impl, where-clause etc) and hence we must\n             // re-normalize it\n \n+            let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);\n             debug!(?projected_ty, ?depth, ?projected_obligations);\n \n             let result = if projected_ty.has_projections() {"}, {"sha": "21e1bd8f46467e26f1801dc394184a122d9c7be8", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 105, "deletions": 48, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -14,7 +14,9 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n+\n+use std::ops::ControlFlow;\n \n use super::NoSolution;\n \n@@ -65,6 +67,24 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             universes: vec![],\n         };\n \n+        // This is actually a consequence by the way `normalize_erasing_regions` works currently.\n+        // Because it needs to call the `normalize_generic_arg_after_erasing_regions`, it folds\n+        // through tys and consts in a `TypeFoldable`. Importantly, it skips binders, leaving us\n+        // with trying to normalize with escaping bound vars.\n+        //\n+        // Here, we just add the universes that we *would* have created had we passed through the binders.\n+        //\n+        // We *could* replace escaping bound vars eagerly here, but it doesn't seem really necessary.\n+        // The rest of the code is already set up to be lazy about replacing bound vars,\n+        // and only when we actually have to normalize.\n+        if value.has_escaping_bound_vars() {\n+            let mut max_visitor =\n+                MaxEscapingBoundVarVisitor { outer_index: ty::INNERMOST, escaping: 0 };\n+            value.visit_with(&mut max_visitor);\n+            if max_visitor.escaping > 0 {\n+                normalizer.universes.extend((0..max_visitor.escaping).map(|_| None));\n+            }\n+        }\n         let result = value.fold_with(&mut normalizer);\n         info!(\n             \"normalize::<{}>: result={:?} with {} obligations\",\n@@ -85,6 +105,58 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n     }\n }\n \n+/// Visitor to find the maximum escaping bound var\n+struct MaxEscapingBoundVarVisitor {\n+    // The index which would count as escaping\n+    outer_index: ty::DebruijnIndex,\n+    escaping: usize,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.outer_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.outer_index.shift_out(1);\n+        result\n+    }\n+\n+    #[inline]\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if t.outer_exclusive_binder() > self.outer_index {\n+            self.escaping = self\n+                .escaping\n+                .max(t.outer_exclusive_binder().as_usize() - self.outer_index.as_usize());\n+        }\n+        ControlFlow::CONTINUE\n+    }\n+\n+    #[inline]\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match *r {\n+            ty::ReLateBound(debruijn, _) if debruijn > self.outer_index => {\n+                self.escaping =\n+                    self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n+            }\n+            _ => {}\n+        }\n+        ControlFlow::CONTINUE\n+    }\n+\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match ct.val {\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n+                self.escaping =\n+                    self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n+                ControlFlow::CONTINUE\n+            }\n+            _ => ct.super_visit_with(self),\n+        }\n+    }\n+}\n+\n struct QueryNormalizer<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     cause: &'cx ObligationCause<'tcx>,\n@@ -121,14 +193,21 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             return ty;\n         }\n \n-        let ty = ty.super_fold_with(self);\n+        // See note in `rustc_trait_selection::traits::project` about why we\n+        // wait to fold the substs.\n+\n+        // Wrap this in a closure so we don't accidentally return from the outer function\n         let res = (|| match *ty.kind() {\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n-                    Reveal::UserFacing => ty,\n+                    Reveal::UserFacing => ty.super_fold_with(self),\n \n                     Reveal::All => {\n+                        // N.b. there is an assumption here all this code can handle\n+                        // escaping bound vars.\n+\n+                        let substs = substs.super_fold_with(self);\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n@@ -161,19 +240,11 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             }\n \n             ty::Projection(data) if !data.has_escaping_bound_vars() => {\n-                // This is kind of hacky -- we need to be able to\n-                // handle normalization within binders because\n-                // otherwise we wind up a need to normalize when doing\n-                // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n-                // we can't normalize with bound regions in scope. So\n-                // far now we just ignore binders but only normalize\n-                // if all bound regions are gone (and then we still\n-                // have to renormalize whenever we instantiate a\n-                // binder). It would be better to normalize in a\n-                // binding-aware fashion.\n+                // This branch is just an optimization: when we don't have escaping bound vars,\n+                // we don't need to replace them with placeholders (see branch below).\n \n                 let tcx = self.infcx.tcx;\n+                let data = data.super_fold_with(self);\n \n                 let mut orig_values = OriginalQueryValues::default();\n                 // HACK(matthewjasper) `'static` is special-cased in selection,\n@@ -188,7 +259,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         // We don't expect ambiguity.\n                         if result.is_ambiguous() {\n                             self.error = true;\n-                            return ty;\n+                            return ty.super_fold_with(self);\n                         }\n \n                         match self.infcx.instantiate_query_response_and_region_obligations(\n@@ -206,33 +277,20 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n                             Err(_) => {\n                                 self.error = true;\n-                                ty\n+                                ty.super_fold_with(self)\n                             }\n                         }\n                     }\n \n                     Err(NoSolution) => {\n                         self.error = true;\n-                        ty\n+                        ty.super_fold_with(self)\n                     }\n                 }\n             }\n-            ty::Projection(data) if !data.trait_ref(self.infcx.tcx).has_escaping_bound_vars() => {\n-                // See note in `rustc_trait_selection::traits::project`\n-\n-                // One other point mentioning: In `traits::project`, if a\n-                // projection can't be normalized, we return an inference variable\n-                // and register an obligation to later resolve that. Here, the query\n-                // will just return ambiguity. In both cases, the effect is the same: we only want\n-                // to return `ty` because there are bound vars that we aren't yet handling in a more\n-                // complete way.\n \n-                // `BoundVarReplacer` can't handle escaping bound vars. Ideally, we want this before even calling\n-                // `QueryNormalizer`, but some const-generics tests pass escaping bound vars.\n-                // Also, use `ty` so we get that sweet `outer_exclusive_binder` optimization\n-                assert!(!ty.has_vars_bound_at_or_above(ty::DebruijnIndex::from_usize(\n-                    self.universes.len()\n-                )));\n+            ty::Projection(data) => {\n+                // See note in `rustc_trait_selection::traits::project`\n \n                 let tcx = self.infcx.tcx;\n                 let infcx = self.infcx;\n@@ -252,12 +310,12 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     .canonicalize_query_keep_static(self.param_env.and(data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n-                let normalized_ty = match tcx.normalize_projection_ty(c_data) {\n+                match tcx.normalize_projection_ty(c_data) {\n                     Ok(result) => {\n                         // We don't expect ambiguity.\n                         if result.is_ambiguous() {\n                             self.error = true;\n-                            return ty;\n+                            return ty.super_fold_with(self);\n                         }\n                         match self.infcx.instantiate_query_response_and_region_obligations(\n                             self.cause,\n@@ -269,30 +327,29 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                                 self.obligations.extend(obligations);\n-                                result.normalized_ty\n+                                crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+                                    infcx,\n+                                    mapped_regions,\n+                                    mapped_types,\n+                                    mapped_consts,\n+                                    &self.universes,\n+                                    result.normalized_ty,\n+                                )\n                             }\n                             Err(_) => {\n                                 self.error = true;\n-                                ty\n+                                ty.super_fold_with(self)\n                             }\n                         }\n                     }\n                     Err(NoSolution) => {\n                         self.error = true;\n-                        ty\n+                        ty.super_fold_with(self)\n                     }\n-                };\n-                crate::traits::project::PlaceholderReplacer::replace_placeholders(\n-                    infcx,\n-                    mapped_regions,\n-                    mapped_types,\n-                    mapped_consts,\n-                    &self.universes,\n-                    normalized_ty,\n-                )\n+                }\n             }\n \n-            _ => ty,\n+            _ => ty.super_fold_with(self),\n         })();\n         self.cache.insert(ty, res);\n         res"}, {"sha": "3bfab9d513f375e6540a3f7471f3c3342d172485", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -796,6 +796,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         //! into a closure or a `proc`.\n \n         let b = self.shallow_resolve(b);\n+        let InferOk { value: b, mut obligations } =\n+            self.normalize_associated_types_in_as_infer_ok(self.cause.span, b);\n         debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n         match b.kind() {\n@@ -815,8 +817,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     }\n                 }\n \n-                let InferOk { value: a_sig, mut obligations } =\n+                let InferOk { value: a_sig, obligations: o1 } =\n                     self.normalize_associated_types_in_as_infer_ok(self.cause.span, a_sig);\n+                obligations.extend(o1);\n \n                 let a_fn_pointer = self.tcx.mk_fn_ptr(a_sig);\n                 let InferOk { value, obligations: o2 } = self.coerce_from_safe_fn("}, {"sha": "a02208661f1f7b5449b23aa7fd0107882a7fbfef", "filename": "src/test/ui/associated-type-bounds/issue-83017.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![feature(associated_type_bounds)]\n \n trait TraitA<'a> {\n@@ -34,6 +36,4 @@ where\n \n fn main() {\n     foo::<Z>();\n-    //~^ ERROR: the trait bound `for<'a, 'b> <Z as TraitA<'a>>::AsA: TraitB<'a, 'b>` is not satisfied\n-    //~| ERROR: the trait bound `for<'a, 'b, 'c> <<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB: TraitC<'a, 'b, 'c>` is not satisfied\n }"}, {"sha": "af86990ac66aa01a171501e0f71c5a87fc8ebd5f", "filename": "src/test/ui/associated-type-bounds/issue-83017.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr?ref=7b0e554ee2c94e9b3865a8c2d24d720224512dec", "patch": "@@ -1,33 +0,0 @@\n-error[E0277]: the trait bound `for<'a, 'b> <Z as TraitA<'a>>::AsA: TraitB<'a, 'b>` is not satisfied\n-  --> $DIR/issue-83017.rs:36:5\n-   |\n-LL |     foo::<Z>();\n-   |     ^^^^^^^^ the trait `for<'a, 'b> TraitB<'a, 'b>` is not implemented for `<Z as TraitA<'a>>::AsA`\n-   |\n-note: required by a bound in `foo`\n-  --> $DIR/issue-83017.rs:31:32\n-   |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error[E0277]: the trait bound `for<'a, 'b, 'c> <<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB: TraitC<'a, 'b, 'c>` is not satisfied\n-  --> $DIR/issue-83017.rs:36:5\n-   |\n-LL |     foo::<Z>();\n-   |     ^^^^^^^^ the trait `for<'a, 'b, 'c> TraitC<'a, 'b, 'c>` is not implemented for `<<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB`\n-   |\n-note: required by a bound in `foo`\n-  --> $DIR/issue-83017.rs:31:60\n-   |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n-   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "e3bd0c2276e48ca2ac120a84844aa81ff52c1d5d", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(());\n    |     ^^^^^^^ one type is more general than the other\n    |\n-   = note:   expected type `&'a ()`\n-           found reference `&()`\n+   = note: expected reference `&'a ()`\n+              found reference `&()`\n \n error: aborting due to previous error\n "}, {"sha": "1ac72e4b90c75d0f4455b760b83e14e30608158e", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(());\n    |     ^^^ lifetime mismatch\n    |\n-   = note: expected type `&'a ()`\n-              found type `&()`\n+   = note: expected reference `&'a ()`\n+                   found type `&()`\n note: the lifetime requirement is introduced here\n   --> $DIR/higher-ranked-projection.rs:15:33\n    |"}, {"sha": "db414164e1663900866c7c2ad77a7596dd25b65a", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -10,7 +10,7 @@ where\n \n impl X<'_> for i32 {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <i32 as X<'b>>::U: Clone`\n+    //~^ ERROR the trait bound `str: Clone`\n }\n \n fn main() {"}, {"sha": "4eed5c9a0083c18f6098d51d362a294066d44709", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-1.rs:12:14\n    |\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<i32 as X<'b>>::U`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-1.rs:3:33\n    |"}, {"sha": "2eb956c8dbb08f61a29433f4e6383545b883db64", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -8,14 +8,13 @@ where\n     }\n }\n \n-impl X<'_> for u32\n+impl X<'_> for u32 //~ overflow evaluating the requirement `for<'b> u32: X<'b>`\n where\n     for<'b> <Self as X<'b>>::U: Clone,\n {\n-    type U = str;\n+    type U = str; //~ overflow evaluating the requirement `for<'b> u32: X<'b>`\n }\n \n fn main() {\n     1u32.f(\"abc\");\n-    //~^ ERROR the method\n }"}, {"sha": "079989f2331af77815e92c5e36c3166b495b505a", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,13 +1,38 @@\n-error[E0599]: the method `f` exists for type `u32`, but its trait bounds were not satisfied\n-  --> $DIR/hr-associated-type-bound-2.rs:19:10\n+error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n+  --> $DIR/hr-associated-type-bound-2.rs:11:1\n    |\n-LL |     1u32.f(\"abc\");\n-   |          ^ method cannot be called on `u32` due to unsatisfied trait bounds\n+LL | / impl X<'_> for u32\n+LL | | where\n+LL | |     for<'b> <Self as X<'b>>::U: Clone,\n+LL | | {\n+LL | |     type U = str;\n+LL | | }\n+   | |_^\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `<u32 as X<'b>>::U: Clone`\n-           which is required by `u32: X`\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n+  --> $DIR/hr-associated-type-bound-2.rs:11:6\n+   |\n+LL | impl X<'_> for u32\n+   |      ^^^^^     ^^^\n+   = note: 128 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n+\n+error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n+  --> $DIR/hr-associated-type-bound-2.rs:15:5\n+   |\n+LL |     type U = str;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n+  --> $DIR/hr-associated-type-bound-2.rs:11:6\n+   |\n+LL | impl X<'_> for u32\n+   |      ^^^^^     ^^^\n+   = note: 128 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "bbeeb145d1fe298197e39bdd28742216ebbe9198", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -12,7 +12,7 @@ where\n \n impl<'a> Y<'a, u8> for u8 {\n     type V = str;\n-    //~^ ERROR the trait bound `for<'b> <u8 as Y<'b, u8>>::V: Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }\n \n fn main() {"}, {"sha": "99f95c200511ac4c017f5e7ef904ae53309f4d1d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-1.rs:14:14\n    |\n LL |     type V = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `Y`\n   --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n    |"}, {"sha": "5193400882d1255f83eea4be2e4ca33229c4456e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -2,8 +2,8 @@\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,\n-    //~^ the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-    //~| the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+    //~^ the trait bound `str: Clone` is not satisfied\n+    //~| the trait bound `str: Clone` is not satisfied\n     for<'b> <T as Z<'b, u16>>::W: Clone,\n {\n     type W: ?Sized;\n@@ -14,7 +14,7 @@ where\n \n impl<'a> Z<'a, u16> for u16 {\n     type W = str;\n-    //~^ ERROR the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone\n+    //~^ ERROR the trait bound `str: Clone\n }\n \n fn main() {"}, {"sha": "730229b5208da70e32b7687be78a0c11639f5d5e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL |     T: Z<'a, u16>,\n-   |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n    |\n@@ -15,14 +13,12 @@ LL | trait Z<'a, T: ?Sized>\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL |     T: Z<'a, u16>,\n-   |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n    |\n@@ -32,14 +28,12 @@ LL | trait Z<'a, T: ?Sized>\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n    |\n LL |     type W = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n    |"}, {"sha": "fda7d8111856da4cfc6ec2a1e3b4c26cd5482dbc", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -11,7 +11,7 @@ where\n \n impl<S, T> X<'_, (T,)> for (S,) {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "9935445c306586c88a33a6ae53f6ac923839f0c4", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-3.rs:13:14\n    |\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n    |"}, {"sha": "20c8157ed974921e6ff79567f92db9b10cc9a026", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -11,7 +11,7 @@ where\n \n impl<S, T> X<'_, T> for (S,) {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, T>>::U: Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "c26324ee6255455da3fe2d642c09ab79e26f5492", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-4.rs:13:14\n    |\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n    |"}, {"sha": "920aa835280701e159dfc2866ed41ecf11ae2c76", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -25,14 +25,12 @@ where\n \n impl<S, T> X<'_, Vec<T>> for S {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-    //~| ERROR the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }\n \n impl<S, T> X<'_, Box<T>> for S {\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-    //~| ERROR the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n+    //~^ ERROR the trait bound `str: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "63cd89316b38cf6a94bbfbd19106ba8d2cbbeb0c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 6, "deletions": 44, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,11 +1,9 @@\n-error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n    |\n@@ -15,31 +13,12 @@ LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`\n \n-error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n-   |\n-LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n-   |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n-note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:16:33\n-   |\n-LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ^^^^^ required by this bound in `X`\n-\n-error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n+error[E0277]: the trait bound `str: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n    |\n LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n    |\n@@ -49,23 +28,6 @@ LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`\n \n-error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n-   |\n-LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n-   |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n-note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:16:33\n-   |\n-LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ^^^^^ required by this bound in `X`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "482047b095925a45d6dce447c56dc20615c56fb6", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -12,7 +12,6 @@ where\n impl<S, T> X<'_, T> for (S,) {\n     //~^ ERROR the trait bound `for<'b> T: X<'b, T>` is not satisfied\n     type U = str;\n-    //~^ ERROR the trait bound `for<'b> <T as X<'b, T>>::U: Clone` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "bd6e627a3d0d577f43fbc1f76769991681a52ff5", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,39 +1,14 @@\n-error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-6.rs:14:14\n-   |\n-LL |     type U = str;\n-   |              ^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b, T>>::U`\n-   |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n-note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-6.rs:4:33\n-   |\n-LL | trait X<'a, T>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ^^^^^ required by this bound in `X`\n-\n error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n    |\n LL | impl<S, T> X<'_, T> for (S,) {\n    |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n    |\n-note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-6.rs:3:16\n-   |\n-LL | trait X<'a, T>\n-   |       - required by a bound in this\n-LL | where\n-LL |     for<'b> T: X<'b, T>,\n-   |                ^^^^^^^^ required by this bound in `X`\n help: consider restricting type parameter `T`\n    |\n LL | impl<S, T: for<'b> X<'b, T>> X<'_, T> for (S,) {\n    |          ++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "951dd9e97d268ec81274dc44f21fb895b57d35dd", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -11,9 +11,8 @@ where\n }\n \n impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n+    //~^ type mismatch resolving `<T as Deref>::Target == T`\n     type Item = T;\n-    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref\n }\n \n pub fn main() {"}, {"sha": "9c29e969de8da77a123c453d33b244a80f306090", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,32 +1,16 @@\n-error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n-  --> $DIR/hr-associated-type-projection-1.rs:15:17\n-   |\n-LL |     type Item = T;\n-   |                 ^ the trait `for<'b> Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n-   |\n-   = help: the following implementations were found:\n-             <&T as Deref>\n-             <&mut T as Deref>\n-note: required by a bound in `UnsafeCopy`\n-  --> $DIR/hr-associated-type-projection-1.rs:3:48\n-   |\n-LL | trait UnsafeCopy<'a, T: Copy>\n-   |       ---------- required by a bound in this\n-LL | where\n-LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `UnsafeCopy`\n-\n-error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n+error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n   --> $DIR/hr-associated-type-projection-1.rs:13:33\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |                                 ^^^^^^^^^^^^^^^^^ the trait `for<'b> Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected associated type, found type parameter `T`\n    |\n-help: consider further restricting the associated type\n+   = note: expected associated type `<T as Deref>::Target`\n+               found type parameter `T`\n+help: consider further restricting this bound\n    |\n-LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref {\n-   |                                                         +++++++++++++++++++++++++++++++++++++++++++++++++++\n+LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {\n+   |                                +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "d8790bb2d12fc1c3b162f5e8fcaa94bce353d3ae", "filename": "src/test/ui/associated-types/normalization-generality-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-generality-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-generality-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-generality-2.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,30 @@\n+// build-pass\n+\n+// Ensures that we don't regress on \"implementation is not general enough\" when\n+// normalizating under binders. Unlike `normalization-generality.rs`, this also produces\n+// type outlives predicates that we must ignore.\n+\n+pub unsafe trait Yokeable<'a> {\n+    type Output: 'a;\n+}\n+pub struct Yoke<Y: for<'a> Yokeable<'a>> {\n+    _marker: std::marker::PhantomData<Y>,\n+}\n+impl<Y: for<'a> Yokeable<'a>> Yoke<Y> {\n+    pub fn project<P>(\n+        &self,\n+        _f: for<'a> fn(&<Y as Yokeable<'a>>::Output, &'a ()) -> <P as Yokeable<'a>>::Output,\n+    ) -> Yoke<P>\n+    where\n+        P: for<'a> Yokeable<'a>,\n+    {\n+        unimplemented!()\n+    }\n+}\n+pub fn slice(y: Yoke<&'static str>) -> Yoke<&'static [u8]> {\n+    y.project(move |yk, _| yk.as_bytes())\n+}\n+unsafe impl<'a, T: 'static + ?Sized> Yokeable<'a> for &'static T {\n+    type Output = &'a T;\n+}\n+fn main() {}"}, {"sha": "acc1c6ae1225d2b411274145a973b607eac89aa7", "filename": "src/test/ui/closures/issue-41366.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait T<'x> {\n     type V;\n }\n@@ -8,6 +10,4 @@ impl<'g> T<'g> for u32 {\n \n fn main() {\n     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-    //~^ ERROR: type mismatch in closure arguments\n-    //~| ERROR: size for values of type `<u32 as T<'_>>::V` cannot be known at compilation time\n }"}, {"sha": "06477efac264ef78ed494419d986fdaecacdd18a", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=7b0e554ee2c94e9b3865a8c2d24d720224512dec", "patch": "@@ -1,32 +0,0 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-41366.rs:10:5\n-   |\n-LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |     ^^------^\n-   |     | |\n-   |     | found signature of `fn(u16) -> _`\n-   |     expected signature of `for<'x> fn(<u32 as T<'x>>::V) -> _`\n-   |\n-   = note: required for the cast to the object type `dyn for<'x> Fn(<u32 as T<'x>>::V)`\n-\n-error[E0277]: the size for values of type `<u32 as T<'_>>::V` cannot be known at compilation time\n-  --> $DIR/issue-41366.rs:10:8\n-   |\n-LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |        ^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<u32 as T<'_>>::V`\n-   = help: unsized fn params are gated as an unstable feature\n-help: consider further restricting the associated type\n-   |\n-LL | fn main() where <u32 as T<'_>>::V: Sized {\n-   |           ++++++++++++++++++++++++++++++\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     (&|&_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n-   |        +\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0277, E0631.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "24ac566f9df0c646061a912dbc1ad503a560f096", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,88 @@\n+// FamilyType (GAT workaround)\n+pub trait FamilyLt<'a> {\n+    type Out;\n+}\n+\n+struct RefMutFamily<T>(std::marker::PhantomData<T>, ());\n+impl<'a, T: 'a> FamilyLt<'a> for RefMutFamily<T> {\n+    type Out = &'a mut T;\n+}\n+\n+pub trait Execute {\n+    type E: Inject;\n+    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out);\n+}\n+\n+pub trait Inject\n+where\n+    Self: Sized,\n+{\n+    type I: for<'a> FamilyLt<'a>;\n+    fn inject(_: &()) -> <Self::I as FamilyLt>::Out;\n+}\n+\n+impl<T: 'static> Inject for RefMutFamily<T> {\n+    type I = Self;\n+    fn inject(_: &()) -> <Self::I as FamilyLt>::Out {\n+        unimplemented!()\n+    }\n+}\n+\n+// This struct is only used to give a hint to the compiler about the type `Q`\n+struct Annotate<Q>(std::marker::PhantomData<Q>);\n+impl<Q> Annotate<Q> {\n+    fn new() -> Self {\n+        Self(std::marker::PhantomData)\n+    }\n+}\n+\n+// This function annotate a closure so it can have Higher-Rank Lifetime Bounds\n+//\n+// See 'annotate' workaround: https://github.com/rust-lang/rust/issues/58052\n+fn annotate<F, Q>(_q: Annotate<Q>, func: F) -> impl Execute + 'static\n+where\n+    F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out) + 'static,\n+    Q: Inject + 'static,\n+{\n+    let wrapper: Wrapper<Q, F> = Wrapper(std::marker::PhantomData, func);\n+    wrapper\n+}\n+\n+struct Wrapper<Q, F>(std::marker::PhantomData<Q>, F);\n+impl<Q, F> Execute for Wrapper<Q, F>\n+    where\n+        Q: Inject,\n+        F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out),\n+{\n+    type E = Q;\n+\n+    fn execute(self, value: <<Self::E as Inject>::I as FamilyLt>::Out) {\n+        (self.1)(value)\n+    }\n+}\n+\n+struct Task {\n+    _processor: Box<dyn FnOnce()>,\n+}\n+\n+// This function consume the closure\n+fn task<P>(processor: P) -> Task\n+where P: Execute + 'static {\n+    Task {\n+        _processor: Box::new(move || {\n+            let q = P::E::inject(&());\n+            processor.execute(q);\n+        })\n+    }\n+}\n+\n+fn main() {\n+    task(annotate( //~ type mismatch\n+        //~^ the size\n+        //~^^ the trait bound\n+        Annotate::<RefMutFamily<usize>>::new(),\n+        |value: &mut usize| {\n+            *value = 2;\n+        }\n+    ));\n+}"}, {"sha": "8311c147ee3bdea371bdcee987ea3524697fdaee", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,67 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-62529-1.rs:80:10\n+   |\n+LL |     task(annotate(\n+   |          ^^^^^^^^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n+...\n+LL |         |value: &mut usize| {\n+   |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n+   |\n+note: required by a bound in `annotate`\n+  --> $DIR/issue-62529-1.rs:44:8\n+   |\n+LL | fn annotate<F, Q>(_q: Annotate<Q>, func: F) -> impl Execute + 'static\n+   |    -------- required by a bound in this\n+LL | where\n+LL |     F: for<'r> FnOnce(<<Q as Inject>::I as FamilyLt<'r>>::Out) + 'static,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `annotate`\n+\n+error[E0277]: the size for values of type `impl Execute` cannot be known at compilation time\n+  --> $DIR/issue-62529-1.rs:80:10\n+   |\n+LL |       task(annotate(\n+   |  __________^\n+LL | |\n+LL | |\n+LL | |         Annotate::<RefMutFamily<usize>>::new(),\n+...  |\n+LL | |         }\n+LL | |     ));\n+   | |_____^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `impl Execute`\n+note: required by a bound in `task`\n+  --> $DIR/issue-62529-1.rs:69:9\n+   |\n+LL | fn task<P>(processor: P) -> Task\n+   |         ^ required by this bound in `task`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn task<P: ?Sized>(processor: P) -> Task\n+   |          ++++++++\n+\n+error[E0277]: the trait bound `impl Execute: Execute` is not satisfied\n+  --> $DIR/issue-62529-1.rs:80:10\n+   |\n+LL |       task(annotate(\n+   |  __________^\n+LL | |\n+LL | |\n+LL | |         Annotate::<RefMutFamily<usize>>::new(),\n+...  |\n+LL | |         }\n+LL | |     ));\n+   | |_____^ the trait `Execute` is not implemented for `impl Execute`\n+   |\n+note: required by a bound in `task`\n+  --> $DIR/issue-62529-1.rs:70:10\n+   |\n+LL | fn task<P>(processor: P) -> Task\n+   |    ---- required by a bound in this\n+LL | where P: Execute + 'static {\n+   |          ^^^^^^^ required by this bound in `task`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0631.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "002054732919e30820e0f4f79821e9ce1ecfda79", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-2.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+trait Lt<'a> {\n+    type T;\n+}\n+struct Id<T>(PhantomData<T>);\n+impl<'a,T> Lt<'a> for Id<T> {\n+    type T = T;\n+}\n+\n+struct Ref<T>(PhantomData<T>) where T: ?Sized;\n+impl<'a,T> Lt<'a> for Ref<T>\n+where T: 'a + Lt<'a> + ?Sized\n+{\n+    type T = &'a T;\n+}\n+struct Mut<T>(PhantomData<T>) where T: ?Sized;\n+impl<'a,T> Lt<'a> for Mut<T>\n+where T: 'a + Lt<'a> + ?Sized\n+{\n+    type T = &'a mut T;\n+}\n+\n+struct C<I,O>(for<'a> fn(<I as Lt<'a>>::T) -> O) where I: for<'a> Lt<'a>;\n+\n+\n+fn main() {\n+    let c = C::<Id<_>,_>(|()| 3);\n+    c.0(());\n+\n+}"}, {"sha": "d84e30f4984eabff83d310ea0dab88d0bfb6145f", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,32 @@\n+trait ATC<'a> {\n+    type Type: Sized;\n+}\n+\n+trait WithDefault: for<'a> ATC<'a> {\n+    fn with_default<F: for<'a> Fn(<Self as ATC<'a>>::Type)>(f: F);\n+}\n+\n+fn call<'b, T: for<'a> ATC<'a>, F: for<'a> Fn(<T as ATC<'a>>::Type)>(\n+    f: F,\n+    x: <T as ATC<'b>>::Type,\n+) {\n+    f(x);\n+}\n+\n+impl<'a> ATC<'a> for () {\n+    type Type = Self;\n+}\n+\n+impl WithDefault for () {\n+    fn with_default<F: for<'a> Fn(<Self as ATC<'a>>::Type)>(f: F) {\n+        // Errors with a bogus type mismatch.\n+        //f(());\n+        // Going through another generic function works fine.\n+        call(f, ());\n+        //~^ expected a\n+    }\n+}\n+\n+fn main() {\n+    // <()>::with_default(|_| {});\n+}"}, {"sha": "b110734642177fd39d6a371e9f5a63915fb3b350", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: expected a `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+  --> $DIR/issue-62529-3.rs:25:9\n+   |\n+LL |         call(f, ());\n+   |         ^^^^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+   |\n+note: required by a bound in `call`\n+  --> $DIR/issue-62529-3.rs:9:36\n+   |\n+LL | fn call<'b, T: for<'a> ATC<'a>, F: for<'a> Fn(<T as ATC<'a>>::Type)>(\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8c2a59868ca5e4f81346295da16ea77ff91a96c0", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-4.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-4.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+trait Container<'a> {\n+    type Root: 'a;\n+}\n+\n+type RootOf<'a, T> = <T as Container<'a>>::Root;\n+\n+struct Test<'a, T> where T: Container<'a> {\n+    pub root: T::Root,\n+    marker: PhantomData<&'a mut &'a mut ()>,\n+}\n+\n+impl<'a, 'b> Container<'b> for &'a str {\n+    type Root = &'b str;\n+}\n+\n+impl<'a, T> Test<'a, T> where T: for<'b> Container<'b> {\n+    fn new(root: RootOf<'a, T>) -> Test<'a, T> {\n+        Test {\n+            root: root,\n+            marker: PhantomData\n+        }\n+    }\n+\n+    fn with_mut<F, R>(&mut self, f: F) -> R where\n+            F: for<'b> FnOnce(&'b mut RootOf<'b, T>) -> R {\n+        f(unsafe { mem::transmute(&mut self.root) })\n+    }\n+}\n+\n+fn main() {\n+    let val = \"root\";\n+    let mut test: Test<&str> = Test::new(val);\n+    test.with_mut(|_| { });\n+}"}, {"sha": "03f257a029c1752af680519b9170e38a7edb6fcd", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-5.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-5.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+pub struct Struct {}\n+\n+pub trait Trait<'a> {\n+    type Assoc;\n+\n+    fn method() -> Self::Assoc;\n+}\n+\n+impl<'a> Trait<'a> for Struct {\n+    type Assoc = ();\n+\n+    fn method() -> Self::Assoc {}\n+}\n+\n+pub fn function<F, T>(f: F)\n+where\n+    F: for<'a> FnOnce(<T as Trait<'a>>::Assoc),\n+    T: for<'b> Trait<'b>,\n+{\n+    f(T::method());\n+}\n+\n+fn main() {\n+    function::<_, Struct>(|_| {});\n+}"}, {"sha": "74a4785e478b84ef8ee10fc5204fc6bd73f0c174", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-6.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,77 @@\n+// check-pass\n+\n+use std::cell::RefMut;\n+\n+fn main() {\n+    StateMachine2::Init.resume();\n+}\n+\n+enum StateMachine2<'a> {\n+    Init,\n+    #[allow(dead_code)] // match required for ICE\n+    AfterTwoYields {\n+        p: Backed<'a, *mut String>,\n+    },\n+}\n+\n+impl<'a> StateMachine2<'a> {\n+    fn take(&self) -> Self {\n+        StateMachine2::Init\n+    }\n+}\n+\n+impl<'a> StateMachine2<'a> {\n+    fn resume(&mut self) -> () {\n+        use StateMachine2::*;\n+        match self.take() {\n+            AfterTwoYields { p } => {\n+                p.with(|_| {});\n+            }\n+            _ => panic!(\"Resume after completed.\"),\n+        }\n+    }\n+}\n+\n+unsafe trait Unpack<'a> {\n+    type Unpacked: 'a;\n+\n+    fn unpack(&self) -> Self::Unpacked {\n+        unsafe { std::mem::transmute_copy(&self) }\n+    }\n+}\n+\n+unsafe trait Pack {\n+    type Packed;\n+\n+    fn pack(&self) -> Self::Packed {\n+        unsafe { std::mem::transmute_copy(&self) }\n+    }\n+}\n+\n+unsafe impl<'a> Unpack<'a> for String {\n+    type Unpacked = String;\n+}\n+\n+unsafe impl Pack for String {\n+    type Packed = String;\n+}\n+\n+unsafe impl<'a> Unpack<'a> for *mut String {\n+    type Unpacked = &'a mut String;\n+}\n+\n+unsafe impl<'a> Pack for &'a mut String {\n+    type Packed = *mut String;\n+}\n+\n+struct Backed<'a, U>(RefMut<'a, Option<String>>, U);\n+\n+impl<'a, 'b, U: Unpack<'b>> Backed<'a, U> {\n+    fn with<F>(self, f: F) -> Backed<'a, ()>\n+    where\n+        F: for<'f> FnOnce(<U as Unpack<'f>>::Unpacked) -> (),\n+    {\n+        let result = f(self.1.unpack());\n+        Backed(self.0, result)\n+    }\n+}"}, {"sha": "87d1a250f7ae6dd3b47729605b0ae210272f65e2", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,29 @@\n+pub trait MyTrait<'a> {\n+    type Output: 'a;\n+    fn gimme_value(&self) -> Self::Output;\n+}\n+\n+pub struct MyStruct;\n+\n+impl<'a> MyTrait<'a> for MyStruct {\n+    type Output = &'a usize;\n+    fn gimme_value(&self) -> Self::Output {\n+        unimplemented!()\n+    }\n+}\n+\n+fn meow<T, F>(t: T, f: F)\n+where\n+    T: for<'any> MyTrait<'any>,\n+    F: for<'any2> Fn(<T as MyTrait<'any2>>::Output),\n+{\n+    let v = t.gimme_value();\n+    f(v);\n+}\n+\n+fn main() {\n+    let struc = MyStruct;\n+    meow(struc, |foo| { //~ type mismatch\n+        println!(\"{:?}\", foo);\n+    })\n+}"}, {"sha": "efc956888ee5ad9fa5a4fa283f64a7922070828e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-70120.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,20 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-70120.rs:26:5\n+   |\n+LL |     meow(struc, |foo| {\n+   |     ^^^^        ----- found signature of `for<'r> fn(&'r usize) -> _`\n+   |     |\n+   |     expected signature of `for<'any2> fn(<MyStruct as MyTrait<'any2>>::Output) -> _`\n+   |\n+note: required by a bound in `meow`\n+  --> $DIR/issue-70120.rs:18:8\n+   |\n+LL | fn meow<T, F>(t: T, f: F)\n+   |    ---- required by a bound in this\n+...\n+LL |     F: for<'any2> Fn(<T as MyTrait<'any2>>::Output),\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `meow`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "97f53bc70e44eeef6feea6ca9d9afd13fd83aa10", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (<Unit2 as Ty<'r>>::V,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n@@ -9,13 +9,13 @@ LL |     let v = Unit2.m(\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&u8,),)>>::Output == Unit3`\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found struct `Unit3`\n    |\n-note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n+note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>"}, {"sha": "3c720f50d48b266b3327f5cf580267c7be27e6c7", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n-                         found type `()`\n+                    found unit type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n@@ -24,7 +24,7 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-                         found type `()`\n+                    found unit type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {"}, {"sha": "42cef9a47f2792deebb6fa59daf887b4f09589ea", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n use std::mem;\n \n trait Trait1<T> {}\n@@ -8,6 +6,7 @@ trait Trait2<'a> {\n }\n \n fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n+//~^ the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n }\n "}, {"sha": "dda6145e65adaf17bebb523a07a1c967ee5bb109", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n+  --> $DIR/issue-35570.rs:8:4\n+   |\n+LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n+   |    ^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cedcf7c361c3bbb6d32109c49be0aaa2c28adf72", "filename": "src/test/ui/issues/issue-43623.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n pub trait Trait<'a> {\n     type Assoc;\n }\n@@ -14,7 +16,6 @@ where\n     F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n {\n     break_me::<Type, fn(_)>;\n-    //~^ ERROR: type mismatch in function arguments\n }\n \n fn main() {}"}, {"sha": "b99f367d73365b20b962aa24b9d0914dfcb376dc", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=7b0e554ee2c94e9b3865a8c2d24d720224512dec", "patch": "@@ -1,21 +0,0 @@\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-43623.rs:16:5\n-   |\n-LL |     break_me::<Type, fn(_)>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n-   |     found signature of `fn(()) -> _`\n-   |\n-note: required by a bound in `break_me`\n-  --> $DIR/issue-43623.rs:14:16\n-   |\n-LL | pub fn break_me<T, F>(f: F)\n-   |        -------- required by a bound in this\n-...\n-LL |     F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `break_me`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0631`."}, {"sha": "ab3b92142c8c986085aa920e96a69c9e2aacaa62", "filename": "src/test/ui/issues/issue-44005.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44005.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,4 +1,3 @@\n-// build-pass\n pub trait Foo<'a> {\n     type Bar;\n     fn foo(&'a self) -> Self::Bar;\n@@ -12,8 +11,9 @@ impl<'a, 'b, T: 'a> Foo<'a> for &'b T {\n }\n \n pub fn uncallable<T, F>(x: T, f: F)\n-    where T: for<'a> Foo<'a>,\n-          F: for<'a> Fn(<T as Foo<'a>>::Bar)\n+where\n+    T: for<'a> Foo<'a>,\n+    F: for<'a> Fn(<T as Foo<'a>>::Bar),\n {\n     f(x.foo());\n }\n@@ -24,6 +24,7 @@ pub fn catalyst(x: &i32) {\n \n pub fn broken<F: Fn(&i32)>(x: &i32, f: F) {\n     uncallable(x, |y| f(y));\n+    //~^ type mismatch\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "307e444e69635d26c8b981168bc19562286eba19", "filename": "src/test/ui/issues/issue-44005.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44005.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -0,0 +1,20 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-44005.rs:26:5\n+   |\n+LL |     uncallable(x, |y| f(y));\n+   |     ^^^^^^^^^^    -------- found signature of `for<'r> fn(&'r i32) -> _`\n+   |     |\n+   |     expected signature of `for<'a> fn(<&i32 as Foo<'a>>::Bar) -> _`\n+   |\n+note: required by a bound in `uncallable`\n+  --> $DIR/issue-44005.rs:16:8\n+   |\n+LL | pub fn uncallable<T, F>(x: T, f: F)\n+   |        ---------- required by a bound in this\n+...\n+LL |     F: for<'a> Fn(<T as Foo<'a>>::Bar),\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `uncallable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "2ab49ec61cf597ef187b72d897312e9ffd112962", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b0e554ee2c94e9b3865a8c2d24d720224512dec/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=7b0e554ee2c94e9b3865a8c2d24d720224512dec", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57843.rs:25:9\n-   |\n-LL |     Foo(Box::new(|_| ()));\n-   |         ^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 bool)` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 bool,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ac33cfd0402434095b36ca5b0fe27cd968077e5c", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `for<'t> <Map<<&'t _ as IntoIterator>::IntoIter, _> as Iterator>::Item: Foo` is not satisfied\n+error[E0277]: the trait bound `&u32: Foo` is not satisfied\n   --> $DIR/issue-60218.rs:18:5\n    |\n LL |     trigger_error(vec![], |x: &u32| x)\n-   |     ^^^^^^^^^^^^^ the trait `for<'t> Foo` is not implemented for `<Map<<&'t _ as IntoIterator>::IntoIter, _> as Iterator>::Item`\n+   |     ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n    |\n note: required by a bound in `trigger_error`\n   --> $DIR/issue-60218.rs:13:72"}, {"sha": "733456a1a8bd1b22751c39944b4bc98d4e617dc2", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<Rc<Apple> as Deref>::Target == Rc<Apple>\n LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n    |                             ^^ expected struct `Apple`, found struct `Rc`\n    |\n-   = note: expected type `Apple`\n-            found struct `Rc<Apple>`\n+   = note: expected struct `Apple`\n+              found struct `Rc<Apple>`\n    = note: required because of the requirements on the impl of `PartialEq<Pin<Rc<Apple>>>` for `Pin<Apple>`\n \n error: aborting due to previous error"}, {"sha": "9867addaf38e7ac23d1e62507b107481078be061", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -2,10 +2,10 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/issue-75361-mismatched-impl.rs:18:3\n    |\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n-   |   --------------------------------------------------------------------- expected `fn(&T) -> Box<(dyn MyTrait<Item = &_> + 'static)>`\n+   |   --------------------------------------------------------------------- expected `fn(&T) -> Box<(dyn MyTrait<Item = &T> + 'static)>`\n ...\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType> + '_> {\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&T) -> Box<dyn MyTrait<Item = &_>>`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&T) -> Box<dyn MyTrait<Item = &T>>`\n    |\n    = note: expected `fn(&T) -> Box<(dyn MyTrait<Item = &T> + 'static)>`\n               found `fn(&T) -> Box<dyn MyTrait<Item = &T>>`"}, {"sha": "c1dab6086ef3a97c2c35c26ce40df9d25aadc6eb", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -19,7 +19,7 @@ trait Trait2<'a, 'b> {\n // since for it to be WF, we would need to know that `'y: 'x`, but we\n // do not infer that.\n fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-    //~^ ERROR reference has a longer lifetime than the data it references\n+    //~^ the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n {\n }\n "}, {"sha": "44ef13c740c061ba150e5659ed4b4fc7971da33e", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "patch": "@@ -1,20 +1,14 @@\n-error[E0491]: in type `&'x (dyn for<'z> Trait1<<T as Trait2<'y, 'z>>::Foo> + 'x)`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:25\n+error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:4\n    |\n LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |    ^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n    |\n-note: the pointer is valid for the lifetime `'x` as defined on the function body at 21:11\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:11\n+help: consider restricting type parameter `T`\n    |\n-LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |           ^^\n-note: but the referenced data is only valid for the lifetime `'y` as defined on the function body at 21:15\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:15\n-   |\n-LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |               ^^\n+LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+   |                    ++++++++++++++++++++++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0491`.\n+For more information about this error, try `rustc --explain E0277`."}]}