{"sha": "d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmMzY2IxMGM0ZDFlODU2OTk4YzhlMzVjZTdkODllMGQ3NGY0ZDY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-24T01:25:50Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T01:24:45Z"}, "message": "Change \"pred\" to \"pure fn\" in all libraries and test cases", "tree": {"sha": "1c61d6788336a0e076328f76cc33d792dad92f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c61d6788336a0e076328f76cc33d792dad92f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "html_url": "https://github.com/rust-lang/rust/commit/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb85015c397cefa9de7653a98b7572ef511e0ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb85015c397cefa9de7653a98b7572ef511e0ef", "html_url": "https://github.com/rust-lang/rust/commit/1cb85015c397cefa9de7653a98b7572ef511e0ef"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "cbd8f667b86070b9c39d37917eac649008429ce4", "filename": "src/lib/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fchar.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,4 +1,4 @@\n-pred is_whitespace(c: char) -> bool {\n+pure fn is_whitespace(c: char) -> bool {\n     const ch_space: char = '\\u0020';\n     const ch_ogham_space_mark: char = '\\u1680';\n     const ch_mongolian_vowel_sep: char = '\\u180e';"}, {"sha": "9b3e45e8c530d26a2e3dee0911ea3632a1fed74f", "filename": "src/lib/istr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fistr.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -73,12 +73,12 @@ fn is_ascii(s: &istr) -> bool {\n }\n \n /// Returns true if the string has length 0\n-pred is_empty(s: &istr) -> bool {\n+pure fn is_empty(s: &istr) -> bool {\n     for c: u8 in s { ret false; } ret true;\n }\n \n /// Returns true if the string has length greater than 0\n-pred is_not_empty(s: &istr) -> bool {\n+pure fn is_not_empty(s: &istr) -> bool {\n     !is_empty(s)\n }\n "}, {"sha": "3553dc7e2cf870ca912d8ccbdfe227415a189e14", "filename": "src/lib/uint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -10,17 +10,17 @@ fn div(x: uint, y: uint) -> uint { ret x / y; }\n \n fn rem(x: uint, y: uint) -> uint { ret x % y; }\n \n-pred lt(x: uint, y: uint) -> bool { ret x < y; }\n+pure fn lt(x: uint, y: uint) -> bool { ret x < y; }\n \n-pred le(x: uint, y: uint) -> bool { ret x <= y; }\n+pure fn le(x: uint, y: uint) -> bool { ret x <= y; }\n \n-pred eq(x: uint, y: uint) -> bool { ret x == y; }\n+pure fn eq(x: uint, y: uint) -> bool { ret x == y; }\n \n-pred ne(x: uint, y: uint) -> bool { ret x != y; }\n+pure fn ne(x: uint, y: uint) -> bool { ret x != y; }\n \n-pred ge(x: uint, y: uint) -> bool { ret x >= y; }\n+pure fn ge(x: uint, y: uint) -> bool { ret x >= y; }\n \n-pred gt(x: uint, y: uint) -> bool { ret x > y; }\n+pure fn gt(x: uint, y: uint) -> bool { ret x > y; }\n \n fn max(x: uint, y: uint) -> uint { if x > y { ret x; } ret y; }\n "}, {"sha": "f387ec75b51570bd94125fbdff41cfdac82c3cd5", "filename": "src/lib/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -77,13 +77,13 @@ fn from_mut<@T>(v: &[mutable T]) -> [T] {\n }\n \n // Predicates\n-pred is_empty<T>(v: &[mutable? T]) -> bool {\n+pure fn is_empty<T>(v: &[mutable? T]) -> bool {\n     // FIXME: This would be easier if we could just call len\n     for t: T in v { ret false; }\n     ret true;\n }\n \n-pred is_not_empty<T>(v: &[mutable? T]) -> bool { ret !is_empty(v); }\n+pure fn is_not_empty<T>(v: &[mutable? T]) -> bool { ret !is_empty(v); }\n \n // Accessors\n "}, {"sha": "78c8f64ee9c1f603f7bd155194d2cd414ff4730c", "filename": "src/test/compile-fail/constrained-type-missing-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -8,7 +8,7 @@ tag list { cons(int, @list); nil; }\n \n type bubu = {x: int, y: int};\n \n-pred less_than(x: int, y: int) -> bool { ret x < y; }\n+pure fn less_than(x: int, y: int) -> bool { ret x < y; }\n \n type ordered_range = {low: int, high: int} : less_than(low, high);\n "}, {"sha": "49e7ec220bbf591e108559665809eb2d9852987b", "filename": "src/test/compile-fail/do-while-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -2,7 +2,7 @@\n \n fn print_even(y: int) : even(y) { log y; }\n \n-pred even(y: int) -> bool { true }\n+pure fn even(y: int) -> bool { true }\n \n fn main() {\n     let y: int = 42;"}, {"sha": "aed84faacc375ec434623f26ae3292102d46ac3e", "filename": "src/test/compile-fail/if-check-precond-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Unsatisfied precondition constraint\n-pred even(x: uint) -> bool {\n+pure fn even(x: uint) -> bool {\n     if x < 2u {\n         ret false;\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }"}, {"sha": "42715eaa36ed6d15e4718ce9b0c470f54b81ee44", "filename": "src/test/compile-fail/impure-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -3,7 +3,7 @@\n \n fn g() { }\n \n-pred f(q: int) -> bool { g(); ret true; }\n+pure fn f(q: int) -> bool { g(); ret true; }\n \n fn main() {\n     let x = 0;"}, {"sha": "7a90f1cfa99730fe43d08c8cb81b04b713b1ec08", "filename": "src/test/compile-fail/not-pred-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -2,7 +2,7 @@\n \n // error-pattern: Constraint args must be\n \n-pred f(q: int) -> bool { ret true; }\n+pure fn f(q: int) -> bool { ret true; }\n \n fn main() {\n     // should fail to typecheck, as pred args must be slot variables"}, {"sha": "f8975bb188969adc6d5d2ae69ca85052c7638eed", "filename": "src/test/compile-fail/pred-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -4,7 +4,7 @@\n \n fn f(a: int, b: int) : lt(a, b) { }\n \n-pred lt(a: int, b: int) -> bool { ret a < b; }\n+pure fn lt(a: int, b: int) -> bool { ret a < b; }\n \n fn main() {\n     let a: int = 10;"}, {"sha": "3d887e8d6ef669d8f1db5492a20971708d28ee79", "filename": "src/test/compile-fail/pred-on-wrong-slots.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-on-wrong-slots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-on-wrong-slots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpred-on-wrong-slots.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -4,7 +4,7 @@\n \n fn f(a: int, b: int) : lt(a, b) { }\n \n-pred lt(a: int, b: int) -> bool { ret a < b; }\n+pure fn lt(a: int, b: int) -> bool { ret a < b; }\n \n fn main() {\n     let a: int = 10;"}, {"sha": "26cca68c5e4d8d1fe47c2d65810961778e034b41", "filename": "src/test/compile-fail/pred-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -4,7 +4,7 @@\n \n fn f(a: int, b: int) : lt(a, b) { }\n \n-pred lt(a: int, b: int) -> bool { ret a < b; }\n+pure fn lt(a: int, b: int) -> bool { ret a < b; }\n \n fn main() {\n     let a: int = 10;"}, {"sha": "bf761b31199820f2b0a0d6d45ee7a46e9dcaf15c", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -2,7 +2,7 @@\n \n fn print_even(y: int) : even(y) { log y; }\n \n-pred even(y: int) -> bool { true }\n+pure fn even(y: int) -> bool { true }\n \n fn main() {\n "}, {"sha": "2af0b111f8e2397638ead8acc80d9d233c29262b", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Number is odd\n-pred even(x: uint) -> bool {\n+pure fn even(x: uint) -> bool {\n     if x < 2u {\n         ret false;\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }"}, {"sha": "494bee968f1a4c87a6c5110d733eb36d63da8e35", "filename": "src/test/run-fail/pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-fail%2Fpred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-fail%2Fpred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpred.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -2,6 +2,6 @@\n // error-pattern:Predicate lt(b, a) failed\n fn f(a: int, b: int) { }\n \n-pred lt(a: int, b: int) -> bool { ret a < b; }\n+pure fn lt(a: int, b: int) -> bool { ret a < b; }\n \n fn main() { let a: int = 10; let b: int = 23; check (lt(b, a)); f(b, a); }"}, {"sha": "13741ef3961cd868b894e23989bdde6c61a414e7", "filename": "src/test/run-pass/claim-nonterm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -3,6 +3,6 @@ use std;\n import std::str::*;\n import std::uint::*;\n \n-pred fails(a: uint) -> bool { fail; }\n+pure fn fails(a: uint) -> bool { fail; }\n \n fn main() { let b: uint = 4u; claim (fails(b)); }"}, {"sha": "fdf48e2fb04f85ebe6656190c9dbfe49fcf73dd9", "filename": "src/test/run-pass/constrained-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstrained-type.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -4,7 +4,7 @@ tag list { cons(int, @list); nil; }\n \n type bubu = {x: int, y: int};\n \n-pred less_than(x: int, y: int) -> bool { ret x < y; }\n+pure fn less_than(x: int, y: int) -> bool { ret x < y; }\n \n type ordered_range = {low: int, high: int}  : less_than(*.low, *.high);\n "}, {"sha": "5f3715273ae166a047286cae11bb8f15f35b506c", "filename": "src/test/run-pass/if-check-precond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check-precond.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,4 +1,4 @@\n-pred even(x: uint) -> bool {\n+pure fn even(x: uint) -> bool {\n     if x < 2u {\n         ret false;\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }"}, {"sha": "508bc8385cf5a9f544dc8c885e6fa8d641e2ef0c", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,4 +1,4 @@\n-pred even(x: uint) -> bool {\n+pure fn even(x: uint) -> bool {\n     if x < 2u {\n         ret false;\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }"}, {"sha": "588288cea2f4f44dea8a68bc9e0714ed33038b96", "filename": "src/test/run-pass/pred-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred-check.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,4 +1,4 @@\n // -*- rust -*-\n-pred f(q: int) -> bool { ret true; }\n+pure fn f(q: int) -> bool { ret true; }\n \n fn main() { let x = 0; check (f(x)); }"}, {"sha": "6d1ad3a72adcbed9d4b23a7e28a55f3f37a98c57", "filename": "src/test/run-pass/pred-not-bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,3 +1,5 @@\n+// FIXME should be in run-pass\n+\n // -*- rust -*-\n \n // error-pattern: Non-boolean return type"}, {"sha": "212e77cbdc1c3708aa8b7daccb96cbd2dfe73800", "filename": "src/test/run-pass/pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fpred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n fn f(a: int, b: int) { }\n \n-pred lt(a: int, b: int) -> bool { ret a < b; }\n+pure fn lt(a: int, b: int) -> bool { ret a < b; }\n \n fn main() {\n     let a: int = 10;"}, {"sha": "632aec5c4d14e0d942ca08c71b8cd55d91753e64", "filename": "src/test/run-pass/typestate-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -1,4 +1,4 @@\n-pred p(i: int) -> bool { true }\n+pure fn p(i: int) -> bool { true }\n \n fn f(i: int) : p(i) -> int { i }\n "}, {"sha": "68add65630fb7fd8e8e843fe7c4541d72689b999", "filename": "src/test/run-pass/wierd-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -40,7 +40,7 @@ fn hammertime() -> int {\n }\n \n fn canttouchthis() -> uint {\n-    pred p() -> bool { true }\n+    pure fn p() -> bool { true }\n     let _a = (assert (true)) == (check (p()));\n     let _c = (check (p())) == ();\n     let _b = (log 0) == (ret 0u);"}, {"sha": "f5c4af42681ea058562bcede05da9888f3022f97", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=d9bc3cb10c4d1e856998c8e35ce7d89e0d74f4d6", "patch": "@@ -10,7 +10,7 @@ fn square(n: uint) -> uint { ret n * n; }\n \n fn square_alias(n: &uint) -> uint { ret n * n; }\n \n-pred is_three(n: &uint) -> bool { ret n == 3u; }\n+pure fn is_three(n: &uint) -> bool { ret n == 3u; }\n \n fn square_if_odd(n: &uint) -> option::t<uint> {\n     ret if n % 2u == 1u { some(n * n) } else { none };"}]}