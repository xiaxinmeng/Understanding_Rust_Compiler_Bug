{"sha": "8b449c3eadc68b17141be801fbcddb20a105403a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDQ5YzNlYWRjNjhiMTcxNDFiZTgwMWZiY2RkYjIwYTEwNTQwM2E=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-04T12:31:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-04T12:31:13Z"}, "message": "Merge pull request #284 from oli-obk/no_more_llvm_madness\n\nRust reorders fields, but miri uses the order from the source files", "tree": {"sha": "84e03c110985a54fad7c9f1a45cce6e165e0d14e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e03c110985a54fad7c9f1a45cce6e165e0d14e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b449c3eadc68b17141be801fbcddb20a105403a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b449c3eadc68b17141be801fbcddb20a105403a", "html_url": "https://github.com/rust-lang/rust/commit/8b449c3eadc68b17141be801fbcddb20a105403a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b449c3eadc68b17141be801fbcddb20a105403a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726b027ba3d2658d1a7796f46ea404c7299b7c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/726b027ba3d2658d1a7796f46ea404c7299b7c0c", "html_url": "https://github.com/rust-lang/rust/commit/726b027ba3d2658d1a7796f46ea404c7299b7c0c"}, {"sha": "181bb30d078dd2cff4f92c09026aa8ccbac768bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/181bb30d078dd2cff4f92c09026aa8ccbac768bf", "html_url": "https://github.com/rust-lang/rust/commit/181bb30d078dd2cff4f92c09026aa8ccbac768bf"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "e25fb145e753e4ee9febc2d0255ccc1c0c4a3f88", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8b449c3eadc68b17141be801fbcddb20a105403a", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                         }\n                     }\n \n-                    StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n+                    StructWrappedNullablePointer { nndiscr, ref discrfield_source, .. } => {\n                         if let mir::AggregateKind::Adt(_, variant, _, _) = **kind {\n                             if nndiscr == variant as u64 {\n                                 self.assign_fields(dest, dest_ty, operands)?;\n@@ -699,7 +699,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty)?, Some(0));\n                                 }\n-                                let (offset, TyAndPacked { ty, packed: _}) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                                let (offset, TyAndPacked { ty, packed: _}) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield_source)?;\n                                 // TODO: The packed flag is ignored\n \n                                 // FIXME(solson)"}, {"sha": "6ecaba5ccb857132332d0ea68a48b37b1291394b", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=8b449c3eadc68b17141be801fbcddb20a105403a", "patch": "@@ -104,9 +104,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                         }\n                     }\n \n-                    Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n+                    Layout::StructWrappedNullablePointer { nndiscr, ref discrfield_source, .. } => {\n                         if variant_index as u64 != nndiscr {\n-                            let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                            let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield_source)?;\n                             let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(offset.bytes(), &self)?;\n                             trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                             // only the pointer part of a fat pointer is used for this space optimization"}, {"sha": "b9447a30ab154361baef1007e2b4f0b452f8d24e", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b449c3eadc68b17141be801fbcddb20a105403a/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=8b449c3eadc68b17141be801fbcddb20a105403a", "patch": "@@ -440,8 +440,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 self.read_nonnull_discriminant_value(adt_ptr, nndiscr as u128, discr_size)?\n             }\n \n-            StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-                let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n+            StructWrappedNullablePointer { nndiscr, ref discrfield_source, .. } => {\n+                let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield_source)?;\n                 let nonnull = adt_ptr.offset(offset.bytes(), &*self)?;\n                 trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                 // only the pointer part of a fat pointer is used for this space optimization"}, {"sha": "61c601ac6a903d887306a55d204b90d153a629b9", "filename": "tests/run-pass/issue-29746.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8b449c3eadc68b17141be801fbcddb20a105403a/tests%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b449c3eadc68b17141be801fbcddb20a105403a/tests%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-29746.rs?ref=8b449c3eadc68b17141be801fbcddb20a105403a", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// zip!(a1,a2,a3,a4) is equivalent to:\n+//  a1.zip(a2).zip(a3).zip(a4).map(|(((x1,x2),x3),x4)| (x1,x2,x3,x4))\n+macro_rules! zip {\n+    // Entry point\n+    ([$a:expr, $b:expr, $($rest:expr),*]) => {\n+        zip!([$($rest),*], $a.zip($b), (x,y), [x,y])\n+    };\n+\n+    // Intermediate steps to build the zipped expression, the match pattern, and\n+    //  and the output tuple of the closure, using macro hygene to repeatedly\n+    //  introduce new variables named 'x'.\n+    ([$a:expr, $($rest:expr),*], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n+        zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])\n+    };\n+\n+    // Final step\n+    ([], $zip:expr, $pat:pat, [$($flat:expr),+]) => {\n+        $zip.map(|$pat| ($($flat),+))\n+    };\n+\n+    // Comma\n+    ([$a:expr], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n+        zip!([$a,], $zip, $pat, [$($flat),*])\n+    };\n+}\n+\n+fn main() {\n+    let p1 = vec![1i32,    2].into_iter();\n+    let p2 = vec![\"10\",    \"20\"].into_iter();\n+    let p3 = vec![100u16,  200].into_iter();\n+    let p4 = vec![1000i64, 2000].into_iter();\n+\n+    let e = zip!([p1,p2,p3,p4]).collect::<Vec<_>>();\n+    assert_eq!(e[0], (1i32,\"10\",100u16,1000i64));\n+}"}]}