{"sha": "d7c635b3a514159afd3a61064772ec17cc1c44c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzYzNWIzYTUxNDE1OWFmZDNhNjEwNjQ3NzJlYzE3Y2MxYzQ0YzI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T12:11:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T12:11:57Z"}, "message": "Rollup merge of #77392 - Canop:option_insert, r=m-ou-se\n\nadd `insert` to `Option`\n\nThis removes a cause of `unwrap` and code complexity.\n\nThis allows replacing\n\n```\noption_value = Some(build());\noption_value.as_mut().unwrap()\n```\n\nwith\n\n```\noption_value.insert(build())\n```\n\nIt's also useful in contexts not requiring the mutability of the reference.\n\nHere's a typical cache example:\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => {\n\t    cache = Some(compute_cache_entry());\n\t    // unwrap is OK because we just filled the option\n\t    &cache.as_ref().unwrap().content\n\t}\n};\n```\n\nIt can be changed into\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => &cache.insert(compute_cache_entry()).content,\n};\n```\n\n*(edited: I removed `insert_with`)*", "tree": {"sha": "80ab721a22e877950e86e48ec04dffdfd2f496d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ab721a22e877950e86e48ec04dffdfd2f496d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c635b3a514159afd3a61064772ec17cc1c44c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflBoNCRBK7hj4Ov3rIwAAdHIIAG+7uXAIAy32ezRXQfurnK7p\nG21CbrQx0yyPcN+vAjffl6oi7CBZnAYeOYagPsmDrpyOzE9a1sx09DzXgL9wm88i\n11ZrpSUNhhGUJsENQNwpKz88LHOGYTcn+dMr1+cjvibQxlRXji1cQTvY0AYbzXXY\nt1X17zd+lrmWxOwLj4rqLErl7dYg1DdPwOdpA8jyXLHDRmN5IQaayCzff1dgppqL\nDqANJdVhCOkTymrAvm86H/n6hP2MFrKkLbVJCwY2g2yswZYhO6vhnx9xBScfQN9V\nqIHVy/e9PUGF3baCs3AltmxIK8LsQopO/kNJboM797uAWEgD4Eu9vLkn32FGbDE=\n=CAmG\n-----END PGP SIGNATURE-----\n", "payload": "tree 80ab721a22e877950e86e48ec04dffdfd2f496d1\nparent 8e756698dfc6219a0acf511a9ebb9e6063bdadc2\nparent 216d0fe36466ce9307a643a67afa41ebfb8c43dd\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603541517 +0200\ncommitter GitHub <noreply@github.com> 1603541517 +0200\n\nRollup merge of #77392 - Canop:option_insert, r=m-ou-se\n\nadd `insert` to `Option`\n\nThis removes a cause of `unwrap` and code complexity.\n\nThis allows replacing\n\n```\noption_value = Some(build());\noption_value.as_mut().unwrap()\n```\n\nwith\n\n```\noption_value.insert(build())\n```\n\nIt's also useful in contexts not requiring the mutability of the reference.\n\nHere's a typical cache example:\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => {\n\t    cache = Some(compute_cache_entry());\n\t    // unwrap is OK because we just filled the option\n\t    &cache.as_ref().unwrap().content\n\t}\n};\n```\n\nIt can be changed into\n\n```\nlet checked_cache = cache.as_ref().filter(|e| e.is_valid());\nlet content = match checked_cache {\n\tSome(e) => &e.content,\n\tNone => &cache.insert(compute_cache_entry()).content,\n};\n```\n\n*(edited: I removed `insert_with`)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c635b3a514159afd3a61064772ec17cc1c44c2", "html_url": "https://github.com/rust-lang/rust/commit/d7c635b3a514159afd3a61064772ec17cc1c44c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c635b3a514159afd3a61064772ec17cc1c44c2/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e756698dfc6219a0acf511a9ebb9e6063bdadc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e756698dfc6219a0acf511a9ebb9e6063bdadc2", "html_url": "https://github.com/rust-lang/rust/commit/8e756698dfc6219a0acf511a9ebb9e6063bdadc2"}, {"sha": "216d0fe36466ce9307a643a67afa41ebfb8c43dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/216d0fe36466ce9307a643a67afa41ebfb8c43dd", "html_url": "https://github.com/rust-lang/rust/commit/216d0fe36466ce9307a643a67afa41ebfb8c43dd"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "3daf26208b937b3336f3675661ae897e5070bc1b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d7c635b3a514159afd3a61064772ec17cc1c44c2/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c635b3a514159afd3a61064772ec17cc1c44c2/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=d7c635b3a514159afd3a61064772ec17cc1c44c2", "patch": "@@ -562,6 +562,36 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Inserts `value` into the option then returns a mutable reference to it.\n+    ///\n+    /// If the option already contains a value, the old value is dropped.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(option_insert)]\n+    ///\n+    /// let mut opt = None;\n+    /// let val = opt.insert(1);\n+    /// assert_eq!(*val, 1);\n+    /// assert_eq!(opt.unwrap(), 1);\n+    /// let val = opt.insert(2);\n+    /// assert_eq!(*val, 2);\n+    /// *val = 3;\n+    /// assert_eq!(opt.unwrap(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_insert\", reason = \"newly added\", issue = \"78271\")]\n+    pub fn insert(&mut self, value: T) -> &mut T {\n+        *self = Some(value);\n+\n+        match self {\n+            Some(v) => v,\n+            // SAFETY: the code above just filled the option\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -792,7 +822,7 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option if it is [`None`], then\n+    /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n@@ -811,12 +841,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, v: T) -> &mut T {\n-        self.get_or_insert_with(|| v)\n+    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n+        self.get_or_insert_with(|| value)\n     }\n \n-    /// Inserts a value computed from `f` into the option if it is [`None`], then\n-    /// returns a mutable reference to the contained value.\n+    /// Inserts a value computed from `f` into the option if it is [`None`],\n+    /// then returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///\n@@ -839,8 +869,8 @@ impl<T> Option<T> {\n             *self = Some(f());\n         }\n \n-        match *self {\n-            Some(ref mut v) => v,\n+        match self {\n+            Some(v) => v,\n             // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n             // variant in the code above.\n             None => unsafe { hint::unreachable_unchecked() },"}]}