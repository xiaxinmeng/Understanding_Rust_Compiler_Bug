{"sha": "9091584def3b566f24f8fbeac495e6dc87178be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTE1ODRkZWYzYjU2NmYyNGY4ZmJlYWM0OTVlNmRjODcxNzhiZTg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-26T16:14:40Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-26T16:14:40Z"}, "message": "some grammar corrections", "tree": {"sha": "07cbe3688e516120e8c04883294ac746e874d39f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07cbe3688e516120e8c04883294ac746e874d39f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9091584def3b566f24f8fbeac495e6dc87178be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9091584def3b566f24f8fbeac495e6dc87178be8", "html_url": "https://github.com/rust-lang/rust/commit/9091584def3b566f24f8fbeac495e6dc87178be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9091584def3b566f24f8fbeac495e6dc87178be8/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397ce8a1aedd0734cbf9b7dfb36ea18fbe6a5d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/397ce8a1aedd0734cbf9b7dfb36ea18fbe6a5d91", "html_url": "https://github.com/rust-lang/rust/commit/397ce8a1aedd0734cbf9b7dfb36ea18fbe6a5d91"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "37f301c5909286514e02654bc8074c08e15604b7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9091584def3b566f24f8fbeac495e6dc87178be8/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9091584def3b566f24f8fbeac495e6dc87178be8/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9091584def3b566f24f8fbeac495e6dc87178be8", "patch": "@@ -13,18 +13,19 @@\n //! Rust memory safety is based on this rule: Given an object `T`, it is only possible to\n //! have one of the following:\n //!\n-//! - Having several immutable references (`&T`) to the object (also know as Aliasing).\n-//! - Having one mutable reference (`&mut T`) to the object (also know as Mutability).\n+//! - Having several immutable references (`&T`) to the object (also known as **aliasing**).\n+//! - Having one mutable reference (`&mut T`) to the object (also known as **mutability**).\n //!\n //! This is enforced by the Rust compiler. However, there are situations where this rule is not\n //! flexible enough. Sometimes it is required to have multiple references to an object and yet\n //! mutate it.\n //!\n-//! Shareable mutable containers exist to permit mutability in the presence of aliasing in a\n-//! controlled manner. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n+//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n //! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n-//! `Sync`), if you need to do Aliasing and Mutation between multiple threads is possible to use\n-//! [`Mutex`](../../std/sync/struct.Mutex.html), [`RwLock`](../../std/sync/struct.RwLock.html) or\n+//! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n+//! use [`Mutex`](../../std/sync/struct.Mutex.html),\n+//! [`RwLock`](../../std/sync/struct.RwLock.html) or\n //! [`atomic`](../../core/sync/atomic/index.html) types.\n //!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e."}]}