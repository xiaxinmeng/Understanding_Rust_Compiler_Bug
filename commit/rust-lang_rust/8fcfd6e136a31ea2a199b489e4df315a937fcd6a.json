{"sha": "8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmY2ZkNmUxMzZhMzFlYTJhMTk5YjQ4OWU0ZGYzMTVhOTM3ZmNkNmE=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-27T00:56:45Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-27T12:25:06Z"}, "message": "Add missing const edge case", "tree": {"sha": "26b85dce43f0dc675d8b42a9c7484ebfb9a68c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b85dce43f0dc675d8b42a9c7484ebfb9a68c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "html_url": "https://github.com/rust-lang/rust/commit/8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0e554ee2c94e9b3865a8c2d24d720224512dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0e554ee2c94e9b3865a8c2d24d720224512dec", "html_url": "https://github.com/rust-lang/rust/commit/7b0e554ee2c94e9b3865a8c2d24d720224512dec"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "e7c3a366cc439235417c1926c35e6ac20fa9e2b1", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "patch": "@@ -267,6 +267,13 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 if let ty::Adt(def, _) = place_ty.kind() {\n                                     if def.variants.len() > 1 {\n                                         needs_to_be_read = true;\n+                                    } else if let Some(variant) = def.variants.iter().next() {\n+                                        // If the pat kind is a Path we want to check whether the\n+                                        // variant contains at least one field. If that's the case,\n+                                        // we want to borrow discr.\n+                                        if matches!(pat.kind, PatKind::Path(..)) && variant.fields.len() > 0 {\n+                                            needs_to_be_read = true;\n+                                        }\n                                     }\n                                 } else {\n                                     // If it is not ty::Adt, then it should be read"}, {"sha": "0a6d71c68ae84f7c660ed0f29bb106d53dc9d384", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88331.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.rs?ref=8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "patch": "@@ -0,0 +1,33 @@\n+// edition:2021\n+\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub struct Opcode(pub u8);\n+\n+impl Opcode {\n+    pub const OP1: Opcode = Opcode(0x1);\n+}\n+\n+pub fn example1(msg_type: Opcode) -> impl FnMut(&[u8]) {\n+    move |i| match msg_type {\n+    //~^ ERROR: non-exhaustive patterns: `Opcode(0_u8)` and `Opcode(2_u8..=u8::MAX)` not covered\n+        Opcode::OP1 => unimplemented!(),\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub struct Opcode2(Opcode);\n+\n+impl Opcode2 {\n+    pub const OP2: Opcode2 = Opcode2(Opcode(0x1));\n+}\n+\n+\n+pub fn example2(msg_type: Opcode2) -> impl FnMut(&[u8]) {\n+\n+    move |i| match msg_type {\n+    //~^ ERROR: non-exhaustive patterns: `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n+        Opcode2::OP2=> unimplemented!(),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f02d23464f168284574dd689d4cfc2666463250b", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88331.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fcfd6e136a31ea2a199b489e4df315a937fcd6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88331.stderr?ref=8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "patch": "@@ -0,0 +1,27 @@\n+error[E0004]: non-exhaustive patterns: `Opcode(0_u8)` and `Opcode(2_u8..=u8::MAX)` not covered\n+  --> $DIR/issue-88331.rs:11:20\n+   |\n+LL | pub struct Opcode(pub u8);\n+   | -------------------------- `Opcode` defined here\n+...\n+LL |     move |i| match msg_type {\n+   |                    ^^^^^^^^ patterns `Opcode(0_u8)` and `Opcode(2_u8..=u8::MAX)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Opcode`\n+\n+error[E0004]: non-exhaustive patterns: `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n+  --> $DIR/issue-88331.rs:27:20\n+   |\n+LL | pub struct Opcode2(Opcode);\n+   | --------------------------- `Opcode2` defined here\n+...\n+LL |     move |i| match msg_type {\n+   |                    ^^^^^^^^ patterns `Opcode2(Opcode(0_u8))` and `Opcode2(Opcode(2_u8..=u8::MAX))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Opcode2`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}]}