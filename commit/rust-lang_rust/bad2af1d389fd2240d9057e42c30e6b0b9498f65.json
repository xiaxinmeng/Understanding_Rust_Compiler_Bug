{"sha": "bad2af1d389fd2240d9057e42c30e6b0b9498f65", "node_id": "C_kwDOAAsO6NoAKGJhZDJhZjFkMzg5ZmQyMjQwZDkwNTdlNDJjMzBlNmIwYjk0OThmNjU", "commit": {"author": {"name": "Jynn Nelson", "email": "jyn.nelson@redjack.com", "date": "2023-03-31T10:59:13Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-12T10:27:26Z"}, "message": "Make rustdoc and rustc's help match exactly\n\nBefore, rustdoc was missing `-C passes=list` and the \"Available options\"\nheader.\n\nMaking these match allows testing that they match exactly.", "tree": {"sha": "51b8a1227e1c60147531e052503e81e1bb2bddee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b8a1227e1c60147531e052503e81e1bb2bddee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad2af1d389fd2240d9057e42c30e6b0b9498f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad2af1d389fd2240d9057e42c30e6b0b9498f65", "html_url": "https://github.com/rust-lang/rust/commit/bad2af1d389fd2240d9057e42c30e6b0b9498f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad2af1d389fd2240d9057e42c30e6b0b9498f65/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca6e98f133744d147f9c84e83482912ac840406", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6e98f133744d147f9c84e83482912ac840406", "html_url": "https://github.com/rust-lang/rust/commit/5ca6e98f133744d147f9c84e83482912ac840406"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "634d06da7f5dca41df34a13e16be7dc4af7e490a", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bad2af1d389fd2240d9057e42c30e6b0b9498f65/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad2af1d389fd2240d9057e42c30e6b0b9498f65/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=bad2af1d389fd2240d9057e42c30e6b0b9498f65", "patch": "@@ -37,7 +37,7 @@ use rustc_metadata::locator;\n use rustc_session::config::{nightly_options, CG_OPTIONS, Z_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::cstore::MetadataLoader;\n-use rustc_session::getopts;\n+use rustc_session::getopts::{self, Matches};\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, Session};\n use rustc_session::{early_error, early_error_no_abort, early_warn};\n@@ -956,6 +956,46 @@ Available lint options:\n     }\n }\n \n+/// Show help for flag categories shared between rustdoc and rustc.\n+///\n+/// Returns whether a help option was printed.\n+pub fn describe_flag_categories(matches: &Matches) -> bool {\n+    // Handle the special case of -Wall.\n+    let wall = matches.opt_strs(\"W\");\n+    if wall.iter().any(|x| *x == \"all\") {\n+        print_wall_help();\n+        rustc_errors::FatalError.raise();\n+    }\n+\n+    // Don't handle -W help here, because we might first load plugins.\n+    let debug_flags = matches.opt_strs(\"Z\");\n+    if debug_flags.iter().any(|x| *x == \"help\") {\n+        describe_debug_flags();\n+        return true;\n+    }\n+\n+    let cg_flags = matches.opt_strs(\"C\");\n+    if cg_flags.iter().any(|x| *x == \"help\") {\n+        describe_codegen_flags();\n+        return true;\n+    }\n+\n+    if cg_flags.iter().any(|x| *x == \"no-stack-check\") {\n+        early_warn(\n+            ErrorOutputType::default(),\n+            \"the --no-stack-check flag is deprecated and does nothing\",\n+        );\n+    }\n+\n+    if cg_flags.iter().any(|x| *x == \"passes=list\") {\n+        let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n+        get_codegen_backend(&None, backend_name).print_passes();\n+        return true;\n+    }\n+\n+    false\n+}\n+\n fn describe_debug_flags() {\n     println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::Z_OPTIONS);\n@@ -966,7 +1006,7 @@ fn describe_codegen_flags() {\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n-pub fn print_flag_list<T>(\n+fn print_flag_list<T>(\n     cmdline_opt: &str,\n     flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {\n@@ -1059,37 +1099,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n         return None;\n     }\n \n-    // Handle the special case of -Wall.\n-    let wall = matches.opt_strs(\"W\");\n-    if wall.iter().any(|x| *x == \"all\") {\n-        print_wall_help();\n-        rustc_errors::FatalError.raise();\n-    }\n-\n-    // Don't handle -W help here, because we might first load plugins.\n-    let debug_flags = matches.opt_strs(\"Z\");\n-    if debug_flags.iter().any(|x| *x == \"help\") {\n-        describe_debug_flags();\n-        return None;\n-    }\n-\n-    let cg_flags = matches.opt_strs(\"C\");\n-\n-    if cg_flags.iter().any(|x| *x == \"help\") {\n-        describe_codegen_flags();\n-        return None;\n-    }\n-\n-    if cg_flags.iter().any(|x| *x == \"no-stack-check\") {\n-        early_warn(\n-            ErrorOutputType::default(),\n-            \"the --no-stack-check flag is deprecated and does nothing\",\n-        );\n-    }\n-\n-    if cg_flags.iter().any(|x| *x == \"passes=list\") {\n-        let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n-        get_codegen_backend(&None, backend_name).print_passes();\n+    if describe_flag_categories(&matches) {\n         return None;\n     }\n "}, {"sha": "989fefd324347565aa3deb80740bef71c027c77b", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bad2af1d389fd2240d9057e42c30e6b0b9498f65/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad2af1d389fd2240d9057e42c30e6b0b9498f65/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=bad2af1d389fd2240d9057e42c30e6b0b9498f65", "patch": "@@ -6,7 +6,6 @@ use std::path::PathBuf;\n use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_driver::print_flag_list;\n use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n@@ -328,14 +327,7 @@ impl Options {\n             return Err(0);\n         }\n \n-        let z_flags = matches.opt_strs(\"Z\");\n-        if z_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-Z\", config::Z_OPTIONS);\n-            return Err(0);\n-        }\n-        let c_flags = matches.opt_strs(\"C\");\n-        if c_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-C\", config::CG_OPTIONS);\n+        if rustc_driver::describe_flag_categories(&matches) {\n             return Err(0);\n         }\n "}, {"sha": "daf10e5b88a835815c3225e6fab3b4c764bed910", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bad2af1d389fd2240d9057e42c30e6b0b9498f65/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad2af1d389fd2240d9057e42c30e6b0b9498f65/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=bad2af1d389fd2240d9057e42c30e6b0b9498f65", "patch": "@@ -398,6 +398,8 @@ fn run_test(\n     compiler.stdin(Stdio::piped());\n     compiler.stderr(Stdio::piped());\n \n+    debug!(\"compiler invocation for doctest: {:?}\", compiler);\n+\n     let mut child = compiler.spawn().expect(\"Failed to spawn rustc process\");\n     {\n         let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");"}]}