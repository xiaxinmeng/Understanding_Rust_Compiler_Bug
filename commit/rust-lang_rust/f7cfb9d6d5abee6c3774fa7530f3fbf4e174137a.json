{"sha": "f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2ZiOWQ2ZDVhYmVlNmMzNzc0ZmE3NTMwZjNmYmY0ZTE3NDEzN2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T16:02:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-17T12:34:58Z"}, "message": "Remove shl/shr special handling for 128bit ints\n\nCranelift now natively supports 128bit int shifting", "tree": {"sha": "bf6eaa3486611119b7c0bc2408170bdf1a260102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6eaa3486611119b7c0bc2408170bdf1a260102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a", "html_url": "https://github.com/rust-lang/rust/commit/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17eaf432b77f92b5033383a62a52b76be9ff196f", "url": "https://api.github.com/repos/rust-lang/rust/commits/17eaf432b77f92b5033383a62a52b76be9ff196f", "html_url": "https://github.com/rust-lang/rust/commit/17eaf432b77f92b5033383a62a52b76be9ff196f"}], "stats": {"total": 39, "additions": 1, "deletions": 38}, "files": [{"sha": "22d7f1da0b550b70e4046ae42715bc61a1a27503", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=f7cfb9d6d5abee6c3774fa7530f3fbf4e174137a", "patch": "@@ -19,9 +19,6 @@ pub(crate) fn maybe_codegen<'tcx>(\n         return None;\n     }\n \n-    let lhs_val = lhs.load_scalar(fx);\n-    let rhs_val = rhs.load_scalar(fx);\n-\n     let is_signed = type_sign(lhs.layout().ty);\n \n     match bin_op {\n@@ -128,40 +125,6 @@ pub(crate) fn maybe_codegen<'tcx>(\n             assert!(!checked);\n             None\n         }\n-        BinOp::Shl | BinOp::Shr => {\n-            let is_overflow = if checked {\n-                // rhs >= 128\n-\n-                // FIXME support non 128bit rhs\n-                /*let (rhs_lsb, rhs_msb) = fx.bcx.ins().isplit(rhs_val);\n-                let rhs_msb_gt_0 = fx.bcx.ins().icmp_imm(IntCC::NotEqual, rhs_msb, 0);\n-                let rhs_lsb_ge_128 = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThan, rhs_lsb, 127);\n-                let is_overflow = fx.bcx.ins().bor(rhs_msb_gt_0, rhs_lsb_ge_128);*/\n-                let is_overflow = fx.bcx.ins().bconst(types::B1, false);\n-\n-                Some(fx.bcx.ins().bint(types::I8, is_overflow))\n-            } else {\n-                None\n-            };\n-\n-            let truncated_rhs = clif_intcast(fx, rhs_val, types::I32, false);\n-            let val = match bin_op {\n-                BinOp::Shl => fx.bcx.ins().ishl(lhs_val, truncated_rhs),\n-                BinOp::Shr => {\n-                    if is_signed {\n-                        fx.bcx.ins().sshr(lhs_val, truncated_rhs)\n-                    } else {\n-                        fx.bcx.ins().ushr(lhs_val, truncated_rhs)\n-                    }\n-                }\n-                _ => unreachable!(),\n-            };\n-            if let Some(is_overflow) = is_overflow {\n-                let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n-                Some(CValue::by_val_pair(val, is_overflow, fx.layout_of(out_ty)))\n-            } else {\n-                Some(CValue::by_val(val, lhs.layout()))\n-            }\n-        }\n+        BinOp::Shl | BinOp::Shr => None,\n     }\n }"}]}