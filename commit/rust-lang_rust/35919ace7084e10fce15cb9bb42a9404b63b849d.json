{"sha": "35919ace7084e10fce15cb9bb42a9404b63b849d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OTE5YWNlNzA4NGUxMGZjZTE1Y2I5YmI0MmE5NDA0YjYzYjg0OWQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-20T17:06:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-18T20:09:10Z"}, "message": "Start generating AddressOf rvalues in MIR\n\n`hir::BorrowKind::Raw` borrows and casting a reference to a raw\npointer no longer do a reborrow followed by a cast. Instead we\ndereference and take the address.", "tree": {"sha": "5f47e21ee65f14b8a542b554a7f6b3787f3f5c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f47e21ee65f14b8a542b554a7f6b3787f3f5c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35919ace7084e10fce15cb9bb42a9404b63b849d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35919ace7084e10fce15cb9bb42a9404b63b849d", "html_url": "https://github.com/rust-lang/rust/commit/35919ace7084e10fce15cb9bb42a9404b63b849d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35919ace7084e10fce15cb9bb42a9404b63b849d/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a19fbf95d3b289f4c17aba910051cd9afd75887", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a19fbf95d3b289f4c17aba910051cd9afd75887", "html_url": "https://github.com/rust-lang/rust/commit/3a19fbf95d3b289f4c17aba910051cd9afd75887"}], "stats": {"total": 166, "additions": 61, "deletions": 105}, "files": [{"sha": "15c7c92d7db51c19365c0d0855b1c16eaecfef25", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -276,6 +276,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n+            | ExprKind::AddressOf { .. }\n             | ExprKind::Match { .. }\n             | ExprKind::Loop { .. }\n             | ExprKind::Block { .. }"}, {"sha": "24282a6617acfd3e3e2f52b4afe32c1e66ff7961", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -276,6 +276,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::NeverToAny { .. }\n             | ExprKind::Use { .. }\n             | ExprKind::Borrow { .. }\n+            | ExprKind::AddressOf { .. }\n             | ExprKind::Adt { .. }\n             | ExprKind::Loop { .. }\n             | ExprKind::LogicalOp { .. }"}, {"sha": "4d0039b2e8cecae15eba8afc49a74fff5fb9911e", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -49,6 +49,7 @@ impl Category {\n             | ExprKind::Use { .. }\n             | ExprKind::Adt { .. }\n             | ExprKind::Borrow { .. }\n+            | ExprKind::AddressOf { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }"}, {"sha": "6b33e8433f673bee3c470ae9cb5ce616f599e9ce", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -3,6 +3,7 @@\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n+use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_data_structures::fx::FxHashMap;\n@@ -295,6 +296,23 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.push_assign(block, source_info, destination, borrow);\n                 block.unit()\n             }\n+            ExprKind::AddressOf {\n+                mutability,\n+                arg,\n+            } => {\n+                let address_of = match mutability {\n+                    hir::Mutability::Immutable => Rvalue::AddressOf(\n+                        Mutability::Not,\n+                        unpack!(block = this.as_read_only_place(block, arg)),\n+                    ),\n+                    hir::Mutability::Mutable => Rvalue::AddressOf(\n+                        Mutability::Mut,\n+                        unpack!(block = this.as_place(block, arg)),\n+                    ),\n+                };\n+                this.cfg.push_assign(block, source_info, destination, address_of);\n+                block.unit()\n+            }\n             ExprKind::Adt {\n                 adt_def,\n                 variant_index,"}, {"sha": "6cbc25aa7356ece89ed836026447bc65241e2244", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 74, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -137,8 +137,11 @@ fn apply_adjustment<'a, 'tcx>(\n                 arg: expr.to_ref(),\n             }\n         }\n-        Adjust::Borrow(AutoBorrow::RawPtr(mutbl)) => {\n-            raw_ref_shim(cx, expr.to_ref(), adjustment.target, mutbl, span, temp_lifetime)\n+        Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {\n+            ExprKind::AddressOf {\n+                mutability,\n+                arg: expr.to_ref(),\n+            }\n         }\n     };\n \n@@ -262,17 +265,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             }\n         }\n \n-        hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutbl, ref arg) => {\n-            cx.tcx.sess\n-                .struct_span_err(\n-                    expr.span,\n-                    \"raw borrows are not yet implemented\"\n-                )\n-                .note(\"for more information, see https://github.com/rust-lang/rust/issues/64490\")\n-                .emit();\n-\n-            // Lower to an approximation to avoid further errors.\n-            raw_ref_shim(cx, arg.to_ref(), expr_ty, mutbl, expr.span, temp_lifetime)\n+        hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {\n+            ExprKind::AddressOf {\n+                mutability,\n+                arg: arg.to_ref(),\n+            }\n         }\n \n         hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: &blk },\n@@ -1082,67 +1079,6 @@ fn convert_var(\n }\n \n \n-/// Fake `&raw [mut|const] expr` using a borrow and a cast until `AddressOf`\n-/// exists in MIR.\n-fn raw_ref_shim<'tcx>(\n-    cx: &mut Cx<'_, 'tcx>,\n-    arg: ExprRef<'tcx>,\n-    ty: Ty<'tcx>,\n-    mutbl: hir::Mutability,\n-    span: Span,\n-    temp_lifetime: Option<region::Scope>,\n-) -> ExprKind<'tcx> {\n-    let arg_tm = if let ty::RawPtr(type_mutbl) = ty.kind {\n-        type_mutbl\n-    } else {\n-        bug!(\"raw_ref_shim called with non-raw pointer type\");\n-    };\n-    // Convert this to a suitable `&foo` and\n-    // then an unsafe coercion.\n-    let borrow_expr = Expr {\n-        temp_lifetime,\n-        ty: cx.tcx.mk_ref(cx.tcx.lifetimes.re_erased, arg_tm),\n-        span,\n-        kind: ExprKind::Borrow {\n-            borrow_kind: mutbl.to_borrow_kind(),\n-            arg,\n-        },\n-    };\n-    let cast_expr = Expr {\n-        temp_lifetime,\n-        ty,\n-        span,\n-        kind: ExprKind::Cast { source: borrow_expr.to_ref() }\n-    };\n-\n-    // To ensure that both implicit and explicit coercions are\n-    // handled the same way, we insert an extra layer of indirection here.\n-    // For explicit casts (e.g., 'foo as *const T'), the source of the 'Use'\n-    // will be an ExprKind::Hair with the appropriate cast expression. Here,\n-    // we make our Use source the generated Cast from the original coercion.\n-    //\n-    // In both cases, this outer 'Use' ensures that the inner 'Cast' is handled by\n-    // as_operand, not by as_rvalue - causing the cast result to be stored in a temporary.\n-    // Ordinary, this is identical to using the cast directly as an rvalue. However, if the\n-    // source of the cast was previously borrowed as mutable, storing the cast in a\n-    // temporary gives the source a chance to expire before the cast is used. For\n-    // structs with a self-referential *mut ptr, this allows assignment to work as\n-    // expected.\n-    //\n-    // For example, consider the type 'struct Foo { field: *mut Foo }',\n-    // The method 'fn bar(&mut self) { self.field = self }'\n-    // triggers a coercion from '&mut self' to '*mut self'. In order\n-    // for the assignment to be valid, the implicit borrow\n-    // of 'self' involved in the coercion needs to end before the local\n-    // containing the '*mut T' is assigned to 'self.field' - otherwise,\n-    // we end up trying to assign to 'self.field' while we have another mutable borrow\n-    // active.\n-    //\n-    // We only need to worry about this kind of thing for coercions from refs to ptrs,\n-    // since they get rid of a borrow implicitly.\n-    ExprKind::Use { source: cast_expr.to_ref() }\n-}\n-\n fn bin_op(op: hir::BinOpKind) -> BinOp {\n     match op {\n         hir::BinOpKind::Add => BinOp::Add,"}, {"sha": "46e0d2a17b32db539a4dbb8c20d74e182489e8f4", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -212,6 +212,11 @@ pub enum ExprKind<'tcx> {\n         borrow_kind: BorrowKind,\n         arg: ExprRef<'tcx>,\n     },\n+    /// A `&raw [const|mut] $place_expr` raw borrow resulting in type `*[const|mut] T`.\n+    AddressOf {\n+        mutability: hir::Mutability,\n+        arg: ExprRef<'tcx>,\n+    },\n     Break {\n         label: region::Scope,\n         value: Option<ExprRef<'tcx>>,"}, {"sha": "096f98bade25ae255c4fc6c7db4c6a2dc57e6005", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -18,24 +18,23 @@ fn main() {\n // START rustc.main.EraseRegions.after.mir\n //     bb0: {\n //         ...\n-//         _5 = &mut _2;\n-//         _4 = &mut (*_5);\n-//         _3 = move _4 as *mut usize (Misc);\n+//         _4 = &mut _2;\n+//         _3 = &raw mut (*_4);\n //         ...\n-//         _7 = _3;\n-//         _6 = const foo(move _7) -> bb1;\n+//         _6 = _3;\n+//         _5 = const foo(move _6) -> bb1;\n //     }\n //\n //     bb1: {\n //         ...\n-//         _8 = _2;\n-//         _9 = Len(_1);\n-//         _10 = Lt(_8, _9);\n-//         assert(move _10, \"index out of bounds: the len is move _9 but the index is _8\") -> bb2;\n+//         _7 = _2;\n+//         _8 = Len(_1);\n+//         _9 = Lt(_7, _8);\n+//         assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2;\n //     }\n //\n //     bb2: {\n-//         _1[_8] = move _6;\n+//         _1[_7] = move _5;\n //         ...\n //         return;\n //     }"}, {"sha": "3c8c0ff449345b3ea0440bca6a4d7e36be7a69a8", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -11,25 +11,21 @@ fn main() {\n // START rustc.main.ConstProp.before.mir\n //  bb0: {\n //      ...\n-//      _3 = _4;\n-//      _2 = move _3 as *const i32 (Misc);\n-//      ...\n+//      _2 = &raw const (*_3);\n //      _1 = move _2 as usize (Misc);\n //      ...\n-//      _6 = _1;\n-//      _5 = const read(move _6) -> bb1;\n+//      _5 = _1;\n+//      _4 = const read(move _5) -> bb1;\n //  }\n // END rustc.main.ConstProp.before.mir\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _4 = const main::FOO;\n-//      _3 = _4;\n-//      _2 = move _3 as *const i32 (Misc);\n-//      ...\n+//      _3 = const main::FOO;\n+//      _2 = &raw const (*_3);\n //      _1 = move _2 as usize (Misc);\n //      ...\n-//      _6 = _1;\n-//      _5 = const read(move _6) -> bb1;\n+//      _5 = _1;\n+//      _4 = const read(move _5) -> bb1;\n //  }\n // END rustc.main.ConstProp.after.mir"}, {"sha": "ccecaeac96b83daa95d6305b28d58cd8bc408062", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -82,18 +82,16 @@ fn main() {\n //         _10 = move _8;\n //         Retag(_10);\n //         ...\n-//         _13 = &mut (*_10);\n-//         Retag(_13);\n-//         _12 = move _13 as *mut i32 (Misc);\n+//         _12 = &raw mut (*_10);\n //         Retag([raw] _12);\n //         ...\n-//         _16 = move _17(move _18) -> bb5;\n+//         _15 = move _16(move _17) -> bb5;\n //     }\n //\n //     bb5: {\n-//         Retag(_16);\n+//         Retag(_15);\n //         ...\n-//         _20 = const Test::foo_shr(move _21, move _23) -> [return: bb6, unwind: bb7];\n+//         _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7];\n //     }\n //\n //     ..."}, {"sha": "1aed218aeb473c2bef1345b6e08c827f3502fcef", "filename": "src/test/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.rs?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n                              //~| HELP compare with zero instead\n                              //~| SUGGESTION (1 + 2) != 0\n-    let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n+    let v = \"hello\" as bool; //~ ERROR casting `&'static str` as `bool` is invalid\n }"}, {"sha": "15d94ab69d88c707016c314e0286620ff5855a94", "filename": "src/test/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35919ace7084e10fce15cb9bb42a9404b63b849d/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=35919ace7084e10fce15cb9bb42a9404b63b849d", "patch": "@@ -10,12 +10,13 @@ error[E0054]: cannot cast as `bool`\n LL |     let t = (1 + 2) as bool;\n    |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n \n-error[E0054]: cannot cast as `bool`\n+error[E0606]: casting `&'static str` as `bool` is invalid\n   --> $DIR/cast-as-bool.rs:8:13\n    |\n LL |     let v = \"hello\" as bool;\n-   |             ^^^^^^^^^^^^^^^ unsupported cast\n+   |             ^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0054`.\n+Some errors have detailed explanations: E0054, E0606.\n+For more information about an error, try `rustc --explain E0054`."}]}