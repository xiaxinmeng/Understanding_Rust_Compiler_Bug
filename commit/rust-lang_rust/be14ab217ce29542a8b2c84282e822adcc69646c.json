{"sha": "be14ab217ce29542a8b2c84282e822adcc69646c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTRhYjIxN2NlMjk1NDJhOGIyYzg0MjgyZTgyMmFkY2M2OTY0NmM=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-22T17:38:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:27Z"}, "message": "better test, avoid duplicated events", "tree": {"sha": "99fd4d871d7b14eca6604cab9f6648584d23b6f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99fd4d871d7b14eca6604cab9f6648584d23b6f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be14ab217ce29542a8b2c84282e822adcc69646c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be14ab217ce29542a8b2c84282e822adcc69646c", "html_url": "https://github.com/rust-lang/rust/commit/be14ab217ce29542a8b2c84282e822adcc69646c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be14ab217ce29542a8b2c84282e822adcc69646c/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a086508524bed87bb15113437e9c2b1e1be4c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a086508524bed87bb15113437e9c2b1e1be4c42", "html_url": "https://github.com/rust-lang/rust/commit/0a086508524bed87bb15113437e9c2b1e1be4c42"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "335f4f2e1f7e29e6e511a2866ba976b5724d759f", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=be14ab217ce29542a8b2c84282e822adcc69646c", "patch": "@@ -55,7 +55,12 @@ pub enum TaskResult {\n \n impl fmt::Debug for TaskResult {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.write_str(\"TaskResult { ... }\")\n+        match self {\n+            TaskResult::AddRoot(..) => f.write_str(\"TaskResult::AddRoot(..)\"),\n+            TaskResult::HandleChange(c) => write!(f, \"TaskResult::HandleChange({:?})\", c),\n+            TaskResult::LoadChange(c) => write!(f, \"TaskResult::LoadChange({:?})\", c),\n+            TaskResult::NoOp => f.write_str(\"TaskResult::NoOp\"),\n+        }\n     }\n }\n "}, {"sha": "68bb6b6925d9d4c9adf4c6bacae2cd9c2cb4b97c", "filename": "crates/ra_vfs/src/io/watcher.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs?ref=be14ab217ce29542a8b2c84282e822adcc69646c", "patch": "@@ -100,16 +100,18 @@ impl Watcher {\n                                 log::warn!(\"could not watch \\\"{}\\\": {}\", entry.path().display(), e)\n                             }\n                         }\n-                    }\n-                    if emit_for_contents && entry.depth() > 0 {\n-                        // emit as create because we haven't seen it yet\n-                        if let Err(e) =\n-                            self.sender\n-                                .send(io::Task::HandleChange(WatcherChange::Create(\n-                                    entry.path().to_path_buf(),\n-                                )))\n-                        {\n-                            log::warn!(\"watcher error: {}\", e)\n+                    } else {\n+                        if emit_for_contents && entry.depth() > 0 {\n+                            // emit only for files otherwise we will cause watch_recursive to be called again with a dir that we are already watching\n+                            // emit as create because we haven't seen it yet\n+                            if let Err(e) =\n+                                self.sender\n+                                    .send(io::Task::HandleChange(WatcherChange::Create(\n+                                        entry.path().to_path_buf(),\n+                                    )))\n+                            {\n+                                log::warn!(\"watcher error: {}\", e)\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "d3271570a9701bd5bbdf1ee26728e142f50030cd", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be14ab217ce29542a8b2c84282e822adcc69646c/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=be14ab217ce29542a8b2c84282e822adcc69646c", "patch": "@@ -1,12 +1,13 @@\n use std::{collections::HashSet, fs};\n \n-// use flexi_logger::Logger;\n+use flexi_logger::Logger;\n use ra_vfs::{Vfs, VfsChange};\n use tempfile::tempdir;\n \n fn process_tasks(vfs: &mut Vfs, num_tasks: u32) {\n     for _ in 0..num_tasks {\n         let task = vfs.task_receiver().recv().unwrap();\n+        log::debug!(\"{:?}\", task);\n         vfs.handle_task(task);\n     }\n }\n@@ -25,7 +26,7 @@ macro_rules! assert_match {\n \n #[test]\n fn test_vfs_works() -> std::io::Result<()> {\n-    // Logger::with_str(\"vfs=debug,ra_vfs=debug\").start().unwrap();\n+    Logger::with_str(\"vfs=debug,ra_vfs=debug\").start().unwrap();\n \n     let files = [\n         (\"a/foo.rs\", \"hello\"),\n@@ -114,21 +115,21 @@ fn test_vfs_works() -> std::io::Result<()> {\n         assert_eq!(path, \"spam.rs\")\n     );\n \n-    fs::create_dir_all(dir.path().join(\"a/c\")).unwrap();\n-    fs::write(dir.path().join(\"a/c/new.rs\"), \"new hello\").unwrap();\n+    fs::create_dir_all(dir.path().join(\"a/sub1/sub2\")).unwrap();\n+    fs::write(dir.path().join(\"a/sub1/sub2/new.rs\"), \"new hello\").unwrap();\n     process_tasks(&mut vfs, 4);\n     assert_match!(\n         vfs.commit_changes().as_slice(),\n         [VfsChange::AddFile { text, path, .. }],\n         {\n             assert_eq!(text.as_str(), \"new hello\");\n-            assert_eq!(path, \"c/new.rs\");\n+            assert_eq!(path, \"sub1/sub2/new.rs\");\n         }\n     );\n \n     fs::rename(\n-        &dir.path().join(\"a/c/new.rs\"),\n-        &dir.path().join(\"a/c/new1.rs\"),\n+        &dir.path().join(\"a/sub1/sub2/new.rs\"),\n+        &dir.path().join(\"a/sub1/sub2/new1.rs\"),\n     )\n     .unwrap();\n     process_tasks(&mut vfs, 4);\n@@ -142,18 +143,18 @@ fn test_vfs_works() -> std::io::Result<()> {\n             ..\n         }],\n         {\n-            assert_eq!(removed_path, \"c/new.rs\");\n-            assert_eq!(added_path, \"c/new1.rs\");\n+            assert_eq!(removed_path, \"sub1/sub2/new.rs\");\n+            assert_eq!(added_path, \"sub1/sub2/new1.rs\");\n             assert_eq!(text.as_str(), \"new hello\");\n         }\n     );\n \n-    fs::remove_file(&dir.path().join(\"a/c/new1.rs\")).unwrap();\n+    fs::remove_file(&dir.path().join(\"a/sub1/sub2/new1.rs\")).unwrap();\n     process_tasks(&mut vfs, 2);\n     assert_match!(\n         vfs.commit_changes().as_slice(),\n         [VfsChange::RemoveFile { path, .. }],\n-        assert_eq!(path, \"c/new1.rs\")\n+        assert_eq!(path, \"sub1/sub2/new1.rs\")\n     );\n \n     fs::create_dir_all(dir.path().join(\"a/target\")).unwrap();"}]}