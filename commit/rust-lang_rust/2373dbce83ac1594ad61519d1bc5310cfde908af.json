{"sha": "2373dbce83ac1594ad61519d1bc5310cfde908af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNzNkYmNlODNhYzE1OTRhZDYxNTE5ZDFiYzUzMTBjZmRlOTA4YWY=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T07:52:19Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T07:52:19Z"}, "message": "Use intra-doc links for AtomicI32::*", "tree": {"sha": "6362e8f5a413760482c7468b897b75b19f76b64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6362e8f5a413760482c7468b897b75b19f76b64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2373dbce83ac1594ad61519d1bc5310cfde908af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2373dbce83ac1594ad61519d1bc5310cfde908af", "html_url": "https://github.com/rust-lang/rust/commit/2373dbce83ac1594ad61519d1bc5310cfde908af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2373dbce83ac1594ad61519d1bc5310cfde908af/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076ae25714b3e045742b4b3d6ec14ea894fb210d", "url": "https://api.github.com/repos/rust-lang/rust/commits/076ae25714b3e045742b4b3d6ec14ea894fb210d", "html_url": "https://github.com/rust-lang/rust/commit/076ae25714b3e045742b4b3d6ec14ea894fb210d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "909d8c11b7337a0d15008a1362cd6f62de162b4a", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2373dbce83ac1594ad61519d1bc5310cfde908af/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2373dbce83ac1594ad61519d1bc5310cfde908af/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=2373dbce83ac1594ad61519d1bc5310cfde908af", "patch": "@@ -619,39 +619,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n+    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n     pub fn atomic_max<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n+    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n     pub fn atomic_max_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n+    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n     pub fn atomic_max_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n+    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n     pub fn atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n+    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n     pub fn atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using a signed comparison.\n@@ -660,39 +660,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n+    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n     pub fn atomic_min<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n+    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n     pub fn atomic_min_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n+    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n     pub fn atomic_min_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n+    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n     pub fn atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n+    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n     pub fn atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using an unsigned comparison."}]}