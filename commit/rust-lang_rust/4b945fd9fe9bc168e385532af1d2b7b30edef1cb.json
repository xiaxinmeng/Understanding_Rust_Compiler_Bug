{"sha": "4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTQ1ZmQ5ZmU5YmMxNjhlMzg1NTMyYWYxZDJiN2IzMGVkZWYxY2I=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T17:32:34Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T21:10:16Z"}, "message": "Revise `Drop` docs\n\nPart of #29365.\n* Removed \"stuttering\" in summary sentence.\n* Copy-edited the explanaition sections\n* Added sub-headings in Examples section to aid linking\n* Actually implement `Drop` in the `PrintOnDrop` exampl\n* Add link to Drop chapter in TRPL\n* Changed `drop` summary sentence to be in 3rd person singular\n* Added missing link to `panic!`", "tree": {"sha": "c47ec8ffc9e5c2bd77840667ec930210e0ff5bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c47ec8ffc9e5c2bd77840667ec930210e0ff5bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "html_url": "https://github.com/rust-lang/rust/commit/4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b945fd9fe9bc168e385532af1d2b7b30edef1cb/comments", "author": null, "committer": null, "parents": [{"sha": "5990be523d00edaf69cfd6d3e28d9fb78eb67bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5990be523d00edaf69cfd6d3e28d9fb78eb67bcd", "html_url": "https://github.com/rust-lang/rust/commit/5990be523d00edaf69cfd6d3e28d9fb78eb67bcd"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "70ab7b2f3b7ec28aca515533266593be41af72ba", "filename": "src/libcore/ops/drop.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4b945fd9fe9bc168e385532af1d2b7b30edef1cb/src%2Flibcore%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b945fd9fe9bc168e385532af1d2b7b30edef1cb/src%2Flibcore%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fdrop.rs?ref=4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "patch": "@@ -8,20 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// The `Drop` trait is used to run some code when a value goes out of scope.\n+/// Used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n ///\n-/// When a value goes out of scope, if it implements this trait, it will have\n-/// its `drop` method called. Then any fields the value contains will also\n+/// When a value goes out of scope, it will have its `drop` method called if\n+/// its type implements `Drop`. Then, any fields the value contains will also\n /// be dropped recursively.\n ///\n-/// Because of the recursive dropping, you do not need to implement this trait\n+/// Because of this recursive dropping, you do not need to implement this trait\n /// unless your type needs its own destructor logic.\n ///\n+/// Refer to [the chapter on `Drop` in *The Rust Programming Language*][book]\n+/// for some more elaboration.\n+///\n+/// [book]: ../../book/second-edition/ch15-03-drop.html\n+///\n /// # Examples\n ///\n-/// A trivial implementation of `Drop`. The `drop` method is called when `_x`\n-/// goes out of scope, and therefore `main` prints `Dropping!`.\n+/// ## Implementing `Drop`\n+///\n+/// The `drop` method is called when `_x` goes out of scope, and therefore\n+/// `main` prints `Dropping!`.\n ///\n /// ```\n /// struct HasDrop;\n@@ -37,9 +44,11 @@\n /// }\n /// ```\n ///\n-/// Showing the recursive nature of `Drop`. When `outer` goes out of scope, the\n-/// `drop` method will be called first for `Outer`, then for `Inner`. Therefore\n-/// `main` prints `Dropping Outer!` and then `Dropping Inner!`.\n+/// ## Dropping is done recursively\n+///\n+/// When `outer` goes out of scope, the `drop` method will be called first for\n+/// `Outer`, then for `Inner`. Therefore, `main` prints `Dropping Outer!` and\n+/// then `Dropping Inner!`.\n ///\n /// ```\n /// struct Inner;\n@@ -62,12 +71,20 @@\n /// }\n /// ```\n ///\n-/// Because variables are dropped in the reverse order they are declared,\n-/// `main` will print `Declared second!` and then `Declared first!`.\n+/// ## Variables are dropped in reverse order of declaration\n+///\n+/// `_first` is declared first and `_second` is declared second, so `main` will\n+/// print `Declared second!` and then `Declared first!`.\n ///\n /// ```\n /// struct PrintOnDrop(&'static str);\n ///\n+/// impl Drop for PrintOnDrop {\n+///     fn drop(&mut self) {\n+///         println!(\"{}\", self.0);\n+///     }\n+/// }\n+///\n /// fn main() {\n ///     let _first = PrintOnDrop(\"Declared first!\");\n ///     let _second = PrintOnDrop(\"Declared second!\");\n@@ -76,24 +93,25 @@\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n-    /// A method called when the value goes out of scope.\n+    /// Executes the destructor for this type.\n+    ///\n+    /// This method is called implilcitly when the value goes out of scope,\n+    /// and cannot be called explicitly (this is compiler error [E0040]).\n+    /// However, the [`std::mem::drop`] function in the prelude can be\n+    /// used to call the argument's `Drop` implementation.\n     ///\n     /// When this method has been called, `self` has not yet been deallocated.\n-    /// If it were, `self` would be a dangling reference.\n+    /// That only happens after the method is over.\n+    /// If this wasn't the case, `self` would be a dangling reference.\n     ///\n-    /// After this function is over, the memory of `self` will be deallocated.\n+    /// # Panics\n     ///\n-    /// This function cannot be called explicitly. This is compiler error\n-    /// [E0040]. However, the [`std::mem::drop`] function in the prelude can be\n-    /// used to call the argument's `Drop` implementation.\n+    /// Given that a [`panic!`] will call `drop` as it unwinds, any [`panic!`]\n+    /// in a `drop` implementation will likely abort.\n     ///\n     /// [E0040]: ../../error-index.html#E0040\n+    /// [`panic!`]: ../macro.panic.html\n     /// [`std::mem::drop`]: ../../std/mem/fn.drop.html\n-    ///\n-    /// # Panics\n-    ///\n-    /// Given that a `panic!` will call `drop()` as it unwinds, any `panic!` in\n-    /// a `drop()` implementation will likely abort.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn drop(&mut self);\n }"}]}