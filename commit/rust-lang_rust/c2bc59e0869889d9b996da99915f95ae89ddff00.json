{"sha": "c2bc59e0869889d9b996da99915f95ae89ddff00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmM1OWUwODY5ODg5ZDliOTk2ZGE5OTkxNWY5NWFlODlkZGZmMDA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-26T19:58:50Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-27T20:31:45Z"}, "message": "repr: print integer/float suffixes", "tree": {"sha": "8ce22452ab85928b183bcd10ac36d2a37c9d15dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce22452ab85928b183bcd10ac36d2a37c9d15dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bc59e0869889d9b996da99915f95ae89ddff00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc59e0869889d9b996da99915f95ae89ddff00", "html_url": "https://github.com/rust-lang/rust/commit/c2bc59e0869889d9b996da99915f95ae89ddff00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc59e0869889d9b996da99915f95ae89ddff00/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20567a0c3c306853180e428f83302add09b5cb8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/20567a0c3c306853180e428f83302add09b5cb8c", "html_url": "https://github.com/rust-lang/rust/commit/20567a0c3c306853180e428f83302add09b5cb8c"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "2a3b5d8c963b225d1352779e467288d24ee98949", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -3476,18 +3476,18 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n         terr_ptr_mutability => ~\"pointers differ in mutability\",\n         terr_ref_mutability => ~\"references differ in mutability\",\n         terr_ty_param_size(values) => {\n-            fmt!(\"expected a type with %? type params \\\n-                  but found one with %? type params\",\n+            fmt!(\"expected a type with %u type params \\\n+                  but found one with %u type params\",\n                  values.expected, values.found)\n         }\n         terr_tuple_size(values) => {\n-            fmt!(\"expected a tuple with %? elements \\\n-                  but found one with %? elements\",\n+            fmt!(\"expected a tuple with %u elements \\\n+                  but found one with %u elements\",\n                  values.expected, values.found)\n         }\n         terr_record_size(values) => {\n-            fmt!(\"expected a record with %? fields \\\n-                  but found one with %? fields\",\n+            fmt!(\"expected a record with %u fields \\\n+                  but found one with %u fields\",\n                  values.expected, values.found)\n         }\n         terr_record_mutability => {"}, {"sha": "fa9d7b3b9790ec9c6bccd572fe7c0ad30be001ec", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -75,35 +75,50 @@ impl Repr for bool {\n     }\n }\n \n-macro_rules! int_repr(($ty:ident) => (impl Repr for $ty {\n+impl Repr for int {\n+    fn write_repr(&self, writer: @Writer) {\n+        do ::int::to_str_bytes(*self, 10u) |bits| {\n+            writer.write(bits);\n+        }\n+    }\n+}\n+\n+macro_rules! int_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n     fn write_repr(&self, writer: @Writer) {\n         do ::$ty::to_str_bytes(*self, 10u) |bits| {\n             writer.write(bits);\n+            writer.write(bytes!($suffix));\n         }\n     }\n }))\n \n-int_repr!(int)\n-int_repr!(i8)\n-int_repr!(i16)\n-int_repr!(i32)\n-int_repr!(i64)\n-int_repr!(uint)\n-int_repr!(u8)\n-int_repr!(u16)\n-int_repr!(u32)\n-int_repr!(u64)\n-\n-macro_rules! num_repr(($ty:ident) => (impl Repr for $ty {\n+int_repr!(i8, \"i8\")\n+int_repr!(i16, \"i16\")\n+int_repr!(i32, \"i32\")\n+int_repr!(i64, \"i64\")\n+int_repr!(uint, \"u\")\n+int_repr!(u8, \"u8\")\n+int_repr!(u16, \"u16\")\n+int_repr!(u32, \"u32\")\n+int_repr!(u64, \"u64\")\n+\n+impl Repr for float {\n+    fn write_repr(&self, writer: @Writer) {\n+        let s = self.to_str();\n+        writer.write(s.as_bytes());\n+    }\n+}\n+\n+macro_rules! num_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n     fn write_repr(&self, writer: @Writer) {\n         let s = self.to_str();\n         writer.write(s.as_bytes());\n+        writer.write(bytes!($suffix));\n     }\n }))\n \n-num_repr!(float)\n-num_repr!(f32)\n-num_repr!(f64)\n+num_repr!(f32, \"f32\")\n+num_repr!(f64, \"f64\")\n \n // New implementation using reflect::MovePtr\n \n@@ -602,7 +617,7 @@ fn test_repr() {\n     exact_test(&(@[1,2,3,4,5,6,7,8]),\n                \"@[1, 2, 3, 4, 5, 6, 7, 8]\");\n     exact_test(&(@[1u8,2u8,3u8,4u8]),\n-               \"@[1, 2, 3, 4]\");\n+               \"@[1u8, 2u8, 3u8, 4u8]\");\n     exact_test(&(@[\"hi\", \"there\"]),\n                \"@[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(~[\"hi\", \"there\"]),\n@@ -615,14 +630,14 @@ fn test_repr() {\n                \"@{a: 10, b: 1.234}\");\n     exact_test(&(~P{a:10, b:1.234}),\n                \"~{a: 10, b: 1.234}\");\n-    exact_test(&(10_u8, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u16, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u32, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n-    exact_test(&(10_u64, ~\"hello\"),\n-               \"(10, ~\\\"hello\\\")\");\n+    exact_test(&(10u8, ~\"hello\"),\n+               \"(10u8, ~\\\"hello\\\")\");\n+    exact_test(&(10u16, ~\"hello\"),\n+               \"(10u16, ~\\\"hello\\\")\");\n+    exact_test(&(10u32, ~\"hello\"),\n+               \"(10u32, ~\\\"hello\\\")\");\n+    exact_test(&(10u64, ~\"hello\"),\n+               \"(10u64, ~\\\"hello\\\")\");\n \n     struct Foo;\n     exact_test(&(~[Foo, Foo, Foo]), \"~[{}, {}, {}]\");"}, {"sha": "eb67c45ed0015f136583ea1a9e6d44ce763de8b4", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     let arr = [1,2,3];\n     let struc = Struc {a: 13u8, b: arr, c: 42};\n     let s = sys::log_str(&struc);\n-    assert_eq!(s, ~\"{a: 13, b: [1, 2, 3], c: 42}\");\n+    assert_eq!(s, ~\"{a: 13u8, b: [1, 2, 3], c: 42}\");\n }"}, {"sha": "ec048d13a181aed1ff65e85c6d43e64def44bd46", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -25,7 +25,7 @@ fn check_log<T>(exp: ~str, v: T) {\n \n pub fn main() {\n     let x = list::from_vec([a(22u), b(~\"hi\")]);\n-    let exp = ~\"@Cons(a(22), @Cons(b(~\\\"hi\\\"), @Nil))\";\n+    let exp = ~\"@Cons(a(22u), @Cons(b(~\\\"hi\\\"), @Nil))\";\n     let act = fmt!(\"%?\", x);\n     assert!(act == exp);\n     check_log(exp, x);"}, {"sha": "4727e61b1fd0ffaeeb8551a7d7df2506f27d7df7", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -19,7 +19,7 @@ enum bar {\n }\n \n pub fn main() {\n-    assert_eq!(~\"a(22)\", fmt!(\"%?\", a(22u)));\n+    assert_eq!(~\"a(22u)\", fmt!(\"%?\", a(22u)));\n     assert_eq!(~\"b(~\\\"hi\\\")\", fmt!(\"%?\", b(~\"hi\")));\n     assert_eq!(~\"c\", fmt!(\"%?\", c));\n     assert_eq!(~\"d\", fmt!(\"%?\", d));"}, {"sha": "11aa2b852045f1e1b2ded40472fa3bb3a2d5a649", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -64,6 +64,6 @@ pub fn main() {\n         // because `inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::size());\n \n-        assert_eq!(y, ~\"{c8: 22, t: {c64: 44}}\");\n+        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u32}}\");\n     }\n }"}, {"sha": "cca2adc0873dba54d6730216ccb130779a5b44e0", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -86,6 +86,6 @@ pub fn main() {\n         // because `Inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::m::size());\n \n-        assert_eq!(y, ~\"{c8: 22, t: {c64: 44}}\");\n+        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u64}}\");\n     }\n }"}, {"sha": "cb93cea28956b7e7121d46540215a2acc055f67a", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bc59e0869889d9b996da99915f95ae89ddff00/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=c2bc59e0869889d9b996da99915f95ae89ddff00", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n     let y = fmt!(\"%?\", x);\n     info!(\"y = %s\", y);\n-    assert_eq!(y, ~\"{c8: 22, t: a_tag(44)}\");\n+    assert_eq!(y, ~\"{c8: 22u8, t: a_tag(44u64)}\");\n }"}]}