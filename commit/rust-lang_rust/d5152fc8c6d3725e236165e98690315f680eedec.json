{"sha": "d5152fc8c6d3725e236165e98690315f680eedec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MTUyZmM4YzZkMzcyNWUyMzYxNjVlOTg2OTAzMTVmNjgwZWVkZWM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-18T06:43:33Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-18T06:45:58Z"}, "message": "Use choose_rhs() for the layout of multi-lined struct field", "tree": {"sha": "b115b96a83d937caa40fa283b3f8fdf1b0fd97c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b115b96a83d937caa40fa283b3f8fdf1b0fd97c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5152fc8c6d3725e236165e98690315f680eedec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5152fc8c6d3725e236165e98690315f680eedec", "html_url": "https://github.com/rust-lang/rust/commit/d5152fc8c6d3725e236165e98690315f680eedec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5152fc8c6d3725e236165e98690315f680eedec/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de7a56267b14b3692b65dbedf122148d94dd907", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de7a56267b14b3692b65dbedf122148d94dd907", "html_url": "https://github.com/rust-lang/rust/commit/3de7a56267b14b3692b65dbedf122148d94dd907"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "3418a7181c96d01dc3dcacb1011dd71b6529e974", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5152fc8c6d3725e236165e98690315f680eedec/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5152fc8c6d3725e236165e98690315f680eedec/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d5152fc8c6d3725e236165e98690315f680eedec", "patch": "@@ -2596,7 +2596,7 @@ pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     Some(lhs + &rhs)\n }\n \n-fn choose_rhs<R: Rewrite>(\n+pub fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext,\n     expr: &R,\n     shape: Shape,"}, {"sha": "36401472514c99669324fd4a6342a807172a4e59", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d5152fc8c6d3725e236165e98690315f680eedec/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5152fc8c6d3725e236165e98690315f680eedec/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d5152fc8c6d3725e236165e98690315f680eedec", "patch": "@@ -23,7 +23,7 @@ use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent};\n-use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n+use expr::{choose_rhs, format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n@@ -1200,7 +1200,7 @@ pub fn format_struct_struct(\n     let items_str = rewrite_with_alignment(\n         fields,\n         context,\n-        Shape::indented(offset, context.config),\n+        Shape::indented(offset, context.config).sub_width(1)?,\n         mk_sp(body_lo, span.hi()),\n         one_line_budget,\n     )?;\n@@ -1480,34 +1480,23 @@ pub fn rewrite_struct_field(\n         spacing.push(' ');\n     }\n     let ty_shape = shape.offset_left(overhead + spacing.len())?;\n-    if let Some(ref ty) = field.ty.rewrite(context, ty_shape) {\n+    let mut orig_ty = field.ty.rewrite(context, ty_shape);\n+    if let Some(ref ty) = orig_ty {\n         if !ty.contains('\\n') {\n             return Some(attr_prefix + &spacing + ty);\n         }\n     }\n \n-    // We must use multiline.\n-    let new_shape = shape.with_max_width(context.config);\n-    let ty_rewritten = field.ty.rewrite(context, new_shape)?;\n-\n+    // We must use multiline. We are going to put attributes and a field on different lines.\n+    // 1 = \" \"\n+    let rhs_shape = shape.offset_left(last_line_width(&prefix) + 1)?;\n+    orig_ty = field.ty.rewrite(context, rhs_shape);\n     let field_str = if prefix.is_empty() {\n-        ty_rewritten\n-    } else if prefix.len() + first_line_width(&ty_rewritten) + 1 <= shape.width {\n-        prefix + \" \" + &ty_rewritten\n+        orig_ty?\n     } else {\n-        let type_offset = shape.indent.block_indent(context.config);\n-        let nested_shape = Shape::indented(type_offset, context.config);\n-        let nested_ty = field.ty.rewrite(context, nested_shape)?;\n-        prefix + \"\\n\" + &type_offset.to_string(context.config) + &nested_ty\n+        prefix + &choose_rhs(context, &*field.ty, rhs_shape, orig_ty)?\n     };\n-    combine_strs_with_missing_comments(\n-        context,\n-        &attrs_str,\n-        &field_str,\n-        missing_span,\n-        shape,\n-        attrs_extendable,\n-    )\n+    combine_strs_with_missing_comments(context, &attrs_str, &field_str, missing_span, shape, false)\n }\n \n pub struct StaticParts<'a> {"}]}