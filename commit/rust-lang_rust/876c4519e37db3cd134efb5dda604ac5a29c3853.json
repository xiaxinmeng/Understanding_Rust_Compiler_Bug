{"sha": "876c4519e37db3cd134efb5dda604ac5a29c3853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmM0NTE5ZTM3ZGIzY2QxMzRlZmI1ZGRhNjA0YWM1YTI5YzM4NTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-08T18:22:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-08T18:22:35Z"}, "message": "Merge #7602\n\n7602: Check for dyn impls in method resolution r=flodiebold a=Veykril\n\nFixes #6777\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1e6712e32800db2f1d69c7bbbbaa7bc46f0223af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6712e32800db2f1d69c7bbbbaa7bc46f0223af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876c4519e37db3cd134efb5dda604ac5a29c3853", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIYFrCRBK7hj4Ov3rIwAAdHIIAHugMmJV4uau2H2TUu/kOqbW\nn8MPJ4Yo/ij2sv//AT8d4HlqHqQ8y/Ri8LonK/4WVg81PEYBVGhAQ9JRAzWRxBID\nCucx3tfGqIr6EDy6/8tga7K1hHmi6WSfH9j/m1DPCYnFrvuVby82enBqxryRZBQi\nXEwELqUPAflafS5BsV0kM8VBiKcEPrB0GytuhCMg/5YB24VR2Olt+1wSJUMQ4lh0\n5WUNhHGf8M/CH1nRSJt175+2YIHh64HMkLJRVGNvgvbxAIahHgcS0vsS0Qg9Va0a\nz7vG9BpRCJeQgS/jsikwXDN0IMhA0AO5Ol1h/kT3H2PzsrhNtJdmKAEIBs6VuGw=\n=e1Xu\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e6712e32800db2f1d69c7bbbbaa7bc46f0223af\nparent 669efad231ec95ab4b80ab5b083beed233d17843\nparent 965d31ce5b8315e39f72e40da283d2f3d1367e87\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612808555 +0000\ncommitter GitHub <noreply@github.com> 1612808555 +0000\n\nMerge #7602\n\n7602: Check for dyn impls in method resolution r=flodiebold a=Veykril\n\nFixes #6777\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876c4519e37db3cd134efb5dda604ac5a29c3853", "html_url": "https://github.com/rust-lang/rust/commit/876c4519e37db3cd134efb5dda604ac5a29c3853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876c4519e37db3cd134efb5dda604ac5a29c3853/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669efad231ec95ab4b80ab5b083beed233d17843", "url": "https://api.github.com/repos/rust-lang/rust/commits/669efad231ec95ab4b80ab5b083beed233d17843", "html_url": "https://github.com/rust-lang/rust/commit/669efad231ec95ab4b80ab5b083beed233d17843"}, {"sha": "965d31ce5b8315e39f72e40da283d2f3d1367e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/965d31ce5b8315e39f72e40da283d2f3d1367e87", "html_url": "https://github.com/rust-lang/rust/commit/965d31ce5b8315e39f72e40da283d2f3d1367e87"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "b3d1fe9a44e55bb4deefa7a75595d5354609892e", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/876c4519e37db3cd134efb5dda604ac5a29c3853/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876c4519e37db3cd134efb5dda604ac5a29c3853/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=876c4519e37db3cd134efb5dda604ac5a29c3853", "patch": "@@ -10,25 +10,26 @@ use hir_def::{\n     builtin_type::{IntBitness, Signedness},\n     lang_item::LangItemTarget,\n     type_ref::Mutability,\n-    AssocContainerId, AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule, ImplId, Lookup, ModuleId,\n+    TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use super::Substs;\n use crate::{\n     autoderef,\n     db::HirDatabase,\n     primitive::{FloatBitness, FloatTy, IntTy},\n     utils::all_super_traits,\n-    ApplicationTy, Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty, TyKind,\n-    TypeCtor, TypeWalk,\n+    ApplicationTy, Canonical, DebruijnIndex, InEnvironment, Substs, TraitEnvironment, TraitRef, Ty,\n+    TyKind, TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum TyFingerprint {\n     Apply(TypeCtor),\n+    Dyn(TraitId),\n }\n \n impl TyFingerprint {\n@@ -38,6 +39,7 @@ impl TyFingerprint {\n     pub(crate) fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n         match ty {\n             Ty::Apply(a_ty) => Some(TyFingerprint::Apply(a_ty.ctor)),\n+            Ty::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_)),\n             _ => None,\n         }\n     }\n@@ -245,18 +247,15 @@ impl Ty {\n             }};\n         }\n \n+        let mod_to_crate_ids = |module: ModuleId| Some(std::iter::once(module.krate()).collect());\n+\n         let lang_item_targets = match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::Adt(def_id) => {\n-                    return Some(std::iter::once(def_id.module(db.upcast()).krate()).collect())\n+                    return mod_to_crate_ids(def_id.module(db.upcast()));\n                 }\n                 TypeCtor::ForeignType(type_alias_id) => {\n-                    return Some(\n-                        std::iter::once(\n-                            type_alias_id.lookup(db.upcast()).module(db.upcast()).krate(),\n-                        )\n-                        .collect(),\n-                    )\n+                    return mod_to_crate_ids(type_alias_id.lookup(db.upcast()).module(db.upcast()));\n                 }\n                 TypeCtor::Bool => lang_item_crate!(\"bool\"),\n                 TypeCtor::Char => lang_item_crate!(\"char\"),\n@@ -272,6 +271,11 @@ impl Ty {\n                 TypeCtor::RawPtr(Mutability::Mut) => lang_item_crate!(\"mut_ptr\"),\n                 _ => return None,\n             },\n+            Ty::Dyn(_) => {\n+                return self.dyn_trait().and_then(|trait_| {\n+                    mod_to_crate_ids(GenericDefId::TraitId(trait_).module(db.upcast()))\n+                });\n+            }\n             _ => return None,\n         };\n         let res = lang_item_targets\n@@ -285,6 +289,7 @@ impl Ty {\n         Some(res)\n     }\n }\n+\n /// Look up the method with the given name, returning the actual autoderefed\n /// receiver type (but without autoref applied yet).\n pub(crate) fn lookup_method("}, {"sha": "80e795fbfd4a72aa2a96bea7ed054c78c196602c", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/876c4519e37db3cd134efb5dda604ac5a29c3853/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876c4519e37db3cd134efb5dda604ac5a29c3853/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=876c4519e37db3cd134efb5dda604ac5a29c3853", "patch": "@@ -1106,3 +1106,25 @@ fn main() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn method_on_dyn_impl() {\n+    check_types(\n+        r#\"\n+trait Foo {}\n+\n+impl Foo for u32 {}\n+impl dyn Foo {\n+    pub fn dyn_foo(&self) -> u32 {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let f = &42u32 as &dyn Foo<u32>;\n+    f.dyn_foo();\n+  // ^u32\n+}\n+\"#,\n+    );\n+}"}]}