{"sha": "3bcda48a30b21e46b81a7989deb30a3ba85fb918", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiY2RhNDhhMzBiMjFlNDZiODFhNzk4OWRlYjMwYTNiYTg1ZmI5MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-09T13:04:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-09T13:04:17Z"}, "message": "Auto merge of #47802 - bobtwinkles:loop_false_edge, r=nikomatsakis\n\n[NLL] Add false edges out of infinite loops\n\nResolves #46036 by adding a `cleanup` member to the `FalseEdges` terminator kind. There's also a small doc fix to one of the other comments in `into.rs` which I can pull out in to another PR if desired =)\n\nThis PR should pass CI but the test suite has been relatively unstable on my system so I'm not 100% sure.\n\nr? @nikomatsakis", "tree": {"sha": "b3b26392276aa7a97052d31d2aa4a7e4d4ab23c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3b26392276aa7a97052d31d2aa4a7e4d4ab23c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "html_url": "https://github.com/rust-lang/rust/commit/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02537fb90e7e4eb12a69479578b3985665c7e9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/02537fb90e7e4eb12a69479578b3985665c7e9ad", "html_url": "https://github.com/rust-lang/rust/commit/02537fb90e7e4eb12a69479578b3985665c7e9ad"}, {"sha": "85dfa9d1a33be7a4e7276e03660fb9966057cb6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/85dfa9d1a33be7a4e7276e03660fb9966057cb6e", "html_url": "https://github.com/rust-lang/rust/commit/85dfa9d1a33be7a4e7276e03660fb9966057cb6e"}], "stats": {"total": 335, "additions": 261, "deletions": 74}, "files": [{"sha": "67b4cfb6fa7e4ebcc97a6c9552774980553077b9", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -219,6 +219,10 @@ for mir::TerminatorKind<'gcx> {\n                     target.hash_stable(hcx, hasher);\n                 }\n             }\n+            mir::TerminatorKind::FalseUnwind { ref real_target, ref unwind } => {\n+                real_target.hash_stable(hcx, hasher);\n+                unwind.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "439be667861a23163ac63cd5e40f4a3a529fa059", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -816,9 +816,28 @@ pub enum TerminatorKind<'tcx> {\n     /// Indicates the end of the dropping of a generator\n     GeneratorDrop,\n \n+    /// A block where control flow only ever takes one real path, but borrowck\n+    /// needs to be more conservative.\n     FalseEdges {\n+        /// The target normal control flow will take\n         real_target: BasicBlock,\n-        imaginary_targets: Vec<BasicBlock>\n+        /// The list of blocks control flow could conceptually take, but won't\n+        /// in practice\n+        imaginary_targets: Vec<BasicBlock>,\n+    },\n+    /// A terminator for blocks that only take one path in reality, but where we\n+    /// reserve the right to unwind in borrowck, even if it won't happen in practice.\n+    /// This can arise in infinite loops with no function calls for example.\n+    FalseUnwind {\n+        /// The target normal control flow will take\n+        real_target: BasicBlock,\n+        /// The imaginary cleanup block link. This particular path will never be taken\n+        /// in practice, but in order to avoid fragility we want to always\n+        /// consider it in borrowck. We don't want to accept programs which\n+        /// pass borrowck only when panic=abort or some assertions are disabled\n+        /// due to release vs. debug mode builds. This needs to be an Option because\n+        /// of the remove_noop_landing_pads and no_landing_pads passes\n+        unwind: Option<BasicBlock>,\n     },\n }\n \n@@ -878,6 +897,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 s.extend_from_slice(imaginary_targets);\n                 s.into_cow()\n             }\n+            FalseUnwind { real_target: t, unwind: Some(u) } => vec![t, u].into_cow(),\n+            FalseUnwind { real_target: ref t, unwind: None } => slice::from_ref(t).into_cow(),\n         }\n     }\n \n@@ -910,6 +931,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 s.extend(imaginary_targets.iter_mut());\n                 s\n             }\n+            FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) } => vec![t, u],\n+            FalseUnwind { ref mut real_target, unwind: None } => vec![real_target],\n         }\n     }\n \n@@ -929,7 +952,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n             TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n             TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n-            TerminatorKind::Drop { ref mut unwind, .. } => {\n+            TerminatorKind::Drop { ref mut unwind, .. } |\n+            TerminatorKind::FalseUnwind { ref mut unwind, .. } => {\n                 Some(unwind)\n             }\n         }\n@@ -1058,7 +1082,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n \n                 write!(fmt, \")\")\n             },\n-            FalseEdges { .. } => write!(fmt, \"falseEdges\")\n+            FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n+            FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),\n         }\n     }\n \n@@ -1100,6 +1125,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 l.resize(imaginary_targets.len() + 1, \"imaginary\".into());\n                 l\n             }\n+            FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n+            FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n         }\n     }\n }\n@@ -2202,7 +2229,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Return => Return,\n             Unreachable => Unreachable,\n             FalseEdges { real_target, ref imaginary_targets } =>\n-                FalseEdges { real_target, imaginary_targets: imaginary_targets.clone() }\n+                FalseEdges { real_target, imaginary_targets: imaginary_targets.clone() },\n+            FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n         };\n         Terminator {\n             source_info: self.source_info,\n@@ -2244,7 +2272,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Return |\n             GeneratorDrop |\n             Unreachable |\n-            FalseEdges { .. } => false\n+            FalseEdges { .. } |\n+            FalseUnwind { .. } => false\n         }\n     }\n }"}, {"sha": "0b6f1275bdb4c64fbfd7de2f8b527abc15160a6f", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -495,15 +495,21 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(value, source_location);\n                         self.visit_branch(block, resume);\n                         drop.map(|t| self.visit_branch(block, t));\n-\n                     }\n \n-                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets } => {\n+                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets} => {\n                         self.visit_branch(block, real_target);\n                         for target in imaginary_targets {\n                             self.visit_branch(block, *target);\n                         }\n                     }\n+\n+                    TerminatorKind::FalseUnwind { real_target, unwind } => {\n+                        self.visit_branch(block, real_target);\n+                        if let Some(unwind) = unwind {\n+                            self.visit_branch(block, unwind);\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "c4df7349391e23dcaaba2c5768cbd4d2395f6985", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -575,7 +575,8 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n             | TerminatorKind::Unreachable\n-            | TerminatorKind::FalseEdges { .. } => {\n+            | TerminatorKind::FalseEdges { real_target: _, imaginary_targets: _ }\n+            | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {\n                 // no data used, thus irrelevant to borrowck\n             }\n         }"}, {"sha": "7ca8d0bdd500bb841a8dc849ce5b5ed4909d900d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -796,7 +796,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::FalseEdges { .. } => {\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. } => {\n                 // no checks needed for these\n             }\n \n@@ -1152,6 +1153,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self.assert_iscleanup(mir, block_data, *target, is_cleanup);\n                 }\n             }\n+            TerminatorKind::FalseUnwind {\n+                real_target,\n+                unwind\n+            } => {\n+                self.assert_iscleanup(mir, block_data, real_target, is_cleanup);\n+                if let Some(unwind) = unwind {\n+                    if is_cleanup {\n+                        span_mirbug!(self, block_data, \"cleanup in cleanup block via false unwind\");\n+                    }\n+                    self.assert_iscleanup(mir, block_data, unwind, true);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "28dc329e4fe7cd48ab8b77a906fbb49ef0e3a1c7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -104,8 +104,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // Or:\n                 //\n                 // [block: If(lhs)] -false-> [else_block: If(rhs)] -true-> [true_block]\n-                //        |                          | (false)\n-                //        +----------true------------+-------------------> [false_block]\n+                //        | (true)                   | (false)\n+                //  [true_block]               [false_block]\n \n                 let (true_block, false_block, mut else_block, join_block) =\n                     (this.cfg.start_new_block(), this.cfg.start_new_block(),\n@@ -147,20 +147,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 join_block.unit()\n             }\n             ExprKind::Loop { condition: opt_cond_expr, body } => {\n-                // [block] --> [loop_block] ~~> [loop_block_end] -1-> [exit_block]\n-                //                  ^                  |\n-                //                  |                  0\n-                //                  |                  |\n-                //                  |                  v\n-                //           [body_block_end] <~~~ [body_block]\n+                // [block] --> [loop_block] -/eval. cond./-> [loop_block_end] -1-> [exit_block]\n+                //                  ^                               |\n+                //                  |                               0\n+                //                  |                               |\n+                //                  |                               v\n+                //           [body_block_end] <-/eval. body/-- [body_block]\n                 //\n                 // If `opt_cond_expr` is `None`, then the graph is somewhat simplified:\n                 //\n-                // [block] --> [loop_block / body_block ] ~~> [body_block_end]    [exit_block]\n-                //                         ^                          |\n-                //                         |                          |\n-                //                         +--------------------------+\n-                //\n+                // [block]\n+                //    |\n+                //   [loop_block] -> [body_block] -/eval. body/-> [body_block_end]\n+                //    |        ^                                         |\n+                // false link  |                                         |\n+                //    |        +-----------------------------------------+\n+                //    +-> [diverge_cleanup]\n+                // The false link is required to make sure borrowck considers unwinds through the\n+                // body, even when the exact code in the body cannot unwind\n \n                 let loop_block = this.cfg.start_new_block();\n                 let exit_block = this.cfg.start_new_block();\n@@ -188,7 +192,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             // always `()` anyway\n                             this.cfg.push_assign_unit(exit_block, source_info, destination);\n                         } else {\n-                            body_block = loop_block;\n+                            body_block = this.cfg.start_new_block();\n+                            let diverge_cleanup = this.diverge_cleanup();\n+                            this.cfg.terminate(loop_block, source_info,\n+                                               TerminatorKind::FalseUnwind {\n+                                                   real_target: body_block,\n+                                                   unwind: Some(diverge_cleanup)\n+                                               })\n                         }\n \n                         // The \u201creturn\u201d value of the loop body must always be an unit. We therefore"}, {"sha": "e2096bf5356c15ff748fe90a3a0c88582ee80d81", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -728,7 +728,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                TerminatorKind::FalseEdges {\n                                    real_target: block,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_pre_binding_block]});\n+                                       vec![candidate.next_candidate_pre_binding_block],\n+                               });\n \n         self.bind_matched_candidate(block, candidate.bindings);\n \n@@ -749,7 +750,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                TerminatorKind::FalseEdges {\n                                    real_target: otherwise,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_pre_binding_block] });\n+                                       vec![candidate.next_candidate_pre_binding_block],\n+                               });\n             Some(otherwise)\n         } else {\n             self.cfg.terminate(block, candidate_source_info,"}, {"sha": "e798cc93cb09ac80a8bce379f6a473e3a6a10fa4", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -517,6 +517,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             mir::TerminatorKind::Yield {..} |\n             mir::TerminatorKind::Goto {..} |\n             mir::TerminatorKind::FalseEdges {..} |\n+            mir::TerminatorKind::FalseUnwind {..} |\n             mir::TerminatorKind::Unreachable => {}\n         }\n     }"}, {"sha": "9c7d9b398cc566561d27e7fccbf8f1e6350923d1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -864,6 +864,14 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                     self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 }\n             }\n+            mir::TerminatorKind::FalseUnwind { ref real_target, unwind } => {\n+                self.propagate_bits_into_entry_set_for(in_out, changed, real_target);\n+                if let Some(ref unwind) = unwind {\n+                    if !self.dead_unwinds.contains(&bb) {\n+                        self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "635d99e7737a97467025175374c2b11837bea2d9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -346,6 +346,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             TerminatorKind::Abort |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } |\n             TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {"}, {"sha": "606bda51edb1fdfe304a01c4eada0f125c0b7abe", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -165,6 +165,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Resume => unimplemented!(),\n             Abort => unimplemented!(),\n             FalseEdges { .. } => bug!(\"should have been eliminated by `simplify_branches` mir pass\"),\n+            FalseUnwind { .. } => bug!(\"should have been eliminated by `simplify_branches` mir pass\"),\n             Unreachable => return err!(Unreachable),\n         }\n "}, {"sha": "a80dfaef0dab1b276ff74892f80facd2c3d879b9", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -636,7 +636,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop |\n             mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::FalseEdges { .. } => bug!(),\n+            mir::TerminatorKind::FalseEdges { .. } |\n+            mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n         self.super_terminator_kind(block, kind, location);"}, {"sha": "bbc7803b84d8e1a87e68b52102533d4a32ed3134", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -76,7 +76,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             TerminatorKind::Abort |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n-            TerminatorKind::FalseEdges { .. } => {\n+            TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } => {\n                 // safe (at least as emitted during MIR construction)\n             }\n "}, {"sha": "08a9757fb326ac79ee9500b8dbf8c9588a4e5cfe", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -813,6 +813,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *target = self.update_target(*target);\n                 }\n             }\n+            TerminatorKind::FalseUnwind { real_target: _ , unwind: _ } =>\n+                // see the ordering of passes in the optimized_mir query.\n+                bug!(\"False unwinds should have been removed before inlining\")\n         }\n     }\n "}, {"sha": "11dc34717a96d117d41057710e9417d79f2d09f2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -329,7 +329,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Yield { .. } |\n                 TerminatorKind::Unreachable |\n-                TerminatorKind::FalseEdges { .. } => None,\n+                TerminatorKind::FalseEdges { .. } |\n+                TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n                     // Check for unused values. This usually means"}, {"sha": "cd80d25c410f1fc9e906406a9bd35b26f1a2a948", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -75,7 +75,8 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::Goto { .. } |\n             TerminatorKind::Resume |\n             TerminatorKind::SwitchInt { .. } |\n-            TerminatorKind::FalseEdges { .. } => {\n+            TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } => {\n                 terminator.successors().iter().all(|succ| {\n                     nop_landing_pads.contains(succ.index())\n                 })"}, {"sha": "41089f567bd710c65d99219109fc428c2615bec5", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -64,6 +64,9 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }\n                 },\n+                TerminatorKind::FalseUnwind { real_target, .. } => {\n+                    TerminatorKind::Goto { target: real_target }\n+                },\n                 _ => continue\n             };\n         }"}, {"sha": "e4705674e229233eb817f87db48a4459e758abee", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -123,6 +123,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             TerminatorKind::GeneratorDrop => \"TerminatorKind::GeneratorDrop\",\n             TerminatorKind::Yield { .. } => \"TerminatorKind::Yield\",\n             TerminatorKind::FalseEdges { .. } => \"TerminatorKind::FalseEdges\",\n+            TerminatorKind::FalseUnwind { .. } => \"TerminatorKind::FalseUnwind\",\n         }, kind);\n         self.super_terminator_kind(block, kind, location);\n     }"}, {"sha": "f683703ce6d53403851dcb5567bd0fda34871dba", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -242,7 +242,8 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::Unreachable |\n                 TerminatorKind::SwitchInt { .. } |\n                 TerminatorKind::Yield { .. } |\n-                TerminatorKind::FalseEdges { .. } => {\n+                TerminatorKind::FalseEdges { .. } |\n+                TerminatorKind::FalseUnwind { .. } => {\n                     /* nothing to do */\n                 }\n                 TerminatorKind::Call { cleanup: unwind, .. } |"}, {"sha": "bb2a7840faee76e38b57d152e84991fd835948a9", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -608,8 +608,9 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         cleanup);\n             }\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::FalseEdges { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::Yield { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::FalseEdges { .. } |\n+            mir::TerminatorKind::FalseUnwind { .. } => bug!(\"borrowck false edges in trans\"),\n         }\n     }\n "}, {"sha": "b5cdded4d304a99fd9f1cdd4da9de60955cc2f9b", "filename": "src/test/compile-fail/issue-46036.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fcompile-fail%2Fissue-46036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fcompile-fail%2Fissue-46036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46036.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 46036: [NLL] false edges on infinite loops\n+// Infinite loops should create false edges to the cleanup block.\n+#![feature(nll)]\n+\n+struct Foo { x: &'static u32 }\n+\n+fn foo() {\n+    let a = 3;\n+    let foo = Foo { x: &a }; //~ ERROR E0597\n+    loop { }\n+}\n+\n+fn main() { }"}, {"sha": "8599f8d7f9a004bacfda7b8bf32cc833ffa6f7b0", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -179,7 +179,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;"}, {"sha": "d6084d5a6da9237878cddb9d955f7d86736fbad7", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -40,23 +40,29 @@ fn main() {\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//          falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         StorageLive(_2);\n //         _2 = const true;\n //         StorageLive(_3);\n //         _3 = &'23_1rs _2;\n //         StorageLive(_5);\n //         _5 = _2;\n-//         switchInt(move _5) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _5) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//     bb2: {\n+//     bb3: {\n+//         ...\n+//     }\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n //         EndRegion('23_1rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n //         return;\n //     }\n-//     bb3: {\n+//     bb5: {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);"}, {"sha": "46548f1cce97868213d29f08a931a696dc33289a", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -43,22 +43,28 @@ fn main() {\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//         falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         _1 = const true;\n //         StorageLive(_3);\n //         _3 = &'26_1rs _1;\n //         StorageLive(_5);\n //         _5 = _1;\n-//         switchInt(move _5) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _5) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//     bb2: {\n+//     bb3: {\n+//         ...\n+//     }\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n //         EndRegion('26_1rs);\n //         StorageDead(_3);\n //         StorageDead(_1);\n //         return;\n //     }\n-//     bb3: {\n+//     bb5: {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);"}, {"sha": "0f1d714cc6fd2ec68758f34ed0edba7da810d13f", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -57,16 +57,24 @@ fn main() {\n //        _1 = const false;\n //        StorageLive(_2);\n //        _2 = const 3i32;\n-//        StorageLive(_4);\n-//        goto -> bb1;\n+//        falseUnwind -> [real: bb2, cleanup: bb1];\n //    }\n-//\n //    bb1: {\n+//        ...\n+//    }\n+//    bb2: {\n+//        StorageLive(_4);\n+//        goto -> bb3;\n+//    }\n+//    bb3: {\n+//        falseUnwind -> [real: bb4, cleanup: bb1];\n+//    }\n+//    bb4: {\n //        StorageLive(_7);\n //        _7 = _1;\n-//        switchInt(move _7) -> [0u8: bb3, otherwise: bb2];\n+//        switchInt(move _7) -> [0u8: bb6, otherwise: bb5];\n //    }\n-//    bb2: {\n+//    bb5: {\n //        _0 = ();\n //        StorageDead(_7);\n //        EndRegion('33_0rs);\n@@ -75,13 +83,13 @@ fn main() {\n //        StorageDead(_1);\n //        return;\n //    }\n-//    bb3: {\n+//    bb6: {\n //        _4 = &'33_0rs _2;\n //        _6 = ();\n //        StorageDead(_7);\n //        _1 = const true;\n //        _3 = ();\n-//        goto -> bb1;\n+//        goto -> bb3;\n //    }\n // }\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "2a82e2675b67dafe59c8e1dfb0f28631826f85dd", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -67,16 +67,19 @@ fn query() -> bool { true }\n //         goto -> bb1;\n //     }\n //     bb1: {\n+//         falseUnwind -> [real: bb2, cleanup: bb3];\n+//     }\n+//     bb2: {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n-//         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb3, unwind: bb2];\n+//         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb4, unwind: bb3];\n //     }\n-//     bb2: {\n+//     bb3: {\n //         resume;\n //     }\n-//     bb3: {\n+//     bb4: {\n //         StorageDead(_4);\n //         _2 = S<'35_0rs> { r: move _3 };\n //         StorageDead(_3);\n@@ -89,27 +92,27 @@ fn query() -> bool { true }\n //         _8 = &'35_0rs (*_9);\n //         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n-//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb4, unwind: bb2];\n+//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb5, unwind: bb3];\n //     }\n-//     bb4: {\n+//     bb5: {\n //         EndRegion('16s);\n //         StorageDead(_7);\n //         StorageDead(_6);\n //         StorageDead(_9);\n //         StorageLive(_11);\n-//         _11 = const query() -> [return: bb5, unwind: bb2];\n-//     }\n-//     bb5: {\n-//         switchInt(move _11) -> [0u8: bb7, otherwise: bb6];\n+//         _11 = const query() -> [return: bb6, unwind: bb3];\n //     }\n //     bb6: {\n+//         switchInt(move _11) -> [0u8: bb8, otherwise: bb7];\n+//     }\n+//     bb7: {\n //         _0 = ();\n //         StorageDead(_11);\n //         EndRegion('35_0rs);\n //         StorageDead(_2);\n //         return;\n //     }\n-//     bb7: {\n+//     bb8: {\n //         _10 = ();\n //         StorageDead(_11);\n //         StorageLive(_14);\n@@ -121,9 +124,9 @@ fn query() -> bool { true }\n //         _16 = &'35_0rs (*_17);\n //         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n-//         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb8, unwind: bb2];\n+//         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb9, unwind: bb3];\n //     }\n-//     bb8: {\n+//     bb9: {\n //         EndRegion('33s);\n //         StorageDead(_15);\n //         StorageDead(_14);"}, {"sha": "3151c0643079c175bc4c4744760bb201cdc63f27", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -25,27 +25,30 @@ fn main() {\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const false;\n-//         goto -> bb1;\n+//         goto -> bb2;\n //     }\n-//\n //     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         falseUnwind -> [real: bb3, cleanup: bb1];\n+//     }\n+//     bb3: {\n //         StorageLive(_4);\n //         _4 = _1;\n-//         switchInt(move _4) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _4) -> [0u8: bb5, otherwise: bb4];\n //     }\n-//\n-//     bb2: {\n+//     bb4: {\n //         _0 = ();\n //         StorageDead(_4);\n //         StorageDead(_1);\n //         return;\n //     }\n-//\n-//     bb3: {\n+//     bb5: {\n //         _3 = ();\n //         StorageDead(_4);\n //         _1 = const true;\n //         _2 = ();\n-//         goto -> bb1;\n+//         goto -> bb2;\n //     }\n // END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "d36d89080949760b8381d19e21c366ff611b6d3a", "filename": "src/test/mir-opt/loop_test.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z emit-end-regions\n+\n+// Tests to make sure we correctly generate falseUnwind edges in loops\n+\n+fn main() {\n+    // Exit early at runtime. Since only care about the generated MIR\n+    // and not the runtime behavior (which is exercised by other tests)\n+    // we just bail early. Without this the test just loops infinitely.\n+    if true {\n+        return;\n+    }\n+    loop {\n+        let x = 1;\n+        continue;\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.SimplifyCfg-qualify-consts.after.mir\n+//    ...\n+//    bb1: { // The cleanup block\n+//        resume;\n+//    }\n+//    ...\n+//    bb3: { // Entry into the loop\n+//        _1 = ();\n+//        goto -> bb4;\n+//    }\n+//    bb4: { // The loop_block\n+//        falseUnwind -> [real: bb5, cleanup: bb1];\n+//    }\n+//    bb5: { // The loop body (body_block)\n+//        StorageLive(_5);\n+//        _5 = const 1i32;\n+//        StorageDead(_5);\n+//        goto -> bb4;\n+//    }\n+//    ...\n+// END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "64ffc7446062cb171b7ced9ca4e792e0e16ce304", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcda48a30b21e46b81a7989deb30a3ba85fb918/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=3bcda48a30b21e46b81a7989deb30a3ba85fb918", "patch": "@@ -25,17 +25,17 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb2: []\n-//    bb2: {\n-//            | Live variables on entry to bb2[0]: []\n+//    | Live variables on entry to bb3: []\n+//    bb3: {\n+//            | Live variables on entry to bb3[0]: []\n //        _1 = const 55usize;\n-//            | Live variables on entry to bb2[1]: [_1]\n+//            | Live variables on entry to bb3[1]: [_1]\n //        StorageLive(_3);\n-//            | Live variables on entry to bb2[2]: [_1]\n+//            | Live variables on entry to bb3[2]: [_1]\n //        StorageLive(_4);\n-//            | Live variables on entry to bb2[3]: [_1]\n+//            | Live variables on entry to bb3[3]: [_1]\n //        _4 = _1;\n-//            | Live variables on entry to bb2[4]: [_4]\n-//        _3 = const use_x(move _4) -> [return: bb3, unwind: bb1];\n+//            | Live variables on entry to bb3[4]: [_4]\n+//        _3 = const use_x(move _4) -> [return: bb4, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}]}