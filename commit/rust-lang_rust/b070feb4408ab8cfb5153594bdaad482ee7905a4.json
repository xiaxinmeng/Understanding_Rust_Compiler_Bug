{"sha": "b070feb4408ab8cfb5153594bdaad482ee7905a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzBmZWI0NDA4YWI4Y2ZiNTE1MzU5NGJkYWFkNDgyZWU3OTA1YTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-20T19:16:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-20T19:16:24Z"}, "message": "Rollup merge of #38208 - frewsxcv:btreesetdocs, r=alexcrichton\n\nImprovements to `BTreeSet` documentation.\n\nNone", "tree": {"sha": "566f0d7f3f3fcf40983a345c95ea5b556a5aebef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566f0d7f3f3fcf40983a345c95ea5b556a5aebef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b070feb4408ab8cfb5153594bdaad482ee7905a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b070feb4408ab8cfb5153594bdaad482ee7905a4", "html_url": "https://github.com/rust-lang/rust/commit/b070feb4408ab8cfb5153594bdaad482ee7905a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b070feb4408ab8cfb5153594bdaad482ee7905a4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551cb0646ff430f6bf80d1e5f331f8218c1c09b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/551cb0646ff430f6bf80d1e5f331f8218c1c09b6", "html_url": "https://github.com/rust-lang/rust/commit/551cb0646ff430f6bf80d1e5f331f8218c1c09b6"}, {"sha": "fe0d0927f7c01b491a3f247bf2618b64e201bc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0d0927f7c01b491a3f247bf2618b64e201bc43", "html_url": "https://github.com/rust-lang/rust/commit/fe0d0927f7c01b491a3f247bf2618b64e201bc43"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "34674e3a0bd3098da987525b68812ba805970817", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b070feb4408ab8cfb5153594bdaad482ee7905a4/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b070feb4408ab8cfb5153594bdaad482ee7905a4/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=b070feb4408ab8cfb5153594bdaad482ee7905a4", "patch": "@@ -74,53 +74,89 @@ pub struct BTreeSet<T> {\n     map: BTreeMap<T, ()>,\n }\n \n-/// An iterator over a BTreeSet's items.\n+/// An iterator over a `BTreeSet`'s items.\n+///\n+/// This structure is created by the [`iter`] method on [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`iter`]: struct.BTreeSet.html#method.iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n }\n \n-/// An owning iterator over a BTreeSet's items.\n+/// An owning iterator over a `BTreeSet`'s items.\n+///\n+/// This structure is created by the `into_iter` method on [`BTreeSet`]\n+/// [`BTreeSet`] (provided by the `IntoIterator` trait).\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n \n-/// An iterator over a sub-range of BTreeSet's items.\n+/// An iterator over a sub-range of `BTreeSet`'s items.\n+///\n+/// This structure is created by the [`range`] method on [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`range`]: struct.BTreeSet.html#method.range\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n \n /// A lazy iterator producing elements in the set difference (in-order).\n+///\n+/// This structure is created by the [`difference`] method on [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`difference`]: struct.BTreeSet.html#method.difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a> {\n     a: Peekable<Iter<'a, T>>,\n     b: Peekable<Iter<'a, T>>,\n }\n \n /// A lazy iterator producing elements in the set symmetric difference (in-order).\n+///\n+/// This structure is created by the [`symmetric_difference`] method on\n+/// [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a> {\n     a: Peekable<Iter<'a, T>>,\n     b: Peekable<Iter<'a, T>>,\n }\n \n /// A lazy iterator producing elements in the set intersection (in-order).\n+///\n+/// This structure is created by the [`intersection`] method on [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`intersection`]: struct.BTreeSet.html#method.intersection\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a> {\n     a: Peekable<Iter<'a, T>>,\n     b: Peekable<Iter<'a, T>>,\n }\n \n /// A lazy iterator producing elements in the set union (in-order).\n+///\n+/// This structure is created by the [`union`] method on [`BTreeSet`].\n+///\n+/// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`union`]: struct.BTreeSet.html#method.union\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a> {\n     a: Peekable<Iter<'a, T>>,\n     b: Peekable<Iter<'a, T>>,\n }\n \n impl<T: Ord> BTreeSet<T> {\n-    /// Makes a new BTreeSet with a reasonable choice of B.\n+    /// Makes a new `BTreeSet` with a reasonable choice of B.\n     ///\n     /// # Examples\n     ///\n@@ -137,21 +173,32 @@ impl<T: Ord> BTreeSet<T> {\n }\n \n impl<T> BTreeSet<T> {\n-    /// Gets an iterator over the BTreeSet's contents.\n+    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n+    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n     ///\n-    /// for x in set.iter() {\n-    ///     println!(\"{}\", x);\n-    /// }\n+    /// Values returned by the iterator are returned in ascending order:\n     ///\n-    /// let v: Vec<_> = set.iter().cloned().collect();\n-    /// assert_eq!(v, [1, 2, 3, 4]);\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {"}]}