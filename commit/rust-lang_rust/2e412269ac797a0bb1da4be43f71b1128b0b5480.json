{"sha": "2e412269ac797a0bb1da4be43f71b1128b0b5480", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNDEyMjY5YWM3OTdhMGJiMWRhNGJlNDNmNzFiMTEyOGIwYjU0ODA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-04T10:44:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-04T10:44:21Z"}, "message": "Merge pull request #295 from Manishearth/hir3\n\nUpdate rust to 0efb9dab8c7c07fa28e9df0eccc5c07ea3c17fbb", "tree": {"sha": "118d7a8eb75e30612440486869b4b3953202bead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118d7a8eb75e30612440486869b4b3953202bead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e412269ac797a0bb1da4be43f71b1128b0b5480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e412269ac797a0bb1da4be43f71b1128b0b5480", "html_url": "https://github.com/rust-lang/rust/commit/2e412269ac797a0bb1da4be43f71b1128b0b5480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e412269ac797a0bb1da4be43f71b1128b0b5480/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7ec55fc27c5534ba3746ede3b60ec42c25a6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7ec55fc27c5534ba3746ede3b60ec42c25a6a9", "html_url": "https://github.com/rust-lang/rust/commit/5b7ec55fc27c5534ba3746ede3b60ec42c25a6a9"}, {"sha": "eca185438b52ae4645f5aa78b6076adeec49707d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca185438b52ae4645f5aa78b6076adeec49707d", "html_url": "https://github.com/rust-lang/rust/commit/eca185438b52ae4645f5aa78b6076adeec49707d"}], "stats": {"total": 123, "additions": 66, "deletions": 57}, "files": [{"sha": "a132bc90361a56237d18fd8dc71e4916d27ecdd9", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::Span;\n use std::f64::consts as f64;\n "}, {"sha": "05362c706f001b530c7ee9a4ba48baa7645730d6", "filename": "src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,7 +1,8 @@\n //! checks for attributes\n \n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n+use reexport::*;\n use syntax::codemap::ExpnInfo;\n \n use utils::{in_macro, match_path, span_lint};\n@@ -68,7 +69,6 @@ fn is_relevant_block(block: &Block) -> bool {\n             StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => {\n                 return is_relevant_expr(expr);\n             }\n-            _ => ()\n         }\n     }\n     block.expr.as_ref().map_or(false, |e| is_relevant_expr(e))\n@@ -79,7 +79,7 @@ fn is_relevant_expr(expr: &Expr) -> bool {\n         ExprBlock(ref block) => is_relevant_block(block),\n         ExprRet(Some(ref e)) | ExprParen(ref e) =>\n             is_relevant_expr(e),\n-        ExprRet(None) | ExprBreak(_) | ExprMac(_) => false,\n+        ExprRet(None) | ExprBreak(_) => false,\n         ExprCall(ref path_expr, _) => {\n             if let ExprPath(_, ref path) = path_expr.node {\n                 !match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])"}, {"sha": "b1b8a7354553db8287e0abe08ceba96e2f7fa64d", "filename": "src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,8 +1,8 @@\n use rustc::lint::*;\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::*;\n-use syntax::ast::*;\n-use syntax::ast_util::is_comparison_binop;\n+use rustc_front::hir::*;\n+use rustc_front::util::is_comparison_binop;\n use syntax::codemap::Span;\n \n use utils::span_lint;"}, {"sha": "9301aafbaceda1e526bc4d9b7c5fbbfadb366cdd", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -13,7 +13,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::{Spanned, ExpnInfo};\n \n use utils::{in_macro, span_help_and_lint, snippet, snippet_block};"}, {"sha": "a8a446a703fa047cfdc659857a4ad9c028d3a298", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::Context;\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::PathResolution;\n use rustc::middle::def::Def::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::ptr::P;\n use std::cmp::PartialOrd;\n use std::cmp::Ordering::{self, Greater, Less, Equal};"}, {"sha": "c595320143671b43f029d6ef4eb36deb49ec3f29", "filename": "src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n-use syntax::ast_util as ast_util;\n+use rustc_front::hir::*;\n+use rustc_front::util as ast_util;\n use syntax::ptr::P;\n \n use consts::constant;"}, {"sha": "f3359ad0c379a98f9dee20afef0ce991316484e8", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use rustc::middle::ty;\n \n use utils::{snippet, span_lint};"}, {"sha": "0225c9b4d69220bb357ce8dbffaf6d4d26c1e40e", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::Span;\n \n use consts::{constant, is_negative};"}, {"sha": "c30a98d85375b5b13054975932e2c90cbce353f6", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, Spanned};\n use rustc::middle::def_id::DefId;"}, {"sha": "e0556972a7d9581692a8026b6428f14e3baf1029", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -7,6 +7,8 @@\n extern crate syntax;\n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate rustc_front;\n \n // Only for the compile time checking of paths\n extern crate core;\n@@ -42,6 +44,10 @@ pub mod ranges;\n pub mod matches;\n pub mod precedence;\n \n+mod reexport {\n+    pub use syntax::ast::{Name, Ident, NodeId};\n+}\n+\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypePass as LintPassObject);"}, {"sha": "dccad1ffbe773f0d43aeff8c05727826ab616da0", "filename": "src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,7 +1,8 @@\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n+use reexport::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use syntax::visit::{Visitor, walk_ty, walk_ty_param_bound};\n+use rustc_front::visit::{Visitor, walk_ty, walk_ty_param_bound};\n use std::collections::HashSet;\n \n use utils::{in_external_macro, span_lint};\n@@ -152,7 +153,7 @@ fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<HashSet<_>>().len()\n }\n \n-/// A visitor usable for syntax::visit::walk_ty().\n+/// A visitor usable for rustc_front::visit::walk_ty().\n struct RefVisitor(Vec<RefLt>);\n \n impl RefVisitor {"}, {"sha": "d40eca8c0f314f8a138b9ed8a984a9d65a08c608", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n-use syntax::visit::{Visitor, walk_expr};\n+use rustc_front::hir::*;\n+use reexport::*;\n+use rustc_front::visit::{Visitor, walk_expr};\n use rustc::middle::ty;\n use std::collections::HashSet;\n "}, {"sha": "5947469cd9093d304bdab5d48653abcf1a666e4c", "filename": "src/matches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n \n use utils::{snippet, span_lint, span_help_and_lint, in_external_macro, expr_block};\n \n@@ -20,7 +19,7 @@ impl LintPass for MatchPass {\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n-        if let ExprMatch(ref ex, ref arms, ast::MatchSource::Normal) = expr.node {\n+        if let ExprMatch(ref ex, ref arms, MatchSource::Normal) = expr.node {\n             // check preconditions for SINGLE_MATCH\n                 // only two arms\n             if arms.len() == 2 &&"}, {"sha": "254352743131576a70e4ad11ec48c1cad497ddf8", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use rustc::lint::*;\n use rustc::middle::ty;\n use rustc::middle::subst::Subst;"}, {"sha": "eb3a93941be135ac16952173d188bf4dbc263324", "filename": "src/misc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,10 +1,11 @@\n use rustc::lint::*;\n use syntax::ptr::P;\n-use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n+use rustc_front::hir::*;\n+use reexport::*;\n+use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned};\n-use syntax::visit::FnKind;\n-use rustc::ast_map::Node::*;\n+use rustc_front::visit::FnKind;\n+use rustc::front::map::Node::*;\n use rustc::middle::ty;\n \n use utils::{match_path, snippet, span_lint, walk_ptrs_ty};"}, {"sha": "236d9b6a5a243bb39d35f83b0ce8d7213df84023", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::ExpnInfo;\n use rustc::middle::ty::{TypeAndMut, TyRef};\n "}, {"sha": "0e8276bfafacbef8ac4dd07811b7857ba4e1bc55", "filename": "src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n \n use utils::{span_lint, snippet};\n "}, {"sha": "31c28146e1e597d5d7beb4972281fd3e463f54ce", "filename": "src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprecedence.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n \n use utils::span_lint;"}, {"sha": "b0d9757e6c5bb277997b7afd4ec29585cadc3c56", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use rustc::middle::ty;\n \n use utils::{span_lint, match_type};"}, {"sha": "197afaf1163a7ee1d350fb508625f89876e7bab5", "filename": "src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{Context, LintArray, LintPass};\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n use utils::match_type;\n "}, {"sha": "ea75cf562bf1b81f8f5a6d56511e32e5b37bee50", "filename": "src/returns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,7 +1,8 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n+use reexport::*;\n use syntax::codemap::{Span, Spanned};\n-use syntax::visit::FnKind;\n+use rustc_front::visit::FnKind;\n \n use utils::{span_lint, snippet, match_path, in_external_macro};\n \n@@ -42,8 +43,7 @@ impl ReturnPass {\n             // an if/if let expr, check both exprs\n             // note, if without else is going to be a type checking error anyways\n             // (except for unit type functions) so we don't match it\n-            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n-            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n+            ExprIf(_, ref ifblock, Some(ref elsexpr)) => {\n                 self.check_block_return(cx, ifblock);\n                 self.check_final_expr(cx, elsexpr);\n             }"}, {"sha": "aaa2c91a036dfb3e7ae25731a57ac59a52ce2c9e", "filename": "src/shadow.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,7 +1,8 @@\n use std::ops::Deref;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n+use reexport::*;\n use syntax::codemap::Span;\n-use syntax::visit::FnKind;\n+use rustc_front::visit::FnKind;\n \n use rustc::lint::{Context, LintArray, LintPass};\n use rustc::middle::def::Def::{DefVariant, DefStruct};\n@@ -47,8 +48,7 @@ fn check_block(cx: &Context, block: &Block, bindings: &mut Vec<Name>) {\n         match stmt.node {\n             StmtDecl(ref decl, _) => check_decl(cx, decl, bindings),\n             StmtExpr(ref e, _) | StmtSemi(ref e, _) =>\n-                check_expr(cx, e, bindings),\n-            _ => ()\n+                check_expr(cx, e, bindings)\n         }\n     }\n     if let Some(ref o) = block.expr { check_expr(cx, o, bindings); }\n@@ -320,8 +320,7 @@ fn contains_block_self(name: Name, block: &Block) -> bool {\n                 }\n             },\n             StmtExpr(ref e, _) | StmtSemi(ref e, _) =>\n-                if contains_self(name, e) { return true },\n-            _ => ()\n+                if contains_self(name, e) { return true }\n         }\n     }\n     if let Some(ref e) = block.expr { contains_self(name, e) } else { false }"}, {"sha": "3c9c1086a12187f9f64b5ba854608f8e5a5ec11c", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -4,7 +4,7 @@\n //! disable the subsumed lint unless it has a higher level\n \n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n \n use eq_op::is_exp_equal;"}, {"sha": "9fa63f1986c2748a14ab14ec59fb4064ca3c8b21", "filename": "src/types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,9 +1,9 @@\n use rustc::lint::*;\n-use syntax::ast;\n-use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n+use rustc_front::hir::*;\n+use reexport::*;\n+use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::Span;\n-use syntax::visit::{FnKind, Visitor, walk_ty};\n+use rustc_front::visit::{FnKind, Visitor, walk_ty};\n use rustc::middle::ty;\n \n use utils::{match_type, snippet, span_lint, span_help_and_lint, in_external_macro};\n@@ -24,7 +24,7 @@ impl LintPass for TypePass {\n         lint_array!(BOX_VEC, LINKEDLIST)\n     }\n \n-    fn check_ty(&mut self, cx: &Context, ast_ty: &ast::Ty) {\n+    fn check_ty(&mut self, cx: &Context, ast_ty: &Ty) {\n         if let Some(ty) = cx.tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n             if let ty::TyBox(ref inner) = ty.sty {\n                 if match_type(cx, inner, &VEC_PATH) {\n@@ -126,7 +126,7 @@ fn int_ty_to_nbits(typ: &ty::TyS) -> usize {\n \n fn is_isize_or_usize(typ: &ty::TyS) -> bool {\n     match typ.sty {\n-        ty::TyInt(ast::TyIs) | ty::TyUint(ast::TyUs) => true,\n+        ty::TyInt(TyIs) | ty::TyUint(TyUs) => true,\n         _ => false\n     }\n }\n@@ -211,7 +211,7 @@ impl LintPass for CastPass {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {\n                         let from_nbits = int_ty_to_nbits(cast_from);\n-                        let to_nbits = if let ty::TyFloat(ast::TyF32) = cast_to.sty {32} else {64};\n+                        let to_nbits = if let ty::TyFloat(TyF32) = cast_to.sty {32} else {64};\n                         if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n                             span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n                         }\n@@ -235,8 +235,8 @@ impl LintPass for CastPass {\n                         check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n                     }\n                     (false, false) => {\n-                        if let (&ty::TyFloat(ast::TyF64),\n-                                &ty::TyFloat(ast::TyF32)) = (&cast_from.sty, &cast_to.sty) {\n+                        if let (&ty::TyFloat(TyF64),\n+                                &ty::TyFloat(TyF32)) = (&cast_from.sty, &cast_to.sty) {\n                             span_lint(cx, CAST_POSSIBLE_TRUNCATION,\n                                 expr.span,\n                                 \"casting f64 to f32 may truncate the value\");\n@@ -320,7 +320,7 @@ fn check_fndecl(cx: &Context, decl: &FnDecl) {\n     }\n }\n \n-fn check_type(cx: &Context, ty: &ast::Ty) {\n+fn check_type(cx: &Context, ty: &Ty) {\n     if in_external_macro(cx, ty.span) { return; }\n     let score = {\n         let mut visitor = TypeComplexityVisitor { score: 0, nest: 1 };\n@@ -343,7 +343,7 @@ struct TypeComplexityVisitor {\n }\n \n impl<'v> Visitor<'v> for TypeComplexityVisitor {\n-    fn visit_ty(&mut self, ty: &'v ast::Ty) {\n+    fn visit_ty(&mut self, ty: &'v Ty) {\n         let (add_score, sub_nest) = match ty.node {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n             TyInfer |"}, {"sha": "a993da1782aa433ef783c50fe58bb1ae3856faaf", "filename": "src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::codemap::{BytePos, Span};\n \n use utils::span_lint;"}, {"sha": "860ad85aab977985d29d960a0fb4b78bbbf63f6c", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -1,7 +1,8 @@\n use rustc::lint::*;\n-use syntax::ast::*;\n+use rustc_front::hir::*;\n+use reexport::*;\n use syntax::codemap::{ExpnInfo, Span, ExpnFormat};\n-use rustc::ast_map::Node::NodeExpr;\n+use rustc::front::map::Node::NodeExpr;\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty;\n use std::borrow::Cow;"}, {"sha": "7aa42545074391555057d76cc23abf6609125957", "filename": "tests/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e412269ac797a0bb1da4be43f71b1128b0b5480/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e412269ac797a0bb1da4be43f71b1128b0b5480/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=2e412269ac797a0bb1da4be43f71b1128b0b5480", "patch": "@@ -4,8 +4,9 @@\n extern crate clippy;\n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_front;\n \n-use syntax::ast::*;\n+use rustc_front::hir::*;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::codemap::{Spanned, COMMAND_LINE_SP};"}]}