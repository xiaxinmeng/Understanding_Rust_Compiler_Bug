{"sha": "bae454edc5e18e81b831baf4a7647bf2dda620a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTQ1NGVkYzVlMThlODFiODMxYmFmNGE3NjQ3YmYyZGRhNjIwYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-11T07:18:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-11T07:18:21Z"}, "message": "Auto merge of #39736 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 9 pull requests\n\n- Successful merges: #39174, #39660, #39676, #39692, #39701, #39710, #39721, #39724, #39725\n- Failed merges:", "tree": {"sha": "28a201289681561c459b983df21f339d0b7a8591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a201289681561c459b983df21f339d0b7a8591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae454edc5e18e81b831baf4a7647bf2dda620a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae454edc5e18e81b831baf4a7647bf2dda620a8", "html_url": "https://github.com/rust-lang/rust/commit/bae454edc5e18e81b831baf4a7647bf2dda620a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae454edc5e18e81b831baf4a7647bf2dda620a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f140a6c6effa9fe11f97373d995e6c0d977b509f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f140a6c6effa9fe11f97373d995e6c0d977b509f", "html_url": "https://github.com/rust-lang/rust/commit/f140a6c6effa9fe11f97373d995e6c0d977b509f"}, {"sha": "56275f82a83ff4fa83620b0debe1c964e4e434f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/56275f82a83ff4fa83620b0debe1c964e4e434f9", "html_url": "https://github.com/rust-lang/rust/commit/56275f82a83ff4fa83620b0debe1c964e4e434f9"}], "stats": {"total": 121, "additions": 63, "deletions": 58}, "files": [{"sha": "1de44ef7e6d0546dd024f5a7e0eaf1e6bc232528", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -1,9 +1,11 @@\n-Version 1.15.1 (2017-02-08)\n+Version 1.15.1 (2017-02-09)\n ===========================\n \n * [Fix IntoIter::as_mut_slice's signature][39466]\n+* [Compile compiler builtins with `-fPIC` on 32-bit platforms][39523]\n \n [39466]: https://github.com/rust-lang/rust/pull/39466\n+[39523]: https://github.com/rust-lang/rust/pull/39523\n \n \n Version 1.15.0 (2017-02-02)"}, {"sha": "f55bb0784202a7079204e6374f762d998954e8dc", "filename": "src/doc/book/nightly-rust.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Fdoc%2Fbook%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Fdoc%2Fbook%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fnightly-rust.md?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -6,42 +6,42 @@ process, see \u2018[Stability as a deliverable][stability]\u2019.\n \n [stability]: http://blog.rust-lang.org/2014/10/30/Stability.html\n \n-To install nightly Rust, you can use `rustup.sh`:\n+To install nightly Rust, you can use [rustup.rs][rustup]:\n+\n+[rustup]: https://rustup.rs\n \n ```bash\n-$ curl -s https://static.rust-lang.org/rustup.sh | sh -s -- --channel=nightly\n+$ curl https://sh.rustup.rs -sSf | sh\n+$ rustup install nightly\n ```\n \n If you're concerned about the [potential insecurity][insecurity] of using `curl\n | sh`, please keep reading and see our disclaimer below. And feel free to\n use a two-step version of the installation and examine our installation script:\n \n ```bash\n-$ curl -f -L https://static.rust-lang.org/rustup.sh -O\n-$ sh rustup.sh --channel=nightly\n+$ curl https://sh.rustup.rs -sSf -o rustup.sh\n+$ sh rustup.sh\n+$ rustup install nightly\n ```\n \n [insecurity]: http://curlpipesh.tumblr.com\n \n-If you're on Windows, please download either the [32-bit installer][win32] or\n-the [64-bit installer][win64] and run it.\n+If you're on Windows, please download the [rustup installer][installer]\n+and run it.\n \n-[win32]: https://static.rust-lang.org/dist/rust-nightly-i686-pc-windows-gnu.msi\n-[win64]: https://static.rust-lang.org/dist/rust-nightly-x86_64-pc-windows-gnu.msi\n+[installer]: https://win.rustup.rs\n \n ## Uninstalling\n \n If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n Not every programming language is great for everyone. Just run the uninstall\n-script:\n+command:\n \n ```bash\n-$ sudo /usr/local/lib/rustlib/uninstall.sh\n+$ rustup self uninstall\n ```\n \n-If you used the Windows installer, re-run the `.msi` and it will give you\n-an uninstall option.\n-\n Some people, and somewhat rightfully so, get very upset when we tell you to\n `curl | sh`. Basically, when you do this, you are trusting that the good\n people who maintain Rust aren't going to hack your computer and do bad things."}, {"sha": "3873b3535a07b5bacc8d61e3091ea2faf5ff4bef", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -437,7 +437,9 @@ impl<T> Vec<T> {\n \n     /// Reserves capacity for at least `additional` more elements to be inserted\n     /// in the given `Vec<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations.\n+    /// frequent reallocations. After calling `reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n@@ -456,8 +458,9 @@ impl<T> Vec<T> {\n     }\n \n     /// Reserves the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `Vec<T>`. Does nothing if the capacity is already\n-    /// sufficient.\n+    /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore capacity can not be relied upon to be precisely"}, {"sha": "d41767cce18fe9ef2710217bc3e9650484fa9eb9", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -209,11 +209,14 @@ pub trait Iterator {\n \n     /// Returns the `n`th element of the iterator.\n     ///\n-    /// Note that all preceding elements will be consumed (i.e. discarded).\n-    ///\n     /// Like most indexing operations, the count starts from zero, so `nth(0)`\n     /// returns the first value, `nth(1)` the second, and so on.\n     ///\n+    /// Note that all preceding elements, as well as the returned element, will be\n+    /// consumed from the iterator. That means that the preceding elements will be\n+    /// discarded, and also that calling `nth(0)` multiple times on the same iterator\n+    /// will return different elements.\n+    ///\n     /// `nth()` will return [`None`] if `n` is greater than or equal to the length of the\n     /// iterator.\n     ///"}, {"sha": "26417e3ba7cd1ef825662510bf3638cba933093c", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -27,7 +27,7 @@ mod imp {\n     use std::io;\n     use libc;\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     mod os {\n         use libc;\n "}, {"sha": "070690773b6c4792a05dc525ce790c9d1cdc72ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -303,6 +303,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(zero_one)]"}, {"sha": "3fba49345e63d1e5ee34cf8f63cc483f44492353", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -389,48 +389,41 @@ pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n-    struct Data<F, R> {\n+    #[allow(unions_with_drop_fields)]\n+    union Data<F, R> {\n         f: F,\n         r: R,\n     }\n \n     // We do some sketchy operations with ownership here for the sake of\n-    // performance. The `Data` structure is never actually fully valid, but\n-    // instead it always contains at least one uninitialized field. We can only\n-    // pass pointers down to `__rust_maybe_catch_panic` (can't pass objects by\n-    // value), so we do all the ownership tracking here manully.\n+    // performance. We can only  pass pointers down to\n+    // `__rust_maybe_catch_panic` (can't pass objects by value), so we do all\n+    // the ownership tracking here manually using a union.\n     //\n-    // Note that this is all invalid if any of these functions unwind, but the\n-    // whole point of this function is to prevent that! As a result we go\n-    // through a transition where:\n+    // We go through a transition where:\n     //\n-    // * First, only the closure we're going to call is initialized. The return\n-    //   value is uninitialized.\n+    // * First, we set the data to be the closure that we're going to call.\n     // * When we make the function call, the `do_call` function below, we take\n-    //   ownership of the function pointer, replacing it with uninitialized\n-    //   data. At this point the `Data` structure is entirely uninitialized, but\n-    //   it won't drop due to an unwind because it's owned on the other side of\n-    //   the catch panic.\n+    //   ownership of the function pointer. At this point the `Data` union is\n+    //   entirely uninitialized.\n     // * If the closure successfully returns, we write the return value into the\n     //   data's return slot. Note that `ptr::write` is used as it's overwriting\n     //   uninitialized data.\n     // * Finally, when we come back out of the `__rust_maybe_catch_panic` we're\n     //   in one of two states:\n     //\n     //      1. The closure didn't panic, in which case the return value was\n-    //         filled in. We have to be careful to `forget` the closure,\n-    //         however, as ownership was passed to the `do_call` function.\n+    //         filled in. We move it out of `data` and return it.\n     //      2. The closure panicked, in which case the return value wasn't\n-    //         filled in. In this case the entire `data` structure is invalid,\n-    //         so we forget the entire thing.\n+    //         filled in. In this case the entire `data` union is invalid, so\n+    //         there is no need to drop anything.\n     //\n     // Once we stack all that together we should have the \"most efficient'\n     // method of calling a catch panic whilst juggling ownership.\n     let mut any_data = 0;\n     let mut any_vtable = 0;\n     let mut data = Data {\n         f: f,\n-        r: mem::uninitialized(),\n     };\n \n     let r = __rust_maybe_catch_panic(do_call::<F, R>,\n@@ -439,12 +432,9 @@ pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n                                      &mut any_vtable);\n \n     return if r == 0 {\n-        let Data { f, r } = data;\n-        mem::forget(f);\n         debug_assert!(update_panic_count(0) == 0);\n-        Ok(r)\n+        Ok(data.r)\n     } else {\n-        mem::forget(data);\n         update_panic_count(-1);\n         debug_assert!(update_panic_count(0) == 0);\n         Err(mem::transmute(raw::TraitObject {"}, {"sha": "df54ec90022ee80d1f29932e715f04c250218169", "filename": "src/test/run-pass/catch-unwind-bang.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-unwind-bang.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn worker() -> ! {\n+    panic!()\n+}\n+\n+fn main() {\n+    std::panic::catch_unwind(worker).unwrap_err();\n+}"}, {"sha": "c36833f2fb6271862f25fade4e7988edd6779265", "filename": "src/test/run-pass/dst-field-align.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftest%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftest%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-field-align.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -25,12 +25,6 @@ struct Baz<T: ?Sized> {\n     a: T\n }\n \n-#[repr(packed)]\n-struct Packed<T: ?Sized> {\n-    a: u8,\n-    b: T\n-}\n-\n struct HasDrop<T: ?Sized> {\n     ptr: Box<usize>,\n     data: T\n@@ -55,12 +49,6 @@ fn main() {\n     // The pointers should be the same\n     assert_eq!(ptr1, ptr2);\n \n-    // Test that packed structs are handled correctly\n-    let p : Packed<usize> = Packed { a: 0, b: 13 };\n-    assert_eq!(p.b.get(), 13);\n-    let p : &Packed<Bar> = &p;\n-    assert_eq!(p.b.get(), 13);\n-\n     // Test that nested DSTs work properly\n     let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n     assert_eq!(f.b.b.get(), 17);"}, {"sha": "991cd02d215dcdfd782c6216e2c88a61bc28edc5", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae454edc5e18e81b831baf4a7647bf2dda620a8/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=bae454edc5e18e81b831baf4a7647bf2dda620a8", "patch": "@@ -179,8 +179,8 @@ impl Builder {\n         // and wrap it up in a `Value::Table`.\n         let mut manifest = BTreeMap::new();\n         manifest.insert(\"manifest-version\".to_string(),\n-                        toml::encode(&manifest_version));\n-        manifest.insert(\"date\".to_string(), toml::encode(&date));\n+                        toml::Value::String(manifest_version));\n+        manifest.insert(\"date\".to_string(), toml::Value::String(date));\n         manifest.insert(\"pkg\".to_string(), toml::encode(&pkg));\n         let manifest = toml::Value::Table(manifest).to_string();\n \n@@ -362,7 +362,8 @@ impl Builder {\n     fn hash(&self, path: &Path) -> String {\n         let sha = t!(Command::new(\"shasum\")\n                         .arg(\"-a\").arg(\"256\")\n-                        .arg(path)\n+                        .arg(path.file_name().unwrap())\n+                        .current_dir(path.parent().unwrap())\n                         .output());\n         assert!(sha.status.success());\n "}]}