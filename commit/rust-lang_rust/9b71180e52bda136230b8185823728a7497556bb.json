{"sha": "9b71180e52bda136230b8185823728a7497556bb", "node_id": "C_kwDOAAsO6NoAKDliNzExODBlNTJiZGExMzYyMzBiODE4NTgyMzcyOGE3NDk3NTU2YmI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-07T08:55:24Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T15:55:37Z"}, "message": "Create a proper normalization regex parser", "tree": {"sha": "69f951a283fc3e875934407aa6a99b87b9f4e089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f951a283fc3e875934407aa6a99b87b9f4e089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b71180e52bda136230b8185823728a7497556bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b71180e52bda136230b8185823728a7497556bb", "html_url": "https://github.com/rust-lang/rust/commit/9b71180e52bda136230b8185823728a7497556bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b71180e52bda136230b8185823728a7497556bb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc07c19961b889fbecbfea9f7bca43b6174cffdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc07c19961b889fbecbfea9f7bca43b6174cffdb", "html_url": "https://github.com/rust-lang/rust/commit/bc07c19961b889fbecbfea9f7bca43b6174cffdb"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "63a14ce13b56d446a79a1e9a424eb312155a44e4", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9b71180e52bda136230b8185823728a7497556bb/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b71180e52bda136230b8185823728a7497556bb/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=9b71180e52bda136230b8185823728a7497556bb", "patch": "@@ -197,7 +197,7 @@ impl Comments {\n                         ':' | ' ' => args.as_str(),\n                         _ => bail!(\"expected space or `:`, got `{next}`\"),\n                     };\n-                    (command, args)\n+                    (command, args.trim())\n                 }\n             };\n \n@@ -217,12 +217,37 @@ impl Comments {\n                     self.env_vars.push((k.to_string(), v.to_string()));\n                 },\n             \"normalize-stderr-test\" => {\n-                let (from, to) = args\n-                    .split_once(\"->\")\n-                    .ok_or_else(|| eyre!(\"normalize-stderr-test needs a `->`\"))?;\n-                let from = from.trim().trim_matches('\"');\n-                let to = to.trim().trim_matches('\"');\n-                let from = Regex::new(from).ok().ok_or_else(|| eyre!(\"invalid regex\"))?;\n+                fn parse_str(s: &str) -> Result<(&str, &str)> {\n+                    let mut chars = s.char_indices();\n+                    match chars.next().ok_or_else(|| eyre!(\"missing arguments\"))?.1 {\n+                        '\"' => {\n+                            let s = chars.as_str();\n+                            let mut escaped = false;\n+                            for (i, c) in chars {\n+                                if escaped {\n+                                    escaped = false;\n+                                } else if c == '\"' {\n+                                    return Ok((&s[..(i - 1)], s[i..].trim_start()))\n+                                } else {\n+                                    escaped = c == '\\\\';\n+                                }\n+                            }\n+                            bail!(\"no closing quotes found for {s}\")\n+                        }\n+                        c => bail!(\"expected '\\\"', got {c}\"),\n+                    }\n+                }\n+\n+                let (from, rest) = parse_str(args)?;\n+\n+                let to = rest.strip_prefix(\"->\").ok_or_else(|| {\n+                    eyre!(\"normalize-stderr-test needs a pattern and replacement separated by `->`\")\n+                })?.trim_start();\n+                let (to, rest) = parse_str(to)?;\n+\n+                ensure!(rest.is_empty(), \"trailing text after pattern replacement: {rest}\");\n+\n+                let from = Regex::new(from)?;\n                 self.normalize_stderr.push((from, to.to_string()));\n             }\n             \"error-pattern\" => {"}]}