{"sha": "7971c46c44420f2b72086ff0b8726b1ada308bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzFjNDZjNDQ0MjBmMmI3MjA4NmZmMGI4NzI2YjFhZGEzMDhiY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-28T22:30:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-28T22:30:38Z"}, "message": "auto merge of #8718 : bblum/rust/typeof, r=pcwalton\n\nr? anybody", "tree": {"sha": "720fbb0d73a24b8c94e171db78ac4a316ad86cb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/720fbb0d73a24b8c94e171db78ac4a316ad86cb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7971c46c44420f2b72086ff0b8726b1ada308bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7971c46c44420f2b72086ff0b8726b1ada308bcc", "html_url": "https://github.com/rust-lang/rust/commit/7971c46c44420f2b72086ff0b8726b1ada308bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7971c46c44420f2b72086ff0b8726b1ada308bcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da96b3ec6a88a3f88627a001fb3be7620621a3d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/da96b3ec6a88a3f88627a001fb3be7620621a3d2", "html_url": "https://github.com/rust-lang/rust/commit/da96b3ec6a88a3f88627a001fb3be7620621a3d2"}, {"sha": "02f93ca32481d3b1a6a307d28223ca061348eb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f93ca32481d3b1a6a307d28223ca061348eb0c", "html_url": "https://github.com/rust-lang/rust/commit/02f93ca32481d3b1a6a307d28223ca061348eb0c"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "b5e52939635977bede356378a109b735a6208807", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -33,7 +33,7 @@ syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:spac\n syn match     rustFuncName    \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n \n \" reserved\n-syn keyword   rustKeyword     be\n+syn keyword   rustKeyword     be yield typeof\n \n syn keyword   rustType        int uint float char bool u8 u16 u32 u64 f32\n syn keyword   rustType        f64 i8 i16 i32 i64 str Self"}, {"sha": "6ebcf4facc180e43413c5644f7cfcc606c767e7d", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -517,6 +517,9 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Clone + 'static>(\n           }\n         }\n       }\n+      ast::ty_typeof(_e) => {\n+          tcx.sess.span_bug(ast_ty.span, \"typeof is reserved but unimplemented\");\n+      }\n       ast::ty_infer => {\n         // ty_infer should only appear as the type of arguments or return\n         // values in a fn_expr, or as the type of local variables.  Both of"}, {"sha": "aec279e9c53bd1bff8d8ffbb7c570fd6f9e7992c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -791,6 +791,7 @@ pub enum ty_ {\n     ty_tup(~[Ty]),\n     ty_path(Path, Option<OptVec<TyParamBound>>, NodeId), // for #7264; see above\n     ty_mac(mac),\n+    ty_typeof(@expr),\n     // ty_infer means the type should be inferred instead of it having been\n     // specified. This should only appear at the \"top level\" of a type and not\n     // nested in one."}, {"sha": "6e3cd8e71597178664b8be07e86feaebb62a8b9e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -697,6 +697,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n                 fld.fold_expr(e)\n             )\n         }\n+        ty_typeof(e) => ty_typeof(fld.fold_expr(e)),\n         ty_mac(ref mac) => ty_mac(fold_mac(mac))\n     }\n }"}, {"sha": "e1dcdb9222c7bdc654b13848d0be63822143c7f9", "filename": "src/libsyntax/oldvisit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Foldvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Foldvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Foldvisit.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -279,6 +279,9 @@ pub fn visit_ty<E:Clone>(t: &Ty, (e, v): (E, vt<E>)) {\n             (v.visit_ty)(mt.ty, (e.clone(), v));\n             (v.visit_expr)(ex, (e.clone(), v));\n         },\n+        ty_typeof(ex) => {\n+            (v.visit_expr)(ex, (e.clone(), v));\n+        }\n         ty_nil | ty_bot | ty_mac(_) | ty_infer => ()\n     }\n }"}, {"sha": "ea7a7540e363dce1a3f520a3e090e54f57bd31b2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -51,7 +51,7 @@ use ast::{struct_variant_kind, subtract};\n use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n-use ast::{TypeField, ty_fixed_length_vec, ty_closure, ty_bare_fn};\n+use ast::{TypeField, ty_fixed_length_vec, ty_closure, ty_bare_fn, ty_typeof};\n use ast::{ty_infer, TypeMethod};\n use ast::{ty_nil, TyParam, TyParamBound, ty_path, ty_ptr, ty_rptr};\n use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, uniq};\n@@ -1136,6 +1136,13 @@ impl Parser {\n             let result = self.parse_ty_closure(ast::BorrowedSigil, None);\n             self.obsolete(*self.last_span, ObsoleteBareFnType);\n             result\n+        } else if self.eat_keyword(keywords::Typeof) {\n+            // TYPEOF\n+            // In order to not be ambiguous, the type must be surrounded by parens.\n+            self.expect(&token::LPAREN);\n+            let e = self.parse_expr();\n+            self.expect(&token::RPAREN);\n+            ty_typeof(e)\n         } else if *self.token == token::MOD_SEP\n             || is_ident_or_path(self.token) {\n             // NAMED TYPE\n@@ -3610,6 +3617,19 @@ impl Parser {\n             self.bump();\n             sty_value\n           }\n+          token::BINOP(token::STAR) => {\n+            // Possibly \"*self\" or \"*mut self\" -- not supported. Try to avoid\n+            // emitting cryptic \"unexpected token\" errors.\n+            self.bump();\n+            if self.token_is_mutability(self.token) {\n+                self.bump();\n+            }\n+            if self.is_self_ident() {\n+                self.span_err(*self.span, \"cannot pass self by unsafe pointer\");\n+                self.bump();\n+            }\n+            sty_value\n+          }\n           _ => {\n             sty_static\n           }"}, {"sha": "8128a4e905c16ff77e90bcfc4214bc34438bc1bd", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -478,6 +478,7 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"be\",                 // 64\n         \"pure\",               // 65\n         \"yield\",              // 66\n+        \"typeof\",             // 67\n     ];\n \n     @ident_interner {\n@@ -595,6 +596,7 @@ pub mod keywords {\n         True,\n         Trait,\n         Type,\n+        Typeof,\n         Unsafe,\n         Use,\n         While,\n@@ -639,6 +641,7 @@ pub mod keywords {\n                 True => ident { name: 57, ctxt: 0 },\n                 Trait => ident { name: 58, ctxt: 0 },\n                 Type => ident { name: 59, ctxt: 0 },\n+                Typeof => ident { name: 67, ctxt: 0 },\n                 Unsafe => ident { name: 60, ctxt: 0 },\n                 Use => ident { name: 61, ctxt: 0 },\n                 While => ident { name: 62, ctxt: 0 },\n@@ -660,7 +663,7 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 66 => true,\n+            8 | 27 | 32 .. 67 => true,\n             _ => false,\n         },\n         _ => false\n@@ -680,7 +683,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            64 .. 66 => true,\n+            64 .. 67 => true,\n             _ => false,\n         },\n         _ => false,"}, {"sha": "9c31d982590eafd4c943bcd3dc55575239711d9e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -435,6 +435,11 @@ pub fn print_type(s: @ps, ty: &ast::Ty) {\n         print_expr(s, v);\n         word(s.s, \"]\");\n       }\n+      ast::ty_typeof(e) => {\n+          word(s.s, \"typeof(\");\n+          print_expr(s, e);\n+          word(s.s, \")\");\n+      }\n       ast::ty_mac(_) => {\n           fail!(\"print_type doesn't know how to print a ty_mac\");\n       }"}, {"sha": "79304aebea2d47afb94f0f9b31afe0781ab1ec1c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -314,6 +314,9 @@ pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n             visitor.visit_ty(mutable_type.ty, env.clone());\n             visitor.visit_expr(expression, env)\n         }\n+        ty_typeof(expression) => {\n+            visitor.visit_expr(expression, env)\n+        }\n         ty_nil | ty_bot | ty_mac(_) | ty_infer => ()\n     }\n }"}, {"sha": "c42875382b98d088af5804a1cec90293b3b4e4f8", "filename": "src/test/compile-fail/keyword-typeof.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Ftest%2Fcompile-fail%2Fkeyword-typeof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Ftest%2Fcompile-fail%2Fkeyword-typeof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-typeof.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let typeof = (); //~ ERROR `typeof` is a reserved keyword\n+}"}, {"sha": "0bf73bbdfe31cf3d559580f07379eb0551d7e987", "filename": "src/test/compile-fail/no-unsafe-self.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Ftest%2Fcompile-fail%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7971c46c44420f2b72086ff0b8726b1ada308bcc/src%2Ftest%2Fcompile-fail%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-unsafe-self.rs?ref=7971c46c44420f2b72086ff0b8726b1ada308bcc", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait A {\n+    fn foo(*mut self); //~ ERROR cannot pass self by unsafe pointer\n+    fn bar(*self); //~ ERROR cannot pass self by unsafe pointer\n+}\n+\n+struct X;\n+impl A for X {\n+    fn foo(*mut self) { } //~ ERROR cannot pass self by unsafe pointer\n+    fn bar(*self) { } //~ ERROR cannot pass self by unsafe pointer\n+}\n+\n+fn main() { }"}]}