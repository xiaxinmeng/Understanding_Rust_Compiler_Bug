{"sha": "85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YmIxZmMyYzRlMjA2MGJjOWI5ODAwNzQzYzg0MGMyNjFlNDdmYjM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-18T04:36:12Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-18T06:01:38Z"}, "message": "Change iter::find's closure to take a ref", "tree": {"sha": "28fe0e3ecf19f19dc23a90b36f0398202a9c9d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fe0e3ecf19f19dc23a90b36f0398202a9c9d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "html_url": "https://github.com/rust-lang/rust/commit/85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88962eeed86631b6646fce0602acd7daae7a1ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/88962eeed86631b6646fce0602acd7daae7a1ddc", "html_url": "https://github.com/rust-lang/rust/commit/88962eeed86631b6646fce0602acd7daae7a1ddc"}], "stats": {"total": 104, "additions": 49, "deletions": 55}, "files": [{"sha": "644a0fd76b75491d95d4ab0be593bb8f0a5123f5", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -40,6 +40,14 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n     pure fn position(&self, f: fn(&A) -> bool) -> Option<uint> {\n         iter::position(self, f)\n     }\n+    pure fn map_to_vec<B>(&self, op: fn(&A) -> B) -> ~[B] {\n+        iter::map_to_vec(self, op)\n+    }\n+    pure fn flat_map_to_vec<B,IB:BaseIter<B>>(&self, op: fn(&A) -> IB)\n+        -> ~[B] {\n+        iter::flat_map_to_vec(self, op)\n+    }\n+\n }\n \n impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n@@ -48,19 +56,11 @@ impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n }\n \n impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n-    pure fn filter_to_vec(&self, pred: fn(a: A) -> bool) -> ~[A] {\n+    pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n-    pure fn map_to_vec<B>(&self, op: fn(v: A) -> B) -> ~[B] {\n-        iter::map_to_vec(self, op)\n-    }\n     pure fn to_vec(&self) -> ~[A] { iter::to_vec(self) }\n-\n-    pure fn flat_map_to_vec<B:Copy,IB:BaseIter<B>>(&self, op: fn(a: A) -> IB)\n-        -> ~[B] {\n-        iter::flat_map_to_vec(self, op)\n-    }\n-    pure fn find(&self, f: fn(A) -> bool) -> Option<A> {\n+    pure fn find(&self, f: fn(&A) -> bool) -> Option<A> {\n         iter::find(self, f)\n     }\n }"}, {"sha": "a9b3401aa6f2dfc6765f523146b9442e6d4e0387", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -33,6 +33,9 @@ pub trait ExtendedIter<A> {\n     pure fn any(&self, blk: fn(&A) -> bool) -> bool;\n     pure fn foldl<B>(&self, b0: B, blk: fn(&B, &A) -> B) -> B;\n     pure fn position(&self, f: fn(&A) -> bool) -> Option<uint>;\n+    pure fn map_to_vec<B>(&self, op: fn(&A) -> B) -> ~[B];\n+    pure fn flat_map_to_vec<B,IB: BaseIter<B>>(&self, op: fn(&A) -> IB)\n+        -> ~[B];\n }\n \n pub trait EqIter<A:Eq> {\n@@ -45,12 +48,9 @@ pub trait Times {\n }\n \n pub trait CopyableIter<A:Copy> {\n-    pure fn filter_to_vec(&self, pred: fn(a: A) -> bool) -> ~[A];\n-    pure fn map_to_vec<B>(&self, op: fn(v: A) -> B) -> ~[B];\n-    pure fn flat_map_to_vec<B:Copy,IB: BaseIter<B>>(&self, op: fn(A) -> IB)\n-        -> ~[B];\n+    pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A];\n     pure fn to_vec(&self) -> ~[A];\n-    pure fn find(&self, p: fn(A) -> bool) -> Option<A>;\n+    pure fn find(&self, p: fn(&A) -> bool) -> Option<A>;\n }\n \n pub trait CopyableOrderedIter<A:Copy Ord> {\n@@ -82,11 +82,11 @@ pub trait Buildable<A> {\n      *             onto the sequence being constructed.\n      */\n      static pure fn build_sized(size: uint,\n-                                builder: fn(push: pure fn(v: A))) -> self;\n+                                builder: fn(push: pure fn(A))) -> self;\n }\n \n pub pure fn eachi<A,IA:BaseIter<A>>(self: &IA,\n-                                    blk: fn(uint, v: &A) -> bool) {\n+                                    blk: fn(uint, &A) -> bool) {\n     let mut i = 0;\n     for self.each |a| {\n         if !blk(i, a) { break; }\n@@ -111,30 +111,30 @@ pub pure fn any<A,IA:BaseIter<A>>(self: &IA,\n }\n \n pub pure fn filter_to_vec<A:Copy,IA:BaseIter<A>>(\n-    self: &IA, prd: fn(a: A) -> bool) -> ~[A] {\n+    self: &IA, prd: fn(&A) -> bool) -> ~[A] {\n     do vec::build_sized_opt(self.size_hint()) |push| {\n         for self.each |a| {\n-            if prd(*a) { push(*a); }\n+            if prd(a) { push(*a); }\n         }\n     }\n }\n \n-pub pure fn map_to_vec<A:Copy,B,IA:BaseIter<A>>(self: &IA,\n-                                                op: fn(v: A) -> B)\n+pub pure fn map_to_vec<A,B,IA:BaseIter<A>>(self: &IA,\n+                                           op: fn(&A) -> B)\n     -> ~[B] {\n     do vec::build_sized_opt(self.size_hint()) |push| {\n         for self.each |a| {\n-            push(op(*a));\n+            push(op(a));\n         }\n     }\n }\n \n-pub pure fn flat_map_to_vec<A:Copy,B:Copy,IA:BaseIter<A>,IB:BaseIter<B>>(\n-    self: &IA, op: fn(a: A) -> IB) -> ~[B] {\n+pub pure fn flat_map_to_vec<A,B,IA:BaseIter<A>,IB:BaseIter<B>>(\n+    self: &IA, op: fn(&A) -> IB) -> ~[B] {\n     do vec::build |push| {\n         for self.each |a| {\n-            for op(*a).each |b| {\n-                push(*b);\n+            for op(a).each |&b| {\n+                push(b);\n             }\n         }\n     }\n@@ -223,9 +223,9 @@ pub pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n }\n \n pub pure fn find<A: Copy,IA:BaseIter<A>>(self: &IA,\n-                                   f: fn(A) -> bool) -> Option<A> {\n+                                   f: fn(&A) -> bool) -> Option<A> {\n     for self.each |i| {\n-        if f(*i) { return Some(*i) }\n+        if f(i) { return Some(*i) }\n     }\n     return None;\n }\n@@ -243,7 +243,7 @@ pub pure fn find<A: Copy,IA:BaseIter<A>>(self: &IA,\n  *             onto the sequence being constructed.\n  */\n #[inline(always)]\n-pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(v: A)))\n+pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(A)))\n     -> B {\n     Buildable::build_sized(4, builder)\n }\n@@ -264,7 +264,7 @@ pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(v: A)))\n #[inline(always)]\n pub pure fn build_sized_opt<A,B: Buildable<A>>(\n     size: Option<uint>,\n-    builder: fn(push: pure fn(v: A))) -> B {\n+    builder: fn(push: pure fn(A))) -> B {\n \n     Buildable::build_sized(size.get_default(4), builder)\n }"}, {"sha": "c091f48728f98324f01f7e1c514bf8c14c57c04f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -2040,6 +2040,13 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n     pub pure fn position(&self, f: fn(&A) -> bool) -> Option<uint> {\n         iter::position(self, f)\n     }\n+    pure fn map_to_vec<B>(&self, op: fn(&A) -> B) -> ~[B] {\n+        iter::map_to_vec(self, op)\n+    }\n+    pure fn flat_map_to_vec<B,IB:BaseIter<B>>(&self, op: fn(&A) -> IB)\n+        -> ~[B] {\n+        iter::flat_map_to_vec(self, op)\n+    }\n }\n \n impl<A: Eq> &[A]: iter::EqIter<A> {\n@@ -2048,20 +2055,11 @@ impl<A: Eq> &[A]: iter::EqIter<A> {\n }\n \n impl<A: Copy> &[A]: iter::CopyableIter<A> {\n-    pure fn filter_to_vec(&self, pred: fn(a: A) -> bool) -> ~[A] {\n+    pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n-    pure fn map_to_vec<B>(&self, op: fn(v: A) -> B) -> ~[B] {\n-        iter::map_to_vec(self, op)\n-    }\n     pure fn to_vec(&self) -> ~[A] { iter::to_vec(self) }\n-\n-    pure fn flat_map_to_vec<B:Copy,IB:BaseIter<B>>(&self, op: fn(A) -> IB)\n-        -> ~[B] {\n-        iter::flat_map_to_vec(self, op)\n-    }\n-\n-    pub pure fn find(&self, f: fn(A) -> bool) -> Option<A> {\n+    pub pure fn find(&self, f: fn(&A) -> bool) -> Option<A> {\n         iter::find(self, f)\n     }\n }"}, {"sha": "e9b820d30db087a6ec86b109df3cb1a49b22e7d3", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -70,7 +70,7 @@ fn warn_if_multiple_versions(e: env, diag: span_handler,\n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas(*crate_cache.last().metas);\n         let (matches, non_matches) =\n-            partition(crate_cache.map_to_vec(|entry| {\n+            partition(crate_cache.map_to_vec(|&entry| {\n                 let othername = loader::crate_name_from_metas(*entry.metas);\n                 if name == othername {\n                     Left(entry)"}, {"sha": "765bf0cfdff4d3eecde5e9edba3757f76cc6afd1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -861,7 +861,7 @@ impl LookupContext {\n         -> Option<method_map_entry>\n     {\n         let relevant_candidates =\n-            candidates.filter_to_vec(|c| self.is_relevant(self_ty, &c));\n+            candidates.filter_to_vec(|c| self.is_relevant(self_ty, c));\n \n         let relevant_candidates = self.merge_candidates(relevant_candidates);\n "}, {"sha": "1a46b924147eea66ba9a456aa1137ecc55508061", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -115,7 +115,7 @@ fn parse_desc_should_parse_simple_doc_attributes() {\n \n pub fn parse_hidden(+attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n-        match attr::get_meta_item_list(meta) {\n+        match attr::get_meta_item_list(*meta) {\n           Some(metas) => {\n             let hiddens = attr::find_meta_items_by_name(metas, ~\"hidden\");\n             vec::is_not_empty(hiddens)"}, {"sha": "b00a2aab69f13d50b970e12b42990fc5b69351c6", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -218,8 +218,8 @@ fn visit<Tproto, Tstate, Tmessage, V: visitor<Tproto, Tstate, Tmessage>>(\n     proto: protocol, visitor: V) -> Tproto {\n \n     // the copy keywords prevent recursive use of dvec\n-    let states = do (copy proto.states).map_to_vec |s| {\n-        let messages = do (copy s.messages).map_to_vec |m| {\n+    let states = do (copy proto.states).map_to_vec |&s| {\n+        let messages = do (copy s.messages).map_to_vec |&m| {\n             let message(name, span, tys, this, next) = m;\n             visitor.visit_message(name, span, tys, this, next)\n         };"}, {"sha": "0a8bd250bb55186ec1bb9d0652b24f07ba23e844", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-fast\n-#[legacy_modes];\n-\n use iter::BaseIter;\n \n trait FlatMapToVec<A> {\n-  fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(+a: A) -> IB) -> ~[B];\n+  fn flat_map_to_vec<B, IB:BaseIter<B>>(op: fn(&A) -> IB) -> ~[B];\n }\n \n impl<A:Copy> BaseIter<A>: FlatMapToVec<A> {\n-   fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(+a: A) -> IB) -> ~[B] {\n+   fn flat_map_to_vec<B, IB:BaseIter<B>>(op: fn(&A) -> IB) -> ~[B] {\n      iter::flat_map_to_vec(&self, op)\n    }\n }"}, {"sha": "2177066a0337426fe3d1cea8c6b29b6ee3cfc740", "filename": "src/test/run-pass/iter-flat-map-to-vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb1fc2c4e2060bc9b9800743c840c261e47fb3/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs?ref=85bb1fc2c4e2060bc9b9800743c840c261e47fb3", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n // xfail-test -- flat_map_to_vec currently disable\n+fn repeat(x: &uint) -> ~[uint] { ~[x, x] }\n \n-fn repeat(&&x: uint) -> ~[uint] { ~[x, x] }\n-\n-fn incd_if_even(&&x: uint) -> option<uint> {\n+fn incd_if_even(x: &uint) -> option<uint> {\n     if (x % 2u) == 0u {some(x + 1u)} else {none}\n }\n \n@@ -28,4 +27,4 @@ fn main() {\n     assert none.flat_map_to_vec(incd_if_even) == ~[];\n     assert some(1u).flat_map_to_vec(incd_if_even) == ~[];\n     assert some(2u).flat_map_to_vec(incd_if_even) == ~[3u];\n-}\n\\ No newline at end of file\n+}"}]}