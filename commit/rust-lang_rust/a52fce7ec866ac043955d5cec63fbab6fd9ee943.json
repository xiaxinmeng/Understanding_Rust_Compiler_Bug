{"sha": "a52fce7ec866ac043955d5cec63fbab6fd9ee943", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MmZjZTdlYzg2NmFjMDQzOTU1ZDVjZWM2M2ZiYWI2ZmQ5ZWU5NDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-13T22:23:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-13T22:23:40Z"}, "message": "Rollup merge of #59852 - alexcrichton:more-vectored, r=sfackler\n\nstd: Add `{read,write}_vectored` for more types\n\nThis commit implements the `{read,write}_vectored` methods on more types\nin the standard library, namely:\n\n* `std::fs::File`\n* `std::process::ChildStd{in,out,err}`\n* `std::io::Std{in,out,err}`\n* `std::io::Std{in,out,err}Lock`\n* `std::io::Std{in,out,err}Raw`\n\nWhere supported the OS implementations hook up to native support,\notherwise it falls back to the already-defaulted implementation.", "tree": {"sha": "0ba23bf3d005d3919889d344c193546fdf4356f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba23bf3d005d3919889d344c193546fdf4356f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a52fce7ec866ac043955d5cec63fbab6fd9ee943", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsmFtCRBK7hj4Ov3rIwAAdHIIAHDeGlH+xakBqpM1xUERD0fH\n6Ag5eWiT6mSc5uiTW3IolxC/MyxqEmlEV9XvNpHCgGmAjdIsIz3Qgp3WSDeB/4AF\nUWl5ksqDLPce5V0AHX6usx1qkU3HIKoKIJDwhdgKndkpK4QqeuFSEdumOqVfQpjf\ndMq+9+T4JpBB/S9k1lJgIiVSaTL+PTKJCySNbA0Nz8wWT+btyyzKV60Zpvqot+ob\nkbh13kguRYovYcZb5AV2M3XBJqpQ5H0lKZQ2+KOCmyZhotUp2cyPdUxbfPWesCY3\nc1w2FAQO67xMkaptskOOVRx2vSRlnsAMObr8FrIrNjQc3NgWjzFNWR9NJr07Yuw=\n=Hgll\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ba23bf3d005d3919889d344c193546fdf4356f4\nparent 449697b7ff380206dd7eb758651b146da4b45fff\nparent acf3ddb5ad163ea98f8935b045fc6d15faefa454\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555194220 +0200\ncommitter GitHub <noreply@github.com> 1555194220 +0200\n\nRollup merge of #59852 - alexcrichton:more-vectored, r=sfackler\n\nstd: Add `{read,write}_vectored` for more types\n\nThis commit implements the `{read,write}_vectored` methods on more types\nin the standard library, namely:\n\n* `std::fs::File`\n* `std::process::ChildStd{in,out,err}`\n* `std::io::Std{in,out,err}`\n* `std::io::Std{in,out,err}Lock`\n* `std::io::Std{in,out,err}Raw`\n\nWhere supported the OS implementations hook up to native support,\notherwise it falls back to the already-defaulted implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a52fce7ec866ac043955d5cec63fbab6fd9ee943", "html_url": "https://github.com/rust-lang/rust/commit/a52fce7ec866ac043955d5cec63fbab6fd9ee943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a52fce7ec866ac043955d5cec63fbab6fd9ee943/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449697b7ff380206dd7eb758651b146da4b45fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/449697b7ff380206dd7eb758651b146da4b45fff", "html_url": "https://github.com/rust-lang/rust/commit/449697b7ff380206dd7eb758651b146da4b45fff"}, {"sha": "acf3ddb5ad163ea98f8935b045fc6d15faefa454", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf3ddb5ad163ea98f8935b045fc6d15faefa454", "html_url": "https://github.com/rust-lang/rust/commit/acf3ddb5ad163ea98f8935b045fc6d15faefa454"}], "stats": {"total": 284, "additions": 247, "deletions": 37}, "files": [{"sha": "dea198d8c917825b264117fea679fcf73bd85116", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -9,7 +9,7 @@\n \n use crate::fmt;\n use crate::ffi::OsString;\n-use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write};\n+use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n@@ -615,6 +615,10 @@ impl Read for File {\n         self.inner.read(buf)\n     }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -625,6 +629,11 @@ impl Write for File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -639,6 +648,10 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -649,6 +662,11 @@ impl Write for &File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1848ddeab655661989de71706614acac1f5a1bd6", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n use crate::cell::RefCell;\n use crate::fmt;\n use crate::io::lazy::Lazy;\n-use crate::io::{self, Initializer, BufReader, LineWriter};\n+use crate::io::{self, Initializer, BufReader, LineWriter, IoVec, IoVecMut};\n use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -75,17 +75,31 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n }\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n \n@@ -102,6 +116,14 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        let total = bufs.iter().map(|b| b.len()).sum();\n+        match self {\n+            Maybe::Real(w) => handle_ebadf(w.write_vectored(bufs), total),\n+            Maybe::Fake => Ok(total),\n+        }\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         match *self {\n             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),\n@@ -117,6 +139,13 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0)\n         }\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self {\n+            Maybe::Real(r) => handle_ebadf(r.read_vectored(bufs), 0),\n+            Maybe::Fake => Ok(0)\n+        }\n+    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -305,6 +334,9 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.lock().read_vectored(bufs)\n+    }\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -325,6 +357,11 @@ impl Read for StdinLock<'_> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -483,6 +520,9 @@ impl Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.lock().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -498,6 +538,9 @@ impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.borrow_mut().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n@@ -636,6 +679,9 @@ impl Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.lock().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -651,6 +697,9 @@ impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.borrow_mut().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }"}, {"sha": "ef5626700e87ae15c550c7d7b48a8683fb684874", "filename": "src/libstd/process.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -111,7 +111,7 @@ use crate::io::prelude::*;\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::fs;\n-use crate::io::{self, Initializer};\n+use crate::io::{self, Initializer, IoVec, IoVecMut};\n use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n@@ -225,6 +225,10 @@ impl Write for ChildStdin {\n         self.inner.write(buf)\n     }\n \n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -271,6 +275,11 @@ impl Read for ChildStdout {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -318,6 +327,11 @@ impl Read for ChildStderr {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()"}, {"sha": "abd7f0fd3ee5783afb08f48c329ada70e87bc9e0", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -198,10 +198,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "804d3e001ac15679ba9f69bb46b9a913868cb506", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "c86c6000eaead7581b9f8973ce343666eda2785e", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom};\n+use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n@@ -278,10 +278,18 @@ impl File {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> { Ok(()) }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {"}, {"sha": "b926968f7b32581fde4f24fa4acfda0c410aed1e", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::{cvt, syscall};\n use crate::sys::fd::FileDesc;\n \n@@ -24,10 +24,18 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n     pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "c3c898eb23e56a72a8d74a4e6bb1582b0c99de2a", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,10 +200,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "804d3e001ac15679ba9f69bb46b9a913868cb506", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,18 +8,23 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }\n }\n \n-pub fn read2(p1: AnonPipe,\n-             _v1: &mut Vec<u8>,\n-             _p2: AnonPipe,\n-             _v2: &mut Vec<u8>) -> io::Result<()> {\n+pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()> {\n     match p1.0 {}\n }"}, {"sha": "a14db108c3423675f74b2d8bd20784345a4b73fe", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CString, CStr, OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, SeekFrom};\n+use crate::io::{self, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -560,6 +560,10 @@ impl File {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -568,6 +572,10 @@ impl File {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "a7792d42af9ed83eb8839bf855fa1fe0e23d7634", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::fd::FileDesc;\n@@ -60,10 +60,18 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n     pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "bc2986f624e5ce56da5a6edb50986bd2980df7ec", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,5 +1,6 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::fd::FileDesc;\n+use crate::mem::ManuallyDrop;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -11,10 +12,11 @@ impl Stdin {\n \n impl io::Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDIN_FILENO);\n-        let ret = fd.read(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read(buf)\n+    }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n }\n \n@@ -24,10 +26,11 @@ impl Stdout {\n \n impl io::Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDOUT_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write(buf)\n+    }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n@@ -41,10 +44,11 @@ impl Stderr {\n \n impl io::Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDERR_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write(buf)\n+    }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {"}, {"sha": "aa6bf8076f6495512c5496aace8ce423de5a59a0", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "bdad40848916efda219fdb31c87dbb919ed6d6cb", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -13,8 +13,12 @@ impl Stdin {\n     }\n \n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+        self.read_vectored(&mut [IoVecMut::new(data)])\n+    }\n+\n+    pub fn read_vectored(&self, data: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n-            .read(&mut [IoVecMut::new(data)])\n+            .read(data)\n     }\n }\n \n@@ -24,8 +28,12 @@ impl Stdout {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoVec::new(data)])\n+    }\n+\n+    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDOUT_FILENO as u32) })\n-            .write(&[IoVec::new(data)])\n+            .write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n@@ -39,8 +47,12 @@ impl Stderr {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoVec::new(data)])\n+    }\n+\n+    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDERR_FILENO as u32) })\n-            .write(&[IoVec::new(data)])\n+            .write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {"}, {"sha": "c3c898eb23e56a72a8d74a4e6bb1582b0c99de2a", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,10 +200,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "aa6bf8076f6495512c5496aace8ce423de5a59a0", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "1d8e47a4793eff1623dab5714195968883cd575d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom};\n+use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -314,6 +314,10 @@ impl File {\n         self.handle.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.handle.read_vectored(bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.handle.read_at(buf, offset)\n     }\n@@ -322,6 +326,10 @@ impl File {\n         self.handle.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.handle.write_vectored(bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.handle.write_at(buf, offset)\n     }"}, {"sha": "c3fa6c4e0bd51baeb1647f71837778febfbe643a", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, Read};\n+use crate::io::{self, ErrorKind, Read, IoVec, IoVecMut};\n use crate::mem;\n use crate::ops::Deref;\n use crate::ptr;\n@@ -89,6 +89,10 @@ impl RawHandle {\n         }\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -169,6 +173,10 @@ impl RawHandle {\n         Ok(amt as usize)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         let mut written = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -199,4 +207,8 @@ impl<'a> Read for &'a RawHandle {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        (**self).read_vectored(bufs)\n+    }\n }"}, {"sha": "6613d3a056775f7a9b6923c2064dbbede048648f", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52fce7ec866ac043955d5cec63fbab6fd9ee943/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=a52fce7ec866ac043955d5cec63fbab6fd9ee943", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -166,9 +166,17 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n }\n \n pub fn read2(p1: AnonPipe,"}]}