{"sha": "7ee1a77235065df6cc2ff89890dfa6ff7eadbb07", "node_id": "C_kwDOAAsO6NoAKDdlZTFhNzcyMzUwNjVkZjZjYzJmZjg5ODkwZGZhNmZmN2VhZGJiMDc", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-10-17T18:24:40Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-10-17T18:24:40Z"}, "message": "fix(assist): fix #10566 and #10567\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "522ec7da8e81be24d4789acd1fcdaa80df44d6d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522ec7da8e81be24d4789acd1fcdaa80df44d6d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07", "html_url": "https://github.com/rust-lang/rust/commit/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "401daa5f77fd9cfb79d16fe3a54bc576d60b4c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/401daa5f77fd9cfb79d16fe3a54bc576d60b4c82", "html_url": "https://github.com/rust-lang/rust/commit/401daa5f77fd9cfb79d16fe3a54bc576d60b4c82"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "1cc0db540797d232bd86989da8a6f2d33d0a18f1", "filename": "crates/ide_assists/src/handlers/unwrap_result_return_type.rs", "status": "modified", "additions": 79, "deletions": 15, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee1a77235065df6cc2ff89890dfa6ff7eadbb07/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs?ref=7ee1a77235065df6cc2ff89890dfa6ff7eadbb07", "patch": "@@ -1,7 +1,7 @@\n use ide_db::helpers::{for_each_tail_expr, node_ext::walk_expr, FamousDefs};\n use syntax::{\n     ast::{self, Expr},\n-    match_ast, AstNode,\n+    match_ast, AstNode, TextRange, TextSize,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -60,25 +60,45 @@ pub(crate) fn unwrap_result_return_type(acc: &mut Assists, ctx: &AssistContext)\n             });\n             for_each_tail_expr(&body, tail_cb);\n \n-            for ret_expr_arg in exprs_to_unwrap {\n-                let new_ret_expr = ret_expr_arg.to_string();\n-                let new_ret_expr =\n-                    new_ret_expr.trim_start_matches(\"Ok(\").trim_start_matches(\"Err(\");\n-                builder.replace(\n-                    ret_expr_arg.syntax().text_range(),\n-                    new_ret_expr.strip_suffix(')').unwrap_or(new_ret_expr),\n-                )\n-            }\n-\n+            let mut is_unit_type = false;\n             if let Some((_, inner_type)) = type_ref.to_string().split_once('<') {\n                 let inner_type = match inner_type.split_once(',') {\n                     Some((success_inner_type, _)) => success_inner_type,\n                     None => inner_type,\n                 };\n-                builder.replace(\n-                    type_ref.syntax().text_range(),\n-                    inner_type.strip_suffix('>').unwrap_or(inner_type),\n-                )\n+                let new_ret_type = inner_type.strip_suffix('>').unwrap_or(inner_type);\n+                if new_ret_type == \"()\" {\n+                    is_unit_type = true;\n+                    let text_range = TextRange::new(\n+                        ret_type.syntax().text_range().start(),\n+                        ret_type.syntax().text_range().end() + TextSize::from(1u32),\n+                    );\n+                    builder.replace(text_range, \"\")\n+                } else {\n+                    builder.replace(\n+                        type_ref.syntax().text_range(),\n+                        inner_type.strip_suffix('>').unwrap_or(inner_type),\n+                    )\n+                }\n+            }\n+\n+            for ret_expr_arg in exprs_to_unwrap {\n+                let ret_expr_str = ret_expr_arg.to_string();\n+                if ret_expr_str.starts_with(\"Ok(\") || ret_expr_str.starts_with(\"Err(\") {\n+                    let arg_list = ret_expr_arg.syntax().children().find_map(ast::ArgList::cast);\n+                    if let Some(arg_list) = arg_list {\n+                        if is_unit_type {\n+                            builder.replace(ret_expr_arg.syntax().text_range(), \"\");\n+                        } else {\n+                            let new_ret_expr = arg_list\n+                                .args()\n+                                .map(|arg| arg.to_string())\n+                                .collect::<Vec<String>>()\n+                                .join(\", \");\n+                            builder.replace(ret_expr_arg.syntax().text_range(), new_ret_expr);\n+                        }\n+                    }\n+                }\n             }\n         },\n     )\n@@ -126,6 +146,50 @@ fn foo() -> i32 {\n         );\n     }\n \n+    #[test]\n+    fn unwrap_result_return_type_unit_type() {\n+        check_assist(\n+            unwrap_result_return_type,\n+            r#\"\n+//- minicore: result\n+fn foo() -> Result<(), Box<dyn Error$0>> {\n+    Ok(())\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    \n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unwrap_result_return_type_ending_with_parent() {\n+        check_assist(\n+            unwrap_result_return_type,\n+            r#\"\n+//- minicore: result\n+fn foo() -> Result<i32, Box<dyn Error$0>> {\n+    if true {\n+        Ok(42)\n+    } else {\n+        foo()\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> i32 {\n+    if true {\n+        42\n+    } else {\n+        foo()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn unwrap_return_type_break_split_tail() {\n         check_assist("}]}