{"sha": "8662946cee6e4b3ac6a9789c0da49340337e2794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjI5NDZjZWU2ZTRiM2FjNmE5Nzg5YzBkYTQ5MzQwMzM3ZTI3OTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-16T13:08:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-16T13:08:36Z"}, "message": "Rollup merge of #56850 - alexreg:fix-self-in-typedefs, r=petrochenkov\n\nFixed issue with using `Self` ctor in typedefs\n\nAdded two regression tests.\n\nThis is definitely suitable for a beta backport.\n\nCC @Centril", "tree": {"sha": "17a54a46dddd819b5dd9a993a45d8b2049556232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a54a46dddd819b5dd9a993a45d8b2049556232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8662946cee6e4b3ac6a9789c0da49340337e2794", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFk5UCRBK7hj4Ov3rIwAAdHIIAKsKjlvgAXpVaGIY2xRJNF6u\n7H9XEDANvVeTc9dDIc1Tzk9fMqWOrgHV9PwoLGV0CZPNTWg5qZ6OCuU+2F64YJ+O\nGTSQUXhSzOkjINTvInaC2ub1Cfntu72hdT3FM/ykBBnUlu4sq3zoenGJbwxVkRru\n9WW3OI3LJc6TdcZ9k3I1tPasHWDkFMit7yZbuTesz1sUCaErJ67S19S6RQVr8AT0\nF3o3g+X5s6ox+i134f1iLPi1pbY1eGMUJAKuTy2iZ09qYHBwkvKHivy3bB75N+QY\nULdWNCOkXd7eMw37pjJphRVSmSF2bXY+iAot3s46GAn37f4QCafbLvjsPZtmUpw=\n=7TZf\n-----END PGP SIGNATURE-----\n", "payload": "tree 17a54a46dddd819b5dd9a993a45d8b2049556232\nparent 75d4eda8c33c434422229f37a4b5e5674cf48d82\nparent 0211856c0e381c658b2decca0f31e4c9579d8e0d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544965716 +0100\ncommitter GitHub <noreply@github.com> 1544965716 +0100\n\nRollup merge of #56850 - alexreg:fix-self-in-typedefs, r=petrochenkov\n\nFixed issue with using `Self` ctor in typedefs\n\nAdded two regression tests.\n\nThis is definitely suitable for a beta backport.\n\nCC @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8662946cee6e4b3ac6a9789c0da49340337e2794", "html_url": "https://github.com/rust-lang/rust/commit/8662946cee6e4b3ac6a9789c0da49340337e2794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8662946cee6e4b3ac6a9789c0da49340337e2794/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d4eda8c33c434422229f37a4b5e5674cf48d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d4eda8c33c434422229f37a4b5e5674cf48d82", "html_url": "https://github.com/rust-lang/rust/commit/75d4eda8c33c434422229f37a4b5e5674cf48d82"}, {"sha": "0211856c0e381c658b2decca0f31e4c9579d8e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0211856c0e381c658b2decca0f31e4c9579d8e0d", "html_url": "https://github.com/rust-lang/rust/commit/0211856c0e381c658b2decca0f31e4c9579d8e0d"}], "stats": {"total": 231, "additions": 176, "deletions": 55}, "files": [{"sha": "429b7f03af8e40a058d9b7674fe4c10da06a9dd8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -1754,17 +1754,19 @@ bitflags! {\n     pub struct AdtFlags: u32 {\n         const NO_ADT_FLAGS        = 0;\n         const IS_ENUM             = 1 << 0;\n-        const IS_PHANTOM_DATA     = 1 << 1;\n-        const IS_FUNDAMENTAL      = 1 << 2;\n-        const IS_UNION            = 1 << 3;\n-        const IS_BOX              = 1 << 4;\n+        const IS_UNION            = 1 << 1;\n+        const IS_STRUCT           = 1 << 2;\n+        const HAS_CTOR            = 1 << 3;\n+        const IS_PHANTOM_DATA     = 1 << 4;\n+        const IS_FUNDAMENTAL      = 1 << 5;\n+        const IS_BOX              = 1 << 6;\n         /// Indicates whether the type is an `Arc`.\n-        const IS_ARC              = 1 << 5;\n+        const IS_ARC              = 1 << 7;\n         /// Indicates whether the type is an `Rc`.\n-        const IS_RC               = 1 << 6;\n+        const IS_RC               = 1 << 8;\n         /// Indicates whether the variant list of this ADT is `#[non_exhaustive]`.\n         /// (i.e., this flag is never set unless this ADT is an enum).\n-        const IS_VARIANT_LIST_NON_EXHAUSTIVE   = 1 << 7;\n+        const IS_VARIANT_LIST_NON_EXHAUSTIVE = 1 << 9;\n     }\n }\n \n@@ -2079,31 +2081,43 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n            repr: ReprOptions) -> Self {\n         debug!(\"AdtDef::new({:?}, {:?}, {:?}, {:?})\", did, kind, variants, repr);\n         let mut flags = AdtFlags::NO_ADT_FLAGS;\n+\n+        if kind == AdtKind::Enum && tcx.has_attr(did, \"non_exhaustive\") {\n+            debug!(\"found non-exhaustive variant list for {:?}\", did);\n+            flags = flags | AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE;\n+        }\n+        flags |= match kind {\n+            AdtKind::Enum => AdtFlags::IS_ENUM,\n+            AdtKind::Union => AdtFlags::IS_UNION,\n+            AdtKind::Struct => AdtFlags::IS_STRUCT,\n+        };\n+\n+        if let AdtKind::Struct = kind {\n+            let variant_def = &variants[VariantIdx::new(0)];\n+            let def_key = tcx.def_key(variant_def.did);\n+            match def_key.disambiguated_data.data {\n+                DefPathData::StructCtor => flags |= AdtFlags::HAS_CTOR,\n+                _ => (),\n+            }\n+        }\n+\n         let attrs = tcx.get_attrs(did);\n         if attr::contains_name(&attrs, \"fundamental\") {\n-            flags = flags | AdtFlags::IS_FUNDAMENTAL;\n+            flags |= AdtFlags::IS_FUNDAMENTAL;\n         }\n         if Some(did) == tcx.lang_items().phantom_data() {\n-            flags = flags | AdtFlags::IS_PHANTOM_DATA;\n+            flags |= AdtFlags::IS_PHANTOM_DATA;\n         }\n         if Some(did) == tcx.lang_items().owned_box() {\n-            flags = flags | AdtFlags::IS_BOX;\n+            flags |= AdtFlags::IS_BOX;\n         }\n         if Some(did) == tcx.lang_items().arc() {\n-            flags = flags | AdtFlags::IS_ARC;\n+            flags |= AdtFlags::IS_ARC;\n         }\n         if Some(did) == tcx.lang_items().rc() {\n-            flags = flags | AdtFlags::IS_RC;\n-        }\n-        if kind == AdtKind::Enum && tcx.has_attr(did, \"non_exhaustive\") {\n-            debug!(\"found non-exhaustive variant list for {:?}\", did);\n-            flags = flags | AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE;\n-        }\n-        match kind {\n-            AdtKind::Enum => flags = flags | AdtFlags::IS_ENUM,\n-            AdtKind::Union => flags = flags | AdtFlags::IS_UNION,\n-            AdtKind::Struct => {}\n+            flags |= AdtFlags::IS_RC;\n         }\n+\n         AdtDef {\n             did,\n             variants,\n@@ -2114,25 +2128,25 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n \n     #[inline]\n     pub fn is_struct(&self) -> bool {\n-        !self.is_union() && !self.is_enum()\n+        self.flags.contains(AdtFlags::IS_STRUCT)\n     }\n \n     #[inline]\n     pub fn is_union(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_UNION)\n+        self.flags.contains(AdtFlags::IS_UNION)\n     }\n \n     #[inline]\n     pub fn is_enum(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_ENUM)\n+        self.flags.contains(AdtFlags::IS_ENUM)\n     }\n \n     #[inline]\n     pub fn is_variant_list_non_exhaustive(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE)\n+        self.flags.contains(AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE)\n     }\n \n-    /// Returns the kind of the ADT - Struct or Enum.\n+    /// Returns the kind of the ADT.\n     #[inline]\n     pub fn adt_kind(&self) -> AdtKind {\n         if self.is_enum() {\n@@ -2161,33 +2175,39 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         }\n     }\n \n-    /// Returns whether this type is #[fundamental] for the purposes\n+    /// If this function returns `true`, it implies that `is_struct` must return `true`.\n+    #[inline]\n+    pub fn has_ctor(&self) -> bool {\n+        self.flags.contains(AdtFlags::HAS_CTOR)\n+    }\n+\n+    /// Returns whether this type is `#[fundamental]` for the purposes\n     /// of coherence checking.\n     #[inline]\n     pub fn is_fundamental(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_FUNDAMENTAL)\n+        self.flags.contains(AdtFlags::IS_FUNDAMENTAL)\n     }\n \n     /// Returns `true` if this is PhantomData<T>.\n     #[inline]\n     pub fn is_phantom_data(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_PHANTOM_DATA)\n+        self.flags.contains(AdtFlags::IS_PHANTOM_DATA)\n     }\n \n     /// Returns `true` if this is `Arc<T>`.\n     pub fn is_arc(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_ARC)\n+        self.flags.contains(AdtFlags::IS_ARC)\n     }\n \n     /// Returns `true` if this is `Rc<T>`.\n     pub fn is_rc(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_RC)\n+        self.flags.contains(AdtFlags::IS_RC)\n     }\n \n     /// Returns `true` if this is Box<T>.\n     #[inline]\n     pub fn is_box(&self) -> bool {\n-        self.flags.intersects(AdtFlags::IS_BOX)\n+        self.flags.contains(AdtFlags::IS_BOX)\n     }\n \n     /// Returns whether this type has a destructor."}, {"sha": "75ae868883484e0bd308d9b07d02386331faef7d", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         Def::Local(id) | Def::Upvar(id, ..) => {\n                             Some(self.tcx.hir().span(id))\n                         }\n-                        _ => self.tcx.hir().span_if_local(def.def_id())\n+                        _ => def.opt_def_id().and_then(|did| self.tcx.hir().span_if_local(did)),\n                     };\n                     if let Some(span) = def_span {\n                         let label = match (unit_variant, inner_callee_path) {"}, {"sha": "957c8d9f19f0ebe1f8e14ea8bb1c0ab4ad1eb087", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -95,7 +95,7 @@ mod op;\n \n use astconv::AstConv;\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc::hir::{self, GenericArg, Node, ItemKind, PatKind};\n+use rustc::hir::{self, GenericArg, ItemKind, Node, PatKind};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -113,7 +113,8 @@ use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::ty::subst::{CanonicalUserSubsts, UnpackedKind, Subst, Substs,\n                        UserSelfTy, UserSubsts};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n+use rustc::ty::{self, AdtKind, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate,\n+                RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n@@ -3217,8 +3218,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             return_expr_ty);\n     }\n \n-    // A generic function for checking the then and else in an if\n-    // or if-else.\n+    // A generic function for checking the 'then' and 'else' clauses in an 'if'\n+    // or 'if-else' expression.\n     fn check_then_else(&self,\n                        cond_expr: &'gcx hir::Expr,\n                        then_expr: &'gcx hir::Expr,\n@@ -3544,7 +3545,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // We don't look at stability attributes on\n                 // struct-like enums (yet...), but it's definitely not\n                 // a bug to have constructed one.\n-                if adt_kind != ty::AdtKind::Enum {\n+                if adt_kind != AdtKind::Enum {\n                     tcx.check_stability(v_field.did, Some(expr_id), field.span);\n                 }\n \n@@ -5156,26 +5157,48 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }).unwrap_or(false);\n \n         let mut new_def = def;\n-        let (def_id, ty) = if let Def::SelfCtor(impl_def_id) = def {\n-            let ty = self.impl_self_ty(span, impl_def_id).ty;\n-\n-            match ty.ty_adt_def() {\n-                Some(adt_def) if adt_def.is_struct() => {\n-                    let variant = adt_def.non_enum_variant();\n-                    new_def = Def::StructCtor(variant.did, variant.ctor_kind);\n-                    (variant.did, self.tcx.type_of(variant.did))\n-                }\n-                _ => {\n-                    (impl_def_id, self.tcx.types.err)\n+        let (def_id, ty) = match def {\n+            Def::SelfCtor(impl_def_id) => {\n+                let ty = self.impl_self_ty(span, impl_def_id).ty;\n+                let adt_def = ty.ty_adt_def();\n+\n+                match adt_def {\n+                    Some(adt_def) if adt_def.has_ctor() => {\n+                        let variant = adt_def.non_enum_variant();\n+                        new_def = Def::StructCtor(variant.did, variant.ctor_kind);\n+                        (variant.did, self.tcx.type_of(variant.did))\n+                    }\n+                    _ => {\n+                        let mut err = self.tcx.sess.struct_span_err(span,\n+                            \"the `Self` constructor can only be used with tuple or unit structs\");\n+                        if let Some(adt_def) = adt_def {\n+                            match adt_def.adt_kind() {\n+                                AdtKind::Enum => {\n+                                    err.note(\"did you mean to use one of the enum's variants?\");\n+                                },\n+                                AdtKind::Struct |\n+                                AdtKind::Union => {\n+                                    err.span_label(\n+                                        span,\n+                                        format!(\"did you mean `Self {{ /* fields */ }}`?\"),\n+                                    );\n+                                }\n+                            }\n+                        }\n+                        err.emit();\n+\n+                        (impl_def_id, self.tcx.types.err)\n+                    }\n                 }\n             }\n-        } else {\n-            let def_id = def.def_id();\n+            _ => {\n+                let def_id = def.def_id();\n \n-            // The things we are substituting into the type should not contain\n-            // escaping late-bound regions, and nor should the base type scheme.\n-            let ty = self.tcx.type_of(def_id);\n-            (def_id, ty)\n+                // The things we are substituting into the type should not contain\n+                // escaping late-bound regions, and nor should the base type scheme.\n+                let ty = self.tcx.type_of(def_id);\n+                (def_id, ty)\n+            }\n         };\n \n         let substs = AstConv::create_substs_for_generic_args("}, {"sha": "83d4e31b5d1260736ac762e5cad997a7e7044deb", "filename": "src/test/ui/issues/issue-56199.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56199.rs?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -0,0 +1,23 @@\n+\n+enum Foo {}\n+struct Bar {}\n+\n+impl Foo {\n+    fn foo() {\n+        let _ = Self;\n+        //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n+        let _ = Self();\n+        //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n+    }\n+}\n+\n+impl Bar {\n+    fn bar() {\n+        let _ = Self;\n+        //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n+        let _ = Self();\n+        //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6e3c7fd17b4371c04693c66153682d3a367b7d89", "filename": "src/test/ui/issues/issue-56199.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56199.stderr?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -0,0 +1,30 @@\n+error: the `Self` constructor can only be used with tuple or unit structs\n+  --> $DIR/issue-56199.rs:7:17\n+   |\n+LL |         let _ = Self;\n+   |                 ^^^^\n+   |\n+   = note: did you mean to use one of the enum's variants?\n+\n+error: the `Self` constructor can only be used with tuple or unit structs\n+  --> $DIR/issue-56199.rs:9:17\n+   |\n+LL |         let _ = Self();\n+   |                 ^^^^\n+   |\n+   = note: did you mean to use one of the enum's variants?\n+\n+error: the `Self` constructor can only be used with tuple or unit structs\n+  --> $DIR/issue-56199.rs:16:17\n+   |\n+LL |         let _ = Self;\n+   |                 ^^^^ did you mean `Self { /* fields */ }`?\n+\n+error: the `Self` constructor can only be used with tuple or unit structs\n+  --> $DIR/issue-56199.rs:18:17\n+   |\n+LL |         let _ = Self();\n+   |                 ^^^^ did you mean `Self { /* fields */ }`?\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c16550e370179de3eac37cde3d98b72fd1ba2e37", "filename": "src/test/ui/issues/issue-56835.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -0,0 +1,10 @@\n+\n+pub struct Foo {}\n+\n+impl Foo {\n+    fn bar(Self(foo): Self) {}\n+    //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n+    //~^^ ERROR expected tuple struct/variant, found self constructor `Self` [E0164]\n+}\n+\n+fn main() {}"}, {"sha": "b7c3b142ec4524199871731915fd39b6a149cf50", "filename": "src/test/ui/issues/issue-56835.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8662946cee6e4b3ac6a9789c0da49340337e2794/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr?ref=8662946cee6e4b3ac6a9789c0da49340337e2794", "patch": "@@ -0,0 +1,15 @@\n+error: the `Self` constructor can only be used with tuple or unit structs\n+  --> $DIR/issue-56835.rs:5:12\n+   |\n+LL |     fn bar(Self(foo): Self) {}\n+   |            ^^^^^^^^^ did you mean `Self { /* fields */ }`?\n+\n+error[E0164]: expected tuple struct/variant, found self constructor `Self`\n+  --> $DIR/issue-56835.rs:5:12\n+   |\n+LL |     fn bar(Self(foo): Self) {}\n+   |            ^^^^^^^^^ not a tuple variant or struct\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0164`."}]}