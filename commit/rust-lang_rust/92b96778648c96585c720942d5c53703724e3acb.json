{"sha": "92b96778648c96585c720942d5c53703724e3acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjk2Nzc4NjQ4Yzk2NTg1YzcyMDk0MmQ1YzUzNzAzNzI0ZTNhY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T15:43:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T15:43:00Z"}, "message": "Auto merge of #6820 - mgacek8:issue_6562_enhance_mem_replace_with_default_with_other_ctors, r=phansch\n\nmem_replace_with_default: recognize some std library ctors\n\nfixes #6562\nchangelog: mem_replace_with_default: recognize some common constructors equivalent to `Default::default()`", "tree": {"sha": "55c32e5e0effebefaf5c00526ced635b923bb3b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c32e5e0effebefaf5c00526ced635b923bb3b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b96778648c96585c720942d5c53703724e3acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b96778648c96585c720942d5c53703724e3acb", "html_url": "https://github.com/rust-lang/rust/commit/92b96778648c96585c720942d5c53703724e3acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b96778648c96585c720942d5c53703724e3acb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28759b242d23e43b6d85714c18733120229e0881", "url": "https://api.github.com/repos/rust-lang/rust/commits/28759b242d23e43b6d85714c18733120229e0881", "html_url": "https://github.com/rust-lang/rust/commit/28759b242d23e43b6d85714c18733120229e0881"}, {"sha": "41be515062ff709d080cd8a8858f31778a775bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/41be515062ff709d080cd8a8858f31778a775bcc", "html_url": "https://github.com/rust-lang/rust/commit/41be515062ff709d080cd8a8858f31778a775bcc"}], "stats": {"total": 174, "additions": 166, "deletions": 8}, "files": [{"sha": "13f9c9b71f39e3f12c46958ffab25db08e4af2e8", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/92b96778648c96585c720942d5c53703724e3acb/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b96778648c96585c720942d5c53703724e3acb/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=92b96778648c96585c720942d5c53703724e3acb", "patch": "@@ -4,6 +4,7 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -12,6 +13,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n+use clippy_utils::is_diagnostic_assoc_item;\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `mem::replace()` on an `Option` with\n     /// `None`.\n@@ -194,13 +197,44 @@ fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'\n     }\n }\n \n+/// Returns true if the `def_id` associated with the `path` is recognized as a \"default-equivalent\"\n+/// constructor from the std library\n+fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n+    let std_types_symbols = &[\n+        sym::string_type,\n+        sym::vec_type,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::hashmap_type,\n+        sym::BTreeMap,\n+        sym::hashset_type,\n+        sym::BTreeSet,\n+        sym::BinaryHeap,\n+    ];\n+\n+    if std_types_symbols\n+        .iter()\n+        .any(|symbol| is_diagnostic_assoc_item(cx, def_id, *symbol))\n+    {\n+        if let QPath::TypeRelative(_, ref method) = path {\n+            if method.ident.name == sym::new {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n     if let ExprKind::Call(ref repl_func, _) = src.kind {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            if is_diagnostic_assoc_item(cx, repl_def_id, sym::Default)\n+                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n+\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "0ddc915862cb32a30d760cbfe77d0f991960a69c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92b96778648c96585c720942d5c53703724e3acb/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b96778648c96585c720942d5c53703724e3acb/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=92b96778648c96585c720942d5c53703724e3acb", "patch": "@@ -280,7 +280,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n     trt_id.map_or(false, |trt_id| match_def_path(cx, trt_id, path))\n }\n \n-/// Checks if the method call given in `expr` belongs to a trait or other container with a given\n+/// Checks if the method call given in `def_id` belongs to a trait or other container with a given\n /// diagnostic item\n pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     cx.tcx"}, {"sha": "3b6224254a0a72d6a1b868acbd695bf7bdd79075", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=92b96778648c96585c720942d5c53703724e3acb", "patch": "@@ -7,6 +7,7 @@\n     clippy::mem_replace_with_default\n )]\n \n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n use std::mem;\n \n fn replace_option_with_none() {\n@@ -19,9 +20,37 @@ fn replace_option_with_none() {\n fn replace_with_default() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::take(&mut s);\n+\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::take(s);\n     let _ = std::mem::take(s);\n+\n+    let mut v = vec![123];\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+\n+    let mut hash_map: HashMap<i32, i32> = HashMap::new();\n+    let _ = std::mem::take(&mut hash_map);\n+\n+    let mut btree_map: BTreeMap<i32, i32> = BTreeMap::new();\n+    let _ = std::mem::take(&mut btree_map);\n+\n+    let mut vd: VecDeque<i32> = VecDeque::new();\n+    let _ = std::mem::take(&mut vd);\n+\n+    let mut hash_set: HashSet<&str> = HashSet::new();\n+    let _ = std::mem::take(&mut hash_set);\n+\n+    let mut btree_set: BTreeSet<&str> = BTreeSet::new();\n+    let _ = std::mem::take(&mut btree_set);\n+\n+    let mut list: LinkedList<i32> = LinkedList::new();\n+    let _ = std::mem::take(&mut list);\n+\n+    let mut binary_heap: BinaryHeap<i32> = BinaryHeap::new();\n+    let _ = std::mem::take(&mut binary_heap);\n }\n \n fn main() {"}, {"sha": "0a36db9e92159ad6f0dadb1fa7fd57b92b47ae20", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=92b96778648c96585c720942d5c53703724e3acb", "patch": "@@ -7,6 +7,7 @@\n     clippy::mem_replace_with_default\n )]\n \n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n use std::mem;\n \n fn replace_option_with_none() {\n@@ -19,9 +20,37 @@ fn replace_option_with_none() {\n fn replace_with_default() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n+\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::replace(s, String::default());\n     let _ = std::mem::replace(s, Default::default());\n+\n+    let mut v = vec![123];\n+    let _ = std::mem::replace(&mut v, Vec::default());\n+    let _ = std::mem::replace(&mut v, Default::default());\n+    let _ = std::mem::replace(&mut v, Vec::new());\n+    let _ = std::mem::replace(&mut v, vec![]);\n+\n+    let mut hash_map: HashMap<i32, i32> = HashMap::new();\n+    let _ = std::mem::replace(&mut hash_map, HashMap::new());\n+\n+    let mut btree_map: BTreeMap<i32, i32> = BTreeMap::new();\n+    let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n+\n+    let mut vd: VecDeque<i32> = VecDeque::new();\n+    let _ = std::mem::replace(&mut vd, VecDeque::new());\n+\n+    let mut hash_set: HashSet<&str> = HashSet::new();\n+    let _ = std::mem::replace(&mut hash_set, HashSet::new());\n+\n+    let mut btree_set: BTreeSet<&str> = BTreeSet::new();\n+    let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n+\n+    let mut list: LinkedList<i32> = LinkedList::new();\n+    let _ = std::mem::replace(&mut list, LinkedList::new());\n+\n+    let mut binary_heap: BinaryHeap<i32> = BinaryHeap::new();\n+    let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n }\n \n fn main() {"}, {"sha": "f8aa1538bffa87769567e4790ea5d147caaf20e4", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92b96778648c96585c720942d5c53703724e3acb/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=92b96778648c96585c720942d5c53703724e3acb", "patch": "@@ -1,36 +1,102 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:14:13\n+  --> $DIR/mem_replace.rs:15:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:16:13\n+  --> $DIR/mem_replace.rs:17:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:21:13\n+  --> $DIR/mem_replace.rs:22:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:23:13\n+  --> $DIR/mem_replace.rs:25:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:24:13\n+  --> $DIR/mem_replace.rs:26:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n-error: aborting due to 5 previous errors\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:29:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Vec::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:30:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Default::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:31:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Vec::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:32:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, vec![]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:35:13\n+   |\n+LL |     let _ = std::mem::replace(&mut hash_map, HashMap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_map)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:38:13\n+   |\n+LL |     let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_map)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:41:13\n+   |\n+LL |     let _ = std::mem::replace(&mut vd, VecDeque::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut vd)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:44:13\n+   |\n+LL |     let _ = std::mem::replace(&mut hash_set, HashSet::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_set)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:47:13\n+   |\n+LL |     let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_set)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:50:13\n+   |\n+LL |     let _ = std::mem::replace(&mut list, LinkedList::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut list)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:53:13\n+   |\n+LL |     let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut binary_heap)`\n+\n+error: aborting due to 16 previous errors\n "}]}