{"sha": "9d6ff1553b7debbe5c99c102ce0978b6130592f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNmZmMTU1M2I3ZGViYmU1Yzk5YzEwMmNlMDk3OGI2MTMwNTkyZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T12:11:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-19T12:11:09Z"}, "message": "Auto merge of #66545 - Centril:rollup-xv2rx7v, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #66090 (Misc CI improvements)\n - #66155 (Add long error explanation for E0594)\n - #66239 (Suggest calling async closure when needed)\n - #66430 ([doc] Fix the source code highlighting on source comments)\n - #66431 (Fix 'type annotations needed' error with opaque types)\n - #66461 (Add explanation message for E0641)\n - #66493 (Add JohnTitor to rustc-guide toolstate notification list)\n - #66511 (std::error::Chain: remove Copy)\n - #66529 (resolve: Give derive helpers highest priority during resolution)\n - #66536 (Move the definition of `QueryResult` into `plumbing.rs`.)\n - #66538 (Remove compiler_builtins_lib feature from libstd)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ecd66e45b8f75d0ad7b407c61e9570a9b5e9646d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd66e45b8f75d0ad7b407c61e9570a9b5e9646d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6ff1553b7debbe5c99c102ce0978b6130592f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6ff1553b7debbe5c99c102ce0978b6130592f8", "html_url": "https://github.com/rust-lang/rust/commit/9d6ff1553b7debbe5c99c102ce0978b6130592f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6ff1553b7debbe5c99c102ce0978b6130592f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cad8bb659066b42fc518c95def384956126bd3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cad8bb659066b42fc518c95def384956126bd3f", "html_url": "https://github.com/rust-lang/rust/commit/2cad8bb659066b42fc518c95def384956126bd3f"}, {"sha": "e1a32faf880360c836a350dbfe9a02d2cd45bcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a32faf880360c836a350dbfe9a02d2cd45bcf9", "html_url": "https://github.com/rust-lang/rust/commit/e1a32faf880360c836a350dbfe9a02d2cd45bcf9"}], "stats": {"total": 1050, "additions": 704, "deletions": 346}, "files": [{"sha": "946eb483c2946a2c751ea9ae5b335ceaebe146fc", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -223,37 +223,31 @@ jobs:\n     matrix:\n       # 32/64 bit MSVC tests\n       x86_64-msvc-1:\n-        MSYS_BITS: 64\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n         SCRIPT: make ci-subset-1\n         # FIXME(#59637)\n         NO_DEBUG_ASSERTIONS: 1\n         NO_LLVM_ASSERTIONS: 1\n       x86_64-msvc-2:\n-        MSYS_BITS: 64\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n         SCRIPT: make ci-subset-2\n       i686-msvc-1:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n         SCRIPT: make ci-subset-1\n         # FIXME(#59637)\n         NO_DEBUG_ASSERTIONS: 1\n         NO_LLVM_ASSERTIONS: 1\n       i686-msvc-2:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n         SCRIPT: make ci-subset-2\n         # FIXME(#59637)\n         NO_DEBUG_ASSERTIONS: 1\n         NO_LLVM_ASSERTIONS: 1\n       # MSVC aux tests\n       x86_64-msvc-aux:\n-        MSYS_BITS: 64\n         RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n       x86_64-msvc-cargo:\n-        MSYS_BITS: 64\n         SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n         VCVARS_BAT: vcvars64.bat\n@@ -262,10 +256,8 @@ jobs:\n         NO_LLVM_ASSERTIONS: 1\n       # MSVC tools tests\n       x86_64-msvc-tools:\n-        MSYS_BITS: 64\n         SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\n-        DEPLOY_TOOLSTATES_JSON: toolstates-windows.json\n \n       # 32/64-bit MinGW builds.\n       #\n@@ -281,43 +273,30 @@ jobs:\n       # came from the mingw-w64 SourceForge download site. Unfortunately\n       # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n       i686-mingw-1:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-mingw-subset-1\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n-        MINGW_DIR: mingw32\n+        CUSTOM_MINGW: 1\n         # FIXME(#59637)\n         NO_DEBUG_ASSERTIONS: 1\n         NO_LLVM_ASSERTIONS: 1\n       i686-mingw-2:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-mingw-subset-2\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n-        MINGW_DIR: mingw32\n+        CUSTOM_MINGW: 1\n       x86_64-mingw-1:\n-        MSYS_BITS: 64\n         SCRIPT: make ci-mingw-subset-1\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n-        MINGW_DIR: mingw64\n+        CUSTOM_MINGW: 1\n         # FIXME(#59637)\n         NO_DEBUG_ASSERTIONS: 1\n         NO_LLVM_ASSERTIONS: 1\n       x86_64-mingw-2:\n-        MSYS_BITS: 64\n         SCRIPT: make ci-mingw-subset-2\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n-        MINGW_DIR: mingw64\n+        CUSTOM_MINGW: 1\n \n       # 32/64 bit MSVC and GNU deployment\n       dist-x86_64-msvc:\n-        MSYS_BITS: 64\n         RUST_CONFIGURE_ARGS: >-\n           --build=x86_64-pc-windows-msvc\n           --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n@@ -327,7 +306,6 @@ jobs:\n         DIST_REQUIRE_ALL_TOOLS: 1\n         DEPLOY: 1\n       dist-i686-msvc:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: >-\n           --build=i686-pc-windows-msvc\n           --target=i586-pc-windows-msvc\n@@ -337,27 +315,20 @@ jobs:\n         DIST_REQUIRE_ALL_TOOLS: 1\n         DEPLOY: 1\n       dist-i686-mingw:\n-        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n         SCRIPT: python x.py dist\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n-        MINGW_DIR: mingw32\n+        CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n         DEPLOY: 1\n       dist-x86_64-mingw:\n-        MSYS_BITS: 64\n         SCRIPT: python x.py dist\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n-        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n-        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n-        MINGW_DIR: mingw64\n+        CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n         DEPLOY: 1\n \n       # \"alternate\" deployment, see .travis.yml for more info\n       dist-x86_64-msvc-alt:\n-        MSYS_BITS: 64\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n         SCRIPT: python x.py dist\n         DEPLOY_ALT: 1"}, {"sha": "214c11fd69024ef191ed62d2f8342e1b385e103f", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,6 +8,13 @@\n \n steps:\n \n+# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n+# step to see what's going on.\n+- bash: |\n+    builder=$(echo $AGENT_JOBNAME | cut -d ' ' -f 2)\n+    echo \"##vso[task.setvariable variable=CI_JOB_NAME]$builder\"\n+  displayName: Configure Job Name\n+\n # Disable automatic line ending conversion, which is enabled by default on\n # Azure's Windows image. Having the conversion enabled caused regressions both\n # in our test suite (it broke miri tests) and in the ecosystem, since we\n@@ -24,11 +31,8 @@ steps:\n - bash: src/ci/scripts/should-skip-this.sh\n   displayName: Decide whether to run this job\n \n-# Spawn a background process to collect CPU usage statistics which we'll upload\n-# at the end of the build. See the comments in the script here for more\n-# information.\n-- bash: python src/ci/cpu-usage-over-time.py &> cpu-usage.csv &\n-  displayName: \"Collect CPU-usage statistics in the background\"\n+- bash: src/ci/scripts/collect-cpu-stats.sh\n+  displayName: Collect CPU-usage statistics in the background\n \n - bash: src/ci/scripts/dump-environment.sh\n   displayName: Show the current environment\n@@ -135,48 +139,9 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Install awscli\n \n-# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n-# step to see what's going on.\n-- bash: |\n-    builder=$(echo $AGENT_JOBNAME | cut -d ' ' -f 2)\n-    echo \"##vso[task.setvariable variable=CI_JOB_NAME]$builder\"\n-  displayName: Configure Job Name\n-\n-# As a quick smoke check on the otherwise very fast mingw-check linux builder\n-# check our own internal scripts.\n-- bash: |\n-    set -e\n-    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n-    cd rust-toolstate\n-    python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n-    # Only check maintainers if this build is supposed to publish toolstate.\n-    # Builds that are not supposed to publish don't have the access token.\n-    if [ -n \"${TOOLSTATE_PUBLISH+is_set}\" ]; then\n-      TOOLSTATE_VALIDATE_MAINTAINERS_REPO=rust-lang/rust python2.7 \"${BUILD_SOURCESDIRECTORY}/src/tools/publish_toolstate.py\"\n-    fi\n-    cd ..\n-    rm -rf rust-toolstate\n-  env:\n-    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)\n-  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['IMAGE'], 'mingw-check'))\n-  displayName: Verify the publish_toolstate script works\n-\n-- bash: |\n-    set -e\n-    # Remove any preexisting rustup installation since it can interfere\n-    # with the cargotest step and its auto-detection of things like Clippy in\n-    # the environment\n-    rustup self uninstall -y || true\n-    if [ \"$IMAGE\" = \"\" ]; then\n-      src/ci/run.sh\n-    else\n-      src/ci/docker/run.sh $IMAGE\n-    fi\n-  #timeoutInMinutes: 180\n+- bash: src/ci/scripts/run-build-from-ci.sh\n   timeoutInMinutes: 600\n   env:\n-    CI: true\n-    SRC: .\n     AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n     AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n     TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)"}, {"sha": "fe39ce3e24116b974ac8c7432a46bc5cd67d4d6a", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -72,7 +72,6 @@ jobs:\n #         DEPLOY: 1\n #\n #       dist-x86_64-msvc-alt:\n-#         MSYS_BITS: 64\n #         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n #         SCRIPT: python x.py dist\n #         DEPLOY_ALT: 1"}, {"sha": "5373612279bca109a2b276a102f74ebf000373e5", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -72,7 +72,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!\n # Source of the file: https://github.com/vfdev-5/qemu-rpi2-vexpress/raw/master/vexpress-v2p-ca15-tc1.dtb\n-RUN curl -O https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/vexpress-v2p-ca15-tc1.dtb\n+RUN curl -O https://ci-mirrors.rust-lang.org/rustc/vexpress-v2p-ca15-tc1.dtb\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "fb067a79a5c85c93691cdf5244394982d465289f", "filename": "src/ci/docker/dist-armv7-linux/crosstool-ng.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fcrosstool-ng.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,7 +1,7 @@\n set -ex\n \n # Mirrored from https://github.com/crosstool-ng/crosstool-ng/archive/crosstool-ng-1.24.0.tar.gz\n-url=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/crosstool-ng-1.24.0.tar.gz\"\n+url=\"https://ci-mirrors.rust-lang.org/rustc/crosstool-ng-1.24.0.tar.gz\"\n curl -Lf $url | tar xzf -\n cd crosstool-ng-crosstool-ng-1.24.0\n ./bootstrap"}, {"sha": "9584258d23403b12fcfbb0249cec584535852c6e", "filename": "src/ci/docker/dist-various-1/install-mips-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mips-linux-musl\n # originally from\n # https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\n # OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\n-URL=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n+URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n FILE=\"OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mips-linux-musl --strip-components=2\n "}, {"sha": "50a8e554b1675f789f074c09e657260f242d2ca2", "filename": "src/ci/docker/dist-various-1/install-mipsel-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mipsel-linux-musl\n # Note that this originally came from:\n # https://downloads.openwrt.org/snapshots/trunk/malta/generic/\n # OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\n-URL=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n+URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n FILE=\"OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mipsel-linux-musl --strip-components=2\n "}, {"sha": "17aa78945cf21541bfbbe3855e27bd06f7f8190a", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -5,7 +5,7 @@\n set -ex\n \n # Originally from https://releases.llvm.org/9.0.0/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-curl https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/clang%2Bllvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+curl https://ci-mirrors.rust-lang.org/rustc/clang%2Bllvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n   tar xJf -\n export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n "}, {"sha": "0c7eb5fdac9bea0425b92a8c4a8f31375546b3eb", "filename": "src/ci/docker/dist-x86_64-linux/build-curl.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -5,6 +5,9 @@ source shared.sh\n \n VERSION=7.66.0\n \n+# This needs to be downloaded directly from S3, it can't go through the CDN.\n+# That's because the CDN is backed by CloudFront, which requires SNI and TLSv1\n+# (without paying an absurd amount of money).\n curl https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/curl-$VERSION.tar.xz \\\n   | xz --decompress \\\n   | tar xf -"}, {"sha": "d8f6bdb51b8d5bad24e0995de30e5babde6d0fa9", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -4,6 +4,10 @@ set -ex\n source shared.sh\n \n VERSION=1.0.2k\n+\n+# This needs to be downloaded directly from S3, it can't go through the CDN.\n+# That's because the CDN is backed by CloudFront, which requires SNI and TLSv1\n+# (without paying an absurd amount of money).\n URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/openssl-$VERSION.tar.gz\n \n curl $URL | tar xzf -"}, {"sha": "f8697c698b9fb67aac77c9145a960e9f55437b8e", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -25,7 +25,7 @@ cd netbsd\n \n mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n \n-URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n+URL=https://ci-mirrors.rust-lang.org/rustc\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n curl $URL/2018-03-01-netbsd-src.tgz | tar xzf -"}, {"sha": "b2d96aed2a9e80370010739bd24f7da54eb66481", "filename": "src/ci/docker/mingw-check/Dockerfile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -19,7 +19,10 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY mingw-check/validate-toolstate.sh /scripts/\n+\n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n ENV SCRIPT python2.7 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n            python2.7 ../x.py build --stage 0 src/tools/build-manifest && \\\n-           python2.7 ../x.py test --stage 0 src/tools/compiletest\n+           python2.7 ../x.py test --stage 0 src/tools/compiletest && \\\n+           /scripts/validate-toolstate.sh"}, {"sha": "2ebf1d6d5ae7f1882a0d3864bd0b7b9244681b34", "filename": "src/ci/docker/mingw-check/validate-toolstate.sh", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fmingw-check%2Fvalidate-toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fmingw-check%2Fvalidate-toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fmingw-check%2Fvalidate-toolstate.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,19 @@\n+#!/bin/bash\n+# A quick smoke test to make sure publish_tooolstate.py works.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+rm -rf rust-toolstate\n+git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n+cd rust-toolstate\n+python2.7 \"../../src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \\\n+    \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n+# Only check maintainers if this build is supposed to publish toolstate.\n+# Builds that are not supposed to publish don't have the access token.\n+if [ -n \"${TOOLSTATE_PUBLISH+is_set}\" ]; then\n+  TOOLSTATE_VALIDATE_MAINTAINERS_REPO=rust-lang/rust python2.7 \\\n+      \"../../src/tools/publish_toolstate.py\"\n+fi\n+cd ..\n+rm -rf rust-toolstate"}, {"sha": "5670e10be23cf7b7e6042050020cbc774688f796", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -59,7 +59,7 @@ done\n \n # Originally downloaded from:\n # https://download.freebsd.org/ftp/releases/${freebsd_arch}/${freebsd_version}-RELEASE/base.txz\n-URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n+URL=https://ci-mirrors.rust-lang.org/rustc/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n curl \"$URL\" | tar xJf - -C \"$sysroot\" --wildcards \"${files_to_extract[@]}\"\n \n # Fix up absolute symlinks from the system image.  This can be removed"}, {"sha": "552afbfee7c175f6d69a5cf2daafe20a24738163", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,6 +1,6 @@\n set -ex\n \n curl -fo /usr/local/bin/sccache \\\n-  https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-02-sccache-x86_64-unknown-linux-musl\n+  https://ci-mirrors.rust-lang.org/rustc/2018-04-02-sccache-x86_64-unknown-linux-musl\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "08065431f981650e7b000281c288220e80f9d4c6", "filename": "src/ci/scripts/collect-cpu-stats.sh", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Fcollect-cpu-stats.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Fcollect-cpu-stats.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fcollect-cpu-stats.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,9 @@\n+#!/bin/bash\n+# Spawn a background process to collect CPU usage statistics which we'll upload\n+# at the end of the build. See the comments in the script here for more\n+# information.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+python src/ci/cpu-usage-over-time.py &> cpu-usage.csv &"}, {"sha": "f0179994e8e4cb5c44d2c0feea09793c487dd0fe", "filename": "src/ci/scripts/install-clang.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Finstall-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Finstall-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-clang.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -17,7 +17,7 @@ if isMacOS; then\n     # Configure `AR` specifically so rustbuild doesn't try to infer it as\n     # `clang-ar` by accident.\n     ciCommandSetEnv AR \"ar\"\n-elif isWindows && [[ -z ${MINGW_URL+x} ]]; then\n+elif isWindows && [[ ${CUSTOM_MINGW-0} -ne 1 ]]; then\n     # If we're compiling for MSVC then we, like most other distribution builders,\n     # switch to clang as the compiler. This'll allow us eventually to enable LTO\n     # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think"}, {"sha": "8b579587b9e1f6ffc255468833fa02eeaf33ecc3", "filename": "src/ci/scripts/install-mingw.sh", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -27,19 +27,38 @@ IFS=$'\\n\\t'\n \n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n+MINGW_ARCHIVE_32=\"i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\"\n+MINGW_ARCHIVE_64=\"x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\"\n+\n if isWindows; then\n-    if [[ -z \"${MINGW_URL+x}\" ]]; then\n-        arch=i686\n-        if [ \"$MSYS_BITS\" = \"64\" ]; then\n-          arch=x86_64\n-        fi\n+    case \"${CI_JOB_NAME}\" in\n+        *i686*)\n+            bits=32\n+            arch=i686\n+            mingw_archive=\"${MINGW_ARCHIVE_32}\"\n+            ;;\n+        *x86_64*)\n+            bits=64\n+            arch=x86_64\n+            mingw_archive=\"${MINGW_ARCHIVE_64}\"\n+            ;;\n+        *)\n+            echo \"src/ci/scripts/install-mingw.sh can't detect the builder's architecture\"\n+            echo \"please tweak it to recognize the builder named '${CI_JOB_NAME}'\"\n+            exit 1\n+            ;;\n+    esac\n+\n+    if [[ \"${CUSTOM_MINGW-0}\" -ne 1 ]]; then\n         pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n             mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${MSYS_BITS}/bin\"\n+        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${bits}/bin\"\n     else\n-        curl -o mingw.7z \"${MINGW_URL}/${MINGW_ARCHIVE}\"\n+        mingw_dir=\"mingw${bits}\"\n+\n+        curl -o mingw.7z \"${MIRRORS_BASE}/${mingw_archive}\"\n         7z x -y mingw.7z > /dev/null\n-        curl -o \"${MINGW_DIR}/bin/gdborig.exe\" \"${MINGW_URL}/2017-04-20-${MSYS_BITS}bit-gdborig.exe\"\n-        ciCommandAddPath \"$(pwd)/${MINGW_DIR}/bin\"\n+        curl -o \"${mingw_dir}/bin/gdborig.exe\" \"${MIRRORS_BASE}/2017-04-20-${bits}bit-gdborig.exe\"\n+        ciCommandAddPath \"$(pwd)/${mingw_dir}/bin\"\n     fi\n fi"}, {"sha": "c02117f459de0463adb7f619398a3140dc3a05ea", "filename": "src/ci/scripts/run-build-from-ci.sh", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Frun-build-from-ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fscripts%2Frun-build-from-ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Frun-build-from-ci.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\n+# Start the CI build. You shouldn't run this locally: call either src/ci/run.sh\n+# or src/ci/docker/run.sh instead.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+export CI=\"true\"\n+export SRC=.\n+\n+# Remove any preexisting rustup installation since it can interfere\n+# with the cargotest step and its auto-detection of things like Clippy in\n+# the environment\n+rustup self uninstall -y || true\n+if [ -z \"${IMAGE+x}\" ]; then\n+    src/ci/run.sh\n+else\n+    src/ci/docker/run.sh \"${IMAGE}\"\n+fi"}, {"sha": "862ded0d5dbf0de67568f7ac76dd07ae799c5d97", "filename": "src/ci/shared.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -4,7 +4,7 @@\n # `source shared.sh`, hence the invalid shebang and not being\n # marked as an executable file in git.\n \n-export MIRRORS_BASE=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n+export MIRRORS_BASE=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n # See http://unix.stackexchange.com/questions/82598\n # Duplicated in docker/dist-various-2/shared.sh"}, {"sha": "9b197c1ecb14076ff8c38d2a5bf5d20e19ced3ba", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -24,6 +24,10 @@ pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n /// appear in the return type).\n #[derive(Copy, Clone, Debug)]\n pub struct OpaqueTypeDecl<'tcx> {\n+\n+    /// The opaque type (`ty::Opaque`) for this declaration.\n+    pub opaque_type: Ty<'tcx>,\n+\n     /// The substitutions that we apply to the opaque type that this\n     /// `impl Trait` desugars to. e.g., if:\n     ///\n@@ -1150,6 +1154,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         self.opaque_types.insert(\n             def_id,\n             OpaqueTypeDecl {\n+                opaque_type: ty,\n                 substs,\n                 definition_span,\n                 concrete_ty: ty_var,"}, {"sha": "0144d51a9693f82c2d422b0aeef6f86dde4824df", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 133, "deletions": 62, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1245,6 +1245,60 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn mk_obligation_for_def_id(\n+        &self,\n+        def_id: DefId,\n+        output_ty: Ty<'tcx>,\n+        cause: ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> PredicateObligation<'tcx> {\n+        let new_trait_ref = ty::TraitRef {\n+            def_id,\n+            substs: self.tcx.mk_substs_trait(output_ty, &[]),\n+        };\n+        Obligation::new(cause, param_env, new_trait_ref.to_predicate())\n+    }\n+\n+    /// Given a closure's `DefId`, return the given name of the closure.\n+    ///\n+    /// This doesn't account for reassignments, but it's only used for suggestions.\n+    fn get_closure_name(\n+        &self,\n+        def_id: DefId,\n+        err: &mut DiagnosticBuilder<'_>,\n+        msg: &str,\n+    ) -> Option<String> {\n+        let get_name = |err: &mut DiagnosticBuilder<'_>, kind: &hir::PatKind| -> Option<String> {\n+            // Get the local name of this closure. This can be inaccurate because\n+            // of the possibility of reassignment, but this should be good enough.\n+            match &kind {\n+                hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n+                    Some(format!(\"{}\", name))\n+                }\n+                _ => {\n+                    err.note(&msg);\n+                    None\n+                }\n+            }\n+        };\n+\n+        let hir = self.tcx.hir();\n+        let hir_id = hir.as_local_hir_id(def_id)?;\n+        let parent_node = hir.get_parent_node(hir_id);\n+        match hir.find(parent_node) {\n+            Some(hir::Node::Stmt(hir::Stmt {\n+                kind: hir::StmtKind::Local(local), ..\n+            })) => get_name(err, &local.pat.kind),\n+            // Different to previous arm because one is `&hir::Local` and the other\n+            // is `P<hir::Local>`.\n+            Some(hir::Node::Local(local)) => get_name(err, &local.pat.kind),\n+            _ => return None,\n+        }\n+    }\n+\n+    /// We tried to apply the bound to an `fn` or closure. Check whether calling it would\n+    /// evaluate to a type that *would* satisfy the trait binding. If it would, suggest calling\n+    /// it: `bar(foo)` \u2192 `bar(foo())`. This case is *very* likely to be hit if `foo` is `async`.\n     fn suggest_fn_call(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -1253,63 +1307,82 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         points_at_arg: bool,\n     ) {\n         let self_ty = trait_ref.self_ty();\n-        match self_ty.kind {\n+        let (def_id, output_ty, callable) = match self_ty.kind {\n+            ty::Closure(def_id, substs) => {\n+                (def_id, self.closure_sig(def_id, substs).output(), \"closure\")\n+            }\n             ty::FnDef(def_id, _) => {\n-                // We tried to apply the bound to an `fn`. Check whether calling it would evaluate\n-                // to a type that *would* satisfy the trait binding. If it would, suggest calling\n-                // it: `bar(foo)` -> `bar(foo)`. This case is *very* likely to be hit if `foo` is\n-                // `async`.\n-                let output_ty = self_ty.fn_sig(self.tcx).output();\n-                let new_trait_ref = ty::TraitRef {\n-                    def_id: trait_ref.def_id(),\n-                    substs: self.tcx.mk_substs_trait(output_ty.skip_binder(), &[]),\n+                (def_id, self_ty.fn_sig(self.tcx).output(), \"function\")\n+            }\n+            _ => return,\n+        };\n+        let msg = format!(\"use parentheses to call the {}\", callable);\n+\n+        let obligation = self.mk_obligation_for_def_id(\n+            trait_ref.def_id(),\n+            output_ty.skip_binder(),\n+            obligation.cause.clone(),\n+            obligation.param_env,\n+        );\n+\n+        match self.evaluate_obligation(&obligation) {\n+            Ok(EvaluationResult::EvaluatedToOk) |\n+            Ok(EvaluationResult::EvaluatedToOkModuloRegions) |\n+            Ok(EvaluationResult::EvaluatedToAmbig) => {}\n+            _ => return,\n+        }\n+        let hir = self.tcx.hir();\n+        // Get the name of the callable and the arguments to be used in the suggestion.\n+        let snippet = match hir.get_if_local(def_id) {\n+            Some(hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_, decl, _, span, ..),\n+                ..\n+            })) => {\n+                err.span_label(*span, \"consider calling this closure\");\n+                let name = match self.get_closure_name(def_id, err, &msg) {\n+                    Some(name) => name,\n+                    None => return,\n                 };\n-                let obligation = Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    new_trait_ref.to_predicate(),\n-                );\n-                match self.evaluate_obligation(&obligation) {\n-                    Ok(EvaluationResult::EvaluatedToOk) |\n-                    Ok(EvaluationResult::EvaluatedToOkModuloRegions) |\n-                    Ok(EvaluationResult::EvaluatedToAmbig) => {\n-                        if let Some(hir::Node::Item(hir::Item {\n-                            ident,\n-                            kind: hir::ItemKind::Fn(.., body_id),\n-                            ..\n-                        })) = self.tcx.hir().get_if_local(def_id) {\n-                            let body = self.tcx.hir().body(*body_id);\n-                            let msg = \"use parentheses to call the function\";\n-                            let snippet = format!(\n-                                \"{}({})\",\n-                                ident,\n-                                body.params.iter()\n-                                    .map(|arg| match &arg.pat.kind {\n-                                        hir::PatKind::Binding(_, _, ident, None)\n-                                        if ident.name != kw::SelfLower => ident.to_string(),\n-                                        _ => \"_\".to_string(),\n-                                    }).collect::<Vec<_>>().join(\", \"),\n-                            );\n-                            // When the obligation error has been ensured to have been caused by\n-                            // an argument, the `obligation.cause.span` points at the expression\n-                            // of the argument, so we can provide a suggestion. This is signaled\n-                            // by `points_at_arg`. Otherwise, we give a more general note.\n-                            if points_at_arg {\n-                                err.span_suggestion(\n-                                    obligation.cause.span,\n-                                    msg,\n-                                    snippet,\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                            } else {\n-                                err.help(&format!(\"{}: `{}`\", msg, snippet));\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n+                let args = decl.inputs.iter()\n+                    .map(|_| \"_\")\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n+                format!(\"{}({})\", name, args)\n+            }\n+            Some(hir::Node::Item(hir::Item {\n+                ident,\n+                kind: hir::ItemKind::Fn(.., body_id),\n+                ..\n+            })) => {\n+                err.span_label(ident.span, \"consider calling this function\");\n+                let body = hir.body(*body_id);\n+                let args = body.params.iter()\n+                    .map(|arg| match &arg.pat.kind {\n+                        hir::PatKind::Binding(_, _, ident, None)\n+                        // FIXME: provide a better suggestion when encountering `SelfLower`, it\n+                        // should suggest a method call.\n+                        if ident.name != kw::SelfLower => ident.to_string(),\n+                        _ => \"_\".to_string(),\n+                    })\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n+                format!(\"{}({})\", ident, args)\n             }\n-            _ => {}\n+            _ => return,\n+        };\n+        if points_at_arg {\n+            // When the obligation error has been ensured to have been caused by\n+            // an argument, the `obligation.cause.span` points at the expression\n+            // of the argument, so we can provide a suggestion. This is signaled\n+            // by `points_at_arg`. Otherwise, we give a more general note.\n+            err.span_suggestion(\n+                obligation.cause.span,\n+                &msg,\n+                snippet,\n+                Applicability::HasPlaceholders,\n+            );\n+        } else {\n+            err.help(&format!(\"{}: `{}`\", msg, snippet));\n         }\n     }\n \n@@ -1410,12 +1483,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if let ty::Ref(_, t_type, _) = trait_type.kind {\n                     trait_type = t_type;\n \n-                    let substs = self.tcx.mk_substs_trait(trait_type, &[]);\n-                    let new_trait_ref = ty::TraitRef::new(trait_ref.def_id, substs);\n-                    let new_obligation = Obligation::new(\n+                    let new_obligation = self.mk_obligation_for_def_id(\n+                        trait_ref.def_id,\n+                        trait_type,\n                         ObligationCause::dummy(),\n                         obligation.param_env,\n-                        new_trait_ref.to_predicate(),\n                     );\n \n                     if self.predicate_may_hold(&new_obligation) {\n@@ -1473,12 +1545,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     hir::Mutability::Immutable => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n-                let substs = self.tcx.mk_substs_trait(&trait_type, &[]);\n-                let new_trait_ref = ty::TraitRef::new(trait_ref.skip_binder().def_id, substs);\n-                let new_obligation = Obligation::new(\n+                let new_obligation = self.mk_obligation_for_def_id(\n+                    trait_ref.skip_binder().def_id,\n+                    trait_type,\n                     ObligationCause::dummy(),\n                     obligation.param_env,\n-                    new_trait_ref.to_predicate(),\n                 );\n \n                 if self.evaluate_obligation_no_overflow("}, {"sha": "e5f4e793132f4b0d74166cfa1f955e5f970f1a90", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -22,16 +22,6 @@ use {\n     std::iter::FromIterator,\n };\n \n-/// Indicates the state of a query for a given key in a query map.\n-pub(super) enum QueryResult<'tcx> {\n-    /// An already executing query. The query job can be used to await for its completion.\n-    Started(Lrc<QueryJob<'tcx>>),\n-\n-    /// The query panicked. Queries trying to wait on this will raise a fatal error or\n-    /// silently panic.\n-    Poisoned,\n-}\n-\n /// Represents a span and a query key.\n #[derive(Clone, Debug)]\n pub struct QueryInfo<'tcx> {"}, {"sha": "fc55b665c1d0e671333e3d9f725142292e9ee02a", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -7,7 +7,7 @@ use crate::ty::tls;\n use crate::ty::{self, TyCtxt};\n use crate::ty::query::Query;\n use crate::ty::query::config::{QueryConfig, QueryDescription};\n-use crate::ty::query::job::{QueryJob, QueryResult, QueryInfo};\n+use crate::ty::query::job::{QueryJob, QueryInfo};\n \n use errors::DiagnosticBuilder;\n use errors::Level;\n@@ -52,6 +52,16 @@ impl<T> QueryValue<T> {\n     }\n }\n \n+/// Indicates the state of a query for a given key in a query map.\n+pub(super) enum QueryResult<'tcx> {\n+    /// An already executing query. The query job can be used to await for its completion.\n+    Started(Lrc<QueryJob<'tcx>>),\n+\n+    /// The query panicked. Queries trying to wait on this will raise a fatal error or\n+    /// silently panic.\n+    Poisoned,\n+}\n+\n impl<'tcx, M: QueryConfig<'tcx>> Default for QueryCache<'tcx, M> {\n     fn default() -> QueryCache<'tcx, M> {\n         QueryCache {\n@@ -676,8 +686,6 @@ macro_rules! define_queries_inner {\n         [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n \n         use std::mem;\n-        #[cfg(parallel_compiler)]\n-        use ty::query::job::QueryResult;\n         use rustc_data_structures::sharded::Sharded;\n         use crate::{\n             rustc_data_structures::stable_hasher::HashStable,"}, {"sha": "e575528a4633cd3d68c0a7a09cf56a081c90b760", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -318,6 +318,7 @@ E0590: include_str!(\"./error_codes/E0590.md\"),\n E0591: include_str!(\"./error_codes/E0591.md\"),\n E0592: include_str!(\"./error_codes/E0592.md\"),\n E0593: include_str!(\"./error_codes/E0593.md\"),\n+E0594: include_str!(\"./error_codes/E0594.md\"),\n E0595: include_str!(\"./error_codes/E0595.md\"),\n E0596: include_str!(\"./error_codes/E0596.md\"),\n E0597: include_str!(\"./error_codes/E0597.md\"),\n@@ -350,6 +351,7 @@ E0635: include_str!(\"./error_codes/E0635.md\"),\n E0636: include_str!(\"./error_codes/E0636.md\"),\n E0638: include_str!(\"./error_codes/E0638.md\"),\n E0639: include_str!(\"./error_codes/E0639.md\"),\n+E0641: include_str!(\"./error_codes/E0641.md\"),\n E0642: include_str!(\"./error_codes/E0642.md\"),\n E0643: include_str!(\"./error_codes/E0643.md\"),\n E0644: include_str!(\"./error_codes/E0644.md\"),\n@@ -566,7 +568,6 @@ E0744: include_str!(\"./error_codes/E0744.md\"),\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n //  E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n-    E0594, // cannot assign to {}\n //  E0598, // lifetime of {} is too short to guarantee its contents can be...\n //  E0611, // merged into E0616\n //  E0612, // merged into E0609\n@@ -584,7 +585,6 @@ E0744: include_str!(\"./error_codes/E0744.md\"),\n     E0634, // type has conflicting packed representaton hints\n     E0637, // \"'_\" is not a valid lifetime bound\n     E0640, // infer outlives requirements\n-    E0641, // cannot cast to/from a pointer with an unknown kind\n //  E0645, // trait aliases not finished\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0667, // `impl Trait` in projections"}, {"sha": "ad8eb631e63b16a733018e86e44861304acfc86a", "filename": "src/librustc_error_codes/error_codes/E0594.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0594.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0594.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0594.md?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,23 @@\n+A non-mutable value was assigned a value.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0594\n+struct SolarSystem {\n+    earth: i32,\n+}\n+\n+let ss = SolarSystem { earth: 3 };\n+ss.earth = 2; // error!\n+```\n+\n+To fix this error, declare `ss` as mutable by using the `mut` keyword:\n+\n+```\n+struct SolarSystem {\n+    earth: i32,\n+}\n+\n+let mut ss = SolarSystem { earth: 3 }; // declaring `ss` as mutable\n+ss.earth = 2; // ok!\n+```"}, {"sha": "e39bebce1fea6e0dcc8cfa5f448d494a9bc5b09c", "filename": "src/librustc_error_codes/error_codes/E0641.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,19 @@\n+Attempted to cast to/from a pointer with an unknown kind.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0641\n+let b = 0 as *const _; // error\n+```\n+\n+Must give information for type of pointer that is being cast from/to if the\n+type cannot be inferred.\n+\n+```\n+// Creating a pointer from reference: type can be inferred\n+let a = &(String::from(\"Hello world!\")) as *const _; // Ok\n+\n+let b = 0 as *const i32; // Ok\n+\n+let c: *const i32 = 0 as *const _; // Ok\n+```\n\\ No newline at end of file"}, {"sha": "8dc0fb9bd77f5e1e01abcc2303ffdf5e60cf65fe", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -466,11 +466,12 @@ impl<'a> Resolver<'a> {\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         bitflags::bitflags! {\n             struct Flags: u8 {\n-                const MACRO_RULES        = 1 << 0;\n-                const MODULE             = 1 << 1;\n-                const MISC_SUGGEST_CRATE = 1 << 2;\n-                const MISC_SUGGEST_SELF  = 1 << 3;\n-                const MISC_FROM_PRELUDE  = 1 << 4;\n+                const MACRO_RULES          = 1 << 0;\n+                const MODULE               = 1 << 1;\n+                const DERIVE_HELPER_COMPAT = 1 << 2;\n+                const MISC_SUGGEST_CRATE   = 1 << 3;\n+                const MISC_SUGGEST_SELF    = 1 << 4;\n+                const MISC_FROM_PRELUDE    = 1 << 5;\n             }\n         }\n \n@@ -528,8 +529,10 @@ impl<'a> Resolver<'a> {\n                         match this.resolve_macro_path(derive, Some(MacroKind::Derive),\n                                                       parent_scope, true, force) {\n                             Ok((Some(ext), _)) => if ext.helper_attrs.contains(&ident.name) {\n-                                let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n-                                result = ok(res, derive.span, this.arenas);\n+                                let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n+                                               ty::Visibility::Public, derive.span, ExpnId::root())\n+                                               .to_name_binding(this.arenas);\n+                                result = Ok((binding, Flags::DERIVE_HELPER_COMPAT));\n                                 break;\n                             }\n                             Ok(_) | Err(Determinacy::Determined) => {}\n@@ -659,13 +662,17 @@ impl<'a> Resolver<'a> {\n                         let (res, innermost_res) = (binding.res(), innermost_binding.res());\n                         if res != innermost_res {\n                             let builtin = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n-                            let derive_helper = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n+                            let is_derive_helper_compat = |res, flags: Flags| {\n+                                res == Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper) &&\n+                                flags.contains(Flags::DERIVE_HELPER_COMPAT)\n+                            };\n \n                             let ambiguity_error_kind = if is_import {\n                                 Some(AmbiguityKind::Import)\n                             } else if innermost_res == builtin || res == builtin {\n                                 Some(AmbiguityKind::BuiltinAttr)\n-                            } else if innermost_res == derive_helper || res == derive_helper {\n+                            } else if is_derive_helper_compat(innermost_res, innermost_flags) ||\n+                                      is_derive_helper_compat(res, flags) {\n                                 Some(AmbiguityKind::DeriveHelper)\n                             } else if innermost_flags.contains(Flags::MACRO_RULES) &&\n                                       flags.contains(Flags::MODULE) &&"}, {"sha": "50c1a74fe911b80bc067836e453baddb70d1f8cf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 107, "deletions": 4, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -147,7 +147,7 @@ use crate::TypeAndSubsts;\n use crate::lint;\n use crate::util::captures::Captures;\n use crate::util::common::{ErrorReported, indenter};\n-use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashSet, HirIdMap};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, HirIdMap};\n \n pub use self::Expectation::*;\n use self::autoderef::Autoderef;\n@@ -231,6 +231,13 @@ pub struct Inherited<'a, 'tcx> {\n     // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n     opaque_types: RefCell<DefIdMap<OpaqueTypeDecl<'tcx>>>,\n \n+    /// A map from inference variables created from opaque\n+    /// type instantiations (`ty::Infer`) to the actual opaque\n+    /// type (`ty::Opaque`). Used during fallback to map unconstrained\n+    /// opaque type inference variables to their corresponding\n+    /// opaque type.\n+    opaque_types_vars: RefCell<FxHashMap<Ty<'tcx>, Ty<'tcx>>>,\n+\n     /// Each type parameter has an implicit region bound that\n     /// indicates it must outlive at least the function body (the user\n     /// may specify stronger requirements). This field indicates the\n@@ -696,6 +703,7 @@ impl Inherited<'a, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             opaque_types: RefCell::new(Default::default()),\n+            opaque_types_vars: RefCell::new(Default::default()),\n             implicit_region_bound,\n             body_id,\n         }\n@@ -937,9 +945,46 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         // All type checking constraints were added, try to fallback unsolved variables.\n         fcx.select_obligations_where_possible(false, |_| {});\n         let mut fallback_has_occurred = false;\n+\n+        // We do fallback in two passes, to try to generate\n+        // better error messages.\n+        // The first time, we do *not* replace opaque types.\n         for ty in &fcx.unsolved_variables() {\n-            fallback_has_occurred |= fcx.fallback_if_possible(ty);\n+            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::NoOpaque);\n+        }\n+        // We now see if we can make progress. This might\n+        // cause us to unify inference variables for opaque types,\n+        // since we may have unified some other type variables\n+        // during the first phase of fallback.\n+        // This means that we only replace inference variables with their underlying\n+        // opaque types as a last resort.\n+        //\n+        // In code like this:\n+        //\n+        // ```rust\n+        // type MyType = impl Copy;\n+        // fn produce() -> MyType { true }\n+        // fn bad_produce() -> MyType { panic!() }\n+        // ```\n+        //\n+        // we want to unify the opaque inference variable in `bad_produce`\n+        // with the diverging fallback for `panic!` (e.g. `()` or `!`).\n+        // This will produce a nice error message about conflicting concrete\n+        // types for `MyType`.\n+        //\n+        // If we had tried to fallback the opaque inference variable to `MyType`,\n+        // we will generate a confusing type-check error that does not explicitly\n+        // refer to opaque types.\n+        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+\n+        // We now run fallback again, but this time we allow it to replace\n+        // unconstrained opaque type variables, in addition to performing\n+        // other kinds of fallback.\n+        for ty in &fcx.unsolved_variables() {\n+            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::All);\n         }\n+\n+        // See if we can make any more progress.\n         fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n@@ -2499,6 +2544,16 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n+/// Controls how we perform fallback for unconstrained\n+/// type variables.\n+enum FallbackMode {\n+    /// Do not fallback type variables to opaque types.\n+    NoOpaque,\n+    /// Perform all possible kinds of fallback, including\n+    /// turning type variables to opaque types.\n+    All,\n+}\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn new(\n         inh: &'a Inherited<'a, 'tcx>,\n@@ -2864,8 +2919,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         let mut opaque_types = self.opaque_types.borrow_mut();\n+        let mut opaque_types_vars = self.opaque_types_vars.borrow_mut();\n         for (ty, decl) in opaque_type_map {\n             let _ = opaque_types.insert(ty, decl);\n+            let _ = opaque_types_vars.insert(decl.concrete_ty, decl.opaque_type);\n         }\n \n         value\n@@ -3078,7 +3135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to Error.\n     // The return value indicates whether fallback has occurred.\n-    fn fallback_if_possible(&self, ty: Ty<'tcx>) -> bool {\n+    fn fallback_if_possible(&self, ty: Ty<'tcx>, mode: FallbackMode) -> bool {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -3088,7 +3145,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n             Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n-            Neither => return false,\n+            Neither => {\n+                // This type variable was created from the instantiation of an opaque\n+                // type. The fact that we're attempting to perform fallback for it\n+                // means that the function neither constrained it to a concrete\n+                // type, nor to the opaque type itself.\n+                //\n+                // For example, in this code:\n+                //\n+                //```\n+                // type MyType = impl Copy;\n+                // fn defining_use() -> MyType { true }\n+                // fn other_use() -> MyType { defining_use() }\n+                // ```\n+                //\n+                // `defining_use` will constrain the instantiated inference\n+                // variable to `bool`, while `other_use` will constrain\n+                // the instantiated inference variable to `MyType`.\n+                //\n+                // When we process opaque types during writeback, we\n+                // will handle cases like `other_use`, and not count\n+                // them as defining usages\n+                //\n+                // However, we also need to handle cases like this:\n+                //\n+                // ```rust\n+                // pub type Foo = impl Copy;\n+                // fn produce() -> Option<Foo> {\n+                //     None\n+                //  }\n+                //  ```\n+                //\n+                // In the above snippet, the inference varaible created by\n+                // instantiating `Option<Foo>` will be completely unconstrained.\n+                // We treat this as a non-defining use by making the inference\n+                // variable fall back to the opaque type itself.\n+                if let FallbackMode::All = mode {\n+                    if let Some(opaque_ty) = self.opaque_types_vars.borrow().get(ty) {\n+                        debug!(\"fallback_if_possible: falling back opaque type var {:?} to {:?}\",\n+                               ty, opaque_ty);\n+                        *opaque_ty\n+                    } else {\n+                        return false;\n+                    }\n+                } else {\n+                    return false;\n+                }\n+            },\n         };\n         debug!(\"fallback_if_possible: defaulting `{:?}` to `{:?}`\", ty, fallback);\n         self.demand_eqtype(syntax_pos::DUMMY_SP, ty, fallback);"}, {"sha": "197efb7cac80d02f0fefcb17e7f71dc06fdd17dc", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -396,38 +396,51 @@ function getSearchElement() {\n \n     document.onkeypress = handleShortcut;\n     document.onkeydown = handleShortcut;\n-    document.onclick = function(ev) {\n-        if (hasClass(ev.target, \"collapse-toggle\")) {\n-            collapseDocs(ev.target, \"toggle\");\n-        } else if (hasClass(ev.target.parentNode, \"collapse-toggle\")) {\n-            collapseDocs(ev.target.parentNode, \"toggle\");\n-        } else if (ev.target.tagName === \"SPAN\" && hasClass(ev.target.parentNode, \"line-numbers\")) {\n-            var prev_id = 0;\n \n-            var set_fragment = function(name) {\n-                if (browserSupportsHistoryApi()) {\n-                    history.replaceState(null, null, \"#\" + name);\n-                    highlightSourceLines();\n-                } else {\n-                    location.replace(\"#\" + name);\n-                }\n-            };\n+    var handleSourceHighlight = (function() {\n+        var prev_line_id = 0;\n \n-            var cur_id = parseInt(ev.target.id, 10);\n+        var set_fragment = function(name) {\n+            var x = window.scrollX,\n+                y = window.scrollY;\n+            if (browserSupportsHistoryApi()) {\n+                history.replaceState(null, null, \"#\" + name);\n+                highlightSourceLines();\n+            } else {\n+                location.replace(\"#\" + name);\n+            }\n+            // Prevent jumps when selecting one or many lines\n+            window.scrollTo(x, y);\n+        };\n+\n+        return function(ev) {\n+            var cur_line_id = parseInt(ev.target.id, 10);\n+            ev.preventDefault();\n \n-            if (ev.shiftKey && prev_id) {\n-                if (prev_id > cur_id) {\n-                    var tmp = prev_id;\n-                    prev_id = cur_id;\n-                    cur_id = tmp;\n+            if (ev.shiftKey && prev_line_id) {\n+                // Swap selection if needed\n+                if (prev_line_id > cur_line_id) {\n+                    var tmp = prev_line_id;\n+                    prev_line_id = cur_line_id;\n+                    cur_line_id = tmp;\n                 }\n \n-                set_fragment(prev_id + \"-\" + cur_id);\n+                set_fragment(prev_line_id + \"-\" + cur_line_id);\n             } else {\n-                prev_id = cur_id;\n+                prev_line_id = cur_line_id;\n \n-                set_fragment(cur_id);\n+                set_fragment(cur_line_id);\n             }\n+        }\n+    })();\n+\n+    document.onclick = function(ev) {\n+        if (hasClass(ev.target, \"collapse-toggle\")) {\n+            collapseDocs(ev.target, \"toggle\");\n+        } else if (hasClass(ev.target.parentNode, \"collapse-toggle\")) {\n+            collapseDocs(ev.target.parentNode, \"toggle\");\n+        } else if (ev.target.tagName === \"SPAN\" && hasClass(ev.target.parentNode, \"line-numbers\")) {\n+            handleSourceHighlight(ev);\n         } else if (hasClass(getHelpElement(), \"hidden\") === false) {\n             var help = getHelpElement();\n             var is_inside_help_popup = ev.target !== help && help.contains(ev.target);"}, {"sha": "d1cb0862d82a835abb877dd927ddcd206e816de6", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -791,7 +791,7 @@ impl dyn Error {\n ///\n /// [`Error`]: trait.Error.html\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Chain<'a> {\n     current: Option<&'a (dyn Error + 'static)>,\n }"}, {"sha": "32023a5b75bfb95c0a3da417c48ed679ac56e01d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -244,7 +244,6 @@\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(clamp)]\n-#![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "097e4c75065c96b9fe13f1defffd15ae823cc672", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -72,4 +72,5 @@ LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); })\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "d8ccf36852a512a206caf90411db783dad2a6e13", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -16,3 +16,4 @@ LL |     *s.pointer += 1;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "864d933da127fedb23d901021c21298025b856ad", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -6,3 +6,4 @@ LL |     foo = 6;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "1fdeb812bf8bb8e4ca8f1ddd73141d425cd9e762", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -27,5 +27,5 @@ LL |     let x:  &mut isize = &mut **t0;\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0502, E0596.\n+Some errors have detailed explanations: E0502, E0594, E0596.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "6f2b20285b9318f2253c79523264c8dd75ac7925", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -112,4 +112,5 @@ LL |     *x.y_mut() = 3;\n \n error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "246a7981ae3c87f31107b1ce139030dd97df6bdf", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -56,4 +56,5 @@ LL |     **x = 3;\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "64c2f419ffa65eff5ce39c68f257e55a3fcf8795", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -50,5 +50,5 @@ LL |     let c1 = |y: &'static mut isize| x = y;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0500, E0524.\n+Some errors have detailed explanations: E0500, E0524, E0594.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "ae9167757a0ae756dd1df38adab93ded49a04ef6", "filename": "src/test/ui/borrowck/borrowck-issue-14498.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -96,4 +96,5 @@ LL |     drop(p);\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0506`.\n+Some errors have detailed explanations: E0506, E0594.\n+For more information about an error, try `rustc --explain E0506`."}, {"sha": "2f92c1ebe5e18d7ddbc3ffe6db31c891db34645c", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-ref-index.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -31,4 +31,5 @@ LL |     s[2] = 20;\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0502`.\n+Some errors have detailed explanations: E0502, E0594.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "baf649f9127a50ee87da84e1b328e28a9396b5d7", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -24,4 +24,5 @@ LL |     let _ = &mut map[\"peter\"];\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "49d6c2473f6a3fdb97247a18073de9d837b350ef", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -18,3 +18,4 @@ LL |     give_any(|y| x = Some(y));\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "b7623a54056d809321115d790a204aa8c2aac4ba", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -84,4 +84,5 @@ LL |         v.y = 2;\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors have detailed explanations: E0382, E0594.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "1cdcc18632c62c3193abdca0616cca1c060c089b", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -50,4 +50,5 @@ LL |         || { &mut x.0; };\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "1cdcc18632c62c3193abdca0616cca1c060c089b", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -50,4 +50,5 @@ LL |         || { &mut x.0; };\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "72547a40352c98793e4e3d63f0f15b91cefa22de", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -375,4 +375,5 @@ LL |     &mut X.0;\n \n error: aborting due to 38 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "0eae2c71e4a199313c223a017246797420c74d9f", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -15,4 +15,5 @@ LL |     x.b = 22;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0381`.\n+Some errors have detailed explanations: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "f55e1a27f475e9211e8ee789b413637017d12c12", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -15,4 +15,5 @@ LL |     x.0 = 1;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0381`.\n+Some errors have detailed explanations: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "2d6e83c9e82f9139964c8a6131ac41da900f5180", "filename": "src/test/ui/cannot-mutate-captured-non-mut-var.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -16,4 +16,5 @@ LL |     to_fn_once(move|| { s.read_to_end(&mut Vec::new()); });\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "7e60f3cd8ffa420a538344cb11dbe6a3890ddf8e", "filename": "src/test/ui/closures/closure-immutable-outer-variable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     foo(Box::new(move || y = false) as Box<_>);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "b9c0af33c39cdd410575086a7ccef68a474a0509", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -36,3 +36,4 @@ LL |     *OH_YES = 99;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "1f578d18a1ce5947e5e9c6aa644f3eacf3ce4319", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -24,4 +24,5 @@ LL |     s.x += 1;\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "ce0d697238c6b6c85338ac280b94bf47eee2965c", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -98,4 +98,5 @@ LL |     *x.0 = 1;\n \n error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "c47750b6f4e69cc72dda552ed86444396b7a7f7d", "filename": "src/test/ui/error-codes/E0389.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     fancy_ref.num = 6;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f4d96f4e45a568f865e6bf359a6434edfa3517c1", "filename": "src/test/ui/error-codes/E0594.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -6,3 +6,4 @@ LL |     NUM = 20;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f7ab56da8de97514a965a4a35542c42a7828fc75", "filename": "src/test/ui/fn/fn-closure-mutable-capture.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -12,3 +12,4 @@ LL |     bar(move || x = 1);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "7238dd14433ce888cfba8b7b303acd6cec186471", "filename": "src/test/ui/immut-function-arguments.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimmut-function-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimmut-function-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimmut-function-arguments.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -16,3 +16,4 @@ LL |     let _frob = |q: Box<isize>| { *q = 2; };\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "f7744ef1b3eaeb0da606b0e3625755b39090bca1", "filename": "src/test/ui/impl-trait/where-allowed-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,9 @@\n+//! Ideally, these tests would go in `where-allowed.rs`, but we bail out\n+//! too early to display them.\n+use std::fmt::Debug;\n+\n+// Disallowed\n+fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+//~^ ERROR opaque type expands to a recursive type\n+\n+fn main() {}"}, {"sha": "1de15014c1f8dd3cd46ce46f92d597eaffd3fc71", "filename": "src/test/ui/impl-trait/where-allowed-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,11 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/where-allowed-2.rs:6:30\n+   |\n+LL | fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+   |                              ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "211a14ed4dd9998a24445a990b51bb94ba11a5b5", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -11,10 +11,6 @@ fn in_return() -> impl Debug { panic!() }\n // Allowed\n fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n-// Disallowed\n-fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n-//~^ ERROR type annotations needed\n-\n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n@@ -60,7 +56,6 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n-//~| ERROR type annotations needed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }"}, {"sha": "e5d2feff51cc45857419a51e850bb6fa138543ac", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 45, "deletions": 57, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:51:51\n+  --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:60:57\n+  --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:124:16\n+  --> $DIR/where-allowed.rs:119:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:160:23\n+  --> $DIR/where-allowed.rs:155:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:164:39\n+  --> $DIR/where-allowed.rs:159:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,242 +44,230 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:19:40\n+  --> $DIR/where-allowed.rs:15:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:23:42\n+  --> $DIR/where-allowed.rs:19:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:27:38\n+  --> $DIR/where-allowed.rs:23:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:31:40\n+  --> $DIR/where-allowed.rs:27:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:35:49\n+  --> $DIR/where-allowed.rs:31:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:39:51\n+  --> $DIR/where-allowed.rs:35:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:43:55\n+  --> $DIR/where-allowed.rs:39:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:47:57\n+  --> $DIR/where-allowed.rs:43:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:51:51\n+  --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:56:53\n+  --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:60:57\n+  --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:66:59\n+  --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:70:38\n+  --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:74:40\n+  --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:87:32\n+  --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:91:41\n+  --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:95:27\n+  --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:100:25\n+  --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:102:20\n+  --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:113:23\n+  --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:131:34\n+  --> $DIR/where-allowed.rs:126:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:144:33\n+  --> $DIR/where-allowed.rs:139:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:147:31\n+  --> $DIR/where-allowed.rs:142:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:164:39\n+  --> $DIR/where-allowed.rs:159:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:169:16\n+  --> $DIR/where-allowed.rs:164:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:174:24\n+  --> $DIR/where-allowed.rs:169:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:179:6\n+  --> $DIR/where-allowed.rs:174:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:185:24\n+  --> $DIR/where-allowed.rs:180:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:191:11\n+  --> $DIR/where-allowed.rs:186:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:198:15\n+  --> $DIR/where-allowed.rs:193:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:205:24\n+  --> $DIR/where-allowed.rs:200:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:212:17\n+  --> $DIR/where-allowed.rs:207:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:219:22\n+  --> $DIR/where-allowed.rs:214:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:225:29\n+  --> $DIR/where-allowed.rs:220:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:227:46\n+  --> $DIR/where-allowed.rs:222:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n-error[E0282]: type annotations needed\n-  --> $DIR/where-allowed.rs:15:30\n-   |\n-LL | fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n-   |                              ^^^^^^^^^^ cannot infer type\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/where-allowed.rs:60:49\n-   |\n-LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^ cannot infer type\n-\n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:160:1\n+  --> $DIR/where-allowed.rs:155:1\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:124:5\n+  --> $DIR/where-allowed.rs:119:5\n    |\n LL |     type Out = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 42 previous errors\n \n-Some errors have detailed explanations: E0282, E0562, E0658, E0666.\n-For more information about an error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0562, E0658, E0666.\n+For more information about an error, try `rustc --explain E0562`."}, {"sha": "3c400d6eefaa8de6aefa13d08132c171df820de6", "filename": "src/test/ui/issues/issue-45730.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -30,3 +30,4 @@ LL |     let x = 0 as *const i32 as *const _ as *mut _;\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0641`."}, {"sha": "ca19c2501205d48dec17ff4cc86336a27e72cadf", "filename": "src/test/ui/issues/issue-46023.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-46023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-46023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46023.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -9,3 +9,4 @@ LL |         x = 1;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "c72f580f24391c5730d727e8b716d2f9c770f167", "filename": "src/test/ui/issues/issue-46604.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -12,4 +12,5 @@ LL |     buf[0]=2;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0017`.\n+Some errors have detailed explanations: E0017, E0594.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "c91083955b8205b30678ec9c4abc18d370113a8f", "filename": "src/test/ui/issues/issue-51244.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     *my_ref = 0;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "3c208935f31f6ddeaebebc86d3d1b38633110a58", "filename": "src/test/ui/issues/issue-51515.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -18,3 +18,4 @@ LL |     *bar = 64;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "15323ce9a9755561f943f3d797cd97f5fbdc5e23", "filename": "src/test/ui/mut/mutable-class-fields-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     self.how_hungry -= 5;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "40a0dc9b29c238223d00e8aab5b98582d59eef48", "filename": "src/test/ui/mut/mutable-class-fields.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |   nyan.how_hungry = 0;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "b8f5cc86500c5aa6c47a0d1a11519e4e949c1f03", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -156,4 +156,5 @@ LL | |         *x = 1;});\n \n error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "a44acfb5fc3541c0a5c746f1951b55ea239afc7b", "filename": "src/test/ui/nll/constant-thread-locals-issue-47053.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -6,3 +6,4 @@ LL |     FOO = 6;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "31b061b61d19d5ead1c540c1adc485e40eaaa649", "filename": "src/test/ui/nll/generator-upvar-mutability.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -9,3 +9,4 @@ LL |         x = 1;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "8d48b00f8d1f19088a89c8fb53ec583fe309afbf", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     fancy_ref.num = 6;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "c91083955b8205b30678ec9c4abc18d370113a8f", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -8,3 +8,4 @@ LL |     *my_ref = 0;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "4c416105035d7e7681d022d0432ce73503634105", "filename": "src/test/ui/nll/issue-57989.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -20,4 +20,5 @@ LL |     g;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0506`.\n+Some errors have detailed explanations: E0506, E0594.\n+For more information about an error, try `rustc --explain E0506`."}, {"sha": "081038c573acfdcb82cb7e8666830c9cdde2c4d4", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -10,3 +10,4 @@ LL |     let mut y = 0 as *const _;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0641`."}, {"sha": "370a1a2794dcf571e158a527c50186b844995642", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowing-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing-2.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,12 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_derive(same_name, attributes(same_name))]\n+pub fn derive_a(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "5204d72b980c16cdd749095f5eb2e54273f7cbc1", "filename": "src/test/ui/proc-macro/derive-helper-shadowing-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing-2.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,16 @@\n+// If a derive macro introduces a helper attribute with the same name as that macro,\n+// then make sure that it's usable without ambiguities.\n+\n+// check-pass\n+// aux-build:derive-helper-shadowing-2.rs\n+\n+#[macro_use]\n+extern crate derive_helper_shadowing_2;\n+\n+#[derive(same_name)]\n+struct S {\n+    #[same_name] // OK, no ambiguity, derive helpers have highest priority\n+    field: u8,\n+}\n+\n+fn main() {}"}, {"sha": "6147e96a74bf1e3733635d2bf8d3bf115a607042", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -19,11 +19,11 @@ macro_rules! gen_helper_use {\n #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n #[derive(Empty)]\n struct S {\n-    #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n+    #[empty_helper] // OK, no ambiguity, derive helpers have highest priority\n     field: [u8; {\n         use empty_helper; //~ ERROR `empty_helper` is ambiguous\n \n-        #[empty_helper] //~ ERROR `empty_helper` is ambiguous\n+        #[empty_helper] // OK, no ambiguity, derive helpers have highest priority\n         struct U;\n \n         mod inner {"}, {"sha": "76434860a4956ef1b9812dd95bcef304d90256ac", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -61,42 +61,6 @@ LL | use test_macros::empty_attr as empty_helper;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n \n-error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/derive-helper-shadowing.rs:22:7\n-   |\n-LL |     #[empty_helper]\n-   |       ^^^^^^^^^^^^ ambiguous name\n-   |\n-note: `empty_helper` could refer to the derive helper attribute defined here\n-  --> $DIR/derive-helper-shadowing.rs:20:10\n-   |\n-LL | #[derive(Empty)]\n-   |          ^^^^^\n-note: `empty_helper` could also refer to the attribute macro imported here\n-  --> $DIR/derive-helper-shadowing.rs:10:5\n-   |\n-LL | use test_macros::empty_attr as empty_helper;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n-\n-error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/derive-helper-shadowing.rs:26:11\n-   |\n-LL |         #[empty_helper]\n-   |           ^^^^^^^^^^^^ ambiguous name\n-   |\n-note: `empty_helper` could refer to the derive helper attribute defined here\n-  --> $DIR/derive-helper-shadowing.rs:20:10\n-   |\n-LL | #[derive(Empty)]\n-   |          ^^^^^\n-note: `empty_helper` could also refer to the attribute macro imported here\n-  --> $DIR/derive-helper-shadowing.rs:10:5\n-   |\n-LL | use test_macros::empty_attr as empty_helper;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "d6a89006bc0fb9a489ef4934089e0cacd6c8b04e", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -18,3 +18,4 @@ LL |         *x += 1;\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "a6f2f3ec3096858df5aacd0b9078ff330b191166", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -18,3 +18,4 @@ LL |             *n += 1;\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "156162c9027c318a89675aabf092739df0a218aa", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+#![feature(async_closure)]\n use std::future::Future;\n \n async fn foo() {}\n@@ -7,4 +8,6 @@ fn bar(f: impl Future<Output=()>) {}\n \n fn main() {\n     bar(foo); //~ERROR E0277\n+    let async_closure = async || ();\n+    bar(async_closure); //~ERROR E0277\n }"}, {"sha": "05583876a066c3aca42f206fce868e9c75ebd380", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `fn() -> impl std::future::Future {foo}: std::future::Future` is not satisfied\n-  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:9:9\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n+LL | async fn foo() {}\n+   |          --- consider calling this function\n+LL | \n LL | fn bar(f: impl Future<Output=()>) {}\n    |    ---         ----------------- required by this bound in `bar`\n ...\n@@ -10,6 +13,20 @@ LL |     bar(foo);\n    |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n    |         help: use parentheses to call the function: `foo()`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]: std::future::Future` is not satisfied\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n+   |\n+LL | fn bar(f: impl Future<Output=()>) {}\n+   |    ---         ----------------- required by this bound in `bar`\n+...\n+LL |     let async_closure = async || ();\n+   |                         -------- consider calling this closure\n+LL |     bar(async_closure);\n+   |         ^^^^^^^^^^^^^\n+   |         |\n+   |         the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   |         help: use parentheses to call the closure: `async_closure()`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4303e5c54056977b86abc8fdc9d83b957a1ea43d", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -15,4 +15,6 @@ fn bar(f: impl T<O=()>) {}\n \n fn main() {\n     bar(foo); //~ERROR E0277\n+    let closure = || S;\n+    bar(closure); //~ERROR E0277\n }"}, {"sha": "91f60e8f426c4fa552a8c5bb68c304a2cccca99f", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n+LL | fn foo() -> impl T<O=()> { S }\n+   |    --- consider calling this function\n+LL | \n LL | fn bar(f: impl T<O=()>) {}\n    |    ---         ------- required by this bound in `bar`\n ...\n@@ -10,6 +13,20 @@ LL |     bar(foo);\n    |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n    |         help: use parentheses to call the function: `foo()`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n+  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n+   |\n+LL | fn bar(f: impl T<O=()>) {}\n+   |    ---         ------- required by this bound in `bar`\n+...\n+LL |     let closure = || S;\n+   |                   -- consider calling this closure\n+LL |     bar(closure);\n+   |         ^^^^^^^\n+   |         |\n+   |         the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |         help: use parentheses to call the closure: `closure()`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b4981279a238b1f955d98aafdcd2f1727f5470b3", "filename": "src/test/ui/suggestions/suggest-ref-mut.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -35,3 +35,4 @@ LL |         ref quo => { *quo = 32; },\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "e5dc0e72edfc78b1786049140f6324bc02ddeb4d", "filename": "src/test/ui/thread-local-mutation.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fthread-local-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Fthread-local-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-mutation.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -6,3 +6,4 @@ LL |     S = \"after\";\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "fe1ca2230dacade16cd3108df900f4f594ce49cb", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -0,0 +1,28 @@\n+// Tests that we correctly handle the instantiated\n+// inference variable being completely unconstrained.\n+//\n+// check-pass\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl Copy;\n+\n+enum Wrapper<T> {\n+    First(T),\n+    Second\n+}\n+\n+// This method constrains `Foo` to be `bool`\n+fn constrained_foo() -> Foo {\n+    true\n+}\n+\n+\n+// This method does not constrain `Foo`.\n+// Per RFC 2071, function bodies may either\n+// fully constrain an opaque type, or place no\n+// constraints on it.\n+fn unconstrained_foo() -> Wrapper<Foo> {\n+    Wrapper::Second\n+}\n+\n+fn main() {}"}, {"sha": "ad5451ced55d061a10c940c6ff5831caa36487d2", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -71,4 +71,5 @@ LL |     || set(&mut x);\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "6bba38510b676a38543329906d4b4a930ed1db1d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -42,3 +42,4 @@ LL | |     });\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "a38c612e1dea97f43680de66f7990f2494129521", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -16,3 +16,4 @@ LL | |     });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "61762ae1d9b0438023bdb4b0b48c1253ef3f1994", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/9d6ff1553b7debbe5c99c102ce0978b6130592f8/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=9d6ff1553b7debbe5c99c102ce0978b6130592f8", "patch": "@@ -41,7 +41,7 @@\n         'ryankurte', 'thejpster', 'therealprof',\n     },\n     'edition-guide': {'ehuss', 'Centril', 'steveklabnik'},\n-    'rustc-guide': {'mark-i-m', 'spastorino', 'amanjeev'},\n+    'rustc-guide': {'mark-i-m', 'spastorino', 'amanjeev', 'JohnTitor'},\n }\n \n REPOS = {\n@@ -50,11 +50,11 @@\n     'rls': 'https://github.com/rust-lang/rls',\n     'rustfmt': 'https://github.com/rust-lang/rustfmt',\n     'book': 'https://github.com/rust-lang/book',\n-    'nomicon': 'https://github.com/rust-lang-nursery/nomicon',\n-    'reference': 'https://github.com/rust-lang-nursery/reference',\n+    'nomicon': 'https://github.com/rust-lang/nomicon',\n+    'reference': 'https://github.com/rust-lang/reference',\n     'rust-by-example': 'https://github.com/rust-lang/rust-by-example',\n     'embedded-book': 'https://github.com/rust-embedded/book',\n-    'edition-guide': 'https://github.com/rust-lang-nursery/edition-guide',\n+    'edition-guide': 'https://github.com/rust-lang/edition-guide',\n     'rustc-guide': 'https://github.com/rust-lang/rustc-guide',\n }\n "}]}