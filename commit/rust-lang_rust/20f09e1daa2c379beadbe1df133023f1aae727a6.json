{"sha": "20f09e1daa2c379beadbe1df133023f1aae727a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjA5ZTFkYWEyYzM3OWJlYWRiZTFkZjEzMzAyM2YxYWFlNzI3YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T14:02:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T14:02:06Z"}, "message": "Auto merge of #5622 - elichai:2020-05-match_wild_err_arm, r=flip1995\n\nDowngrade `match_wild_err_arm` to pedantic and update help messages\n\nHi,\nThis fixes #3688 and downgrades `match_wild_err_arm` to pedantic.\nThere are a lot of different reasons in that issue, for me the biggest are:\n1. Rust's errors aren't like Java's exceptions because they're type safe and in most cases the type of error can't change by itself.\n2. Sometimes matching can be more ergonomic, and before the `track_caller` feature got introduced it was actually easier to track the panic location with explicit `panic!` than with `expect`.\n\nCurrently clippy is failing to build because of a breaking change in https://github.com/rust-lang/rust/pull/69171 I tried fixing it but it is too complex for my little knowledge of clippy and rustc so I'll leave that to people who know what they're doing :)\n\nAnother thing, if rustc is breaking clippy a lot then maybe it's better to use something like `miri` does, where it's hard codes the latest tested rustc commit and they keep bumping it, that way when you develop locally it should work even if there was a breaking change (https://github.com/rust-lang/miri/blob/master/rustup-toolchain#L23-L29)\n\nchangelog: Downgrade `match_wild_err_arm` to pedantic", "tree": {"sha": "022a619e1ad3ddc2099b631fcf90e36a2f6b83fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022a619e1ad3ddc2099b631fcf90e36a2f6b83fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f09e1daa2c379beadbe1df133023f1aae727a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f09e1daa2c379beadbe1df133023f1aae727a6", "html_url": "https://github.com/rust-lang/rust/commit/20f09e1daa2c379beadbe1df133023f1aae727a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f09e1daa2c379beadbe1df133023f1aae727a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "html_url": "https://github.com/rust-lang/rust/commit/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db"}, {"sha": "2db7f1abf84699605a5863887484cbf587db3eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db7f1abf84699605a5863887484cbf587db3eb1", "html_url": "https://github.com/rust-lang/rust/commit/2db7f1abf84699605a5863887484cbf587db3eb1"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "057d39d4c825288ad295d1686043386a2000147a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20f09e1daa2c379beadbe1df133023f1aae727a6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f09e1daa2c379beadbe1df133023f1aae727a6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=20f09e1daa2c379beadbe1df133023f1aae727a6", "patch": "@@ -1141,6 +1141,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n+        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n@@ -1285,7 +1286,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_SINGLE_BINDING),\n-        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n@@ -1476,7 +1476,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n-        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),"}, {"sha": "94380acfcfd4cb767c84df6bcc46a9fd78e36cef", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20f09e1daa2c379beadbe1df133023f1aae727a6/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f09e1daa2c379beadbe1df133023f1aae727a6/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=20f09e1daa2c379beadbe1df133023f1aae727a6", "patch": "@@ -168,7 +168,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for arm which matches all errors with `Err(_)`\n     /// and take drastic actions like `panic!`.\n     ///\n-    /// **Why is this bad?** It is generally a bad practice, just like\n+    /// **Why is this bad?** It is generally a bad practice, similar to\n     /// catching all exceptions in java with `catch(Exception)`\n     ///\n     /// **Known problems:** None.\n@@ -182,7 +182,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub MATCH_WILD_ERR_ARM,\n-    style,\n+    pedantic,\n     \"a `match` with `Err(_)` arm and take drastic actions\"\n }\n \n@@ -711,7 +711,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n                                 None,\n-                                \"match each error separately or use the error output\",\n+                                \"match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\",\n                             );\n                         }\n                     }"}, {"sha": "8211a57b564391d42b8b15f1a97d11cbfa608f7e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20f09e1daa2c379beadbe1df133023f1aae727a6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f09e1daa2c379beadbe1df133023f1aae727a6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=20f09e1daa2c379beadbe1df133023f1aae727a6", "patch": "@@ -1195,7 +1195,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"match_wild_err_arm\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"a `match` with `Err(_)` arm and take drastic actions\",\n         deprecation: None,\n         module: \"matches\","}, {"sha": "b59dbb3e76c6455ac99d678f4bba6cca14bd7fd6", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/20f09e1daa2c379beadbe1df133023f1aae727a6/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20f09e1daa2c379beadbe1df133023f1aae727a6/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=20f09e1daa2c379beadbe1df133023f1aae727a6", "patch": "@@ -47,17 +47,32 @@ error: future cannot be sent between threads safely\n   --> $DIR/future_not_send.rs:20:63\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n-   |                                                               ^^^^\n+   |                                                               ^^^^ future returned by `private_future2` is not `Send`\n    |\n+note: captured value is not `Send`\n+  --> $DIR/future_not_send.rs:20:26\n+   |\n+LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n+   |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n+note: captured value is not `Send`\n+  --> $DIR/future_not_send.rs:20:40\n+   |\n+LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n+   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n   --> $DIR/future_not_send.rs:24:43\n    |\n LL | pub async fn public_future2(rc: Rc<[u8]>) {}\n-   |                                           ^\n+   |                                           ^ future returned by `public_future2` is not `Send`\n    |\n+note: captured value is not `Send`\n+  --> $DIR/future_not_send.rs:24:29\n+   |\n+LL | pub async fn public_future2(rc: Rc<[u8]>) {}\n+   |                             ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n \n error: future cannot be sent between threads safely\n@@ -117,8 +132,13 @@ error: future cannot be sent between threads safely\n   --> $DIR/future_not_send.rs:66:34\n    |\n LL | async fn unclear_future<T>(t: T) {}\n-   |                                  ^\n+   |                                  ^ future returned by `unclear_future` is not `Send`\n    |\n+note: captured value is not `Send`\n+  --> $DIR/future_not_send.rs:66:28\n+   |\n+LL | async fn unclear_future<T>(t: T) {}\n+   |                            ^ has type `T` which is not `Send`\n    = note: `T` doesn't implement `std::marker::Send`\n \n error: aborting due to 8 previous errors"}, {"sha": "6a2a02987dea7497b3773f4443c12b3d98fc76d9", "filename": "tests/ui/match_wild_err_arm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20f09e1daa2c379beadbe1df133023f1aae727a6/tests%2Fui%2Fmatch_wild_err_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20f09e1daa2c379beadbe1df133023f1aae727a6/tests%2Fui%2Fmatch_wild_err_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.stderr?ref=20f09e1daa2c379beadbe1df133023f1aae727a6", "patch": "@@ -5,31 +5,31 @@ LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n    |\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:17:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:23:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:31:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: aborting due to 4 previous errors\n "}]}