{"sha": "059a9a16d54f7a8e6399810893c9988f409d3025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OWE5YTE2ZDU0ZjdhOGU2Mzk5ODEwODkzYzk5ODhmNDA5ZDMwMjU=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-19T02:31:38Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-19T02:31:38Z"}, "message": "Provide positional information when visiting ty, substs and closure_substs in MIR", "tree": {"sha": "f2575fbe130da617ce93a428ae0864e88fea0bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2575fbe130da617ce93a428ae0864e88fea0bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059a9a16d54f7a8e6399810893c9988f409d3025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059a9a16d54f7a8e6399810893c9988f409d3025", "html_url": "https://github.com/rust-lang/rust/commit/059a9a16d54f7a8e6399810893c9988f409d3025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059a9a16d54f7a8e6399810893c9988f409d3025/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c659ef655b1f740777f83eb415fd7ebe5a3fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c659ef655b1f740777f83eb415fd7ebe5a3fe5", "html_url": "https://github.com/rust-lang/rust/commit/83c659ef655b1f740777f83eb415fd7ebe5a3fe5"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "2e7dfa8f70de6d54f70519d4c97092326a67e7ee", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=059a9a16d54f7a8e6399810893c9988f409d3025", "patch": "@@ -210,17 +210,20 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_ty(&mut self,\n-                        ty: & $($mutability)* Ty<'tcx>) {\n+                        ty: & $($mutability)* Ty<'tcx>,\n+                        _: PositionalInfo) {\n                 self.super_ty(ty);\n             }\n \n             fn visit_substs(&mut self,\n-                            substs: & $($mutability)* &'tcx Substs<'tcx>) {\n+                            substs: & $($mutability)* &'tcx Substs<'tcx>,\n+                            _: Location) {\n                 self.super_substs(substs);\n             }\n \n             fn visit_closure_substs(&mut self,\n-                                    substs: & $($mutability)* ClosureSubsts<'tcx>) {\n+                                    substs: & $($mutability)* ClosureSubsts<'tcx>,\n+                                    _: Location) {\n                 self.super_closure_substs(substs);\n             }\n \n@@ -266,7 +269,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_visibility_scope_data(scope);\n                 }\n \n-                self.visit_ty(&$($mutability)* mir.return_ty);\n+                self.visit_ty(&$($mutability)* mir.return_ty, PositionalInfo::Span(mir.span));\n \n                 for local_decl in &$($mutability)* mir.local_decls {\n                     self.visit_local_decl(local_decl);\n@@ -385,7 +388,7 @@ macro_rules! make_mir_visitor {\n                                                 ref values,\n                                                 ref targets } => {\n                         self.visit_operand(discr, source_location);\n-                        self.visit_ty(switch_ty);\n+                        self.visit_ty(switch_ty, PositionalInfo::Location(source_location));\n                         for value in &values[..] {\n                             self.visit_const_int(value, source_location);\n                         }\n@@ -489,7 +492,7 @@ macro_rules! make_mir_visitor {\n                                  ref $($mutability)* operand,\n                                  ref $($mutability)* ty) => {\n                         self.visit_operand(operand, location);\n-                        self.visit_ty(ty);\n+                        self.visit_ty(ty, PositionalInfo::Location(location));\n                     }\n \n                     Rvalue::BinaryOp(_bin_op,\n@@ -511,28 +514,28 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::NullaryOp(_op, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty);\n+                        self.visit_ty(ty, PositionalInfo::Location(location));\n                     }\n \n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         let kind = &$($mutability)* **kind;\n                         match *kind {\n                             AggregateKind::Array(ref $($mutability)* ty) => {\n-                                self.visit_ty(ty);\n+                                self.visit_ty(ty, PositionalInfo::Location(location));\n                             }\n                             AggregateKind::Tuple => {\n                             }\n                             AggregateKind::Adt(_adt_def,\n                                                _variant_index,\n                                                ref $($mutability)* substs,\n                                                _active_field_index) => {\n-                                self.visit_substs(substs);\n+                                self.visit_substs(substs, location);\n                             }\n                             AggregateKind::Closure(ref $($mutability)* def_id,\n                                                    ref $($mutability)* closure_substs) => {\n                                 self.visit_def_id(def_id, location);\n-                                self.visit_closure_substs(closure_substs);\n+                                self.visit_closure_substs(closure_substs, location);\n                             }\n                         }\n \n@@ -581,7 +584,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                 } = *static_;\n                 self.visit_def_id(def_id, location);\n-                self.visit_ty(ty);\n+                self.visit_ty(ty, PositionalInfo::Location(location));\n             }\n \n             fn super_projection(&mut self,\n@@ -611,7 +614,7 @@ macro_rules! make_mir_visitor {\n                     ProjectionElem::Subslice { from: _, to: _ } => {\n                     }\n                     ProjectionElem::Field(_field, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty);\n+                        self.visit_ty(ty, PositionalInfo::Location(location));\n                     }\n                     ProjectionElem::Index(ref $($mutability)* operand) => {\n                         self.visit_operand(operand, location);\n@@ -635,7 +638,7 @@ macro_rules! make_mir_visitor {\n                     is_user_variable: _,\n                 } = *local_decl;\n \n-                self.visit_ty(ty);\n+                self.visit_ty(ty, PositionalInfo::SourceInfo(*source_info));\n                 self.visit_source_info(source_info);\n             }\n \n@@ -658,7 +661,7 @@ macro_rules! make_mir_visitor {\n                 } = *constant;\n \n                 self.visit_span(span);\n-                self.visit_ty(ty);\n+                self.visit_ty(ty, PositionalInfo::Location(location));\n                 self.visit_literal(literal, location);\n             }\n \n@@ -669,7 +672,7 @@ macro_rules! make_mir_visitor {\n                     Literal::Item { ref $($mutability)* def_id,\n                                     ref $($mutability)* substs } => {\n                         self.visit_def_id(def_id, location);\n-                        self.visit_substs(substs);\n+                        self.visit_substs(substs, location);\n                     }\n                     Literal::Value { ref $($mutability)* value } => {\n                         self.visit_const_val(value, location);\n@@ -734,6 +737,12 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n+pub enum PositionalInfo {\n+    Location(Location),\n+    SourceInfo(SourceInfo),\n+    Span(Span),\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum LvalueContext<'tcx> {\n     // Appears as LHS of an assignment"}, {"sha": "abb431f70eb54809bb4474f70d106ec64b48637c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=059a9a16d54f7a8e6399810893c9988f409d3025", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::mir::visit::MutVisitor;\n+use rustc::mir::visit::{MutVisitor, PositionalInfo};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n@@ -143,7 +143,7 @@ struct GlobalizeMir<'a, 'gcx: 'a> {\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: PositionalInfo) {\n         if let Some(lifted) = self.tcx.lift(ty) {\n             *ty = lifted;\n         } else {\n@@ -153,7 +153,7 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n         }\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) {\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, _: Location) {\n         if let Some(lifted) = self.tcx.lift(substs) {\n             *substs = lifted;\n         } else {"}, {"sha": "45a0fab7b628b66bc2beb16559d0981256c9470d", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=059a9a16d54f7a8e6399810893c9988f409d3025", "patch": "@@ -15,7 +15,7 @@\n use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n use rustc::mir::*;\n-use rustc::mir::visit::MutVisitor;\n+use rustc::mir::visit::{MutVisitor, PositionalInfo};\n use rustc::mir::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n@@ -31,12 +31,12 @@ impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: PositionalInfo) {\n         let old_ty = *ty;\n         *ty = self.tcx.erase_regions(&old_ty);\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) {\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, _: Location) {\n         *substs = self.tcx.erase_regions(&{*substs});\n     }\n \n@@ -62,7 +62,8 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_closure_substs(&mut self,\n-                            substs: &mut ClosureSubsts<'tcx>) {\n+                            substs: &mut ClosureSubsts<'tcx>,\n+                            _: Location) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n "}, {"sha": "9895802700ef7c1895d44f28834b62453e4333d0", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059a9a16d54f7a8e6399810893c9988f409d3025/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=059a9a16d54f7a8e6399810893c9988f409d3025", "patch": "@@ -279,7 +279,8 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n     }\n \n     fn visit_closure_substs(&mut self,\n-                            substs: &ClosureSubsts<'tcx>) {\n+                            substs: &ClosureSubsts<'tcx>,\n+                            _: Location) {\n         self.record(\"ClosureSubsts\", substs);\n         self.super_closure_substs(substs);\n     }"}]}