{"sha": "388384177e89db60280dc275e4239e97e61f6a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODM4NDE3N2U4OWRiNjAyODBkYzI3NWU0MjM5ZTk3ZTYxZjZhNTk=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T00:30:50Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T00:30:50Z"}, "message": "document `MinifyingSugg` and `Offset`\n\n...and also swap their position", "tree": {"sha": "adcd36051cf7e0aaf84f857fa27813ac4f323dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcd36051cf7e0aaf84f857fa27813ac4f323dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388384177e89db60280dc275e4239e97e61f6a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388384177e89db60280dc275e4239e97e61f6a59", "html_url": "https://github.com/rust-lang/rust/commit/388384177e89db60280dc275e4239e97e61f6a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388384177e89db60280dc275e4239e97e61f6a59/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec94bd6cb45e337fd10ca19fadb9a71ecb67db5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec94bd6cb45e337fd10ca19fadb9a71ecb67db5f", "html_url": "https://github.com/rust-lang/rust/commit/ec94bd6cb45e337fd10ca19fadb9a71ecb67db5f"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "9a1ba4907cda08e98483b2617aedb3b23ecac307", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/388384177e89db60280dc275e4239e97e61f6a59/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388384177e89db60280dc275e4239e97e61f6a59/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=388384177e89db60280dc275e4239e97e61f6a59", "patch": "@@ -805,44 +805,10 @@ fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n     }\n }\n \n-#[derive(Clone, Copy)]\n-enum OffsetSign {\n-    Positive,\n-    Negative,\n-}\n-\n-struct Offset {\n-    value: MinifyingSugg<'static>,\n-    sign: OffsetSign,\n-}\n-\n-impl Offset {\n-    fn negative(value: Sugg<'static>) -> Self {\n-        Self {\n-            value: value.into(),\n-            sign: OffsetSign::Negative,\n-        }\n-    }\n-\n-    fn positive(value: Sugg<'static>) -> Self {\n-        Self {\n-            value: value.into(),\n-            sign: OffsetSign::Positive,\n-        }\n-    }\n-\n-    fn empty() -> Self {\n-        Self::positive(sugg::ZERO)\n-    }\n-}\n-\n-fn apply_offset(lhs: &MinifyingSugg<'static>, rhs: &Offset) -> MinifyingSugg<'static> {\n-    match rhs.sign {\n-        OffsetSign::Positive => lhs + &rhs.value,\n-        OffsetSign::Negative => lhs - &rhs.value,\n-    }\n-}\n-\n+/// a wrapper of `Sugg`. Besides what `Sugg` do, this removes unnecessary `0`;\n+/// and also, it avoids subtracting a variable from the same one by replacing it with `0`.\n+/// it exists for the convenience of the overloaded operators while normal functions can do the\n+/// same.\n #[derive(Clone)]\n struct MinifyingSugg<'a>(Sugg<'a>);\n \n@@ -909,6 +875,46 @@ impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     }\n }\n \n+/// a wrapper around `MinifyingSugg`, which carries a operator like currying\n+/// so that the suggested code become more efficient (e.g. `foo + -bar` `foo - bar`).\n+struct Offset {\n+    value: MinifyingSugg<'static>,\n+    sign: OffsetSign,\n+}\n+\n+#[derive(Clone, Copy)]\n+enum OffsetSign {\n+    Positive,\n+    Negative,\n+}\n+\n+impl Offset {\n+    fn negative(value: Sugg<'static>) -> Self {\n+        Self {\n+            value: value.into(),\n+            sign: OffsetSign::Negative,\n+        }\n+    }\n+\n+    fn positive(value: Sugg<'static>) -> Self {\n+        Self {\n+            value: value.into(),\n+            sign: OffsetSign::Positive,\n+        }\n+    }\n+\n+    fn empty() -> Self {\n+        Self::positive(sugg::ZERO)\n+    }\n+}\n+\n+fn apply_offset(lhs: &MinifyingSugg<'static>, rhs: &Offset) -> MinifyingSugg<'static> {\n+    match rhs.sign {\n+        OffsetSign::Positive => lhs + &rhs.value,\n+        OffsetSign::Negative => lhs - &rhs.value,\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy)]\n enum StartKind<'hir> {\n     Range,"}]}