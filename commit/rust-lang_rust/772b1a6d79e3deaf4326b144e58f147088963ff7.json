{"sha": "772b1a6d79e3deaf4326b144e58f147088963ff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MmIxYTZkNzllM2RlYWY0MzI2YjE0NGU1OGYxNDcwODg5NjNmZjc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-28T14:58:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-28T14:58:13Z"}, "message": "Rollup merge of #78086 - poliorcetics:as-placeholder, r=Mark-Simulacrum\n\nImprove doc for 'as _'\n\nFix #78042.\n\n`@rustbot` modify labels: A-coercions T-doc", "tree": {"sha": "4e3d30f28778f345793d38cbf164757cac42ff3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e3d30f28778f345793d38cbf164757cac42ff3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/772b1a6d79e3deaf4326b144e58f147088963ff7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwmWFCRBK7hj4Ov3rIwAAdHIIABVdrDQ5fA9XRBjkUmpcbp/C\n/TgJNGAAkPNJ37lZhbKWNOxtIwJaEA/om+HsytrsBQHmJFwnO2PrFYxWN+oQmMfs\nRSPgfOKUMeXWWYFL4pWtR5D9X0/zZbSwIY80YuQbS1B8LRB5sXR/NFmqVjs3NLXW\nvt/wxiCvsNt2PODy21KEp3y/1ATReCbl46I2PY4SfgoD/n2A9WbVBaC2bmqr40fg\nlTFXKjoYrw1+0Da8u6tVwBjKCuVlQzsB9QEH7DbVT7+9RC69D8hjQhJzgnZxeAd+\nIFTlBiWYJIOQzMseyJBuPzWgEBA8REcLagpgHysl3aVcXzW1XQNWE7Y/8tDS7X0=\n=3N+E\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e3d30f28778f345793d38cbf164757cac42ff3c\nparent 4ae328bef47dffcbf363e5ae873f419c06a5511d\nparent e31e627238d75b3f24532ccb86fac7b4fd5e735d\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606575493 +0100\ncommitter GitHub <noreply@github.com> 1606575493 +0100\n\nRollup merge of #78086 - poliorcetics:as-placeholder, r=Mark-Simulacrum\n\nImprove doc for 'as _'\n\nFix #78042.\n\n`@rustbot` modify labels: A-coercions T-doc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/772b1a6d79e3deaf4326b144e58f147088963ff7", "html_url": "https://github.com/rust-lang/rust/commit/772b1a6d79e3deaf4326b144e58f147088963ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/772b1a6d79e3deaf4326b144e58f147088963ff7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae328bef47dffcbf363e5ae873f419c06a5511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "html_url": "https://github.com/rust-lang/rust/commit/4ae328bef47dffcbf363e5ae873f419c06a5511d"}, {"sha": "e31e627238d75b3f24532ccb86fac7b4fd5e735d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31e627238d75b3f24532ccb86fac7b4fd5e735d", "html_url": "https://github.com/rust-lang/rust/commit/e31e627238d75b3f24532ccb86fac7b4fd5e735d"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "8659f689ad62aa202d3047691d1f19a23d63a17d", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/772b1a6d79e3deaf4326b144e58f147088963ff7/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772b1a6d79e3deaf4326b144e58f147088963ff7/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=772b1a6d79e3deaf4326b144e58f147088963ff7", "patch": "@@ -20,19 +20,30 @@\n /// explicitly using `as` allows a few more coercions that aren't allowed implicitly, such as\n /// changing the type of a raw pointer or turning closures into raw pointers.\n ///\n-/// `as` is also used to rename imports in [`use`] and [`extern crate`] statements:\n+/// `as` can be seen as the primitive for `From` and `Into`: `as` only works  with primitives\n+/// (`u8`, `bool`, `str`, pointers, ...) whereas `From` and `Into`  also works with types like\n+/// `String` or `Vec`.\n+///\n+/// `as` can also be used with the `_` placeholder when the destination type can be inferred. Note\n+/// that this can cause inference breakage and usually such code should use an explicit type for\n+/// both clarity and stability. This is most useful when converting pointers using `as *const _` or\n+/// `as *mut _` though the [`cast`][const-cast] method is recommended over `as *const _` and it is\n+/// [the same][mut-cast] for `as *mut _`: those methods make the intent clearer.\n+///\n+/// `as` is also used to rename imports in [`use`] and [`extern crate`][`crate`] statements:\n ///\n /// ```\n /// # #[allow(unused_imports)]\n /// use std::{mem as memory, net as network};\n /// // Now you can use the names `memory` and `network` to refer to `std::mem` and `std::net`.\n /// ```\n-///\n /// For more information on what `as` is capable of, see the [Reference].\n ///\n /// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n+/// [`crate`]: keyword.crate.html\n /// [`use`]: keyword.use.html\n-/// [`extern crate`]: keyword.crate.html\n+/// [const-cast]: primitive.pointer.html#method.cast\n+/// [mut-cast]: primitive.pointer.html#method.cast-1\n mod as_keyword {}\n \n #[doc(keyword = \"break\")]"}]}