{"sha": "979dd77c5d88cd21f350da5235d198b97264ec68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OWRkNzdjNWQ4OGNkMjFmMzUwZGE1MjM1ZDE5OGI5NzI2NGVjNjg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-21T23:51:07Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-26T22:37:02Z"}, "message": "Add test for serializing hygiene *into* a proc-macro crate\n\nThis is a very obscure corner case, and should never be hit in practice.", "tree": {"sha": "0496b44557f2392a30c6e66386d7b49623680e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0496b44557f2392a30c6e66386d7b49623680e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979dd77c5d88cd21f350da5235d198b97264ec68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8eBY4ACgkQtAh+UQ6Y\nsWSazw//QWfmEOrvKkJC37Fpo/kh6w10BzGtcKFmA1YvwwpgXFcDbdUIy4EBLCDU\nimyRcLMV67fAqogwuooBX5YYE6pL77z3JG2d6FxniXQJrF6uF/JdwYpgiGSKZisN\nvdaZkog5OvVMkcqJ9sbXQP5dwuqBBZ2aAxy5VPFPWGeBAUc7K6yfWwwhPqo3bmP4\nFQwWYS2BTFU5CPVHxJGtoXQ8Kw0AvkTS2MeGgeGQilqCA3af0098nqIJz3VSZ9LG\nTehnOuZ12z7kj/WmG5qdcGuYuqm+WuCo61/Quny1gxZmBuGS6A8ENG1Y315rVnmI\nPuKKrJB9tValnVNNfYb+1Ekm5RW729gdKis5sTia/20tw8LkLfTmm/x/KSIzC+MT\nZ8c11PIbcsfwYwi7//hFyrCtBBN1yatg26lBr1hH4pGnT4pOYGxwTpeysubbb9X4\nIu4ls4qr2Bf5hkI80uvOO4iVtjE6s4vlJiSsLeyrREXZdM7seVDh5fZbD3WZyMj8\nrd2aacNMEOxMlsrv9AY4V+Gfnhbo+tsj5Zfht3fJvcO8Z8x+qQPK/sEV++O4V3jd\nPiuaUMDoG3VxgDC6G5uTVvAWMjOAIvGRj4DSNxT1PykOikzE4Qvobi/qSDbYTvxY\nCnBGan5bhr3mMAuZ8Wsy+PpIATOr4mfBRgnuQOZ7FL/NFAjl5/I=\n=1yK2\n-----END PGP SIGNATURE-----", "payload": "tree 0496b44557f2392a30c6e66386d7b49623680e8f\nparent 5cd1b5dd7972e465bb7d7f6fbfecae6b6f6c299d\nauthor Aaron Hill <aa1ronham@gmail.com> 1595375467 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1595803022 -0400\n\nAdd test for serializing hygiene *into* a proc-macro crate\n\nThis is a very obscure corner case, and should never be hit in practice.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979dd77c5d88cd21f350da5235d198b97264ec68", "html_url": "https://github.com/rust-lang/rust/commit/979dd77c5d88cd21f350da5235d198b97264ec68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979dd77c5d88cd21f350da5235d198b97264ec68/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cd1b5dd7972e465bb7d7f6fbfecae6b6f6c299d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd1b5dd7972e465bb7d7f6fbfecae6b6f6c299d", "html_url": "https://github.com/rust-lang/rust/commit/5cd1b5dd7972e465bb7d7f6fbfecae6b6f6c299d"}], "stats": {"total": 104, "additions": 88, "deletions": 16}, "files": [{"sha": "076ed6798340498e86b6bf972aae013d72277dc1", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -259,10 +259,33 @@ impl<'tcx> SpecializedEncoder<Span> for EncodeContext<'tcx> {\n         let len = hi - lo;\n         len.encode(self)?;\n \n-        // FIXME: Once #69976 is merged, treat proc-macros normally\n-        // Currently, we can't encode `SyntaxContextData` for proc-macro crates,\n-        // since the `SyntaxContextData`/`ExpnData` might reference `DefIds` from\n-        // dependencies (which are not currently loaded during decoding).\n+        // Don't serialize any `SyntaxContext`s from a proc-macro crate,\n+        // since we don't load proc-macro dependencies during serialization.\n+        // This means that any hygiene information from macros used *within*\n+        // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro\n+        // definition) will be lost.\n+        //\n+        // This can show up in two ways:\n+        //\n+        // 1. Any hygiene information associated with identifier of\n+        // a proc macro (e.g. `#[proc_macro] pub fn $name`) will be lost.\n+        // Since proc-macros can only be invoked from a different crate,\n+        // real code should never need to care about this.\n+        //\n+        // 2. Using `Span::def_site` or `Span::mixed_site` will not\n+        // include any hygiene information associated with the defintion\n+        // site. This means that a proc-macro cannot emit a `$crate`\n+        // identifier which resolves to one of its dependencies,\n+        // which also should never come up in practice.\n+        //\n+        // Additionally, this affects `Span::parent`, and any other\n+        // span inspection APIs that would otherwise allow traversing\n+        // the `SyntaxContexts` associated with a span.\n+        //\n+        // None of these user-visible effects should result in any\n+        // cross-crate inconsistencies (getting one behavior in the same\n+        // crate, and a different behavior in another crate) due to the\n+        // limited surface that proc-macros can expose.\n         if self.is_proc_macro {\n             SyntaxContext::root().encode(self)?;\n         } else {"}, {"sha": "3c851b6de2a1ac8f624780246c37871dcce3da86", "filename": "src/test/ui/proc-macro/auxiliary/make-macro.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmake-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmake-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmake-macro.rs?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -6,7 +6,13 @@ macro_rules! make_it {\n         #[proc_macro]\n         pub fn $name(input: TokenStream) -> TokenStream {\n             println!(\"Def site: {:?}\", Span::def_site());\n-            input\n+            println!(\"Input: {:?}\", input);\n+            let new: TokenStream = input.into_iter().map(|mut t| {\n+                t.set_span(Span::def_site());\n+                t\n+            }).collect();\n+            println!(\"Respanned: {:?}\", new);\n+            new\n         }\n     };\n }"}, {"sha": "0a9b9887d95535fd9ba4627ed12e1ce5ee1b86a1", "filename": "src/test/ui/proc-macro/auxiliary/meta-macro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmeta-macro.rs?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -10,3 +10,6 @@ extern crate make_macro;\n use proc_macro::{TokenStream, Span};\n \n make_macro::make_it!(print_def_site);\n+\n+#[proc_macro]\n+pub fn dummy(input: TokenStream) -> TokenStream { input }"}, {"sha": "5e84be74da8678a1494e6090c731aa36cf2fa627", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -1,13 +1,26 @@\n // aux-build:make-macro.rs\n // aux-build:meta-macro.rs\n // edition:2018\n-// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene\n+// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene -Z macro-backtrace\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n-// ^ We don't care about symbol ids, so set them all to 0\n+//\n+// We don't care about symbol ids, so we set them all to 0\n // in the stdout\n extern crate meta_macro;\n+extern crate make_macro;\n+\n+macro_rules! produce_it {\n+    () => {\n+        // `print_def_site!` will respan the `$crate` identifier\n+        // with `Span::def_site()`. This should cause it to resolve\n+        // relative to `meta_macro`, *not* `make_macro` (despite\n+        // the fact that that `print_def_site` is produced by\n+        // a `macro_rules!` macro in `make_macro`).\n+        meta_macro::print_def_site!($crate::dummy!());\n+    }\n+}\n \n fn main() {\n-    meta_macro::print_def_site!();\n+    produce_it!();\n }"}, {"sha": "cb8ca614a23d9fa5dee8154bec56e72554532d9f", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -1,4 +1,6 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 10:10 (#6)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7)\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:20:37: 20:43 (#6) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#6) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#6) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:20:45: 20:50 (#6) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:50: 20:51 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:20:51: 20:53 (#6) }]\n+Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }]\n #![feature /* 0#0 */(prelude_import)]\n #[prelude_import /* 0#1 */]\n use std /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n@@ -7,24 +9,43 @@ extern crate std /* 0#1 */;\n // aux-build:make-macro.rs\n // aux-build:meta-macro.rs\n // edition:2018\n-// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene\n+// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene -Z macro-backtrace\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n-// ^ We don't care about symbol ids, so set them all to 0\n+//\n+// We don't care about symbol ids, so we set them all to 0\n // in the stdout\n extern crate meta_macro /* 0#0 */;\n+extern crate make_macro /* 0#0 */;\n+\n+macro_rules! produce_it\n+    /*\n+    0#0\n+    */ {\n+    () =>\n+    {\n+        meta_macro :: print_def_site ! ($ crate :: dummy ! ()) ;\n+        // `print_def_site!` will respan the `$crate` identifier\n+        // with `Span::def_site()`. This should cause it to resolve\n+        // relative to `meta_macro`, *not* `make_macro` (despite\n+        // the fact that that `print_def_site` is produced by\n+        // a `macro_rules!` macro in `make_macro`).\n+    }\n+}\n \n fn main /* 0#0 */() { }\n \n /*\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n 3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"cfg_if\")\n 4: parent: ExpnId(3), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::cfg_if\")\n 5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::cfg_if\")\n 6: parent: ExpnId(5), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"features\")\n+7: parent: ExpnId(2), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+8: parent: ExpnId(7), call_site_ctxt: #7, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n@@ -33,7 +54,11 @@ SyntaxContexts:\n #3: parent: #0, outer_mark: (ExpnId(6), SemiTransparent)\n #4: parent: #0, outer_mark: (ExpnId(3), SemiTransparent)\n #5: parent: #0, outer_mark: (ExpnId(4), SemiTransparent)\n-#6: parent: #0, outer_mark: (ExpnId(2), Opaque)\n-#7: parent: #0, outer_mark: (ExpnId(2), Transparent)\n-#8: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n+#6: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n+#7: parent: #0, outer_mark: (ExpnId(7), Opaque)\n+#8: parent: #6, outer_mark: (ExpnId(7), Transparent)\n+#9: parent: #0, outer_mark: (ExpnId(7), SemiTransparent)\n+#10: parent: #0, outer_mark: (ExpnId(8), Opaque)\n+#11: parent: #7, outer_mark: (ExpnId(8), Transparent)\n+#12: parent: #7, outer_mark: (ExpnId(8), SemiTransparent)\n */"}, {"sha": "e4374dbb3fa88d54b16e920bae00bc6c971a39e2", "filename": "src/test/ui/proc-macro/meta-macro.stdout", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/979dd77c5d88cd21f350da5235d198b97264ec68/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout?ref=979dd77c5d88cd21f350da5235d198b97264ec68", "patch": "@@ -1 +1,3 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 10:10 (#6)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#6)\n+Input: TokenStream []\n+Respanned: TokenStream []"}]}