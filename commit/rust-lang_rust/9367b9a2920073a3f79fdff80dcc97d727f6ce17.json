{"sha": "9367b9a2920073a3f79fdff80dcc97d727f6ce17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjdiOWEyOTIwMDczYTNmNzlmZGZmODBkY2M5N2Q3MjdmNmNlMTc=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-01-29T22:18:21Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-03T22:00:55Z"}, "message": "ra_syntax: add backticks around tokens specimen", "tree": {"sha": "1aebf345e4c85860beb1784b6939c523b5aa32ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aebf345e4c85860beb1784b6939c523b5aa32ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9367b9a2920073a3f79fdff80dcc97d727f6ce17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9367b9a2920073a3f79fdff80dcc97d727f6ce17", "html_url": "https://github.com/rust-lang/rust/commit/9367b9a2920073a3f79fdff80dcc97d727f6ce17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9367b9a2920073a3f79fdff80dcc97d727f6ce17/comments", "author": null, "committer": null, "parents": [{"sha": "c3117eea31392f8f63f1352a127f6b77139c375b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3117eea31392f8f63f1352a127f6b77139c375b", "html_url": "https://github.com/rust-lang/rust/commit/c3117eea31392f8f63f1352a127f6b77139c375b"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "7f9d366184b044430de3c872213035a0939758da", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9367b9a2920073a3f79fdff80dcc97d727f6ce17/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9367b9a2920073a3f79fdff80dcc97d727f6ce17/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=9367b9a2920073a3f79fdff80dcc97d727f6ce17", "patch": "@@ -71,6 +71,10 @@ impl SyntaxError {\n \n         self\n     }\n+\n+    pub fn debug_dump(&self, acc: &mut impl fmt::Write) {\n+        writeln!(acc, \"error {:?}: {}\", self.location(), self.kind()).unwrap();\n+    }\n }\n \n impl fmt::Display for SyntaxError {\n@@ -122,37 +126,44 @@ impl fmt::Display for SyntaxErrorKind {\n \n impl fmt::Display for TokenizeError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        #[rustfmt::skip]\n         let msg = match self {\n-            TokenizeError::EmptyInt => \"Missing digits after integer base prefix\",\n-            TokenizeError::EmptyExponent => \"Missing digits after the exponent symbol\",\n+            TokenizeError::EmptyInt => {\n+                \"Missing digits after the integer base prefix\"\n+            }\n+            TokenizeError::EmptyExponent => {\n+                \"Missing digits after the exponent symbol\"\n+            }\n             TokenizeError::UnterminatedBlockComment => {\n-                \"Missing trailing */ symbols to terminate the block comment\"\n+                \"Missing trailing `*/` symbols to terminate the block comment\"\n             }\n             TokenizeError::UnterminatedChar => {\n-                \"Missing trailing ' symbol to terminate the character literal\"\n+                \"Missing trailing `'` symbol to terminate the character literal\"\n             }\n             TokenizeError::UnterminatedByte => {\n-                \"Missing trailing ' symbol to terminate the byte literal\"\n+                \"Missing trailing `'` symbol to terminate the byte literal\"\n             }\n             TokenizeError::UnterminatedString => {\n-                \"Missing trailing \\\" symbol to terminate the string literal\"\n+                \"Missing trailing `\\\"` symbol to terminate the string literal\"\n             }\n             TokenizeError::UnterminatedByteString => {\n-                \"Missing trailing \\\" symbol to terminate the byte string literal\"\n+                \"Missing trailing `\\\"` symbol to terminate the byte string literal\"\n             }\n             TokenizeError::UnterminatedRawString => {\n-                \"Missing trailing \\\" with # symbols to terminate the raw string literal\"\n+                \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n             }\n             TokenizeError::UnterminatedRawByteString => {\n-                \"Missing trailing \\\" with # symbols to terminate the raw byte string literal\"\n+                \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n             }\n             TokenizeError::UnstartedRawString => {\n-                \"Missing \\\" symbol after # symbols to begin the raw string literal\"\n+                \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"\n             }\n             TokenizeError::UnstartedRawByteString => {\n-                \"Missing \\\" symbol after # symbols to begin the raw byte string literal\"\n+                \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"\n+            }\n+            TokenizeError::LifetimeStartsWithNumber => {\n+                \"Lifetime name cannot start with a number\"\n             }\n-            TokenizeError::LifetimeStartsWithNumber => \"Lifetime name cannot start with a number\",\n         };\n         write!(f, \"{}\", msg)\n     }"}]}