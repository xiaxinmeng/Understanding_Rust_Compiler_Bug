{"sha": "d496bfc1615b15946b291d9d305616e1b381c4a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTZiZmMxNjE1YjE1OTQ2YjI5MWQ5ZDMwNTYxNmUxYjM4MWM0YTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-20T18:01:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-20T18:01:25Z"}, "message": "all InterpError allocate now, so adjust alloc-error-check", "tree": {"sha": "a7e5b324a0ac08ea884768512bc30d01599674ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e5b324a0ac08ea884768512bc30d01599674ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d496bfc1615b15946b291d9d305616e1b381c4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d496bfc1615b15946b291d9d305616e1b381c4a4", "html_url": "https://github.com/rust-lang/rust/commit/d496bfc1615b15946b291d9d305616e1b381c4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d496bfc1615b15946b291d9d305616e1b381c4a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "html_url": "https://github.com/rust-lang/rust/commit/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "3da63740350a84f5d57458640e1c79d6719fec52", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=d496bfc1615b15946b291d9d305616e1b381c4a4", "patch": "@@ -550,12 +550,12 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, ptr: Pointer<Tag>, size: Size) -> InterpResult<'tcx> {\n         self.is_init(ptr, size).or_else(|idx_range| {\n-            throw_ub!(InvalidUninitBytes(Some(Box::new(UninitBytesAccess {\n+            throw_ub!(InvalidUninitBytes(Some(UninitBytesAccess {\n                 access_ptr: ptr.erase_tag(),\n                 access_size: size,\n                 uninit_ptr: Pointer::new(ptr.alloc_id, idx_range.start),\n                 uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n-            }))))\n+            })))\n         })\n     }\n "}, {"sha": "1589ab28e4043d1713bd6fbfe116b64504b40f57", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=d496bfc1615b15946b291d9d305616e1b381c4a4", "patch": "@@ -9,7 +9,7 @@ use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{Align, Size};\n-use std::{any::Any, backtrace::Backtrace, fmt, mem};\n+use std::{any::Any, backtrace::Backtrace, fmt};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum ErrorHandled {\n@@ -263,7 +263,7 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Using a string that is not valid UTF-8,\n     InvalidStr(std::str::Utf8Error),\n     /// Using uninitialized data where it is not allowed.\n-    InvalidUninitBytes(Option<Box<UninitBytesAccess>>),\n+    InvalidUninitBytes(Option<UninitBytesAccess>),\n     /// Working with a local that is not currently live.\n     DeadLocal,\n     /// Data size is not equal to target size.\n@@ -445,7 +445,7 @@ impl dyn MachineStopType {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(InterpError<'_>, 40);\n+static_assert_size!(InterpError<'_>, 72);\n \n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n@@ -486,19 +486,14 @@ impl fmt::Debug for InterpError<'_> {\n }\n \n impl InterpError<'_> {\n-    /// Some errors allocate to be created as they contain free-form strings.\n-    /// And sometimes we want to be sure that did not happen as it is a\n-    /// waste of resources.\n-    pub fn allocates(&self) -> bool {\n+    /// Some errors to string formatting even if the error is never printed.\n+    /// To avoid performance issues, there are places where we want to be sure to never raise these formatting errors,\n+    /// so this method lets us detect them and `bug!` on unexpected errors.\n+    pub fn formatted_string(&self) -> bool {\n         match self {\n-            // Zero-sized boxes do not allocate.\n-            InterpError::MachineStop(b) => mem::size_of_val::<dyn MachineStopType>(&**b) > 0,\n             InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some(_))) => {\n-                true\n-            }\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n             _ => false,\n         }\n     }"}, {"sha": "95464da145cfd51b2ae17e06325413c8b70f89c4", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=d496bfc1615b15946b291d9d305616e1b381c4a4", "patch": "@@ -352,14 +352,6 @@ where\n                         error\n                     ),\n                 );\n-                // Some errors shouldn't come up because creating them causes\n-                // an allocation, which we should avoid. When that happens,\n-                // dedicated error variants should be introduced instead.\n-                assert!(\n-                    !error.kind().allocates(),\n-                    \"interning encountered allocating error: {}\",\n-                    error\n-                );\n             }\n         }\n     }"}, {"sha": "3b27b544310a98dd1ba1f5a797a5182800e4fad3", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d496bfc1615b15946b291d9d305616e1b381c4a4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=d496bfc1615b15946b291d9d305616e1b381c4a4", "patch": "@@ -466,8 +466,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n                 assert!(\n-                    !error.kind().allocates(),\n-                    \"const-prop encountered allocating error: {}\",\n+                    !error.kind().formatted_string(),\n+                    \"const-prop encountered formatting error: {}\",\n                     error\n                 );\n                 None"}]}