{"sha": "0ce5129d05c1c955d92b906a96be9c357fb84e57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTUxMjlkMDVjMWM5NTVkOTJiOTA2YTk2YmU5YzM1N2ZiODRlNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-03T02:43:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-11T23:08:08Z"}, "message": "libterm => 2018", "tree": {"sha": "737a04cb83a4c6ab578615cfc2cd1f6115834247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737a04cb83a4c6ab578615cfc2cd1f6115834247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce5129d05c1c955d92b906a96be9c357fb84e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5129d05c1c955d92b906a96be9c357fb84e57", "html_url": "https://github.com/rust-lang/rust/commit/0ce5129d05c1c955d92b906a96be9c357fb84e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5129d05c1c955d92b906a96be9c357fb84e57/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "4eba9a9d79cc431f2bd43ee8cae66c5fda0400eb", "filename": "src/libterm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2FCargo.toml?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"term\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"term\""}, {"sha": "caca9fa4823122f7cc99b41b771f622af6431d29", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -35,20 +35,20 @@\n        test(attr(deny(warnings))))]\n #![deny(missing_docs)]\n \n+#![deny(rust_2018_idioms)]\n+\n #![cfg_attr(windows, feature(libc))]\n // Handle rustfmt skips\n #![feature(custom_attribute)]\n-#![feature(nll)]\n #![allow(unused_attributes)]\n \n use std::io::prelude::*;\n+use std::io::{self, Stdout, Stderr};\n \n pub use terminfo::TerminfoTerminal;\n #[cfg(windows)]\n pub use win::WinConsole;\n \n-use std::io::{self, Stdout, Stderr};\n-\n pub mod terminfo;\n \n #[cfg(windows)]"}, {"sha": "4c3b0b19e27172d852c56c11f5d208a63c5bd0be", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -5,18 +5,16 @@ use std::env;\n use std::error;\n use std::fmt;\n use std::fs::File;\n-use std::io::prelude::*;\n-use std::io;\n-use std::io::BufReader;\n+use std::io::{self, prelude::*, BufReader};\n use std::path::Path;\n \n-use Attr;\n-use color;\n-use Terminal;\n-use self::searcher::get_dbpath_for_term;\n-use self::parser::compiled::{parse, msys_terminfo};\n-use self::parm::{expand, Variables, Param};\n+use crate::Attr;\n+use crate::color;\n+use crate::Terminal;\n \n+use searcher::get_dbpath_for_term;\n+use parser::compiled::{parse, msys_terminfo};\n+use parm::{expand, Variables, Param};\n \n /// A parsed terminfo database entry.\n #[derive(Debug)]\n@@ -49,7 +47,7 @@ impl error::Error for Error {\n     }\n \n     fn cause(&self) -> Option<&dyn error::Error> {\n-        use self::Error::*;\n+        use Error::*;\n         match *self {\n             IoError(ref e) => Some(e),\n             _ => None,\n@@ -58,8 +56,8 @@ impl error::Error for Error {\n }\n \n impl fmt::Display for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use self::Error::*;\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use Error::*;\n         match *self {\n             TermUnset => Ok(()),\n             MalformedTerminfo(ref e) => e.fmt(f),"}, {"sha": "4e81b8a7f28a6b892c604679ac3d8f6aab0a0214", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -40,23 +40,27 @@ pub enum Param {\n /// Container for static and dynamic variable arrays\n pub struct Variables {\n     /// Static variables A-Z\n-    sta: [Param; 26],\n+    sta_va: [Param; 26],\n     /// Dynamic variables a-z\n-    dyn: [Param; 26],\n+    dyn_va: [Param; 26],\n }\n \n impl Variables {\n     /// Return a new zero-initialized Variables\n     pub fn new() -> Variables {\n         Variables {\n-            sta: [Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0)],\n-            dyn: [Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n-                  Number(0), Number(0), Number(0), Number(0), Number(0)],\n+            sta_va: [\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0)\n+            ],\n+            dyn_va: [\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0), Number(0), Number(0),\n+                Number(0), Number(0), Number(0), Number(0), Number(0)\n+            ],\n         }\n     }\n }\n@@ -249,14 +253,14 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n                 if cur >= 'A' && cur <= 'Z' {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'A';\n-                        vars.sta[idx as usize] = arg;\n+                        vars.sta_va[idx as usize] = arg;\n                     } else {\n                         return Err(\"stack is empty\".to_string());\n                     }\n                 } else if cur >= 'a' && cur <= 'z' {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'a';\n-                        vars.dyn[idx as usize] = arg;\n+                        vars.dyn_va[idx as usize] = arg;\n                     } else {\n                         return Err(\"stack is empty\".to_string());\n                     }\n@@ -267,10 +271,10 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n             GetVar => {\n                 if cur >= 'A' && cur <= 'Z' {\n                     let idx = (cur as u8) - b'A';\n-                    stack.push(vars.sta[idx as usize].clone());\n+                    stack.push(vars.sta_va[idx as usize].clone());\n                 } else if cur >= 'a' && cur <= 'z' {\n                     let idx = (cur as u8) - b'a';\n-                    stack.push(vars.dyn[idx as usize].clone());\n+                    stack.push(vars.dyn_va[idx as usize].clone());\n                 } else {\n                     return Err(\"bad variable name in %g\".to_string());\n                 }"}, {"sha": "b7b9ce89bf3f6beedb317bef04e79681de8be680", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -3,14 +3,14 @@\n //! ncurses-compatible compiled terminfo format parsing (term(5))\n \n use std::collections::HashMap;\n-use std::io::prelude::*;\n use std::io;\n+use std::io::prelude::*;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable.\n \n #[rustfmt_skip]\n-pub static boolfnames: &'static[&'static str] = &[\"auto_left_margin\", \"auto_right_margin\",\n+pub static boolfnames: &[&str] = &[\"auto_left_margin\", \"auto_right_margin\",\n     \"no_esc_ctlc\", \"ceol_standout_glitch\", \"eat_newline_glitch\", \"erase_overstrike\", \"generic_type\",\n     \"hard_copy\", \"has_meta_key\", \"has_status_line\", \"insert_null_glitch\", \"memory_above\",\n     \"memory_below\", \"move_insert_mode\", \"move_standout_mode\", \"over_strike\", \"status_line_esc_ok\",\n@@ -23,13 +23,13 @@ pub static boolfnames: &'static[&'static str] = &[\"auto_left_margin\", \"auto_righ\n     \"return_does_clr_eol\"];\n \n #[rustfmt_skip]\n-pub static boolnames: &'static[&'static str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n+pub static boolnames: &[&str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n     \"gn\", \"hc\", \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\", \"msgr\", \"os\", \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\",\n     \"nxon\", \"mc5i\", \"chts\", \"nrrmc\", \"npc\", \"ndscr\", \"ccc\", \"bce\", \"hls\", \"xhpa\", \"crxm\", \"daisy\",\n     \"xvpa\", \"sam\", \"cpix\", \"lpix\", \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\", \"OTNL\", \"OTpt\", \"OTxr\"];\n \n #[rustfmt_skip]\n-pub static numfnames: &'static[&'static str] = &[ \"columns\", \"init_tabs\", \"lines\",\n+pub static numfnames: &[&str] = &[ \"columns\", \"init_tabs\", \"lines\",\n     \"lines_of_memory\", \"magic_cookie_glitch\", \"padding_baud_rate\", \"virtual_terminal\",\n     \"width_status_line\", \"num_labels\", \"label_height\", \"label_width\", \"max_attributes\",\n     \"maximum_windows\", \"max_colors\", \"max_pairs\", \"no_color_video\", \"buffer_capacity\",\n@@ -40,13 +40,13 @@ pub static numfnames: &'static[&'static str] = &[ \"columns\", \"init_tabs\", \"lines\n     \"new_line_delay\", \"backspace_delay\", \"horizontal_tab_delay\", \"number_of_function_keys\"];\n \n #[rustfmt_skip]\n-pub static numnames: &'static[&'static str] = &[ \"cols\", \"it\", \"lines\", \"lm\", \"xmc\", \"pb\",\n+pub static numnames: &[&str] = &[ \"cols\", \"it\", \"lines\", \"lm\", \"xmc\", \"pb\",\n     \"vt\", \"wsl\", \"nlab\", \"lh\", \"lw\", \"ma\", \"wnum\", \"colors\", \"pairs\", \"ncv\", \"bufsz\", \"spinv\",\n     \"spinh\", \"maddr\", \"mjump\", \"mcs\", \"mls\", \"npins\", \"orc\", \"orl\", \"orhi\", \"orvi\", \"cps\", \"widcs\",\n     \"btns\", \"bitwin\", \"bitype\", \"UTug\", \"OTdC\", \"OTdN\", \"OTdB\", \"OTdT\", \"OTkn\"];\n \n #[rustfmt_skip]\n-pub static stringfnames: &'static[&'static str] = &[ \"back_tab\", \"bell\", \"carriage_return\",\n+pub static stringfnames: &[&str] = &[ \"back_tab\", \"bell\", \"carriage_return\",\n     \"change_scroll_region\", \"clear_all_tabs\", \"clear_screen\", \"clr_eol\", \"clr_eos\",\n     \"column_address\", \"command_character\", \"cursor_address\", \"cursor_down\", \"cursor_home\",\n     \"cursor_invisible\", \"cursor_left\", \"cursor_mem_address\", \"cursor_normal\", \"cursor_right\",\n@@ -120,7 +120,7 @@ pub static stringfnames: &'static[&'static str] = &[ \"back_tab\", \"bell\", \"carria\n     \"acs_plus\", \"memory_lock\", \"memory_unlock\", \"box_chars_1\"];\n \n #[rustfmt_skip]\n-pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n+pub static stringnames: &[&str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n     \"_\", \"_\", \"hpa\", \"cmdch\", \"cup\", \"cud1\", \"home\", \"civis\", \"cub1\", \"mrcup\", \"cnorm\", \"cuf1\",\n     \"ll\", \"cuu1\", \"cvvis\", \"dch1\", \"dl1\", \"dsl\", \"hd\", \"smacs\", \"blink\", \"bold\", \"smcup\", \"smdc\",\n     \"dim\", \"smir\", \"invis\", \"prot\", \"rev\", \"smso\", \"smul\", \"ech\", \"rmacs\", \"sgr0\", \"rmcup\", \"rmdc\","}, {"sha": "1051ddf1986f474ee8a8e61b584a71fdcad5b779", "filename": "src/libterm/win.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5129d05c1c955d92b906a96be9c357fb84e57/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=0ce5129d05c1c955d92b906a96be9c357fb84e57", "patch": "@@ -7,9 +7,9 @@ extern crate libc;\n use std::io;\n use std::io::prelude::*;\n \n-use Attr;\n-use color;\n-use Terminal;\n+use crate::Attr;\n+use crate::color;\n+use crate::Terminal;\n \n /// A Terminal implementation which uses the Win32 Console API.\n pub struct WinConsole<T> {"}]}