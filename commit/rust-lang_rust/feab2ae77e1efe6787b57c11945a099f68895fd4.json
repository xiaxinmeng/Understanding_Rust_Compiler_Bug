{"sha": "feab2ae77e1efe6787b57c11945a099f68895fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYWIyYWU3N2UxZWZlNjc4N2I1N2MxMTk0NWEwOTlmNjg4OTVmZDQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-05T11:33:06Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-29T18:47:18Z"}, "message": "Implement `as` casting (Misc cast kind)", "tree": {"sha": "c18879ab7824ff4264ea4e4122c33028cd161f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18879ab7824ff4264ea4e4122c33028cd161f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feab2ae77e1efe6787b57c11945a099f68895fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feab2ae77e1efe6787b57c11945a099f68895fd4", "html_url": "https://github.com/rust-lang/rust/commit/feab2ae77e1efe6787b57c11945a099f68895fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feab2ae77e1efe6787b57c11945a099f68895fd4/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3150dddb0f2f6c84f2355db324794eecab6a3299", "url": "https://api.github.com/repos/rust-lang/rust/commits/3150dddb0f2f6c84f2355db324794eecab6a3299", "html_url": "https://github.com/rust-lang/rust/commit/3150dddb0f2f6c84f2355db324794eecab6a3299"}], "stats": {"total": 434, "additions": 433, "deletions": 1}, "files": [{"sha": "7eda6acc0abd515dd2d1c6031a1d231a2b33985c", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/feab2ae77e1efe6787b57c11945a099f68895fd4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feab2ae77e1efe6787b57c11945a099f68895fd4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=feab2ae77e1efe6787b57c11945a099f68895fd4", "patch": "@@ -10,6 +10,7 @@\n \n use llvm::ValueRef;\n use rustc::middle::ty::{self, Ty};\n+use middle::ty::cast::{CastTy, IntTy};\n use rustc::mir::repr as mir;\n \n use trans::asm;\n@@ -198,7 +199,89 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::Misc => unimplemented!()\n+                    mir::CastKind::Misc if common::type_is_immediate(bcx.ccx(), operand.ty) => {\n+                        debug_assert!(common::type_is_immediate(bcx.ccx(), cast_ty));\n+                        let r_t_in = CastTy::from_ty(operand.ty).expect(\"bad input type for cast\");\n+                        let r_t_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n+                        let ll_t_in = type_of::arg_type_of(bcx.ccx(), operand.ty);\n+                        let ll_t_out = type_of::arg_type_of(bcx.ccx(), cast_ty);\n+                        let (llval, ll_t_in, signed) = if let CastTy::Int(IntTy::CEnum) = r_t_in {\n+                            let repr = adt::represent_type(bcx.ccx(), operand.ty);\n+                            let llval = operand.immediate();\n+                            let discr = adt::trans_get_discr(bcx, &*repr, llval, None);\n+                            (discr, common::val_ty(discr), adt::is_discr_signed(&*repr))\n+                        } else {\n+                            (operand.immediate(), ll_t_in, operand.ty.is_signed())\n+                        };\n+\n+                        let newval = match (r_t_in, r_t_out) {\n+                            (CastTy::Int(_), CastTy::Int(_)) => {\n+                                let srcsz = ll_t_in.int_width();\n+                                let dstsz = ll_t_out.int_width();\n+                                if srcsz == dstsz {\n+                                    build::BitCast(bcx, llval, ll_t_out)\n+                                } else if srcsz > dstsz {\n+                                    build::Trunc(bcx, llval, ll_t_out)\n+                                } else if signed {\n+                                    build::SExt(bcx, llval, ll_t_out)\n+                                } else {\n+                                    build::ZExt(bcx, llval, ll_t_out)\n+                                }\n+                            }\n+                            (CastTy::Float, CastTy::Float) => {\n+                                let srcsz = ll_t_in.float_width();\n+                                let dstsz = ll_t_out.float_width();\n+                                if dstsz > srcsz {\n+                                    build::FPExt(bcx, llval, ll_t_out)\n+                                } else if srcsz > dstsz {\n+                                    build::FPTrunc(bcx, llval, ll_t_out)\n+                                } else {\n+                                    llval\n+                                }\n+                            }\n+                            (CastTy::Ptr(_), CastTy::Ptr(_)) |\n+                            (CastTy::FnPtr, CastTy::Ptr(_)) |\n+                            (CastTy::RPtr(_), CastTy::Ptr(_)) =>\n+                                build::PointerCast(bcx, llval, ll_t_out),\n+                            (CastTy::Ptr(_), CastTy::Int(_)) |\n+                            (CastTy::FnPtr, CastTy::Int(_)) =>\n+                                build::PtrToInt(bcx, llval, ll_t_out),\n+                            (CastTy::Int(_), CastTy::Ptr(_)) =>\n+                                build::IntToPtr(bcx, llval, ll_t_out),\n+                            (CastTy::Int(_), CastTy::Float) if signed =>\n+                                build::SIToFP(bcx, llval, ll_t_out),\n+                            (CastTy::Int(_), CastTy::Float) =>\n+                                build::UIToFP(bcx, llval, ll_t_out),\n+                            (CastTy::Float, CastTy::Int(IntTy::I)) =>\n+                                build::FPToSI(bcx, llval, ll_t_out),\n+                            (CastTy::Float, CastTy::Int(_)) =>\n+                                build::FPToUI(bcx, llval, ll_t_out),\n+                            _ => bcx.ccx().sess().bug(\n+                                &format!(\"unsupported cast: {:?} to {:?}\", operand.ty, cast_ty)\n+                            )\n+                        };\n+                        OperandValue::Immediate(newval)\n+                    }\n+                    mir::CastKind::Misc => { // Casts from a fat-ptr.\n+                        let ll_cast_ty = type_of::arg_type_of(bcx.ccx(), cast_ty);\n+                        let ll_from_ty = type_of::arg_type_of(bcx.ccx(), operand.ty);\n+                        if let OperandValue::FatPtr(data_ptr, meta_ptr) = operand.val {\n+                            if common::type_is_fat_ptr(bcx.tcx(), cast_ty) {\n+                                let ll_cft = ll_cast_ty.field_types();\n+                                let ll_fft = ll_from_ty.field_types();\n+                                let data_cast = build::PointerCast(bcx, data_ptr, ll_cft[0]);\n+                                assert_eq!(ll_cft[1].kind(), ll_fft[1].kind());\n+                                OperandValue::FatPtr(data_cast, meta_ptr)\n+                            } else { // cast to thin-ptr\n+                                // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n+                                // pointer-cast of that pointer to desired pointer type.\n+                                let llval = build::PointerCast(bcx, data_ptr, ll_cast_ty);\n+                                OperandValue::Immediate(llval)\n+                            }\n+                        } else {\n+                            panic!(\"Unexpected non-FatPtr operand\")\n+                        }\n+                    }\n                 };\n                 (bcx, OperandRef {\n                     val: val,"}, {"sha": "0799ffebe69e51123350b9a9d4bd495ccd0dd036", "filename": "src/test/run-pass/mir_misc_casts.rs", "status": "added", "additions": 349, "deletions": 0, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/feab2ae77e1efe6787b57c11945a099f68895fd4/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feab2ae77e1efe6787b57c11945a099f68895fd4/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs?ref=feab2ae77e1efe6787b57c11945a099f68895fd4", "patch": "@@ -0,0 +1,349 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(libc, rustc_attrs)]\n+\n+extern crate libc;\n+\n+fn func(){}\n+\n+const STR: &'static str = \"hello\";\n+const BSTR: &'static [u8; 5] = b\"hello\";\n+\n+#[rustc_mir]\n+fn from_ptr()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, *const ()) {\n+    let f = 1_usize as *const libc::FILE;\n+    let c1 = f as isize;\n+    let c2 = f as usize;\n+    let c3 = f as i8;\n+    let c4 = f as i16;\n+    let c5 = f as i32;\n+    let c6 = f as i64;\n+    let c7 = f as u8;\n+    let c8 = f as u16;\n+    let c9 = f as u32;\n+    let c10 = f as u64;\n+    let c11 = f as *const ();\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11)\n+}\n+\n+#[rustc_mir]\n+fn from_1()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1 as isize;\n+    let c2 = 1 as usize;\n+    let c3 = 1 as i8;\n+    let c4 = 1 as i16;\n+    let c5 = 1 as i32;\n+    let c6 = 1 as i64;\n+    let c7 = 1 as u8;\n+    let c8 = 1 as u16;\n+    let c9 = 1 as u32;\n+    let c10 = 1 as u64;\n+    let c11 = 1 as f32;\n+    let c12 = 1 as f64;\n+    let c13 = 1 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1usize()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_usize as isize;\n+    let c2 = 1_usize as usize;\n+    let c3 = 1_usize as i8;\n+    let c4 = 1_usize as i16;\n+    let c5 = 1_usize as i32;\n+    let c6 = 1_usize as i64;\n+    let c7 = 1_usize as u8;\n+    let c8 = 1_usize as u16;\n+    let c9 = 1_usize as u32;\n+    let c10 = 1_usize as u64;\n+    let c11 = 1_usize as f32;\n+    let c12 = 1_usize as f64;\n+    let c13 = 1_usize as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1isize()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_isize as isize;\n+    let c2 = 1_isize as usize;\n+    let c3 = 1_isize as i8;\n+    let c4 = 1_isize as i16;\n+    let c5 = 1_isize as i32;\n+    let c6 = 1_isize as i64;\n+    let c7 = 1_isize as u8;\n+    let c8 = 1_isize as u16;\n+    let c9 = 1_isize as u32;\n+    let c10 = 1_isize as u64;\n+    let c11 = 1_isize as f32;\n+    let c12 = 1_isize as f64;\n+    let c13 = 1_isize as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1u8()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_u8 as isize;\n+    let c2 = 1_u8 as usize;\n+    let c3 = 1_u8 as i8;\n+    let c4 = 1_u8 as i16;\n+    let c5 = 1_u8 as i32;\n+    let c6 = 1_u8 as i64;\n+    let c7 = 1_u8 as u8;\n+    let c8 = 1_u8 as u16;\n+    let c9 = 1_u8 as u32;\n+    let c10 = 1_u8 as u64;\n+    let c11 = 1_u8 as f32;\n+    let c12 = 1_u8 as f64;\n+    let c13 = 1_u8 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1i8()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_i8 as isize;\n+    let c2 = 1_i8 as usize;\n+    let c3 = 1_i8 as i8;\n+    let c4 = 1_i8 as i16;\n+    let c5 = 1_i8 as i32;\n+    let c6 = 1_i8 as i64;\n+    let c7 = 1_i8 as u8;\n+    let c8 = 1_i8 as u16;\n+    let c9 = 1_i8 as u32;\n+    let c10 = 1_i8 as u64;\n+    let c11 = 1_i8 as f32;\n+    let c12 = 1_i8 as f64;\n+    let c13 = 1_i8 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1u16()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_u16 as isize;\n+    let c2 = 1_u16 as usize;\n+    let c3 = 1_u16 as i8;\n+    let c4 = 1_u16 as i16;\n+    let c5 = 1_u16 as i32;\n+    let c6 = 1_u16 as i64;\n+    let c7 = 1_u16 as u8;\n+    let c8 = 1_u16 as u16;\n+    let c9 = 1_u16 as u32;\n+    let c10 = 1_u16 as u64;\n+    let c11 = 1_u16 as f32;\n+    let c12 = 1_u16 as f64;\n+    let c13 = 1_u16 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1i16()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_i16 as isize;\n+    let c2 = 1_i16 as usize;\n+    let c3 = 1_i16 as i8;\n+    let c4 = 1_i16 as i16;\n+    let c5 = 1_i16 as i32;\n+    let c6 = 1_i16 as i64;\n+    let c7 = 1_i16 as u8;\n+    let c8 = 1_i16 as u16;\n+    let c9 = 1_i16 as u32;\n+    let c10 = 1_i16 as u64;\n+    let c11 = 1_i16 as f32;\n+    let c12 = 1_i16 as f64;\n+    let c13 = 1_i16 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1u32()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_u32 as isize;\n+    let c2 = 1_u32 as usize;\n+    let c3 = 1_u32 as i8;\n+    let c4 = 1_u32 as i16;\n+    let c5 = 1_u32 as i32;\n+    let c6 = 1_u32 as i64;\n+    let c7 = 1_u32 as u8;\n+    let c8 = 1_u32 as u16;\n+    let c9 = 1_u32 as u32;\n+    let c10 = 1_u32 as u64;\n+    let c11 = 1_u32 as f32;\n+    let c12 = 1_u32 as f64;\n+    let c13 = 1_u32 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1i32()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_i32 as isize;\n+    let c2 = 1_i32 as usize;\n+    let c3 = 1_i32 as i8;\n+    let c4 = 1_i32 as i16;\n+    let c5 = 1_i32 as i32;\n+    let c6 = 1_i32 as i64;\n+    let c7 = 1_i32 as u8;\n+    let c8 = 1_i32 as u16;\n+    let c9 = 1_i32 as u32;\n+    let c10 = 1_i32 as u64;\n+    let c11 = 1_i32 as f32;\n+    let c12 = 1_i32 as f64;\n+    let c13 = 1_i32 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1u64()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_u64 as isize;\n+    let c2 = 1_u64 as usize;\n+    let c3 = 1_u64 as i8;\n+    let c4 = 1_u64 as i16;\n+    let c5 = 1_u64 as i32;\n+    let c6 = 1_u64 as i64;\n+    let c7 = 1_u64 as u8;\n+    let c8 = 1_u64 as u16;\n+    let c9 = 1_u64 as u32;\n+    let c10 = 1_u64 as u64;\n+    let c11 = 1_u64 as f32;\n+    let c12 = 1_u64 as f64;\n+    let c13 = 1_u64 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_1i64()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n+    let c1 = 1_i64 as isize;\n+    let c2 = 1_i64 as usize;\n+    let c3 = 1_i64 as i8;\n+    let c4 = 1_i64 as i16;\n+    let c5 = 1_i64 as i32;\n+    let c6 = 1_i64 as i64;\n+    let c7 = 1_i64 as u8;\n+    let c8 = 1_i64 as u16;\n+    let c9 = 1_i64 as u32;\n+    let c10 = 1_i64 as u64;\n+    let c11 = 1_i64 as f32;\n+    let c12 = 1_i64 as f64;\n+    let c13 = 1_i64 as *const libc::FILE;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n+}\n+\n+#[rustc_mir]\n+fn from_bool()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64) {\n+    let c1 = true as isize;\n+    let c2 = true as usize;\n+    let c3 = true as i8;\n+    let c4 = true as i16;\n+    let c5 = true as i32;\n+    let c6 = true as i64;\n+    let c7 = true as u8;\n+    let c8 = true as u16;\n+    let c9 = true as u32;\n+    let c10 = true as u64;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10)\n+}\n+\n+#[rustc_mir]\n+fn from_1f32()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64) {\n+    let c1 = 1.0_f32 as isize;\n+    let c2 = 1.0_f32 as usize;\n+    let c3 = 1.0_f32 as i8;\n+    let c4 = 1.0_f32 as i16;\n+    let c5 = 1.0_f32 as i32;\n+    let c6 = 1.0_f32 as i64;\n+    let c7 = 1.0_f32 as u8;\n+    let c8 = 1.0_f32 as u16;\n+    let c9 = 1.0_f32 as u32;\n+    let c10 = 1.0_f32 as u64;\n+    let c11 = 1.0_f32 as f32;\n+    let c12 = 1.0_f32 as f64;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12)\n+}\n+\n+#[rustc_mir]\n+fn from_1f64()\n+-> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64) {\n+    let c1 = 1.0f64 as isize;\n+    let c2 = 1.0f64 as usize;\n+    let c3 = 1.0f64 as i8;\n+    let c4 = 1.0f64 as i16;\n+    let c5 = 1.0f64 as i32;\n+    let c6 = 1.0f64 as i64;\n+    let c7 = 1.0f64 as u8;\n+    let c8 = 1.0f64 as u16;\n+    let c9 = 1.0f64 as u32;\n+    let c10 = 1.0f64 as u64;\n+    let c11 = 1.0f64 as f32;\n+    let c12 = 1.0f64 as f64;\n+    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12)\n+}\n+\n+#[rustc_mir]\n+fn other_casts()\n+-> (*const u8, *const isize, *const u8, *const u8) {\n+    let c1 = func as *const u8;\n+    let c2 = c1 as *const isize;\n+\n+    let r = &42u32;\n+    let _ = r as *const u32;\n+\n+    // fat-ptr -> fat-ptr -> fat-raw-ptr -> thin-ptr\n+    let c3 = STR as &str as *const str as *const u8;\n+\n+    let c4 = BSTR as *const [u8] as *const [u16] as *const u8;\n+    (c1, c2, c3, c4)\n+}\n+\n+pub fn assert_eq_13(l: (isize, usize, i8, i16, i32, i64, u8,\n+                        u16, u32, u64, f32, f64, *const libc::FILE),\n+                    r: (isize, usize, i8, i16, i32, i64, u8,\n+                        u16, u32, u64, f32, f64, *const libc::FILE)) -> bool {\n+    let (l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13) = l;\n+    let (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13) = r;\n+    l1 == r1 && l2 == r2 && l3 == r3 && l4 == r4 && l5 == r5 && l6 == r6 && l7 == r7 &&\n+    l8 == r8 && l9 == r9 && l10 == r10 && l11 == r11 && l12 == r12 && l13 == r13\n+}\n+\n+\n+pub fn main() {\n+    let f = 1_usize as *const libc::FILE;\n+    let t13 = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.0, 1.0, f);\n+    let t12 = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.0, 1.0);\n+    assert_eq_13(from_1(), t13);\n+    assert_eq_13(from_1usize(), t13);\n+    assert_eq_13(from_1isize(), t13);\n+    assert_eq_13(from_1u8(), t13);\n+    assert_eq_13(from_1i8(), t13);\n+    assert_eq_13(from_1u16(), t13);\n+    assert_eq_13(from_1i16(), t13);\n+    assert_eq_13(from_1u32(), t13);\n+    assert_eq_13(from_1i32(), t13);\n+    assert_eq_13(from_1u64(), t13);\n+    assert_eq_13(from_1i64(), t13);\n+    assert_eq!(from_1f32(), t12);\n+    assert_eq!(from_1f64(), t12);\n+\n+    assert_eq!(from_ptr(), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 as *const ()));\n+    assert_eq!(from_bool(), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1));\n+\n+    assert_eq!(other_casts(), (func as *const u8, func as *const isize,\n+                               STR as *const str as *const u8, BSTR as *const [u8] as *const u8));\n+}"}]}