{"sha": "271d048523b6c1b0e773d9e5cc76bbb997cc180c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MWQwNDg1MjNiNmMxYjBlNzczZDllNWNjNzZiYmI5OTdjYzE4MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-04T05:56:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-04T05:56:33Z"}, "message": "Auto merge of #35015 - petrochenkov:forearg, r=nikomatsakis\n\nProperly enforce the \"patterns aren't allowed in foreign functions\" rule\n\nCases like `arg @ PATTERN` or `mut arg` were missing.\nApply the same rule to function pointer types.\n\nCloses https://github.com/rust-lang/rust/issues/35203\n[breaking-change], no breakage in sane code is expected though\nr? @nikomatsakis\n\nThis is somewhat related to https://github.com/rust-lang/rfcs/pull/1685 (cc @matklad).\nThe goal is to eventually support full pattern syntax where it makes sense (function body may present) and to support *only* the following forms - `TYPE`, `ident: TYPE`, `_: TYPE` - where patterns don't make sense (function body doesn't present), i.e. in foreign functions and function pointer types.", "tree": {"sha": "d7350e864daae060588a674a6180cc8d41e2c63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7350e864daae060588a674a6180cc8d41e2c63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271d048523b6c1b0e773d9e5cc76bbb997cc180c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271d048523b6c1b0e773d9e5cc76bbb997cc180c", "html_url": "https://github.com/rust-lang/rust/commit/271d048523b6c1b0e773d9e5cc76bbb997cc180c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271d048523b6c1b0e773d9e5cc76bbb997cc180c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f3ee2a01ef24d57430726c098de905c7c6e04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f3ee2a01ef24d57430726c098de905c7c6e04a", "html_url": "https://github.com/rust-lang/rust/commit/40f3ee2a01ef24d57430726c098de905c7c6e04a"}, {"sha": "5c88efc0da9d5222965fe8eaeb1bf48897da7ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c88efc0da9d5222965fe8eaeb1bf48897da7ec1", "html_url": "https://github.com/rust-lang/rust/commit/5c88efc0da9d5222965fe8eaeb1bf48897da7ec1"}], "stats": {"total": 161, "additions": 114, "deletions": 47}, "files": [{"sha": "d2cf48eddebac2de42b84571262075df045d4af7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=271d048523b6c1b0e773d9e5cc76bbb997cc180c", "patch": "@@ -55,6 +55,17 @@ impl<'a> AstValidator<'a> {\n             err.emit();\n         }\n     }\n+\n+    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) {\n+        for arg in &decl.inputs {\n+            match arg.pat.node {\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n+                PatKind::Wild => {}\n+                PatKind::Ident(..) => report_err(arg.pat.span, true),\n+                _ => report_err(arg.pat.span, false),\n+            }\n+        }\n+    }\n }\n \n impl<'a> Visitor for AstValidator<'a> {\n@@ -82,6 +93,23 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_expr(self, expr)\n     }\n \n+    fn visit_ty(&mut self, ty: &Ty) {\n+        match ty.node {\n+            TyKind::BareFn(ref bfty) => {\n+                self.check_decl_no_pat(&bfty.decl, |span, _| {\n+                    let mut err = struct_span_err!(self.session, span, E0561,\n+                                            \"patterns aren't allowed in function pointer types\");\n+                    err.span_note(span, \"this is a recent error, see \\\n+                                         issue #35203 for more details\");\n+                    err.emit();\n+                });\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_ty(self, ty)\n+    }\n+\n     fn visit_path(&mut self, path: &Path, id: NodeId) {\n         if path.global && path.segments.len() > 0 {\n             let ident = path.segments[0].identifier;\n@@ -135,6 +163,25 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_item(self, item)\n     }\n \n+    fn visit_foreign_item(&mut self, fi: &ForeignItem) {\n+        match fi.node {\n+            ForeignItemKind::Fn(ref decl, _) => {\n+                self.check_decl_no_pat(decl, |span, is_recent| {\n+                    let mut err = struct_span_err!(self.session, span, E0130,\n+                                        \"patterns aren't allowed in foreign function declarations\");\n+                    if is_recent {\n+                        err.span_note(span, \"this is a recent error, see \\\n+                                             issue #35203 for more details\");\n+                    }\n+                    err.emit();\n+                });\n+            }\n+            ForeignItemKind::Static(..) => {}\n+        }\n+\n+        visit::walk_foreign_item(self, fi)\n+    }\n+\n     fn visit_variant_data(&mut self, vdata: &VariantData, _: Ident,\n                           _: &Generics, _: NodeId, span: Span) {\n         if vdata.fields().is_empty() {"}, {"sha": "3e2dd477bccf089f0e40b0598246ce9c120b39e2", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=271d048523b6c1b0e773d9e5cc76bbb997cc180c", "patch": "@@ -49,6 +49,39 @@ match 5u32 {\n ```\n \"##,\n \n+E0130: r##\"\n+You declared a pattern as an argument in a foreign function declaration.\n+Erroneous code example:\n+\n+```compile_fail\n+extern {\n+    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n+                                //        function declarations\n+}\n+```\n+\n+Please replace the pattern argument with a regular one. Example:\n+\n+```\n+struct SomeStruct {\n+    a: u32,\n+    b: u32,\n+}\n+\n+extern {\n+    fn foo(s: SomeStruct); // ok!\n+}\n+```\n+\n+Or:\n+\n+```\n+extern {\n+    fn foo(a: (u32, u32)); // ok!\n+}\n+```\n+\"##,\n+\n E0161: r##\"\n A value was moved. However, its size was not known at compile time, and only\n values of a known size can be moved.\n@@ -187,4 +220,5 @@ pub impl Foo for Bar {\n \n register_diagnostics! {\n     E0472, // asm! is unsupported on this target\n+    E0561, // patterns aren't allowed in function pointer types\n }"}, {"sha": "4486748a1f0564fbc9bf6c873d26be741c7edec9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=271d048523b6c1b0e773d9e5cc76bbb997cc180c", "patch": "@@ -60,8 +60,6 @@ There are some shortcomings in this design:\n \n use astconv::{AstConv, ast_region_to_region, Bounds, PartitionedBounds, partition_bounds};\n use lint;\n-use hir::def::Def;\n-use hir::def_id::DefId;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n@@ -74,7 +72,6 @@ use rustc::ty::{VariantKind};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;\n-use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n use util::nodemap::{NodeMap, FnvHashMap};\n use {CrateCtxt, write_ty_to_tcx};\n@@ -91,9 +88,9 @@ use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n-use rustc::hir::{self, PatKind};\n-use rustc::hir::intravisit;\n-use rustc::hir::print as pprust;\n+use rustc::hir::{self, intravisit, map as hir_map, print as pprust};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n \n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n@@ -2144,14 +2141,6 @@ fn compute_type_scheme_of_foreign_fn_decl<'a, 'tcx>(\n     abi: abi::Abi)\n     -> ty::TypeScheme<'tcx>\n {\n-    for i in &decl.inputs {\n-        match i.pat.node {\n-            PatKind::Binding(..) | PatKind::Wild => {}\n-            _ => span_err!(ccx.tcx.sess, i.pat.span, E0130,\n-                           \"patterns aren't allowed in foreign function declarations\")\n-        }\n-    }\n-\n     let ty_generics = ty_generics_for_fn(ccx, ast_generics, &ty::Generics::empty());\n \n     let rb = BindingRscope::new();"}, {"sha": "b655d955429f06087ada1e969a5b866d3d2a084d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=271d048523b6c1b0e773d9e5cc76bbb997cc180c", "patch": "@@ -1800,39 +1800,6 @@ Please also verify that this wasn't because of a name-clash and rename the type\n parameter if so.\n \"##,\n \n-E0130: r##\"\n-You declared a pattern as an argument in a foreign function declaration.\n-Erroneous code example:\n-\n-```compile_fail\n-extern {\n-    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n-                                //        function declarations\n-}\n-```\n-\n-Please replace the pattern argument with a regular one. Example:\n-\n-```\n-struct SomeStruct {\n-    a: u32,\n-    b: u32,\n-}\n-\n-extern {\n-    fn foo(s: SomeStruct); // ok!\n-}\n-```\n-\n-Or:\n-\n-```\n-extern {\n-    fn foo(a: (u32, u32)); // ok!\n-}\n-```\n-\"##,\n-\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`."}, {"sha": "3edbdf4ebc9584ce7d5770bd15064dd56fedf64f", "filename": "src/test/compile-fail/no-patterns-in-args.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d048523b6c1b0e773d9e5cc76bbb997cc180c/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs?ref=271d048523b6c1b0e773d9e5cc76bbb997cc180c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+                        //~^ NOTE this is a recent error\n+    fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+    fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+                        //~^ NOTE this is a recent error\n+    fn g1(arg: u8); // OK\n+    fn g2(_: u8); // OK\n+    // fn g3(u8); // Not yet\n+}\n+\n+type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+                           //~^ NOTE this is a recent error\n+type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+                        //~^ NOTE this is a recent error\n+type B1 = fn(arg: u8); // OK\n+type B2 = fn(_: u8); // OK\n+type B3 = fn(u8); // OK\n+\n+fn main() {}"}]}