{"sha": "a4444aa78079665658b0d656c6d243d88a9ac5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDQ0YWE3ODA3OTY2NTY1OGIwZDY1NmM2ZDI0M2Q4OGE5YWM1Y2M=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-12T04:36:54Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-14T00:55:34Z"}, "message": "Add error explanations for E0066 and E0069.\n\nThis also updates the error messages for both. For E0066, it removes mention\nof \"managed heap\", which was removed in 8a91d33. For E0069, I just tweaked\nthe wording to make it a bit more explicit.", "tree": {"sha": "98886f8ed6501d5fb3b561674d1b85d17cde95aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98886f8ed6501d5fb3b561674d1b85d17cde95aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4444aa78079665658b0d656c6d243d88a9ac5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4444aa78079665658b0d656c6d243d88a9ac5cc", "html_url": "https://github.com/rust-lang/rust/commit/a4444aa78079665658b0d656c6d243d88a9ac5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4444aa78079665658b0d656c6d243d88a9ac5cc/comments", "author": null, "committer": null, "parents": [{"sha": "5a341ecfc985c190d8c359a8c995a094ef22ab9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a341ecfc985c190d8c359a8c995a094ef22ab9e", "html_url": "https://github.com/rust-lang/rust/commit/5a341ecfc985c190d8c359a8c995a094ef22ab9e"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "3cdbaec15284b7e488e423ae208e1aa8b2191781", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a4444aa78079665658b0d656c6d243d88a9ac5cc", "patch": "@@ -3082,8 +3082,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n           let mut checked = false;\n           opt_place.as_ref().map(|place| match place.node {\n               ast::ExprPath(None, ref path) => {\n-                  // FIXME(pcwalton): For now we hardcode the two permissible\n-                  // places: the exchange heap and the managed heap.\n+                  // FIXME(pcwalton): For now we hardcode the only permissible\n+                  // place: the exchange heap.\n                   let definition = lookup_full_def(tcx, path.span, place.id);\n                   let def_id = definition.def_id();\n                   let referent_ty = fcx.expr_ty(&**subexpr);\n@@ -3097,7 +3097,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n           if !checked {\n               span_err!(tcx.sess, expr.span, E0066,\n-                  \"only the managed heap and exchange heap are currently supported\");\n+                  \"only the exchange heap is currently supported\");\n               fcx.write_ty(id, tcx.types.err);\n           }\n       }\n@@ -3317,7 +3317,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                         if let Err(_) = fcx.mk_eqty(false, infer::Misc(expr.span),\n                                                     result_type, ty::mk_nil(fcx.tcx())) {\n                             span_err!(tcx.sess, expr.span, E0069,\n-                                \"`return;` in function returning non-nil\");\n+                                \"`return;` in a function whose return type is \\\n+                                 not `()`\");\n                         },\n                     Some(ref e) => {\n                         check_expr_coercable_to_type(fcx, &**e, result_type);"}, {"sha": "1613122ecced2451d6055ba6b12419cfcc3391ec", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a4444aa78079665658b0d656c6d243d88a9ac5cc", "patch": "@@ -91,6 +91,16 @@ enum variant, one of the fields was not provided. Each field should be specified\n exactly once.\n \"##,\n \n+E0066: r##\"\n+Box placement expressions (like C++'s \"placement new\") do not support any\n+place expression except the exchange heap (i.e. `std::boxed::HEAP`).\n+Furthermore, the syntax is changing to use `in` instead of `box`. See [RFC\n+470][rfc470] and [RFC 809][rfc809] for more details.\n+\n+[rfc470]: https://github.com/rust-lang/rfcs/pull/470\n+[rfc809]: https://github.com/rust-lang/rfcs/pull/809\n+\"##,\n+\n E0067: r##\"\n The left-hand side of an assignment operator must be an lvalue expression. An\n lvalue expression represents a memory location and includes item paths (ie,\n@@ -108,6 +118,21 @@ LinkedList::new() += 1;\n ```\n \"##,\n \n+E0069: r##\"\n+The compiler found a function whose body contains a `return;` statement but\n+whose return type is not `()`. An example of this is:\n+\n+```\n+// error\n+fn foo() -> u8 {\n+    return;\n+}\n+```\n+\n+Since `return;` is just like `return ();`, there is a mismatch between the\n+function's return type and the value being returned.\n+\"##,\n+\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -484,9 +509,7 @@ register_diagnostics! {\n     E0059,\n     E0060,\n     E0061,\n-    E0066,\n     E0068,\n-    E0069,\n     E0070,\n     E0071,\n     E0072,"}, {"sha": "003c6644f7f0229061662a995ecc8ab5eff03ba1", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=a4444aa78079665658b0d656c6d243d88a9ac5cc", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     box ( () ) 0;\n-    //~^ ERROR: only the managed heap and exchange heap are currently supported\n+    //~^ ERROR: only the exchange heap is currently supported\n }"}, {"sha": "6be98fbd82773ffad6e708af3bddb0559de87276", "filename": "src/test/compile-fail/ret-non-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4444aa78079665658b0d656c6d243d88a9ac5cc/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs?ref=a4444aa78079665658b0d656c6d243d88a9ac5cc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: `return;` in function returning non-nil\n+// error-pattern: `return;` in a function whose return type is not `()`\n \n fn f() { return; }\n "}]}