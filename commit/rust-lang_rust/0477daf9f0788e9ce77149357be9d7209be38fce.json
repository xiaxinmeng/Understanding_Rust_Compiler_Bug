{"sha": "0477daf9f0788e9ce77149357be9d7209be38fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzdkYWY5ZjA3ODhlOWNlNzcxNDkzNTdiZTlkNzIwOWJlMzhmY2U=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-01-23T15:01:49Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2017-02-04T23:01:01Z"}, "message": "Make builtin derives a SyntaxExtension\n\nThis allows builtin derives to be registered and\nresolved, just like other derive types.", "tree": {"sha": "dd683060d3342231efe8335427f6bfffbba5e13f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd683060d3342231efe8335427f6bfffbba5e13f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0477daf9f0788e9ce77149357be9d7209be38fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0477daf9f0788e9ce77149357be9d7209be38fce", "html_url": "https://github.com/rust-lang/rust/commit/0477daf9f0788e9ce77149357be9d7209be38fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0477daf9f0788e9ce77149357be9d7209be38fce/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5cb9545cfa4f1e90c92266b802edc4690f584a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cb9545cfa4f1e90c92266b802edc4690f584a", "html_url": "https://github.com/rust-lang/rust/commit/eb5cb9545cfa4f1e90c92266b802edc4690f584a"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "231e2e6205cf8a3966b97c6df27b21aae1bcd945", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::SyntaxExtension::{MultiDecorator, MultiModifier, NormalTT, IdentTT};\n \n-use ast::{self, Attribute, Name, PatKind};\n+use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, ExpnInfo, Spanned, respan};\n use syntax_pos::{Span, ExpnId, NO_EXPANSION};\n@@ -471,6 +471,9 @@ impl MacResult for DummyResult {\n     }\n }\n \n+pub type BuiltinDeriveFn =\n+    for<'cx> fn(&'cx mut ExtCtxt, Span, &MetaItem, &Annotatable, &mut FnMut(Annotatable));\n+\n /// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n     /// A syntax extension that is attached to an item and creates new items\n@@ -508,6 +511,9 @@ pub enum SyntaxExtension {\n     IdentTT(Box<IdentMacroExpander>, Option<Span>, bool),\n \n     CustomDerive(Box<MultiItemModifier>),\n+\n+    /// An attribute-like procedural macro that derives a builtin trait.\n+    BuiltinDerive(BuiltinDeriveFn),\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "0e5d94e03810f62d78880dfa967b1bf3b1d6ed32", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n                 self.parse_expansion(tok_result, kind, name, attr.span)\n             }\n-            SyntaxExtension::CustomDerive(_) => {\n+            SyntaxExtension::CustomDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", name));\n                 kind.dummy(attr.span)\n             }\n@@ -440,7 +440,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::CustomDerive(..) => {\n+            SyntaxExtension::CustomDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", extname));\n                 return kind.dummy(span);\n             }"}, {"sha": "6359d642d157cf4159c955e784f476aca4126e8e", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -35,6 +35,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut FnMut(Annotatable)) {\n+    deriving::warn_if_deprecated(cx, span, \"Decodable\");\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "a276193e81b979de9df1cd96701f9fb359d03527", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -112,6 +112,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut FnMut(Annotatable)) {\n+    deriving::warn_if_deprecated(cx, span, \"Encodable\");\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "30d0da588a5df0e6d3908d8069e6e35d854a7980", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -10,10 +10,11 @@\n \n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n+use std::rc::Rc;\n use syntax::ast::{self, MetaItem};\n use syntax::attr::HasAttrs;\n use syntax::codemap;\n-use syntax::ext::base::{Annotatable, ExtCtxt, SyntaxExtension};\n+use syntax::ext::base::{Annotatable, ExtCtxt, SyntaxExtension, Resolver};\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n use syntax::ptr::P;\n@@ -292,7 +293,10 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n     for titem in traits.iter() {\n         let tname = titem.word().unwrap().name();\n         let name = Symbol::intern(&format!(\"derive({})\", tname));\n+        let tname_cx = ast::Ident::with_empty_ctxt(titem.name().unwrap());\n         let mitem = cx.meta_word(titem.span, name);\n+        let path = ast::Path::from_ident(titem.span, tname_cx);\n+        let ext = cx.resolver.resolve_macro(cx.current_expansion.mark, &path, false).unwrap();\n \n         let span = Span {\n             expn_id: cx.codemap().record_expansion(codemap::ExpnInfo {\n@@ -306,11 +310,15 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n             ..titem.span\n         };\n \n-        let my_item = Annotatable::Item(item);\n-        expand_builtin(&tname.as_str(), cx, span, &mitem, &my_item, &mut |a| {\n-            items.push(a);\n-        });\n-        item = my_item.expect_item();\n+        if let SyntaxExtension::BuiltinDerive(ref func) = *ext {\n+            let my_item = Annotatable::Item(item);\n+            func(cx, span, &mitem, &my_item, &mut |a| {\n+                items.push(a)\n+            });\n+            item = my_item.expect_item();\n+        } else {\n+            unreachable!();\n+        }\n     }\n \n     items.insert(0, Annotatable::Item(item));\n@@ -326,21 +334,13 @@ macro_rules! derive_traits {\n             }\n         }\n \n-        fn expand_builtin(name: &str,\n-                          ecx: &mut ExtCtxt,\n-                          span: Span,\n-                          mitem: &MetaItem,\n-                          item: &Annotatable,\n-                          push: &mut FnMut(Annotatable)) {\n-            match name {\n-                $(\n-                    $name => {\n-                        warn_if_deprecated(ecx, span, $name);\n-                        $func(ecx, span, mitem, item, push);\n-                    }\n-                )*\n-                _ => panic!(\"not a builtin derive mode: {}\", name),\n-            }\n+        pub fn register_builtin_derives(resolver: &mut Resolver) {\n+            $(\n+                resolver.add_ext(\n+                    ast::Ident::with_empty_ctxt(Symbol::intern($name)),\n+                    Rc::new(SyntaxExtension::BuiltinDerive($func))\n+                );\n+            )*\n         }\n     }\n }"}, {"sha": "e872cfaeacb7b512542c79bbc43cc19e04679418", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477daf9f0788e9ce77149357be9d7209be38fce/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=0477daf9f0788e9ce77149357be9d7209be38fce", "patch": "@@ -57,6 +57,8 @@ use syntax::symbol::Symbol;\n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n                          enable_quotes: bool) {\n+    deriving::register_builtin_derives(resolver);\n+\n     let mut register = |name, ext| {\n         resolver.add_ext(ast::Ident::with_empty_ctxt(name), Rc::new(ext));\n     };"}]}