{"sha": "42a317a1cd53a0324427a61aee98c17be350df3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYTMxN2ExY2Q1M2EwMzI0NDI3YTYxYWVlOThjMTdiZTM1MGRmM2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-26T23:26:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T15:56:17Z"}, "message": "Remove run-pass test suites", "tree": {"sha": "61875240c2880c6b9f7bf54893db893e3d73e605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61875240c2880c6b9f7bf54893db893e3d73e605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42a317a1cd53a0324427a61aee98c17be350df3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42a317a1cd53a0324427a61aee98c17be350df3b", "html_url": "https://github.com/rust-lang/rust/commit/42a317a1cd53a0324427a61aee98c17be350df3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42a317a1cd53a0324427a61aee98c17be350df3b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5486cc69bdcc1c0027d7d06cd7630a2c48e3b063", "url": "https://api.github.com/repos/rust-lang/rust/commits/5486cc69bdcc1c0027d7d06cd7630a2c48e3b063", "html_url": "https://github.com/rust-lang/rust/commit/5486cc69bdcc1c0027d7d06cd7630a2c48e3b063"}], "stats": {"total": 102, "additions": 32, "deletions": 70}, "files": [{"sha": "3e877fc4e317c9e0affbea0b3f58b685d0b4bf06", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -55,11 +55,11 @@ The script accepts commands, flags, and arguments to determine what to do:\n   # run all unit tests\n   ./x.py test\n \n-  # execute the run-pass test suite\n-  ./x.py test src/test/run-pass\n+  # execute the UI test suite\n+  ./x.py test src/test/ui\n \n-  # execute only some tests in the run-pass test suite\n-  ./x.py test src/test/run-pass --test-args substring-of-test-name\n+  # execute only some tests in the UI test suite\n+  ./x.py test src/test/ui --test-args substring-of-test-name\n \n   # execute tests in the standard library in stage0\n   ./x.py test --stage 0 src/libstd\n@@ -215,7 +215,7 @@ build/\n \n     # Output for all compiletest-based test suites\n     test/\n-      run-pass/\n+      ui/\n       compile-fail/\n       debuginfo/\n       ..."}, {"sha": "5a75497173eb31dcdce53bda2bfaa8ae7d2f0450", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -371,7 +371,6 @@ impl<'a> Builder<'a> {\n             Kind::Test => describe!(\n                 test::Tidy,\n                 test::Ui,\n-                test::RunPass,\n                 test::CompileFail,\n                 test::RunFail,\n                 test::RunPassValgrind,\n@@ -382,10 +381,8 @@ impl<'a> Builder<'a> {\n                 test::Incremental,\n                 test::Debuginfo,\n                 test::UiFullDeps,\n-                test::RunPassFullDeps,\n                 test::Rustdoc,\n                 test::Pretty,\n-                test::RunPassPretty,\n                 test::RunFailPretty,\n                 test::RunPassValgrindPretty,\n                 test::Crate,"}, {"sha": "d1542b1fca6b7b6278a967e62685a4a65f10bdc8", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -629,7 +629,6 @@ fn test_with_no_doc_stage0() {\n fn test_exclude() {\n     let mut config = configure(&[], &[]);\n     config.exclude = vec![\n-        \"src/test/run-pass\".into(),\n         \"src/tools/tidy\".into(),\n     ];\n     config.cmd = Subcommand::Test {\n@@ -648,11 +647,9 @@ fn test_exclude() {\n     let builder = Builder::new(&build);\n     builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n \n-    // Ensure we have really excluded run-pass & tidy\n-    assert!(!builder.cache.contains::<test::RunPass>());\n+    // Ensure we have really excluded tidy\n     assert!(!builder.cache.contains::<test::Tidy>());\n \n     // Ensure other tests are not affected.\n-    assert!(builder.cache.contains::<test::RunPassFullDeps>());\n     assert!(builder.cache.contains::<test::RustdocUi>());\n }"}, {"sha": "828865f10ffba37ce53dcfb1003527316565cb82", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -330,7 +330,7 @@ Arguments:\n     This subcommand accepts a number of paths to directories to tests that\n     should be compiled and run. For example:\n \n-        ./x.py test src/test/run-pass\n+        ./x.py test src/test/ui\n         ./x.py test src/libstd --test-args hash_map\n         ./x.py test src/libstd --stage 0 --no-doc\n         ./x.py test src/test/ui --bless"}, {"sha": "73d6fe532c8b3cf5966a2741e96c67ab9951dc91", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -48,10 +48,8 @@ check:\n \t$(Q)$(BOOTSTRAP) test $(BOOTSTRAP_ARGS)\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n-\t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\\n \t\tsrc/test/run-pass-valgrind/pretty \\\n-\t\tsrc/test/run-pass-fulldeps/pretty \\\n \t\t$(AUX_ARGS) \\\n \t\t$(BOOTSTRAP_ARGS)\n check-bootstrap:\n@@ -75,9 +73,7 @@ check-stage2-T-x86_64-unknown-linux-musl-H-x86_64-unknown-linux-gnu:\n \n TESTS_IN_2 := \\\n \tsrc/test/ui \\\n-\tsrc/test/run-pass \\\n \tsrc/test/compile-fail \\\n-\tsrc/test/run-pass-fulldeps \\\n \tsrc/tools/linkchecker\n \n ci-subset-1:"}, {"sha": "bf824775ccbf2ea472a72dbf69c9372bf4652c1d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -547,7 +547,7 @@ impl Step for TestHelpers {\n     }\n \n     /// Compiles the `rust_test_helpers.c` library which we used in various\n-    /// `run-pass` test suites for ABI testing.\n+    /// `run-pass` tests for ABI testing.\n     fn run(self, builder: &Builder<'_>) {\n         if builder.config.dry_run {\n             return;"}, {"sha": "0959734423e2ce996c1273f4b718918d8a36ca04", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -820,13 +820,6 @@ default_test_with_compare_mode!(Ui {\n     compare_mode: \"nll\"\n });\n \n-default_test_with_compare_mode!(RunPass {\n-    path: \"src/test/run-pass\",\n-    mode: \"run-pass\",\n-    suite: \"run-pass\",\n-    compare_mode: \"nll\"\n-});\n-\n default_test!(CompileFail {\n     path: \"src/test/compile-fail\",\n     mode: \"compile-fail\",\n@@ -881,12 +874,6 @@ host_test!(UiFullDeps {\n     suite: \"ui-fulldeps\"\n });\n \n-host_test!(RunPassFullDeps {\n-    path: \"src/test/run-pass-fulldeps\",\n-    mode: \"run-pass\",\n-    suite: \"run-pass-fulldeps\"\n-});\n-\n host_test!(Rustdoc {\n     path: \"src/test/rustdoc\",\n     mode: \"rustdoc\",\n@@ -898,13 +885,6 @@ host_test!(Pretty {\n     mode: \"pretty\",\n     suite: \"pretty\"\n });\n-test!(RunPassPretty {\n-    path: \"src/test/run-pass/pretty\",\n-    mode: \"pretty\",\n-    suite: \"run-pass\",\n-    default: false,\n-    host: true\n-});\n test!(RunFailPretty {\n     path: \"src/test/run-fail/pretty\",\n     mode: \"pretty\","}, {"sha": "3abaab6b34ef0dece78106d7955dc7f24c084a5d", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -32,7 +32,7 @@ ENV TARGETS=asmjs-unknown-emscripten\n ENV RUST_CONFIGURE_ARGS --enable-emscripten --disable-optimize-tests\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n-  src/test/run-pass \\\n+  src/test/ui \\\n   src/test/run-fail \\\n   src/libstd \\\n   src/liballoc \\"}, {"sha": "6a2600d875642f55588d6c6d3e216beacb4c550c", "filename": "src/ci/docker/test-various/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -43,7 +43,6 @@ ENV WASM_TARGETS=wasm32-unknown-unknown\n ENV WASM_SCRIPT python2.7 /checkout/x.py test --target $WASM_TARGETS \\\n   src/test/run-make \\\n   src/test/ui \\\n-  src/test/run-pass \\\n   src/test/compile-fail \\\n   src/test/mir-opt \\\n   src/test/codegen-units \\"}, {"sha": "f19b39daca3ef791010490905ef30f4af038faed", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -44,7 +44,7 @@ code that manipulates syntax trees at\n compile time.\n \n Let's write a plugin\n-[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/roman_numerals.rs)\n that implements Roman numeral integer literals.\n \n ```rust,ignore"}, {"sha": "4a7c6af7adab750ff5441ee573706ad65d390556", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -2172,5 +2172,5 @@ impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n     }\n }\n \n-// If you expected tests to be here, look instead at the run-pass/ifmt.rs test,\n+// If you expected tests to be here, look instead at the ui/ifmt.rs test,\n // it's a lot easier than creating all of the rt::Piece structures here."}, {"sha": "3f2175921d48c45a24f22a4a3055d8577956b214", "filename": "src/librustc_ast_borrowck/borrowck/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_ast_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_ast_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_borrowck%2Fborrowck%2FREADME.md?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -747,7 +747,7 @@ However, it is not always unsafe to freeze the base pointer. In\n particular, if the referent is frozen, there is no harm in it:\n \n ```rust\n-// src/test/run-pass/borrowck-borrow-of-mut-base-ptr-safe.rs\n+// src/test/ui/borrowck-borrow-of-mut-base-ptr-safe.rs\n fn foo<'a>(mut t0: &'a mut i32,\n            mut t1: &'a mut i32) {\n     let p: &i32 = &*t0; // Freezes `*t0`\n@@ -763,7 +763,7 @@ already frozen. In particular, we cannot assign to `*t0` through the\n new alias `t2`, as demonstrated in this test case:\n \n ```rust\n-// src/test/run-pass/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs\n+// src/test/ui/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs\n fn foo(t0: & &mut i32) {\n     let t1 = t0;\n     let p: &i32 = &**t0;"}, {"sha": "3f0604b84b7d723029cd8cdae8aef45f4e90edd3", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // For each ampersand peeled off, update the binding mode and push the original\n             // type into the adjustments vector.\n             //\n-            // See the examples in `run-pass/match-defbm*.rs`.\n+            // See the examples in `ui/match-defbm*.rs`.\n             let mut pat_adjustments = vec![];\n             while let ty::Ref(_, inner_ty, inner_mutability) = exp_ty.sty {\n                 debug!(\"inspecting {:?}\", exp_ty);"}, {"sha": "4edb6ad893113b0e772e40c173384063698da321", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -13,7 +13,7 @@\n //! useful for freezing mut/const things (that is, when the expected is &T\n //! but you have &const T or &mut T) and also for avoiding the linearity\n //! of mut things (when the expected is &mut T and you have &mut T). See\n-//! the various `src/test/run-pass/coerce-reborrow-*.rs` tests for\n+//! the various `src/test/ui/coerce-reborrow-*.rs` tests for\n //! examples of where this is useful.\n //!\n //! ## Subtle note\n@@ -346,7 +346,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             //     too strong. Consider a coercion from `&'a &'x Rc<T>` to\n             //     `&'b T`. In this case, `'a` is actually irrelevant.\n             //     The pointer we want is `LUB('x, 'b`). If we choose `LUB('a,'b)`\n-            //     we get spurious errors (`run-pass/regions-lub-ref-ref-rc.rs`).\n+            //     we get spurious errors (`ui/regions-lub-ref-ref-rc.rs`).\n             //     (The errors actually show up in borrowck, typically, because\n             //     this extra edge causes the region `'a` to be inferred to something\n             //     too big, which then results in borrowck errors.)"}, {"sha": "75428efa73c5beb19508a2be0c2e4680e4bf83a3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -1394,7 +1394,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// probe. This will result in a pending obligation so when more type-info is available we can\n     /// make the final decision.\n     ///\n-    /// Example (`src/test/run-pass/method-two-trait-defer-resolution-1.rs`):\n+    /// Example (`src/test/ui/method-two-trait-defer-resolution-1.rs`):\n     ///\n     /// ```\n     /// trait Foo { ... }"}, {"sha": "36977b878dd7e88307798e6442a22c317cfd9852", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'tcx> Expectation<'tcx> {\n     /// It is only the `&[1, 2, 3]` expression as a whole that can be coerced\n     /// to the type `&[isize]`. Therefore, we propagate this more limited hint,\n     /// which still is useful, because it informs integer literals and the like.\n-    /// See the test case `test/run-pass/coerce-expect-unsized.rs` and #20169\n+    /// See the test case `test/ui/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n     fn rvalue_hint(fcx: &FnCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n         match fcx.tcx.struct_tail_without_normalization(ty).sty {"}, {"sha": "764041d2f4239f668c9efafc3a99bac075dcca83", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -1742,6 +1742,6 @@ mod tests {\n         assert!(thread::current().id() != spawned_id);\n     }\n \n-    // NOTE: the corresponding test for stderr is in run-pass/thread-stderr, due\n+    // NOTE: the corresponding test for stderr is in ui/thread-stderr, due\n     // to the test harness apparently interfering with stderr configuration.\n }"}, {"sha": "5af97199902e6828e92581e0f59e6a0e03d9d2da", "filename": "src/libsyntax/ext/tt/macro_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_check.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -238,7 +238,7 @@ fn check_binders(\n     match *lhs {\n         TokenTree::Token(..) => {}\n         // This can only happen when checking a nested macro because this LHS is then in the RHS of\n-        // the outer macro. See run-pass/macros/macro-of-higher-order.rs where $y:$fragment in the\n+        // the outer macro. See ui/macros/macro-of-higher-order.rs where $y:$fragment in the\n         // LHS of the nested macro (and RHS of the outer macro) is parsed as MetaVar(y) Colon\n         // MetaVar(fragment) and not as MetaVarDecl(y, fragment).\n         TokenTree::MetaVar(span, name) => {"}, {"sha": "f83979b9e9b3972f9873040702a3968c9f654518", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -305,7 +305,7 @@ impl HygieneData {\n         // was defined at its invocation (i.e., inside the macros 2.0 definition)\n         // so that the macros 2.0 definition remains hygienic.\n         //\n-        // See the example at `test/run-pass/hygiene/legacy_interaction.rs`.\n+        // See the example at `test/ui/hygiene/legacy_interaction.rs`.\n         for (expn_id, transparency) in self.marks(ctxt) {\n             call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);\n         }"}, {"sha": "66e030e979355454b2738d7d1df0b59ef14c1681", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -12,8 +12,6 @@ use crate::util::PathBufExt;\n pub enum Mode {\n     CompileFail,\n     RunFail,\n-    /// This now behaves like a `ui` test that has an implict `// run-pass`.\n-    RunPass,\n     RunPassValgrind,\n     Pretty,\n     DebugInfoCdb,\n@@ -33,7 +31,7 @@ pub enum Mode {\n \n impl Mode {\n     pub fn disambiguator(self) -> &'static str {\n-        // Run-pass and pretty run-pass tests could run concurrently, and if they do,\n+        // Pretty-printing tests could run concurrently, and if they do,\n         // they need to keep their output segregated. Same is true for debuginfo tests that\n         // can be run on cdb, gdb, and lldb.\n         match self {\n@@ -52,7 +50,6 @@ impl FromStr for Mode {\n         match s {\n             \"compile-fail\" => Ok(CompileFail),\n             \"run-fail\" => Ok(RunFail),\n-            \"run-pass\" => Ok(RunPass),\n             \"run-pass-valgrind\" => Ok(RunPassValgrind),\n             \"pretty\" => Ok(Pretty),\n             \"debuginfo-cdb\" => Ok(DebugInfoCdb),\n@@ -78,7 +75,6 @@ impl fmt::Display for Mode {\n         let s = match *self {\n             CompileFail => \"compile-fail\",\n             RunFail => \"run-fail\",\n-            RunPass => \"run-pass\",\n             RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n             DebugInfoCdb => \"debuginfo-cdb\",\n@@ -202,7 +198,7 @@ pub struct Config {\n     /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n \n-    /// The test mode, compile-fail, run-fail, run-pass\n+    /// The test mode, compile-fail, run-fail, ui\n     pub mode: Mode,\n \n     /// Run ignored tests"}, {"sha": "040230d0020c78643c09d301f5e20e29dd96981c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -592,7 +592,7 @@ impl TestProps {\n             check_no_run(\"build-pass\");\n             Some(PassMode::Build)\n         } else if config.parse_name_directive(ln, \"run-pass\") {\n-            if config.mode != Mode::Ui && config.mode != Mode::RunPass /* compatibility */ {\n+            if config.mode != Mode::Ui {\n                 panic!(\"`run-pass` header is only supported in UI tests\")\n             }\n             Some(PassMode::Run)"}, {"sha": "31360c000ce84d74587e72adfcc94bebf7a5a8a4", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -125,8 +125,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"\",\n             \"mode\",\n             \"which sort of compile tests to run\",\n-            \"(compile-fail|run-fail|run-pass|\\\n-             run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n+            \"(compile-fail|run-fail|run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n         )\n         .optopt(\n             \"\",\n@@ -814,7 +813,7 @@ fn make_test_name(\n ) -> test::TestName {\n     // Convert a complete path to something like\n     //\n-    //    run-pass/foo/bar/baz.rs\n+    //    ui/foo/bar/baz.rs\n     let path = PathBuf::from(config.src_base.file_name().unwrap())\n         .join(&testpaths.relative_dir)\n         .join(&testpaths.file.file_name().unwrap());"}, {"sha": "11741132c2e42f5f4e1b34f56ec18e8996bef0b7", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a317a1cd53a0324427a61aee98c17be350df3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=42a317a1cd53a0324427a61aee98c17be350df3b", "patch": "@@ -5,7 +5,7 @@ use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb};\n-use crate::common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n+use crate::common::{CompileFail, Pretty, RunFail, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n@@ -260,7 +260,7 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n \n-    if let Ui | RunPass | Incremental | Pretty = config.mode {\n+    if let Ui | Incremental | Pretty = config.mode {\n         config.force_pass_mode.hash(&mut hash);\n     }\n \n@@ -306,7 +306,7 @@ impl<'test> TestCx<'test> {\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n-            RunPass | Ui => self.run_ui_test(),\n+            Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n             Assembly => self.run_assembly_test(),\n             JsDocTest => self.run_js_doc_test(),\n@@ -321,15 +321,13 @@ impl<'test> TestCx<'test> {\n         let pass_mode = self.pass_mode();\n         match self.config.mode {\n             Ui => pass_mode == Some(PassMode::Run),\n-            RunPass => pass_mode == Some(PassMode::Run) || pass_mode.is_none(),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n \n     fn should_compile_successfully(&self) -> bool {\n         match self.config.mode {\n             CompileFail => false,\n-            RunPass => true,\n             JsDocTest => true,\n             Ui => self.pass_mode().is_some(),\n             Incremental => {\n@@ -1527,7 +1525,7 @@ impl<'test> TestCx<'test> {\n     fn compile_test(&self) -> ProcRes {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let will_execute = match self.config.mode {\n-            RunPass | Ui => self.should_run_successfully(),\n+            Ui => self.should_run_successfully(),\n             Incremental => self.revision.unwrap().starts_with(\"r\"),\n             RunFail | RunPassValgrind | MirOpt |\n             DebugInfoCdb | DebugInfoGdbLldb | DebugInfoGdb | DebugInfoLldb => true,\n@@ -1958,7 +1956,7 @@ impl<'test> TestCx<'test> {\n                     rustc.arg(\"-Zui-testing\");\n                 }\n             }\n-            RunPass | Ui => {\n+            Ui => {\n                 if !self\n                     .props\n                     .compile_flags\n@@ -2091,7 +2089,7 @@ impl<'test> TestCx<'test> {\n             }\n \n             let src = self.config.src_base\n-                .parent().unwrap() // chop off `run-pass`\n+                .parent().unwrap() // chop off `ui`\n                 .parent().unwrap() // chop off `test`\n                 .parent().unwrap(); // chop off `src`\n             args.push(src.join(\"src/etc/wasm32-shim.js\").display().to_string());"}]}