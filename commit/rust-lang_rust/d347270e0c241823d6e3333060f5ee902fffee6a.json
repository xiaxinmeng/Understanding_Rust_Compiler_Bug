{"sha": "d347270e0c241823d6e3333060f5ee902fffee6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDcyNzBlMGMyNDE4MjNkNmUzMzMzMDYwZjVlZTkwMmZmZmVlNmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-11T11:21:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-27T10:10:16Z"}, "message": "Implement `#[macro_export(local_inner_macros)]`", "tree": {"sha": "0f518049f1d90de27c97d245798ff17df9d9048d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f518049f1d90de27c97d245798ff17df9d9048d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d347270e0c241823d6e3333060f5ee902fffee6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d347270e0c241823d6e3333060f5ee902fffee6a", "html_url": "https://github.com/rust-lang/rust/commit/d347270e0c241823d6e3333060f5ee902fffee6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d347270e0c241823d6e3333060f5ee902fffee6a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "971f7d34d4e8afa663b3972b58528a069a25b436", "url": "https://api.github.com/repos/rust-lang/rust/commits/971f7d34d4e8afa663b3972b58528a069a25b436", "html_url": "https://github.com/rust-lang/rust/commit/971f7d34d4e8afa663b3972b58528a069a25b436"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "e14a86eb954f0824ec8c14cddfdb3be96b996088", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -616,6 +616,7 @@ impl<'a> LoweringContext<'a> {\n             format: codemap::CompilerDesugaring(reason),\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             edition: codemap::hygiene::default_edition(),\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "790ef7029638060037b9bb6d88d77a0e184ef80d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -395,6 +395,7 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n     format,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n+    local_inner_macros,\n     edition\n });\n "}, {"sha": "373ab04de4b825bbd1ea31ee512cea24a6b9feba", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -103,6 +103,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n             format: MacroAttribute(Symbol::intern(name)),\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             edition: hygiene::default_edition(),\n         });\n "}, {"sha": "b1ab86674cf90fa74388effcfa7b49e6c403f3a3", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -108,6 +108,7 @@ impl<'a> Registry<'a> {\n                 def_info: _,\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n+                local_inner_macros,\n                 unstable_feature,\n                 edition,\n             } => {\n@@ -117,6 +118,7 @@ impl<'a> Registry<'a> {\n                     def_info: Some((nid, self.krate_span)),\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n+                    local_inner_macros,\n                     unstable_feature,\n                     edition,\n                 }\n@@ -152,6 +154,7 @@ impl<'a> Registry<'a> {\n             def_info: None,\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             unstable_feature: None,\n             edition: hygiene::default_edition(),\n         });"}, {"sha": "c9d00f80b0ba325b31d073fc997b24d203d2baf0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -451,11 +451,18 @@ impl<'a> Resolver<'a> {\n                                   kind: MacroKind, force: bool)\n                                   -> Result<Def, Determinacy> {\n         let ast::Path { ref segments, span } = *path;\n-        let path: Vec<_> = segments.iter().map(|seg| seg.ident).collect();\n+        let mut path: Vec<_> = segments.iter().map(|seg| seg.ident).collect();\n         let invocation = self.invocations[&scope];\n         let module = invocation.module.get();\n         self.current_module = if module.is_trait() { module.parent.unwrap() } else { module };\n \n+        // Possibly apply the macro helper hack\n+        if self.use_extern_macros && kind == MacroKind::Bang && path.len() == 1 &&\n+           path[0].span.ctxt().outer().expn_info().map_or(false, |info| info.local_inner_macros) {\n+            let root = Ident::new(keywords::DollarCrate.name(), path[0].span);\n+            path.insert(0, root);\n+        }\n+\n         if path.len() > 1 {\n             if !self.use_extern_macros && self.gated_errors.insert(span) {\n                 let msg = \"non-ident macro paths are experimental\";"}, {"sha": "9afce74f53cc4001fcccb6b1635e244061163467", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -621,6 +621,9 @@ pub enum SyntaxExtension {\n         /// Whether the contents of the macro can use `unsafe`\n         /// without triggering the `unsafe_code` lint.\n         allow_internal_unsafe: bool,\n+        /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n+        /// for a given macro.\n+        local_inner_macros: bool,\n         /// The macro's feature name if it is unstable, and the stability feature\n         unstable_feature: Option<(Symbol, u32)>,\n         /// Edition of the crate in which the macro is defined"}, {"sha": "32ace937ac0067c1b424c04d548a91223f169b81", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -64,6 +64,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n         format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n         allow_internal_unstable: true,\n         allow_internal_unsafe: false,\n+        local_inner_macros: false,\n         edition: hygiene::default_edition(),\n     });\n "}, {"sha": "23880c1270f9d1462c51f70155699c62d1dacecf", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -542,6 +542,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             format: MacroAttribute(Symbol::intern(&format!(\"{}\", attr.path))),\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             edition: ext.edition(),\n         });\n \n@@ -695,6 +696,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                           def_site_span: Option<Span>,\n                                           allow_internal_unstable,\n                                           allow_internal_unsafe,\n+                                          local_inner_macros,\n                                           // can't infer this type\n                                           unstable_feature: Option<(Symbol, u32)>,\n                                           edition| {\n@@ -729,6 +731,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 format: macro_bang_format(path),\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n+                local_inner_macros,\n                 edition,\n             });\n             Ok(())\n@@ -737,7 +740,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let opt_expanded = match *ext {\n             DeclMacro(ref expand, def_span, edition) => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_span.map(|(_, s)| s),\n-                                                                    false, false, None,\n+                                                                    false, false, false, None,\n                                                                     edition) {\n                     dummy_span\n                 } else {\n@@ -750,12 +753,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 def_info,\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n+                local_inner_macros,\n                 unstable_feature,\n                 edition,\n             } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n                                                                     allow_internal_unstable,\n                                                                     allow_internal_unsafe,\n+                                                                    local_inner_macros,\n                                                                     unstable_feature,\n                                                                     edition) {\n                     dummy_span\n@@ -777,6 +782,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         format: macro_bang_format(path),\n                         allow_internal_unstable,\n                         allow_internal_unsafe: false,\n+                        local_inner_macros: false,\n                         edition: hygiene::default_edition(),\n                     });\n \n@@ -816,6 +822,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         // FIXME probably want to follow macro_rules macros here.\n                         allow_internal_unstable,\n                         allow_internal_unsafe: false,\n+                        local_inner_macros: false,\n                         edition,\n                     });\n \n@@ -890,6 +897,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             format: MacroAttribute(pretty_name),\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             edition: ext.edition(),\n         };\n "}, {"sha": "3b3892729d93cdcc0315b36b7f8229e6b615642d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -286,6 +286,12 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n     if body.legacy {\n         let allow_internal_unstable = attr::contains_name(&def.attrs, \"allow_internal_unstable\");\n         let allow_internal_unsafe = attr::contains_name(&def.attrs, \"allow_internal_unsafe\");\n+        let mut local_inner_macros = false;\n+        if let Some(macro_export) = attr::find_by_name(&def.attrs, \"macro_export\") {\n+            if let Some(l) = macro_export.meta_item_list() {\n+                local_inner_macros = attr::list_contains_name(&l, \"local_inner_macros\");\n+            }\n+        }\n \n         let unstable_feature = attr::find_stability(&sess.span_diagnostic,\n                                                     &def.attrs, def.span).and_then(|stability| {\n@@ -301,6 +307,7 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n             def_info: Some((def.id, def.span)),\n             allow_internal_unstable,\n             allow_internal_unsafe,\n+            local_inner_macros,\n             unstable_feature,\n             edition,\n         }"}, {"sha": "68121d42b69c64698bb4dd07a2684b85fb25b075", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -29,6 +29,7 @@ fn ignored_span(sp: Span) -> Span {\n         format: MacroAttribute(Symbol::intern(\"std_inject\")),\n         allow_internal_unstable: true,\n         allow_internal_unsafe: false,\n+        local_inner_macros: false,\n         edition: hygiene::default_edition(),\n     });\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "51fbe34028e8f66b8af6cdb48eadef73bf684bde", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -311,6 +311,7 @@ fn generate_test_harness(sess: &ParseSess,\n         format: MacroAttribute(Symbol::intern(\"test\")),\n         allow_internal_unstable: true,\n         allow_internal_unsafe: false,\n+        local_inner_macros: false,\n         edition: hygiene::default_edition(),\n     });\n "}, {"sha": "311251832664e960e25285aee14d6c6bb80c3233", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -76,6 +76,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                         def_info: None,\n                         allow_internal_unstable: false,\n                         allow_internal_unsafe: false,\n+                        local_inner_macros: false,\n                         unstable_feature: None,\n                         edition: hygiene::default_edition(),\n                     });\n@@ -132,6 +133,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                 def_info: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                local_inner_macros: false,\n                 unstable_feature: None,\n                 edition: hygiene::default_edition(),\n             });"}, {"sha": "ef29e5a6b022b624498854b93e13b4d81be48a22", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -368,6 +368,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n         format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n         allow_internal_unstable: true,\n         allow_internal_unsafe: false,\n+        local_inner_macros: false,\n         edition: hygiene::default_edition(),\n     });\n     let span = DUMMY_SP.apply_mark(mark);"}, {"sha": "d1b9c7a84d16f21330508244ade40026df5b4ce0", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -496,6 +496,9 @@ pub struct ExpnInfo {\n     /// Whether the macro is allowed to use `unsafe` internally\n     /// even if the user crate has `#![forbid(unsafe_code)]`.\n     pub allow_internal_unsafe: bool,\n+    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n+    /// for a given macro.\n+    pub local_inner_macros: bool,\n     /// Edition of the crate in which the macro is defined.\n     pub edition: Edition,\n }"}, {"sha": "ac39118c5f1e01e0b96295e2207f319f5ae67ddd", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -54,6 +54,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n             def_info: None,\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            local_inner_macros: false,\n             unstable_feature: None,\n             edition: hygiene::default_edition(),\n         });"}, {"sha": "caa2903cc703572670433a5218241b2da15c0ac1", "filename": "src/test/ui/hygiene/auxiliary/local_inner_macros.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Flocal_inner_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Flocal_inner_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Flocal_inner_macros.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! helper1 {\n+    () => ( struct S; )\n+}\n+\n+#[macro_export(local_inner_macros)]\n+macro_rules! helper2 {\n+    () => ( helper1!(); )\n+}\n+\n+#[macro_export(local_inner_macros)]\n+macro_rules! public_macro {\n+    () => ( helper2!(); )\n+}\n+\n+#[macro_export(local_inner_macros)]\n+macro_rules! public_macro_dynamic {\n+    ($helper: ident) => ( $helper!(); )\n+}"}, {"sha": "787e2df3ec2464e8e9617680e7db446750f458ae", "filename": "src/test/ui/hygiene/local_inner_macros.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// aux-build:local_inner_macros.rs\n+\n+#![feature(use_extern_macros)]\n+\n+extern crate local_inner_macros;\n+\n+use local_inner_macros::{public_macro, public_macro_dynamic};\n+\n+public_macro!();\n+\n+macro_rules! local_helper {\n+    () => ( struct Z; )\n+}\n+\n+public_macro_dynamic!(local_helper);\n+\n+fn main() {\n+    let s = S;\n+    let z = Z;\n+}"}, {"sha": "00b38787db8496f4d61014f66b7f0c6843d02022", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.rs?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// `local_inner_macros` has no effect if `feature(use_extern_macros)` is not enabled\n+\n+// aux-build:local_inner_macros.rs\n+// error-pattern: cannot find macro `helper2!` in this scope\n+\n+#[macro_use(public_macro)]\n+extern crate local_inner_macros;\n+\n+public_macro!();\n+\n+fn main() {}"}, {"sha": "64cb6c400cfc915e012d3abeb43c3f3aa3f68bde", "filename": "src/test/ui/hygiene/local_inner_macros_disabled.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d347270e0c241823d6e3333060f5ee902fffee6a/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Flocal_inner_macros_disabled.stderr?ref=d347270e0c241823d6e3333060f5ee902fffee6a", "patch": "@@ -0,0 +1,10 @@\n+error: cannot find macro `helper2!` in this scope\n+  --> $DIR/local_inner_macros_disabled.rs:19:1\n+   |\n+LL | public_macro!();\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}