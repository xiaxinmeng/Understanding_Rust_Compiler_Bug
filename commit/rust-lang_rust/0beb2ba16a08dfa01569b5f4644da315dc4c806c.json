{"sha": "0beb2ba16a08dfa01569b5f4644da315dc4c806c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWIyYmExNmEwOGRmYTAxNTY5YjVmNDY0NGRhMzE1ZGM0YzgwNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-02T20:00:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-02T20:00:29Z"}, "message": "Auto merge of #61268 - michaelwoerister:stabilize-pgo, r=alexcrichton\n\nStabilize support for Profile-guided Optimization\n\nThis PR makes profile-guided optimization available via the `-C profile-generate` / `-C profile-use` pair of commandline flags and adds end-user documentation for the feature to the [rustc book](https://doc.rust-lang.org/rustc/). The PR thus ticks the last two remaining checkboxes of the [stabilization tracking issue](https://github.com/rust-lang/rust/issues/59913).\n\nFrom the tracking issue:\n> Profile-guided optimization (PGO) is a common optimization technique for ahead-of-time compilers. It works by collecting data about a program's typical execution (e.g. probability of branches taken, typical runtime values of variables, etc) and then uses this information during program optimization for things like inlining decisions, machine code layout, or indirect call promotion.\n\nIf you are curious about how this can be used, there is a rendered version of the documentation this PR adds available [here](\nhttps://github.com/michaelwoerister/rust/blob/stabilize-pgo/src/doc/rustc/src/profile-guided-optimization.md).\n\nr? @alexcrichton\ncc @rust-lang/compiler", "tree": {"sha": "12d38055dab44d3af0739db03f498f7dd1ca4956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d38055dab44d3af0739db03f498f7dd1ca4956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0beb2ba16a08dfa01569b5f4644da315dc4c806c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0beb2ba16a08dfa01569b5f4644da315dc4c806c", "html_url": "https://github.com/rust-lang/rust/commit/0beb2ba16a08dfa01569b5f4644da315dc4c806c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0beb2ba16a08dfa01569b5f4644da315dc4c806c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848e0a23f34aaab3e4a974b031c86ef2a4e4fcc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/848e0a23f34aaab3e4a974b031c86ef2a4e4fcc1", "html_url": "https://github.com/rust-lang/rust/commit/848e0a23f34aaab3e4a974b031c86ef2a4e4fcc1"}, {"sha": "b7fe2ca5e09b8edab393073198f8f55e1a78079f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe2ca5e09b8edab393073198f8f55e1a78079f", "html_url": "https://github.com/rust-lang/rust/commit/b7fe2ca5e09b8edab393073198f8f55e1a78079f"}], "stats": {"total": 225, "additions": 189, "deletions": 36}, "files": [{"sha": "3cda8d927973ca64c7210d37ecd750093f838ca7", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -13,5 +13,6 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n+- [Profile-guided Optimization](profile-guided-optimization.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "3773a7783020f8d226b0716e5a9bf9eaf6d78680", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -214,3 +214,20 @@ This option lets you control what happens when the code panics.\n ## incremental\n \n This flag allows you to enable incremental compilation.\n+\n+## profile-generate\n+\n+This flag allows for creating instrumented binaries that will collect\n+profiling data for use with profile-guided optimization (PGO). The flag takes\n+an optional argument which is the path to a directory into which the\n+instrumented binary will emit the collected data. See the chapter on\n+[profile-guided optimization](profile-guided-optimization.html) for more\n+information.\n+\n+## profile-use\n+\n+This flag specifies the profiling data file to be used for profile-guided\n+optimization (PGO). The flag takes a mandatory argument which is the path\n+to a valid `.profdata` file. See the chapter on\n+[profile-guided optimization](profile-guided-optimization.html) for more\n+information."}, {"sha": "38be07a6440dab772e199f81687e2f4c3304812b", "filename": "src/doc/rustc/src/profile-guided-optimization.md", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -0,0 +1,136 @@\n+# Profile Guided Optimization\n+\n+`rustc` supports doing profile-guided optimization (PGO).\n+This chapter describes what PGO is, what it is good for, and how it can be used.\n+\n+## What Is Profiled-Guided Optimization?\n+\n+The basic concept of PGO is to collect data about the typical execution of\n+a program (e.g. which branches it is likely to take) and then use this data\n+to inform optimizations such as inlining, machine-code layout,\n+register allocation, etc.\n+\n+There are different ways of collecting data about a program's execution.\n+One is to run the program inside a profiler (such as `perf`) and another\n+is to create an instrumented binary, that is, a binary that has data\n+collection built into it, and run that.\n+The latter usually provides more accurate data and it is also what is\n+supported by `rustc`.\n+\n+## Usage\n+\n+Generating a PGO-optimized program involves following a workflow with four steps:\n+\n+1. Compile the program with instrumentation enabled\n+   (e.g. `rustc -Cprofile-generate=/tmp/pgo-data main.rs`)\n+2. Run the instrumented program (e.g. `./main`) which generates a\n+   `default_<id>.profraw` file\n+3. Convert the `.profraw` file into a `.profdata` file using\n+   LLVM's `llvm-profdata` tool\n+4. Compile the program again, this time making use of the profiling data\n+   (for example `rustc -Cprofile-use=merged.profdata main.rs`)\n+\n+An instrumented program will create one or more `.profraw` files, one for each\n+instrumented binary. E.g. an instrumented executable that loads two instrumented\n+dynamic libraries at runtime will generate three `.profraw` files. Running an\n+instrumented binary multiple times, on the other hand, will re-use the\n+respective `.profraw` files, updating them in place.\n+\n+These `.profraw` files have to be post-processed before they can be fed back\n+into the compiler. This is done by the `llvm-profdata` tool. This tool\n+is most easily installed via\n+\n+```bash\n+rustup component add llvm-tools-preview\n+```\n+\n+Note that installing the `llvm-tools-preview` component won't add\n+`llvm-profdata` to the `PATH`. Rather, the tool can be found in:\n+\n+```bash\n+~/.rustup/toolchains/<toolchain>/lib/rustlib/<target-triple>/bin/\n+```\n+\n+Alternatively, an `llvm-profdata` coming with a recent LLVM or Clang\n+version usually works too.\n+\n+The `llvm-profdata` tool merges multiple `.profraw` files into a single\n+`.profdata` file that can then be fed back into the compiler via\n+`-Cprofile-use`:\n+\n+```bash\n+# STEP 1: Compile the binary with instrumentation\n+rustc -Cprofile-generate=/tmp/pgo-data -O ./main.rs\n+\n+# STEP 2: Run the binary a few times, maybe with common sets of args.\n+#         Each run will create or update `.profraw` files in /tmp/pgo-data\n+./main mydata1.csv\n+./main mydata2.csv\n+./main mydata3.csv\n+\n+# STEP 3: Merge and post-process all the `.profraw` files in /tmp/pgo-data\n+llvm-profdata merge -o ./merged.profdata /tmp/pgo-data\n+\n+# STEP 4: Use the merged `.profdata` file during optimization. All `rustc`\n+#         flags have to be the same.\n+rustc -Cprofile-use=./merged.profdata -O ./main.rs\n+```\n+\n+### A Complete Cargo Workflow\n+\n+Using this feature with Cargo works very similar to using it with `rustc`\n+directly. Again, we generate an instrumented binary, run it to produce data,\n+merge the data, and feed it back into the compiler. Some things of note:\n+\n+- We use the `RUSTFLAGS` environment variable in order to pass the PGO compiler\n+  flags to the compilation of all crates in the program.\n+\n+- We pass the `--target` flag to Cargo, which prevents the `RUSTFLAGS`\n+  arguments to be passed to Cargo build scripts. We don't want the build\n+  scripts to generate a bunch of `.profraw` files.\n+\n+- We pass `--release` to Cargo because that's where PGO makes the most sense.\n+  In theory, PGO can also be done on debug builds but there is little reason\n+  to do so.\n+\n+- It is recommended to use *absolute paths* for the argument of\n+  `-Cprofile-generate` and `-Cprofile-use`. Cargo can invoke `rustc` with\n+  varying working directories, meaning that `rustc` will not be able to find\n+  the supplied `.profdata` file. With absolute paths this is not an issue.\n+\n+- It is good practice to make sure that there is no left-over profiling data\n+  from previous compilation sessions. Just deleting the directory is a simple\n+  way of doing so (see `STEP 0` below).\n+\n+This is what the entire workflow looks like:\n+\n+```bash\n+# STEP 0: Make sure there is no left-over profiling data from previous runs\n+rm -rf /tmp/pgo-data\n+\n+# STEP 1: Build the instrumented binaries\n+RUSTFLAGS=\"-Cprofile-generate=/tmp/pgo-data\" \\\n+    cargo build --release --target=x86_64-unknown-linux-gnu\n+\n+# STEP 2: Run the instrumented binaries with some typical data\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata1.csv\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata2.csv\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata3.csv\n+\n+# STEP 3: Merge the `.profraw` files into a `.profdata` file\n+llvm-profdata merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data\n+\n+# STEP 4: Use the `.profdata` file for guiding optimizations\n+RUSTFLAGS=\"-Cprofile-use=/tmp/pgo-data/merged.profdata\" \\\n+    cargo build --release --target=x86_64-unknown-linux-gnu\n+```\n+\n+## Further Reading\n+\n+`rustc`'s PGO support relies entirely on LLVM's implementation of the feature\n+and is equivalent to what Clang offers via the `-fprofile-generate` /\n+`-fprofile-use` flags. The [Profile Guided Optimization][clang-pgo] section\n+in Clang's documentation is therefore an interesting read for anyone who wants\n+to use PGO with Rust.\n+\n+[clang-pgo]: https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization"}, {"sha": "9f033262850a1d78c2a9c7b78c8b3ae1373f61da", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -1207,7 +1207,11 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],\n         \"generate build artifacts that are compatible with linker-based LTO.\"),\n-\n+    profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [TRACKED],\n+        \"compile the program with profiling instrumentation\"),\n+    profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"use the given `.profdata` file for profile-guided optimization\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n@@ -1379,11 +1383,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n-    pgo_gen: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n-        parse_switch_with_opt_path, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n-    pgo_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n-        \"Use PGO profile data from the given profile file.\"),\n     disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n         \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n@@ -2036,13 +2035,6 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.pgo_gen.enabled() && debugging_opts.pgo_use.is_some() {\n-        early_error(\n-            error_format,\n-            \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n-        );\n-    }\n-\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2154,6 +2146,13 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if cg.profile_generate.enabled() && cg.profile_use.is_some() {\n+        early_error(\n+            error_format,\n+            \"options `-C profile-generate` and `-C profile-use` are exclusive\",\n+        );\n+    }\n+\n     let mut prints = Vec::<PrintRequest>::new();\n     if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::TargetCPUs);"}, {"sha": "3d6312548a47bcf58b13688c0905092402bbd7fa", "filename": "src/librustc/session/config/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -519,11 +519,11 @@ fn test_codegen_options_tracking_hash() {\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.pgo_gen = SwitchWithOptPath::Enabled(None);\n+    opts.cg.profile_generate = SwitchWithOptPath::Enabled(None);\n     assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.pgo_use = Some(PathBuf::from(\"abc\"));\n+    opts.cg.profile_use = Some(PathBuf::from(\"abc\"));\n     assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();"}, {"sha": "9486f353b3f964230170c079b4bbf0010f433d5c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -1295,9 +1295,9 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     // Make sure that any given profiling data actually exists so LLVM can't\n     // decide to silently skip PGO.\n-    if let Some(ref path) = sess.opts.debugging_opts.pgo_use {\n+    if let Some(ref path) = sess.opts.cg.profile_use {\n         if !path.exists() {\n-            sess.err(&format!(\"File `{}` passed to `-Zpgo-use` does not exist.\",\n+            sess.err(&format!(\"File `{}` passed to `-C profile-use` does not exist.\",\n                               path.display()));\n         }\n     }\n@@ -1306,7 +1306,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // an error to combine the two for now. It always runs into an assertions\n     // if LLVM is built with assertions, but without assertions it sometimes\n     // does not crash and will probably generate a corrupted binary.\n-    if sess.opts.debugging_opts.pgo_gen.enabled() &&\n+    if sess.opts.cg.profile_generate.enabled() &&\n        sess.target.target.options.is_like_msvc &&\n        sess.panic_strategy() == PanicStrategy::Unwind {\n         sess.err(\"Profile-guided optimization does not yet work in conjunction \\"}, {"sha": "94abf1796d3665f4dd1b904fbd0a97d1f162fdef", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -102,8 +102,8 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         return\n     }\n \n-    // probestack doesn't play nice either with pgo-gen.\n-    if cx.sess().opts.debugging_opts.pgo_gen.enabled() {\n+    // probestack doesn't play nice either with `-C profile-generate`.\n+    if cx.sess().opts.cg.profile_generate.enabled() {\n         return;\n     }\n "}, {"sha": "e3d297e78623ed05bd94f2fb02225e6a16b8a601", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -1179,7 +1179,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n         cmd.build_static_executable();\n     }\n \n-    if sess.opts.debugging_opts.pgo_gen.enabled() {\n+    if sess.opts.cg.profile_generate.enabled() {\n         cmd.pgo_gen();\n     }\n "}, {"sha": "3e0f030527f431132b547441792c94392a003bde", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -203,7 +203,7 @@ fn exported_symbols_provider_local<'tcx>(\n         }\n     }\n \n-    if tcx.sess.opts.debugging_opts.pgo_gen.enabled() {\n+    if tcx.sess.opts.cg.profile_generate.enabled() {\n         // These are weak symbols that point to the profile version and the\n         // profile name, which need to be treated as exported so LTO doesn't nix\n         // them."}, {"sha": "6364843d77267de19a7a59dc0ad6474839049bfd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -423,8 +423,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n-    modules_config.pgo_gen = sess.opts.debugging_opts.pgo_gen.clone();\n-    modules_config.pgo_use = sess.opts.debugging_opts.pgo_use.clone();\n+    modules_config.pgo_gen = sess.opts.cg.profile_generate.clone();\n+    modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n \n     modules_config.opt_level = Some(sess.opts.optimize);\n     modules_config.opt_size = Some(sess.opts.optimize);"}, {"sha": "2073b317939d78acea4e30e8b64071d1fc09c0df", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -868,7 +868,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile ||\n-            self.sess.opts.debugging_opts.pgo_gen.enabled()\n+           self.sess.opts.cg.profile_generate.enabled()\n         {\n             info!(\"loading profiler\");\n "}, {"sha": "8200cf4e0167b89d70422b10676da3ca6856cb58", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -1,8 +1,8 @@\n-// Test that `-Zpgo-gen` creates expected instrumentation artifacts in LLVM IR.\n+// Test that `-Cprofile-generate` creates expected instrumentation artifacts in LLVM IR.\n // Compiling with `-Cpanic=abort` because PGO+unwinding isn't supported on all platforms.\n \n // needs-profiler-support\n-// compile-flags: -Z pgo-gen -Ccodegen-units=1 -Cpanic=abort\n+// compile-flags: -Cprofile-generate -Ccodegen-units=1 -Cpanic=abort\n \n // CHECK: @__llvm_profile_raw_version =\n // CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global"}, {"sha": "f8efeca56141b4f499d9c9ff58571bc851ae76e3", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -21,7 +21,7 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-gen=\"$(TMPDIR)\"/cpp-profdata \\\n+\t         -Cprofile-generate=\"$(TMPDIR)\"/cpp-profdata \\\n \t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n \t         $(COMMON_FLAGS) \\\n \t         ./rustlib.rs\n@@ -39,7 +39,7 @@ cpp-executable:\n \t\t-o \"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n \t\t\"$(TMPDIR)\"/cpp-profdata/default_*.profraw\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n+\t         -Cprofile-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n \t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n \t         $(COMMON_FLAGS) \\\n \t         ./rustlib.rs\n@@ -57,7 +57,7 @@ rust-executable:\n \t$(CLANG) ./clib.c -fprofile-generate=\"$(TMPDIR)\"/rs-profdata -flto=thin -c -o $(TMPDIR)/clib.o -O3\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-gen=\"$(TMPDIR)\"/rs-profdata \\\n+\t         -Cprofile-generate=\"$(TMPDIR)\"/rs-profdata \\\n \t         -L$(TMPDIR) \\\n \t         $(COMMON_FLAGS) \\\n \t         -Clinker=$(CLANG) \\\n@@ -78,7 +78,7 @@ rust-executable:\n \trm \"$(TMPDIR)\"/libxyz.a\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n+\t         -Cprofile-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n \t         -L$(TMPDIR) \\\n \t         $(COMMON_FLAGS) \\\n \t         -Clinker=$(CLANG) \\"}, {"sha": "6c70d951c35eac1bab13496f79935c2824573f4d", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "3fbfeb09eb373d308e67a25b53b04084e5fe6b3c", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-O -Ccodegen-units=1 -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "3b66427c14c297dfb781d4ceb0e41a85c0e3e97a", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-g -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-g -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "61a73587759fece06a54b7fb37190baab494e379", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0beb2ba16a08dfa01569b5f4644da315dc4c806c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=0beb2ba16a08dfa01569b5f4644da315dc4c806c", "patch": "@@ -33,15 +33,15 @@ endif\n \n all:\n \t# Compile the test program with instrumentation\n-\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-gen=\"$(TMPDIR)\" main.rs\n+\t$(RUSTC) $(COMMON_FLAGS) -Cprofile-generate=\"$(TMPDIR)\" main.rs\n \t# Run it in order to generate some profiling data\n \t$(call RUN,main some-argument) || exit 1\n \t# Postprocess the profiling data so it can be used by the compiler\n \t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n \t\t-o \"$(TMPDIR)\"/merged.profdata \\\n \t\t\"$(TMPDIR)\"/default_*.profraw\n \t# Compile the test program again, making use of the profiling data\n-\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n+\t$(RUSTC) $(COMMON_FLAGS) -Cprofile-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n \t# Check that the generate IR contains some things that we expect\n \t#\n \t# We feed the file into LLVM FileCheck tool *in reverse* so that we see the"}]}