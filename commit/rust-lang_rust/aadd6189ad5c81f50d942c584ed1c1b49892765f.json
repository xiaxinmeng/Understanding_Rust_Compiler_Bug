{"sha": "aadd6189ad5c81f50d942c584ed1c1b49892765f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZGQ2MTg5YWQ1YzgxZjUwZDk0MmM1ODRlZDFjMWI0OTg5Mjc2NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-01T09:15:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-01T09:15:15Z"}, "message": "Auto merge of #87449 - matthiaskrgr:clippyy_v2, r=nagisa\n\nmore clippy::complexity fixes\n\n(also a couple of clippy::perf fixes)", "tree": {"sha": "0dbe207064f82de546fcbe6f63bb12b40f7c322e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dbe207064f82de546fcbe6f63bb12b40f7c322e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aadd6189ad5c81f50d942c584ed1c1b49892765f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aadd6189ad5c81f50d942c584ed1c1b49892765f", "html_url": "https://github.com/rust-lang/rust/commit/aadd6189ad5c81f50d942c584ed1c1b49892765f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aadd6189ad5c81f50d942c584ed1c1b49892765f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f381e77d3590bc36f09b0d48cffb504f92febf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f381e77d3590bc36f09b0d48cffb504f92febf5e", "html_url": "https://github.com/rust-lang/rust/commit/f381e77d3590bc36f09b0d48cffb504f92febf5e"}, {"sha": "3fd8cbb404666e0b979efa9a886674b4a9f58868", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd8cbb404666e0b979efa9a886674b4a9f58868", "html_url": "https://github.com/rust-lang/rust/commit/3fd8cbb404666e0b979efa9a886674b4a9f58868"}], "stats": {"total": 95, "additions": 44, "deletions": 51}, "files": [{"sha": "b910431b1ddf13f8c1d2b7aca29217f4c7a4c818", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -2189,8 +2189,7 @@ impl<'a> State<'a> {\n             Options(InlineAsmOptions),\n         }\n \n-        let mut args = vec![];\n-        args.push(AsmArg::Template(InlineAsmTemplatePiece::to_string(&asm.template)));\n+        let mut args = vec![AsmArg::Template(InlineAsmTemplatePiece::to_string(&asm.template))];\n         args.extend(asm.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n         if !asm.options.is_empty() {\n             args.push(AsmArg::Options(asm.options));"}, {"sha": "0ca51bd288317feee81b98ddf561e64b88c3b9cd", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -365,7 +365,7 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n \n                 features_string\n             };\n-            features.extend(features_string.split(\",\").map(String::from));\n+            features.extend(features_string.split(',').map(String::from));\n         }\n         Some(_) | None => {}\n     };\n@@ -374,7 +374,7 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n         if s.is_empty() {\n             return None;\n         }\n-        let feature = if s.starts_with(\"+\") || s.starts_with(\"-\") {\n+        let feature = if s.starts_with('+') || s.starts_with('-') {\n             &s[1..]\n         } else {\n             return Some(s.to_string());"}, {"sha": "b949d885900d954e20c147f4147d1976d3b482fc", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -834,7 +834,7 @@ fn ident_name_compatibility_hack(\n                                 .flat_map(|c| c.as_os_str().to_str())\n                                 .find(|c| c.starts_with(\"js-sys\"))\n                             {\n-                                let mut version = c.trim_start_matches(\"js-sys-\").split(\".\");\n+                                let mut version = c.trim_start_matches(\"js-sys-\").split('.');\n                                 if version.next() == Some(\"0\")\n                                     && version.next() == Some(\"3\")\n                                     && version"}, {"sha": "3816888db1062d7e4a1012f8d952d08391803fc1", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -476,7 +476,7 @@ impl<T> PerNS<Option<T>> {\n \n     /// Returns an iterator over the items which are `Some`.\n     pub fn present_items(self) -> impl Iterator<Item = T> {\n-        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).flatten()\n     }\n }\n "}, {"sha": "9ad40db73ceea73a542844733889849d23ffc47a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -1357,8 +1357,8 @@ impl<'a> State<'a> {\n             Options(ast::InlineAsmOptions),\n         }\n \n-        let mut args = vec![];\n-        args.push(AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&asm.template)));\n+        let mut args =\n+            vec![AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&asm.template))];\n         args.extend(asm.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n         if !asm.options.is_empty() {\n             args.push(AsmArg::Options(asm.options));"}, {"sha": "bca3023664ab1639ee21b73cc3c79110c53f2dca", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -576,7 +576,7 @@ pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribut\n     // NOTE: does no error handling; error handling is done by rustc_resolve.\n     sess.filter_by_name(attrs, sym::register_tool)\n         .filter_map(|attr| attr.meta_item_list())\n-        .flat_map(std::convert::identity)\n+        .flatten()\n         .filter_map(|nested_meta| nested_meta.ident())\n         .map(|ident| ident.name)\n         .any(|name| name == m_item)"}, {"sha": "55961636f3216bd8b27c9bc0a84cecd14378e543", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -906,7 +906,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     } else {\n                         return FfiUnsafe {\n                             ty,\n-                            reason: format!(\"box cannot be represented as a single pointer\"),\n+                            reason: \"box cannot be represented as a single pointer\".to_string(),\n                             help: None,\n                         };\n                     }"}, {"sha": "c52304e54742112b0d548877e0288766f7bdc71f", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -135,7 +135,7 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n     let mut check_dup = |span: Span, str: &str, errors: &mut Errors| {\n         if let Some(prev_span) = keys.get(str) {\n             errors.error(span, format!(\"Symbol `{}` is duplicated\", str));\n-            errors.error(*prev_span, format!(\"location of previous definition\"));\n+            errors.error(*prev_span, \"location of previous definition\".to_string());\n         } else {\n             keys.insert(str.to_string(), span);\n         }"}, {"sha": "fb13614e4b377998bf8a5fbdaf18e33654e3f033", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -385,7 +385,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [mir::abstract_const::N\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder.tcx().mk_bound_variable_kinds((0..len).map(|_| Decodable::decode(decoder)))?)\n+        decoder.tcx().mk_bound_variable_kinds((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n "}, {"sha": "a3ea1700634689147aed26a10438531c7a46a298", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -320,7 +320,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         .map(|n| format!(\"`{}`\", n))\n                                         .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                                 ),\n-                                format!(\"&mut *\"),\n+                                \"&mut *\".to_string(),\n                                 Applicability::MachineApplicable,\n                             );\n                         }"}, {"sha": "5932cb9e7758bd093addeea6f0616fe6a7bd0a4e", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -731,7 +731,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     if suggestions.peek().is_some() {\n                         err.span_suggestions(\n                             path_segment.ident.span,\n-                            &format!(\"use mutable method\"),\n+                            \"use mutable method\",\n                             suggestions,\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "cbe366657905a74c33736213068929f46907fb51", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/merging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -46,7 +46,7 @@ pub fn merge_codegen_units<'tcx>(\n         // Record that `second_smallest` now contains all the stuff that was in\n         // `smallest` before.\n         let mut consumed_cgu_names = cgu_contents.remove(&smallest.name()).unwrap();\n-        cgu_contents.get_mut(&second_smallest.name()).unwrap().extend(consumed_cgu_names.drain(..));\n+        cgu_contents.get_mut(&second_smallest.name()).unwrap().append(&mut consumed_cgu_names);\n \n         debug!(\n             \"CodegenUnit {} merged into CodegenUnit {}\","}, {"sha": "ddca22aebd25b3302fd7df5b216bcc970801048d", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -255,7 +255,7 @@ impl NonConstOp for CellBorrow {\n         );\n         err.span_label(\n             span,\n-            format!(\"this borrow of an interior mutable value may end up in the final value\"),\n+            \"this borrow of an interior mutable value may end up in the final value\",\n         );\n         if let hir::ConstContext::Static(_) = ccx.const_kind() {\n             err.help("}, {"sha": "6fd7d29d7779712860d0c0be87da30b943d36e37", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -344,7 +344,7 @@ impl DebugCounters {\n                 return if counter_format.id {\n                     format!(\"{}#{}\", block_label, id.index())\n                 } else {\n-                    format!(\"{}\", block_label)\n+                    block_label.to_string()\n                 };\n             }\n         }\n@@ -369,7 +369,7 @@ impl DebugCounters {\n                     }\n                     return format!(\"({})\", self.format_counter_kind(counter_kind));\n                 }\n-                return format!(\"{}\", self.format_counter_kind(counter_kind));\n+                return self.format_counter_kind(counter_kind).to_string();\n             }\n         }\n         format!(\"#{}\", operand.index().to_string())"}, {"sha": "32febcec7aff35eeba0e71dc428cd9e81be3bac9", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -526,8 +526,8 @@ impl TraverseCoverageGraphWithLoops {\n     pub fn new(basic_coverage_blocks: &CoverageGraph) -> Self {\n         let start_bcb = basic_coverage_blocks.start_node();\n         let backedges = find_loop_backedges(basic_coverage_blocks);\n-        let mut context_stack = Vec::new();\n-        context_stack.push(TraversalContext { loop_backedges: None, worklist: vec![start_bcb] });\n+        let context_stack =\n+            vec![TraversalContext { loop_backedges: None, worklist: vec![start_bcb] }];\n         // `context_stack` starts with a `TraversalContext` for the main function context (beginning\n         // with the `start` BasicCoverageBlock of the function). New worklists are pushed to the top\n         // of the stack as loops are entered, and popped off of the stack when a loop's worklist is"}, {"sha": "8e6654cb2daa3934a3cc8b9df7e87098eea85224", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -614,8 +614,8 @@ impl Inliner<'tcx> {\n                         .vars_and_temps_iter()\n                         .map(|local| callee_body.local_decls[local].clone()),\n                 );\n-                caller_body.source_scopes.extend(callee_body.source_scopes.drain(..));\n-                caller_body.var_debug_info.extend(callee_body.var_debug_info.drain(..));\n+                caller_body.source_scopes.extend(&mut callee_body.source_scopes.drain(..));\n+                caller_body.var_debug_info.append(&mut callee_body.var_debug_info);\n                 caller_body.basic_blocks_mut().extend(callee_body.basic_blocks_mut().drain(..));\n \n                 caller_body[callsite.block].terminator = Some(Terminator {"}, {"sha": "aff2df31b1c96cb4f0ae80e2419761f7e2652668", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -147,8 +147,8 @@ fn validate_simd_shuffle(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span)\n     match &args[2] {\n         Operand::Constant(_) => {} // all good\n         _ => {\n-            let msg = format!(\"last argument of `simd_shuffle` is required to be a `const` item\");\n-            tcx.sess.span_err(span, &msg);\n+            let msg = \"last argument of `simd_shuffle` is required to be a `const` item\";\n+            tcx.sess.span_err(span, msg);\n         }\n     }\n }"}, {"sha": "7598a011bb6771619541fbab1865cdcd1b2f23da", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -479,7 +479,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                     uv.promoted\n                 ),\n                 ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n-                ty::ConstKind::Error(_) => format!(\"Error\"),\n+                ty::ConstKind::Error(_) => \"Error\".to_string(),\n             };\n             self.push(&format!(\"+ val: {}\", val));\n         }"}, {"sha": "f77f9bc454b84ad7cb53f6b9ea7fb4635cbb5dc9", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -1107,8 +1107,7 @@ impl<'a> Parser<'a> {\n                 e\n             })?;\n \n-        let enum_definition =\n-            EnumDef { variants: variants.into_iter().filter_map(|v| v).collect() };\n+        let enum_definition = EnumDef { variants: variants.into_iter().flatten().collect() };\n         Ok((id, ItemKind::Enum(enum_definition, generics)))\n     }\n "}, {"sha": "14f8a8bff71ca0668f96459b0a25634effb3211c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -855,7 +855,7 @@ impl CheckAttrVisitor<'tcx> {\n                         hir_id,\n                         meta.span(),\n                         |lint| {\n-                            lint.build(&format!(\"invalid `doc` attribute\")).emit();\n+                            lint.build(&\"invalid `doc` attribute\").emit();\n                         },\n                     );\n                     is_valid = false;"}, {"sha": "e881a855bbcfa983d542859f1c7f0f0667f5dd4f", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -229,7 +229,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     if let Some(main_def) = tcx.resolutions(()).main_def {\n         if main_def.opt_fn_def_id().is_none() {\n             // There is something at `crate::main`, but it is not a function definition.\n-            err.span_label(main_def.span, &format!(\"non-function item at `crate::main` is found\"));\n+            err.span_label(main_def.span, \"non-function item at `crate::main` is found\");\n         }\n     }\n "}, {"sha": "a708631af0a7d0b31a8e56c2e73ad5bd50aa92e3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -620,8 +620,8 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n         };\n         tcx.sess().struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n             .help(&format!(\"This is a known issue with the compiler. Run {} to allow your project to compile\", run_cmd))\n-            .note(&format!(\"Please follow the instructions below to create a bug report with the provided information\"))\n-            .note(&format!(\"See <https://github.com/rust-lang/rust/issues/84970> for more information\"))\n+            .note(&\"Please follow the instructions below to create a bug report with the provided information\")\n+            .note(&\"See <https://github.com/rust-lang/rust/issues/84970> for more information\")\n             .emit();\n         panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n     }"}, {"sha": "e3ab858541af412c73bf4882a00637c925f4316f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -1061,7 +1061,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                         err.span_suggestion(\n                             span,\n-                            &format!(\"use this syntax instead\"),\n+                            &\"use this syntax instead\",\n                             format!(\"{path_str}\"),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "ebf4b2b01c568ac29173ed14791a3526aae47862", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -1867,7 +1867,7 @@ fn parse_extern_dep_specs(\n             )\n         });\n \n-        let locparts: Vec<_> = loc.split(\":\").collect();\n+        let locparts: Vec<_> = loc.split(':').collect();\n         let spec = match &locparts[..] {\n             [\"raw\", ..] => {\n                 // Don't want `:` split string"}, {"sha": "ec23a0769af778294d87a689b1cc3fdb0e2e8c1b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -684,7 +684,7 @@ mod parse {\n             Some(v) => v,\n         };\n \n-        *slot = Some(match v.trim_end_matches(\"s\") {\n+        *slot = Some(match v.trim_end_matches('s') {\n             \"statement\" | \"stmt\" => MirSpanview::Statement,\n             \"terminator\" | \"term\" => MirSpanview::Terminator,\n             \"block\" | \"basicblock\" => MirSpanview::Block,"}, {"sha": "7f349ef10d348ddd8799540b6baae5d2b759e96c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -2018,7 +2018,7 @@ impl Target {\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n-            return Err(format!(\"may not set is_builtin for targets not built-in\"));\n+            return Err(\"may not set is_builtin for targets not built-in\".to_string());\n         }\n         // Each field should have been read using `Json::remove_key` so any keys remaining are unused.\n         let remaining_keys = obj.as_object().ok_or(\"Expected JSON object for target\")?.keys();"}, {"sha": "3a32f1cb903e583f24117db65fc84197e2aa3b84", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -124,11 +124,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.impl_similar_to(trait_ref, obligation).unwrap_or_else(|| trait_ref.def_id());\n         let trait_ref = trait_ref.skip_binder();\n \n-        let mut flags = vec![];\n-        flags.push((\n+        let mut flags = vec![(\n             sym::ItemContext,\n             self.describe_enclosure(obligation.cause.body_id).map(|s| s.to_owned()),\n-        ));\n+        )];\n \n         match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..)"}, {"sha": "b6ee51cfc1a47c52f45401329896b76e9ae53b60", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -290,13 +290,9 @@ fn suggest_restriction(\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n         let (sp, suggestion) = match (\n-            generics\n-                .params\n-                .iter()\n-                .filter(|p| {\n-                    !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), .. })\n-                })\n-                .next(),\n+            generics.params.iter().find(|p| {\n+                !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), .. })\n+            }),\n             super_traits,\n         ) {\n             (_, None) => predicate_constraint("}, {"sha": "672e149b5fc96662969c3886a9e54123634caab1", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -90,8 +90,8 @@ fn dropck_outlives<'tcx>(\n \n                 // \"outlives\" represent types/regions that may be touched\n                 // by a destructor.\n-                result.kinds.extend(constraints.outlives.drain(..));\n-                result.overflows.extend(constraints.overflows.drain(..));\n+                result.kinds.append(&mut constraints.outlives);\n+                result.overflows.append(&mut constraints.overflows);\n \n                 // If we have even one overflow, we should stop trying to evaluate further --\n                 // chances are, the subsequent overflows for this evaluation won't provide useful"}, {"sha": "9e3292d7821a9e7c121be24e8adc4244b8e35786", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n                 (expr_text, true)\n             } else {\n-                (format!(\"(..)\"), false)\n+                (\"(..)\".to_string(), false)\n             };\n \n         let adjusted_text = if let Some(probe::AutorefOrPtrAdjustment::ToConstPtr) ="}, {"sha": "ae6de3b7a0cee855af34200fea9d6928cf983b2c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -791,7 +791,7 @@ fn fn_sig_suggestion<'tcx>(\n             })\n         })\n         .chain(std::iter::once(if sig.c_variadic { Some(\"...\".to_string()) } else { None }))\n-        .filter_map(|arg| arg)\n+        .flatten()\n         .collect::<Vec<String>>()\n         .join(\", \");\n     let output = sig.output();"}, {"sha": "0291236abdfa6f86119729a85d1393f76744a101", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aadd6189ad5c81f50d942c584ed1c1b49892765f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd6189ad5c81f50d942c584ed1c1b49892765f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=aadd6189ad5c81f50d942c584ed1c1b49892765f", "patch": "@@ -488,7 +488,7 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n     let cache = &cx.cache();\n     let relative_to = &cx.current;\n     fn to_module_fqp(shortty: ItemType, fqp: &[String]) -> &[String] {\n-        if shortty == ItemType::Module { &fqp[..] } else { &fqp[..fqp.len() - 1] }\n+        if shortty == ItemType::Module { fqp } else { &fqp[..fqp.len() - 1] }\n     }\n \n     if !did.is_local() && !cache.access_levels.is_public(did) && !cache.document_private {\n@@ -509,7 +509,7 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n                     match cache.extern_locations[&did.krate] {\n                         ExternalLocation::Remote(ref s) => {\n                             let s = s.trim_end_matches('/');\n-                            let mut s = vec![&s[..]];\n+                            let mut s = vec![s];\n                             s.extend(module_fqp[..].iter().map(String::as_str));\n                             s\n                         }"}]}