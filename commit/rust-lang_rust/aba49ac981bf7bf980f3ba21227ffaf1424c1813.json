{"sha": "aba49ac981bf7bf980f3ba21227ffaf1424c1813", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYTQ5YWM5ODFiZjdiZjk4MGYzYmEyMTIyN2ZmYWYxNDI0YzE4MTM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-06T12:01:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-06T12:01:22Z"}, "message": "Rollup merge of #35372 - Keats:err-323, r=jonathandturner\n\nUpdate error message for E0323, E0324 and E0325\n\n Fixes #35325, #35327 and #35329 as part of #35233\n\nr? @jonathandturner", "tree": {"sha": "56d946e84d8d3e21fc0286ce16cfa185b7e766f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d946e84d8d3e21fc0286ce16cfa185b7e766f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aba49ac981bf7bf980f3ba21227ffaf1424c1813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aba49ac981bf7bf980f3ba21227ffaf1424c1813", "html_url": "https://github.com/rust-lang/rust/commit/aba49ac981bf7bf980f3ba21227ffaf1424c1813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aba49ac981bf7bf980f3ba21227ffaf1424c1813/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b722358860085ecfc7054d9a3c8546f905927f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/b722358860085ecfc7054d9a3c8546f905927f35", "html_url": "https://github.com/rust-lang/rust/commit/b722358860085ecfc7054d9a3c8546f905927f35"}, {"sha": "e0035c9797bf1fa5c2f87935e4ba7d362888d299", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0035c9797bf1fa5c2f87935e4ba7d362888d299", "html_url": "https://github.com/rust-lang/rust/commit/e0035c9797bf1fa5c2f87935e4ba7d362888d299"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "8da061208730fc85dfd52f5d9cc43300495e5e73", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aba49ac981bf7bf980f3ba21227ffaf1424c1813/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba49ac981bf7bf980f3ba21227ffaf1424c1813/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aba49ac981bf7bf980f3ba21227ffaf1424c1813", "patch": "@@ -995,7 +995,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // Check existing impl methods to see if they are both present in trait\n     // and compatible with trait signature\n     for impl_item in impl_items {\n-        let ty_impl_item = ccx.tcx.impl_or_trait_item(ccx.tcx.map.local_def_id(impl_item.id));\n+        let ty_impl_item = tcx.impl_or_trait_item(tcx.map.local_def_id(impl_item.id));\n         let ty_trait_item = trait_items.iter()\n             .find(|ac| ac.name() == ty_impl_item.name());\n \n@@ -1016,11 +1016,18 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                            trait_const,\n                                            &impl_trait_ref);\n                     } else {\n-                        span_err!(tcx.sess, impl_item.span, E0323,\n+                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0323,\n                                   \"item `{}` is an associated const, \\\n                                   which doesn't match its trait `{:?}`\",\n                                   impl_const.name,\n-                                  impl_trait_ref)\n+                                  impl_trait_ref);\n+                         err.span_label(impl_item.span, &format!(\"does not match trait\"));\n+                         // We can only get the spans from local trait definition\n+                         // Same for E0324 and E0325\n+                         if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n+                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                         }\n+                         err.emit()\n                     }\n                 }\n                 hir::ImplItemKind::Method(ref sig, ref body) => {\n@@ -1039,11 +1046,16 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                             &trait_method,\n                                             &impl_trait_ref);\n                     } else {\n-                        span_err!(tcx.sess, impl_item.span, E0324,\n+                        let mut err = struct_span_err!(tcx.sess, impl_item.span, E0324,\n                                   \"item `{}` is an associated method, \\\n                                   which doesn't match its trait `{:?}`\",\n                                   impl_method.name,\n-                                  impl_trait_ref)\n+                                  impl_trait_ref);\n+                         err.span_label(impl_item.span, &format!(\"does not match trait\"));\n+                         if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n+                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                         }\n+                         err.emit()\n                     }\n                 }\n                 hir::ImplItemKind::Type(_) => {\n@@ -1057,11 +1069,16 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                             overridden_associated_type = Some(impl_item);\n                         }\n                     } else {\n-                        span_err!(tcx.sess, impl_item.span, E0325,\n+                        let mut err = struct_span_err!(tcx.sess, impl_item.span, E0325,\n                                   \"item `{}` is an associated type, \\\n                                   which doesn't match its trait `{:?}`\",\n                                   impl_type.name,\n-                                  impl_trait_ref)\n+                                  impl_trait_ref);\n+                         err.span_label(impl_item.span, &format!(\"does not match trait\"));\n+                         if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n+                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                         }\n+                         err.emit()\n                     }\n                 }\n             }"}, {"sha": "6452e50d0893ea9b3bc44ea22f1857eeb435b0c0", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aba49ac981bf7bf980f3ba21227ffaf1424c1813/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba49ac981bf7bf980f3ba21227ffaf1424c1813/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=aba49ac981bf7bf980f3ba21227ffaf1424c1813", "patch": "@@ -12,7 +12,9 @@\n \n trait Foo {\n     fn bar(&self);\n-    const MY_CONST: u32;\n+    //~^ NOTE original trait requirement\n+    //~| NOTE original trait requirement\n+    const MY_CONST: u32; //~ NOTE original trait requirement\n }\n \n pub struct FooConstForMethod;\n@@ -21,6 +23,7 @@ impl Foo for FooConstForMethod {\n     //~^ ERROR E0046\n     const bar: u64 = 1;\n     //~^ ERROR E0323\n+    //~| NOTE does not match trait\n     const MY_CONST: u32 = 1;\n }\n \n@@ -31,6 +34,7 @@ impl Foo for FooMethodForConst {\n     fn bar(&self) {}\n     fn MY_CONST() {}\n     //~^ ERROR E0324\n+    //~| NOTE does not match trait\n }\n \n pub struct FooTypeForMethod;\n@@ -39,6 +43,7 @@ impl Foo for FooTypeForMethod {\n     //~^ ERROR E0046\n     type bar = u64;\n     //~^ ERROR E0325\n+    //~| NOTE does not match trait\n     const MY_CONST: u32 = 1;\n }\n "}]}