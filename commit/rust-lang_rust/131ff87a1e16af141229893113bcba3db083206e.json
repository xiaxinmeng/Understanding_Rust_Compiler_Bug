{"sha": "131ff87a1e16af141229893113bcba3db083206e", "node_id": "C_kwDOAAsO6NoAKDEzMWZmODdhMWUxNmFmMTQxMjI5ODkzMTEzYmNiYTNkYjA4MzIwNmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T15:36:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T15:36:55Z"}, "message": "Auto merge of #8673 - Jarcho:same_functions_8139, r=Manishearth\n\nFix `same_functions_in_if_condition` FP\n\nfixes #8139\n\nchangelog: Don't consider `Foo<{ SomeConstant }>` and `Foo<{ SomeOtherConstant }>` to be the same, even if the constants have the same value.", "tree": {"sha": "79f3f8b719446e7f3576968ada76c0932399d559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f3f8b719446e7f3576968ada76c0932399d559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131ff87a1e16af141229893113bcba3db083206e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131ff87a1e16af141229893113bcba3db083206e", "html_url": "https://github.com/rust-lang/rust/commit/131ff87a1e16af141229893113bcba3db083206e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131ff87a1e16af141229893113bcba3db083206e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ab97d22050d4ee6e1b076b7530ccb7bff17193", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ab97d22050d4ee6e1b076b7530ccb7bff17193", "html_url": "https://github.com/rust-lang/rust/commit/18ab97d22050d4ee6e1b076b7530ccb7bff17193"}, {"sha": "719a040397bedd1ca1444df066acdf41758b2c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/719a040397bedd1ca1444df066acdf41758b2c9a", "html_url": "https://github.com/rust-lang/rust/commit/719a040397bedd1ca1444df066acdf41758b2c9a"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "20206ce82a72ddd19872231d80165b747e794599", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/131ff87a1e16af141229893113bcba3db083206e/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ff87a1e16af141229893113bcba3db083206e/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=131ff87a1e16af141229893113bcba3db083206e", "patch": "@@ -1,4 +1,4 @@\n-use crate::consts::{constant_context, constant_simple};\n+use crate::consts::constant_simple;\n use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHasher;\n@@ -16,15 +16,14 @@ use rustc_span::Symbol;\n use std::hash::{Hash, Hasher};\n \n /// Type used to check whether two ast are the same. This is different from the\n-/// operator\n-/// `==` on ast types as this operator would compare true equality with ID and\n-/// span.\n+/// operator `==` on ast types as this operator would compare true equality with\n+/// ID and span.\n ///\n /// Note that some expressions kinds are not considered but could be added.\n pub struct SpanlessEq<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'tcx>,\n-    maybe_typeck_results: Option<&'tcx TypeckResults<'tcx>>,\n+    maybe_typeck_results: Option<(&'tcx TypeckResults<'tcx>, &'tcx TypeckResults<'tcx>)>,\n     allow_side_effects: bool,\n     expr_fallback: Option<Box<dyn FnMut(&Expr<'_>, &Expr<'_>) -> bool + 'a>>,\n }\n@@ -33,7 +32,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n-            maybe_typeck_results: cx.maybe_typeck_results(),\n+            maybe_typeck_results: cx.maybe_typeck_results().map(|x| (x, x)),\n             allow_side_effects: true,\n             expr_fallback: None,\n         }\n@@ -102,9 +101,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&StmtKind::Local(l), &StmtKind::Local(r)) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n-                if let Some(typeck) = self.inner.maybe_typeck_results {\n-                    let l_ty = typeck.pat_ty(l.pat);\n-                    let r_ty = typeck.pat_ty(r.pat);\n+                if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n+                    let l_ty = typeck_lhs.pat_ty(l.pat);\n+                    let r_ty = typeck_rhs.pat_ty(r.pat);\n                     if l_ty != r_ty {\n                         return false;\n                     }\n@@ -182,9 +181,17 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     pub fn eq_body(&mut self, left: BodyId, right: BodyId) -> bool {\n-        let cx = self.inner.cx;\n-        let eval_const = |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n-        eval_const(left) == eval_const(right)\n+        // swap out TypeckResults when hashing a body\n+        let old_maybe_typeck_results = self.inner.maybe_typeck_results.replace((\n+            self.inner.cx.tcx.typeck_body(left),\n+            self.inner.cx.tcx.typeck_body(right),\n+        ));\n+        let res = self.eq_expr(\n+            &self.inner.cx.tcx.hir().body(left).value,\n+            &self.inner.cx.tcx.hir().body(right).value,\n+        );\n+        self.inner.maybe_typeck_results = old_maybe_typeck_results;\n+        res\n     }\n \n     #[allow(clippy::similar_names)]\n@@ -193,10 +200,10 @@ impl HirEqInterExpr<'_, '_, '_> {\n             return false;\n         }\n \n-        if let Some(typeck_results) = self.inner.maybe_typeck_results {\n+        if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n             if let (Some(l), Some(r)) = (\n-                constant_simple(self.inner.cx, typeck_results, left),\n-                constant_simple(self.inner.cx, typeck_results, right),\n+                constant_simple(self.inner.cx, typeck_lhs, left),\n+                constant_simple(self.inner.cx, typeck_rhs, right),\n             ) {\n                 if l == r {\n                     return true;"}, {"sha": "3d2295912c9fd08827596a2cef226b76f58e17b0", "filename": "tests/ui/same_functions_in_if_condition.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/131ff87a1e16af141229893113bcba3db083206e/tests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ff87a1e16af141229893113bcba3db083206e/tests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.rs?ref=131ff87a1e16af141229893113bcba3db083206e", "patch": "@@ -1,3 +1,5 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n #![warn(clippy::same_functions_in_if_condition)]\n #![allow(clippy::ifs_same_cond)] // This warning is different from `ifs_same_cond`.\n #![allow(clippy::if_same_then_else, clippy::comparison_chain)] // all empty blocks\n@@ -87,4 +89,21 @@ fn main() {\n         \"linux\"\n     };\n     println!(\"{}\", os);\n+\n+    #[derive(PartialEq, Eq)]\n+    enum E {\n+        A,\n+        B,\n+    }\n+    fn generic<const P: E>() -> bool {\n+        match P {\n+            E::A => true,\n+            E::B => false,\n+        }\n+    }\n+    if generic::<{ E::A }>() {\n+        println!(\"A\");\n+    } else if generic::<{ E::B }>() {\n+        println!(\"B\");\n+    }\n }"}, {"sha": "71e82910ef7529e6cbef6c67426b334301941ba0", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/131ff87a1e16af141229893113bcba3db083206e/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/131ff87a1e16af141229893113bcba3db083206e/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=131ff87a1e16af141229893113bcba3db083206e", "patch": "@@ -1,72 +1,72 @@\n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:29:15\n+  --> $DIR/same_functions_in_if_condition.rs:31:15\n    |\n LL |     } else if function() {\n    |               ^^^^^^^^^^\n    |\n    = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:28:8\n+  --> $DIR/same_functions_in_if_condition.rs:30:8\n    |\n LL |     if function() {\n    |        ^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:34:15\n+  --> $DIR/same_functions_in_if_condition.rs:36:15\n    |\n LL |     } else if fn_arg(a) {\n    |               ^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:33:8\n+  --> $DIR/same_functions_in_if_condition.rs:35:8\n    |\n LL |     if fn_arg(a) {\n    |        ^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:39:15\n+  --> $DIR/same_functions_in_if_condition.rs:41:15\n    |\n LL |     } else if obj.method() {\n    |               ^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:38:8\n+  --> $DIR/same_functions_in_if_condition.rs:40:8\n    |\n LL |     if obj.method() {\n    |        ^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:44:15\n+  --> $DIR/same_functions_in_if_condition.rs:46:15\n    |\n LL |     } else if obj.method_arg(a) {\n    |               ^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:43:8\n+  --> $DIR/same_functions_in_if_condition.rs:45:8\n    |\n LL |     if obj.method_arg(a) {\n    |        ^^^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:51:15\n+  --> $DIR/same_functions_in_if_condition.rs:53:15\n    |\n LL |     } else if v.pop() == None {\n    |               ^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:49:8\n+  --> $DIR/same_functions_in_if_condition.rs:51:8\n    |\n LL |     if v.pop() == None {\n    |        ^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n-  --> $DIR/same_functions_in_if_condition.rs:56:15\n+  --> $DIR/same_functions_in_if_condition.rs:58:15\n    |\n LL |     } else if v.len() == 42 {\n    |               ^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/same_functions_in_if_condition.rs:54:8\n+  --> $DIR/same_functions_in_if_condition.rs:56:8\n    |\n LL |     if v.len() == 42 {\n    |        ^^^^^^^^^^^^^"}]}