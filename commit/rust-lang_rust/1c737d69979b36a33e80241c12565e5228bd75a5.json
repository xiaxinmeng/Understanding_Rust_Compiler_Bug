{"sha": "1c737d69979b36a33e80241c12565e5228bd75a5", "node_id": "C_kwDOAAsO6NoAKDFjNzM3ZDY5OTc5YjM2YTMzZTgwMjQxYzEyNTY1ZTUyMjhiZDc1YTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T11:40:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-24T17:48:59Z"}, "message": "Use kw::Empty for elided lifetimes in path.", "tree": {"sha": "ea8d77c5b86b3a27e52f8de920c1f235c5aecb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8d77c5b86b3a27e52f8de920c1f235c5aecb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c737d69979b36a33e80241c12565e5228bd75a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c737d69979b36a33e80241c12565e5228bd75a5", "html_url": "https://github.com/rust-lang/rust/commit/1c737d69979b36a33e80241c12565e5228bd75a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c737d69979b36a33e80241c12565e5228bd75a5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41090346d844b625ac58004066184d34a9d24f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/41090346d844b625ac58004066184d34a9d24f99", "html_url": "https://github.com/rust-lang/rust/commit/41090346d844b625ac58004066184d34a9d24f99"}], "stats": {"total": 364, "additions": 281, "deletions": 83}, "files": [{"sha": "b3d56d576429913229faa0e5bfece44829aee018", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -2101,7 +2101,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::LifetimeName::Param(param)\n             }\n             LifetimeRes::Fresh { param, .. } => {\n-                debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n                 let param = self.local_def_id(param);\n                 hir::LifetimeName::Param(param)\n             }"}, {"sha": "dc85b5e95ea86d75a73a63cd9e0eaa1d9fb5bd1b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let id = NodeId::from_u32(i);\n                 let l = self.lower_lifetime(&Lifetime {\n                     id,\n-                    ident: Ident::new(kw::UnderscoreLifetime, elided_lifetime_span),\n+                    ident: Ident::new(kw::Empty, elided_lifetime_span),\n                 });\n                 GenericArg::Lifetime(l)\n             }),"}, {"sha": "0f216457c873597df69f8f8d72e11d4dbf3d5aa6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -29,14 +29,15 @@ use std::fmt;\n #[derive(Debug, Copy, Clone, Encodable, HashStable_Generic)]\n pub struct Lifetime {\n     pub hir_id: HirId,\n-    pub ident: Ident,\n \n     /// Either \"`'a`\", referring to a named lifetime definition,\n-    /// or \"``\" (i.e., `kw::Empty`), for elision placeholders.\n+    /// `'_` referring to an anonymous lifetime (either explicitly `'_` or `&type`),\n+    /// or \"``\" (i.e., `kw::Empty`) when appearing in path.\n     ///\n-    /// HIR lowering inserts these placeholders in type paths that\n-    /// refer to type definitions needing lifetime parameters,\n-    /// `&T` and `&mut T`, and trait objects without `... + 'a`.\n+    /// See `Lifetime::suggestion_position` for practical use.\n+    pub ident: Ident,\n+\n+    /// Semantics of this lifetime.\n     pub res: LifetimeName,\n }\n \n@@ -135,6 +136,19 @@ impl fmt::Display for Lifetime {\n     }\n }\n \n+pub enum LifetimeSuggestionPosition {\n+    /// The user wrote `'a` or `'_`.\n+    Normal,\n+    /// The user wrote `&type` or `&mut type`.\n+    Ampersand,\n+    /// The user wrote `Path` and omitted the `<'_>`.\n+    ElidedPath,\n+    /// The user wrote `Path<T>`, and omitted the `'_,`.\n+    ElidedPathArgument,\n+    /// The user wrote `dyn Trait` and omitted the `+ '_`.\n+    ObjectDefault,\n+}\n+\n impl Lifetime {\n     pub fn is_elided(&self) -> bool {\n         self.res.is_elided()\n@@ -144,6 +158,22 @@ impl Lifetime {\n         self.ident.name == kw::Empty || self.ident.name == kw::UnderscoreLifetime\n     }\n \n+    pub fn suggestion_position(&self) -> (LifetimeSuggestionPosition, Span) {\n+        if self.ident.name == kw::Empty {\n+            if self.ident.span.is_empty() {\n+                (LifetimeSuggestionPosition::ElidedPathArgument, self.ident.span)\n+            } else {\n+                (LifetimeSuggestionPosition::ElidedPath, self.ident.span.shrink_to_hi())\n+            }\n+        } else if self.res == LifetimeName::ImplicitObjectLifetimeDefault {\n+            (LifetimeSuggestionPosition::ObjectDefault, self.ident.span)\n+        } else if self.ident.span.is_empty() {\n+            (LifetimeSuggestionPosition::Ampersand, self.ident.span)\n+        } else {\n+            (LifetimeSuggestionPosition::Normal, self.ident.span)\n+        }\n+    }\n+\n     pub fn is_static(&self) -> bool {\n         self.res == LifetimeName::Static\n     }"}, {"sha": "ca71f42f344d9dc6d50412ab9244bc754d3e2f4c", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::DefId;\n-use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::fmt;\n \n@@ -1218,13 +1218,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 (generics.span, \"<'a>\".to_owned())\n                             };\n \n-                            let lifetime_sugg = match lifetime_ref.ident.name {\n-                                kw::Empty => \"'a, \".to_owned(),\n-                                kw::UnderscoreLifetime => \"'a \".to_owned(),\n-                                _ => \"'a \".to_owned(),\n+                            let lifetime_sugg = match lifetime_ref.suggestion_position() {\n+                                (hir::LifetimeSuggestionPosition::Normal, span) => (span, \"'a\".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::Ampersand, span) => (span, \"'a \".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ElidedPath, span) => (span, \"<'a>\".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ElidedPathArgument, span) => (span, \"'a, \".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ObjectDefault, span) => (span, \"+ 'a\".to_owned()),\n                             };\n                             let suggestions = vec![\n-                                (lifetime_ref.ident.span.shrink_to_hi(), lifetime_sugg),\n+                                lifetime_sugg,\n                                 new_param_sugg,\n                             ];\n "}, {"sha": "a8da93e4c69b0d54303c31917dd4a22a02082021", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{EarlyBinder, SubstsRef};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n \n use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predicate, TyCtxt};\n@@ -78,6 +78,15 @@ impl GenericParamDef {\n         }\n     }\n \n+    pub fn is_anonymous_lifetime(&self) -> bool {\n+        match self.kind {\n+            GenericParamDefKind::Lifetime => {\n+                self.name == kw::UnderscoreLifetime || self.name == kw::Empty\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     pub fn default_value<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "af90f644aa086c0bfa2d4f92514c72ea7b337982", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -530,7 +530,7 @@ impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`).\n     pub fn has_name(&self) -> bool {\n-        self.name != kw::UnderscoreLifetime\n+        self.name != kw::UnderscoreLifetime && self.name != kw::Empty\n     }\n }\n "}, {"sha": "8064ab8035e1b97e2825b26fdec1dd464149b2d4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -1963,17 +1963,13 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n         let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {\n-            ty::ReEarlyBound(ref data) => {\n-                data.name != kw::Empty && data.name != kw::UnderscoreLifetime\n-            }\n+            ty::ReEarlyBound(ref data) => data.has_name(),\n \n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n-                if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n-                        return true;\n-                    }\n+                if br.is_named() {\n+                    return true;\n                 }\n \n                 if let Some((region, _)) = highlight.highlight_bound_region {\n@@ -2049,11 +2045,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n-                if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n-                        p!(write(\"{}\", name));\n-                        return Ok(self);\n-                    }\n+                if let ty::BrNamed(_, name) = br && br.is_named() {\n+                    p!(write(\"{}\", name));\n+                    return Ok(self);\n                 }\n \n                 if let Some((region, counter)) = highlight.highlight_bound_region {\n@@ -2266,7 +2260,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n                         (name, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name))\n                     }\n-                    ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n+                    ty::BrNamed(def_id, kw::UnderscoreLifetime | kw::Empty) => {\n                         let name = next_name(&self);\n \n                         if let Some(lt_idx) = lifetime_idx {"}, {"sha": "40eef3f8dec4d256315575c542abce48b195cab9", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -83,7 +83,9 @@ pub struct BoundRegion {\n impl BoundRegionKind {\n     pub fn is_named(&self) -> bool {\n         match *self {\n-            BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n+            BoundRegionKind::BrNamed(_, name) => {\n+                name != kw::UnderscoreLifetime && name != kw::Empty\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "9c2a55fb6c2e9a363f03555f0d41dc933dac1b28", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -182,9 +182,7 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => {\n-                Some(GenericParamDef::lifetime(name))\n-            }\n+            ty::BrNamed(_, name) if br.is_named() => Some(GenericParamDef::lifetime(name)),\n             _ => None,\n         })\n         .collect();\n@@ -233,16 +231,11 @@ pub(crate) fn clean_middle_const<'tcx>(\n pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Lifetime> {\n     match *region {\n         ty::ReStatic => Some(Lifetime::statik()),\n+        _ if !region.has_name() => None,\n         ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n-            if name != kw::UnderscoreLifetime { Some(Lifetime(name)) } else { None }\n-        }\n-        ty::ReEarlyBound(ref data) => {\n-            if data.name != kw::UnderscoreLifetime {\n-                Some(Lifetime(data.name))\n-            } else {\n-                None\n-            }\n+            Some(Lifetime(name))\n         }\n+        ty::ReEarlyBound(ref data) => Some(Lifetime(data.name)),\n         ty::ReLateBound(..)\n         | ty::ReFree(..)\n         | ty::ReVar(..)\n@@ -396,7 +389,7 @@ fn clean_projection_predicate<'tcx>(\n         .collect_referenced_late_bound_regions(&pred)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(Lifetime(name)),\n+            ty::BrNamed(_, name) if br.is_named() => Some(Lifetime(name)),\n             _ => None,\n         })\n         .collect();\n@@ -660,7 +653,7 @@ fn clean_ty_generics<'tcx>(\n         .params\n         .iter()\n         .filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime if param.name == kw::UnderscoreLifetime => None,\n+            ty::GenericParamDefKind::Lifetime if param.is_anonymous_lifetime() => None,\n             ty::GenericParamDefKind::Lifetime => Some(clean_generic_param_def(param, cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n@@ -1460,8 +1453,11 @@ fn maybe_expand_private_type_alias<'tcx>(\n                 });\n                 if let Some(lt) = lifetime {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned =\n-                        if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };\n+                    let cleaned = if !lt.is_anonymous() {\n+                        clean_lifetime(lt, cx)\n+                    } else {\n+                        Lifetime::elided()\n+                    };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n@@ -1892,7 +1888,7 @@ fn clean_generic_args<'tcx>(\n             .args\n             .iter()\n             .map(|arg| match arg {\n-                hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n+                hir::GenericArg::Lifetime(lt) if !lt.is_anonymous() => {\n                     GenericArg::Lifetime(clean_lifetime(*lt, cx))\n                 }\n                 hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),"}, {"sha": "9839e973bdfe44fa106e68d75fbbd8d6cde8375f", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -2,20 +2,62 @@\n // gate-test-anonymous_lifetime_in_impl_trait\n // Verify the behaviour of `feature(anonymous_lifetime_in_impl_trait)`.\n \n-fn f(_: impl Iterator<Item = &'_ ()>) {}\n-//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+mod elided {\n+    fn f(_: impl Iterator<Item = &()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n \n-fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n-//~| ERROR missing lifetime specifier\n+    fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n \n-// Anonymous lifetimes in async fn are already allowed.\n-// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n-async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+    async fn h(_: impl Iterator<Item = &()>) {}\n \n-// Anonymous lifetimes in async fn are already allowed.\n-// But that lifetime does not participate in resolution.\n-async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-//~^ ERROR missing lifetime specifier\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // But that lifetime does not participate in resolution.\n+    async fn i(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+mod underscore {\n+    fn f(_: impl Iterator<Item = &'_ ()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+    async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // But that lifetime does not participate in resolution.\n+    async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+mod alone_in_path {\n+    trait Foo<'a> { fn next(&mut self) -> Option<&'a ()>; }\n+\n+    fn f(_: impl Foo) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+}\n+\n+mod in_path {\n+    trait Foo<'a, T> { fn next(&mut self) -> Option<&'a T>; }\n+\n+    fn f(_: impl Foo<()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+}\n \n fn main() {}"}, {"sha": "50806a6725500c927195f62da3ccdcf252babef3", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.stderr", "status": "modified", "additions": 141, "deletions": 21, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -1,52 +1,172 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:50\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:9:54\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                                                  ^^ expected named lifetime parameter\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                                      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n help: consider using the `'static` lifetime\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n-   |                                                  ~~~~~~~\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&'static ()> { x.next() }\n+   |                                                       +++++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:18:56\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:19:60\n    |\n-LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                                                        ^^ expected named lifetime parameter\n+LL |     async fn i(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n help: consider using the `'static` lifetime\n    |\n-LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n-   |                                                        ~~~~~~~\n+LL |     async fn i(mut x: impl Iterator<Item = &()>) -> Option<&'static ()> { x.next() }\n+   |                                                             +++++++\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:27:58\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                          ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                          ~~~~~~~\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:37:64\n+   |\n+LL |     async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                                ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                                ~~~~~~~\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:47:37\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+   |                                     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&'static ()> { x.next() }\n+   |                                      +++++++\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:58:41\n+   |\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+   |                                         ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&'static ()> { x.next() }\n+   |                                          +++++++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:6:35\n+   |\n+LL |     fn f(_: impl Iterator<Item = &()>) {}\n+   |                                   ^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |         ++++                          ++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:9:39\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                       ^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Iterator<Item = &'a ()>) -> Option<&()> { x.next() }\n+   |         ++++                              ++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:24:35\n+   |\n+LL |     fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                                   ^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |         ++++                          ~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:27:39\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                       ^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Iterator<Item = &'a ()>) -> Option<&'_ ()> { x.next() }\n+   |         ++++                              ~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:44:18\n+   |\n+LL |     fn f(_: impl Foo) {}\n+   |                  ^^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Foo<'a>) {}\n+   |         ++++            ++++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:47:22\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+   |                      ^^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Foo<'a>) -> Option<&()> { x.next() }\n+   |         ++++                ++++\n \n error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:5:31\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:55:22\n    |\n-LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n-   |                               ^^ expected named lifetime parameter\n+LL |     fn f(_: impl Foo<()>) {}\n+   |                      ^ expected named lifetime parameter\n    |\n    = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'a>(_: impl Iterator<Item = &'_'a  ()>) {}\n-   |     ++++                            ++\n+LL |     fn f<'a>(_: impl Foo<'a, ()>) {}\n+   |         ++++             +++\n \n error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:31\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:58:26\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                               ^^ expected named lifetime parameter\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+   |                          ^ expected named lifetime parameter\n    |\n    = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'a>(x: impl Iterator<Item = &'_'a  ()>) -> Option<&'_ ()> { x.next() }\n-   |     ++++                            ++\n+LL |     fn g<'a>(mut x: impl Foo<'a, ()>) -> Option<&()> { x.next() }\n+   |         ++++                 +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0106, E0658.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "220941dcd5dbf6c4b0696b6c4d7fef98aa578a4f", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c737d69979b36a33e80241c12565e5228bd75a5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=1c737d69979b36a33e80241c12565e5228bd75a5", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::lang_items;\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, PolyTraitRef, PredicateOrigin, TraitFn, TraitItem,\n-    TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, LifetimeParamKind, PolyTraitRef, PredicateOrigin, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -595,7 +595,9 @@ fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>,\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -620,7 +622,9 @@ fn report_extra_impl_lifetimes<'tcx>(cx: &LateContext<'tcx>, impl_: &'tcx Impl<'\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -647,7 +651,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.ident.name != kw::UnderscoreLifetime && lifetime.ident.name != kw::StaticLifetime {\n+        if !lifetime.is_anonymous() && lifetime.ident.name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}]}