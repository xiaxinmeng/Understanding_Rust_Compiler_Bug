{"sha": "d3793865c498a10301fc491f2b2167aa95ee7bc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNzkzODY1YzQ5OGExMDMwMWZjNDkxZjJiMjE2N2FhOTVlZTdiYzE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-21T05:49:19Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-21T05:49:19Z"}, "message": "Merge pull request #208 from Robzz/iss114\n\nImplementation of lossy cast lints (issue #114)", "tree": {"sha": "e056a9e410f13d0290a78d57f63aba6f1ab6c45f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e056a9e410f13d0290a78d57f63aba6f1ab6c45f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3793865c498a10301fc491f2b2167aa95ee7bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3793865c498a10301fc491f2b2167aa95ee7bc1", "html_url": "https://github.com/rust-lang/rust/commit/d3793865c498a10301fc491f2b2167aa95ee7bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3793865c498a10301fc491f2b2167aa95ee7bc1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c91857c62d59639a8eb25d3789f75833484828f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c91857c62d59639a8eb25d3789f75833484828f5", "html_url": "https://github.com/rust-lang/rust/commit/c91857c62d59639a8eb25d3789f75833484828f5"}, {"sha": "ad0bc66402eb528aedb1d14235fed9a70bcc0a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0bc66402eb528aedb1d14235fed9a70bcc0a34", "html_url": "https://github.com/rust-lang/rust/commit/ad0bc66402eb528aedb1d14235fed9a70bcc0a34"}], "stats": {"total": 253, "additions": 201, "deletions": 52}, "files": [{"sha": "fbb16fcb17048ea233f853a40ad119fba6f779b2", "filename": "README.md", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -6,47 +6,50 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n ##Lints\n Lints included in this crate:\n \n-name                 | default | meaning\n----------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n-approx_constant      | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n-bad_bit_mask         | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n-box_vec              | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-cmp_nan              | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n-cmp_owned            | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-collapsible_if       | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n-eq_op                | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n-explicit_iter_loop   | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-float_cmp            | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n-identity_op          | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-ineffective_bit_mask | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-inline_always        | warn    | `#[inline(always)]` is a bad idea in most cases\n-iter_next_loop       | warn    | for-looping over `_.next()` which is probably not intended\n-len_without_is_empty | warn    | traits and impls that have `.len()` but not `.is_empty()`\n-len_zero             | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n-let_and_return       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n-let_unit_value       | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n-linkedlist           | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n-modulo_one           | warn    | taking a number modulo 1, which always returns 0\n-mut_mut              | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n-needless_bool        | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n-needless_lifetimes   | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n-needless_range_loop  | warn    | for-looping over a range of indices where an iterator over items would do\n-needless_return      | warn    | using a return statement like `return expr;` where an expression would suffice\n-non_ascii_literal    | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n-option_unwrap_used   | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-precedence           | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n-ptr_arg              | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-range_step_by_zero   | warn    | using Range::step_by(0), which produces an infinite iterator\n-redundant_closure    | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-result_unwrap_used   | allow   | using `Result.unwrap()`, which might be better handled\n-single_match         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n-str_to_string        | warn    | using `to_string()` on a str, which should be `to_owned()`\n-string_add           | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_add_assign    | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_to_string     | warn    | calling `String.to_string()` which is a no-op\n-toplevel_ref_arg     | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n-unit_cmp             | warn    | comparing unit values (which is always `true` or `false`, respectively)\n-zero_width_space     | deny    | using a zero-width space in a string literal, which is confusing\n+name                     | default | meaning\n+-------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+approx_constant          | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+bad_bit_mask             | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+box_vec                  | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+cast_possible_truncation | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+cast_precision_loss      | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+cast_sign_loss           | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+cmp_nan                  | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+cmp_owned                | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+collapsible_if           | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+eq_op                    | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+explicit_iter_loop       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+float_cmp                | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+identity_op              | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+ineffective_bit_mask     | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+inline_always            | warn    | `#[inline(always)]` is a bad idea in most cases\n+iter_next_loop           | warn    | for-looping over `_.next()` which is probably not intended\n+len_without_is_empty     | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+len_zero                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+let_and_return           | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n+let_unit_value           | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+linkedlist               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+modulo_one               | warn    | taking a number modulo 1, which always returns 0\n+mut_mut                  | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+needless_bool            | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+needless_lifetimes       | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+needless_range_loop      | warn    | for-looping over a range of indices where an iterator over items would do\n+needless_return          | warn    | using a return statement like `return expr;` where an expression would suffice\n+non_ascii_literal        | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+option_unwrap_used       | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+precedence               | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+ptr_arg                  | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+range_step_by_zero       | warn    | using Range::step_by(0), which produces an infinite iterator\n+redundant_closure        | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+result_unwrap_used       | allow   | using `Result.unwrap()`, which might be better handled\n+single_match             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n+str_to_string            | warn    | using `to_string()` on a str, which should be `to_owned()`\n+string_add               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_add_assign        | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+string_to_string         | warn    | calling `String.to_string()` which is a no-op\n+toplevel_ref_arg         | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+unit_cmp                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+zero_width_space         | deny    | using a zero-width space in a string literal, which is confusing\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "70d5ff4bc17308e8d5bbebe90c32daf20ff5ac03", "filename": "src/consts.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -67,15 +67,16 @@ impl Constant {\n     }\n \n     /// convert this constant to a f64, if possible\n-   pub fn as_float(&self) -> Option<f64> {\n-       match *self {\n-           ConstantByte(b) => Some(b as f64),\n-           ConstantFloat(ref s, _) => s.parse().ok(),\n-           ConstantInt(i, ty) => Some(if is_negative(ty) {\n-               -(i as f64) } else { i as f64 }),\n-           _ => None\n-       }\n-   }\n+    #[allow(cast_precision_loss)]\n+    pub fn as_float(&self) -> Option<f64> {\n+        match *self {\n+            ConstantByte(b) => Some(b as f64),\n+            ConstantFloat(ref s, _) => s.parse().ok(),\n+            ConstantInt(i, ty) => Some(if is_negative(ty) {\n+                -(i as f64) } else { i as f64 }),\n+            _ => None\n+        }\n+    }\n }\n \n impl PartialEq for Constant {"}, {"sha": "9ea1efeed5f8afcfe6f422941b4919f35eabb7f3", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin_registrar, box_syntax)]\n #![feature(rustc_private, core, collections)]\n-#![feature(str_split_at)]\n+#![feature(str_split_at, num_bits_bytes)]\n+#![allow(unknown_lints)]\n \n #[macro_use]\n extern crate syntax;\n@@ -68,6 +69,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n     reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n     reg.register_lint_pass(box ranges::StepByZero as LintPassObject);\n+    reg.register_lint_pass(box types::CastPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n@@ -104,6 +106,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::BOX_VEC,\n+        types::CAST_POSSIBLE_TRUNCATION,\n+        types::CAST_PRECISION_LOSS,\n+        types::CAST_SIGN_LOSS,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n         types::UNIT_CMP,"}, {"sha": "915ffb15fe56a1cf67eae4d6d9525d5bb691a64e", "filename": "src/types.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -6,7 +6,7 @@ use syntax::ptr::P;\n use rustc::middle::ty;\n use syntax::codemap::ExpnInfo;\n \n-use utils::{in_macro, snippet, span_lint, span_help_and_lint};\n+use utils::{in_macro, snippet, span_lint, span_help_and_lint, in_external_macro};\n \n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n@@ -136,3 +136,85 @@ impl LintPass for UnitCmp {\n         }\n     }\n }\n+\n+pub struct CastPass;\n+\n+declare_lint!(pub CAST_PRECISION_LOSS, Allow,\n+              \"casts that cause loss of precision, e.g `x as f32` where `x: u64`\");\n+declare_lint!(pub CAST_SIGN_LOSS, Allow,\n+              \"casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\");\n+declare_lint!(pub CAST_POSSIBLE_TRUNCATION, Allow,\n+              \"casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\");\n+\n+/// Returns the size in bits of an integral type.\n+/// Will return 0 if the type is not an int or uint variant\n+fn int_ty_to_nbits(typ: &ty::TyS) -> usize {\n+    let n = match &typ.sty {\n+    &ty::TyInt(i) =>  4 << (i as usize),\n+    &ty::TyUint(u) => 4 << (u as usize),\n+    _ => 0\n+    };\n+    // n == 4 is the usize/isize case\n+    if n == 4 { ::std::usize::BITS } else { n }\n+}\n+\n+impl LintPass for CastPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CAST_PRECISION_LOSS,\n+                    CAST_SIGN_LOSS,\n+                    CAST_POSSIBLE_TRUNCATION)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprCast(ref ex, _) = expr.node {\n+            let (cast_from, cast_to) = (cx.tcx.expr_ty(&*ex), cx.tcx.expr_ty(expr));\n+            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n+                match (cast_from.is_integral(), cast_to.is_integral()) {\n+                    (true, false) => {\n+                        let from_nbits = int_ty_to_nbits(cast_from);\n+                        let to_nbits : usize = match &cast_to.sty {\n+                            &ty::TyFloat(ast::TyF32) => 32,\n+                            &ty::TyFloat(ast::TyF64) => 64,\n+                            _ => 0\n+                        };\n+                        if from_nbits != 0 {\n+                            if from_nbits >= to_nbits {\n+                                span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n+                                          &format!(\"converting from {0} to {1}, which causes a loss of precision \\\n+                                          \t\t\t({0} is {2} bits wide, but {1}'s mantissa is only {3} bits wide)\",\n+                                                   cast_from, cast_to, from_nbits, if to_nbits == 64 {52} else {23} ));\n+                            }\n+                        }\n+                    },\n+                    (false, true) => {\n+                        span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n+                                  &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n+                        if !cast_to.is_signed() {\n+                            span_lint(cx, CAST_SIGN_LOSS, expr.span,\n+                                      &format!(\"casting from {} to {} loses the sign of the value\", cast_from, cast_to));\n+                        }\n+                    },\n+                    (true, true) => {\n+                        if cast_from.is_signed() && !cast_to.is_signed() {\n+                            span_lint(cx, CAST_SIGN_LOSS, expr.span,\n+                                      &format!(\"casting from {} to {} loses the sign of the value\", cast_from, cast_to));\n+                        }\n+                        let from_nbits = int_ty_to_nbits(cast_from);\n+                        let to_nbits   = int_ty_to_nbits(cast_to);\n+                        if to_nbits < from_nbits ||\n+                           (!cast_from.is_signed() && cast_to.is_signed() && to_nbits <= from_nbits) {\n+                                span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n+                                          &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n+                        }\n+                    }\n+                    (false, false) => {\n+                        if let (&ty::TyFloat(ast::TyF64),\n+                                &ty::TyFloat(ast::TyF32)) = (&cast_from.sty, &cast_to.sty) {\n+                            span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, \"casting f64 to f32 may cause truncation of the value\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "8a64f612666b26046166da5feac4d34ccdc547d8", "filename": "src/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -40,6 +40,7 @@ fn check_str(cx: &Context, string: &str, span: Span) {\n     }\n }\n \n+#[allow(cast_possible_truncation)]\n fn str_pos_lint(cx: &Context, lint: &'static Lint, span: Span, index: usize, msg: &str) {\n     span_lint(cx, lint, Span { lo: span.lo + BytePos((1 + index) as u32),\n                                hi: span.lo + BytePos((1 + index) as u32),"}, {"sha": "0fa402b3bf73ebf69698bcde773938a106bbe300", "filename": "tests/compile-fail/cast.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d3793865c498a10301fc491f2b2167aa95ee7bc1/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3793865c498a10301fc491f2b2167aa95ee7bc1/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=d3793865c498a10301fc491f2b2167aa95ee7bc1", "patch": "@@ -0,0 +1,57 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss)]\n+#[allow(dead_code)]\n+fn main() {\n+    let i : i32 = 42;\n+    let u : u32 = 42;\n+    let f : f32 = 42.0;\n+\n+    // Test cast_precision_loss\n+    i as f32; //~ERROR converting from i32 to f32, which causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    (i as i64) as f32; //~ERROR converting from i64 to f32, which causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    (i as i64) as f64; //~ERROR converting from i64 to f64, which causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    u as f32; //~ERROR converting from u32 to f32, which causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+    (u as u64) as f32; //~ERROR converting from u64 to f32, which causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+    (u as u64) as f64; //~ERROR converting from u64 to f64, which causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    i as f64; // Should not trigger the lint\n+    u as f64; // Should not trigger the lint\n+\n+    // Test cast_possible_truncation\n+    f as i32; //~ERROR casting f32 to i32 may cause truncation of the value\n+    f as u32; //~ERROR casting f32 to u32 may cause truncation of the value\n+              //~^ERROR casting from f32 to u32 loses the sign of the value\n+    i as u8;  //~ERROR casting i32 to u8 may cause truncation of the value\n+              //~^ERROR casting from i32 to u8 loses the sign of the value\n+    (f as f64) as f32; //~ERROR casting f64 to f32 may cause truncation of the value\n+    i as i8;  //~ERROR casting i32 to i8 may cause truncation of the value\n+    u as i32; //~ERROR casting u32 to i32 may cause truncation of the value\n+\n+    // Test cast_sign_loss\n+    i as u32; //~ERROR casting from i32 to u32 loses the sign of the value\n+\n+    // Extra checks for usize/isize\n+    let is : isize = -42;\n+    is as usize; //~ERROR casting from isize to usize loses the sign of the value\n+    is as i8; //~ERROR casting isize to i8 may cause truncation of the value\n+\n+    // FIXME : enable these checks when we figure out a way to make compiletest deal with conditional compilation\n+    /*\n+    #[cfg(target_pointer_width = \"64\")]\n+    fn check_64() {\n+        let is : isize = -42;\n+        let us : usize = 42;\n+        is as f32; //ERROR converting from isize to f32, which causes a loss of precision (isize is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+        us as u32; //ERROR casting usize to u32 may cause truncation of the value\n+        us as u64; // Should not trigger any lint\n+    }\n+    #[cfg(target_pointer_width = \"32\")]\n+    fn check_32() {\n+        let is : isize = -42;\n+        let us : usize = 42;\n+        is as f32; //ERROR converting from isize to f32, which causes a loss of precision (isize is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+        us as u32; // Should not trigger any lint\n+        us as u64; // Should not trigger any lint\n+    }*/\n+}\n\\ No newline at end of file"}]}