{"sha": "e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMTE5ZGM5NGRlZTVhZmU0YTBjY2QzMDUzMGY5ZDRiODI0YTM1MDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-07T18:19:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "stub JSON information flow from cargo-build-time to run-time", "tree": {"sha": "cf73c2f7e0074105bc3f86378bae2deaeac56b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf73c2f7e0074105bc3f86378bae2deaeac56b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "html_url": "https://github.com/rust-lang/rust/commit/e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2119dc94dee5afe4a0ccd30530f9d4b824a3504/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16afe1a2343de58c29480ab0d90490b58eee00d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16afe1a2343de58c29480ab0d90490b58eee00d8", "html_url": "https://github.com/rust-lang/rust/commit/16afe1a2343de58c29480ab0d90490b58eee00d8"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "fee485ec9044c821cd6058f79231a1afba862e65", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e2119dc94dee5afe4a0ccd30530f9d4b824a3504/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2119dc94dee5afe4a0ccd30530f9d4b824a3504/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "patch": "@@ -1,10 +1,13 @@\n use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n-use std::io::{self, BufRead, Write};\n+use std::io::{self, BufRead, BufReader, BufWriter, Write};\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::collections::HashMap;\n+\n+use serde::{Deserialize, Serialize};\n \n use rustc_version::VersionMeta;\n \n@@ -41,6 +44,15 @@ enum MiriCommand {\n     Setup,\n }\n \n+/// The inforamtion Miri needs to run a crate. Stored as JSON when the crate is \"compiled\".\n+#[derive(Serialize, Deserialize)]\n+struct CrateRunInfo {\n+    /// The command-line arguments.\n+    args: Vec<OsString>,\n+    /// The environment.\n+    env: HashMap<OsString, OsString>,\n+}\n+\n fn show_help() {\n     println!(\"{}\", CARGO_MIRI_HELP);\n }\n@@ -442,15 +454,24 @@ fn phase_cargo_rustc(mut args: env::Args) {\n         // like we want them.\n         // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n         // and environment variables; this is sued alter when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n-        let filename = format!(\n-            \"{}/{}{}\",\n-            get_arg_flag_value(\"--out-dir\").unwrap(),\n+        let info = CrateRunInfo { args: Vec::new(), env: HashMap::new() };\n+\n+        let mut path = PathBuf::from(get_arg_flag_value(\"--out-dir\").unwrap());\n+        path.push(format!(\n+            \"{}{}\",\n             get_arg_flag_value(\"--crate-name\").unwrap(),\n             // This is technically a `-C` flag but the prefix seems unique enough...\n             // (and cargo passes this before the filename so it should be unique)\n             get_arg_flag_value(\"extra-filename\").unwrap_or(String::new()),\n-        );\n-        eprintln!(\"Miri is supposed to run {}\", filename);\n+        ));\n+        eprintln!(\"Miri is supposed to run {}\", path.display());\n+\n+        let file = File::create(&path)\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot create {}\", path.display())));\n+        let file = BufWriter::new(file);\n+        serde_json::ser::to_writer(file, &info)\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot write to {}\", path.display())));\n+\n         return;\n     }\n \n@@ -488,6 +509,13 @@ fn phase_cargo_rustc(mut args: env::Args) {\n \n fn phase_cargo_runner(binary: &str, args: env::Args) {\n     eprintln!(\"Asked to execute {}, args: {:?}\", binary, args.collect::<Vec<_>>());\n+\n+    let file = File::open(binary)\n+        .unwrap_or_else(|_| show_error(format!(\"File {:?} not found, or cargo-miri invoked incorrectly\", binary)));\n+    let file = BufReader::new(file);\n+    let info: CrateRunInfo = serde_json::from_reader(file)\n+        .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n+    // FIXME: remove the file.\n }\n \n fn main() {"}]}