{"sha": "558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OGNiZmIxOWI4ZTQzZTQ0N2YxY2FlNmVjZGIwNmMwYjk2MTA2N2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-24T21:34:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-24T22:43:48Z"}, "message": "prohibit turbofish in `impl Trait` methods", "tree": {"sha": "8b5bbc46eecee1ff841b735f46895ec349d128fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5bbc46eecee1ff841b735f46895ec349d128fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "html_url": "https://github.com/rust-lang/rust/commit/558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "html_url": "https://github.com/rust-lang/rust/commit/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "f3a3c30fe5ad9ba09ac04903f3fd5ede60bb595f", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "patch": "@@ -46,18 +46,21 @@ pub struct ConfirmResult<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    pub fn confirm_method(&self,\n-                          span: Span,\n-                          self_expr: &'gcx hir::Expr,\n-                          call_expr: &'gcx hir::Expr,\n-                          unadjusted_self_ty: Ty<'tcx>,\n-                          pick: probe::Pick<'tcx>,\n-                          segment: &hir::PathSegment)\n-                          -> ConfirmResult<'tcx> {\n-        debug!(\"confirm(unadjusted_self_ty={:?}, pick={:?}, generic_args={:?})\",\n-               unadjusted_self_ty,\n-               pick,\n-               segment.parameters);\n+    pub fn confirm_method(\n+        &self,\n+        span: Span,\n+        self_expr: &'gcx hir::Expr,\n+        call_expr: &'gcx hir::Expr,\n+        unadjusted_self_ty: Ty<'tcx>,\n+        pick: probe::Pick<'tcx>,\n+        segment: &hir::PathSegment,\n+    ) -> ConfirmResult<'tcx> {\n+        debug!(\n+            \"confirm(unadjusted_self_ty={:?}, pick={:?}, generic_args={:?})\",\n+            unadjusted_self_ty,\n+            pick,\n+            segment.parameters,\n+        );\n \n         let mut confirm_cx = ConfirmContext::new(self, span, self_expr, call_expr);\n         confirm_cx.confirm(unadjusted_self_ty, pick, segment)\n@@ -78,11 +81,12 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn confirm(&mut self,\n-               unadjusted_self_ty: Ty<'tcx>,\n-               pick: probe::Pick<'tcx>,\n-               segment: &hir::PathSegment)\n-               -> ConfirmResult<'tcx> {\n+    fn confirm(\n+        &mut self,\n+        unadjusted_self_ty: Ty<'tcx>,\n+        pick: probe::Pick<'tcx>,\n+        segment: &hir::PathSegment,\n+    ) -> ConfirmResult<'tcx> {\n         // Adjust the self expression the user provided and obtain the adjusted type.\n         let self_ty = self.adjust_self_ty(unadjusted_self_ty, &pick);\n \n@@ -300,17 +304,19 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             })\n     }\n \n-    fn instantiate_method_substs(&mut self,\n-                                 pick: &probe::Pick<'tcx>,\n-                                 segment: &hir::PathSegment,\n-                                 parent_substs: &Substs<'tcx>)\n-                                 -> &'tcx Substs<'tcx> {\n+    fn instantiate_method_substs(\n+        &mut self,\n+        pick: &probe::Pick<'tcx>,\n+        segment: &hir::PathSegment,\n+        parent_substs: &Substs<'tcx>,\n+    ) -> &'tcx Substs<'tcx> {\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let mut fn_segment = Some((segment, method_generics));\n-        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true, false);\n+        let supress_mismatch = self.fcx.check_impl_trait(self.span, fn_segment);\n+        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true, supress_mismatch);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method."}, {"sha": "49f9ae0e971a90ebaf74ced24513f698d57cb36c", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "patch": "@@ -179,12 +179,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.tcx.check_stability(pick.item.def_id, Some(call_expr.id), span);\n \n-        let result = self.confirm_method(span,\n-                                         self_expr,\n-                                         call_expr,\n-                                         self_ty,\n-                                         pick.clone(),\n-                                         segment);\n+        let result = self.confirm_method(\n+            span,\n+            self_expr,\n+            call_expr,\n+            self_ty,\n+            pick.clone(),\n+            segment,\n+        );\n \n         if result.illegal_sized_bound {\n             // We probe again, taking all traits into account (not only those in scope)."}, {"sha": "70d299437a6e9401dc0b4f826e1de441c9c56cb1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "patch": "@@ -4734,7 +4734,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // variables. If the user provided some types, we may still need\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n-        let supress_mismatch = self.check_impl_trait(span, &mut fn_segment);\n+        let supress_mismatch = self.check_impl_trait(span, fn_segment);\n         self.check_path_parameter_count(span, &mut type_segment, false, supress_mismatch);\n         self.check_path_parameter_count(span, &mut fn_segment, false, supress_mismatch);\n \n@@ -5019,7 +5019,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Report error if there is an explicit type parameter when using `impl Trait`.\n     fn check_impl_trait(&self,\n                         span: Span,\n-                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>)\n+                        segment: Option<(&hir::PathSegment, &ty::Generics)>)\n                         -> bool {\n         let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;"}, {"sha": "ac53612d2daac2688406d19282fed60d2911343f", "filename": "src/test/ui/impl-trait/universal-turbofish-in-method-issue-50950.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.rs?ref=558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::any::Any;\n+pub struct EventHandler {\n+}\n+\n+impl EventHandler\n+{\n+    pub fn handle_event<T: Any>(&mut self, _efunc: impl FnMut(T)) {}\n+}\n+\n+struct TestEvent(i32);\n+\n+fn main() {\n+    let mut evt = EventHandler {};\n+    evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n+        //~^ ERROR cannot provide explicit type parameters\n+    });\n+}"}, {"sha": "fec3f78535dddfe9dec5cafed1e36e3cab3f4258", "filename": "src/test/ui/impl-trait/universal-turbofish-in-method-issue-50950.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/558cbfb19b8e43e447f1cae6ecdb06c0b961067e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=558cbfb19b8e43e447f1cae6ecdb06c0b961067e", "patch": "@@ -0,0 +1,9 @@\n+error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+  --> $DIR/universal-turbofish-in-method-issue-50950.rs:24:9\n+   |\n+LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n+   |         ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0632`."}]}