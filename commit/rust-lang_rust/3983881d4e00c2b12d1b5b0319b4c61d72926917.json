{"sha": "3983881d4e00c2b12d1b5b0319b4c61d72926917", "node_id": "C_kwDOAAsO6NoAKDM5ODM4ODFkNGUwMGMyYjEyZDFiNWIwMzE5YjRjNjFkNzI5MjY5MTc", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-06-06T15:51:09Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-06-09T22:28:35Z"}, "message": "take care module name for suggesting surround the struct literal in parentheses", "tree": {"sha": "accd8e6288d3730eabfb2c5e92843fa87cb712a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accd8e6288d3730eabfb2c5e92843fa87cb712a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3983881d4e00c2b12d1b5b0319b4c61d72926917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3983881d4e00c2b12d1b5b0319b4c61d72926917", "html_url": "https://github.com/rust-lang/rust/commit/3983881d4e00c2b12d1b5b0319b4c61d72926917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3983881d4e00c2b12d1b5b0319b4c61d72926917/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43062c43d2a63cf4e261c6eddc417575c4f3062f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43062c43d2a63cf4e261c6eddc417575c4f3062f", "html_url": "https://github.com/rust-lang/rust/commit/43062c43d2a63cf4e261c6eddc417575c4f3062f"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "2abd485b1be3bee1004a950fa9e375867c409477", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3983881d4e00c2b12d1b5b0319b4c61d72926917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983881d4e00c2b12d1b5b0319b4c61d72926917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=3983881d4e00c2b12d1b5b0319b4c61d72926917", "patch": "@@ -751,10 +751,18 @@ impl<'a> Parser<'a> {\n                     tail.could_be_bare_literal = true;\n                     if maybe_struct_name.is_ident() && can_be_struct_literal {\n                         // Account for `if Example { a: one(), }.is_pos() {}`.\n+                        // expand `before` so that we take care of module path such as:\n+                        // `foo::Bar { ... } `\n+                        // we expect to suggest `(foo::Bar { ... })` instead of `foo::(Bar { ... })`\n+                        let sm = self.sess.source_map();\n+                        let before = maybe_struct_name.span.shrink_to_lo();\n+                        let extend_before = sm.span_extend_prev_while(before, |t| {\n+                            t.is_alphanumeric() || t == ':' || t == '_'\n+                        });\n                         Err(self.sess.create_err(StructLiteralNeedingParens {\n                             span: maybe_struct_name.span.to(expr.span),\n                             sugg: StructLiteralNeedingParensSugg {\n-                                before: maybe_struct_name.span.shrink_to_lo(),\n+                                before: extend_before.unwrap().shrink_to_lo(),\n                                 after: expr.span.shrink_to_hi(),\n                             },\n                         }))"}, {"sha": "f354751112fa332cd487120ea60c986feb37c0e5", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3983881d4e00c2b12d1b5b0319b4c61d72926917/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983881d4e00c2b12d1b5b0319b4c61d72926917/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=3983881d4e00c2b12d1b5b0319b4c61d72926917", "patch": "@@ -744,6 +744,18 @@ impl SourceMap {\n         })\n     }\n \n+    /// Extends the given `Span` to previous character while the previous character matches the predicate\n+    pub fn span_extend_prev_while(\n+        &self,\n+        span: Span,\n+        f: impl Fn(char) -> bool,\n+    ) -> Result<Span, SpanSnippetError> {\n+        self.span_to_source(span, |s, start, _end| {\n+            let n = s[..start].char_indices().rfind(|&(_, c)| !f(c)).map_or(start, |(i, _)| start - i - 1);\n+            Ok(span.with_lo(span.lo() - BytePos(n as u32)))\n+        })\n+    }\n+\n     /// Extends the given `Span` to just before the next occurrence of `c`.\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {"}, {"sha": "56096f706a8a7c647cd67e2feaa4c08881006520", "filename": "tests/ui/parser/issues/issue-111692.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3983881d4e00c2b12d1b5b0319b4c61d72926917/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983881d4e00c2b12d1b5b0319b4c61d72926917/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs?ref=3983881d4e00c2b12d1b5b0319b4c61d72926917", "patch": "@@ -0,0 +1,32 @@\n+mod module {\n+    #[derive(Eq, PartialEq)]\n+    pub struct Type {\n+        pub x: u8,\n+        pub y: u8,\n+    }\n+\n+    pub const C: u8 = 32u8;\n+}\n+\n+fn test(x: module::Type) {\n+    if x == module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test2(x: module::Type) {\n+    if x ==module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+\n+fn test3(x: module::Type) {\n+    if x == Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test4(x: module::Type) {\n+    if x == demo_module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "7b09d47301df7af784dd607e95019679b7a29fad", "filename": "tests/ui/parser/issues/issue-111692.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3983881d4e00c2b12d1b5b0319b4c61d72926917/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3983881d4e00c2b12d1b5b0319b4c61d72926917/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr?ref=3983881d4e00c2b12d1b5b0319b4c61d72926917", "patch": "@@ -0,0 +1,46 @@\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:12:21\n+   |\n+LL |     if x == module::Type { x: module::C, y: 1 } {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if x == (module::Type { x: module::C, y: 1 }) {\n+   |             +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:17:20\n+   |\n+LL |     if x ==module::Type { x: module::C, y: 1 } {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if x ==(module::Type { x: module::C, y: 1 }) {\n+   |            +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:23:13\n+   |\n+LL |     if x == Type { x: module::C, y: 1 } {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if x == (Type { x: module::C, y: 1 }) {\n+   |             +                           +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:28:26\n+   |\n+LL |     if x == demo_module::Type { x: module::C, y: 1 } {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if x == (demo_module::Type { x: module::C, y: 1 }) {\n+   |             +                                        +\n+\n+error: aborting due to 4 previous errors\n+"}]}