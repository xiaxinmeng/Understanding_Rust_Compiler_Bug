{"sha": "e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTE0ZWZhYjI1YTRjZWZhYzczMGQ2ZmI2ZDc5MTdhNGNmMWNiYjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-16T10:14:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-16T10:14:34Z"}, "message": "add test", "tree": {"sha": "e17441cfb480e5592bf96d913ddcfd09861bb4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17441cfb480e5592bf96d913ddcfd09861bb4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "html_url": "https://github.com/rust-lang/rust/commit/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897cb610767741c0f49ff1e68cda41b521186003", "url": "https://api.github.com/repos/rust-lang/rust/commits/897cb610767741c0f49ff1e68cda41b521186003", "html_url": "https://github.com/rust-lang/rust/commit/897cb610767741c0f49ff1e68cda41b521186003"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "f6075987d178df63ed9d5a0cd5f501fa8a449355", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "renamed", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "patch": "@@ -3,6 +3,12 @@\n \n use std::mem;\n \n+#[repr(C)]\n+union MaybeUninit<T: Copy> {\n+    uninit: (),\n+    init: T,\n+}\n+\n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n //~| type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -35,4 +41,9 @@ const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n+//~^ ERROR it is undefined behavior to use this value\n+const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n+//~^ ERROR it is undefined behavior to use this value\n+\n fn main() {}", "previous_filename": "src/test/ui/consts/const-eval/ub-ref.rs"}, {"sha": "7d76c5cb43fe07772730c01b57e7369e58ce0a03", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.stderr", "status": "renamed", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5514efab25a4cefac730d6fb6d7917a4cf1cbb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr?ref=e5514efab25a4cefac730d6fb6d7917a4cf1cbb6", "patch": "@@ -1,75 +1,91 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:6:1\n+  --> $DIR/ub-ref-ptr.rs:12:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:10:1\n+  --> $DIR/ub-ref-ptr.rs:16:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:14:1\n+  --> $DIR/ub-ref-ptr.rs:20:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref-ptr.rs:23:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:23:1\n+  --> $DIR/ub-ref-ptr.rs:29:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc14, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:26:1\n+  --> $DIR/ub-ref-ptr.rs:32:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:29:1\n+  --> $DIR/ub-ref-ptr.rs:35:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:32:1\n+  --> $DIR/ub-ref-ptr.rs:38:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:35:1\n+  --> $DIR/ub-ref-ptr.rs:41:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 9 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:44:1\n+   |\n+LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:46:1\n+   |\n+LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0080`.", "previous_filename": "src/test/ui/consts/const-eval/ub-ref.stderr"}]}