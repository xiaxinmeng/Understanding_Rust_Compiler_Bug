{"sha": "b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MzNlNjNkMmE5NTJkYjE4ZmQwNzljYmY4ZWMxY2Y0OWIwZDA3NmI=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-08-11T07:15:28Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-08-11T08:44:16Z"}, "message": "Remove unnecessary blank lines at the start and the end of a block", "tree": {"sha": "93f13a37187d54437a236419f76afad4a43273cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f13a37187d54437a236419f76afad4a43273cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "html_url": "https://github.com/rust-lang/rust/commit/b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3", "html_url": "https://github.com/rust-lang/rust/commit/0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "11d64dc073fb04aeb3456a8780691bad126685f2", "filename": "src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "patch": "@@ -606,7 +606,9 @@ create_config! {\n                                               tuple patterns\";\n     combine_control_expr: bool, true, \"Combine control expressions with funciton calls.\";\n     struct_field_align_threshold: usize, 0, \"Align struct fields if their diffs fits within \\\n-                                             threshold.\"\n+                                             threshold.\";\n+    remove_blank_lines_at_start_or_end_of_block: bool, true,\n+        \"Remove blank lines at start or end of a block\";\n }\n \n #[cfg(test)]"}, {"sha": "b455e569e435dd618f93fa35ea14e9f41958368e", "filename": "src/visitor.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "patch": "@@ -17,7 +17,7 @@ use syntax::parse::ParseSess;\n \n use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, FindUncommented};\n+use comment::{contains_comment, CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use expr::{format_expr, ExprType};\n@@ -131,6 +131,27 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_indent(self.config);\n         self.buffer.push_str(\"{\");\n \n+        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n+            if let Some(stmt) = b.stmts.first() {\n+                let snippet = self.snippet(mk_sp(self.last_pos, stmt.span.lo));\n+                let len = CommentCodeSlices::new(&snippet)\n+                    .nth(0)\n+                    .and_then(|(kind, _, s)| {\n+                        if kind == CodeCharKind::Normal {\n+                            // There may be inner attributes\n+                            let s = &s[..s.len() -\n+                                           s.trim_left_matches(&[' ', '\\t', '\\r', '\\n'][..]).len()];\n+                            s.rfind('\\n')\n+                        } else {\n+                            None\n+                        }\n+                    });\n+                if let Some(len) = len {\n+                    self.last_pos = self.last_pos + BytePos(len as u32);\n+                }\n+            }\n+        }\n+\n         // Format inner attributes if available.\n         if let Some(attrs) = inner_attrs {\n             self.visit_attrs(attrs, ast::AttrStyle::Inner);\n@@ -148,17 +169,39 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n+        let mut remove_len = BytePos(0);\n+        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n+            if let Some(stmt) = b.stmts.last() {\n+                let snippet = self.snippet(mk_sp(\n+                    stmt.span.hi,\n+                    source!(self, b.span).hi - brace_compensation,\n+                ));\n+                let len = CommentCodeSlices::new(&snippet)\n+                    .last()\n+                    .and_then(|(kind, _, s)| {\n+                        if kind == CodeCharKind::Normal && s.trim().is_empty() {\n+                            Some(s.len())\n+                        } else {\n+                            None\n+                        }\n+                    });\n+                if let Some(len) = len {\n+                    remove_len = BytePos(len as u32);\n+                }\n+            }\n+        }\n+\n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n-            let end_pos = source!(self, b.span).hi - brace_compensation;\n+            let end_pos = source!(self, b.span).hi - brace_compensation - remove_len;\n             let snippet = self.get_context().snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n         // FIXME: we should compress any newlines here to just one\n         if unindent_comment {\n             self.block_indent = self.block_indent.block_unindent(self.config);\n         }\n-        self.format_missing_with_indent(source!(self, b.span).hi - brace_compensation);\n+        self.format_missing_with_indent(source!(self, b.span).hi - brace_compensation - remove_len);\n         if unindent_comment {\n             self.block_indent = self.block_indent.block_indent(self.config);\n         }"}, {"sha": "377843cbc8b4fbef5664ac805095a6515e3d60d8", "filename": "tests/source/remove_blank_lines.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/tests%2Fsource%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/tests%2Fsource%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fremove_blank_lines.rs?ref=b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "patch": "@@ -0,0 +1,22 @@\n+fn main() {\n+\n+\n+\n+\n+    let x = 1;\n+\n+\n+\n+\n+}\n+\n+fn foo() {\n+\n+    #![attribute]\n+\n+    let x = 1;\n+\n+    // comment\n+\n+\n+}"}, {"sha": "00de4a829f2fcf42034771687013dcb40247001f", "filename": "tests/target/remove_blank_lines.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/tests%2Ftarget%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b433e63d2a952db18fd079cbf8ec1cf49b0d076b/tests%2Ftarget%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fremove_blank_lines.rs?ref=b433e63d2a952db18fd079cbf8ec1cf49b0d076b", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let x = 1;\n+}\n+\n+fn foo() {\n+    #![attribute]\n+\n+    let x = 1;\n+\n+    // comment\n+}"}]}