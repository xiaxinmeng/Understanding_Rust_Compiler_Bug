{"sha": "fa4134611dfc54e117f196644d30948a75b7b9eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDEzNDYxMWRmYzU0ZTExN2YxOTY2NDRkMzA5NDhhNzViN2I5ZWI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T06:04:56Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:40Z"}, "message": "Fixing an infinite type, updating code to match new Early parser, remembering to add protocol parser.", "tree": {"sha": "a53b85b9b44bcdcf80bbe2a55234c80ad0680fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a53b85b9b44bcdcf80bbe2a55234c80ad0680fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4134611dfc54e117f196644d30948a75b7b9eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4134611dfc54e117f196644d30948a75b7b9eb", "html_url": "https://github.com/rust-lang/rust/commit/fa4134611dfc54e117f196644d30948a75b7b9eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4134611dfc54e117f196644d30948a75b7b9eb/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6806aa0e66028a218de96edd72b11e0ffa4de4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6806aa0e66028a218de96edd72b11e0ffa4de4e2", "html_url": "https://github.com/rust-lang/rust/commit/6806aa0e66028a218de96edd72b11e0ffa4de4e2"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "4ca47254a943d4ba1abc30141aaf86818a37524a", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=fa4134611dfc54e117f196644d30948a75b7b9eb", "patch": "@@ -17,7 +17,9 @@ fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     let cfg = cx.cfg();\n     let body_core = alt tt { tt_delim(tts) { tts } _ {fail}};\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n-                               cx.parse_sess().interner, body_core);\n+                               cx.parse_sess().interner,\n+                               none,\n+                               body_core);\n     let rdr = tt_rdr as reader;\n     let rust_parser = parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n "}, {"sha": "919960f4c82e8fba9de9dc916c546a801c04f4bf", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=fa4134611dfc54e117f196644d30948a75b7b9eb", "patch": "@@ -0,0 +1,63 @@\n+// Parsing pipes protocols from token trees.\n+\n+import parse::parser;\n+import ast::ident;\n+import parse::token;\n+\n+import pipec::*;\n+\n+impl proto_parser for parser {\n+    fn parse_proto(id: ident) -> protocol {\n+        let proto = protocol(id);\n+\n+        self.expect(token::LBRACE);\n+\n+        while self.token != token::RBRACE {\n+            self.parse_state(proto);\n+        }\n+\n+        ret proto;\n+    }\n+\n+    fn parse_state(proto: protocol) {\n+        let id = self.parse_ident();\n+        self.expect(token::COLON);\n+        let dir = alt copy self.token {\n+          token::IDENT(n, _) {\n+            self.get_str(n)\n+          }\n+          _ { fail }\n+        };\n+        self.bump();\n+        let dir = alt dir {\n+          @\"send\" { send }\n+          @\"recv\" { recv }\n+          _ { fail }\n+        };\n+\n+        let state = proto.add_state(id, dir);\n+        // TODO: add typarams too.\n+\n+        self.expect(token::LBRACE);\n+\n+        while self.token != token::RBRACE {\n+            let mname = self.parse_ident();\n+\n+            // TODO: parse data\n+\n+            self.expect(token::RARROW);\n+\n+            let next = self.parse_ident();\n+            // TODO: parse next types\n+\n+            state.add_message(mname, ~[], next, ~[]);\n+\n+            alt copy self.token {\n+              token::COMMA { self.bump() }\n+              token::RBRACE { }\n+              _ { fail }\n+            }\n+        }\n+        self.bump();\n+    }\n+}"}, {"sha": "191da586ce5a272a2888f5090cb7b20ca3200c8e", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=fa4134611dfc54e117f196644d30948a75b7b9eb", "patch": "@@ -272,7 +272,7 @@ fn parse_nt(p: parser, name: str) -> whole_nt {\n                       + token::to_str(*p.reader.interner(), copy p.token)) }\n       } }\n       \"path\" { token::w_path(p.parse_path_with_tps(false)) }\n-      \"tt\" { token::w_tt(p.parse_token_tree()) }\n+      \"tt\" { token::w_tt(@p.parse_token_tree()) }\n       _ { p.fatal(\"Unsupported builtin nonterminal parser: \" + name)}\n     }\n }"}, {"sha": "dbc1e8b34e34df56586028e3c6b698f48b5699f8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4134611dfc54e117f196644d30948a75b7b9eb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=fa4134611dfc54e117f196644d30948a75b7b9eb", "patch": "@@ -96,7 +96,10 @@ enum whole_nt {\n     w_ty(  @ast::ty),\n     w_ident(str_num, bool),\n     w_path(@ast::path),\n-    w_tt(ast::token_tree),\n+    // TODO: this seems to cause infinite recursion in\n+    // type_structually_contains if it's not an @-box. We should at least get\n+    // failure instead.\n+    w_tt(@ast::token_tree),\n }\n \n fn binop_to_str(o: binop) -> str {\n@@ -190,6 +193,7 @@ fn to_str(in: interner<@str>, t: token) -> str {\n               w_stmt(*) { \"statement\" } w_pat(*) { \"pattern\" }\n               w_expr(*) { \"expression\" } w_ty(*) { \"type\" }\n               w_ident(*) { \"identifier\" } w_path(*) { \"path\" }\n+              w_tt(*) { \"tt\" }\n         }\n       }\n     }"}]}