{"sha": "2110d2de5a894f3088e1d8f20404876e2ef4b65e", "node_id": "C_kwDOAAsO6NoAKDIxMTBkMmRlNWE4OTRmMzA4OGUxZDhmMjA0MDQ4NzZlMmVmNGI2NWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T18:58:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T18:58:53Z"}, "message": "Rollup merge of #99216 - duarten:master, r=joshtriplett\n\ndocs: be less harsh in wording for Vec::from_raw_parts\n\nIn particular, be clear that it is sound to specify memory not\noriginating from a previous `Vec` allocation. That is already suggested\nin other parts of the documentation about zero-alloc conversions to Box<[T]>.\n\nIncorporate a constraint from `slice::from_raw_parts` that was missing\nbut needs to be fulfilled, since a `Vec` can be converted into a slice.\n\nFixes https://github.com/rust-lang/rust/issues/98780.", "tree": {"sha": "96bfb8c59eb7c00a833334fcaeadc439962b8e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bfb8c59eb7c00a833334fcaeadc439962b8e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2110d2de5a894f3088e1d8f20404876e2ef4b65e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOzDtCRBK7hj4Ov3rIwAAtTwIACFajtL8fUkHCf/qq4WPLDEb\n+qHaj5/2i+zP4gk98yqws+7UeVPXyM1o0OA3efLlF3C4xTlypJaBQMTD8RQ59Jn+\nWFIKZXR/gRYRoWHU3Js411xacHn8BaUvabzRCyKltNgg7Kxwg5rOjfRFpmlvWZGM\n03QZ6Fb4gW0CFCiqlfzO1/jocPQTVR538LXSWqzGa+j9OilhsuQLBlsgSpDt2uQY\nbM+MoGdU64/kTujPXa4giqJo4+d8CIImtAOwc+h/gdxlsjuw3oYCcISKhWP5SvF0\ndOsyT/oK0zM48Q1CeMdgBt1fkXeWISRszt3f8n/J8dRg7RdUqzpITL7cBkmBj4A=\n=iJfu\n-----END PGP SIGNATURE-----\n", "payload": "tree 96bfb8c59eb7c00a833334fcaeadc439962b8e0c\nparent 098e8b73570e2fc3405f66163ece1858193cd38a\nparent a85ee3ed9130de6b263de0b05e67b04e644f269e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664823533 +0200\ncommitter GitHub <noreply@github.com> 1664823533 +0200\n\nRollup merge of #99216 - duarten:master, r=joshtriplett\n\ndocs: be less harsh in wording for Vec::from_raw_parts\n\nIn particular, be clear that it is sound to specify memory not\noriginating from a previous `Vec` allocation. That is already suggested\nin other parts of the documentation about zero-alloc conversions to Box<[T]>.\n\nIncorporate a constraint from `slice::from_raw_parts` that was missing\nbut needs to be fulfilled, since a `Vec` can be converted into a slice.\n\nFixes https://github.com/rust-lang/rust/issues/98780.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2110d2de5a894f3088e1d8f20404876e2ef4b65e", "html_url": "https://github.com/rust-lang/rust/commit/2110d2de5a894f3088e1d8f20404876e2ef4b65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2110d2de5a894f3088e1d8f20404876e2ef4b65e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098e8b73570e2fc3405f66163ece1858193cd38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/098e8b73570e2fc3405f66163ece1858193cd38a", "html_url": "https://github.com/rust-lang/rust/commit/098e8b73570e2fc3405f66163ece1858193cd38a"}, {"sha": "a85ee3ed9130de6b263de0b05e67b04e644f269e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85ee3ed9130de6b263de0b05e67b04e644f269e", "html_url": "https://github.com/rust-lang/rust/commit/a85ee3ed9130de6b263de0b05e67b04e644f269e"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "bb496f046431e54de7d6b6b62dc6087398f90f3a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2110d2de5a894f3088e1d8f20404876e2ef4b65e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2110d2de5a894f3088e1d8f20404876e2ef4b65e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=2110d2de5a894f3088e1d8f20404876e2ef4b65e", "patch": "@@ -483,15 +483,13 @@ impl<T> Vec<T> {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n-    /// Creates a `Vec<T>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T>` directly from a pointer, a capacity, and a length.\n     ///\n     /// # Safety\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -500,6 +498,14 @@ impl<T> Vec<T> {\n     ///   to be the same size as the pointer was allocated with. (Because similar to\n     ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n+    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// These requirements are always upheld by any `ptr` that has been allocated\n+    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is normally **not** safe\n@@ -551,6 +557,32 @@ impl<T> Vec<T> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::{AllocError, Allocator, Global, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///\n+    ///     let vec = unsafe {\n+    ///         let mem = match Global.allocate(layout) {\n+    ///             Ok(mem) => mem.cast::<u32>().as_ptr(),\n+    ///             Err(AllocError) => return,\n+    ///         };\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts_in(mem, 1, 16, Global)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {\n@@ -641,21 +673,30 @@ impl<T, A: Allocator> Vec<T, A> {\n         Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }\n     }\n \n-    /// Creates a `Vec<T, A>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T, A>` directly from a pointer, a capacity, a length,\n+    /// and an allocator.\n     ///\n     /// # Safety\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n+    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n+    ///   to be the same size as the pointer was allocated with. (Because similar to\n+    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n-    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n+    /// * `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// These requirements are always upheld by any `ptr` that has been allocated\n+    /// via `Vec<T, A>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n@@ -673,6 +714,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples\n     ///\n@@ -711,6 +753,29 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// use std::alloc::{alloc, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///     let vec = unsafe {\n+    ///         let mem = alloc(layout).cast::<u32>();\n+    ///         if mem.is_null() {\n+    ///             return;\n+    ///         }\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts(mem, 1, 16)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {"}]}