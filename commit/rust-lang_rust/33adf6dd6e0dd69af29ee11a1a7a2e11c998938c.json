{"sha": "33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYWRmNmRkNmUwZGQ2OWFmMjllZTExYTFhN2EyZTExYzk5ODkzOGM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-26T09:10:16Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Implement .as_display_str() and .to_display_str()\n\nThese functions are for working with a string representation of the path\neven if it's not UTF-8 encoded. They replace invalid UTF-8 sequences\nwith the replacement char.", "tree": {"sha": "0c9f08d5b80d5a42944c9760996f680a26cff0d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9f08d5b80d5a42944c9760996f680a26cff0d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "html_url": "https://github.com/rust-lang/rust/commit/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dfe5088d85df13a172810d0df92c25dbcc37e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dfe5088d85df13a172810d0df92c25dbcc37e98", "html_url": "https://github.com/rust-lang/rust/commit/1dfe5088d85df13a172810d0df92c25dbcc37e98"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "5282eed40dba09ded5bfbae02c0828023c2aba4e", "filename": "src/libstd/path2/mod.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fmod.rs?ref=33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "patch": "@@ -16,7 +16,7 @@ use clone::Clone;\n use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n-use str::StrSlice;\n+use str::{OwnedStr, Str, StrSlice};\n use vec;\n use vec::{CopyableVector, OwnedCopyableVector, OwnedVector};\n use vec::{ImmutableEqVector, ImmutableVector};\n@@ -140,6 +140,51 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the path as a byte vector\n     fn as_vec<'a>(&'a self) -> &'a [u8];\n \n+    /// Provides the path as a string\n+    ///\n+    /// If the path is not UTF-8, invalid sequences will be replaced with the unicode\n+    /// replacement char. This involves allocation.\n+    #[inline]\n+    fn as_display_str<T>(&self, f: &fn(&str) -> T) -> T {\n+        match self.as_str() {\n+            Some(s) => f(s),\n+            None => {\n+                let s = self.to_display_str();\n+                f(s.as_slice())\n+            }\n+        }\n+    }\n+\n+    /// Returns the path as a string\n+    ///\n+    /// If the path is not UTF-8, invalid sequences will be replaced with the unicode\n+    /// replacement char. This involves allocation.\n+    ///\n+    /// This is similar to `as_display_str()` except it will always allocate a new ~str.\n+    fn to_display_str(&self) -> ~str {\n+        // FIXME (#9516): Don't decode utf-8 manually here once we have a good way to do it in str\n+        // This is a truly horrifically bad implementation, done as a functionality stopgap until\n+        // we have a proper utf-8 decoder. I don't really want to write one here.\n+        static REPLACEMENT_CHAR: char = '\\uFFFD';\n+\n+        let mut v = self.as_vec();\n+        let mut s = str::with_capacity(v.len());\n+        while !v.is_empty() {\n+            let w = str::utf8_char_width(v[0]);\n+            if w == 0u {\n+                s.push_char(REPLACEMENT_CHAR);\n+                v = v.slice_from(1);\n+            } else if v.len() < w || !str::is_utf8(v.slice_to(w)) {\n+                s.push_char(REPLACEMENT_CHAR);\n+                v = v.slice_from(1);\n+            } else {\n+                s.push_str(unsafe { ::cast::transmute(v.slice_to(w)) });\n+                v = v.slice_from(w);\n+            }\n+        }\n+        s\n+    }\n+\n     /// Returns the directory component of `self`, as a byte vector (with no trailing separator).\n     /// If `self` has no directory component, returns ['.'].\n     fn dirname<'a>(&'a self) -> &'a [u8];"}, {"sha": "11579ba09564ebe34f9c819744ab136865a90309", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "patch": "@@ -597,6 +597,32 @@ mod tests {\n         })\n     }\n \n+    #[test]\n+    fn test_display_str() {\n+        assert_eq!(Path::from_str(\"foo\").to_display_str(), ~\"foo\");\n+        assert_eq!(Path::from_vec(b!(\"foo\", 0x80)).to_display_str(), ~\"foo\\uFFFD\");\n+        assert_eq!(Path::from_vec(b!(\"foo\", 0xff, \"bar\")).to_display_str(), ~\"foo\\uFFFDbar\");\n+\n+        let mut called = false;\n+        do Path::from_str(\"foo\").as_display_str |s| {\n+            assert_eq!(s, \"foo\");\n+            called = true;\n+        };\n+        assert!(called);\n+        called = false;\n+        do Path::from_vec(b!(\"foo\", 0x80)).as_display_str |s| {\n+            assert_eq!(s, \"foo\\uFFFD\");\n+            called = true;\n+        };\n+        assert!(called);\n+        called = false;\n+        do Path::from_vec(b!(\"foo\", 0xff, \"bar\")).as_display_str |s| {\n+            assert_eq!(s, \"foo\\uFFFDbar\");\n+            called = true;\n+        };\n+        assert!(called);\n+    }\n+\n     #[test]\n     fn test_components() {\n         macro_rules! t("}, {"sha": "2545ba8ada2a5ea40f2cb995af9a8237332f959a", "filename": "src/libstd/path2/windows.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33adf6dd6e0dd69af29ee11a1a7a2e11c998938c/src%2Flibstd%2Fpath2%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fwindows.rs?ref=33adf6dd6e0dd69af29ee11a1a7a2e11c998938c", "patch": "@@ -349,6 +349,16 @@ impl GenericPath for Path {\n         self.repr.as_bytes()\n     }\n \n+    #[inline]\n+    fn as_display_str<T>(&self, f: &fn(&str) -> T) -> T {\n+        f(self.repr.as_slice())\n+    }\n+\n+    #[inline]\n+    fn to_display_str(&self) -> ~str {\n+        self.repr.clone()\n+    }\n+\n     #[inline]\n     fn dirname<'a>(&'a self) -> &'a [u8] {\n         self.dirname_str().unwrap().as_bytes()\n@@ -1339,6 +1349,18 @@ mod tests {\n         Path::from_vec(b!(\"hello\", 0x80, \".txt\"));\n     }\n \n+    #[test]\n+    fn test_display_str() {\n+        assert_eq!(Path::from_str(\"foo\").to_display_str(), ~\"foo\");\n+\n+        let mut called = false;\n+        do Path::from_str(\"foo\").as_display_str |s| {\n+            assert_eq!(s, \"foo\");\n+            called = true;\n+        };\n+        assert!(called);\n+    }\n+\n     #[test]\n     fn test_components() {\n         macro_rules! t("}]}