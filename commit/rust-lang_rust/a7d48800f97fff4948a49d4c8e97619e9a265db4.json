{"sha": "a7d48800f97fff4948a49d4c8e97619e9a265db4", "node_id": "C_kwDOAAsO6NoAKGE3ZDQ4ODAwZjk3ZmZmNDk0OGE0OWQ0YzhlOTc2MTllOWEyNjVkYjQ", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-05-16T16:50:05Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-05-16T16:50:36Z"}, "message": "Turn debugger_visualizers from feed- into regular query.", "tree": {"sha": "4ed236f462d3074a01e6b7431da05e899c279953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ed236f462d3074a01e6b7431da05e899c279953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d48800f97fff4948a49d4c8e97619e9a265db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d48800f97fff4948a49d4c8e97619e9a265db4", "html_url": "https://github.com/rust-lang/rust/commit/a7d48800f97fff4948a49d4c8e97619e9a265db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d48800f97fff4948a49d4c8e97619e9a265db4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f01893900cf01b48adcaa0146e139cc8083b399", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f01893900cf01b48adcaa0146e139cc8083b399", "html_url": "https://github.com/rust-lang/rust/commit/7f01893900cf01b48adcaa0146e139cc8083b399"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "211f5cb0a2a3cb4b3d13df45955f6520a1607424", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -58,7 +58,7 @@ use rustc_errors::{\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::{Idx, IndexSlice, IndexVec};\n@@ -435,6 +435,7 @@ pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     // Queries that borrow `resolver_for_lowering`.\n     tcx.ensure_with_value().output_filenames(());\n     tcx.ensure_with_value().early_lint_checks(());\n+    tcx.ensure_with_value().debugger_visualizers(LOCAL_CRATE);\n     let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);"}, {"sha": "d5642ec3e0e301c97c5c1abbf0d101e89de58770", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -572,12 +572,6 @@ fn resolver_for_lowering<'tcx>(\n     // Make sure we don't mutate the cstore from here on.\n     tcx.untracked().cstore.leak();\n \n-    {\n-        let debugger_visualizers = rustc_passes::debugger_visualizer::collect(tcx.sess, &krate);\n-        let feed = tcx.feed_local_crate();\n-        feed.debugger_visualizers(debugger_visualizers);\n-    }\n-\n     let ty::ResolverOutputs {\n         global_ctxt: untracked_resolutions,\n         ast_lowering: untracked_resolver_for_lowering,"}, {"sha": "276538c7ef211173a963d8d8072d9cd6d350a225", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -1165,6 +1165,11 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, _: LocalCrate) -> Svh {\n \n     source_file_names.sort_unstable();\n \n+    // We have to take care of debugger visualizers explicitly. The HIR (and\n+    // thus `hir_body_hash`) contains the #[debugger_visualizer] attributes but\n+    // these attributes only store the file path to the visualizer file, not\n+    // their content. Yet that content is exported into crate metadata, so any\n+    // changes to it need to be reflected in the crate hash.\n     let debugger_visualizers: Vec<_> = tcx\n         .debugger_visualizers(LOCAL_CRATE)\n         .iter()"}, {"sha": "a3877bff85f68a5bd9b5e406b226ad3f29958525", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -1790,13 +1790,18 @@ rustc_queries! {\n         desc { \"looking at the source for a crate\" }\n         separate_provide_extern\n     }\n+\n     /// Returns the debugger visualizers defined for this crate.\n+    /// NOTE: This query has to be marked `eval_always` because it reads data\n+    ///       directly from disk that is not tracked anywhere else. I.e. it\n+    ///       represents a genuine input to the query system.\n     query debugger_visualizers(_: CrateNum) -> &'tcx Vec<rustc_span::DebuggerVisualizerFile> {\n         arena_cache\n         desc { \"looking up the debugger visualizers for this crate\" }\n         separate_provide_extern\n-        feedable\n+        eval_always\n     }\n+\n     query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }"}, {"sha": "a55dad9ee437b66783c153915baf94213e008924", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -3,6 +3,10 @@\n use rustc_ast::Attribute;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n+use rustc_middle::{\n+    query::{LocalCrate, Providers},\n+    ty::TyCtxt,\n+};\n use rustc_session::Session;\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n@@ -12,7 +16,7 @@ impl DebuggerVisualizerCollector<'_> {\n     fn check_for_debugger_visualizer(&mut self, attr: &Attribute) {\n         if attr.has_name(sym::debugger_visualizer) {\n             let Some(hints) = attr.meta_item_list() else {\n-            self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n                 return;\n             };\n \n@@ -82,12 +86,18 @@ impl<'ast> rustc_ast::visit::Visitor<'ast> for DebuggerVisualizerCollector<'_> {\n }\n \n /// Traverses and collects the debugger visualizers for a specific crate.\n-pub fn collect(sess: &Session, krate: &rustc_ast::ast::Crate) -> Vec<DebuggerVisualizerFile> {\n-    // Initialize the collector.\n-    let mut visitor = DebuggerVisualizerCollector { sess, visualizers: Vec::new() };\n+fn debugger_visualizers(tcx: TyCtxt<'_>, _: LocalCrate) -> Vec<DebuggerVisualizerFile> {\n+    let resolver_and_krate = tcx.resolver_for_lowering(()).borrow();\n+    let krate = &*resolver_and_krate.1;\n+\n+    let mut visitor = DebuggerVisualizerCollector { sess: tcx.sess, visualizers: Vec::new() };\n     rustc_ast::visit::Visitor::visit_crate(&mut visitor, krate);\n \n     // Sort the visualizers so we always get a deterministic query result.\n     visitor.visualizers.sort_unstable();\n     visitor.visualizers\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    providers.debugger_visualizers = debugger_visualizers;\n+}"}, {"sha": "0da4b29464862e5127af6342b566512e6ec20766", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d48800f97fff4948a49d4c8e97619e9a265db4/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=a7d48800f97fff4948a49d4c8e97619e9a265db4", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::query::Providers;\n mod check_attr;\n mod check_const;\n pub mod dead;\n-pub mod debugger_visualizer;\n+mod debugger_visualizer;\n mod diagnostic_items;\n pub mod entry;\n mod errors;\n@@ -50,6 +50,7 @@ pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n     dead::provide(providers);\n+    debugger_visualizer::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);\n     lang_items::provide(providers);"}]}