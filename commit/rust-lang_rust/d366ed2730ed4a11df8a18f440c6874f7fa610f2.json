{"sha": "d366ed2730ed4a11df8a18f440c6874f7fa610f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjZlZDI3MzBlZDRhMTFkZjhhMThmNDQwYzY4NzRmN2ZhNjEwZjI=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-05T16:32:19Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-05T16:32:19Z"}, "message": "abort() now takes a msg parameter", "tree": {"sha": "adf66cfbc55c2be3c9550905f6b2c37929965a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf66cfbc55c2be3c9550905f6b2c37929965a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d366ed2730ed4a11df8a18f440c6874f7fa610f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d366ed2730ed4a11df8a18f440c6874f7fa610f2", "html_url": "https://github.com/rust-lang/rust/commit/d366ed2730ed4a11df8a18f440c6874f7fa610f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d366ed2730ed4a11df8a18f440c6874f7fa610f2/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9fd2a5d45a0ea0c49a3a78f8f1c8e091b9c604", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9fd2a5d45a0ea0c49a3a78f8f1c8e091b9c604", "html_url": "https://github.com/rust-lang/rust/commit/4f9fd2a5d45a0ea0c49a3a78f8f1c8e091b9c604"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "345a3d7e79bc2ec5039abbad13e62a4e1435c33f", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=d366ed2730ed4a11df8a18f440c6874f7fa610f2", "patch": "@@ -20,6 +20,7 @@ pub enum ConstEvalErrKind {\n     ModifiedGlobal,\n     AssertFailure(AssertKind<ConstInt>),\n     Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n+    Abort(String),\n }\n \n // The errors become `MachineStop` with plain strings when being raised.\n@@ -46,6 +47,7 @@ impl fmt::Display for ConstEvalErrKind {\n             Panic { msg, line, col, file } => {\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col)\n             }\n+            Abort(ref msg) => write!(f, \"{}\", msg)\n         }\n     }\n }"}, {"sha": "18abf4291b1e2c5231bd226de089d63fd1ab8ce3", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=d366ed2730ed4a11df8a18f440c6874f7fa610f2", "patch": "@@ -126,7 +126,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n                 sym::unreachable => throw_ub!(Unreachable),\n-                sym::abort => M::abort(self)?,\n+                sym::abort => M::abort(self, \"aborted execution\".to_owned())?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n             },\n@@ -412,7 +412,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let layout = self.layout_of(ty)?;\n \n                 if layout.abi.is_uninhabited() {\n-                    throw_ub_format!(\"attempted to instantiate uninhabited type `{}`\", ty);\n+                    M::abort(self, format!(\"attempted to instantiate uninhabited type `{}`\", ty))?;\n                 }\n             }\n             sym::simd_insert => {"}, {"sha": "1c13cdbc6e67d4afc185a9f7d3bb6189149af602", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=d366ed2730ed4a11df8a18f440c6874f7fa610f2", "patch": "@@ -176,8 +176,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx>;\n \n     /// Called to evaluate `Abort` MIR terminator.\n-    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n-        throw_unsup_format!(\"aborting execution is not supported\")\n+    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>, msg: String) -> InterpResult<'tcx, !> {\n+        use crate::const_eval::ConstEvalErrKind;\n+\n+        Err(ConstEvalErrKind::Abort(msg).into())\n     }\n \n     /// Called for all binary operations where the LHS has pointer type."}, {"sha": "18079488c8913b2f2f19e38c50cfc0eaf7756fdb", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366ed2730ed4a11df8a18f440c6874f7fa610f2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=d366ed2730ed4a11df8a18f440c6874f7fa610f2", "patch": "@@ -110,7 +110,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Abort => {\n-                M::abort(self)?;\n+                M::abort(self, \"aborted execution\".to_owned())?;\n             }\n \n             // When we encounter Resume, we've finished unwinding"}]}