{"sha": "69cea1dc92695d317145fa057529f8c679e3cfc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Y2VhMWRjOTI2OTVkMzE3MTQ1ZmEwNTc1MjlmOGM2NzllM2NmYzA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T20:57:27Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T20:57:27Z"}, "message": "Only check futex pointer in futex_wait and not in futex_wake.\n\nfutex_wake doesn't access the futex itself, so should accept pointers to\nmemory that's no longer there.", "tree": {"sha": "690bb44dfeb4a14e7e7eed13edd4de7ddda0f9b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690bb44dfeb4a14e7e7eed13edd4de7ddda0f9b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69cea1dc92695d317145fa057529f8c679e3cfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69cea1dc92695d317145fa057529f8c679e3cfc0", "html_url": "https://github.com/rust-lang/rust/commit/69cea1dc92695d317145fa057529f8c679e3cfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69cea1dc92695d317145fa057529f8c679e3cfc0/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2f36eb6b6f35f94bc006c663d1622ebd71ff87", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2f36eb6b6f35f94bc006c663d1622ebd71ff87", "html_url": "https://github.com/rust-lang/rust/commit/6c2f36eb6b6f35f94bc006c663d1622ebd71ff87"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "d92fc0441c49d9b7ae2e3a7327a72894ca800687", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69cea1dc92695d317145fa057529f8c679e3cfc0/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cea1dc92695d317145fa057529f8c679e3cfc0/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=69cea1dc92695d317145fa057529f8c679e3cfc0", "patch": "@@ -10,14 +10,12 @@ pub fn futex<'tcx>(\n     if args.len() < 4 {\n         throw_ub_format!(\"incorrect number of arguments for futex syscall: got {}, expected at least 4\", args.len());\n     }\n-    let addr = this.read_scalar(args[1])?.check_init()?;\n+    let addr = args[1];\n+    let addr_scalar = this.read_scalar(addr)?.check_init()?;\n+    let futex_ptr = this.force_ptr(addr_scalar)?.erase_tag();\n     let op = this.read_scalar(args[2])?.to_i32()?;\n     let val = this.read_scalar(args[3])?.to_i32()?;\n \n-    this.memory.check_ptr_access(addr, Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n-\n-    let addr = addr.assert_ptr().erase_tag();\n-\n     let thread = this.get_active_thread();\n \n     let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n@@ -33,10 +31,11 @@ pub fn futex<'tcx>(\n             if !this.is_null(timeout)? {\n                 throw_ub_format!(\"miri does not support timeouts for futex operations\");\n             }\n+            this.memory.check_ptr_access(addr_scalar, Size::from_bytes(4), Align::from_bytes(4).unwrap())?;\n             let futex_val = this.read_scalar_at_offset(args[1], 0, this.machine.layouts.i32)?.to_i32()?;\n             if val == futex_val {\n                 this.block_thread(thread);\n-                this.futex_wait(addr, thread);\n+                this.futex_wait(futex_ptr, thread);\n             } else {\n                 let eagain = this.eval_libc(\"EAGAIN\")?;\n                 this.set_last_error(eagain)?;\n@@ -45,7 +44,7 @@ pub fn futex<'tcx>(\n         op if op == futex_wake => {\n             let mut n = 0;\n             for _ in 0..val {\n-                if let Some(thread) = this.futex_wake(addr) {\n+                if let Some(thread) = this.futex_wake(futex_ptr) {\n                     this.unblock_thread(thread);\n                     n += 1;\n                 } else {"}]}