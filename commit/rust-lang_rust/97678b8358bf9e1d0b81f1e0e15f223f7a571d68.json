{"sha": "97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Njc4YjgzNThiZjllMWQwYjgxZjFlMGUxNWYyMjNmN2E1NzFkNjg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-01T10:53:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-01T10:53:39Z"}, "message": "Rollup merge of #78621 - solson:inline, r=m-ou-se\n\nInline Default::default() for atomics\n\nFunctions like `AtomicUsize::default()` are not cross-crate inlineable before this PR ([see assembly output here](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=e353321766418f759c69fb141d3732f8)), which can lead to unexpected performance issues when initializing a large array using this function, e.g. as seen [here](https://github.com/spacejam/sled/blob/d513996a85875be8c813fd0e30a548b89682289a/src/histogram.rs#L53) which should turn into a simple loop writing zeroes but doesn't.\n\nr? @m-ou-se", "tree": {"sha": "f5c95d2f8aeaddb2a2c93050ccb37af29da8577b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c95d2f8aeaddb2a2c93050ccb37af29da8577b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfnpOzCRBK7hj4Ov3rIwAAdHIIAK3pTqBLffmnT/1py8uvwpBx\nT/eNpuZzyu5KjuytMAtCis2U5PC5tZm2XgTp/iBQc1LECsN97LMtgZd6jg9KuN0W\nGHMzYnO11KbkCL+x1aOqaQJxeolN9ObqqkEqG77WrJfUIw6yD5jbbLU/Vg/JPef2\nzSFo4R26X+HJrB+EJg2FD1wqrBPs2Q0/oNkL7lDVWeNlpjD32blQJmoDXR2ymm9V\nmWMuWy5sI7h4oUcktnHrhPDKeAjsP8PBXLtCu+J4xcpIXuzuqovgS5yjLt6mFMd0\nXWcDaETixE9n9/BII8yeUoe/iCRPPLeuxaXYkWOsYZAArY4Dg31CUZ045T9xsD8=\n=gRf9\n-----END PGP SIGNATURE-----\n", "payload": "tree f5c95d2f8aeaddb2a2c93050ccb37af29da8577b\nparent 540d4743ccc7597f68d9832c232e212167ae2fac\nparent e5b1f69d631d6637e51f3715e8276f2c57676361\nauthor Mara Bos <m-ou.se@m-ou.se> 1604228019 +0100\ncommitter GitHub <noreply@github.com> 1604228019 +0100\n\nRollup merge of #78621 - solson:inline, r=m-ou-se\n\nInline Default::default() for atomics\n\nFunctions like `AtomicUsize::default()` are not cross-crate inlineable before this PR ([see assembly output here](https://play.rust-lang.org/?version=stable&mode=release&edition=2018&gist=e353321766418f759c69fb141d3732f8)), which can lead to unexpected performance issues when initializing a large array using this function, e.g. as seen [here](https://github.com/spacejam/sled/blob/d513996a85875be8c813fd0e30a548b89682289a/src/histogram.rs#L53) which should turn into a simple loop writing zeroes but doesn't.\n\nr? @m-ou-se\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "html_url": "https://github.com/rust-lang/rust/commit/97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97678b8358bf9e1d0b81f1e0e15f223f7a571d68/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540d4743ccc7597f68d9832c232e212167ae2fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/540d4743ccc7597f68d9832c232e212167ae2fac", "html_url": "https://github.com/rust-lang/rust/commit/540d4743ccc7597f68d9832c232e212167ae2fac"}, {"sha": "e5b1f69d631d6637e51f3715e8276f2c57676361", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b1f69d631d6637e51f3715e8276f2c57676361", "html_url": "https://github.com/rust-lang/rust/commit/e5b1f69d631d6637e51f3715e8276f2c57676361"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "a3d93d7074b69e00df0fea87935c5d3efb908731", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97678b8358bf9e1d0b81f1e0e15f223f7a571d68/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97678b8358bf9e1d0b81f1e0e15f223f7a571d68/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "patch": "@@ -155,6 +155,7 @@ pub struct AtomicBool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     /// Creates an `AtomicBool` initialized to `false`.\n+    #[inline]\n     fn default() -> Self {\n         Self::new(false)\n     }\n@@ -1212,6 +1213,7 @@ macro_rules! atomic_int {\n \n         #[$stable]\n         impl Default for $atomic_type {\n+            #[inline]\n             fn default() -> Self {\n                 Self::new(Default::default())\n             }"}]}