{"sha": "afaa40646542ca1e8fadb7e1d34197237e0fcd19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYWE0MDY0NjU0MmNhMWU4ZmFkYjdlMWQzNDE5NzIzN2UwZmNkMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-04T20:21:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-04T20:21:01Z"}, "message": "Auto merge of #51803 - lucasem:rustdoc-code-hash-escape, r=GuillaumeGomez\n\nrustdoc codeblock hash escape\n\nSo that docstring text such as the following (in a code block) can be created ergonomically:\n\n```rust\nlet s = \"\n    foo\n    # bar\n    baz\n\";\n```\n\nSuch code in a docstring hide the <code>&nbsp;&nbsp;&nbsp;&nbsp;# bar</code> line.\n\nPreviously, using two consecutive hashes <code>&nbsp;&nbsp;&nbsp;&nbsp;## bar</code> would turn the line into _shown_ `# bar`, losing the leading whitespace. A line of code like <code>&nbsp;&nbsp;&nbsp;&nbsp;# bar</code> (such as in the example above) **could not be represented** in the docstring text.\n\nThis commit makes the two consecutive hashes not also trim the leading whitespace \u2014\u00a0the two hashes simply **escape** into a single hash and do not hide the line, leaving the rest of that line unaffected. The new docstring text to achieve the above code block is:\n\n```rust\n/// ```\n/// let s = \"\n///     foo\n///     ## bar\n///     baz\n/// \";\n/// ```\n```", "tree": {"sha": "54ba3fcffed75bbca891eb65a004d1d843208568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ba3fcffed75bbca891eb65a004d1d843208568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afaa40646542ca1e8fadb7e1d34197237e0fcd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa40646542ca1e8fadb7e1d34197237e0fcd19", "html_url": "https://github.com/rust-lang/rust/commit/afaa40646542ca1e8fadb7e1d34197237e0fcd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afaa40646542ca1e8fadb7e1d34197237e0fcd19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af9132a022ebe4111395139d1a4e45e285d299a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af9132a022ebe4111395139d1a4e45e285d299a", "html_url": "https://github.com/rust-lang/rust/commit/4af9132a022ebe4111395139d1a4e45e285d299a"}, {"sha": "ff2ff2b2b88f5948e1326809e70fbdf4db167097", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2ff2b2b88f5948e1326809e70fbdf4db167097", "html_url": "https://github.com/rust-lang/rust/commit/ff2ff2b2b88f5948e1326809e70fbdf4db167097"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "e4af122d0cb98d55938994581144f0803faa0f33", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afaa40646542ca1e8fadb7e1d34197237e0fcd19/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/afaa40646542ca1e8fadb7e1d34197237e0fcd19/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=afaa40646542ca1e8fadb7e1d34197237e0fcd19", "patch": "@@ -170,6 +170,23 @@ By repeating all parts of the example, you can ensure that your example still\n compiles, while only showing the parts that are relevant to that part of your\n explanation.\n \n+The `#`-hiding of lines can be prevented by using two consecutive hashes\n+`##`. This only needs to be done with with the first `#` which would've\n+otherwise caused hiding. If we have a string literal like the following,\n+which has a line that starts with a `#`:\n+\n+```rust\n+let s = \"foo\n+## bar # baz\";\n+```\n+\n+We can document it by escaping the initial `#`:\n+\n+```text\n+/// let s = \"foo\n+/// ## bar # baz\";\n+```\n+\n \n ## Using `?` in doc tests\n "}, {"sha": "c77a720b16ba503657cfd6e07eb8d5a3841fc0fc", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/afaa40646542ca1e8fadb7e1d34197237e0fcd19/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa40646542ca1e8fadb7e1d34197237e0fcd19/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=afaa40646542ca1e8fadb7e1d34197237e0fcd19", "patch": "@@ -64,21 +64,21 @@ pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n /// All lines are used in documentation tests.\n enum Line<'a> {\n     Hidden(&'a str),\n-    Shown(&'a str),\n+    Shown(Cow<'a, str>),\n }\n \n impl<'a> Line<'a> {\n-    fn for_html(self) -> Option<&'a str> {\n+    fn for_html(self) -> Option<Cow<'a, str>> {\n         match self {\n             Line::Shown(l) => Some(l),\n             Line::Hidden(_) => None,\n         }\n     }\n \n-    fn for_code(self) -> &'a str {\n+    fn for_code(self) -> Cow<'a, str> {\n         match self {\n-            Line::Shown(l) |\n-            Line::Hidden(l) => l,\n+            Line::Shown(l) => l,\n+            Line::Hidden(l) => Cow::Borrowed(l),\n         }\n     }\n }\n@@ -91,15 +91,15 @@ impl<'a> Line<'a> {\n fn map_line(s: &str) -> Line {\n     let trimmed = s.trim();\n     if trimmed.starts_with(\"##\") {\n-        Line::Shown(&trimmed[1..])\n+        Line::Shown(Cow::Owned(s.replacen(\"##\", \"#\", 1)))\n     } else if trimmed.starts_with(\"# \") {\n         // # text\n         Line::Hidden(&trimmed[2..])\n     } else if trimmed == \"#\" {\n         // We cannot handle '#text' because it could be #[attr].\n         Line::Hidden(\"\")\n     } else {\n-        Line::Shown(s)\n+        Line::Shown(Cow::Borrowed(s))\n     }\n }\n \n@@ -168,7 +168,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n             }\n         }\n         let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n-        let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n+        let text = lines.collect::<Vec<Cow<str>>>().join(\"\\n\");\n         PLAYGROUND.with(|play| {\n             // insert newline to clearly separate it from the\n             // previous block so we can shorten the html output\n@@ -179,7 +179,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 }\n                 let test = origtext.lines()\n                     .map(|l| map_line(l).for_code())\n-                    .collect::<Vec<&str>>().join(\"\\n\");\n+                    .collect::<Vec<Cow<str>>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n                 let (test, _) = test::make_test(&test, krate, false,\n                                            &Default::default());\n@@ -477,7 +477,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                 }\n                 if let Some(offset) = offset {\n                     let lines = test_s.lines().map(|l| map_line(l).for_code());\n-                    let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n+                    let text = lines.collect::<Vec<Cow<str>>>().join(\"\\n\");\n                     nb_lines += doc[prev_offset..offset].lines().count();\n                     let line = tests.get_line() + (nb_lines - 1);\n                     let filename = tests.get_filename();"}]}