{"sha": "ae92dfac5019643b8fb310de9e92f0889b0106ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTJkZmFjNTAxOTY0M2I4ZmIzMTBkZTllOTJmMDg4OWIwMTA2Y2E=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-11T20:54:56Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-15T16:47:53Z"}, "message": "[improper_ctypes] Stop complaining about repr(usize) and repr(isize) enums\n\nThis dates back to at least #26583. At the time, usize and isize were considered ffi-unsafe to nudge people away from them, but this changed in the aforementioned PR, making it inconsistent to complain about it in enum discriminants. In fact, repr(usize) is probably the best way to interface with `enum Foo : size_t { ... }`.", "tree": {"sha": "288a9e5df727c8786ca030eaa4a4e64178844d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288a9e5df727c8786ca030eaa4a4e64178844d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae92dfac5019643b8fb310de9e92f0889b0106ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae92dfac5019643b8fb310de9e92f0889b0106ca", "html_url": "https://github.com/rust-lang/rust/commit/ae92dfac5019643b8fb310de9e92f0889b0106ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae92dfac5019643b8fb310de9e92f0889b0106ca/comments", "author": null, "committer": null, "parents": [{"sha": "7ac5e96f4af8efe4a7f09a873d81006329cb5133", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac5e96f4af8efe4a7f09a873d81006329cb5133", "html_url": "https://github.com/rust-lang/rust/commit/7ac5e96f4af8efe4a7f09a873d81006329cb5133"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "f17fa9c7ca1d26ec5e6c8e90235d05877a7286a8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ae92dfac5019643b8fb310de9e92f0889b0106ca/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae92dfac5019643b8fb310de9e92f0889b0106ca/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ae92dfac5019643b8fb310de9e92f0889b0106ca", "patch": "@@ -26,7 +26,6 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::attr;\n use syntax_pos::Span;\n use syntax::codemap;\n \n@@ -402,17 +401,6 @@ fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     false\n }\n \n-fn is_ffi_safe(ty: attr::IntType) -> bool {\n-    match ty {\n-        attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) |\n-        attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) |\n-        attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) |\n-        attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) |\n-        attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => true,\n-        attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => false\n-    }\n-}\n-\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n@@ -546,23 +534,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             }\n                         }\n \n-                        if let Some(int_ty) = def.repr.int {\n-                            if !is_ffi_safe(int_ty) {\n-                                // FIXME: This shouldn't be reachable: we should check\n-                                // this earlier.\n-                                return FfiUnsafe(FfiError {\n-                                    message: \"enum has unexpected #[repr(...)] attribute\",\n-                                    help: None,\n-                                });\n-                            }\n-\n-                            // Enum with an explicitly sized discriminant; either\n-                            // a C-style enum or a discriminated union.\n-\n-                            // The layout of enum variants is implicitly repr(C).\n-                            // FIXME: Is that correct?\n-                        }\n-\n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {"}, {"sha": "ce6afe1d219eaee4556e78edd02f1dc53c8f3b4a", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae92dfac5019643b8fb310de9e92f0889b0106ca/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae92dfac5019643b8fb310de9e92f0889b0106ca/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=ae92dfac5019643b8fb310de9e92f0889b0106ca", "patch": "@@ -16,11 +16,23 @@ enum U { A }\n enum B { C, D }\n enum T { E, F, G }\n \n+#[repr(C)]\n+enum ReprC { A, B, C }\n+\n+#[repr(u8)]\n+enum U8 { A, B, C }\n+\n+#[repr(isize)]\n+enum Isize { A, B, C }\n+\n extern {\n    fn zf(x: Z);\n    fn uf(x: U); //~ ERROR found enum without foreign-function-safe\n    fn bf(x: B); //~ ERROR found enum without foreign-function-safe\n    fn tf(x: T); //~ ERROR found enum without foreign-function-safe\n+   fn reprc(x: ReprC);\n+   fn u8(x: U8);\n+   fn isize(x: Isize);\n }\n \n pub fn main() { }"}]}