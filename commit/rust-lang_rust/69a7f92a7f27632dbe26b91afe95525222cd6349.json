{"sha": "69a7f92a7f27632dbe26b91afe95525222cd6349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTdmOTJhN2YyNzYzMmRiZTI2YjkxYWZlOTU1MjUyMjJjZDYzNDk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-15T12:46:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T12:46:21Z"}, "message": "Rollup merge of #36454 - bluss:slice-primitive-index, r=alexcrichton\n\nUse primitive indexing in slice's Index/IndexMut\n\n[T]'s Index implementation is normally not used for indexing, instead\nthe compiler supplied indexing is used.\n\nUse the compiler supplied version in Index/IndexMut.\n\nThis removes an inconsistency:\n\nCompiler supplied bound check failures look like this:\n\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n\nIf you convince Rust to use the Index impl for slices, bounds check\nfailure looks like this instead:\n\nthread 'main' panicked at 'assertion failed: index < self.len()'\n\nThe latter is used if you for example use Index generically:\n\n```rust\nuse std::ops::Index;\nfn foo<T: ?Sized>(x: &T) where T: Index<usize> { &x[4]; }\n\nfoo(&[1, 2, 3][..])\n```", "tree": {"sha": "08b34e5fb7b9146034bb6cf054f08524a450a79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b34e5fb7b9146034bb6cf054f08524a450a79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a7f92a7f27632dbe26b91afe95525222cd6349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a7f92a7f27632dbe26b91afe95525222cd6349", "html_url": "https://github.com/rust-lang/rust/commit/69a7f92a7f27632dbe26b91afe95525222cd6349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a7f92a7f27632dbe26b91afe95525222cd6349/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab9238a1ebc26143edb8a0884de5e82463cd459", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab9238a1ebc26143edb8a0884de5e82463cd459", "html_url": "https://github.com/rust-lang/rust/commit/bab9238a1ebc26143edb8a0884de5e82463cd459"}, {"sha": "a4ee9c6e96025fa2b5eb254e4ccdd4c6910f5f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ee9c6e96025fa2b5eb254e4ccdd4c6910f5f60", "html_url": "https://github.com/rust-lang/rust/commit/a4ee9c6e96025fa2b5eb254e4ccdd4c6910f5f60"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "d1df56905df2401cdb3d6d48923dc404f1fb59d4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69a7f92a7f27632dbe26b91afe95525222cd6349/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a7f92a7f27632dbe26b91afe95525222cd6349/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=69a7f92a7f27632dbe26b91afe95525222cd6349", "patch": "@@ -520,8 +520,8 @@ impl<T> ops::Index<usize> for [T] {\n     type Output = T;\n \n     fn index(&self, index: usize) -> &T {\n-        assert!(index < self.len());\n-        unsafe { self.get_unchecked(index) }\n+        // NB built-in indexing\n+        &(*self)[index]\n     }\n }\n \n@@ -530,8 +530,8 @@ impl<T> ops::Index<usize> for [T] {\n impl<T> ops::IndexMut<usize> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: usize) -> &mut T {\n-        assert!(index < self.len());\n-        unsafe { self.get_unchecked_mut(index) }\n+        // NB built-in indexing\n+        &mut (*self)[index]\n     }\n }\n "}, {"sha": "3d1cbb446e848da4089af0eee941ee3b01c13ae4", "filename": "src/test/run-fail/bounds-check-no-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69a7f92a7f27632dbe26b91afe95525222cd6349/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a7f92a7f27632dbe26b91afe95525222cd6349/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs?ref=69a7f92a7f27632dbe26b91afe95525222cd6349", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:assertion failed: index < self.len()\n+// error-pattern:index out of bounds\n \n use std::usize;\n use std::mem::size_of;"}]}