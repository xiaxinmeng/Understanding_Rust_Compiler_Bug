{"sha": "83e80a74436179588703db2d597e80f57e42efbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTgwYTc0NDM2MTc5NTg4NzAzZGIyZDU5N2U4MGY1N2U0MmVmYmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-01T14:03:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:12Z"}, "message": "Use Builder instead of CodegenCx for OperandRef and LocalRef", "tree": {"sha": "a99377db3900fe97454377daf4a455e2a96fc75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99377db3900fe97454377daf4a455e2a96fc75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e80a74436179588703db2d597e80f57e42efbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e80a74436179588703db2d597e80f57e42efbe", "html_url": "https://github.com/rust-lang/rust/commit/83e80a74436179588703db2d597e80f57e42efbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e80a74436179588703db2d597e80f57e42efbe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "html_url": "https://github.com/rust-lang/rust/commit/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "d0a861171c17caef1d275a4a9e0202484b36ed76", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=83e80a74436179588703db2d597e80f57e42efbe", "patch": "@@ -616,7 +616,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         assert_eq!(place.llextra.is_some(), place.layout.is_unsized());\n \n         if place.layout.is_zst() {\n-            return OperandRef::new_zst(self.cx(), place.layout);\n+            return OperandRef::new_zst(self, place.layout);\n         }\n \n         fn scalar_load_metadata<'a, 'll, 'tcx>("}, {"sha": "5e2144751c1251b6ae9d5cb8936e9ebeffbe86b0", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=83e80a74436179588703db2d597e80f57e42efbe", "patch": "@@ -178,16 +178,16 @@ enum LocalRef<'tcx, V> {\n     Operand(Option<OperandRef<'tcx, V>>),\n }\n \n-impl<'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n-    fn new_operand<Cx: CodegenMethods<'tcx, Value = V>>(\n-        cx: &Cx,\n+impl<'a, 'tcx: 'a, V: CodegenObject> LocalRef<'tcx, V> {\n+    fn new_operand<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n+        bx: &mut Bx,\n         layout: TyLayout<'tcx>,\n     ) -> LocalRef<'tcx, V> {\n         if layout.is_zst() {\n             // Zero-size temporaries aren't always initialized, which\n             // doesn't matter because they don't contain data, but\n             // we need something in the operand.\n-            LocalRef::Operand(Some(OperandRef::new_zst(cx, layout)))\n+            LocalRef::Operand(Some(OperandRef::new_zst(bx, layout)))\n         } else {\n             LocalRef::Operand(None)\n         }\n@@ -275,7 +275,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n                 if !memory_locals.contains(local) && !dbg {\n                     debug!(\"alloc: {:?} ({}) -> operand\", local, name);\n-                    return LocalRef::new_operand(bx.cx(), layout);\n+                    return LocalRef::new_operand(&mut bx, layout);\n                 }\n \n                 debug!(\"alloc: {:?} ({}) -> place\", local, name);\n@@ -320,7 +320,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                     // alloca in advance. Instead we wait until we see the\n                     // definition and update the operand there.\n                     debug!(\"alloc: {:?} -> operand\", local);\n-                    LocalRef::new_operand(bx.cx(), layout)\n+                    LocalRef::new_operand(&mut bx, layout)\n                 }\n             }\n         };\n@@ -529,7 +529,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             let local = |op| LocalRef::Operand(Some(op));\n             match arg.mode {\n                 PassMode::Ignore(IgnoreMode::Zst) => {\n-                    return local(OperandRef::new_zst(bx.cx(), arg.layout));\n+                    return local(OperandRef::new_zst(bx, arg.layout));\n                 }\n                 PassMode::Ignore(IgnoreMode::CVarArgs) => {}\n                 PassMode::Direct(_) => {"}, {"sha": "c2b1021f816a60a055cca81e72a74cd57317cd4f", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=83e80a74436179588703db2d597e80f57e42efbe", "patch": "@@ -54,13 +54,13 @@ impl<V: CodegenObject> fmt::Debug for OperandRef<'tcx, V> {\n }\n \n impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n-    pub fn new_zst<Cx: CodegenMethods<'tcx, Value = V>>(\n-        cx: &Cx,\n+    pub fn new_zst<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n+        bx: &mut Bx,\n         layout: TyLayout<'tcx>\n     ) -> OperandRef<'tcx, V> {\n         assert!(layout.is_zst());\n         OperandRef {\n-            val: OperandValue::Immediate(cx.const_undef(cx.immediate_backend_type(layout))),\n+            val: OperandValue::Immediate(bx.const_undef(bx.immediate_backend_type(layout))),\n             layout\n         }\n     }\n@@ -69,10 +69,10 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n         bx: &mut Bx,\n         val: ty::Const<'tcx>\n     ) -> Result<Self, ErrorHandled> {\n-        let layout = bx.cx().layout_of(val.ty);\n+        let layout = bx.layout_of(val.ty);\n \n         if layout.is_zst() {\n-            return Ok(OperandRef::new_zst(bx.cx(), layout));\n+            return Ok(OperandRef::new_zst(bx, layout));\n         }\n \n         let val = match val.val {\n@@ -84,10 +84,10 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n                     layout::Abi::Scalar(ref x) => x,\n                     _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout)\n                 };\n-                let llval = bx.cx().scalar_to_backend(\n+                let llval = bx.scalar_to_backend(\n                     x,\n                     scalar,\n-                    bx.cx().immediate_backend_type(layout),\n+                    bx.immediate_backend_type(layout),\n                 );\n                 OperandValue::Immediate(llval)\n             },\n@@ -96,16 +96,16 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n                     layout::Abi::ScalarPair(ref a, _) => a,\n                     _ => bug!(\"from_const: invalid ScalarPair layout: {:#?}\", layout)\n                 };\n-                let a_llval = bx.cx().scalar_to_backend(\n+                let a_llval = bx.scalar_to_backend(\n                     a,\n                     a_scalar,\n-                    bx.cx().scalar_pair_element_backend_type(layout, 0, true),\n+                    bx.scalar_pair_element_backend_type(layout, 0, true),\n                 );\n-                let b_llval = bx.cx().const_usize(b);\n+                let b_llval = bx.const_usize(b);\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(ptr, alloc) => {\n-                return Ok(bx.load_operand(bx.cx().from_const_alloc(layout, alloc, ptr.offset)));\n+                return Ok(bx.load_operand(bx.from_const_alloc(layout, alloc, ptr.offset)));\n             },\n         };\n \n@@ -124,7 +124,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n         }\n     }\n \n-    pub fn deref<Cx: CodegenMethods<'tcx, Value = V>>(\n+    pub fn deref<Cx: LayoutTypeMethods<'tcx>>(\n         self,\n         cx: &Cx\n     ) -> PlaceRef<'tcx, V> {\n@@ -199,7 +199,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n         let mut val = match (self.val, &self.layout.abi) {\n             // If the field is ZST, it has no data.\n             _ if field.is_zst() => {\n-                return OperandRef::new_zst(bx.cx(), field);\n+                return OperandRef::new_zst(bx, field);\n             }\n \n             // Newtype of a scalar, scalar pair or vector.\n@@ -409,7 +409,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // checks in `codegen_consume` and `extract_field`.\n                         let elem = o.layout.field(bx.cx(), 0);\n                         if elem.is_zst() {\n-                            return Some(OperandRef::new_zst(bx.cx(), elem));\n+                            return Some(OperandRef::new_zst(bx, elem));\n                         }\n                     }\n                     _ => {}\n@@ -432,7 +432,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // ZSTs don't require any actual memory access.\n         if layout.is_zst() {\n-            return OperandRef::new_zst(bx.cx(), layout);\n+            return OperandRef::new_zst(bx, layout);\n         }\n \n         if let Some(o) = self.maybe_codegen_consume_direct(bx, place) {"}, {"sha": "c20d3f44bc5287d51b0032ac28f8a4e8043c9679", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e80a74436179588703db2d597e80f57e42efbe/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=83e80a74436179588703db2d597e80f57e42efbe", "patch": "@@ -523,8 +523,11 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // According to `rvalue_creates_operand`, only ZST\n                 // aggregate rvalues are allowed to be operands.\n                 let ty = rvalue.ty(self.mir, self.cx.tcx());\n-                (bx, OperandRef::new_zst(self.cx,\n-                    self.cx.layout_of(self.monomorphize(&ty))))\n+                let operand = OperandRef::new_zst(\n+                    &mut bx,\n+                    self.cx.layout_of(self.monomorphize(&ty)),\n+                );\n+                (bx, operand)\n             }\n         }\n     }"}]}