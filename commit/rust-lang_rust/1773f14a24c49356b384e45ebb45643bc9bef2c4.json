{"sha": "1773f14a24c49356b384e45ebb45643bc9bef2c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NzNmMTRhMjRjNDkzNTZiMzg0ZTQ1ZWJiNDU2NDNiYzliZWYyYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-07T01:16:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-07T01:16:08Z"}, "message": "Auto merge of #85014 - Dylan-DPC:rollup-jzpbkdu, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #84409 (Ensure TLS destructors run before thread joins in SGX)\n - #84500 (Add --run flag to compiletest)\n - #84728 (Add test for suggestion to borrow unsized function parameters)\n - #84734 (Add `needs-unwind` and beginning of support for testing `panic=abort` std to compiletest)\n - #84755 (Allow using `core::` in intra-doc links within core itself)\n - #84871 (Disallows `#![feature(no_coverage)]` on stable and beta (using standard crate-level gating))\n - #84872 (Wire up tidy dependency checks for cg_clif)\n - #84896 (Handle incorrect placement of parentheses in trait bounds more gracefully)\n - #84905 (CTFE engine: rename copy \u2192 copy_intrinsic, move to intrinsics.rs)\n - #84953 (Remove unneeded call to with_default_session_globals in rustdoc highlight)\n - #84987 (small nits)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e6ad409e4410a72f43101974b5a824e15fba28a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ad409e4410a72f43101974b5a824e15fba28a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1773f14a24c49356b384e45ebb45643bc9bef2c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1773f14a24c49356b384e45ebb45643bc9bef2c4", "html_url": "https://github.com/rust-lang/rust/commit/1773f14a24c49356b384e45ebb45643bc9bef2c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1773f14a24c49356b384e45ebb45643bc9bef2c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777bb2f6129e71a88ba030251eb370ef12fe28af", "url": "https://api.github.com/repos/rust-lang/rust/commits/777bb2f6129e71a88ba030251eb370ef12fe28af", "html_url": "https://github.com/rust-lang/rust/commit/777bb2f6129e71a88ba030251eb370ef12fe28af"}, {"sha": "01e9d09d3bbb35a1fbb0a2a353cfcf90a4feb050", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e9d09d3bbb35a1fbb0a2a353cfcf90a4feb050", "html_url": "https://github.com/rust-lang/rust/commit/01e9d09d3bbb35a1fbb0a2a353cfcf90a4feb050"}], "stats": {"total": 1021, "additions": 763, "deletions": 258}, "files": [{"sha": "54ab88dc3ffc9abd2949be3aef93a4edb8e0a406", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -15,20 +15,12 @@ pub fn expand_deriving_eq(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n+    let span = cx.with_def_site_ctxt(span);\n     let inline = cx.meta_word(span, sym::inline);\n-    let no_coverage_ident =\n-        rustc_ast::attr::mk_nested_word_item(Ident::new(sym::no_coverage, span));\n-    let no_coverage_feature =\n-        rustc_ast::attr::mk_list_item(Ident::new(sym::feature, span), vec![no_coverage_ident]);\n-    let no_coverage = cx.meta_word(span, sym::no_coverage);\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n-    let attrs = vec![\n-        cx.attribute(inline),\n-        cx.attribute(no_coverage_feature),\n-        cx.attribute(no_coverage),\n-        cx.attribute(doc),\n-    ];\n+    let no_coverage = cx.meta_word(span, sym::no_coverage);\n+    let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "a8719be84c2a44c68ed793f65bd3b16a36c0cc52", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -273,13 +273,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(List: \"address, memory, thread\"),\n         experimental!(no_sanitize)\n     ),\n-    ungated!(\n-        // Not exclusively gated at the crate level (though crate-level is\n-        // supported). The feature can alternatively be enabled on individual\n-        // functions.\n-        no_coverage, AssumedUsed,\n-        template!(Word),\n-    ),\n+    gated!(no_coverage, AssumedUsed, template!(Word), experimental!(no_coverage)),\n \n     // FIXME: #14408 assume docs are used since rustdoc looks at them.\n     ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),"}, {"sha": "1cafb2fe1a24f48be2c35cb106bb53a5c9973a2a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2398,9 +2398,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.tcx.associated_item(def_id).ident\n             ),\n             infer::EarlyBoundRegion(_, name) => format!(\" for lifetime parameter `{}`\", name),\n-            infer::BoundRegionInCoherence(name) => {\n-                format!(\" for lifetime parameter `{}` in coherence check\", name)\n-            }\n             infer::UpvarRegion(ref upvar_id, _) => {\n                 let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 format!(\" for capture of `{}` by closure\", var_name)"}, {"sha": "f39431f2494b1868f53c19f58ff893eb0c93a614", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -453,8 +453,6 @@ pub enum RegionVariableOrigin {\n \n     UpvarRegion(ty::UpvarId, Span),\n \n-    BoundRegionInCoherence(Symbol),\n-\n     /// This origin is used for the inference variables that we create\n     /// during NLL region processing.\n     Nll(NllRegionVariableOrigin),\n@@ -1749,7 +1747,6 @@ impl RegionVariableOrigin {\n             | EarlyBoundRegion(a, ..)\n             | LateBoundRegion(a, ..)\n             | UpvarRegion(_, a) => a,\n-            BoundRegionInCoherence(_) => rustc_span::DUMMY_SP,\n             Nll(..) => bug!(\"NLL variable used with `span`\"),\n         }\n     }"}, {"sha": "292306f6cde6ee5c1df7eb03753cdd6575bc582f", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -323,7 +323,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(result, dest)?;\n             }\n             sym::copy => {\n-                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n+                self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;\n@@ -530,4 +530,36 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         Ok(offset_ptr)\n     }\n+\n+    /// Copy `count*size_of::<T>()` many bytes from `*src` to `*dst`.\n+    pub(crate) fn copy_intrinsic(\n+        &mut self,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\n+                \"overflow computing total size of `{}`\",\n+                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n+            )\n+        })?;\n+\n+        // Make sure we check both pointers for an access of the total size and aligment,\n+        // *even if* the total size is 0.\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "5a10ffe6d6199c92032cf5ed3884147b19324352", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2,7 +2,6 @@\n //!\n //! The main entry point is the `step` method.\n \n-use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -119,7 +118,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_operand(src, None)?;\n                 let dst = self.eval_operand(dst, None)?;\n                 let count = self.eval_operand(count, None)?;\n-                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n+                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n             // Statements we do not track.\n@@ -149,37 +148,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn copy(\n-        &mut self,\n-        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        nonoverlapping: bool,\n-    ) -> InterpResult<'tcx> {\n-        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n-        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n-        let (size, align) = (layout.size, layout.align.abi);\n-        let size = size.checked_mul(count, self).ok_or_else(|| {\n-            err_ub_format!(\n-                \"overflow computing total size of `{}`\",\n-                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n-            )\n-        })?;\n-\n-        // Make sure we check both pointers for an access of the total size and aligment,\n-        // *even if* the total size is 0.\n-        let src =\n-            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n-\n-        let dst =\n-            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n-\n-        if let (Some(src), Some(dst)) = (src, dst) {\n-            self.memory.copy(src, dst, size, nonoverlapping)?;\n-        }\n-        Ok(())\n-    }\n-\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}, {"sha": "d537741c749c5aa789e2bf6a8b314d2ca259c3ed", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -470,7 +470,7 @@ impl<'a> Parser<'a> {\n     /// Is a `dyn B0 + ... + Bn` type allowed here?\n     fn is_explicit_dyn_type(&mut self) -> bool {\n         self.check_keyword(kw::Dyn)\n-            && (self.token.uninterpolated_span().rust_2018()\n+            && (!self.token.uninterpolated_span().rust_2015()\n                 || self.look_ahead(1, |t| {\n                     t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n                 }))\n@@ -539,7 +539,21 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n-        while self.can_begin_bound() {\n+\n+        while self.can_begin_bound() || self.token.is_keyword(kw::Dyn) {\n+            if self.token.is_keyword(kw::Dyn) {\n+                // Account for `&dyn Trait + dyn Other`.\n+                self.struct_span_err(self.token.span, \"invalid `dyn` keyword\")\n+                    .help(\"`dyn` is only needed at the start of a trait `+`-separated list\")\n+                    .span_suggestion(\n+                        self.token.span,\n+                        \"remove this keyword\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                self.bump();\n+            }\n             match self.parse_generic_bound()? {\n                 Ok(bound) => bounds.push(bound),\n                 Err(neg_sp) => negative_bounds.push(neg_sp),\n@@ -721,7 +735,26 @@ impl<'a> Parser<'a> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n         let path = self.parse_path(PathStyle::Type)?;\n         if has_parens {\n-            self.expect(&token::CloseDelim(token::Paren))?;\n+            if self.token.is_like_plus() {\n+                // Someone has written something like `&dyn (Trait + Other)`. The correct code\n+                // would be `&(dyn Trait + Other)`, but we don't have access to the appropriate\n+                // span to suggest that. When written as `&dyn Trait + Other`, an appropriate\n+                // suggestion is given.\n+                let bounds = vec![];\n+                self.parse_remaining_bounds(bounds, true)?;\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+                let sp = vec![lo, self.prev_token.span];\n+                let sugg: Vec<_> = sp.iter().map(|sp| (*sp, String::new())).collect();\n+                self.struct_span_err(sp, \"incorrect braces around trait bounds\")\n+                    .multipart_suggestion(\n+                        \"remove the parentheses\",\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+            } else {\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+            }\n         }\n \n         let modifier = modifiers.to_trait_bound_modifier();"}, {"sha": "08d452900c8e18a69b5fdbdf2f33fd9c7526e7b6", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1044,8 +1044,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     /// Returns `true` if the global caches can be used.\n-    /// Do note that if the type itself is not in the\n-    /// global tcx, the local caches will be used.\n     fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {\n         // If there are any inference variables in the `ParamEnv`, then we\n         // always use a cache local to this particular scope. Otherwise, we"}, {"sha": "0528f8812f920bac21aa6d70b04badd0294c459f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2661,8 +2661,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n-    let mut no_coverage_feature_enabled = false;\n-    let mut no_coverage_attr = None;\n     for attr in attrs.iter() {\n         if tcx.sess.check_name(attr, sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2726,15 +2724,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if tcx.sess.check_name(attr, sym::no_mangle) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n-        } else if attr.has_name(sym::feature) {\n-            if let Some(list) = attr.meta_item_list() {\n-                if list.iter().any(|nested_meta_item| nested_meta_item.has_name(sym::no_coverage)) {\n-                    tcx.sess.mark_attr_used(attr);\n-                    no_coverage_feature_enabled = true;\n-                }\n-            }\n         } else if tcx.sess.check_name(attr, sym::no_coverage) {\n-            no_coverage_attr = Some(attr);\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n         } else if tcx.sess.check_name(attr, sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n@@ -2945,23 +2936,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n-    if let Some(no_coverage_attr) = no_coverage_attr {\n-        if tcx.sess.features_untracked().no_coverage || no_coverage_feature_enabled {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE\n-        } else {\n-            let mut err = feature_err(\n-                &tcx.sess.parse_sess,\n-                sym::no_coverage,\n-                no_coverage_attr.span,\n-                \"the `#[no_coverage]` attribute is an experimental feature\",\n-            );\n-            if tcx.sess.parse_sess.unstable_features.is_nightly_build() {\n-                err.help(\"or, alternatively, add `#[feature(no_coverage)]` to the function\");\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n         if !attr.has_name(sym::inline) {\n             return ia;"}, {"sha": "f8b16b6f9275c6fbf613cd761342123b374f29c6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -274,8 +274,7 @@ pub trait Eq: PartialEq<Self> {\n     //\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n-    #[cfg_attr(not(bootstrap), feature(no_coverage))]\n-    #[cfg_attr(not(bootstrap), no_coverage)]\n+    #[cfg_attr(not(bootstrap), no_coverage)] // rust-lang/rust#84605\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn assert_receiver_is_total_eq(&self) {}\n@@ -284,7 +283,7 @@ pub trait Eq: PartialEq<Self> {\n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow_internal_unstable(core_intrinsics, derive_eq, structural_match)]\n+#[allow_internal_unstable(core_intrinsics, derive_eq, structural_match, no_coverage)]\n pub macro Eq($item:item) {\n     /* compiler built-in */\n }"}, {"sha": "0034de9ad1bfa79712870e1f2201084df0367e29", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -723,7 +723,7 @@ extern \"rust-intrinsic\" {\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n+    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -768,13 +768,13 @@ extern \"rust-intrinsic\" {\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::size_of`](crate::mem::size_of).\n+    /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// The minimum alignment of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::align_of`](crate::mem::align_of).\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n@@ -790,21 +790,21 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`](crate::mem::align_of_val).\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`].\n     #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::any::type_name`](crate::any::type_name).\n+    /// The stabilized version of this intrinsic is [`core::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`](crate::any::TypeId::of).\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -829,7 +829,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`core::panic::Location::caller`](crate::panic::Location::caller) instead.\n+    /// Consider using [`core::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n@@ -1158,11 +1158,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs a volatile load from the `src` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`](crate::ptr::read_volatile).\n+    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`].\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`](crate::ptr::write_volatile).\n+    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`].\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Performs a volatile load from the `src` pointer\n@@ -1703,7 +1703,7 @@ extern \"rust-intrinsic\" {\n     /// Returns the value of the discriminant for the variant in 'v';\n     /// if `T` has no discriminant, returns `0`.\n     ///\n-    /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n+    /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n "}, {"sha": "07bf47b9c6fda42314991824130758d93dac0e19", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -166,9 +166,14 @@\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n+#![cfg_attr(not(bootstrap), feature(no_coverage))] // rust-lang/rust#84605\n #![feature(int_error_matching)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+// allow using `core::` in intra-doc links\n+#[allow(unused_extern_crates)]\n+extern crate self as core;\n+\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}, {"sha": "f9536c4203df2928c9e65c25cac6686e964c9e5d", "filename": "library/std/src/sys/sgx/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -62,10 +62,12 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());\n-    let _tls_guard = unsafe { tls.activate() };\n+    let tls_guard = unsafe { tls.activate() };\n \n     if secondary {\n-        super::thread::Thread::entry();\n+        let join_notifier = super::thread::Thread::entry();\n+        drop(tls_guard);\n+        drop(join_notifier);\n \n         EntryReturn(0, 0)\n     } else {"}, {"sha": "67e2e8b59d397d8e14ce783c414fff0d39b8f07c", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -9,26 +9,37 @@ pub struct Thread(task_queue::JoinHandle);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n+pub use self::task_queue::JoinNotifier;\n+\n mod task_queue {\n-    use crate::sync::mpsc;\n+    use super::wait_notify;\n     use crate::sync::{Mutex, MutexGuard, Once};\n \n-    pub type JoinHandle = mpsc::Receiver<()>;\n+    pub type JoinHandle = wait_notify::Waiter;\n+\n+    pub struct JoinNotifier(Option<wait_notify::Notifier>);\n+\n+    impl Drop for JoinNotifier {\n+        fn drop(&mut self) {\n+            self.0.take().unwrap().notify();\n+        }\n+    }\n \n     pub(super) struct Task {\n         p: Box<dyn FnOnce()>,\n-        done: mpsc::Sender<()>,\n+        done: JoinNotifier,\n     }\n \n     impl Task {\n         pub(super) fn new(p: Box<dyn FnOnce()>) -> (Task, JoinHandle) {\n-            let (done, recv) = mpsc::channel();\n+            let (done, recv) = wait_notify::new();\n+            let done = JoinNotifier(Some(done));\n             (Task { p, done }, recv)\n         }\n \n-        pub(super) fn run(self) {\n+        pub(super) fn run(self) -> JoinNotifier {\n             (self.p)();\n-            let _ = self.done.send(());\n+            self.done\n         }\n     }\n \n@@ -47,6 +58,48 @@ mod task_queue {\n     }\n }\n \n+/// This module provides a synchronization primitive that does not use thread\n+/// local variables. This is needed for signaling that a thread has finished\n+/// execution. The signal is sent once all TLS destructors have finished at\n+/// which point no new thread locals should be created.\n+pub mod wait_notify {\n+    use super::super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n+    use crate::sync::Arc;\n+\n+    pub struct Notifier(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Notifier {\n+        /// Notify the waiter. The waiter is either notified right away (if\n+        /// currently blocked in `Waiter::wait()`) or later when it calls the\n+        /// `Waiter::wait()` method.\n+        pub fn notify(self) {\n+            let mut guard = self.0.lock();\n+            *guard.lock_var_mut() = true;\n+            let _ = WaitQueue::notify_one(guard);\n+        }\n+    }\n+\n+    pub struct Waiter(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Waiter {\n+        /// Wait for a notification. If `Notifier::notify()` has already been\n+        /// called, this will return immediately, otherwise the current thread\n+        /// is blocked until notified.\n+        pub fn wait(self) {\n+            let guard = self.0.lock();\n+            if *guard.lock_var() {\n+                return;\n+            }\n+            WaitQueue::wait(guard, || {});\n+        }\n+    }\n+\n+    pub fn new() -> (Notifier, Waiter) {\n+        let inner = Arc::new(SpinMutex::new(WaitVariable::new(false)));\n+        (Notifier(inner.clone()), Waiter(inner))\n+    }\n+}\n+\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n@@ -57,7 +110,7 @@ impl Thread {\n         Ok(Thread(handle))\n     }\n \n-    pub(super) fn entry() {\n+    pub(super) fn entry() -> JoinNotifier {\n         let mut pending_tasks = task_queue::lock();\n         let task = rtunwrap!(Some, pending_tasks.pop());\n         drop(pending_tasks); // make sure to not hold the task queue lock longer than necessary\n@@ -78,7 +131,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        let _ = self.0.recv();\n+        self.0.wait();\n     }\n }\n "}, {"sha": "f33d6129619318e8774303d9b77b930de34093f5", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,4 +1,5 @@\n use crate::cell::{Cell, UnsafeCell};\n+use crate::sync::atomic::{AtomicU8, Ordering};\n use crate::sync::mpsc::{channel, Sender};\n use crate::thread::{self, LocalKey};\n use crate::thread_local;\n@@ -207,3 +208,110 @@ fn dtors_in_dtors_in_dtors_const_init() {\n     });\n     rx.recv().unwrap();\n }\n+\n+// This test tests that TLS destructors have run before the thread joins. The\n+// test has no false positives (meaning: if the test fails, there's actually\n+// an ordering problem). It may have false negatives, where the test passes but\n+// join is not guaranteed to be after the TLS destructors. However, false\n+// negatives should be exceedingly rare due to judicious use of\n+// thread::yield_now and running the test several times.\n+#[test]\n+fn join_orders_after_tls_destructors() {\n+    // We emulate a synchronous MPSC rendezvous channel using only atomics and\n+    // thread::yield_now. We can't use std::mpsc as the implementation itself\n+    // may rely on thread locals.\n+    //\n+    // The basic state machine for an SPSC rendezvous channel is:\n+    //           FRESH -> THREAD1_WAITING -> MAIN_THREAD_RENDEZVOUS\n+    // where the first transition is done by the \u201creceiving\u201d thread and the 2nd\n+    // transition is done by the \u201csending\u201d thread.\n+    //\n+    // We add an additional state `THREAD2_LAUNCHED` between `FRESH` and\n+    // `THREAD1_WAITING` to block until all threads are actually running.\n+    //\n+    // A thread that joins on the \u201creceiving\u201d thread completion should never\n+    // observe the channel in the `THREAD1_WAITING` state. If this does occur,\n+    // we switch to the \u201cpoison\u201d state `THREAD2_JOINED` and panic all around.\n+    // (This is equivalent to \u201csending\u201d from an alternate producer thread.)\n+    const FRESH: u8 = 0;\n+    const THREAD2_LAUNCHED: u8 = 1;\n+    const THREAD1_WAITING: u8 = 2;\n+    const MAIN_THREAD_RENDEZVOUS: u8 = 3;\n+    const THREAD2_JOINED: u8 = 4;\n+    static SYNC_STATE: AtomicU8 = AtomicU8::new(FRESH);\n+\n+    for _ in 0..10 {\n+        SYNC_STATE.store(FRESH, Ordering::SeqCst);\n+\n+        let jh = thread::Builder::new()\n+            .name(\"thread1\".into())\n+            .spawn(move || {\n+                struct TlDrop;\n+\n+                impl Drop for TlDrop {\n+                    fn drop(&mut self) {\n+                        let mut sync_state = SYNC_STATE.swap(THREAD1_WAITING, Ordering::SeqCst);\n+                        loop {\n+                            match sync_state {\n+                                THREAD2_LAUNCHED | THREAD1_WAITING => thread::yield_now(),\n+                                MAIN_THREAD_RENDEZVOUS => break,\n+                                THREAD2_JOINED => panic!(\n+                                    \"Thread 1 still running after thread 2 joined on thread 1\"\n+                                ),\n+                                v => unreachable!(\"sync state: {}\", v),\n+                            }\n+                            sync_state = SYNC_STATE.load(Ordering::SeqCst);\n+                        }\n+                    }\n+                }\n+\n+                thread_local! {\n+                    static TL_DROP: TlDrop = TlDrop;\n+                }\n+\n+                TL_DROP.with(|_| {});\n+\n+                loop {\n+                    match SYNC_STATE.load(Ordering::SeqCst) {\n+                        FRESH => thread::yield_now(),\n+                        THREAD2_LAUNCHED => break,\n+                        v => unreachable!(\"sync state: {}\", v),\n+                    }\n+                }\n+            })\n+            .unwrap();\n+\n+        let jh2 = thread::Builder::new()\n+            .name(\"thread2\".into())\n+            .spawn(move || {\n+                assert_eq!(SYNC_STATE.swap(THREAD2_LAUNCHED, Ordering::SeqCst), FRESH);\n+                jh.join().unwrap();\n+                match SYNC_STATE.swap(THREAD2_JOINED, Ordering::SeqCst) {\n+                    MAIN_THREAD_RENDEZVOUS => return,\n+                    THREAD2_LAUNCHED | THREAD1_WAITING => {\n+                        panic!(\"Thread 2 running after thread 1 join before main thread rendezvous\")\n+                    }\n+                    v => unreachable!(\"sync state: {:?}\", v),\n+                }\n+            })\n+            .unwrap();\n+\n+        loop {\n+            match SYNC_STATE.compare_exchange_weak(\n+                THREAD1_WAITING,\n+                MAIN_THREAD_RENDEZVOUS,\n+                Ordering::SeqCst,\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => break,\n+                Err(FRESH) => thread::yield_now(),\n+                Err(THREAD2_LAUNCHED) => thread::yield_now(),\n+                Err(THREAD2_JOINED) => {\n+                    panic!(\"Main thread rendezvous after thread 2 joined thread 1\")\n+                }\n+                v => unreachable!(\"sync state: {:?}\", v),\n+            }\n+        }\n+        jh2.join().unwrap();\n+    }\n+}"}, {"sha": "4d7c207e3ab8b3cfe60b8c33b52e8e1c3101531b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -489,6 +489,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n \n         let build = Build::new(config);\n@@ -529,6 +530,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n \n         let build = Build::new(config);\n@@ -584,6 +586,7 @@ mod dist {\n             compare_mode: None,\n             rustfix_coverage: false,\n             pass: None,\n+            run: None,\n         };\n         // Make sure rustfmt binary not being found isn't an error.\n         config.channel = \"beta\".to_string();"}, {"sha": "d961e067db37c18a850ab2b4facbdf3da179e992", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -103,6 +103,7 @@ pub enum Subcommand {\n         bless: bool,\n         compare_mode: Option<String>,\n         pass: Option<String>,\n+        run: Option<String>,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -222,8 +223,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n              VALUE overrides the skip-rebuild option in config.toml.\",\n             \"VALUE\",\n         );\n-        opts.optopt(\"\", \"rust-profile-generate\", \"rustc error format\", \"FORMAT\");\n-        opts.optopt(\"\", \"rust-profile-use\", \"rustc error format\", \"FORMAT\");\n+        opts.optopt(\"\", \"rust-profile-generate\", \"generate PGO profile with rustc build\", \"FORMAT\");\n+        opts.optopt(\"\", \"rust-profile-use\", \"use PGO profile for rustc build\", \"FORMAT\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -293,6 +294,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                     \"force {check,build,run}-pass tests to this mode.\",\n                     \"check | build | run\",\n                 );\n+                opts.optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\");\n                 opts.optflag(\n                     \"\",\n                     \"rustfix-coverage\",\n@@ -556,6 +558,7 @@ Arguments:\n                 bless: matches.opt_present(\"bless\"),\n                 compare_mode: matches.opt_str(\"compare-mode\"),\n                 pass: matches.opt_str(\"pass\"),\n+                run: matches.opt_str(\"run\"),\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -742,6 +745,13 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn run(&self) -> Option<&str> {\n+        match *self {\n+            Subcommand::Test { ref run, .. } => run.as_ref().map(|s| &s[..]),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn open(&self) -> bool {\n         match *self {\n             Subcommand::Doc { open, .. } => open,"}, {"sha": "fbce2f03da0d14b0b091163cc1f0ad88bb3878f8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1240,6 +1240,11 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.arg(pass);\n         }\n \n+        if let Some(ref run) = builder.config.cmd.run() {\n+            cmd.arg(\"--run\");\n+            cmd.arg(run);\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }"}, {"sha": "f631f627fc255caeab1105a64243f8f2dfb1151f", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -13,7 +13,6 @@ use std::iter::Peekable;\n use rustc_lexer::{LiteralKind, TokenKind};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n-use rustc_span::with_default_session_globals;\n \n use super::format::Buffer;\n \n@@ -238,28 +237,26 @@ impl<'a> Classifier<'a> {\n     /// possibly giving it an HTML span with a class specifying what flavor of\n     /// token is used.\n     fn highlight(mut self, sink: &mut dyn FnMut(Highlight<'a>)) {\n-        with_default_session_globals(|| {\n-            loop {\n-                if self\n-                    .tokens\n-                    .peek()\n-                    .map(|t| matches!(t.0, TokenKind::Colon | TokenKind::Ident))\n-                    .unwrap_or(false)\n-                {\n-                    let tokens = self.get_full_ident_path();\n-                    for (token, start, end) in tokens {\n-                        let text = &self.src[start..end];\n-                        self.advance(token, text, sink);\n-                        self.byte_pos += text.len() as u32;\n-                    }\n-                }\n-                if let Some((token, text)) = self.next() {\n+        loop {\n+            if self\n+                .tokens\n+                .peek()\n+                .map(|t| matches!(t.0, TokenKind::Colon | TokenKind::Ident))\n+                .unwrap_or(false)\n+            {\n+                let tokens = self.get_full_ident_path();\n+                for (token, start, end) in tokens {\n+                    let text = &self.src[start..end];\n                     self.advance(token, text, sink);\n-                } else {\n-                    break;\n+                    self.byte_pos += text.len() as u32;\n                 }\n             }\n-        })\n+            if let Some((token, text)) = self.next() {\n+                self.advance(token, text, sink);\n+            } else {\n+                break;\n+            }\n+        }\n     }\n \n     /// Single step of highlighting. This will classify `token`, but maybe also"}, {"sha": "a0da2c963d167312314911e4aed238f1fff62a42", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2,6 +2,7 @@ use super::write_code;\n use crate::html::format::Buffer;\n use expect_test::expect_file;\n use rustc_span::edition::Edition;\n+use rustc_span::with_default_session_globals;\n \n const STYLE: &str = r#\"\n <style>\n@@ -17,21 +18,25 @@ const STYLE: &str = r#\"\n \n #[test]\n fn test_html_highlighting() {\n-    let src = include_str!(\"fixtures/sample.rs\");\n-    let html = {\n-        let mut out = Buffer::new();\n-        write_code(&mut out, src, Edition::Edition2018);\n-        format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n-    };\n-    expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n+    with_default_session_globals(|| {\n+        let src = include_str!(\"fixtures/sample.rs\");\n+        let html = {\n+            let mut out = Buffer::new();\n+            write_code(&mut out, src, Edition::Edition2018);\n+            format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n+        };\n+        expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n+    });\n }\n \n #[test]\n fn test_dos_backline() {\n-    let src = \"pub fn foo() {\\r\\n\\\n+    with_default_session_globals(|| {\n+        let src = \"pub fn foo() {\\r\\n\\\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n-    let mut html = Buffer::new();\n-    write_code(&mut html, src, Edition::Edition2018);\n-    expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n+        let mut html = Buffer::new();\n+        write_code(&mut html, src, Edition::Edition2018);\n+        expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n+    });\n }"}, {"sha": "eef6d99d2a91c044d6a1706e6cec80a43b709a78", "filename": "src/test/debuginfo/should-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2,6 +2,7 @@\n \n // == Test [gdb|lldb]-[command|check] are parsed correctly ===\n // should-fail\n+// needs-run-enabled\n // compile-flags:-g\n \n // === GDB TESTS ==================================================================================="}, {"sha": "16eaf7c858c19907993b1d788255effb284d0f23", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_func.txt", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/777bb2f6129e71a88ba030251eb370ef12fe28af/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "raw_url": "https://github.com/rust-lang/rust/raw/777bb2f6129e71a88ba030251eb370ef12fe28af/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt?ref=777bb2f6129e71a88ba030251eb370ef12fe28af", "patch": "@@ -1,19 +0,0 @@\n-    1|       |// Enables `no_coverage` on individual functions\n-    2|       |\n-    3|       |#[feature(no_coverage)]\n-    4|       |#[no_coverage]\n-    5|       |fn do_not_add_coverage_1() {\n-    6|       |    println!(\"called but not covered\");\n-    7|       |}\n-    8|       |\n-    9|       |#[no_coverage]\n-   10|       |#[feature(no_coverage)]\n-   11|       |fn do_not_add_coverage_2() {\n-   12|       |    println!(\"called but not covered\");\n-   13|       |}\n-   14|       |\n-   15|      1|fn main() {\n-   16|      1|    do_not_add_coverage_1();\n-   17|      1|    do_not_add_coverage_2();\n-   18|      1|}\n-"}, {"sha": "e19a2c4a87200ceb2dd2f40832567fe6c72f63b1", "filename": "src/test/run-make-fulldeps/coverage/no_cov_func.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/777bb2f6129e71a88ba030251eb370ef12fe28af/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777bb2f6129e71a88ba030251eb370ef12fe28af/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs?ref=777bb2f6129e71a88ba030251eb370ef12fe28af", "patch": "@@ -1,18 +0,0 @@\n-// Enables `no_coverage` on individual functions\n-\n-#[feature(no_coverage)]\n-#[no_coverage]\n-fn do_not_add_coverage_1() {\n-    println!(\"called but not covered\");\n-}\n-\n-#[no_coverage]\n-#[feature(no_coverage)]\n-fn do_not_add_coverage_2() {\n-    println!(\"called but not covered\");\n-}\n-\n-fn main() {\n-    do_not_add_coverage_1();\n-    do_not_add_coverage_2();\n-}"}, {"sha": "d2113e4f5ecc60515960ecb0f812c67f5ce8e843", "filename": "src/test/ui/cfg/cfg-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // compile-flags: -C panic=unwind\n+// needs-unwind\n // ignore-emscripten no panic_unwind implementation\n // ignore-wasm32     no panic_unwind implementation\n // ignore-wasm64     no panic_unwind implementation"}, {"sha": "fd4c6f76059aa6af2db3bcf2337a457e8c253c5a", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,8 +1,13 @@\n #![crate_type = \"lib\"]\n \n-#[no_coverage]\n-#[feature(no_coverage)] // does not have to be enabled before `#[no_coverage]`\n-fn no_coverage_is_enabled_on_this_function() {}\n+#[derive(PartialEq, Eq)] // ensure deriving `Eq` does not enable `feature(no_coverage)`\n+struct Foo {\n+    a: u8,\n+    b: u32,\n+}\n \n #[no_coverage] //~ ERROR the `#[no_coverage]` attribute is an experimental feature\n-fn requires_feature_no_coverage() {}\n+fn requires_feature_no_coverage() -> bool {\n+    let bar = Foo { a: 0, b: 0 };\n+    bar == Foo { a: 0, b: 0 }\n+}"}, {"sha": "f7167e0b771c0689caae0ff6b566c9f1356dee4c", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,12 +1,11 @@\n error[E0658]: the `#[no_coverage]` attribute is an experimental feature\n-  --> $DIR/feature-gate-no_coverage.rs:7:1\n+  --> $DIR/feature-gate-no_coverage.rs:9:1\n    |\n LL | #[no_coverage]\n    | ^^^^^^^^^^^^^^\n    |\n    = note: see issue #84605 <https://github.com/rust-lang/rust/issues/84605> for more information\n    = help: add `#![feature(no_coverage)]` to the crate attributes to enable\n-   = help: or, alternatively, add `#[feature(no_coverage)]` to the function\n \n error: aborting due to previous error\n "}, {"sha": "5a27ea8783a2f3b149f23057929ff84c75b8d8cc", "filename": "src/test/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -14,6 +14,7 @@ mod rusti {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "fbe68fb9379f866da8d45bd7438c31fd9c74c378", "filename": "src/test/ui/issues/issue-70093.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // compile-flags: -Zlink-native-libraries=no -Cdefault-linker-libraries=yes\n // ignore-windows - this will probably only work on unixish systems\n+// ignore-fuchsia - missing __libc_start_main for some reason (#84733)\n \n #[link(name = \"some-random-non-existent-library\", kind = \"static\")]\n extern \"C\" {}"}, {"sha": "37ddbe99a9f0310d7dd0f2ca03dca5516efc8ba2", "filename": "src/test/ui/meta/revision-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta%2Frevision-bad.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -4,6 +4,7 @@\n // run-fail\n // revisions: foo bar\n // should-fail\n+// needs-run-enabled\n //[foo] error-pattern:bar\n //[bar] error-pattern:foo\n "}, {"sha": "df31e614cf809be8d815908cd1393a562712479d", "filename": "src/test/ui/panic-handler/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,6 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n+// needs-unwind since it affects the error output\n // ignore-emscripten compiled with panic=abort, personality not required\n \n #![no_std]"}, {"sha": "1f14b20e4514dea794b1187f1a3b6243d5f50983", "filename": "src/test/ui/panic-handler/weak-lang-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,5 +1,5 @@\n error[E0259]: the name `core` is defined multiple times\n-  --> $DIR/weak-lang-item.rs:8:1\n+  --> $DIR/weak-lang-item.rs:9:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ `core` reimported here"}, {"sha": "58a90a592c4c0f0b62ab32b8883a267018f31a8d", "filename": "src/test/ui/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // compile-flags:-C panic=abort -C prefer-dynamic\n+// needs-unwind\n // ignore-musl - no dylibs here\n // ignore-emscripten\n // ignore-sgx no dynamic lib support"}, {"sha": "24048ebe008fa4432528efc9739c9237b87e5b95", "filename": "src/test/ui/panic-runtime/lto-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -2,6 +2,7 @@\n #![allow(unused_variables)]\n \n // compile-flags:-C lto -C panic=unwind\n+// needs-unwind\n // no-prefer-dynamic\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "622535a75aff6e5eb25b766a64bac7b6a0dd11d3", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // aux-build:panic-runtime-unwind.rs\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-unwind.rs"}, {"sha": "c48caaf07907742018ffb362e32f5a2093764405", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs"}, {"sha": "7a2e48e2f10a960b6f0d56e6af99f19cbb7ef06c", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs"}, {"sha": "650ab57226187a4c497221e76b5d27874e87cc23", "filename": "src/test/ui/parser/trait-object-delimiters.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n+//~^ ERROR only auto traits can be used as additional traits in a trait object\n+\n+fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n+\n+fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n+//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+//~| ERROR at least one trait is required for an object type\n+\n+fn foo4(_: &dyn <Drop + AsRef<str>>) {} //~ ERROR expected identifier, found `<`\n+\n+fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {} //~ ERROR invalid `dyn` keyword\n+//~^ ERROR only auto traits can be used as additional traits in a trait object\n+\n+fn main() {}"}, {"sha": "18b1b24122ecf320d2a2cd9c48e6a36da76deb13", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -0,0 +1,77 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/trait-object-delimiters.rs:3:13\n+   |\n+LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(dyn Drop + AsRef<str>)`\n+\n+error: incorrect braces around trait bounds\n+  --> $DIR/trait-object-delimiters.rs:6:17\n+   |\n+LL | fn foo2(_: &dyn (Drop + AsRef<str>)) {}\n+   |                 ^                 ^\n+   |\n+help: remove the parentheses\n+   |\n+LL | fn foo2(_: &dyn Drop + AsRef<str>) {}\n+   |                --               --\n+\n+error: expected parameter name, found `{`\n+  --> $DIR/trait-object-delimiters.rs:8:17\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |                 ^ expected parameter name\n+\n+error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+  --> $DIR/trait-object-delimiters.rs:8:17\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |                -^ expected one of 8 possible tokens\n+   |                |\n+   |                help: missing `,`\n+\n+error: expected identifier, found `<`\n+  --> $DIR/trait-object-delimiters.rs:12:17\n+   |\n+LL | fn foo4(_: &dyn <Drop + AsRef<str>>) {}\n+   |                 ^ expected identifier\n+\n+error: invalid `dyn` keyword\n+  --> $DIR/trait-object-delimiters.rs:14:25\n+   |\n+LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n+   |                         ^^^ help: remove this keyword\n+   |\n+   = help: `dyn` is only needed at the start of a trait `+`-separated list\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-delimiters.rs:3:24\n+   |\n+LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n+   |                 ----   ^^^^^^^^^^ additional non-auto trait\n+   |                 |\n+   |                 first non-auto trait\n+   |\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/trait-object-delimiters.rs:8:13\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |             ^^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-delimiters.rs:14:29\n+   |\n+LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n+   |                  ----       ^^^^^^^^^^ additional non-auto trait\n+   |                  |\n+   |                  first non-auto trait\n+   |\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0224, E0225.\n+For more information about an error, try `rustc --explain E0224`."}, {"sha": "cc6412e271a132825e6498267211a4e0235d1468", "filename": "src/test/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -35,6 +35,7 @@ struct Outer {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "18e93cb96cd99c76ada0fb04f7267d7fef403fe2", "filename": "src/test/ui/suggestions/unsized-function-parameter.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.fixed?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo1(bar: &str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn foo2(_bar: &str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn foo3(_: &str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn main() {}"}, {"sha": "344ee71c1bcc94109b981e70ca0f1381c89d9dee", "filename": "src/test/ui/suggestions/unsized-function-parameter.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo1(bar: str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn foo2(_bar: str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn foo3(_: str) {}\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+//~| HELP the trait `Sized` is not implemented for `str`\n+//~| HELP unsized fn params are gated as an unstable feature\n+//~| HELP function arguments must have a statically known size, borrowed types always have a known size\n+\n+fn main() {}"}, {"sha": "8cbd8bf3f34587a50150fef108e3a6079e16cac2", "filename": "src/test/ui/suggestions/unsized-function-parameter.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funsized-function-parameter.stderr?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-function-parameter.rs:5:9\n+   |\n+LL | fn foo1(bar: str) {}\n+   |         ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo1(bar: &str) {}\n+   |              ^\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-function-parameter.rs:11:9\n+   |\n+LL | fn foo2(_bar: str) {}\n+   |         ^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo2(_bar: &str) {}\n+   |               ^\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-function-parameter.rs:17:9\n+   |\n+LL | fn foo3(_: str) {}\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo3(_: &str) {}\n+   |            ^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "874dbdb42c33c133a14dfe75d19b5e33e2049333", "filename": "src/test/ui/test-panic-abort-disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:building tests with panic=abort is not supported\n // no-prefer-dynamic\n-// compile-flags: --test -Cpanic=abort\n+// compile-flags: --test -Cpanic=abort -Zpanic-abort-tests=no\n // run-flags: --test-threads=1\n \n // ignore-wasm no panic or subprocess support"}, {"sha": "0440cf488e8bb67374df02f075b9658dc1222f37", "filename": "src/test/ui/unwind-no-uwtable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-no-uwtable.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-windows target requires uwtable\n // ignore-wasm32-bare no proper panic=unwind support\n // compile-flags: -C panic=unwind -C force-unwind-tables=n"}, {"sha": "2bf4cfc50032049e780b88db39ab6fe47ca0dfd8", "filename": "src/test/ui/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftest%2Fui%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fx86stdcall.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -27,6 +27,7 @@ pub fn main() {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "408c0b8da0b210375a8bf3855896a1b31d740d5b", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -171,6 +171,12 @@ impl fmt::Display for Debugger {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq)]\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n /// Configuration for compiletest\n #[derive(Debug, Clone)]\n pub struct Config {\n@@ -249,6 +255,9 @@ pub struct Config {\n     /// Force the pass mode of a check/build/run-pass test to this mode.\n     pub force_pass_mode: Option<PassMode>,\n \n+    /// Explicitly enable or disable running.\n+    pub run: Option<bool>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n \n@@ -262,6 +271,10 @@ pub struct Config {\n     /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n+    /// What panic strategy the target is built with.  Unwind supports Abort, but\n+    /// not vice versa.\n+    pub target_panic: PanicStrategy,\n+\n     /// Target system to be tested\n     pub target: String,\n \n@@ -348,6 +361,15 @@ pub struct Config {\n     pub npm: Option<String>,\n }\n \n+impl Config {\n+    pub fn run_enabled(&self) -> bool {\n+        self.run.unwrap_or_else(|| {\n+            // Auto-detect whether to run based on the platform.\n+            !self.target.ends_with(\"-fuchsia\")\n+        })\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct TestPaths {\n     pub file: PathBuf,         // e.g., compile-test/foo/bar/baz.rs"}, {"sha": "983934d129a2e5291c6cb228f6a8dae64dc0ac1c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -7,7 +7,7 @@ use std::path::{Path, PathBuf};\n \n use tracing::*;\n \n-use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PassMode};\n+use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PanicStrategy, PassMode};\n use crate::util;\n use crate::{extract_cdb_version, extract_gdb_version};\n \n@@ -85,6 +85,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\") {\n+                    props.ignore = true;\n+                }\n+\n                 if !rustc_has_sanitizer_support\n                     && config.parse_name_directive(ln, \"needs-sanitizer-support\")\n                 {\n@@ -111,6 +115,12 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if config.target_panic == PanicStrategy::Abort\n+                    && config.parse_name_directive(ln, \"needs-unwind\")\n+                {\n+                    props.ignore = true;\n+                }\n+\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "d53e19f2908e4ad85681ca6cc34b47e0bd329f1a", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -5,7 +5,9 @@\n \n extern crate test;\n \n-use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n+use crate::common::{\n+    expected_output_path, output_base_dir, output_relative_path, PanicStrategy, UI_EXTENSIONS,\n+};\n use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, Pretty, TestPaths};\n use crate::util::logv;\n use getopts::Options;\n@@ -87,6 +89,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force {check,build,run}-pass tests to this mode.\",\n             \"check | build | run\",\n         )\n+        .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -96,8 +99,9 @@ pub fn parse_config(args: Vec<String>) -> Config {\n              (eg. emulator, valgrind)\",\n             \"PROGRAM\",\n         )\n-        .optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n-        .optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n+        .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag(\n             \"\",\n@@ -234,10 +238,21 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             mode.parse::<PassMode>()\n                 .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n         }),\n+        run: matches.opt_str(\"run\").and_then(|mode| match mode.as_str() {\n+            \"auto\" => None,\n+            \"always\" => Some(true),\n+            \"never\" => Some(false),\n+            _ => panic!(\"unknown `--run` option `{}` given\", mode),\n+        }),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n-        host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n-        target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n+        host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n+        target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n+        target_panic: match matches.opt_str(\"target-panic\").as_deref() {\n+            Some(\"unwind\") | None => PanicStrategy::Unwind,\n+            Some(\"abort\") => PanicStrategy::Abort,\n+            _ => panic!(\"unknown `--target-panic` option `{}` given\", mode),\n+        },\n         target,\n         host: opt_str2(matches.opt_str(\"host\")),\n         cdb,"}, {"sha": "c606aa1dfbfd42b06045176855533a817fc4d558", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -259,6 +259,7 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n pub fn compute_stamp_hash(config: &Config) -> String {\n     let mut hash = DefaultHasher::new();\n     config.stage_id.hash(&mut hash);\n+    config.run.hash(&mut hash);\n \n     match config.debugger {\n         Some(Debugger::Cdb) => {\n@@ -317,6 +318,7 @@ enum TestOutput {\n enum WillExecute {\n     Yes,\n     No,\n+    Disabled,\n }\n \n /// Should `--emit metadata` be used?\n@@ -357,14 +359,17 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn should_run(&self, pm: Option<PassMode>) -> WillExecute {\n-        match self.config.mode {\n-            Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => {\n-                WillExecute::Yes\n-            }\n-            MirOpt if pm == Some(PassMode::Run) => WillExecute::Yes,\n-            Ui | MirOpt => WillExecute::No,\n+        let test_should_run = match self.config.mode {\n+            Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => true,\n+            MirOpt if pm == Some(PassMode::Run) => true,\n+            Ui | MirOpt => false,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n-        }\n+        };\n+        if test_should_run { self.run_if_enabled() } else { WillExecute::No }\n+    }\n+\n+    fn run_if_enabled(&self) -> WillExecute {\n+        if self.config.run_enabled() { WillExecute::Yes } else { WillExecute::Disabled }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n@@ -439,12 +444,17 @@ impl<'test> TestCx<'test> {\n \n     fn run_rfail_test(&self) {\n         let pm = self.pass_mode();\n-        let proc_res = self.compile_test(WillExecute::Yes, self.should_emit_metadata(pm));\n+        let should_run = self.run_if_enabled();\n+        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm));\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         let proc_res = self.exec_compiled_test();\n \n         // The value our Makefile configures valgrind to return on failure\n@@ -483,12 +493,17 @@ impl<'test> TestCx<'test> {\n \n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n-        let proc_res = self.compile_test(WillExecute::Yes, emit_metadata);\n+        let should_run = self.run_if_enabled();\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         // FIXME(#41968): Move this check to tidy?\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         assert!(\n@@ -510,12 +525,17 @@ impl<'test> TestCx<'test> {\n             return self.run_rpass_test();\n         }\n \n-        let mut proc_res = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let mut proc_res = self.compile_test(should_run, EmitMetadata::No);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n+\n         let mut new_config = self.config.clone();\n         new_config.runtool = new_config.valgrind_path.clone();\n         let new_cx = TestCx { config: &new_config, ..*self };\n@@ -732,10 +752,14 @@ impl<'test> TestCx<'test> {\n \n     fn run_debuginfo_cdb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compile_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -826,10 +850,14 @@ impl<'test> TestCx<'test> {\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compiler_run_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compiler_run_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -1044,10 +1072,14 @@ impl<'test> TestCx<'test> {\n \n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compile_result = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let should_run = self.run_if_enabled();\n+        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n+        if let WillExecute::Disabled = should_run {\n+            return;\n+        }\n \n         let exe_file = self.make_exe_name();\n \n@@ -1531,7 +1563,9 @@ impl<'test> TestCx<'test> {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let output_file = match will_execute {\n             WillExecute::Yes => TargetLocation::ThisFile(self.make_exe_name()),\n-            WillExecute::No => TargetLocation::ThisDirectory(self.output_base_dir()),\n+            WillExecute::No | WillExecute::Disabled => {\n+                TargetLocation::ThisDirectory(self.output_base_dir())\n+            }\n         };\n \n         let allow_unused = match self.config.mode {"}, {"sha": "064dd716521f51dda66b7afa0667b7a12ea0edf8", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 136, "deletions": 47, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1773f14a24c49356b384e45ebb45643bc9bef2c4/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=1773f14a24c49356b384e45ebb45643bc9bef2c4", "patch": "@@ -44,12 +44,29 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"fortanix-sgx-abi\", \"MPL-2.0\"), // libstd but only for `sgx` target\n ];\n \n+const EXCEPTIONS_CRANELIFT: &[(&str, &str)] = &[\n+    (\"cranelift-bforest\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen-meta\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-codegen-shared\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-entity\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-frontend\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-jit\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-module\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-native\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-object\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"libloading\", \"ISC\"),\n+    (\"mach\", \"BSD-2-Clause\"),\n+    (\"regalloc\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"target-lexicon\", \"Apache-2.0 WITH LLVM-exception\"),\n+];\n+\n /// These are the root crates that are part of the runtime. The licenses for\n /// these and all their dependencies *must not* be in the exception list.\n const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"test\", \"panic_abort\", \"panic_unwind\"];\n \n /// Crates whose dependencies must be explicitly permitted.\n-const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_middle\", \"rustc_codegen_llvm\"];\n+const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_driver\", \"rustc_codegen_llvm\"];\n \n /// Crates rustc is allowed to depend on. Avoid adding to the list if possible.\n ///\n@@ -72,7 +89,10 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"cc\",\n     \"cfg-if\",\n     \"chalk-derive\",\n+    \"chalk-engine\",\n     \"chalk-ir\",\n+    \"chalk-solve\",\n+    \"chrono\",\n     \"cmake\",\n     \"compiler_builtins\",\n     \"cpuid-bool\",\n@@ -92,6 +112,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"expect-test\",\n     \"fake-simd\",\n     \"filetime\",\n+    \"fixedbitset\",\n     \"flate2\",\n     \"fortanix-sgx-abi\",\n     \"fuchsia-zircon\",\n@@ -107,13 +128,15 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"indexmap\",\n     \"instant\",\n     \"itertools\",\n+    \"itoa\",\n     \"jobserver\",\n     \"kernel32-sys\",\n     \"lazy_static\",\n     \"libc\",\n     \"libz-sys\",\n     \"lock_api\",\n     \"log\",\n+    \"matchers\",\n     \"maybe-uninit\",\n     \"md-5\",\n     \"measureme\",\n@@ -123,13 +146,16 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"memoffset\",\n     \"miniz_oxide\",\n     \"num_cpus\",\n+    \"num-integer\",\n+    \"num-traits\",\n     \"object\",\n     \"once_cell\",\n     \"opaque-debug\",\n     \"parking_lot\",\n     \"parking_lot_core\",\n     \"pathdiff\",\n     \"perf-event-open-sys\",\n+    \"petgraph\",\n     \"pin-project-lite\",\n     \"pkg-config\",\n     \"polonius-engine\",\n@@ -147,22 +173,28 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"rand_xorshift\",\n     \"redox_syscall\",\n     \"regex\",\n+    \"regex-automata\",\n     \"regex-syntax\",\n     \"remove_dir_all\",\n+    \"rls-data\",\n+    \"rls-span\",\n     \"rustc-demangle\",\n     \"rustc-hash\",\n     \"rustc-rayon\",\n     \"rustc-rayon-core\",\n     \"rustc_version\",\n+    \"ryu\",\n     \"scoped-tls\",\n     \"scopeguard\",\n     \"semver\",\n     \"semver-parser\",\n     \"serde\",\n     \"serde_derive\",\n+    \"serde_json\",\n     \"sha-1\",\n     \"sha2\",\n     \"smallvec\",\n+    \"sharded-slab\",\n     \"snap\",\n     \"stable_deref_trait\",\n     \"stacker\",\n@@ -172,9 +204,15 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"termcolor\",\n     \"termize\",\n     \"thread_local\",\n+    \"time\",\n+    \"tinyvec\",\n     \"tracing\",\n     \"tracing-attributes\",\n     \"tracing-core\",\n+    \"tracing-log\",\n+    \"tracing-serde\",\n+    \"tracing-subscriber\",\n+    \"tracing-tree\",\n     \"typenum\",\n     \"unicode-normalization\",\n     \"unicode-script\",\n@@ -193,6 +231,59 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"yansi-term\",\n ];\n \n+const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n+    \"anyhow\",\n+    \"ar\",\n+    \"autocfg\",\n+    \"bitflags\",\n+    \"byteorder\",\n+    \"cfg-if\",\n+    \"cranelift-bforest\",\n+    \"cranelift-codegen\",\n+    \"cranelift-codegen-meta\",\n+    \"cranelift-codegen-shared\",\n+    \"cranelift-entity\",\n+    \"cranelift-frontend\",\n+    \"cranelift-jit\",\n+    \"cranelift-module\",\n+    \"cranelift-native\",\n+    \"cranelift-object\",\n+    \"crc32fast\",\n+    \"errno\",\n+    \"errno-dragonfly\",\n+    \"gcc\",\n+    \"gimli\",\n+    \"hashbrown\",\n+    \"indexmap\",\n+    \"libc\",\n+    \"libloading\",\n+    \"log\",\n+    \"mach\",\n+    \"object\",\n+    \"proc-macro2\",\n+    \"quote\",\n+    \"regalloc\",\n+    \"region\",\n+    \"rustc-hash\",\n+    \"smallvec\",\n+    \"syn\",\n+    \"target-lexicon\",\n+    \"thiserror\",\n+    \"thiserror-impl\",\n+    \"unicode-xid\",\n+    \"winapi\",\n+    \"winapi-i686-pc-windows-gnu\",\n+    \"winapi-x86_64-pc-windows-gnu\",\n+];\n+\n+const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n+    // These two crates take quite a long time to build, so don't allow two versions of them\n+    // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n+    // under control.\n+    \"cargo\",\n+    \"rustc-ap-rustc_ast\",\n+];\n+\n /// Dependency checks.\n ///\n /// `root` is path to the directory with the root `Cargo.toml` (for the workspace). `cargo` is path\n@@ -203,17 +294,39 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         .manifest_path(root.join(\"Cargo.toml\"))\n         .features(cargo_metadata::CargoOpt::AllFeatures);\n     let metadata = t!(cmd.exec());\n-    check_exceptions(&metadata, bad);\n-    check_dependencies(&metadata, bad);\n-    check_crate_duplicate(&metadata, bad);\n+    let runtime_ids = compute_runtime_crates(&metadata);\n+    check_exceptions(&metadata, EXCEPTIONS, runtime_ids, bad);\n+    check_dependencies(&metadata, PERMITTED_DEPENDENCIES, RESTRICTED_DEPENDENCY_CRATES, bad);\n+    check_crate_duplicate(&metadata, FORBIDDEN_TO_HAVE_DUPLICATES, bad);\n+\n+    // Check rustc_codegen_cranelift independently as it has it's own workspace.\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(root.join(\"compiler/rustc_codegen_cranelift/Cargo.toml\"))\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let metadata = t!(cmd.exec());\n+    let runtime_ids = HashSet::new();\n+    check_exceptions(&metadata, EXCEPTIONS_CRANELIFT, runtime_ids, bad);\n+    check_dependencies(\n+        &metadata,\n+        PERMITTED_CRANELIFT_DEPENDENCIES,\n+        &[\"rustc_codegen_cranelift\"],\n+        bad,\n+    );\n+    check_crate_duplicate(&metadata, &[], bad);\n }\n \n /// Check that all licenses are in the valid list in `LICENSES`.\n ///\n /// Packages listed in `EXCEPTIONS` are allowed for tools.\n-fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n+fn check_exceptions(\n+    metadata: &Metadata,\n+    exceptions: &[(&str, &str)],\n+    runtime_ids: HashSet<&PackageId>,\n+    bad: &mut bool,\n+) {\n     // Validate the EXCEPTIONS list hasn't changed.\n-    for (name, license) in EXCEPTIONS {\n+    for (name, license) in exceptions {\n         // Check that the package actually exists.\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n             tidy_error!(\n@@ -225,13 +338,6 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n         }\n         // Check that the license hasn't changed.\n         for pkg in metadata.packages.iter().filter(|p| p.name == *name) {\n-            if pkg.name == \"fuchsia-cprng\" {\n-                // This package doesn't declare a license expression. Manual\n-                // inspection of the license file is necessary, which appears\n-                // to be BSD-3-Clause.\n-                assert!(pkg.license.is_none());\n-                continue;\n-            }\n             match &pkg.license {\n                 None => {\n                     tidy_error!(\n@@ -242,14 +348,6 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n                 }\n                 Some(pkg_license) => {\n                     if pkg_license.as_str() != *license {\n-                        if *name == \"crossbeam-queue\"\n-                            && *license == \"MIT/Apache-2.0 AND BSD-2-Clause\"\n-                        {\n-                            // We have two versions of crossbeam-queue and both\n-                            // are fine.\n-                            continue;\n-                        }\n-\n                         println!(\"dependency exception `{}` license has changed\", name);\n                         println!(\"    previously `{}` now `{}`\", license, pkg_license);\n                         println!(\"    update EXCEPTIONS for the new license\");\n@@ -260,8 +358,7 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n         }\n     }\n \n-    let exception_names: Vec<_> = EXCEPTIONS.iter().map(|(name, _license)| *name).collect();\n-    let runtime_ids = compute_runtime_crates(metadata);\n+    let exception_names: Vec<_> = exceptions.iter().map(|(name, _license)| *name).collect();\n \n     // Check if any package does not have a valid license.\n     for pkg in &metadata.packages {\n@@ -296,9 +393,14 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n /// `true` if a check failed.\n ///\n /// Specifically, this checks that the dependencies are on the `PERMITTED_DEPENDENCIES`.\n-fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n+fn check_dependencies(\n+    metadata: &Metadata,\n+    permitted_dependencies: &[&'static str],\n+    restricted_dependency_crates: &[&'static str],\n+    bad: &mut bool,\n+) {\n     // Check that the PERMITTED_DEPENDENCIES does not have unused entries.\n-    for name in PERMITTED_DEPENDENCIES {\n+    for name in permitted_dependencies {\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n             tidy_error!(\n                 bad,\n@@ -309,12 +411,12 @@ fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n         }\n     }\n     // Get the list in a convenient form.\n-    let permitted_dependencies: HashSet<_> = PERMITTED_DEPENDENCIES.iter().cloned().collect();\n+    let permitted_dependencies: HashSet<_> = permitted_dependencies.iter().cloned().collect();\n \n     // Check dependencies.\n     let mut visited = BTreeSet::new();\n     let mut unapproved = BTreeSet::new();\n-    for &krate in RESTRICTED_DEPENDENCY_CRATES.iter() {\n+    for &krate in restricted_dependency_crates.iter() {\n         let pkg = pkg_from_name(metadata, krate);\n         let mut bad =\n             check_crate_dependencies(&permitted_dependencies, metadata, &mut visited, pkg);\n@@ -367,16 +469,12 @@ fn check_crate_dependencies<'a>(\n }\n \n /// Prevents multiple versions of some expensive crates.\n-fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n-    const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n-        // These two crates take quite a long time to build, so don't allow two versions of them\n-        // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n-        // under control.\n-        \"cargo\",\n-        \"rustc-ap-rustc_ast\",\n-    ];\n-\n-    for &name in FORBIDDEN_TO_HAVE_DUPLICATES {\n+fn check_crate_duplicate(\n+    metadata: &Metadata,\n+    forbidden_to_have_duplicates: &[&str],\n+    bad: &mut bool,\n+) {\n+    for &name in forbidden_to_have_duplicates {\n         let matches: Vec<_> = metadata.packages.iter().filter(|pkg| pkg.name == name).collect();\n         match matches.len() {\n             0 => {\n@@ -456,16 +554,7 @@ fn normal_deps_of_r<'a>(\n         .iter()\n         .find(|n| &n.id == pkg_id)\n         .unwrap_or_else(|| panic!(\"could not find `{}` in resolve\", pkg_id));\n-    // Don't care about dev-dependencies.\n-    // Build dependencies *shouldn't* matter unless they do some kind of\n-    // codegen. For now we'll assume they don't.\n-    let deps = node.deps.iter().filter(|node_dep| {\n-        node_dep\n-            .dep_kinds\n-            .iter()\n-            .any(|kind_info| kind_info.kind == cargo_metadata::DependencyKind::Normal)\n-    });\n-    for dep in deps {\n+    for dep in &node.deps {\n         normal_deps_of_r(resolve, &dep.pkg, result);\n     }\n }"}]}