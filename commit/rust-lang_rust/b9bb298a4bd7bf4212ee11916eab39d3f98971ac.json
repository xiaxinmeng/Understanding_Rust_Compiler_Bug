{"sha": "b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YmIyOThhNGJkN2JmNDIxMmVlMTE5MTZlYWIzOWQzZjk4OTcxYWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-05T22:57:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-05T22:57:35Z"}, "message": "Merge pull request #622 from mcarton/regex\n\nLint about trivial regexes", "tree": {"sha": "001aad4b0f5e838ad1ace06f6ec2b7f02600db9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001aad4b0f5e838ad1ace06f6ec2b7f02600db9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "html_url": "https://github.com/rust-lang/rust/commit/b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "html_url": "https://github.com/rust-lang/rust/commit/0494071ab78ba4648e64a268ef1a4fffaa6c39b6"}, {"sha": "a02b8124de9b778e822814608217ca774ec231fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02b8124de9b778e822814608217ca774ec231fa", "html_url": "https://github.com/rust-lang/rust/commit/a02b8124de9b778e822814608217ca774ec231fa"}], "stats": {"total": 185, "additions": 137, "deletions": 48}, "files": [{"sha": "08ad214e6903e84a9c7026c6f01444e5f49024a4", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 112 lints included in this crate:\n+There are 113 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -104,6 +104,7 @@ name\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                           | warn    | calling `String::to_string` which is inefficient\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                   | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                           | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n+[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                 | warn    | finds trivial regular expressions in `Regex::new(_)` invocations\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                             | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                             | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                           | warn    | comparing unit values (which is always `true` or `false`, respectively)"}, {"sha": "84fb9b874ff1dd930f2678e71f90c97b3b824a5d", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -62,8 +62,8 @@ impl CyclomaticComplexity {\n                 span_help_and_lint(cx,\n                                    CYCLOMATIC_COMPLEXITY,\n                                    span,\n-                                   &format!(\"The function has a cyclomatic complexity of {}\", rust_cc),\n-                                   \"You could split it up into multiple smaller functions\");\n+                                   &format!(\"the function has a cyclomatic complexity of {}\", rust_cc),\n+                                   \"you could split it up into multiple smaller functions\");\n             }\n         }\n     }"}, {"sha": "33de4d6fb792b0ebb5a8d5a51beb10e438d987da", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -257,6 +257,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n         regex::INVALID_REGEX,\n+        regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,"}, {"sha": "e0b51cdfa2ad16f73fe7c9b17469b7fab368d07f", "filename": "src/open_options.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -120,7 +120,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"create\\\" is called more than once\");\n+                              \"the method \\\"create\\\" is called more than once\");\n                 } else {\n                     create = true\n                 }\n@@ -131,7 +131,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"append\\\" is called more than once\");\n+                              \"the method \\\"append\\\" is called more than once\");\n                 } else {\n                     append = true\n                 }\n@@ -142,7 +142,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"truncate\\\" is called more than once\");\n+                              \"the method \\\"truncate\\\" is called more than once\");\n                 } else {\n                     truncate = true\n                 }\n@@ -153,7 +153,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"read\\\" is called more than once\");\n+                              \"the method \\\"read\\\" is called more than once\");\n                 } else {\n                     read = true\n                 }\n@@ -164,7 +164,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"write\\\" is called more than once\");\n+                              \"the method \\\"write\\\" is called more than once\");\n                 } else {\n                     write = true\n                 }\n@@ -174,12 +174,12 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n     }\n \n     if read && truncate && read_arg && truncate_arg {\n-        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"truncate\\\" and \\\"read\\\"\");\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"file opened with \\\"truncate\\\" and \\\"read\\\"\");\n     }\n     if append && truncate && append_arg && truncate_arg {\n         span_lint(cx,\n                   NONSENSICAL_OPEN_OPTIONS,\n                   span,\n-                  \"File opened with \\\"append\\\" and \\\"truncate\\\"\");\n+                  \"file opened with \\\"append\\\" and \\\"truncate\\\"\");\n     }\n }"}, {"sha": "0558b77acb034fdec0a52795373b71ea91bc08b8", "filename": "src/regex.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n \n-use utils::{match_path, REGEX_NEW_PATH, span_lint};\n+use utils::{match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax. It is `deny` by default.\n ///\n@@ -23,12 +23,26 @@ declare_lint! {\n     \"finds invalid regular expressions in `Regex::new(_)` invocations\"\n }\n \n+/// **What it does:** This lint checks for `Regex::new(_)` invocations with trivial regex.\n+///\n+/// **Why is this bad?** This can likely be replaced by `==` or `str::starts_with`,\n+/// `str::ends_with` or `std::contains` or other `str` methods.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `Regex::new(\"^foobar\")`\n+declare_lint! {\n+    pub TRIVIAL_REGEX,\n+    Warn,\n+    \"finds trivial regular expressions in `Regex::new(_)` invocations\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct RegexPass;\n \n impl LintPass for RegexPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REGEX)\n+        lint_array!(INVALID_REGEX, TRIVIAL_REGEX)\n     }\n }\n \n@@ -45,22 +59,29 @@ impl LateLintPass for RegexPass {\n                         span_lint(cx,\n                                   INVALID_REGEX,\n                                   str_span(args[0].span, &r, e.position()),\n-                                  &format!(\"Regex syntax error: {}\",\n+                                  &format!(\"regex syntax error: {}\",\n                                            e.description()));\n                     }\n+                    else if let Some(repl) = is_trivial_regex(r) {\n+                        span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                           &\"trivial regex\",\n+                                           &format!(\"consider using {}\", repl));\n+                    }\n                 }\n-            } else {\n-                if_let_chain!{[\n-                    let Some(r) = const_str(cx, &*args[0]),\n-                    let Err(e) = regex_syntax::Expr::parse(&r)\n-                ], {\n+            } else if let Some(r) = const_str(cx, &*args[0]) {\n+                if let Err(e) = regex_syntax::Expr::parse(&r) {\n                     span_lint(cx,\n                               INVALID_REGEX,\n                               args[0].span,\n-                              &format!(\"Regex syntax error on position {}: {}\",\n+                              &format!(\"regex syntax error on position {}: {}\",\n                                        e.position(),\n                                        e.description()));\n-                }}\n+                }\n+                else if let Some(repl) = is_trivial_regex(&r) {\n+                    span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n+                                       &\"trivial regex\",\n+                                       &format!(\"{}\", repl));\n+                }\n             }\n         }}\n     }\n@@ -81,3 +102,26 @@ fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n         _ => None\n     }\n }\n+\n+fn is_trivial_regex(s: &str) -> Option<&'static str> {\n+    // some unlikely but valid corner cases\n+    match s {\n+        \"\" | \"^\" | \"$\" => return Some(\"the regex is unlikely to be useful as it is\"),\n+        \"^$\" => return Some(\"consider using `str::is_empty`\"),\n+        _ => (),\n+    }\n+\n+    let (start, end, repl) = match (s.starts_with('^'), s.ends_with('$')) {\n+        (true, true) => (1, s.len()-1, \"consider using `==` on `str`s\"),\n+        (false, true) => (0, s.len()-1, \"consider using `str::ends_with`\"),\n+        (true, false) => (1, s.len(), \"consider using `str::starts_with`\"),\n+        (false, false) => (0, s.len(), \"consider using `str::contains`\"),\n+    };\n+\n+    if !s.chars().take(end).skip(start).any(regex_syntax::is_punct) {\n+        Some(repl)\n+    }\n+    else {\n+        None\n+    }\n+}"}, {"sha": "5bdca7f3629407bad2c7d084cd065384b8f7e7ae", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -5,7 +5,7 @@\n #![allow(unused)]\n \n \n-fn main() { //~ERROR The function has a cyclomatic complexity of 28\n+fn main() { //~ERROR the function has a cyclomatic complexity of 28\n     if true {\n         println!(\"a\");\n     }\n@@ -90,7 +90,7 @@ fn main() { //~ERROR The function has a cyclomatic complexity of 28\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 8\n+fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 8\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -136,7 +136,7 @@ fn bloo() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn baa() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n     let x = || match 99 {\n         0 => true,\n         1 => false,\n@@ -154,15 +154,15 @@ fn baa() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn bar() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn bar() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         _ => println!(\"bye\"),\n     }\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -172,7 +172,7 @@ fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -188,7 +188,7 @@ fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -198,7 +198,7 @@ fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -214,7 +214,7 @@ fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barrrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -224,7 +224,7 @@ fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barrrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -240,7 +240,7 @@ fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn cake() { //~ ERROR: the function has a cyclomatic complexity of 2\n     if 4 == 5 {\n         println!(\"yea\");\n     } else {\n@@ -251,7 +251,7 @@ fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n \n \n #[cyclomatic_complexity = \"0\"]\n-pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyclomatic complexity of 4\n+pub fn read_file(input_path: &str) -> String { //~ ERROR: the function has a cyclomatic complexity of 4\n     use std::fs::File;\n     use std::io::{Read, Write};\n     use std::path::Path;\n@@ -282,7 +282,7 @@ pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyc\n enum Void {}\n \n #[cyclomatic_complexity = \"0\"]\n-fn void(void: Void) { //~ ERROR: The function has a cyclomatic complexity of 1\n+fn void(void: Void) { //~ ERROR: the function has a cyclomatic complexity of 1\n     if true {\n         match void {\n         }"}, {"sha": "08024e37d4af8b98c456db6884f958bb44fa2c91", "filename": "tests/compile-fail/open_options.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fopen_options.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -5,12 +5,12 @@ use std::fs::OpenOptions;\n #[allow(unused_must_use)]\n #[deny(nonsensical_open_options)]\n fn main() {\n-\tOpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"truncate\" and \"read\"\n-\tOpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"append\" and \"truncate\"\n-    \n-\tOpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR The method \"read\" is called more than once\n-\tOpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR The method \"create\" is called more than once\n-\tOpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR The method \"write\" is called more than once\n-\tOpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR The method \"append\" is called more than once\n-\tOpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR The method \"truncate\" is called more than once\n+    OpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"truncate\" and \"read\"\n+    OpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"append\" and \"truncate\"\n+\n+    OpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR the method \"read\" is called more than once\n+    OpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR the method \"create\" is called more than once\n+    OpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR the method \"write\" is called more than once\n+    OpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR the method \"append\" is called more than once\n+    OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR the method \"truncate\" is called more than once\n }"}, {"sha": "cd10d47c1bbb00536764127173f7f4e98830c317", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bb298a4bd7bf4212ee11916eab39d3f98971ac/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=b9bb298a4bd7bf4212ee11916eab39d3f98971ac", "patch": "@@ -2,23 +2,66 @@\n #![plugin(clippy)]\n \n #![allow(unused)]\n-#![deny(invalid_regex)]\n+#![deny(invalid_regex, trivial_regex)]\n \n extern crate regex;\n \n use regex::Regex;\n \n const OPENING_PAREN : &'static str = \"(\";\n+const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n \n-fn main() {\n+fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n-    //~^ERROR: Regex syntax error: empty alternate\n-    let wrong_char_ranice = Regex::new(\"[z-a]\"); \n-    //~^ERROR: Regex syntax error: invalid character class range\n-    \n+    //~^ERROR: regex syntax error: empty alternate\n+    let wrong_char_ranice = Regex::new(\"[z-a]\");\n+    //~^ERROR: regex syntax error: invalid character class range\n+\n     let some_regex = Regex::new(OPENING_PAREN);\n-    //~^ERROR: Regex syntax error on position 0: unclosed\n+    //~^ERROR: regex syntax error on position 0: unclosed\n \n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n }\n+\n+fn trivial_regex() {\n+    let trivial_eq = Regex::new(\"^foobar$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `==` on `str`s\n+\n+    let trivial_starts_with = Regex::new(\"^foobar\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::starts_with`\n+\n+    let trivial_ends_with = Regex::new(\"foobar$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::ends_with`\n+\n+    let trivial_contains = Regex::new(\"foobar\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::contains`\n+\n+    let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::contains`\n+\n+    // unlikely corner cases\n+    let trivial_empty = Regex::new(\"\");\n+    //~^ERROR: trivial regex\n+    //~|HELP the regex is unlikely to be useful\n+\n+    let trivial_empty = Regex::new(\"^$\");\n+    //~^ERROR: trivial regex\n+    //~|HELP consider using `str::is_empty`\n+\n+    // non-trivial regexes\n+    let non_trivial_eq = Regex::new(\"^foo|bar$\");\n+    let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n+    let non_trivial_ends_with = Regex::new(\"^foo|bar\");\n+    let non_trivial_ends_with = Regex::new(\"foo|bar\");\n+}\n+\n+fn main() {\n+    syntax_error();\n+    trivial_regex();\n+}"}]}