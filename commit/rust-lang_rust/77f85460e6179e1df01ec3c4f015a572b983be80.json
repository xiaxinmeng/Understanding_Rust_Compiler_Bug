{"sha": "77f85460e6179e1df01ec3c4f015a572b983be80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Zjg1NDYwZTYxNzllMWRmMDFlYzNjNGYwMTVhNTcyYjk4M2JlODA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T20:21:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T20:23:51Z"}, "message": "Rename trans_native to trans_native_call, for clarity.", "tree": {"sha": "6e2e17709c2a18f9994ef2f7fd178e742f805dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e2e17709c2a18f9994ef2f7fd178e742f805dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f85460e6179e1df01ec3c4f015a572b983be80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f85460e6179e1df01ec3c4f015a572b983be80", "html_url": "https://github.com/rust-lang/rust/commit/77f85460e6179e1df01ec3c4f015a572b983be80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f85460e6179e1df01ec3c4f015a572b983be80/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734abe593dc09edaea0f24978acf4f4270337361", "url": "https://api.github.com/repos/rust-lang/rust/commits/734abe593dc09edaea0f24978acf4f4270337361", "html_url": "https://github.com/rust-lang/rust/commit/734abe593dc09edaea0f24978acf4f4270337361"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "87e02e8a76344b36f6829036eab8490aff33c5db", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77f85460e6179e1df01ec3c4f015a572b983be80/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f85460e6179e1df01ec3c4f015a572b983be80/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=77f85460e6179e1df01ec3c4f015a572b983be80", "patch": "@@ -955,15 +955,16 @@ fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     auto cxx = cx.fcx.ccx;\n     auto lltaskptr = cx.build.PtrToInt(cx.fcx.lltaskptr, T_int());\n     auto args2 = vec(lltaskptr) + args;\n-    auto t = trans_native(cx.build, cxx.glues, lltaskptr,\n-                          cxx.externs, cxx.tn, cxx.llmod, name, true, args2);\n+    auto t = trans_native_call(cx.build, cxx.glues, lltaskptr,\n+                               cxx.externs, cxx.tn, cxx.llmod, name,\n+                               true, args2);\n     ret res(cx, t);\n }\n \n-fn trans_native(builder b, @glue_fns glues, ValueRef lltaskptr,\n-                &hashmap[str, ValueRef] externs,\n-                type_names tn, ModuleRef llmod, str name,\n-                bool pass_task, vec[ValueRef] args) -> ValueRef {\n+fn trans_native_call(builder b, @glue_fns glues, ValueRef lltaskptr,\n+                     &hashmap[str, ValueRef] externs,\n+                     type_names tn, ModuleRef llmod, str name,\n+                     bool pass_task, vec[ValueRef] args) -> ValueRef {\n     let int n = (_vec.len[ValueRef](args) as int);\n     let ValueRef llnative = get_simple_extern_fn(externs, llmod, name, n);\n     llnative = llvm.LLVMConstPointerCast(llnative, T_int());\n@@ -6023,7 +6024,7 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n             arg_n += 1u;\n         }\n \n-        r = trans_native(bcx.build, cx.glues, lltaskptr, cx.externs,\n+        r = trans_native_call(bcx.build, cx.glues, lltaskptr, cx.externs,\n                               cx.tn, cx.llmod, name, pass_task, call_args);\n         rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n     }\n@@ -6173,7 +6174,6 @@ fn collect_tag_ctors(@crate_ctxt cx, @ast.crate crate) {\n     fold.fold_crate[@crate_ctxt](cx, fld, crate);\n }\n \n-\n // The constant translation pass.\n \n fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n@@ -6263,8 +6263,8 @@ fn trans_exit_task_glue(@glue_fns glues,\n     auto build = new_builder(entrybb);\n     auto tptr = build.PtrToInt(lltaskptr, T_int());\n     auto V_args2 = vec(tptr) + V_args;\n-    trans_native(build, glues, lltaskptr,\n-                 externs, tn, llmod, \"upcall_exit\", true, V_args2);\n+    trans_native_call(build, glues, lltaskptr,\n+                      externs, tn, llmod, \"upcall_exit\", true, V_args2);\n     build.RetVoid();\n }\n "}]}