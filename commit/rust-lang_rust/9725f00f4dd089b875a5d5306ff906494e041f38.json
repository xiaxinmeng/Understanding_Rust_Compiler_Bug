{"sha": "9725f00f4dd089b875a5d5306ff906494e041f38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MjVmMDBmNGRkMDg5Yjg3NWE1ZDUzMDZmZjkwNjQ5NGUwNDFmMzg=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-27T13:27:55Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-27T13:27:55Z"}, "message": "Use the `From` trait to make `MinifyingSugg`", "tree": {"sha": "9c1960aafbdc31f1189efdfa772c8c7ce6bd6631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1960aafbdc31f1189efdfa772c8c7ce6bd6631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9725f00f4dd089b875a5d5306ff906494e041f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9725f00f4dd089b875a5d5306ff906494e041f38", "html_url": "https://github.com/rust-lang/rust/commit/9725f00f4dd089b875a5d5306ff906494e041f38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9725f00f4dd089b875a5d5306ff906494e041f38/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99aceebf1c7cb382e18d66914bd9f576e529aa99", "url": "https://api.github.com/repos/rust-lang/rust/commits/99aceebf1c7cb382e18d66914bd9f576e529aa99", "html_url": "https://github.com/rust-lang/rust/commit/99aceebf1c7cb382e18d66914bd9f576e529aa99"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "215700fed8cd2b4b83293d24942d538b55556017", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9725f00f4dd089b875a5d5306ff906494e041f38/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9725f00f4dd089b875a5d5306ff906494e041f38/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9725f00f4dd089b875a5d5306ff906494e041f38", "patch": "@@ -817,22 +817,22 @@ struct Offset {\n }\n \n impl Offset {\n-    fn negative(value: MinifyingSugg<'static>) -> Self {\n+    fn negative(value: Sugg<'static>) -> Self {\n         Self {\n-            value,\n+            value: value.into(),\n             sign: OffsetSign::Negative,\n         }\n     }\n \n-    fn positive(value: MinifyingSugg<'static>) -> Self {\n+    fn positive(value: Sugg<'static>) -> Self {\n         Self {\n-            value,\n+            value: value.into(),\n             sign: OffsetSign::Positive,\n         }\n     }\n \n     fn empty() -> Self {\n-        Self::positive(MinifyingSugg::non_paren(\"0\"))\n+        Self::positive(sugg::ZERO)\n     }\n }\n \n@@ -844,30 +844,22 @@ fn apply_offset(lhs: &MinifyingSugg<'static>, rhs: &Offset) -> MinifyingSugg<'st\n }\n \n #[derive(Clone)]\n-struct MinifyingSugg<'a>(sugg::Sugg<'a>);\n-\n-impl std::fmt::Display for MinifyingSugg<'_> {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n-        std::fmt::Display::fmt(&self.0, f)\n-    }\n-}\n+struct MinifyingSugg<'a>(Sugg<'a>);\n \n impl<'a> MinifyingSugg<'a> {\n     fn as_str(&self) -> &str {\n-        let sugg::Sugg::NonParen(s) | sugg::Sugg::MaybeParen(s) | sugg::Sugg::BinOp(_, s) = &self.0;\n+        let Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s) = &self.0;\n         s.as_ref()\n     }\n \n-    fn hir(cx: &LateContext<'_>, expr: &Expr<'_>, default: &'a str) -> Self {\n-        Self(sugg::Sugg::hir(cx, expr, default))\n-    }\n-\n-    fn maybe_par(self) -> Self {\n-        Self(self.0.maybe_par())\n+    fn into_sugg(self) -> Sugg<'a> {\n+        self.0\n     }\n+}\n \n-    fn non_paren(str: impl Into<std::borrow::Cow<'a, str>>) -> Self {\n-        Self(sugg::Sugg::NonParen(str.into()))\n+impl<'a> From<Sugg<'a>> for MinifyingSugg<'a> {\n+    fn from(sugg: Sugg<'a>) -> Self {\n+        Self(sugg)\n     }\n }\n \n@@ -877,7 +869,7 @@ impl std::ops::Add for &MinifyingSugg<'static> {\n         match (self.as_str(), rhs.as_str()) {\n             (\"0\", _) => rhs.clone(),\n             (_, \"0\") => self.clone(),\n-            (_, _) => MinifyingSugg(&self.0 + &rhs.0),\n+            (_, _) => (&self.0 + &rhs.0).into(),\n         }\n     }\n }\n@@ -887,9 +879,9 @@ impl std::ops::Sub for &MinifyingSugg<'static> {\n     fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n         match (self.as_str(), rhs.as_str()) {\n             (_, \"0\") => self.clone(),\n-            (\"0\", _) => MinifyingSugg(-(rhs.0.clone())),\n-            (x, y) if x == y => MinifyingSugg::non_paren(\"0\"),\n-            (_, _) => MinifyingSugg(&self.0 - &rhs.0),\n+            (\"0\", _) => (-rhs.0.clone()).into(),\n+            (x, y) if x == y => sugg::ZERO.into(),\n+            (_, _) => (&self.0 - &rhs.0).into(),\n         }\n     }\n }\n@@ -900,7 +892,7 @@ impl std::ops::Add<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n         match (self.as_str(), rhs.as_str()) {\n             (\"0\", _) => rhs.clone(),\n             (_, \"0\") => self,\n-            (_, _) => MinifyingSugg(self.0 + &rhs.0),\n+            (_, _) => (self.0 + &rhs.0).into(),\n         }\n     }\n }\n@@ -910,9 +902,9 @@ impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n     fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n         match (self.as_str(), rhs.as_str()) {\n             (_, \"0\") => self,\n-            (\"0\", _) => MinifyingSugg(-(rhs.0.clone())),\n-            (x, y) if x == y => MinifyingSugg::non_paren(\"0\"),\n-            (_, _) => MinifyingSugg(self.0 - &rhs.0),\n+            (\"0\", _) => (-rhs.0.clone()).into(),\n+            (x, y) if x == y => sugg::ZERO.into(),\n+            (_, _) => (self.0 - &rhs.0).into(),\n         }\n     }\n }\n@@ -969,19 +961,15 @@ fn get_details_from_idx<'tcx>(\n         })\n     }\n \n-    fn get_offset<'tcx>(\n-        cx: &LateContext<'tcx>,\n-        e: &Expr<'_>,\n-        starts: &[Start<'tcx>],\n-    ) -> Option<MinifyingSugg<'static>> {\n+    fn get_offset<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>, starts: &[Start<'tcx>]) -> Option<Sugg<'static>> {\n         match &e.kind {\n             ExprKind::Lit(l) => match l.node {\n-                ast::LitKind::Int(x, _ty) => Some(MinifyingSugg::non_paren(x.to_string())),\n+                ast::LitKind::Int(x, _ty) => Some(Sugg::NonParen(x.to_string().into())),\n                 _ => None,\n             },\n             ExprKind::Path(..) if get_start(cx, e, starts).is_none() => {\n                 // `e` is always non paren as it's a `Path`\n-                Some(MinifyingSugg::non_paren(snippet(cx, e.span, \"???\")))\n+                Some(Sugg::NonParen(snippet(cx, e.span, \"???\")))\n             },\n             _ => None,\n         }\n@@ -1072,7 +1060,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n ) -> String {\n     fn print_offset(offset: MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n         if offset.as_str() == \"0\" {\n-            MinifyingSugg::non_paren(\"\")\n+            sugg::EMPTY.into()\n         } else {\n             offset\n         }\n@@ -1088,44 +1076,46 @@ fn build_manual_memcpy_suggestion<'tcx>(\n                 if var_def_id(cx, arg) == var_def_id(cx, base);\n                 then {\n                     if sugg.as_str() == end_str {\n-                        MinifyingSugg::non_paren(\"\")\n+                        sugg::EMPTY.into()\n                     } else {\n                         sugg\n                     }\n                 } else {\n                     match limits {\n                         ast::RangeLimits::Closed => {\n-                            sugg + &MinifyingSugg::non_paren(\"1\")\n+                            sugg + &sugg::ONE.into()\n                         },\n                         ast::RangeLimits::HalfOpen => sugg,\n                     }\n                 }\n             }\n         };\n \n-    let start_str = MinifyingSugg::hir(cx, start, \"\");\n-    let end_str = MinifyingSugg::hir(cx, end, \"\");\n+    let start_str = Sugg::hir(cx, start, \"\").into();\n+    let end_str: MinifyingSugg<'_> = Sugg::hir(cx, end, \"\").into();\n \n     let print_offset_and_limit = |idx_expr: &IndexExpr<'_>| match idx_expr.idx {\n         StartKind::Range => (\n-            print_offset(apply_offset(&start_str, &idx_expr.idx_offset)),\n+            print_offset(apply_offset(&start_str, &idx_expr.idx_offset)).into_sugg(),\n             print_limit(\n                 end,\n                 end_str.as_str(),\n                 idx_expr.base,\n                 apply_offset(&end_str, &idx_expr.idx_offset),\n-            ),\n+            )\n+            .into_sugg(),\n         ),\n         StartKind::Counter { initializer } => {\n-            let counter_start = MinifyingSugg::hir(cx, initializer, \"\");\n+            let counter_start = Sugg::hir(cx, initializer, \"\").into();\n             (\n-                print_offset(apply_offset(&counter_start, &idx_expr.idx_offset)),\n+                print_offset(apply_offset(&counter_start, &idx_expr.idx_offset)).into_sugg(),\n                 print_limit(\n                     end,\n                     end_str.as_str(),\n                     idx_expr.base,\n                     apply_offset(&end_str, &idx_expr.idx_offset) + &counter_start - &start_str,\n-                ),\n+                )\n+                .into_sugg(),\n             )\n         },\n     };\n@@ -1136,7 +1126,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     let dst_base_str = snippet(cx, dst.base.span, \"???\");\n     let src_base_str = snippet(cx, src.base.span, \"???\");\n \n-    let dst = if dst_offset.as_str() == \"\" && dst_limit.as_str() == \"\" {\n+    let dst = if dst_offset == sugg::EMPTY && dst_limit == sugg::EMPTY {\n         dst_base_str\n     } else {\n         format!("}, {"sha": "0b2cb667bf4130edeafc5c67cea36e96799091b5", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9725f00f4dd089b875a5d5306ff906494e041f38/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9725f00f4dd089b875a5d5306ff906494e041f38/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=9725f00f4dd089b875a5d5306ff906494e041f38", "patch": "@@ -16,7 +16,7 @@ use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq)]\n pub enum Sugg<'a> {\n     /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n@@ -27,8 +27,12 @@ pub enum Sugg<'a> {\n     BinOp(AssocOp, Cow<'a, str>),\n }\n \n+/// Literal constant `0`, for convenience.\n+pub const ZERO: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"0\"));\n /// Literal constant `1`, for convenience.\n pub const ONE: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"1\"));\n+/// a constant represents an empty string, for convenience.\n+pub const EMPTY: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"\"));\n \n impl Display for Sugg<'_> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {"}]}