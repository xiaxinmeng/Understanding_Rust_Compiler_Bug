{"sha": "cef6aee369b4fe79c72602711f8b535ed6327bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZjZhZWUzNjliNGZlNzljNzI2MDI3MTFmOGI1MzVlZDYzMjdiYmE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-20T13:30:09Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:52Z"}, "message": "Don\u2019t generate landing-pads if -Z no-landing-pads", "tree": {"sha": "0325e183fff7348c08963df58b3fd8d0f4fd7f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0325e183fff7348c08963df58b3fd8d0f4fd7f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef6aee369b4fe79c72602711f8b535ed6327bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef6aee369b4fe79c72602711f8b535ed6327bba", "html_url": "https://github.com/rust-lang/rust/commit/cef6aee369b4fe79c72602711f8b535ed6327bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef6aee369b4fe79c72602711f8b535ed6327bba/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ec53a0d38588044f32e35074c81e60b8d3a6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ec53a0d38588044f32e35074c81e60b8d3a6ad", "html_url": "https://github.com/rust-lang/rust/commit/20ec53a0d38588044f32e35074c81e60b8d3a6ad"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "fa3573b383b685909ff89585f5cef3a74f3b2021", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=cef6aee369b4fe79c72602711f8b535ed6327bba", "patch": "@@ -192,6 +192,7 @@ impl Debug for BasicBlock {\n pub struct BasicBlockData<'tcx> {\n     pub statements: Vec<Statement<'tcx>>,\n     pub terminator: Option<Terminator<'tcx>>,\n+    pub is_cleanup: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -341,6 +342,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n         BasicBlockData {\n             statements: vec![],\n             terminator: terminator,\n+            is_cleanup: false,\n         }\n     }\n "}, {"sha": "080b979c1ecc23c1781a82bd5b95796b1e0dd143", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=cef6aee369b4fe79c72602711f8b535ed6327bba", "patch": "@@ -251,6 +251,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 continue;\n             } else {\n                 let new_block = self.cfg.start_new_block();\n+                self.cfg.block_data_mut(new_block).is_cleanup = true;\n                 self.cfg.terminate(new_block, terminator);\n                 terminator = Terminator::Goto { target: new_block };\n                 for &(kind, span, ref lvalue) in scope.drops.iter().rev() {"}, {"sha": "a6e6d3042205093ab7ce9769e1ed3b80bb272d48", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=cef6aee369b4fe79c72602711f8b535ed6327bba", "patch": "@@ -958,22 +958,28 @@ pub fn wants_msvc_seh(sess: &Session) -> bool {\n     sess.target.target.options.is_like_msvc && sess.target.target.arch == \"x86\"\n }\n \n-pub fn need_invoke(bcx: Block) -> bool {\n+pub fn avoid_invoke(bcx: Block) -> bool {\n     // FIXME(#25869) currently SEH-based unwinding is pretty buggy in LLVM and\n     //               is being overhauled as this is being written. Until that\n     //               time such that upstream LLVM's implementation is more solid\n     //               and we start binding it we need to skip invokes for any\n     //               target which wants SEH-based unwinding.\n     if bcx.sess().no_landing_pads() || wants_msvc_seh(bcx.sess()) {\n-        return false;\n+        true\n+    } else if bcx.is_lpad {\n+        // Avoid using invoke if we are already inside a landing pad.\n+        true\n+    } else {\n+        false\n     }\n+}\n \n-    // Avoid using invoke if we are already inside a landing pad.\n-    if bcx.is_lpad {\n-        return false;\n+pub fn need_invoke(bcx: Block) -> bool {\n+    if avoid_invoke(bcx) {\n+        false\n+    } else {\n+        bcx.fcx.needs_invoke()\n     }\n-\n-    bcx.fcx.needs_invoke()\n }\n \n pub fn load_if_immediate<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, t: Ty<'tcx>) -> ValueRef {"}, {"sha": "55117a6db39578e99c05a0cf8f199dfe5c3f759e", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=cef6aee369b4fe79c72602711f8b535ed6327bba", "patch": "@@ -128,19 +128,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 let debugloc = DebugLoc::None;\n                 let attrs = attributes::from_fn_type(bcx.ccx(), callee.ty);\n-                match *targets {\n-                    mir::CallTargets::Return(ret) => {\n-                        let llret = build::Call(bcx,\n-                                                callee.immediate(),\n-                                                &llargs[..],\n-                                                Some(attrs),\n-                                                debugloc);\n-                        if !return_outptr && !common::type_is_zero_size(bcx.ccx(), ret_ty) {\n-                            base::store_ty(bcx, llret, call_dest.llval, ret_ty);\n-                        }\n-                        build::Br(bcx, self.llblock(ret), debugloc)\n-                    }\n-                    mir::CallTargets::WithCleanup((ret, cleanup)) => {\n+                match (*targets, base::avoid_invoke(bcx)) {\n+                    (mir::CallTargets::WithCleanup((ret, cleanup)), false) => {\n+                        let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         build::Invoke(bcx,\n                                       callee.immediate(),\n@@ -153,6 +143,26 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             // FIXME: What do we do here?\n                             unimplemented!()\n                         }\n+                    },\n+                    (t, _) => {\n+                        let ret = match t {\n+                            mir::CallTargets::Return(ret) => ret,\n+                            mir::CallTargets::WithCleanup((ret, _)) => {\n+                                // make a landing pad regardless (so it sets the personality slot.\n+                                let block = self.unreachable_block();\n+                                self.make_landing_pad(block);\n+                                ret\n+                            }\n+                        };\n+                        let llret = build::Call(bcx,\n+                                                callee.immediate(),\n+                                                &llargs[..],\n+                                                Some(attrs),\n+                                                debugloc);\n+                        if !return_outptr && !common::type_is_zero_size(bcx.ccx(), ret_ty) {\n+                            base::store_ty(bcx, llret, call_dest.llval, ret_ty);\n+                        }\n+                        build::Br(bcx, self.llblock(ret), debugloc)\n                     }\n                 }\n             },\n@@ -171,12 +181,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n                 let debugloc = DebugLoc::None;\n                 let attrs = attributes::from_fn_type(bcx.ccx(), callee.ty);\n-                match *cleanup {\n-                    None => {\n-                        build::Call(bcx, callee.immediate(), &llargs[..], Some(attrs), debugloc);\n-                        build::Unreachable(bcx);\n-                    }\n-                    Some(cleanup) => {\n+                match (*cleanup, base::avoid_invoke(bcx)) {\n+                    (Some(cleanup), false) => {\n+                        let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let unreachable = self.unreachable_block();\n                         build::Invoke(bcx,\n@@ -187,13 +194,22 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                       Some(attrs),\n                                       debugloc);\n                     }\n+                    (t, _) => {\n+                        if t.is_some() {\n+                            // make a landing pad regardless, so it sets the personality slot.\n+                            let block = self.unreachable_block();\n+                            self.make_landing_pad(block);\n+                        }\n+                        build::Call(bcx, callee.immediate(), &llargs[..], Some(attrs), debugloc);\n+                        build::Unreachable(bcx);\n+                    }\n                 }\n             }\n         }\n     }\n \n-    fn make_landing_pad(&mut self, cleanup: mir::BasicBlock) -> Block<'bcx, 'tcx> {\n-        let bcx = self.bcx(cleanup).fcx.new_block(true, \"cleanup\", None);\n+    fn make_landing_pad(&mut self, cleanup: Block<'bcx, 'tcx>) -> Block<'bcx, 'tcx> {\n+        let bcx = cleanup.fcx.new_block(true, \"cleanup\", None);\n         let ccx = bcx.ccx();\n         let llpersonality = bcx.fcx.eh_personality();\n         let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n@@ -208,7 +224,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 build::Store(bcx, llretval, personalityslot)\n             }\n         };\n-        build::Br(bcx, self.llblock(cleanup), DebugLoc::None);\n+        build::Br(bcx, cleanup.llbb, DebugLoc::None);\n         bcx\n     }\n "}, {"sha": "1aceb67dd12100191b7a21cda23cb41ba8fbb17a", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef6aee369b4fe79c72602711f8b535ed6327bba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=cef6aee369b4fe79c72602711f8b535ed6327bba", "patch": "@@ -113,7 +113,10 @@ pub fn trans_mir<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>) {\n     // Allocate a `Block` for every basic block\n     let block_bcxs: Vec<Block<'bcx,'tcx>> =\n         mir_blocks.iter()\n-                  .map(|&bb| fcx.new_block(false, &format!(\"{:?}\", bb), None))\n+                  .map(|&bb|{\n+                      let is_cleanup = mir.basic_block_data(bb).is_cleanup;\n+                      fcx.new_block(is_cleanup, &format!(\"{:?}\", bb), None)\n+                  })\n                   .collect();\n \n     // Branch to the START block"}]}