{"sha": "8cb207ae69700de3e782eec5cc9013c0987b2519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjIwN2FlNjk3MDBkZTNlNzgyZWVjNWNjOTAxM2MwOTg3YjI1MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-23T03:16:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-23T03:16:04Z"}, "message": "Auto merge of #86386 - inquisitivecrystal:better-errors-for-display-traits-v3, r=estebank\n\nBetter errors for Debug and Display traits\n\nCurrently, if someone tries to pass value that does not implement `Debug` or `Display` to a formatting macro, they get a very verbose and confusing error message. This PR changes the error messages for missing `Debug` and `Display` impls to be less overwhelming in this case, as suggested by #85844. I was a little less aggressive in changing the error message than that issue proposed. Still, this implementation would be enough to reduce the number of messages to be much more manageable.\n\nAfter this PR, information on the cause of an error involving a `Debug` or `Display` implementation would suppressed if the requirement originated within a standard library macro. My reasoning was that errors originating from within a macro are confusing when they mention details that the programmer can't see, and this is particularly problematic for `Debug` and `Display`, which are most often used via macros. It is possible that either a broader or a narrower criterion would be better. I'm quite open to any feedback.\n\nFixes #85844.", "tree": {"sha": "48662a79e550a300167565b7fd96a1fcff82e6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48662a79e550a300167565b7fd96a1fcff82e6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb207ae69700de3e782eec5cc9013c0987b2519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb207ae69700de3e782eec5cc9013c0987b2519", "html_url": "https://github.com/rust-lang/rust/commit/8cb207ae69700de3e782eec5cc9013c0987b2519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb207ae69700de3e782eec5cc9013c0987b2519/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574c9dd6f293784da0d89837f85abb1777a729ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/574c9dd6f293784da0d89837f85abb1777a729ad", "html_url": "https://github.com/rust-lang/rust/commit/574c9dd6f293784da0d89837f85abb1777a729ad"}, {"sha": "20ea5fedeab3834b2b2579c11c63e8b696de49ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ea5fedeab3834b2b2579c11c63e8b696de49ea", "html_url": "https://github.com/rust-lang/rust/commit/20ea5fedeab3834b2b2579c11c63e8b696de49ea"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "be4f12c6d1cb8fef662ea29185be1aefb6a5d062", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -478,6 +478,7 @@ symbols! {\n         discriminant_type,\n         discriminant_value,\n         dispatch_from_dyn,\n+        display_trait,\n         div,\n         div_assign,\n         doc,"}, {"sha": "e276d92bf5ac05619c8f5c0109d1fa098dcd3868", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -514,6 +514,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             }\n                         }\n \n+                        // Return early if the trait is Debug or Display and the invocation\n+                        // originates within a standard library macro, because the output\n+                        // is otherwise overwhelming and unhelpful (see #85844 for an\n+                        // example).\n+\n+                        let trait_is_debug =\n+                            self.tcx.is_diagnostic_item(sym::debug_trait, trait_ref.def_id());\n+                        let trait_is_display =\n+                            self.tcx.is_diagnostic_item(sym::display_trait, trait_ref.def_id());\n+\n+                        let in_std_macro =\n+                            match obligation.cause.span.ctxt().outer_expn_data().macro_def_id {\n+                                Some(macro_def_id) => {\n+                                    let crate_name = tcx.crate_name(macro_def_id.krate);\n+                                    crate_name == sym::std || crate_name == sym::core\n+                                }\n+                                None => false,\n+                            };\n+\n+                        if in_std_macro && (trait_is_debug || trait_is_display) {\n+                            err.emit();\n+                            return;\n+                        }\n+\n                         err\n                     }\n "}, {"sha": "409a84367a7d8de1fb8441ba2248bc81cf77b325", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -564,7 +564,7 @@ impl Display for Arguments<'_> {\n     on(\n         crate_local,\n         label = \"`{Self}` cannot be formatted using `{{:?}}`\",\n-        note = \"add `#[derive(Debug)]` or manually implement `{Debug}`\"\n+        note = \"add `#[derive(Debug)]` to `{Self}` or manually `impl {Debug} for {Self}`\"\n     ),\n     message = \"`{Self}` doesn't implement `{Debug}`\",\n     label = \"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\"\n@@ -662,6 +662,7 @@ pub use macros::Debug;\n     note = \"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"\n )]\n #[doc(alias = \"{}\")]\n+#[rustc_diagnostic_item = \"display_trait\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "ed71b99da0f52dcae1ba8a26e5052ead06c1c9f6", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -14,11 +14,6 @@ error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n    |\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   | \n-  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n-   |\n-LL |     T: fmt::Debug + ?Sized,\n-   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "78f62592960ffe844f4c9bb6d5384e09e970bb29", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `impl Sized` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n@@ -17,7 +16,6 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -30,7 +28,6 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n@@ -43,7 +40,6 @@ error[E0277]: `Y` doesn't implement `Debug`\n LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n@@ -56,7 +52,6 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n@@ -69,7 +64,6 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`\n    |"}, {"sha": "4ec89fe729f80720d173ada907db8a72a25cde29", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,9 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ `Error` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Error`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required because of the requirements on the impl of `Debug` for `&Error`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d564b6ad76b713660f54109008159b9aa2b22182", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,9 +5,7 @@ LL |      Error\n    |      ^^^^^ `Error` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Error`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required because of the requirements on the impl of `Debug` for `&Error`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "352141c7e336b2327f4c6bc3e410b52cc8841635", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,9 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ `Error` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Error`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required because of the requirements on the impl of `Debug` for `&Error`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "65765490183b8a994bb33e3f4bbeb638cea32f90", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,9 +5,7 @@ LL |     Error\n    |     ^^^^^ `Error` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Error`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required because of the requirements on the impl of `Debug` for `&Error`\n-   = note: required for the cast to the object type `dyn Debug`\n+   = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "46d1f9924118729cec7c2d3dce8171161d4a50c9", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -84,11 +84,6 @@ error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   | \n-  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n-   |\n-LL |     T: fmt::Debug + ?Sized,\n-   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "f074a99e5ecfb1dfe45058ff2d22d4f7c77976dc", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -28,11 +28,6 @@ LL | fn a() -> i32 {\n ...\n LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   | \n-  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n-   |\n-LL |     T: fmt::Debug + ?Sized,\n-   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n    = help: use parentheses to call the function: `a()`"}, {"sha": "b17c1d4c252085bf0f1eea4267d190020ddd7219", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,8 +5,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |                           ^^^ `Foo` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required by `std::fmt::Debug::fmt`\n+   = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `Debug`\n@@ -16,7 +15,6 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |                                ^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n@@ -27,7 +25,6 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Foo`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: required by `std::fmt::Display::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `std::fmt::Display`\n@@ -38,7 +35,6 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Bar`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: required by `std::fmt::Display::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "3cdab6541e7d10e62f980323407866a90dffc203", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -5,9 +5,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    |                       ^^^^^^^^^^^^^^ `NotDebug` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `NotDebug`\n-   = note: add `#[derive(Debug)]` or manually implement `Debug`\n-   = note: required because of the requirements on the impl of `Debug` for `&NotDebug`\n-   = note: required by `std::fmt::Debug::fmt`\n+   = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "25c73c4c8741af5b8ddf32949e18601f80e50bc0", "filename": "src/test/ui/suggestions/path-display.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb207ae69700de3e782eec5cc9013c0987b2519/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr?ref=8cb207ae69700de3e782eec5cc9013c0987b2519", "patch": "@@ -6,8 +6,6 @@ LL |     println!(\"{}\", path);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Path`\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n-   = note: required because of the requirements on the impl of `std::fmt::Display` for `&Path`\n-   = note: required by `std::fmt::Display::fmt`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}]}