{"sha": "a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MGExZDBlMGQwZDljZDQ3ZmU2MDcwYTc0NTBmYTgxY2NkMDg1NmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-17T00:54:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-17T00:54:18Z"}, "message": "Rollup merge of #60894 - cuviper:hash_set_entry, r=cramertj,Centril\n\nAdd entry-like methods to HashSet\n\n* `HashSet::get_or_insert`\n* `HashSet::get_or_insert_with`\n\nThese provide a simplification of the `Entry` API for `HashSet`, with\nnames chosen to match the similar methods on `Option`.", "tree": {"sha": "9e1badb00f6b3b89b907801b66d6343e3ef806eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e1badb00f6b3b89b907801b66d6343e3ef806eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc3gY7CRBK7hj4Ov3rIwAAdHIIAI7jRYay/TWTX6Op7r8Rj0X9\nkamGhOFDd+KiLXLTsRUYcZRn5aKRQSAwrOKqW4q8IljpgvpoVXiWCRweiCm860aK\npNh5cxV3nAzUOq7Dnot2zH3K+tT6T4zsGshh2PoTmcG/M0WgAY72VpjRrmYLugUp\ntVC2Pe7lobSmZGJhil+A6aY0KIt631KuVvy0QZkmKgwvYZjCK9eV5ug+YkAFoWae\nyocpIULfz98ApNvpy1as1Qc4s5cx8kRSf92JhBz4OU5pwpBK7AKgPK1gGtvB33XJ\nNyYX/ywOoT/806KDvfezLt+l7guJTxSvh/hWxKIlL+t72ExeW74qk4KVpG91SBk=\n=Fh3a\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e1badb00f6b3b89b907801b66d6343e3ef806eb\nparent 70b38d13a530a625725aa9a8cb7c959fa52e3747\nparent 9161a4dbefd613fd86fab4bfea88ad93c55fb4da\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558054458 +0200\ncommitter GitHub <noreply@github.com> 1558054458 +0200\n\nRollup merge of #60894 - cuviper:hash_set_entry, r=cramertj,Centril\n\nAdd entry-like methods to HashSet\n\n* `HashSet::get_or_insert`\n* `HashSet::get_or_insert_with`\n\nThese provide a simplification of the `Entry` API for `HashSet`, with\nnames chosen to match the similar methods on `Option`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d", "html_url": "https://github.com/rust-lang/rust/commit/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b38d13a530a625725aa9a8cb7c959fa52e3747", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b38d13a530a625725aa9a8cb7c959fa52e3747", "html_url": "https://github.com/rust-lang/rust/commit/70b38d13a530a625725aa9a8cb7c959fa52e3747"}, {"sha": "9161a4dbefd613fd86fab4bfea88ad93c55fb4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9161a4dbefd613fd86fab4bfea88ad93c55fb4da", "html_url": "https://github.com/rust-lang/rust/commit/9161a4dbefd613fd86fab4bfea88ad93c55fb4da"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "403914c070780a4822f14afd9f7056c5c2251532", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a80a1d0e0d0d9cd47fe6070a7450fa81ccd0856d", "patch": "@@ -618,6 +618,62 @@ impl<T, S> HashSet<T, S>\n         self.map.get_key_value(value).map(|(k, _)| k)\n     }\n \n+    /// Inserts the given `value` into the set if it is not present, then\n+    /// returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.len(), 3);\n+    /// assert_eq!(set.get_or_insert(2), &2);\n+    /// assert_eq!(set.get_or_insert(100), &100);\n+    /// assert_eq!(set.len(), 4); // 100 was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"60896\")]\n+    pub fn get_or_insert(&mut self, value: T) -> &T {\n+        // Although the raw entry gives us `&mut T`, we only return `&T` to be consistent with\n+        // `get`. Key mutation is \"raw\" because you're not supposed to affect `Eq` or `Hash`.\n+        self.map.raw_entry_mut().from_key(&value).or_insert(value, ()).0\n+    }\n+\n+    /// Inserts a value computed from `f` into the set if the given `value` is\n+    /// not present, then returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n+    ///     .iter().map(|&pet| pet.to_owned()).collect();\n+    ///\n+    /// assert_eq!(set.len(), 3);\n+    /// for &pet in &[\"cat\", \"dog\", \"fish\"] {\n+    ///     let value = set.get_or_insert_with(pet, str::to_owned);\n+    ///     assert_eq!(value, pet);\n+    /// }\n+    /// assert_eq!(set.len(), 4); // a new \"fish\" was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"60896\")]\n+    pub fn get_or_insert_with<Q: ?Sized, F>(&mut self, value: &Q, f: F) -> &T\n+        where T: Borrow<Q>,\n+              Q: Hash + Eq,\n+              F: FnOnce(&Q) -> T\n+    {\n+        // Although the raw entry gives us `&mut T`, we only return `&T` to be consistent with\n+        // `get`. Key mutation is \"raw\" because you're not supposed to affect `Eq` or `Hash`.\n+        self.map.raw_entry_mut().from_key(value).or_insert_with(|| (f(value), ())).0\n+    }\n+\n     /// Returns `true` if `self` has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///"}]}