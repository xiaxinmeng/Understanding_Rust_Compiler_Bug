{"sha": "a4f5f01b8aa92780e695d471e72e699ef10abe30", "node_id": "C_kwDOAAsO6NoAKGE0ZjVmMDFiOGFhOTI3ODBlNjk1ZDQ3MWU3MmU2OTllZjEwYWJlMzA", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-13T23:06:48Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-01-20T05:00:21Z"}, "message": "Use intrinsics for Mask::{to,from}_array\n\nThis significantly simplifies codegen and should improve mask perf.\n\nCo-authored-by: Jacob Lifshay <programmerjake@gmail.com>", "tree": {"sha": "e587311ec78739e90b6f9f7a340ad995317eb020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e587311ec78739e90b6f9f7a340ad995317eb020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4f5f01b8aa92780e695d471e72e699ef10abe30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f5f01b8aa92780e695d471e72e699ef10abe30", "html_url": "https://github.com/rust-lang/rust/commit/a4f5f01b8aa92780e695d471e72e699ef10abe30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4f5f01b8aa92780e695d471e72e699ef10abe30/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41db15373a72f5234fefae3b3dd2f95c874a1bfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/41db15373a72f5234fefae3b3dd2f95c874a1bfd", "html_url": "https://github.com/rust-lang/rust/commit/41db15373a72f5234fefae3b3dd2f95c874a1bfd"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "ae1fef53da88e571db159de9614c44163ad069bf", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a4f5f01b8aa92780e695d471e72e699ef10abe30/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f5f01b8aa92780e695d471e72e699ef10abe30/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=a4f5f01b8aa92780e695d471e72e699ef10abe30", "patch": "@@ -12,9 +12,10 @@\n )]\n mod mask_impl;\n \n+use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n use core::cmp::Ordering;\n-use core::fmt;\n+use core::{fmt, mem};\n \n mod sealed {\n     use super::*;\n@@ -105,22 +106,39 @@ where\n         Self(mask_impl::Mask::splat(value))\n     }\n \n-    /// Converts an array to a SIMD vector.\n+    /// Converts an array of bools to a SIMD mask.\n     pub fn from_array(array: [bool; LANES]) -> Self {\n-        let mut vector = Self::splat(false);\n-        for (i, v) in array.iter().enumerate() {\n-            vector.set(i, *v);\n+        // SAFETY: Rust's bool has a layout of 1 byte (u8) with a value of\n+        //     true:    0b_0000_0001\n+        //     false:   0b_0000_0000\n+        // Thus, an array of bools is also a valid array of bytes: [u8; N]\n+        // This would be hypothetically valid as an \"in-place\" transmute,\n+        // but these are \"dependently-sized\" types, so copy elision it is!\n+        unsafe {\n+            let bytes: [u8; LANES] = mem::transmute_copy(&array);\n+            let bools: Simd<i8, LANES> =\n+                intrinsics::simd_ne(Simd::from_array(bytes), Simd::splat(0u8));\n+            Mask::from_int_unchecked(intrinsics::simd_cast(bools))\n         }\n-        vector\n     }\n \n-    /// Converts a SIMD vector to an array.\n+    /// Converts a SIMD mask to an array of bools.\n     pub fn to_array(self) -> [bool; LANES] {\n-        let mut array = [false; LANES];\n-        for (i, v) in array.iter_mut().enumerate() {\n-            *v = self.test(i);\n+        // This follows mostly the same logic as from_array.\n+        // SAFETY: Rust's bool has a layout of 1 byte (u8) with a value of\n+        //     true:    0b_0000_0001\n+        //     false:   0b_0000_0000\n+        // Thus, an array of bools is also a valid array of bytes: [u8; N]\n+        // Since our masks are equal to integers where all bits are set,\n+        // we can simply convert them to i8s, and then bitand them by the\n+        // bitpattern for Rust's \"true\" bool.\n+        // This would be hypothetically valid as an \"in-place\" transmute,\n+        // but these are \"dependently-sized\" types, so copy elision it is!\n+        unsafe {\n+            let mut bytes: Simd<i8, LANES> = intrinsics::simd_cast(self.to_int());\n+            bytes &= Simd::splat(1i8);\n+            mem::transmute_copy(&bytes)\n         }\n-        array\n     }\n \n     /// Converts a vector of integers to a mask, where 0 represents `false` and -1"}]}