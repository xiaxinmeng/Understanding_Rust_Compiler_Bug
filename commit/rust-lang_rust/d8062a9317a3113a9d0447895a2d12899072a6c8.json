{"sha": "d8062a9317a3113a9d0447895a2d12899072a6c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDYyYTkzMTdhMzExM2E5ZDA0NDc4OTVhMmQxMjg5OTA3MmE2Yzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-11T19:16:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-11T19:16:57Z"}, "message": "Add more comprehensive diagnostics for irrefutable pattern error with constants\n\nFixes #7526", "tree": {"sha": "16e8904066bdff90e4b665288cec9a1aecc31f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e8904066bdff90e4b665288cec9a1aecc31f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8062a9317a3113a9d0447895a2d12899072a6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8062a9317a3113a9d0447895a2d12899072a6c8", "html_url": "https://github.com/rust-lang/rust/commit/d8062a9317a3113a9d0447895a2d12899072a6c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8062a9317a3113a9d0447895a2d12899072a6c8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c743a95d74da5af649a6c6b2608f5f65a0da716", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c743a95d74da5af649a6c6b2608f5f65a0da716", "html_url": "https://github.com/rust-lang/rust/commit/8c743a95d74da5af649a6c6b2608f5f65a0da716"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "aa5824b96a1203c873c1ac4d3f283ea3b50ef215", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8062a9317a3113a9d0447895a2d12899072a6c8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8062a9317a3113a9d0447895a2d12899072a6c8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d8062a9317a3113a9d0447895a2d12899072a6c8", "patch": "@@ -153,7 +153,7 @@ pub enum ResolutionError<'a> {\n     /// error E0413: declaration shadows an enum variant or unit-like struct in scope\n     DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n-    OnlyIrrefutablePatternsAllowedHere,\n+    OnlyIrrefutablePatternsAllowedHere(DefId, Name),\n     /// error E0415: identifier is bound more than once in this parameter list\n     IdentifierBoundMoreThanOnceInParameterList(&'a str),\n     /// error E0416: identifier is bound more than once in the same pattern\n@@ -283,8 +283,16 @@ fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syn\n                           scope\",\n                          name);\n         },\n-        ResolutionError::OnlyIrrefutablePatternsAllowedHere => {\n+        ResolutionError::OnlyIrrefutablePatternsAllowedHere(did, name) => {\n             span_err!(resolver.session, span, E0414, \"only irrefutable patterns allowed here\");\n+            resolver.session.span_note(span, \"there already is a constant in scope sharing the same name as this pattern\");\n+            if let Some(sp) = resolver.ast_map.span_if_local(did) {\n+                resolver.session.span_note(sp, \"constant defined here\");\n+            }\n+            if let Some(directive) = resolver.current_module.import_resolutions.borrow().get(&name) {\n+                let item = resolver.ast_map.expect_item(directive.value_id);\n+                resolver.session.span_note(item.span, \"constant imported here\");\n+            }\n         },\n         ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n             span_err!(resolver.session, span, E0415,\n@@ -632,7 +640,7 @@ enum NameSearchType {\n #[derive(Copy, Clone)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n-    FoundConst(Def, LastPrivate),\n+    FoundConst(Def, LastPrivate, Name),\n     BareIdentifierPatternUnresolved\n }\n \n@@ -2685,7 +2693,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     renamed)\n                             );\n                         }\n-                        FoundConst(def, lp) if const_ok => {\n+                        FoundConst(def, lp, _) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     constant\",\n                                    renamed);\n@@ -2700,11 +2708,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 depth: 0\n                             });\n                         }\n-                        FoundConst(..) => {\n+                        FoundConst(def, _, name) => {\n                             resolve_error(\n                                 self,\n                                 pattern.span,\n-                                ResolutionError::OnlyIrrefutablePatternsAllowedHere\n+                                ResolutionError::OnlyIrrefutablePatternsAllowedHere(def.def_id(), name)\n                             );\n                         }\n                         BareIdentifierPatternUnresolved => {\n@@ -2929,7 +2937,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 return FoundStructOrEnumVariant(def, LastMod(AllPublic));\n                             }\n                             def @ DefConst(..) | def @ DefAssociatedConst(..) => {\n-                                return FoundConst(def, LastMod(AllPublic));\n+                                return FoundConst(def, LastMod(AllPublic), name);\n                             }\n                             DefStatic(..) => {\n                                 resolve_error(self,"}]}