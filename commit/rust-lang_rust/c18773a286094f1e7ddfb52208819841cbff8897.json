{"sha": "c18773a286094f1e7ddfb52208819841cbff8897", "node_id": "C_kwDOAAsO6NoAKGMxODc3M2EyODYwOTRmMWU3ZGRmYjUyMjA4ODE5ODQxY2JmZjg4OTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T02:08:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T04:47:14Z"}, "message": "Make `mk_bound_region` closure more generic.\n\nThis is necessary for the subsequent commits.", "tree": {"sha": "e5d9e1c07dcac15748afbf36251f1bf997f1de61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5d9e1c07dcac15748afbf36251f1bf997f1de61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18773a286094f1e7ddfb52208819841cbff8897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18773a286094f1e7ddfb52208819841cbff8897", "html_url": "https://github.com/rust-lang/rust/commit/c18773a286094f1e7ddfb52208819841cbff8897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18773a286094f1e7ddfb52208819841cbff8897/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "722e07854a8ea7b276c802400ac7224f41aa6910", "url": "https://api.github.com/repos/rust-lang/rust/commits/722e07854a8ea7b276c802400ac7224f41aa6910", "html_url": "https://github.com/rust-lang/rust/commit/722e07854a8ea7b276c802400ac7224f41aa6910"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "161db618b6fe618f6724c42813e6766030658323", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c18773a286094f1e7ddfb52208819841cbff8897/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18773a286094f1e7ddfb52208819841cbff8897/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=c18773a286094f1e7ddfb52208819841cbff8897", "patch": "@@ -239,8 +239,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             // typeck had previously found constraints that would cause them to be related.\n \n             let mut counter = 0;\n-            let mut mk_bound_region = |span| {\n-                let kind = ty::BrAnon(span);\n+            let mut mk_bound_region = |kind| {\n                 let var = ty::BoundVar::from_u32(counter);\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n@@ -252,24 +251,24 @@ pub fn resolve_interior<'a, 'tcx>(\n                         let origin = fcx.region_var_origin(vid);\n                         match origin {\n                             RegionVariableOrigin::EarlyBoundRegion(span, _) => {\n-                                mk_bound_region(Some(span))\n+                                mk_bound_region(ty::BrAnon(Some(span)))\n                             }\n-                            _ => mk_bound_region(None),\n+                            _ => mk_bound_region(ty::BrAnon(None)),\n                         }\n                     }\n                     // FIXME: these should use `BrNamed`\n                     ty::ReEarlyBound(region) => {\n-                        mk_bound_region(Some(fcx.tcx.def_span(region.def_id)))\n+                        mk_bound_region(ty::BrAnon(Some(fcx.tcx.def_span(region.def_id))))\n                     }\n                     ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n                     | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n-                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(span),\n+                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(ty::BrAnon(span)),\n                         ty::BoundRegionKind::BrNamed(def_id, _) => {\n-                            mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n+                            mk_bound_region(ty::BrAnon(Some(fcx.tcx.def_span(def_id))))\n                         }\n-                        ty::BoundRegionKind::BrEnv => mk_bound_region(None),\n+                        ty::BoundRegionKind::BrEnv => mk_bound_region(ty::BrAnon(None)),\n                     },\n-                    _ => mk_bound_region(None),\n+                    _ => mk_bound_region(ty::BrAnon(None)),\n                 };\n                 let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n                 r"}]}