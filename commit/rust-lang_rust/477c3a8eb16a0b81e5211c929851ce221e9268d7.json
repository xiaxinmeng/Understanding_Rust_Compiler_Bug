{"sha": "477c3a8eb16a0b81e5211c929851ce221e9268d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3N2MzYThlYjE2YTBiODFlNTIxMWM5Mjk4NTFjZTIyMWU5MjY4ZDc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-24T06:22:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-24T06:22:07Z"}, "message": "Merge branch 'master' into tag-docs", "tree": {"sha": "151b99ccaff19d95abde0e79d18f9859be79b58e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/151b99ccaff19d95abde0e79d18f9859be79b58e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477c3a8eb16a0b81e5211c929851ce221e9268d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477c3a8eb16a0b81e5211c929851ce221e9268d7", "html_url": "https://github.com/rust-lang/rust/commit/477c3a8eb16a0b81e5211c929851ce221e9268d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477c3a8eb16a0b81e5211c929851ce221e9268d7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d5e79fd88bbf4db9f8b23005d8bb3e00296d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d5e79fd88bbf4db9f8b23005d8bb3e00296d41", "html_url": "https://github.com/rust-lang/rust/commit/c7d5e79fd88bbf4db9f8b23005d8bb3e00296d41"}, {"sha": "ab0eed34fd46bf7892a6668bfb137601d7d80c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0eed34fd46bf7892a6668bfb137601d7d80c39", "html_url": "https://github.com/rust-lang/rust/commit/ab0eed34fd46bf7892a6668bfb137601d7d80c39"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "16c6de59e49bad21bf597bfb0cf41f5311c57d59", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=477c3a8eb16a0b81e5211c929851ce221e9268d7", "patch": "@@ -0,0 +1,176 @@\n+#[doc = \"Prunes branches of the tree that are not exported\"];\n+\n+import rustc::syntax::ast;\n+import rustc::syntax::ast_util;\n+import rustc::middle::ast_map;\n+\n+export mk_pass;\n+\n+fn mk_pass() -> pass {\n+    run\n+}\n+\n+fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_mod: fold_mod\n+        with *fold::default_seq_fold(srv)\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n+    let doc = fold::default_seq_fold_mod(fold, doc);\n+    ~{\n+        mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n+        fns: doc::fnlist(exported_fns(fold.ctxt, doc))\n+        with *doc\n+    }\n+}\n+\n+fn exported_mods(srv: astsrv::srv, doc: doc::moddoc) -> [doc::moddoc] {\n+    exported_things(\n+        srv, doc,\n+        exported_mods_from_crate,\n+        exported_mods_from_mod\n+    )\n+}\n+\n+fn exported_fns(srv: astsrv::srv, doc: doc::moddoc) -> [doc::fndoc] {\n+    exported_things(\n+        srv, doc,\n+        exported_fns_from_crate,\n+        exported_fns_from_mod\n+    )\n+}\n+\n+fn exported_things<T>(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc,\n+    from_crate: fn(astsrv::srv, doc::moddoc) -> [T],\n+    from_mod: fn(astsrv::srv, doc::moddoc) -> [T]\n+) -> [T] {\n+    if doc.id == ast::crate_node_id {\n+        from_crate(srv, doc)\n+    } else {\n+        from_mod(srv, doc)\n+    }\n+}\n+\n+fn exported_mods_from_crate(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::moddoc] {\n+    exported_mods_from(srv, doc, is_exported_from_crate)\n+}\n+\n+fn exported_mods_from_mod(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::moddoc] {\n+    exported_mods_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+}\n+\n+fn exported_fns_from_crate(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::fndoc] {\n+    exported_fns_from(srv, doc, is_exported_from_crate)\n+}\n+\n+fn exported_fns_from_mod(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::fndoc] {\n+    exported_fns_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+}\n+\n+fn exported_fns_from(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::fndoc] {\n+    vec::filter_map(*doc.fns) { |doc|\n+        if is_exported(srv, doc.name) {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n+fn exported_mods_from(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::moddoc] {\n+    vec::filter_map(*doc.mods) { |doc|\n+        if is_exported(srv, doc.name) {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n+fn is_exported_from_mod(\n+    srv: astsrv::srv,\n+    mod_id: doc::ast_id,\n+    item_name: str\n+) -> bool {\n+    astsrv::exec(srv) {|ctxt|\n+        alt ctxt.map.get(mod_id) {\n+          ast_map::node_item(item) {\n+            alt item.node {\n+              ast::item_mod(m) {\n+                ast_util::is_exported(item_name, m)\n+              }\n+            }\n+          }\n+        }\n+    }\n+}\n+\n+fn is_exported_from_crate(\n+    srv: astsrv::srv,\n+    item_name: str\n+) -> bool {\n+    astsrv::exec(srv) {|ctxt|\n+        ast_util::is_exported(item_name, ctxt.ast.node.module)\n+    }\n+}\n+\n+#[test]\n+fn should_prune_unexported_fns() {\n+    let source = \"mod b { export a; fn a() { } fn b() { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.mods[0].fns) == 1u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_modules() {\n+    let source = \"mod a { export a; mod a { } mod b { } }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.mods[0].mods) == 1u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_fns_from_top_mod() {\n+    let source = \"export a; fn a() { } fn b() { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.fns) == 1u;\n+}\n+\n+#[test]\n+fn should_prune_unexported_modules_from_top_mod() {\n+    let source = \"export a; mod a { } mod b { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert vec::len(*doc.topmod.mods) == 1u;\n+}"}, {"sha": "fe73191cd08d86478de5b12a40e6ceb0ea75886b", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=477c3a8eb16a0b81e5211c929851ce221e9268d7", "patch": "@@ -22,4 +22,5 @@ mod path_pass;\n mod attr_pass;\n mod tystr_pass;\n mod prune_undoc_pass;\n+mod prune_unexported_pass;\n mod astsrv;"}, {"sha": "7d43b73eb98b0cc803e8930163d99fe43c4a703f", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477c3a8eb16a0b81e5211c929851ce221e9268d7/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=477c3a8eb16a0b81e5211c929851ce221e9268d7", "patch": "@@ -92,6 +92,7 @@ fn run(source_file: str) {\n     let srv = astsrv::mk_srv_from_file(source_file);\n     let doc = extract::from_srv(srv, default_name);\n     run_passes(srv, doc, [\n+        prune_unexported_pass::mk_pass(),\n         tystr_pass::mk_pass(),\n         path_pass::mk_pass(),\n         attr_pass::mk_pass(),"}]}