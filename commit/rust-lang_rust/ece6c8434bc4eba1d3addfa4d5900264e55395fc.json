{"sha": "ece6c8434bc4eba1d3addfa4d5900264e55395fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTZjODQzNGJjNGViYTFkM2FkZGZhNGQ1OTAwMjY0ZTU1Mzk1ZmM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-20T12:08:41Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-04-22T18:00:50Z"}, "message": "cache attributes of items from foreign crates\n\nthis avoids parsing item attributes on each call to `item_attrs`, which takes\noff 33% (!) of translation time and 50% (!) of trans-item collection time.", "tree": {"sha": "5fe4185c3ba908c2eb5c9660111eb18f9d4918f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe4185c3ba908c2eb5c9660111eb18f9d4918f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece6c8434bc4eba1d3addfa4d5900264e55395fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece6c8434bc4eba1d3addfa4d5900264e55395fc", "html_url": "https://github.com/rust-lang/rust/commit/ece6c8434bc4eba1d3addfa4d5900264e55395fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece6c8434bc4eba1d3addfa4d5900264e55395fc/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd0e40b86d718d339b13f594242575c28e966f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd0e40b86d718d339b13f594242575c28e966f7", "html_url": "https://github.com/rust-lang/rust/commit/acd0e40b86d718d339b13f594242575c28e966f7"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "056af13016cf22797fb1624e2d0be77b8ffbd1d4", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -16,7 +16,6 @@\n             issue = \"27700\")]\n \n use core::{isize, usize};\n-#[cfg(not(test))]\n use core::intrinsics::{min_align_of_val, size_of_val};\n \n #[allow(improper_ctypes)]\n@@ -158,10 +157,9 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n     }\n }\n \n-#[cfg(not(test))]\n-#[lang = \"box_free\"]\n+#[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n+pub(crate) unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     let size = size_of_val(&*ptr);\n     let align = min_align_of_val(&*ptr);\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary."}, {"sha": "c70d82392f9148cd8357bed3695a0d04f2b68f86", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -87,6 +87,7 @@\n #![feature(needs_allocator)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n+#![cfg_attr(stage0, feature(pub_restricted))]\n #![feature(shared)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]"}, {"sha": "69e5351cad53d0707beb3fd4a5d7b35b1e739e77", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -239,7 +239,7 @@ use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n use core::convert::From;\n \n-use heap::deallocate;\n+use heap::{allocate, deallocate, box_free};\n use raw_vec::RawVec;\n \n struct RcBox<T: ?Sized> {\n@@ -248,7 +248,6 @@ struct RcBox<T: ?Sized> {\n     value: T,\n }\n \n-\n /// A single-threaded reference-counting pointer.\n ///\n /// See the [module-level documentation](./index.html) for more details.\n@@ -438,6 +437,38 @@ impl Rc<str> {\n     }\n }\n \n+impl<T> Rc<[T]> {\n+    /// Constructs a new `Rc<[T]>` from a `Box<[T]>`.\n+    #[doc(hidden)]\n+    #[unstable(feature = \"rustc_private\",\n+               reason = \"for internal use in rustc\",\n+               issue = \"0\")]\n+    pub fn __from_array(value: Box<[T]>) -> Rc<[T]> {\n+        unsafe {\n+            let ptr: *mut RcBox<[T]> =\n+                mem::transmute([mem::align_of::<RcBox<[T; 1]>>(), value.len()]);\n+            // FIXME(custom-DST): creating this invalid &[T] is dubiously defined,\n+            // we should have a better way of getting the size/align\n+            // of a DST from its unsized part.\n+            let ptr = allocate(size_of_val(&*ptr), align_of_val(&*ptr));\n+            let ptr: *mut RcBox<[T]> = mem::transmute([ptr as usize, value.len()]);\n+\n+            // Initialize the new RcBox.\n+            ptr::write(&mut (*ptr).strong, Cell::new(1));\n+            ptr::write(&mut (*ptr).weak, Cell::new(1));\n+            ptr::copy_nonoverlapping(\n+                value.as_ptr(),\n+                &mut (*ptr).value as *mut [T] as *mut T,\n+                value.len());\n+\n+            // Free the original allocation without freeing its (moved) contents.\n+            box_free(Box::into_raw(value));\n+\n+            Rc { ptr: Shared::new(ptr as *const _) }\n+        }\n+    }\n+}\n+\n impl<T: ?Sized> Rc<T> {\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///"}, {"sha": "16b31bdb074fa728566a954d011c7566935e24e6", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -188,7 +188,7 @@ pub trait CrateStore {\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n+    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]>;\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n \n     // trait info\n@@ -323,7 +323,7 @@ impl CrateStore for DummyCrateStore {\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n         { bug!(\"item_generics_cloned\") }\n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!(\"item_attrs\") }\n+    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]> { bug!(\"item_attrs\") }\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name> { bug!(\"fn_arg_names\") }\n \n     // trait info"}, {"sha": "cfff3d0e573603340808c3e73b98db8e8e30b3e4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -13,10 +13,7 @@ use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs};\n use util::ppaux;\n \n-use std::borrow::Cow;\n use std::fmt;\n-use syntax::ast;\n-\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Instance<'tcx> {\n@@ -59,7 +56,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn attrs<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> Cow<'tcx, [ast::Attribute]> {\n+    pub fn attrs<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n "}, {"sha": "7aa12429e5d74c85621651e971d3fe81e9472973", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -34,7 +34,6 @@ use ty::walk::TypeWalker;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use serialize::{self, Encodable, Encoder};\n-use std::borrow::Cow;\n use std::cell::{Cell, RefCell, Ref};\n use std::collections::BTreeMap;\n use std::cmp;\n@@ -2036,6 +2035,23 @@ impl BorrowKind {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub enum Attributes<'gcx> {\n+    Owned(Rc<[ast::Attribute]>),\n+    Borrowed(&'gcx [ast::Attribute])\n+}\n+\n+impl<'gcx> ::std::ops::Deref for Attributes<'gcx> {\n+    type Target = [ast::Attribute];\n+\n+    fn deref(&self) -> &[ast::Attribute] {\n+        match self {\n+            &Attributes::Owned(ref data) => &data,\n+            &Attributes::Borrowed(data) => data\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'gcx TypeckTables<'gcx> {\n         self.item_tables(self.hir.body_owner_def_id(body))\n@@ -2389,11 +2405,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Get the attributes of a definition.\n-    pub fn get_attrs(self, did: DefId) -> Cow<'gcx, [ast::Attribute]> {\n+    pub fn get_attrs(self, did: DefId) -> Attributes<'gcx> {\n         if let Some(id) = self.hir.as_local_node_id(did) {\n-            Cow::Borrowed(self.hir.attrs(id))\n+            Attributes::Borrowed(self.hir.attrs(id))\n         } else {\n-            Cow::Owned(self.sess.cstore.item_attrs(did))\n+            Attributes::Owned(self.sess.cstore.item_attrs(did))\n         }\n     }\n "}, {"sha": "438f482fa55c7bfbd90be456920f77f3edfbbbfd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -225,6 +225,8 @@ pub fn compile_input(sess: &Session,\n         sess.code_stats.borrow().print_type_sizes();\n     }\n \n+    if ::std::env::var(\"SKIP_LLVM\").is_ok() { ::std::process::exit(0); }\n+\n     let phase5_result = phase_5_run_llvm_passes(sess, &trans, &outputs);\n \n     controller_entry_point!(after_llvm,"}, {"sha": "7bc0e8a512be02eb589a1d3036c494dd72b31e3a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -326,6 +326,7 @@ impl<'a> CrateLoader<'a> {\n             cnum_map: RefCell::new(cnum_map),\n             cnum: cnum,\n             codemap_import_info: RefCell::new(vec![]),\n+            attribute_cache: RefCell::new([Vec::new(), Vec::new()]),\n             dep_kind: Cell::new(dep_kind),\n             source: cstore::CrateSource {\n                 dylib: dylib,"}, {"sha": "72ad1d75a5615761543ffdd61fd26b35a4fd2d38", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -72,6 +72,7 @@ pub struct CrateMetadata {\n     pub cnum_map: RefCell<CrateNumMap>,\n     pub cnum: CrateNum,\n     pub codemap_import_info: RefCell<Vec<ImportedFileMap>>,\n+    pub attribute_cache: RefCell<[Vec<Option<Rc<[ast::Attribute]>>>; 2]>,\n \n     pub root: schema::CrateRoot,\n \n@@ -269,7 +270,7 @@ impl CrateMetadata {\n     }\n \n     pub fn is_staged_api(&self) -> bool {\n-        for attr in self.get_item_attrs(CRATE_DEF_INDEX) {\n+        for attr in self.get_item_attrs(CRATE_DEF_INDEX).iter() {\n             if attr.path == \"stable\" || attr.path == \"unstable\" {\n                 return true;\n             }"}, {"sha": "e02c61f364646ddb35567b2e47861486dcea20ea", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -149,7 +149,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_generics(def.index)\n     }\n \n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>\n+    fn item_attrs(&self, def_id: DefId) -> Rc<[ast::Attribute]>\n     {\n         self.dep_graph.read(DepNode::MetaData(def_id));\n         self.get_crate_data(def_id.krate).get_item_attrs(def_id.index)\n@@ -406,7 +406,7 @@ impl CrateStore for cstore::CStore {\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index);\n-        for attr in &attrs {\n+        for attr in attrs.iter() {\n             attr::mark_used(attr);\n         }\n \n@@ -419,7 +419,7 @@ impl CrateStore for cstore::CStore {\n             ident: ast::Ident::with_empty_ctxt(name),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n-            attrs: attrs,\n+            attrs: attrs.iter().cloned().collect(),\n             node: ast::ItemKind::MacroDef(body.into()),\n             vis: ast::Visibility::Inherited,\n         })"}, {"sha": "2d562aceb65cd222e8db26cb82448a3e349e2c71", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6c8434bc4eba1d3addfa4d5900264e55395fc/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ece6c8434bc4eba1d3addfa4d5900264e55395fc", "patch": "@@ -31,6 +31,7 @@ use std::cell::Ref;\n use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n+use std::rc::Rc;\n use std::str;\n use std::u32;\n \n@@ -859,10 +860,18 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn get_item_attrs(&self, node_id: DefIndex) -> Vec<ast::Attribute> {\n+    pub fn get_item_attrs(&self, node_id: DefIndex) -> Rc<[ast::Attribute]> {\n+        let (node_as, node_index) =\n+            (node_id.address_space().index(), node_id.as_array_index());\n         if self.is_proc_macro(node_id) {\n-            return Vec::new();\n+            return Rc::new([]);\n         }\n+\n+        if let Some(&Some(ref val)) =\n+            self.attribute_cache.borrow()[node_as].get(node_index) {\n+            return val.clone();\n+        }\n+\n         // The attributes for a tuple struct are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n@@ -871,7 +880,13 @@ impl<'a, 'tcx> CrateMetadata {\n         if def_key.disambiguated_data.data == DefPathData::StructCtor {\n             item = self.entry(def_key.parent.unwrap());\n         }\n-        self.get_attributes(&item)\n+        let result = Rc::__from_array(self.get_attributes(&item).into_boxed_slice());\n+        let vec_ = &mut self.attribute_cache.borrow_mut()[node_as];\n+        if vec_.len() < node_index + 1 {\n+            vec_.resize(node_index + 1, None);\n+        }\n+        vec_[node_index] = Some(result.clone());\n+        result\n     }\n \n     pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> {"}]}