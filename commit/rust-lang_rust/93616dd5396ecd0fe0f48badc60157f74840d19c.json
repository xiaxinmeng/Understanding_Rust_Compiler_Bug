{"sha": "93616dd5396ecd0fe0f48badc60157f74840d19c", "node_id": "C_kwDOAAsO6NoAKDkzNjE2ZGQ1Mzk2ZWNkMGZlMGY0OGJhZGM2MDE1N2Y3NDg0MGQxOWM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T19:43:10Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "remove ItemLikeVisitor and DeepVisitor\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "79e03a1a86012c3ad420d7254db0bd3903b35fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e03a1a86012c3ad420d7254db0bd3903b35fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93616dd5396ecd0fe0f48badc60157f74840d19c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93616dd5396ecd0fe0f48badc60157f74840d19c", "html_url": "https://github.com/rust-lang/rust/commit/93616dd5396ecd0fe0f48badc60157f74840d19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93616dd5396ecd0fe0f48badc60157f74840d19c/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "html_url": "https://github.com/rust-lang/rust/commit/0b7dd95475d0150719cd859dbd6e2fe7092d83bd"}], "stats": {"total": 128, "additions": 15, "deletions": 113}, "files": [{"sha": "e6d8ad1c375cf80a751d8edeb60ea059e07bff5e", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -32,43 +32,12 @@\n //! example generator inference, and possibly also HIR borrowck.\n \n use crate::hir::*;\n-use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n+use crate::itemlikevisit::ParItemLikeVisitor;\n use rustc_ast::walk_list;\n use rustc_ast::{Attribute, Label};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n-pub struct DeepVisitor<'v, V> {\n-    visitor: &'v mut V,\n-}\n-\n-impl<'v, V> DeepVisitor<'v, V> {\n-    pub fn new(base: &'v mut V) -> Self {\n-        DeepVisitor { visitor: base }\n-    }\n-}\n-\n-impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir>,\n-{\n-    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-        self.visitor.visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n-        self.visitor.visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n-        self.visitor.visit_impl_item(impl_item);\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>) {\n-        self.visitor.visit_foreign_item(foreign_item);\n-    }\n-}\n-\n pub trait IntoVisitor<'hir> {\n     type Visitor: Visitor<'hir>;\n     fn into_visitor(&self) -> Self::Visitor;\n@@ -315,16 +284,6 @@ pub trait Visitor<'v>: Sized {\n         walk_body(self, b);\n     }\n \n-    /// When invoking `visit_all_item_likes()`, you need to supply an\n-    /// item-like visitor. This method converts an \"intra-visit\"\n-    /// visitor into an item-like visitor that walks the entire tree.\n-    /// If you use this, you probably don't want to process the\n-    /// contents of nested item-like things, since the outer loop will\n-    /// visit them as well.\n-    fn as_deep_visitor(&mut self) -> DeepVisitor<'_, Self> {\n-        DeepVisitor::new(self)\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n \n     fn visit_id(&mut self, _hir_id: HirId) {"}, {"sha": "a490268dc9f94d46b4b6d8edca2ade54a807e656", "filename": "compiler/rustc_hir/src/itemlikevisit.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -1,55 +1,5 @@\n use super::{ForeignItem, ImplItem, Item, TraitItem};\n \n-/// The \"item-like visitor\" defines only the top-level methods\n-/// that can be invoked by `Crate::visit_all_item_likes()`. Whether\n-/// this trait is the right one to implement will depend on the\n-/// overall pattern you need. Here are the three available patterns,\n-/// in roughly the order of desirability:\n-///\n-/// 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n-///    - Example: find all items with a `#[foo]` attribute on them.\n-///    - How: Implement `ItemLikeVisitor` and call `tcx.hir().visit_all_item_likes()`.\n-///    - Pro: Efficient; just walks the lists of item-like things, not the nodes themselves.\n-///    - Con: Don't get information about nesting\n-///    - Con: Don't have methods for specific bits of HIR, like \"on\n-///      every expr, do this\".\n-/// 2. **Deep visit**: Want to scan for specific kinds of HIR nodes within\n-///    an item, but don't care about how item-like things are nested\n-///    within one another.\n-///    - Example: Examine each expression to look for its type and do some check or other.\n-///    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n-///      `nested_filter::OnlyBodies` (and implement `nested_visit_map`), and use\n-///      `tcx.hir().visit_all_item_likes(&mut visitor.as_deep_visitor())`. Within your\n-///      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n-///      `intravisit::walk_expr()` to keep walking the subparts).\n-///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n-///    - Pro: Integrates well into dependency tracking.\n-///    - Con: Don't get information about nesting between items\n-/// 3. **Nested visit**: Want to visit the whole HIR and you care about the nesting between\n-///    item-like things.\n-///    - Example: Lifetime resolution, which wants to bring lifetimes declared on the\n-///      impl into scope while visiting the impl-items, and then back out again.\n-///    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n-///      `nested_filter::All` (and implement `nested_visit_map`). Walk your crate with\n-///      `tcx.hir().walk_toplevel_module(visitor)` invoked on `tcx.hir().krate()`.\n-///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n-///    - Pro: Preserves nesting information\n-///    - Con: Does not integrate well into dependency tracking.\n-///\n-/// Note: the methods of `ItemLikeVisitor` intentionally have no\n-/// defaults, so that as we expand the list of item-like things, we\n-/// revisit the various visitors to see if they need to change. This\n-/// is harder to do with `intravisit::Visitor`, so when you add a new\n-/// `visit_nested_foo()` method, it is recommended that you search for\n-/// existing `fn visit_nested` methods to see where changes are\n-/// needed.\n-pub trait ItemLikeVisitor<'hir> {\n-    fn visit_item(&mut self, item: &'hir Item<'hir>);\n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>);\n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>);\n-    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>);\n-}\n-\n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);"}, {"sha": "7cddd10203e2e80b67ec60f1e8d947515f760149", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -75,7 +75,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n             visitor.process_attrs(hir::CRATE_HIR_ID);\n-            tcx.hir().visit_all_item_likes(&mut visitor.as_deep_visitor());\n+            tcx.hir().visit_all_item_likes(&mut visitor);\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n "}, {"sha": "fb408f35398fa5ef03461fd74d064f24fb8640a3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -452,7 +452,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());\n+        self.tcx.hir().visit_all_item_likes(self);\n     }\n \n     fn encode_def_path_table(&mut self) {"}, {"sha": "7b444c7c84068ca853dfb211ba03ae237a25831d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -9,7 +9,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n@@ -616,7 +615,7 @@ impl<'hir> Map<'hir> {\n     /// visitor and then call `intravisit::walk_crate` instead.\n     pub fn visit_all_item_likes<V>(self, visitor: &mut V)\n     where\n-        V: itemlikevisit::ItemLikeVisitor<'hir>,\n+        V: Visitor<'hir>,\n     {\n         let krate = self.krate();\n         for owner in krate.owners.iter().filter_map(|i| i.as_owner()) {\n@@ -649,7 +648,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n     where\n-        V: ItemLikeVisitor<'hir>,\n+        V: Visitor<'hir>,\n     {\n         let module = self.tcx.hir_module_items(module);\n "}, {"sha": "40dbdbc687a62f6075dfd2d562e0b2432c0c1abf", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -170,7 +170,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n+    tcx.hir().visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set });\n \n     set\n }"}, {"sha": "0aaaf3df18530b14f4b376426f6d65b97fbdaef8", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -2384,7 +2384,7 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());"}, {"sha": "8bb6b08e9409168e9211066fbf8e74b0aaf94f7e", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -17,7 +17,7 @@ use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx }.as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "bd7bccf6ef1545e0f8bb62b3a157e624fd2f09f2", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -140,7 +140,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx).as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "4f904dd087489f2eeb3f8b266f37d4a6fec21c4e", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -33,7 +33,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n-        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal }.as_deep_visitor(),\n+        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal },\n     );\n }\n "}, {"sha": "a8f7d3df2dedfb539ab566e46571734e0d904b38", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -14,10 +14,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(\n-        module_def_id,\n-        &mut CheckNakedFunctions { tcx }.as_deep_visitor(),\n-    );\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n }\n \n crate fn provide(providers: &mut Providers) {"}, {"sha": "4cd5cf0cc23a75dbc858e3155aba176a95280af3", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -661,7 +661,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n@@ -837,7 +837,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n-        tcx.hir().visit_all_item_likes(&mut missing.as_deep_visitor());\n+        tcx.hir().visit_all_item_likes(&mut missing);\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;"}, {"sha": "81a4f6e547deb36d32596d5d980b70a2c44ba037", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -59,10 +59,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(\n-        module_def_id,\n-        &mut CollectItemTypesVisitor { tcx }.as_deep_visitor(),\n-    );\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "fc07f49f150ba6034840bf57f6a5ebdf70ef1078", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93616dd5396ecd0fe0f48badc60157f74840d19c/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93616dd5396ecd0fe0f48badc60157f74840d19c/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=93616dd5396ecd0fe0f48badc60157f74840d19c", "patch": "@@ -303,7 +303,7 @@ crate fn run(\n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n         let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n-        tcx.hir().visit_all_item_likes(&mut finder.as_deep_visitor());\n+        tcx.hir().visit_all_item_likes(&mut finder);\n \n         // Sort call locations within a given file in document order\n         for fn_calls in calls.values_mut() {"}]}