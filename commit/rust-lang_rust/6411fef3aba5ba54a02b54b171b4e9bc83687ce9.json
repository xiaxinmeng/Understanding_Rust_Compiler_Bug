{"sha": "6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "node_id": "C_kwDOAAsO6NoAKDY0MTFmZWYzYWJhNWJhNTRhMDJiNTRiMTcxYjRlOWJjODM2ODdjZTk", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-05-05T15:26:22Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-05-18T10:19:01Z"}, "message": "Properly apply path prefix remapping paths emitted into debuginfo.", "tree": {"sha": "9bd85eea74036c0f5b6dc32f074f4c72d105014e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd85eea74036c0f5b6dc32f074f4c72d105014e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "html_url": "https://github.com/rust-lang/rust/commit/6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7b0ff2e11fba83c5d87cf871e6531d94edb2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7b0ff2e11fba83c5d87cf871e6531d94edb2e5", "html_url": "https://github.com/rust-lang/rust/commit/9e7b0ff2e11fba83c5d87cf871e6531d94edb2e5"}], "stats": {"total": 266, "additions": 193, "deletions": 73}, "files": [{"sha": "97d3acb34ce75ee360eb4acfd0fd5f2e4a723916", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 95, "deletions": 67, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -36,20 +36,21 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, AdtKind, Instance, ParamEnv, Ty, TyCtxt, COMMON_VTABLE_ENTRIES};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::Symbol;\n+use rustc_span::FileName;\n use rustc_span::FileNameDisplayPreference;\n-use rustc_span::{self, SourceFile, SourceFileHash};\n+use rustc_span::{self, SourceFile};\n use rustc_target::abi::{Align, Size};\n use smallvec::smallvec;\n use tracing::debug;\n \n use libc::{c_longlong, c_uint};\n use std::borrow::Cow;\n-use std::collections::hash_map::Entry;\n use std::fmt::{self, Write};\n use std::hash::{Hash, Hasher};\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::ptr;\n+use tracing::instrument;\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {\n@@ -527,78 +528,105 @@ fn hex_encode(data: &[u8]) -> String {\n }\n \n pub fn file_metadata<'ll>(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll DIFile {\n-    debug!(\"file_metadata: file_name: {:?}\", source_file.name);\n-\n-    let hash = Some(&source_file.src_hash);\n-    let file_name = Some(source_file.name.prefer_remapped().to_string());\n-    let directory = if source_file.is_real_file() && !source_file.is_imported() {\n-        Some(\n-            cx.sess()\n-                .opts\n-                .working_dir\n-                .to_string_lossy(FileNameDisplayPreference::Remapped)\n-                .to_string(),\n-        )\n-    } else {\n-        // If the path comes from an upstream crate we assume it has been made\n-        // independent of the compiler's working directory one way or another.\n-        None\n-    };\n-    file_metadata_raw(cx, file_name, directory, hash)\n-}\n-\n-pub fn unknown_file_metadata<'ll>(cx: &CodegenCx<'ll, '_>) -> &'ll DIFile {\n-    file_metadata_raw(cx, None, None, None)\n-}\n-\n-fn file_metadata_raw<'ll>(\n-    cx: &CodegenCx<'ll, '_>,\n-    file_name: Option<String>,\n-    directory: Option<String>,\n-    hash: Option<&SourceFileHash>,\n-) -> &'ll DIFile {\n-    let key = (file_name, directory);\n-\n-    match debug_context(cx).created_files.borrow_mut().entry(key) {\n-        Entry::Occupied(o) => o.get(),\n-        Entry::Vacant(v) => {\n-            let (file_name, directory) = v.key();\n-            debug!(\"file_metadata: file_name: {:?}, directory: {:?}\", file_name, directory);\n-\n-            let file_name = file_name.as_deref().unwrap_or(\"<unknown>\");\n-            let directory = directory.as_deref().unwrap_or(\"\");\n-\n-            let (hash_kind, hash_value) = match hash {\n-                Some(hash) => {\n-                    let kind = match hash.kind {\n-                        rustc_span::SourceFileHashAlgorithm::Md5 => llvm::ChecksumKind::MD5,\n-                        rustc_span::SourceFileHashAlgorithm::Sha1 => llvm::ChecksumKind::SHA1,\n-                        rustc_span::SourceFileHashAlgorithm::Sha256 => llvm::ChecksumKind::SHA256,\n-                    };\n-                    (kind, hex_encode(hash.hash_bytes()))\n+    let cache_key = Some((source_file.name_hash, source_file.src_hash));\n+    return debug_context(cx)\n+        .created_files\n+        .borrow_mut()\n+        .entry(cache_key)\n+        .or_insert_with(|| alloc_new_file_metadata(cx, source_file));\n+\n+    #[instrument(skip(cx, source_file), level = \"debug\")]\n+    fn alloc_new_file_metadata<'ll>(\n+        cx: &CodegenCx<'ll, '_>,\n+        source_file: &SourceFile,\n+    ) -> &'ll DIFile {\n+        debug!(?source_file.name);\n+\n+        let (directory, file_name) = match &source_file.name {\n+            FileName::Real(filename) => {\n+                let working_directory = &cx.sess().opts.working_dir;\n+                debug!(?working_directory);\n+\n+                let filename = cx\n+                    .sess()\n+                    .source_map()\n+                    .path_mapping()\n+                    .to_embeddable_absolute_path(filename.clone(), working_directory);\n+\n+                // Construct the absolute path of the file\n+                let abs_path = filename.remapped_path_if_available();\n+                debug!(?abs_path);\n+\n+                if let Ok(rel_path) =\n+                    abs_path.strip_prefix(working_directory.remapped_path_if_available())\n+                {\n+                    // If the compiler's working directory (which also is the DW_AT_comp_dir of\n+                    // the compilation unit) is a prefix of the path we are about to emit, then\n+                    // only emit the part relative to the working directory.\n+                    // Because of path remapping we sometimes see strange things here: `abs_path`\n+                    // might actually look like a relative path\n+                    // (e.g. `<crate-name-and-version>/src/lib.rs`), so if we emit it without\n+                    // taking the working directory into account, downstream tooling will\n+                    // interpret it as `<working-directory>/<crate-name-and-version>/src/lib.rs`,\n+                    // which makes no sense. Usually in such cases the working directory will also\n+                    // be remapped to `<crate-name-and-version>` or some other prefix of the path\n+                    // we are remapping, so we end up with\n+                    // `<crate-name-and-version>/<crate-name-and-version>/src/lib.rs`.\n+                    // By moving the working directory portion into the `directory` part of the\n+                    // DIFile, we allow LLVM to emit just the relative path for DWARF, while\n+                    // still emitting the correct absolute path for CodeView.\n+                    (\n+                        working_directory.to_string_lossy(FileNameDisplayPreference::Remapped),\n+                        rel_path.to_string_lossy().into_owned(),\n+                    )\n+                } else {\n+                    (\"\".into(), abs_path.to_string_lossy().into_owned())\n                 }\n-                None => (llvm::ChecksumKind::None, String::new()),\n-            };\n+            }\n+            other => (\"\".into(), other.prefer_remapped().to_string_lossy().into_owned()),\n+        };\n \n-            let file_metadata = unsafe {\n-                llvm::LLVMRustDIBuilderCreateFile(\n-                    DIB(cx),\n-                    file_name.as_ptr().cast(),\n-                    file_name.len(),\n-                    directory.as_ptr().cast(),\n-                    directory.len(),\n-                    hash_kind,\n-                    hash_value.as_ptr().cast(),\n-                    hash_value.len(),\n-                )\n-            };\n+        let hash_kind = match source_file.src_hash.kind {\n+            rustc_span::SourceFileHashAlgorithm::Md5 => llvm::ChecksumKind::MD5,\n+            rustc_span::SourceFileHashAlgorithm::Sha1 => llvm::ChecksumKind::SHA1,\n+            rustc_span::SourceFileHashAlgorithm::Sha256 => llvm::ChecksumKind::SHA256,\n+        };\n+        let hash_value = hex_encode(source_file.src_hash.hash_bytes());\n \n-            v.insert(file_metadata);\n-            file_metadata\n+        unsafe {\n+            llvm::LLVMRustDIBuilderCreateFile(\n+                DIB(cx),\n+                file_name.as_ptr().cast(),\n+                file_name.len(),\n+                directory.as_ptr().cast(),\n+                directory.len(),\n+                hash_kind,\n+                hash_value.as_ptr().cast(),\n+                hash_value.len(),\n+            )\n         }\n     }\n }\n \n+pub fn unknown_file_metadata<'ll>(cx: &CodegenCx<'ll, '_>) -> &'ll DIFile {\n+    debug_context(cx).created_files.borrow_mut().entry(None).or_insert_with(|| unsafe {\n+        let file_name = \"<unknown>\";\n+        let directory = \"\";\n+        let hash_value = \"\";\n+\n+        llvm::LLVMRustDIBuilderCreateFile(\n+            DIB(cx),\n+            file_name.as_ptr().cast(),\n+            file_name.len(),\n+            directory.as_ptr().cast(),\n+            directory.len(),\n+            llvm::ChecksumKind::None,\n+            hash_value.as_ptr().cast(),\n+            hash_value.len(),\n+        )\n+    })\n+}\n+\n trait MsvcBasicName {\n     fn msvc_basic_name(self) -> &'static str;\n }"}, {"sha": "0910e7c94ea122579c798737a16e7d42983f1e25", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeFoldable};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, BytePos, Pos, SourceFile, SourceFileAndLine, Span};\n+use rustc_span::{self, BytePos, Pos, SourceFile, SourceFileAndLine, SourceFileHash, Span};\n use rustc_target::abi::Size;\n \n use libc::c_uint;\n@@ -61,7 +61,7 @@ pub struct CodegenUnitDebugContext<'ll, 'tcx> {\n     llcontext: &'ll llvm::Context,\n     llmod: &'ll llvm::Module,\n     builder: &'ll mut DIBuilder<'ll>,\n-    created_files: RefCell<FxHashMap<(Option<String>, Option<String>), &'ll DIFile>>,\n+    created_files: RefCell<FxHashMap<Option<(u128, SourceFileHash)>, &'ll DIFile>>,\n \n     type_map: metadata::TypeMap<'ll, 'tcx>,\n     namespace_map: RefCell<DefIdMap<&'ll DIScope>>,"}, {"sha": "086f1bd94b6c01475946e23f91b2422931289852", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -500,6 +500,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 (!source_file.is_imported() || self.is_proc_macro)\n             })\n             .map(|(_, source_file)| {\n+                // At export time we expand all source file paths to absolute paths because\n+                // downstream compilation sessions can have a different compiler working\n+                // directory, so relative paths from this or any other upstream crate\n+                // won't be valid anymore.\n+                //\n+                // At this point we also erase the actual on-disk path and only keep\n+                // the remapped version -- as is necessary for reproducible builds.\n                 match source_file.name {\n                     FileName::Real(ref original_file_name) => {\n                         let adapted_file_name ="}, {"sha": "1f4578c08a3f2443d6eb02d8171318f2f9692d24", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -335,8 +335,8 @@ impl fmt::Display for FileNameDisplay<'_> {\n     }\n }\n \n-impl FileNameDisplay<'_> {\n-    pub fn to_string_lossy(&self) -> Cow<'_, str> {\n+impl<'a> FileNameDisplay<'a> {\n+    pub fn to_string_lossy(&self) -> Cow<'a, str> {\n         match self.inner {\n             FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),\n             _ => Cow::from(format!(\"{}\", self)),\n@@ -1153,7 +1153,7 @@ impl FromStr for SourceFileHashAlgorithm {\n }\n \n /// The hash of the on-disk source file used for debug info.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub struct SourceFileHash {\n     pub kind: SourceFileHashAlgorithm,"}, {"sha": "020ae3ad0c78cf438c1f12f1571a7733c9afa5bf", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -1099,6 +1099,8 @@ impl FilePathMapping {\n     /// the path was affected by the mapping.\n     pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {\n         if path.as_os_str().is_empty() {\n+            // Exit early if the path is empty and therefore there's nothing to remap.\n+            // This is mostly to reduce spam for `RUSTC_LOG=[remap_path_prefix]`.\n             return (path, false);\n         }\n "}, {"sha": "16727f4398dff5c425fe9aaff6472beca5a0b0c2", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -2047,6 +2047,7 @@ impl Step for RustDev {\n             \"llvm-cov\",\n             \"llvm-dwp\",\n             \"llvm-nm\",\n+            \"llvm-dwarfdump\",\n         ] {\n             tarball.add_file(src_bindir.join(exe(bin, target)), \"bin\", 0o755);\n         }"}, {"sha": "381f11ff1efcc0265fef35d44600c28a503e2918", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -22,7 +22,7 @@ fn main() {\n }\n \n // Here we check that local debuginfo is mapped correctly.\n-// CHECK: !DIFile(filename: \"/the/src/remap_path_prefix/main.rs\", directory: \"/the/cwd\"\n+// CHECK: !DIFile(filename: \"/the/src/remap_path_prefix/main.rs\", directory: \"\"\n \n // And here that debuginfo from other crates are expanded to absolute paths.\n // CHECK: !DIFile(filename: \"/the/aux-src/remap_path_prefix_aux.rs\", directory: \"\""}, {"sha": "561a343d60b947368d82c5c5d1b78277cfeb23ab", "filename": "src/test/run-make/remap-path-prefix-dwarf/Makefile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2FMakefile?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -0,0 +1,77 @@\n+# This test makes sure that --remap-path-prefix has the expected effects on paths in debuginfo.\n+# It tests several cases, each of them has a detailed description attached to it.\n+\n+# ignore-windows\n+\n+SRC_DIR := $(abspath .)\n+SRC_DIR_PARENT := $(abspath ..)\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all: \\\n+  abs_input_outside_working_dir \\\n+  rel_input_remap_working_dir \\\n+  rel_input_remap_working_dir_parent \\\n+  rel_input_remap_working_dir_child \\\n+  abs_input_inside_working_dir \\\n+  abs_input_outside_working_dir\n+\n+# The compiler is called with an *ABSOLUTE PATH* as input, and that absolute path *is* within\n+# the working directory of the compiler. We are remapping the path that contains `src`.\n+abs_input_inside_working_dir:\n+\t# We explicitly switch to a directory that *is* a prefix of the directory our\n+\t# source code is contained in.\n+\tcd $(SRC_DIR) && $(RUSTC) $(SRC_DIR)/src/quux.rs -o \"$(TMPDIR)/abs_input_inside_working_dir.rlib\" -Cdebuginfo=2 --remap-path-prefix $(SRC_DIR)=REMAPPED\n+\t# We expect the path to the main source file to be remapped.\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump $(TMPDIR)/abs_input_inside_working_dir.rlib | $(CGREP) \"REMAPPED/src/quux.rs\"\n+\t# No weird duplication of remapped components (see #78479)\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump $(TMPDIR)/abs_input_inside_working_dir.rlib | $(CGREP) -v \"REMAPPED/REMAPPED\"\n+\n+# The compiler is called with an *ABSOLUTE PATH* as input, and that absolute path is *not* within\n+# the working directory of the compiler. We are remapping both the path that contains `src` and\n+# the working directory to the same thing. This setup corresponds to a workaround that is needed\n+# when trying to remap everything to something that looks like a local path.\n+# Relative paths are interpreted as relative to the compiler's working directory (e.g. in\n+# debuginfo). If we also remap the working directory, the compiler strip it from other paths so\n+# that the final outcome is the desired one again.\n+abs_input_outside_working_dir:\n+\t# We explicitly switch to a directory that is *not* a prefix of the directory our\n+\t# source code is contained in.\n+\tcd $(TMPDIR) && $(RUSTC) $(SRC_DIR)/src/quux.rs -o \"$(TMPDIR)/abs_input_outside_working_dir.rlib\" -Cdebuginfo=2 --remap-path-prefix $(SRC_DIR)=REMAPPED --remap-path-prefix $(TMPDIR)=REMAPPED\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump $(TMPDIR)/abs_input_outside_working_dir.rlib | $(CGREP) \"REMAPPED/src/quux.rs\"\n+\t# No weird duplication of remapped components (see #78479)\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump $(TMPDIR)/abs_input_outside_working_dir.rlib | $(CGREP) -v \"REMAPPED/REMAPPED\"\n+\n+# The compiler is called with a *RELATIVE PATH* as input. We are remapping the working directory of\n+# the compiler, which naturally is an implicit prefix of our relative input path. Debuginfo will\n+# expand the relative path to an absolute path and we expect the working directory to be remapped\n+# in that expansion.\n+rel_input_remap_working_dir:\n+\tcd $(SRC_DIR) && $(RUSTC) src/quux.rs -o \"$(TMPDIR)/rel_input_remap_working_dir.rlib\" -Cdebuginfo=2 --remap-path-prefix \"$(SRC_DIR)=REMAPPED\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir.rlib\" | $(CGREP) \"REMAPPED/src/quux.rs\"\n+\t# No weird duplication of remapped components (see #78479)\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir.rlib\" | $(CGREP) -v \"REMAPPED/REMAPPED\"\n+\n+# The compiler is called with a *RELATIVE PATH* as input. We are remapping a *SUB-DIRECTORY* of the\n+# compiler's working directory. This test makes sure that that directory is remapped even though it\n+# won't actually show up in this form in the compiler's SourceMap and instead is only constructed\n+# on demand during debuginfo generation.\n+rel_input_remap_working_dir_child:\n+\tcd $(SRC_DIR) && $(RUSTC) src/quux.rs -o \"$(TMPDIR)/rel_input_remap_working_dir_child.rlib\" -Cdebuginfo=2 --remap-path-prefix \"$(SRC_DIR)/src=REMAPPED\"\n+\t# We expect `src/quux.rs` to have been remapped to `REMAPPED/quux.rs`.\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_child.rlib\" | $(CGREP) \"REMAPPED/quux.rs\"\n+\t# We don't want to find the path that we just remapped anywhere in the DWARF\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_child.rlib\" | $(CGREP) -v \"$(SRC_DIR)/src\"\n+\t# No weird duplication of remapped components (see #78479)\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_child.rlib\" | $(CGREP) -v \"REMAPPED/REMAPPED\"\n+\n+# The compiler is called with a *RELATIVE PATH* as input. We are remapping a *PARENT DIRECTORY* of\n+# the compiler's working directory.\n+rel_input_remap_working_dir_parent:\n+\tcd $(SRC_DIR) && $(RUSTC) src/quux.rs -o \"$(TMPDIR)/rel_input_remap_working_dir_parent.rlib\" -Cdebuginfo=2 --remap-path-prefix \"$(SRC_DIR_PARENT)=REMAPPED\"\n+\t# We expect `src/quux.rs` to have been remapped to `REMAPPED/remap-path-prefix-dwarf/src/quux.rs`.\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_parent.rlib\" | $(CGREP) \"REMAPPED/remap-path-prefix-dwarf/src/quux.rs\"\n+\t# We don't want to find the path that we just remapped anywhere in the DWARF\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_parent.rlib\" | $(CGREP) -v \"$(SRC_DIR_PARENT)\"\n+\t# No weird duplication of remapped components (see #78479)\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump \"$(TMPDIR)/rel_input_remap_working_dir_parent.rlib\" | $(CGREP) -v \"REMAPPED/REMAPPED\""}, {"sha": "38d5ef6194cd210e197a193f4edc7f4f1314c25c", "filename": "src/test/run-make/remap-path-prefix-dwarf/src/quux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2Fsrc%2Fquux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6411fef3aba5ba54a02b54b171b4e9bc83687ce9/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2Fsrc%2Fquux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fremap-path-prefix-dwarf%2Fsrc%2Fquux.rs?ref=6411fef3aba5ba54a02b54b171b4e9bc83687ce9", "patch": "@@ -0,0 +1,5 @@\n+#![crate_type = \"rlib\"]\n+\n+pub fn foo() {\n+    println!(\"foo\");\n+}"}]}