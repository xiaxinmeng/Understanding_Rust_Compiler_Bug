{"sha": "a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNjhhZGY4ZTViZDExNjZiOWZkOTE1ZWQxZGI2NzQ4NzJmNWExYmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-29T14:30:34Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-29T14:30:34Z"}, "message": "Rollup merge of #27326 - steveklabnik:doc_show_use, r=Gankro\n\nIn spirit with https://internals.rust-lang.org/t/should-we-keep-including-obvious-imports-in-code-examples/2217, show the feature flags we're using in examples.\r\n\r\n(also one instance of 'use')", "tree": {"sha": "0bff3f548092867b8673da6d82aeaee05ce666fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bff3f548092867b8673da6d82aeaee05ce666fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "html_url": "https://github.com/rust-lang/rust/commit/a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fec7b7854b0598c82af68587ba163e406c3e17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fec7b7854b0598c82af68587ba163e406c3e17c", "html_url": "https://github.com/rust-lang/rust/commit/6fec7b7854b0598c82af68587ba163e406c3e17c"}, {"sha": "ba5fcb726fb88cc8393f48c9f46ba03fcadf0511", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5fcb726fb88cc8393f48c9f46ba03fcadf0511", "html_url": "https://github.com/rust-lang/rust/commit/ba5fcb726fb88cc8393f48c9f46ba03fcadf0511"}], "stats": {"total": 633, "additions": 419, "deletions": 214}, "files": [{"sha": "a7d9032c3c5368b6fced1cfe3bec75730217228d", "filename": "src/doc/trpl/choosing-your-guarantees.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -127,7 +127,8 @@ If a field is wrapped in `Cell`, it's a nice indicator that the chunk of data is\n stay the same between the time you first read it and when you intend to use it.\n \n ```rust\n-# use std::cell::Cell;\n+use std::cell::Cell;\n+\n let x = Cell::new(1);\n let y = &x;\n let z = &x;\n@@ -185,7 +186,8 @@ any other borrows active when a mutable borrow is active. If the programmer atte\n borrow, the thread will panic.\n \n ```rust\n-# use std::cell::RefCell;\n+use std::cell::RefCell;\n+\n let x = RefCell::new(vec![1,2,3,4]);\n {\n     println!(\"{:?}\", *x.borrow())"}, {"sha": "d1d836fe188ac3b021c410c1e17decd95352878d", "filename": "src/doc/trpl/intrinsics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fdoc%2Ftrpl%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fdoc%2Ftrpl%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fintrinsics.md?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -11,7 +11,7 @@ perform efficient pointer arithmetic, one would import those functions\n via a declaration like\n \n ```rust\n-# #![feature(intrinsics)]\n+#![feature(intrinsics)]\n # fn main() {}\n \n extern \"rust-intrinsic\" {"}, {"sha": "05308b3e9d85d07617531cfa55b5f5a07279e698", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -200,7 +200,8 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -337,7 +338,8 @@ impl<T: Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_unique)]\n+    /// #![feature(arc_unique)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let mut five = Arc::new(5);\n@@ -408,7 +410,8 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_unique, alloc)]\n+    /// #![feature(arc_unique, alloc)]\n+    ///\n     /// extern crate alloc;\n     /// # fn main() {\n     /// use alloc::arc::Arc;\n@@ -555,7 +558,8 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -599,7 +603,8 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::new(5).downgrade();\n@@ -626,7 +631,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "0c2e7eb6bb35c02d789ce891a1390e468c81901f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -75,7 +75,8 @@ use core::raw::{TraitObject};\n /// The following two examples are equivalent:\n ///\n /// ```\n-/// # #![feature(box_heap)]\n+/// #![feature(box_heap)]\n+///\n /// #![feature(box_syntax, placement_in_syntax)]\n /// use std::boxed::HEAP;\n ///\n@@ -241,7 +242,8 @@ impl<T : ?Sized> Box<T> {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(box_raw)]\n+    /// #![feature(box_raw)]\n+    ///\n     /// let seventeen = Box::new(17u32);\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n@@ -264,7 +266,8 @@ impl<T : ?Sized> Box<T> {\n ///\n /// # Examples\n /// ```\n-/// # #![feature(box_raw)]\n+/// #![feature(box_raw)]\n+///\n /// use std::boxed;\n ///\n /// let seventeen = Box::new(17u32);\n@@ -307,7 +310,8 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(box_raw)]\n+    /// #![feature(box_raw)]\n+    ///\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///"}, {"sha": "b4f993205d16b92733e35cecc9faa48ae0c3f5d7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -91,7 +91,8 @@\n //! documentation for more details on interior mutability.\n //!\n //! ```rust\n-//! # #![feature(rc_weak)]\n+//! #![feature(rc_weak)]\n+//!\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -227,7 +228,8 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(3);\n@@ -262,7 +264,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -292,7 +295,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -313,7 +317,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let mut x = Rc::new(3);\n@@ -353,7 +358,8 @@ pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { Rc::strong_count(this) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n@@ -373,7 +379,8 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool { Rc::is_unique(rc) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3);\n@@ -395,7 +402,8 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> { Rc::try_unwrap(rc) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3);\n@@ -419,7 +427,8 @@ impl<T: Clone> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let mut five = Rc::new(5);\n@@ -750,7 +759,8 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -778,7 +788,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -825,7 +836,8 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::new(5).downgrade();"}, {"sha": "ddf61918947cfe8b8531dbf5fd920dce3e9592d2", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -216,7 +216,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n@@ -236,7 +237,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -341,7 +343,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n     ///\n@@ -387,7 +390,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     /// heap.push(1);\n@@ -419,7 +423,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     ///\n@@ -445,7 +450,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n@@ -463,7 +469,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     ///\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);\n@@ -724,7 +731,8 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///"}, {"sha": "30f23e073f691ac17f02945c55c412e0525a06de", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 98, "deletions": 49, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -43,7 +43,8 @@\n //! [sieve]: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n //!\n //! ```\n-//! # #![feature(bitset, bitvec, range_inclusive, step_by)]\n+//! #![feature(bitset, bitvec, range_inclusive, step_by)]\n+//!\n //! use std::collections::{BitSet, BitVec};\n //! use std::iter;\n //!\n@@ -139,7 +140,8 @@ const FALSE: &'static bool = &false;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(bitvec)]\n+/// #![feature(bitvec)]\n+///\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);\n@@ -256,7 +258,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     /// let mut bv = BitVec::new();\n     /// ```\n@@ -271,7 +274,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_elem(10, false);\n@@ -312,7 +316,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000, 0b00010010]);\n@@ -355,7 +360,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_fn(5, |i| { i % 2 == 0 });\n@@ -374,7 +380,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -407,7 +414,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, false);\n@@ -430,7 +438,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -451,7 +460,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -480,7 +490,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -511,7 +522,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -542,7 +554,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -572,7 +585,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, true);\n@@ -597,7 +611,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01110100, 0b10010010]);\n@@ -614,7 +629,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec, append)]\n+    /// #![feature(bitvec, append)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut a = BitVec::from_bytes(&[0b10000000]);\n@@ -657,7 +673,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec, split_off)]\n+    /// #![feature(bitvec, split_off)]\n+    ///\n     /// use std::collections::BitVec;\n     /// let mut a = BitVec::new();\n     /// a.push(true);\n@@ -718,7 +735,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -736,7 +754,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -758,7 +777,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, true);\n@@ -806,7 +826,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000]);\n@@ -827,7 +848,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -854,7 +876,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -885,7 +908,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -908,7 +932,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -930,7 +955,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -981,7 +1007,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001001]);\n@@ -1012,7 +1039,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -1231,7 +1259,8 @@ impl<'a> IntoIterator for &'a BitVec {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(bitvec, bitset)]\n+/// #![feature(bitvec, bitset)]\n+///\n /// use std::collections::{BitSet, BitVec};\n ///\n /// // It's a regular set\n@@ -1335,7 +1364,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1352,7 +1382,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1370,7 +1401,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -1392,7 +1424,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1414,7 +1447,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1441,7 +1475,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1462,7 +1497,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1483,7 +1519,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1530,7 +1567,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1563,7 +1601,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let s = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01001010]));\n@@ -1585,7 +1624,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1615,7 +1655,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1646,7 +1687,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1684,7 +1726,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1712,7 +1755,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1736,7 +1780,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1761,7 +1806,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1794,7 +1840,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1818,7 +1865,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec, append)]\n+    /// #![feature(bitset, bitvec, append)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let mut a = BitSet::new();\n@@ -1849,7 +1897,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec, split_off)]\n+    /// #![feature(bitset, bitvec, split_off)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     /// let mut a = BitSet::new();\n     /// a.insert(2);"}, {"sha": "a5a0d864572d2bfb0c6eac7df63226705ddcf10c", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -1504,7 +1504,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -1531,7 +1532,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Excluded};\n     ///"}, {"sha": "596312e509edea09f556a5f08b04705ab63ccec5", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -141,7 +141,8 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///"}, {"sha": "7e16df6242fcc377dcc3f0eb8d0361dff69a686f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -172,7 +172,7 @@\n //! like:\n //!\n //! ```\n-//! # #![feature(fmt_flags)]\n+//! #![feature(fmt_flags)]\n //! use std::fmt;\n //!\n //! #[derive(Debug)]"}, {"sha": "32d6b3b95a4604f02829586ee7f302fa4f0a7627", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -784,7 +784,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(linked_list_extras)]\n+    /// #![feature(linked_list_extras)]\n+    ///\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n@@ -812,7 +813,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(linked_list_extras)]\n+    /// #![feature(linked_list_extras)]\n+    ///\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();"}, {"sha": "5ccf3973c28825b9a5eced76ac28616e9a25f09e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -887,7 +887,8 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -899,7 +900,8 @@ impl<T> [T] {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -924,7 +926,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -949,7 +952,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -973,7 +977,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(clone_from_slice)]\n+    /// #![feature(clone_from_slice)]\n+    ///\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -1004,7 +1009,8 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(move_from)]\n+    /// #![feature(move_from)]\n+    ///\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);"}, {"sha": "686e46fcbadbc544517b1b6812bf2bea860522ec", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -441,7 +441,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert!(s.is_char_boundary(0));\n     /// // start of `\u8001`\n@@ -545,7 +546,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(slice_chars)]\n+    /// #![feature(slice_chars)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.slice_chars(0, 4), \"L\u00f6we\");\n@@ -576,7 +578,8 @@ impl str {\n     /// done by `.chars()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// # #![feature(str_char, core)]\n+    /// #![feature(str_char, core)]\n+    ///\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVie\u0323\u0302t Nam\";\n@@ -633,7 +636,8 @@ impl str {\n     /// done by `.chars().rev()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// # #![feature(str_char, core)]\n+    /// #![feature(str_char, core)]\n+    ///\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVie\u0323\u0302t Nam\";\n@@ -679,7 +683,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at(1), 'b');\n     /// assert_eq!(s.char_at(2), '\u03c0');\n@@ -706,7 +711,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at_reverse(1), 'a');\n     /// assert_eq!(s.char_at_reverse(2), 'b');\n@@ -733,7 +739,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"\u0141o\u0301dz\u0301\"; // \\u{141}o\\u{301}dz\\u{301}\n     /// let (c, s1) = s.slice_shift_char().unwrap();\n     ///\n@@ -767,7 +774,8 @@ impl str {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(str_split_at)]\n+    /// #![feature(str_split_at)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let first_space = s.find(' ').unwrap_or(s.len());\n     /// let (a, b) = s.split_at(first_space);\n@@ -865,8 +873,9 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_words)]\n-    /// # #![allow(deprecated)]\n+    /// #![feature(str_words)]\n+    /// #![allow(deprecated)]\n+    ///\n     /// let some_words = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\";\n     /// let v: Vec<&str> = some_words.words().collect();\n     ///\n@@ -1021,7 +1030,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(unicode, core)]\n+    /// #![feature(unicode, core)]\n+    ///\n     /// let gr1 = \"a\\u{310}e\\u{301}o\\u{308}\\u{332}\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"];\n     ///\n@@ -1047,7 +1057,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(unicode, core)]\n+    /// #![feature(unicode, core)]\n+    ///\n     /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(usize, &str)>>();\n     /// let b: &[_] = &[(0, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")];\n     ///\n@@ -1585,7 +1596,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_match_indices)]\n+    /// #![feature(str_match_indices)]\n+    ///\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0, 3), (6, 9), (12, 15)]);\n     ///\n@@ -1629,7 +1641,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_match_indices)]\n+    /// #![feature(str_match_indices)]\n+    ///\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n     /// assert_eq!(v, [(12, 15), (6, 9), (0, 3)]);\n     ///\n@@ -1659,7 +1672,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(subslice_offset)]\n+    /// #![feature(subslice_offset)]\n+    ///\n     /// let string = \"a\\nb\\nc\";\n     /// let lines: Vec<&str> = string.lines().collect();\n     ///"}, {"sha": "0b441b42cdc14f727f908afde48540f71a34e6e5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -89,7 +89,8 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// let s = String::from(\"hello\");\n     /// assert_eq!(&s[..], \"hello\");\n     /// ```\n@@ -702,7 +703,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n     ///\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());"}, {"sha": "ceb40823686c82cabcd472e8dd35b6e7734bdbc7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -622,7 +622,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(append)]\n+    /// #![feature(append)]\n+    ///\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n@@ -661,7 +662,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n     ///\n     /// // Draining using `..` clears the whole vector.\n     /// let mut v = vec![1, 2, 3];\n@@ -759,7 +760,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(map_in_place)]\n+    /// #![feature(map_in_place)]\n+    ///\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(&w[..], &[3, 4, 5]);\n@@ -965,7 +967,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(split_off)]\n+    /// #![feature(split_off)]\n+    ///\n     /// let mut vec = vec![1,2,3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);\n@@ -1004,7 +1007,8 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_resize)]\n+    /// #![feature(vec_resize)]\n+    ///\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -1056,7 +1060,8 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_push_all)]\n+    /// #![feature(vec_push_all)]\n+    ///\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);"}, {"sha": "c6d0d946ab024e26a5f0da009d52031b8607d916", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -379,7 +379,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::with_capacity(15);\n@@ -455,7 +456,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -604,7 +606,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut v = VecDeque::new();\n@@ -847,7 +850,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -883,7 +887,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -919,7 +924,8 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1295,7 +1301,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(split_off)]\n+    /// #![feature(split_off)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1358,7 +1365,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(append)]\n+    /// #![feature(append)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1384,7 +1392,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_deque_retain)]\n+    /// #![feature(vec_deque_retain)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1419,7 +1428,8 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "51fda344c8829cdfa8b78e35d290c63e64849f59", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -35,7 +35,8 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(vecmap)]\n+/// #![feature(vecmap)]\n+///\n /// use std::collections::VecMap;\n ///\n /// let mut months = VecMap::new();\n@@ -135,7 +136,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// ```\n@@ -148,7 +150,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::with_capacity(10);\n     /// ```\n@@ -163,7 +166,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let map: VecMap<String> = VecMap::with_capacity(10);\n     /// assert!(map.capacity() >= 10);\n@@ -183,7 +187,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len(10);\n@@ -208,7 +213,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len_exact(10);\n@@ -248,7 +254,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -277,7 +284,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -307,7 +315,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, append)]\n+    /// #![feature(vecmap, append)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -343,7 +352,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, split_off)]\n+    /// #![feature(vecmap, split_off)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -400,7 +410,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, drain)]\n+    /// #![feature(vecmap, drain)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -428,7 +439,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -446,7 +458,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -464,7 +477,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -480,7 +494,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -505,7 +520,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -524,7 +540,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -552,7 +569,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -578,7 +596,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -600,7 +619,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, entry)]\n+    /// #![feature(vecmap, entry)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut count: VecMap<u32> = VecMap::new();\n@@ -778,7 +798,8 @@ impl<T> IntoIterator for VecMap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();"}, {"sha": "c443270d5f4051d96f023a1be961b989afed17ca", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -221,7 +221,8 @@ impl<T:Copy> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(as_unsafe_cell)]\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);\n@@ -589,7 +590,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// # Example\n     ///\n     /// ```\n-    /// # #![feature(cell_extras)]\n+    /// #![feature(cell_extras)]\n+    ///\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new((5, 'b'));"}, {"sha": "9d151abea787c97c6188dc8b4d19248566987ce4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -383,7 +383,8 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// assert_eq!(Some(1), cmp::partial_min(1, 2));\n@@ -393,7 +394,8 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// let result = cmp::partial_min(std::f64::NAN, 1.0);\n@@ -417,7 +419,8 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// assert_eq!(Some(2), cmp::partial_max(1, 2));\n@@ -427,7 +430,8 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// let result = cmp::partial_max(std::f64::NAN, 1.0);"}, {"sha": "7cacc6af575c8c49e05ab1e202e2eec58602beff", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -167,7 +167,8 @@ pub struct RadixFmt<T, R>(T, R);\n /// # Examples\n ///\n /// ```\n-/// # #![feature(fmt_radix)]\n+/// #![feature(fmt_radix)]\n+///\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```"}, {"sha": "75b7208d66bd5ad8774c37ab291516f357fa5583", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -16,7 +16,8 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(hash_default)]\n+//! #![feature(hash_default)]\n+//!\n //! use std::hash::{hash, Hash, SipHasher};\n //!\n //! #[derive(Hash)]\n@@ -36,7 +37,8 @@\n //! the trait `Hash`:\n //!\n //! ```rust\n-//! # #![feature(hash_default)]\n+//! #![feature(hash_default)]\n+//!\n //! use std::hash::{hash, Hash, Hasher, SipHasher};\n //!\n //! struct Person {"}, {"sha": "2968d63454457bc0d03003e833cd29ea18bfb030", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -824,7 +824,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_min_max)]\n+    /// #![feature(iter_min_max)]\n+    ///\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n     /// let a: [i32; 0] = [];\n@@ -898,7 +899,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_cmp)]\n+    /// #![feature(iter_cmp)]\n+    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n@@ -926,7 +928,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_cmp)]\n+    /// #![feature(iter_cmp)]\n+    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n@@ -1065,7 +1068,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_arith)]\n+    /// #![feature(iter_arith)]\n+    ///\n     /// let a = [1, 2, 3, 4, 5];\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n@@ -1083,7 +1087,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_arith)]\n+    /// #![feature(iter_arith)]\n+    ///\n     /// fn factorial(n: u32) -> u32 {\n     ///     (1..).take_while(|&i| i <= n).product()\n     /// }\n@@ -1367,7 +1372,8 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_min_max)]\n+    /// #![feature(iter_min_max)]\n+    ///\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<i32> = NoElements;\n@@ -2764,7 +2770,8 @@ impl<A: Step> ops::Range<A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(step_by)]\n+    /// #![feature(step_by)]\n+    ///\n     /// for i in (0..10).step_by(2) {\n     ///     println!(\"{}\", i);\n     /// }"}, {"sha": "2235dc4af11f5f47d76788f63a747cdfc52ae372", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -274,7 +274,8 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(as_slice)]\n+    /// #![feature(as_slice)]\n+    ///\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "f0bac1bfef3e2885648e346e44c84840f9c31e1a", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -49,7 +49,8 @@ use mem;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(raw)]\n+/// #![feature(raw)]\n+///\n /// use std::raw::{self, Repr};\n ///\n /// let slice: &[u16] = &[1, 2, 3, 4];\n@@ -98,7 +99,8 @@ impl<T> Clone for Slice<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(raw)]\n+/// #![feature(raw)]\n+///\n /// use std::mem;\n /// use std::raw;\n ///"}, {"sha": "100cf0779b7e52b614b66b9acb85a631e4717b1a", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -420,7 +420,8 @@ impl<T, E> Result<T, E> {\n     /// Converts from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n-    /// # #![feature(as_slice)]\n+    /// #![feature(as_slice)]\n+    ///\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "d0205fc9b126e329b8228ea2dd8a996775426091", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -19,7 +19,8 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//! # #![feature(core_simd)]\n+//! #![feature(core_simd)]\n+//!\n //! fn main() {\n //!     use std::simd::f32x4;\n //!     let a = f32x4(40.0, 41.0, 42.0, 43.0);"}, {"sha": "69120b5818101301b1f18c0f12840f68736901e5", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -47,7 +47,8 @@\n //! which is cyclic.\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -149,7 +150,8 @@\n //! entity `&sube`).\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -207,7 +209,8 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;"}, {"sha": "c4573bd906063314f09e3368db52418be15c4d7e", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -34,8 +34,8 @@\n /// # Examples\n ///\n /// ```{.rust}\n-/// # #![feature(rustc_private)]\n-/// # #![feature(associated_consts)]\n+/// #![feature(rustc_private)]\n+/// #![feature(associated_consts)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// bitflags! {\n@@ -62,7 +62,7 @@\n /// The generated `struct`s can also be extended with type and trait implementations:\n ///\n /// ```{.rust}\n-/// # #![feature(rustc_private)]\n+/// #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// use std::fmt;"}, {"sha": "815c1ed4fff994498dfe0dec043a7e3cbdfe2368", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -278,7 +278,8 @@ impl char {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -289,7 +290,8 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -315,7 +317,8 @@ impl char {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -326,7 +329,8 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);"}, {"sha": "e329785d2719bbe3e91ccdaee293374150c31652", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -494,7 +494,8 @@ impl<'a> Iterator for Utf16Items<'a> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(unicode)]\n+/// #![feature(unicode)]\n+///\n /// extern crate rustc_unicode;\n ///\n /// use rustc_unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};"}, {"sha": "609ebe8546164d1872790a48c32a6bb0a8e0107c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -30,7 +30,8 @@ impl ToHex for [u8] {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rustc_private)]\n+    /// #![feature(rustc_private)]\n+    ///\n     /// extern crate serialize;\n     /// use serialize::hex::ToHex;\n     ///\n@@ -100,7 +101,8 @@ impl FromHex for str {\n     /// This converts a string literal to hexadecimal and back.\n     ///\n     /// ```\n-    /// # #![feature(rustc_private)]\n+    /// #![feature(rustc_private)]\n+    ///\n     /// extern crate serialize;\n     /// use serialize::hex::{FromHex, ToHex};\n     ///"}, {"sha": "cd9dadd1be9e6f58ca339b9fb6dd2744f32564a5", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -125,7 +125,8 @@ pub trait AsciiExt {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(ascii)]\n+    /// #![feature(ascii)]\n+    ///\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let mut ascii = 'a';\n@@ -144,7 +145,8 @@ pub trait AsciiExt {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(ascii)]\n+    /// #![feature(ascii)]\n+    ///\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let mut ascii = 'A';"}, {"sha": "66f894fc31fb00f441024ab7a664d097731a3ce8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -543,7 +543,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -572,7 +573,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -979,7 +981,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n+    ///\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();"}, {"sha": "fb594dadd738be984f61bee7f4cce4b0545644e1", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -154,7 +154,8 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -179,7 +180,8 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///"}, {"sha": "eb378bf408028241dfb53557a6d599dc088f4d40", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -141,7 +141,8 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(mpsc_select)]\n+/// #![feature(mpsc_select)]\n+///\n /// use std::thread;\n /// use std::sync::mpsc;\n ///"}, {"sha": "c7daf5cdee56a0ef732c1e5426abb5346126aa98", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -103,7 +103,8 @@ impl Iterator for LookupHost {\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(lookup_host)]\n+/// #![feature(lookup_host)]\n+///\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "73d6639cf00d78c6f1af49332a2bbc7ccd7f769d", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -235,7 +235,8 @@ impl f32 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let num = 2.0f32;\n@@ -598,7 +599,8 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = consts::PI;\n@@ -614,7 +616,8 @@ impl f32 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = 180.0f32;\n@@ -630,7 +633,8 @@ impl f32 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f32::ldexp(3.0, 2) - 12.0).abs();\n@@ -651,7 +655,8 @@ impl f32 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let x = 4.0f32;\n@@ -679,7 +684,8 @@ impl f32 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let x = 1.0f32;"}, {"sha": "3911d276b0f3cca1e2975f12a7c170aed5813896", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -191,7 +191,8 @@ impl f64 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// let num = 2.0f64;\n     ///\n     /// // (8388608, -22, 1)\n@@ -568,7 +569,8 @@ impl f64 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f64::ldexp(3.0, 2) - 12.0).abs();\n     ///\n@@ -588,7 +590,8 @@ impl f64 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// let x = 4.0_f64;\n     ///\n     /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n@@ -614,7 +617,7 @@ impl f64 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n     ///\n     /// let x = 1.0f32;\n     ///"}, {"sha": "7f14ea93c52691854757b49c88f5143dac9be452", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -111,7 +111,8 @@ mod prim_unit { }\n /// the raw pointer. It doesn't destroy `T` or deallocate any memory.\n ///\n /// ```\n-/// # #![feature(box_raw)]\n+/// #![feature(box_raw)]\n+///\n /// let my_speed: Box<i32> = Box::new(88);\n /// let my_speed: *mut i32 = Box::into_raw(my_speed);\n ///"}, {"sha": "79b3dfa67b1cf93e62352feb7090ad4eba1d50b9", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -69,7 +69,8 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_condvar)]\n+/// #![feature(static_condvar)]\n+///\n /// use std::sync::{StaticCondvar, CONDVAR_INIT};\n ///\n /// static CVAR: StaticCondvar = CONDVAR_INIT;"}, {"sha": "b87a2756829445a687d92f407447778ca4671b4c", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -14,7 +14,8 @@\n //! # Examples\n //!\n //! ```\n-//! # #![feature(future)]\n+//! #![feature(future)]\n+//!\n //! use std::sync::Future;\n //!\n //! // a fake, for now"}, {"sha": "ee1516342ad05a6556752dce232744c82095d5d1", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -27,7 +27,8 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(mpsc_select)]\n+//! #![feature(mpsc_select)]\n+//!\n //! use std::sync::mpsc::channel;\n //!\n //! let (tx1, rx1) = channel();\n@@ -124,7 +125,8 @@ impl Select {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(mpsc_select)]\n+    /// #![feature(mpsc_select)]\n+    ///\n     /// use std::sync::mpsc::Select;\n     ///\n     /// let select = Select::new();"}, {"sha": "4b62434d06894e9c78b6f40b0c1e5c1649382864", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -138,7 +138,8 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_mutex)]\n+/// #![feature(static_mutex)]\n+///\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "40d5af49156dd7a8d9a009d9a4f89cf314a70bb9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -81,7 +81,8 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_rwlock)]\n+/// #![feature(static_rwlock)]\n+///\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n /// static LOCK: StaticRwLock = RW_LOCK_INIT;"}, {"sha": "907df69bfb07a13503581ad4672ddec75842b588", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -25,7 +25,8 @@ use sync::{Mutex, Condvar};\n /// # Examples\n ///\n /// ```\n-/// # #![feature(semaphore)]\n+/// #![feature(semaphore)]\n+///\n /// use std::sync::Semaphore;\n ///\n /// // Create a semaphore that represents 5 resources"}, {"sha": "2683f8e5022bb26bd81a315da53f118a864f61f4", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -367,7 +367,8 @@ pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n /// a join before any relevant stack frames are popped:\n ///\n /// ```rust\n-/// # #![feature(scoped)]\n+/// #![feature(scoped)]\n+///\n /// use std::thread;\n ///\n /// let guard = thread::scoped(move || {\n@@ -447,7 +448,8 @@ pub fn panicking() -> bool {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(catch_panic)]\n+/// #![feature(catch_panic)]\n+///\n /// use std::thread;\n ///\n /// let result = thread::catch_panic(|| {"}, {"sha": "4fbfdec8e7ec8b152ae6fa1e2fd412052328cb64", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a368adf8e5bd1166b9fd915ed1db674872f5a1bc/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=a368adf8e5bd1166b9fd915ed1db674872f5a1bc", "patch": "@@ -24,7 +24,8 @@\n //! # Examples\n //!\n //! ```\n-//! # #![feature(scoped_tls)]\n+//! #![feature(scoped_tls)]\n+//!\n //! scoped_thread_local!(static FOO: u32);\n //!\n //! // Initially each scoped slot is empty.\n@@ -136,7 +137,8 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(scoped_tls)]\n+    /// #![feature(scoped_tls)]\n+    ///\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.set(&100, || {\n@@ -189,7 +191,8 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// # #![feature(scoped_tls)]\n+    /// #![feature(scoped_tls)]\n+    ///\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.with(|slot| {"}]}