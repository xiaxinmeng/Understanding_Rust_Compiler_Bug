{"sha": "12babb623afcca10c0b32a6c35e54cad35102ea5", "node_id": "C_kwDOAAsO6NoAKDEyYmFiYjYyM2FmY2NhMTBjMGIzMmE2YzM1ZTU0Y2FkMzUxMDJlYTU", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-24T23:01:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-24T23:01:28Z"}, "message": "Rollup merge of #103409 - compiler-errors:rpitit-signature-mismatch, r=lcnr\n\nDelay span bug when we can't map lifetimes back in `collect_trait_impl_trait_tys`\n\nWhen a lifetime is late-bound in a trait signature, but early-bound in an impl signature, we already emit an error -- however, we also ICE in `collect_trait_impl_trait_tys`, so just delay a bug here.\n\nFixes #103407", "tree": {"sha": "8146ce769bcfdbc7f4e324884e92d0e080aecc43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8146ce769bcfdbc7f4e324884e92d0e080aecc43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12babb623afcca10c0b32a6c35e54cad35102ea5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVxlICRBK7hj4Ov3rIwAAlskIAHDQ6NYnS8pTRBck8svWeFL+\ndDVj4Op8FGrmoxgAxosbm7yWE5w+Gt7Vl1AQJ9RFxpa5EO8+nuIQLJfnLfVJqr5f\nrD3kk4/YDcQrJxSK2nb7Z6Uge/Rg5UwbSGndEouCx7KfJ4NcCQ/Wxodw+IEqwDUH\n3FB4lLAtw9gYl5d+hkh0/VpGo87CPjj7kI4tcPI6tYasM/J25slFFmnwB+S7tfGn\nGLiQELMdJMpsx+BJ5WtXTPy6f4h1JibBtpF+Bd0T42HtlBmeVYdhjxJ8YFiHxAHr\nops7KgRugW4C62pQrmIqHvlsTXF90Rw++fEi7slBFo6M2Uzs40rQOGQ9bF9HrtY=\n=TyBE\n-----END PGP SIGNATURE-----\n", "payload": "tree 8146ce769bcfdbc7f4e324884e92d0e080aecc43\nparent 63835401304adc4bf3bb0d45fda0fe28bceddb4e\nparent fa5cf90b8dd335b53056e3af96a468905b482226\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666652488 +0900\ncommitter GitHub <noreply@github.com> 1666652488 +0900\n\nRollup merge of #103409 - compiler-errors:rpitit-signature-mismatch, r=lcnr\n\nDelay span bug when we can't map lifetimes back in `collect_trait_impl_trait_tys`\n\nWhen a lifetime is late-bound in a trait signature, but early-bound in an impl signature, we already emit an error -- however, we also ICE in `collect_trait_impl_trait_tys`, so just delay a bug here.\n\nFixes #103407\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12babb623afcca10c0b32a6c35e54cad35102ea5", "html_url": "https://github.com/rust-lang/rust/commit/12babb623afcca10c0b32a6c35e54cad35102ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12babb623afcca10c0b32a6c35e54cad35102ea5/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63835401304adc4bf3bb0d45fda0fe28bceddb4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63835401304adc4bf3bb0d45fda0fe28bceddb4e", "html_url": "https://github.com/rust-lang/rust/commit/63835401304adc4bf3bb0d45fda0fe28bceddb4e"}, {"sha": "fa5cf90b8dd335b53056e3af96a468905b482226", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5cf90b8dd335b53056e3af96a468905b482226", "html_url": "https://github.com/rust-lang/rust/commit/fa5cf90b8dd335b53056e3af96a468905b482226"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "e72f18012ab338fce240ac21202e0439e279097a", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12babb623afcca10c0b32a6c35e54cad35102ea5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12babb623afcca10c0b32a6c35e54cad35102ea5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=12babb623afcca10c0b32a6c35e54cad35102ea5", "patch": "@@ -598,8 +598,16 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 let num_impl_substs = tcx.generics_of(impl_m.container_id(tcx)).params.len();\n                 let ty = tcx.fold_regions(ty, |region, _| {\n                     let ty::ReFree(_) = region.kind() else { return region; };\n-                    let ty::ReEarlyBound(e) = map[&region.into()].expect_region().kind()\n-                        else { bug!(\"expected ReFree to map to ReEarlyBound\"); };\n+                    let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n+                    else {\n+                        tcx\n+                            .sess\n+                            .delay_span_bug(\n+                                return_span,\n+                                \"expected ReFree to map to ReEarlyBound\"\n+                            );\n+                        return tcx.lifetimes.re_static;\n+                    };\n                     tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,\n                         name: e.name,"}, {"sha": "90682631aa0323050c60f96843c1f9adaee0c480", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12babb623afcca10c0b32a6c35e54cad35102ea5/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12babb623afcca10c0b32a6c35e54cad35102ea5/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs?ref=12babb623afcca10c0b32a6c35e54cad35102ea5", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+pub trait AsyncTrait {\n+    fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+}\n+\n+pub struct Struct;\n+\n+impl AsyncTrait for Struct {\n+    fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+        //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        async move { buff.to_vec() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6663d7faa1e578ebf20f97c2a3cf30bbeed43093", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12babb623afcca10c0b32a6c35e54cad35102ea5/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12babb623afcca10c0b32a6c35e54cad35102ea5/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr?ref=12babb623afcca10c0b32a6c35e54cad35102ea5", "patch": "@@ -0,0 +1,16 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/signature-mismatch.rs:15:5\n+   |\n+LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+...\n+LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   |\n+   = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+              found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to previous error\n+"}]}