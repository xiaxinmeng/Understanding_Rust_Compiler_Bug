{"sha": "370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MGMxYWQwMGVhYTBmZjk1YzRlMDlhNmUwNTQ1YmY4MzNkNjY2OGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T23:07:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T23:07:55Z"}, "message": "Handle record update in typeck.", "tree": {"sha": "8658f64043b54d4d0483bbaa2772bc239ee965eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8658f64043b54d4d0483bbaa2772bc239ee965eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "html_url": "https://github.com/rust-lang/rust/commit/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a02798d1b3ccb04ee450b1171f31319f0c05467", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a02798d1b3ccb04ee450b1171f31319f0c05467", "html_url": "https://github.com/rust-lang/rust/commit/7a02798d1b3ccb04ee450b1171f31319f0c05467"}], "stats": {"total": 95, "additions": 81, "deletions": 14}, "files": [{"sha": "11c7bee89d2b189f4118dff0f9a066771d8358cd", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "patch": "@@ -553,6 +553,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         bad-expr-path.rs \\\n                         bad-expr-path2.rs \\\n                         bogus-tag.rs \\\n+                        fru-extra-field.rs \\\n                         import.rs \\\n                         import2.rs \\\n                         import3.rs \\"}, {"sha": "9b7c9439625f6e74257575eba2060aa1e496c273", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/370c1ad00eaa0ff95c4e09a6e0545bf833d6668a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=370c1ad00eaa0ff95c4e09a6e0545bf833d6668a", "patch": "@@ -912,23 +912,48 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         }\n         case (ast.expr_rec(?fields_0, ?base_0, ?ann)) {\n \n-            // FIXME: handle presence of a nonempty base.\n-            check (base_0 == none[@ast.expr]);\n             auto base_1 = base_0;\n \n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             let vec[ast.field] fields_1 = vec();\n             alt (t.struct) {\n                 case (ty.ty_rec(?field_tys)) {\n-                    auto i = 0u;\n-                    for (ast.field field_0 in fields_0) {\n-                        check (_str.eq(field_0.ident, field_tys.(i).ident));\n-                        auto e_1 = demand_expr(fcx, field_tys.(i).ty,\n-                                               field_0.expr);\n-                        fields_1 += vec(rec(mut=field_0.mut,\n-                                            ident=field_0.ident,\n-                                            expr=e_1));\n-                        i += 1u;\n+                    alt (base_0) {\n+                        case (none[@ast.expr]) {\n+                            auto i = 0u;\n+                            for (ast.field field_0 in fields_0) {\n+                                check (_str.eq(field_0.ident,\n+                                               field_tys.(i).ident));\n+                                auto e_1 = demand_expr(fcx,\n+                                                       field_tys.(i).ty,\n+                                                       field_0.expr);\n+                                fields_1 += vec(rec(mut=field_0.mut,\n+                                                    ident=field_0.ident,\n+                                                    expr=e_1));\n+                                i += 1u;\n+                            }\n+                        }\n+                        case (some[@ast.expr](?bx)) {\n+\n+                            base_1 =\n+                                some[@ast.expr](demand_expr(fcx, t, bx));\n+\n+                            let vec[field] base_fields = vec();\n+\n+                            for (ast.field field_0 in fields_0) {\n+\n+                                for (ty.field ft in field_tys) {\n+                                    if (_str.eq(field_0.ident, ft.ident)) {\n+                                        auto e_1 = demand_expr(fcx, ft.ty,\n+                                                               field_0.expr);\n+                                        fields_1 +=\n+                                            vec(rec(mut=field_0.mut,\n+                                                    ident=field_0.ident,\n+                                                    expr=e_1));\n+                                    }\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n                 case (_) {\n@@ -1708,8 +1733,6 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n         case (ast.expr_rec(?fields, ?base, _)) {\n \n-            // FIXME: handle presence of a nonempty base.\n-            check (base == none[@ast.expr]);\n             auto base_1 = base;\n \n             let vec[ast.field] fields_1 = vec();\n@@ -1725,7 +1748,50 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                 append[field](fields_t, rec(ident=f.ident, ty=expr_t));\n             }\n \n-            auto ann = ast.ann_type(plain_ty(ty.ty_rec(fields_t)));\n+            auto ann = ast.ann_none;\n+\n+            alt (base) {\n+                case (none[@ast.expr]) {\n+                    ann = ast.ann_type(plain_ty(ty.ty_rec(fields_t)));\n+                }\n+\n+                case (some[@ast.expr](?bexpr)) {\n+                    auto bexpr_1 = check_expr(fcx, bexpr);\n+                    auto bexpr_t = expr_ty(bexpr_1);\n+\n+                    let vec[field] base_fields = vec();\n+\n+                    alt (bexpr_t.struct) {\n+                        case (ty.ty_rec(?flds)) {\n+                            base_fields = flds;\n+                        }\n+                        case (_) {\n+                            fcx.ccx.sess.span_err\n+                                (expr.span,\n+                                 \"record update non-record base\");\n+                        }\n+                    }\n+\n+                    ann = ast.ann_type(bexpr_t);\n+\n+                    for (ty.field f in fields_t) {\n+                        auto found = false;\n+                        for (ty.field bf in base_fields) {\n+                            if (_str.eq(f.ident, bf.ident)) {\n+                                demand(fcx, expr.span, f.ty, bf.ty);\n+                                found = true;\n+                            }\n+                        }\n+                        if (!found) {\n+                            fcx.ccx.sess.span_err\n+                                (expr.span,\n+                                 \"unknown field in record update: \"\n+                                 + f.ident);\n+                        }\n+                    }\n+                }\n+            }\n+\n             ret @fold.respan[ast.expr_](expr.span,\n                                         ast.expr_rec(fields_1, base_1, ann));\n         }"}]}