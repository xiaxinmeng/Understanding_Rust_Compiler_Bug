{"sha": "3f28811774da8ee16bd6391a0e66d23e6962485f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjg4MTE3NzRkYThlZTE2YmQ2MzkxYTBlNjZkMjNlNjk2MjQ4NWY=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-05-22T18:34:52Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-05-22T19:08:29Z"}, "message": "Add documentation on the reasoning\n\nExplains the thought process behind adding the union algorithm and\ndiscusses the alternative and heuristic behind.", "tree": {"sha": "edcb950f4bbbd51f4b72704dcd64fce81400aae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edcb950f4bbbd51f4b72704dcd64fce81400aae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f28811774da8ee16bd6391a0e66d23e6962485f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f28811774da8ee16bd6391a0e66d23e6962485f", "html_url": "https://github.com/rust-lang/rust/commit/3f28811774da8ee16bd6391a0e66d23e6962485f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f28811774da8ee16bd6391a0e66d23e6962485f/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8877f4c30daf3ceabe42037c86d3df05baa7d721", "url": "https://api.github.com/repos/rust-lang/rust/commits/8877f4c30daf3ceabe42037c86d3df05baa7d721", "html_url": "https://github.com/rust-lang/rust/commit/8877f4c30daf3ceabe42037c86d3df05baa7d721"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "e626f4333d9090da0bef7978df2c9bc9025ffb40", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f28811774da8ee16bd6391a0e66d23e6962485f/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f28811774da8ee16bd6391a0e66d23e6962485f/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=3f28811774da8ee16bd6391a0e66d23e6962485f", "patch": "@@ -557,10 +557,20 @@ impl<T: Idx> HybridBitSet<T> {\n                         changed\n                     }\n                     HybridBitSet::Dense(other_dense) => {\n-                        // `self` is sparse and `other` is dense. Clone the\n-                        // other set and do the bitwise union with sparse\n-                        // `self`. This avoids traversing the dense\n-                        // representation twice.\n+                        // `self` is sparse and `other` is dense. To\n+                        // merge them, we have two available strategies:\n+                        // * Densify `self` then merge other\n+                        // * Clone other then integrate bits from `self`\n+                        // The second strategy requires dedicated method\n+                        // since the usual `union` returns the wrong\n+                        // result. In the dedicated case the computation\n+                        // is slightly faster if the bits of the sparse\n+                        // bitset map to only few words of the dense\n+                        // representation, i.e. indices are near each\n+                        // other.\n+                        //\n+                        // Benchmarking seems to suggest that the second\n+                        // option is worth it.\n                         let mut new_dense = other_dense.clone();\n                         let changed = new_dense.reverse_union_sparse(self_sparse);\n                         *self = HybridBitSet::Dense(new_dense);"}]}