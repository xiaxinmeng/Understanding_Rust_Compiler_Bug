{"sha": "d7bb40c50c99767fc1c7eaf785242011b36d574d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YmI0MGM1MGM5OTc2N2ZjMWM3ZWFmNzg1MjQyMDExYjM2ZDU3NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T03:25:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T03:25:58Z"}, "message": "auto merge of #9470 : luqmana/rust/bba, r=brson\n\n #8431\r\n\r\n~~@brson: do we need to bump up the cratemap version for this change?~~ Tis a no.", "tree": {"sha": "831cf04b6624be0bd34c45afbb3d7facfb4b5eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831cf04b6624be0bd34c45afbb3d7facfb4b5eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7bb40c50c99767fc1c7eaf785242011b36d574d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bb40c50c99767fc1c7eaf785242011b36d574d", "html_url": "https://github.com/rust-lang/rust/commit/d7bb40c50c99767fc1c7eaf785242011b36d574d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7bb40c50c99767fc1c7eaf785242011b36d574d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "512f7781fe86cde003132969e7fed5aea649bf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/512f7781fe86cde003132969e7fed5aea649bf13", "html_url": "https://github.com/rust-lang/rust/commit/512f7781fe86cde003132969e7fed5aea649bf13"}, {"sha": "90e009f9b6aae3b3a9f500f07bca07b531e54507", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e009f9b6aae3b3a9f500f07bca07b531e54507", "html_url": "https://github.com/rust-lang/rust/commit/90e009f9b6aae3b3a9f500f07bca07b531e54507"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "41126128cddf81bc76423f280cb207bde7cb80b5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7bb40c50c99767fc1c7eaf785242011b36d574d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bb40c50c99767fc1c7eaf785242011b36d574d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d7bb40c50c99767fc1c7eaf785242011b36d574d", "patch": "@@ -2950,7 +2950,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     };\n     let sym_name = ~\"_rust_crate_map_\" + mapname;\n     let arrtype = Type::array(&int_type, n_subcrates as u64);\n-    let maptype = Type::struct_([Type::i32(), Type::i8p(), int_type, arrtype], false);\n+    let maptype = Type::struct_([Type::i32(), int_type, arrtype], false);\n     let map = do sym_name.with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n@@ -2991,8 +2991,6 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n         let mod_map = create_module_map(ccx);\n         llvm::LLVMSetInitializer(map, C_struct(\n             [C_i32(1),\n-             // FIXME #8431 This used to be the annihilate function, now it's nothing\n-             C_null(Type::i8p()),\n              p2i(ccx, mod_map),\n              C_array(ccx.int_type, subcrates)]));\n     }"}, {"sha": "57abb7560a1344aacda6a9185e32bc1719925cea", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7bb40c50c99767fc1c7eaf785242011b36d574d/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bb40c50c99767fc1c7eaf785242011b36d574d/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=d7bb40c50c99767fc1c7eaf785242011b36d574d", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n \n-use libc::{c_void, c_char};\n+use libc::c_char;\n+#[cfg(stage0)] use libc::c_void;\n use ptr;\n use ptr::RawPtr;\n use vec;\n@@ -39,6 +40,7 @@ struct CrateMapV0 {\n     children: [*CrateMap, ..1]\n }\n \n+#[cfg(stage0)]\n struct CrateMap {\n     version: i32,\n     annihilate_fn: *c_void,\n@@ -48,6 +50,15 @@ struct CrateMap {\n     children: [*CrateMap, ..1]\n }\n \n+#[cfg(not(stage0))]\n+struct CrateMap {\n+    version: i32,\n+    entries: *ModEntry,\n+    /// a dynamically sized struct, where all pointers to children are listed adjacent\n+    /// to the struct, terminated with NULL\n+    children: [*CrateMap, ..1]\n+}\n+\n #[cfg(not(windows))]\n pub fn get_crate_map() -> *CrateMap {\n     &'static CRATE_MAP as *CrateMap\n@@ -79,15 +90,6 @@ unsafe fn version(crate_map: *CrateMap) -> i32 {\n     }\n }\n \n-/// Returns a pointer to the annihilate function of the CrateMap\n-pub unsafe fn annihilate_fn(crate_map: *CrateMap) -> *c_void {\n-    match version(crate_map) {\n-        0 => return ptr::null(),\n-        1 => return (*crate_map).annihilate_fn,\n-        _ => fail!(\"Unknown crate map version!\")\n-    }\n-}\n-\n unsafe fn entries(crate_map: *CrateMap) -> *ModEntry {\n     match version(crate_map) {\n         0 => {\n@@ -145,7 +147,6 @@ fn iter_crate_map_duplicates() {\n \n     struct CrateMapT3 {\n         version: i32,\n-        annihilate_fn: *c_void,\n         entries: *ModEntry,\n         children: [*CrateMap, ..3]\n     }\n@@ -160,13 +161,12 @@ fn iter_crate_map_duplicates() {\n         ];\n         let child_crate = CrateMap {\n             version: 1,\n-            annihilate_fn: ptr::null(),\n             entries: vec::raw::to_ptr(entries),\n             children: [ptr::null()]\n         };\n \n         let root_crate = CrateMapT3 {\n-            version: 1, annihilate_fn: ptr::null(),\n+            version: 1,\n             entries: vec::raw::to_ptr([ModEntry { name: ptr::null(), log_level: ptr::mut_null()}]),\n             children: [&child_crate as *CrateMap, &child_crate as *CrateMap, ptr::null()]\n         };\n@@ -187,7 +187,6 @@ fn iter_crate_map_follow_children() {\n \n     struct CrateMapT2 {\n         version: i32,\n-        annihilate_fn: *c_void,\n         entries: *ModEntry,\n         children: [*CrateMap, ..2]\n     }\n@@ -199,7 +198,6 @@ fn iter_crate_map_follow_children() {\n         let mut level3: u32 = 3;\n         let child_crate2 = CrateMap {\n             version: 1,\n-            annihilate_fn: ptr::null(),\n             entries: vec::raw::to_ptr([\n                 ModEntry { name: mod_name1.with_ref(|buf| buf), log_level: &mut level2},\n                 ModEntry { name: mod_name2.with_ref(|buf| buf), log_level: &mut level3},\n@@ -210,7 +208,6 @@ fn iter_crate_map_follow_children() {\n \n         let child_crate1 = CrateMapT2 {\n             version: 1,\n-            annihilate_fn: ptr::null(),\n             entries: vec::raw::to_ptr([\n                 ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 1},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}\n@@ -220,7 +217,7 @@ fn iter_crate_map_follow_children() {\n \n         let child_crate1_ptr: *CrateMap = transmute(&child_crate1);\n         let root_crate = CrateMapT2 {\n-            version: 1, annihilate_fn: ptr::null(),\n+            version: 1,\n             entries: vec::raw::to_ptr([\n                 ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 0},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}"}]}