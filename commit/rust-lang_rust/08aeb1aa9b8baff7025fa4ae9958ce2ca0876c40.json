{"sha": "08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "node_id": "C_kwDOAAsO6NoAKDA4YWViMWFhOWI4YmFmZjcwMjVmYTRhZTk5NThjZTJjYTA4NzZjNDA", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-15T15:48:35Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T04:08:46Z"}, "message": "unconditionally remap to nonconst in borrowck", "tree": {"sha": "c717af51c70051337deb8c6f6645554110c3b698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c717af51c70051337deb8c6f6645554110c3b698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "html_url": "https://github.com/rust-lang/rust/commit/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f259ce5a400801daecd76760a7665aaf130643", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f259ce5a400801daecd76760a7665aaf130643", "html_url": "https://github.com/rust-lang/rust/commit/31f259ce5a400801daecd76760a7665aaf130643"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "9aea99b6a12438fb7130262e3cca03e958059500", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "patch": "@@ -424,31 +424,19 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             }\n \n             if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {\n-                // N.B.: When instantiating a trait method as a function item, it does not actually matter\n-                // whether the trait is `const` or not, or whether `where T: ~const Tr` needs to be satisfied\n-                // as `const`. If we were to introduce instantiating trait methods as `const fn`s, we would\n-                // check that after this, either via a bound `where F: ~const FnOnce` or when coercing to a\n-                // `const fn` pointer.\n-                //\n-                // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n-                // `~const FnOnce` or can be coerced to `const fn` pointer.\n-                let const_norm = self.tcx().def_kind(def_id) == hir::def::DefKind::AssocFn\n-                    && self.tcx().def_kind(ty::DefIdTree::parent(self.tcx(), def_id))\n-                        == hir::def::DefKind::Trait;\n-\n+                // const_trait_impl: use a non-const param env when checking that a FnDef type is well formed.\n+                // this is because the well-formedness of the function does not need to be proved to have `const`\n+                // impls for trait bounds.\n                 let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n                 let prev = self.cx.param_env;\n-                if const_norm {\n-                    self.cx.param_env = prev.without_const();\n-                }\n+                self.cx.param_env = prev.without_const();\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     def_id,\n                     instantiated_predicates,\n                     locations,\n                 );\n-                if const_norm {\n-                    self.cx.param_env = prev;\n-                }\n+                self.cx.param_env = prev;\n+                \n             }\n         }\n     }"}]}