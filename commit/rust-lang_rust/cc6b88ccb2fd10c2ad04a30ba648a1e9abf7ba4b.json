{"sha": "cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmI4OGNjYjJmZDEwYzJhZDA0YTMwYmE2NDhhMWU5YWJmN2JhNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T08:38:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T08:38:42Z"}, "message": "Auto merge of #46129 - kennytm:fix-46098-rustdoc-reexport-extern-type, r=GuillaumeGomez\n\nProperly handle reexport of foreign items.\n\nHandles `pub use` of `extern { fn, static, type }`. Also plug in some more `match` arms where handling `extern type` is reasonable.\n\nFixed #46098.", "tree": {"sha": "6a329918935f3df03527c01d1bd20d8b2a278662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a329918935f3df03527c01d1bd20d8b2a278662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "html_url": "https://github.com/rust-lang/rust/commit/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59bf09d4d473c803609d3ad925a0ebf13bdbb0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/59bf09d4d473c803609d3ad925a0ebf13bdbb0ab", "html_url": "https://github.com/rust-lang/rust/commit/59bf09d4d473c803609d3ad925a0ebf13bdbb0ab"}, {"sha": "f0fcdbc021e9f166120755ee340f15558cd23bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fcdbc021e9f166120755ee340f15558cd23bbe", "html_url": "https://github.com/rust-lang/rust/commit/f0fcdbc021e9f166120755ee340f15558cd23bbe"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "538737e7fe4d9d460e6d16dad8aacd2a4b075f98", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "patch": "@@ -3118,6 +3118,7 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Struct(i) => (i, TypeKind::Struct),\n         Def::Union(i) => (i, TypeKind::Union),\n         Def::Mod(i) => (i, TypeKind::Module),\n+        Def::TyForeign(i) => (i, TypeKind::Foreign),\n         Def::Static(i, _) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent_def_id(i).unwrap(), TypeKind::Enum),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),"}, {"sha": "fe1dac36be1f9beb7267dee65fb4b6bbefe477a9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "patch": "@@ -306,6 +306,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 Def::Struct(did) |\n                 Def::Union(did) |\n                 Def::Enum(did) |\n+                Def::TyForeign(did) |\n                 Def::TyAlias(did) if !self_is_hidden => {\n                     self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n                 },\n@@ -348,6 +349,17 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 self.inlining = prev;\n                 true\n             }\n+            hir_map::NodeForeignItem(it) if !glob => {\n+                // generate a fresh `extern {}` block if we want to inline a foreign item.\n+                om.foreigns.push(hir::ForeignMod {\n+                    abi: tcx.hir.get_foreign_abi(it.id),\n+                    items: vec![hir::ForeignItem {\n+                        name: renamed.unwrap_or(it.name),\n+                        .. it.clone()\n+                    }].into(),\n+                });\n+                true\n+            }\n             _ => false,\n         };\n         self.view_item_stack.remove(&def_node_id);"}, {"sha": "714222de529ee33e01afe2bbb5281319627d475b", "filename": "src/test/rustdoc/foreigntype-reexport.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs?ref=cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_types)]\n+\n+mod sub {\n+    extern {\n+        /// Another extern type.\n+        pub type C2;\n+        pub fn f2();\n+        pub static K: usize;\n+    }\n+}\n+\n+pub mod sub2 {\n+    extern {\n+        // @has foreigntype_reexport/sub2/foreigntype.C.html\n+        pub type C;\n+        // @has foreigntype_reexport/sub2/fn.f.html\n+        pub fn f();\n+        // @has foreigntype_reexport/sub2/static.K3.html\n+        pub static K3: usize;\n+    }\n+}\n+\n+mod sub3 {\n+    extern {\n+        pub type C4;\n+        pub fn f4();\n+        pub static K4: usize;\n+        type X4;\n+    }\n+}\n+\n+// @has foreigntype_reexport/foreigntype.C2.html\n+// @has foreigntype_reexport/fn.f2.html\n+// @has foreigntype_reexport/static.K2.html\n+// @has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'C2'\n+// @has foreigntype_reexport/index.html '//a[@class=\"fn\"]' 'f2'\n+// @has foreigntype_reexport/index.html '//a[@class=\"static\"]' 'K2'\n+pub use self::sub::{C2, f2, K as K2};\n+\n+// @has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'C'\n+// @has foreigntype_reexport/index.html '//a[@class=\"fn\"]' 'f'\n+// @has foreigntype_reexport/index.html '//a[@class=\"static\"]' 'K3'\n+// @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::C as C3;'\n+// @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::f as f3;'\n+// @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::K3;'\n+pub use self::sub2::{C as C3, f as f3, K3};\n+\n+// @has foreigntype_reexport/foreigntype.C4.html\n+// @has foreigntype_reexport/fn.f4.html\n+// @has foreigntype_reexport/static.K4.html\n+// @!has foreigntype_reexport/foreigntype.X4.html\n+// @has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'C4'\n+// @has foreigntype_reexport/index.html '//a[@class=\"fn\"]' 'f4'\n+// @has foreigntype_reexport/index.html '//a[@class=\"static\"]' 'K4'\n+// @!has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'X4'\n+pub use self::sub3::*;"}]}