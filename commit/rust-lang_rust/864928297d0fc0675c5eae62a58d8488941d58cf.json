{"sha": "864928297d0fc0675c5eae62a58d8488941d58cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDkyODI5N2QwZmMwNjc1YzVlYWU2MmE1OGQ4NDg4OTQxZDU4Y2Y=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-12-04T02:21:06Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-12-28T09:21:45Z"}, "message": "rustc: separate TraitItem from their parent Item, just like ImplItem.", "tree": {"sha": "1ea528de95d704bc8ebfde9af807287477d5d3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea528de95d704bc8ebfde9af807287477d5d3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864928297d0fc0675c5eae62a58d8488941d58cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864928297d0fc0675c5eae62a58d8488941d58cf", "html_url": "https://github.com/rust-lang/rust/commit/864928297d0fc0675c5eae62a58d8488941d58cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864928297d0fc0675c5eae62a58d8488941d58cf/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebb6fdbee7f0d250e50e4d84d9aede293cf3bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb6fdbee7f0d250e50e4d84d9aede293cf3bb3", "html_url": "https://github.com/rust-lang/rust/commit/6ebb6fdbee7f0d250e50e4d84d9aede293cf3bb3"}], "stats": {"total": 899, "additions": 601, "deletions": 298}, "files": [{"sha": "61f58fc8fe5f4491463b5306f8d694f98f06e501", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -45,6 +45,17 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n             debug!(\"Ended task {:?}\", task_id);\n         }\n \n+        fn visit_trait_item(&mut self, i: &'tcx hir::TraitItem) {\n+            let trait_item_def_id = self.tcx.map.local_def_id(i.id);\n+            let task_id = (self.dep_node_fn)(trait_item_def_id);\n+            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n+            debug!(\"Started task {:?}\", task_id);\n+            assert!(!self.tcx.map.is_inlined_def_id(trait_item_def_id));\n+            self.tcx.dep_graph.read(DepNode::Hir(trait_item_def_id));\n+            self.visitor.visit_trait_item(i);\n+            debug!(\"Ended task {:?}\", task_id);\n+        }\n+\n         fn visit_impl_item(&mut self, i: &'tcx hir::ImplItem) {\n             let impl_item_def_id = self.tcx.map.local_def_id(i.id);\n             let task_id = (self.dep_node_fn)(impl_item_def_id);"}, {"sha": "e16c97f2d2523c6ff4258ef96eca0323a45d4004", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -177,6 +177,17 @@ pub trait Visitor<'v> : Sized {\n         }\n     }\n \n+    /// Like `visit_nested_item()`, but for trait items. See\n+    /// `visit_nested_item()` for advice on when to override this\n+    /// method.\n+    #[allow(unused_variables)]\n+    fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n+        if let Some(item) = opt_item {\n+            self.visit_trait_item(item);\n+        }\n+    }\n+\n     /// Like `visit_nested_item()`, but for impl items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n@@ -273,6 +284,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n         walk_trait_item(self, ti)\n     }\n+    fn visit_trait_item_ref(&mut self, ii: &'v TraitItemRef) {\n+        walk_trait_item_ref(self, ii)\n+    }\n     fn visit_impl_item(&mut self, ii: &'v ImplItem) {\n         walk_impl_item(self, ii)\n     }\n@@ -469,21 +483,19 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n-            for impl_item_ref in impl_item_refs {\n-                visitor.visit_impl_item_ref(impl_item_ref);\n-            }\n+            walk_list!(visitor, visit_impl_item_ref, impl_item_refs);\n         }\n         ItemStruct(ref struct_definition, ref generics) |\n         ItemUnion(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n         }\n-        ItemTrait(_, ref generics, ref bounds, ref methods) => {\n+        ItemTrait(_, ref generics, ref bounds, ref trait_item_refs) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n-            walk_list!(visitor, visit_trait_item, methods);\n+            walk_list!(visitor, visit_trait_item_ref, trait_item_refs);\n         }\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n@@ -788,17 +800,17 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     visitor.visit_name(trait_item.span, trait_item.name);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     match trait_item.node {\n-        ConstTraitItem(ref ty, ref default) => {\n+        TraitItemKind::Const(ref ty, ref default) => {\n             visitor.visit_id(trait_item.id);\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n-        MethodTraitItem(ref sig, None) => {\n+        TraitItemKind::Method(ref sig, None) => {\n             visitor.visit_id(trait_item.id);\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_fn_decl(&sig.decl);\n         }\n-        MethodTraitItem(ref sig, Some(body_id)) => {\n+        TraitItemKind::Method(ref sig, Some(body_id)) => {\n             visitor.visit_fn(FnKind::Method(trait_item.name,\n                                             sig,\n                                             None,\n@@ -808,14 +820,23 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n                              trait_item.span,\n                              trait_item.id);\n         }\n-        TypeTraitItem(ref bounds, ref default) => {\n+        TraitItemKind::Type(ref bounds, ref default) => {\n             visitor.visit_id(trait_item.id);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }\n     }\n }\n \n+pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref: &'v TraitItemRef) {\n+    // NB: Deliberately force a compilation error if/when new fields are added.\n+    let TraitItemRef { id, name, ref kind, span, ref defaultness } = *trait_item_ref;\n+    visitor.visit_nested_trait_item(id);\n+    visitor.visit_name(span, name);\n+    visitor.visit_associated_item_kind(kind);\n+    visitor.visit_defaultness(defaultness);\n+}\n+\n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n     // NB: Deliberately force a compilation error if/when new fields are added.\n     let ImplItem { id: _, name, ref vis, ref defaultness, ref attrs, ref node, span } = *impl_item;"}, {"sha": "f359ca2016359ef85cf04f58d9ee2c1e7d67f3b4", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Item, ImplItem};\n+use super::{Item, ImplItem, TraitItem};\n use super::intravisit::Visitor;\n \n /// The \"item-like visitor\" visitor defines only the top-level methods\n@@ -58,6 +58,7 @@ use super::intravisit::Visitor;\n /// needed.\n pub trait ItemLikeVisitor<'hir> {\n     fn visit_item(&mut self, item: &'hir Item);\n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem);\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);\n }\n \n@@ -80,6 +81,10 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n         self.visitor.visit_item(item);\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem) {\n+        self.visitor.visit_trait_item(trait_item);\n+    }\n+\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem) {\n         self.visitor.visit_impl_item(impl_item);\n     }"}, {"sha": "752288118131051152c6d4162bab1e0d250c3df4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -51,7 +51,6 @@ use rustc_data_structures::fnv::FnvHashMap;\n \n use std::collections::BTreeMap;\n use std::iter;\n-use std::mem;\n \n use syntax::ast::*;\n use syntax::errors;\n@@ -77,6 +76,7 @@ pub struct LoweringContext<'a> {\n     /// The items being lowered are collected here.\n     items: BTreeMap<NodeId, hir::Item>,\n \n+    trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n }\n \n@@ -108,6 +108,7 @@ pub fn lower_crate(sess: &Session,\n         exprs: FnvHashMap(),\n         resolver: resolver,\n         items: BTreeMap::new(),\n+        trait_items: BTreeMap::new(),\n         impl_items: BTreeMap::new(),\n     }.lower_crate(krate)\n }\n@@ -133,8 +134,9 @@ impl<'a> LoweringContext<'a> {\n             span: c.span,\n             exported_macros: exported_macros,\n             items: self.items,\n+            trait_items: self.trait_items,\n             impl_items: self.impl_items,\n-            exprs: mem::replace(&mut self.exprs, FnvHashMap()),\n+            exprs: self.exprs,\n         }\n     }\n \n@@ -150,8 +152,15 @@ impl<'a> LoweringContext<'a> {\n                 visit::walk_item(self, item);\n             }\n \n+            fn visit_trait_item(&mut self, item: &'lcx TraitItem) {\n+                let id = hir::TraitItemId { node_id: item.id };\n+                let hir_item = self.lctx.lower_trait_item(item);\n+                self.lctx.trait_items.insert(id, hir_item);\n+                visit::walk_trait_item(self, item);\n+            }\n+\n             fn visit_impl_item(&mut self, item: &'lcx ImplItem) {\n-                let id = self.lctx.lower_impl_item_ref(item).id;\n+                let id = hir::ImplItemId { node_id: item.id };\n                 let hir_item = self.lctx.lower_impl_item(item);\n                 self.lctx.impl_items.insert(id, hir_item);\n                 visit::walk_impl_item(self, item);\n@@ -907,7 +916,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::Trait(unsafety, ref generics, ref bounds, ref items) => {\n                 let bounds = self.lower_bounds(bounds);\n-                let items = items.iter().map(|item| self.lower_trait_item(item)).collect();\n+                let items = items.iter().map(|item| self.lower_trait_item_ref(item)).collect();\n                 hir::ItemTrait(self.lower_unsafety(unsafety),\n                                self.lower_generics(generics),\n                                bounds,\n@@ -925,20 +934,20 @@ impl<'a> LoweringContext<'a> {\n                 attrs: this.lower_attrs(&i.attrs),\n                 node: match i.node {\n                     TraitItemKind::Const(ref ty, ref default) => {\n-                        hir::ConstTraitItem(this.lower_ty(ty),\n-                                            default.as_ref().map(|x| P(this.lower_expr(x))))\n+                        hir::TraitItemKind::Const(this.lower_ty(ty),\n+                                                  default.as_ref().map(|x| P(this.lower_expr(x))))\n                     }\n                     TraitItemKind::Method(ref sig, ref body) => {\n-                        hir::MethodTraitItem(this.lower_method_sig(sig),\n-                                             body.as_ref().map(|x| {\n+                        hir::TraitItemKind::Method(this.lower_method_sig(sig),\n+                                                   body.as_ref().map(|x| {\n                             let body = this.lower_block(x);\n                             let expr = this.expr_block(body, ThinVec::new());\n                             this.record_expr(expr)\n                         }))\n                     }\n                     TraitItemKind::Type(ref bounds, ref default) => {\n-                        hir::TypeTraitItem(this.lower_bounds(bounds),\n-                                           default.as_ref().map(|x| this.lower_ty(x)))\n+                        hir::TraitItemKind::Type(this.lower_bounds(bounds),\n+                                                 default.as_ref().map(|x| this.lower_ty(x)))\n                     }\n                     TraitItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n                 },\n@@ -947,6 +956,30 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n+    fn lower_trait_item_ref(&mut self, i: &TraitItem) -> hir::TraitItemRef {\n+        let (kind, has_default) = match i.node {\n+            TraitItemKind::Const(_, ref default) => {\n+                (hir::AssociatedItemKind::Const, default.is_some())\n+            }\n+            TraitItemKind::Type(_, ref default) => {\n+                (hir::AssociatedItemKind::Type, default.is_some())\n+            }\n+            TraitItemKind::Method(ref sig, ref default) => {\n+                (hir::AssociatedItemKind::Method {\n+                    has_self: sig.decl.has_self(),\n+                 }, default.is_some())\n+            }\n+            TraitItemKind::Macro(..) => unimplemented!(),\n+        };\n+        hir::TraitItemRef {\n+            id: hir::TraitItemId { node_id: i.id },\n+            name: i.ident.name,\n+            span: i.span,\n+            defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n+            kind: kind,\n+        }\n+    }\n+\n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n         self.with_parent_def(i.id, |this| {\n             hir::ImplItem {"}, {"sha": "8df4d669d0c66ee43a39897d068f775efa5477f7", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -62,7 +62,7 @@ impl MaybeFnLike for ast::Item {\n \n impl MaybeFnLike for ast::TraitItem {\n     fn is_fn_like(&self) -> bool {\n-        match self.node { ast::MethodTraitItem(_, Some(_)) => true, _ => false, }\n+        match self.node { ast::TraitItemKind::Method(_, Some(_)) => true, _ => false, }\n     }\n }\n \n@@ -252,7 +252,7 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             map::NodeTraitItem(ti) => match ti.node {\n-                ast::MethodTraitItem(ref sig, Some(body)) => {\n+                ast::TraitItemKind::Method(ref sig, Some(body)) => {\n                     method(ti.id, ti.name, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),"}, {"sha": "9a4047f70e3e77e7118165076b344cd41f1440df", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -98,6 +98,10 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         }\n     }\n \n+    fn visit_nested_trait_item(&mut self, item_id: TraitItemId) {\n+        self.visit_trait_item(self.krate.trait_item(item_id))\n+    }\n+\n     fn visit_nested_impl_item(&mut self, item_id: ImplItemId) {\n         self.visit_impl_item(self.krate.impl_item(item_id))\n     }"}, {"sha": "a6ead8efe51f879760b16969a6afd13cd643a0ab", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -257,10 +257,20 @@ impl<'ast> Map<'ast> {\n \n                         if let Some(last_id) = last_expr {\n                             // The body of the item may have a separate dep node\n-                            // (Note that trait items don't currently have\n-                            // their own dep node, so there's also just one\n-                            // HirBody node for all the items)\n-                            if self.is_body(last_id, item) {\n+                            if self.is_item_body(last_id, item) {\n+                                return DepNode::HirBody(def_id);\n+                            }\n+                        }\n+                        return DepNode::Hir(def_id);\n+                    }\n+\n+                    EntryTraitItem(_, item) => {\n+                        let def_id = self.local_def_id(id);\n+                        assert!(!self.is_inlined_def_id(def_id));\n+\n+                        if let Some(last_id) = last_expr {\n+                            // The body of the item may have a separate dep node\n+                            if self.is_trait_item_body(last_id, item) {\n                                 return DepNode::HirBody(def_id);\n                             }\n                         }\n@@ -280,7 +290,6 @@ impl<'ast> Map<'ast> {\n                     }\n \n                     EntryForeignItem(p, _) |\n-                    EntryTraitItem(p, _) |\n                     EntryVariant(p, _) |\n                     EntryField(p, _) |\n                     EntryStmt(p, _) |\n@@ -358,18 +367,16 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    fn is_body(&self, node_id: NodeId, item: &Item) -> bool {\n+    fn is_item_body(&self, node_id: NodeId, item: &Item) -> bool {\n         match item.node {\n             ItemFn(_, _, _, _, _, body) => body.node_id() == node_id,\n-            // Since trait items currently don't get their own dep nodes,\n-            // we check here whether node_id is the body of any of the items.\n-            // If they get their own dep nodes, this can go away\n-            ItemTrait(_, _, _, ref trait_items) => {\n-                trait_items.iter().any(|trait_item| { match trait_item.node {\n-                    MethodTraitItem(_, Some(body)) => body.node_id() == node_id,\n-                    _ => false\n-                }})\n-            }\n+            _ => false\n+        }\n+    }\n+\n+    fn is_trait_item_body(&self, node_id: NodeId, item: &TraitItem) -> bool {\n+        match item.node {\n+            TraitItemKind::Method(_, Some(body)) => body.node_id() == node_id,\n             _ => false\n         }\n     }\n@@ -436,6 +443,14 @@ impl<'ast> Map<'ast> {\n         self.forest.krate()\n     }\n \n+    pub fn trait_item(&self, id: TraitItemId) -> &'ast TraitItem {\n+        self.read(id.node_id);\n+\n+        // NB: intentionally bypass `self.forest.krate()` so that we\n+        // do not trigger a read of the whole krate here\n+        self.forest.krate.trait_item(id)\n+    }\n+\n     pub fn impl_item(&self, id: ImplItemId) -> &'ast ImplItem {\n         self.read(id.node_id);\n \n@@ -1045,9 +1060,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         }\n         Some(NodeTraitItem(ti)) => {\n             let kind = match ti.node {\n-                ConstTraitItem(..) => \"assoc constant\",\n-                MethodTraitItem(..) => \"trait method\",\n-                TypeTraitItem(..) => \"assoc type\",\n+                TraitItemKind::Const(..) => \"assoc constant\",\n+                TraitItemKind::Method(..) => \"trait method\",\n+                TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n             format!(\"{} {} in {}{}\", kind, ti.name, path_str(), id_str)"}, {"sha": "db65d34e3d9eba672e65b1a64241432db889fbdd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -22,7 +22,6 @@ pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n-pub use self::TraitItem_::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UnOp::*;\n@@ -41,7 +40,7 @@ use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, keywords};\n+use syntax::symbol::Symbol;\n use syntax::tokenstream::TokenTree;\n use syntax::util::ThinVec;\n \n@@ -431,6 +430,7 @@ pub struct Crate {\n     // slightly different results.\n     pub items: BTreeMap<NodeId, Item>,\n \n+    pub trait_items: BTreeMap<TraitItemId, TraitItem>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n     pub exprs: FnvHashMap<ExprId, Expr>,\n }\n@@ -440,6 +440,10 @@ impl Crate {\n         &self.items[&id]\n     }\n \n+    pub fn trait_item(&self, id: TraitItemId) -> &TraitItem {\n+        &self.trait_items[&id]\n+    }\n+\n     pub fn impl_item(&self, id: ImplItemId) -> &ImplItem {\n         &self.impl_items[&id]\n     }\n@@ -459,6 +463,10 @@ impl Crate {\n             visitor.visit_item(item);\n         }\n \n+        for (_, trait_item) in &self.trait_items {\n+            visitor.visit_trait_item(trait_item);\n+        }\n+\n         for (_, impl_item) in &self.impl_items {\n             visitor.visit_impl_item(impl_item);\n         }\n@@ -1070,6 +1078,14 @@ pub struct MethodSig {\n     pub generics: Generics,\n }\n \n+// The bodies for items are stored \"out of line\", in a separate\n+// hashmap in the `Crate`. Here we just record the node-id of the item\n+// so it can fetched later.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct TraitItemId {\n+    pub node_id: NodeId,\n+}\n+\n /// Represents an item declaration within a trait declaration,\n /// possibly including a default implementation. A trait item is\n /// either required (meaning it doesn't have an implementation, just a\n@@ -1079,21 +1095,21 @@ pub struct TraitItem {\n     pub id: NodeId,\n     pub name: Name,\n     pub attrs: HirVec<Attribute>,\n-    pub node: TraitItem_,\n+    pub node: TraitItemKind,\n     pub span: Span,\n }\n \n /// Represents a trait method or associated constant or type\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TraitItem_ {\n+pub enum TraitItemKind {\n     /// An associated constant with an optional value (otherwise `impl`s\n     /// must contain a value)\n-    ConstTraitItem(P<Ty>, Option<P<Expr>>),\n+    Const(P<Ty>, Option<P<Expr>>),\n     /// A method with an optional body\n-    MethodTraitItem(MethodSig, Option<ExprId>),\n+    Method(MethodSig, Option<ExprId>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type\n-    TypeTraitItem(TyParamBounds, Option<P<Ty>>),\n+    Type(TyParamBounds, Option<P<Ty>>),\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1234,16 +1250,6 @@ pub struct Arg {\n     pub id: NodeId,\n }\n \n-impl Arg {\n-    fn is_self(&self) -> bool {\n-        if let PatKind::Binding(_, _, name, _) = self.pat.node {\n-            name.node == keywords::SelfValue.name()\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n /// Represents the header (not the body) of a function declaration\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FnDecl {\n@@ -1252,12 +1258,6 @@ pub struct FnDecl {\n     pub variadic: bool,\n }\n \n-impl FnDecl {\n-    pub fn has_self(&self) -> bool {\n-        self.inputs.get(0).map(Arg::is_self).unwrap_or(false)\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n@@ -1548,7 +1548,7 @@ pub enum Item_ {\n     /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Unsafety, Generics, TyParamBounds, HirVec<TraitItem>),\n+    ItemTrait(Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n \n     // Default trait implementations\n     ///\n@@ -1584,6 +1584,21 @@ impl Item_ {\n     }\n }\n \n+/// A reference from an trait to one of its associated items. This\n+/// contains the item's id, naturally, but also the item's name and\n+/// some other high-level details (like whether it is an associated\n+/// type or method, and whether it is public). This allows other\n+/// passes to find the impl they want without loading the id (which\n+/// means fewer edges in the incremental compilation graph).\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct TraitItemRef {\n+    pub id: TraitItemId,\n+    pub name: Name,\n+    pub kind: AssociatedItemKind,\n+    pub span: Span,\n+    pub defaultness: Defaultness,\n+}\n+\n /// A reference from an impl to one of its associated items. This\n /// contains the item's id, naturally, but also the item's name and\n /// some other high-level details (like whether it is an associated"}, {"sha": "745ab4e6372dfbf0a1bef76c425944b0b42290d2", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -858,7 +858,7 @@ impl<'a> State<'a> {\n                 word(&mut self.s, \" \")?;\n                 self.bopen()?;\n                 for trait_item in trait_items {\n-                    self.print_trait_item(trait_item)?;\n+                    self.print_trait_item_ref(trait_item)?;\n                 }\n                 self.bclose(item.span)?;\n             }\n@@ -1008,19 +1008,29 @@ impl<'a> State<'a> {\n                       vis)\n     }\n \n+    pub fn print_trait_item_ref(&mut self, item_ref: &hir::TraitItemRef) -> io::Result<()> {\n+        if let Some(krate) = self.krate {\n+            // skip nested items if krate context was not provided\n+            let item = &krate.trait_item(item_ref.id);\n+            self.print_trait_item(item)\n+        } else {\n+            Ok(())\n+        }\n+    }\n+\n     pub fn print_trait_item(&mut self, ti: &hir::TraitItem) -> io::Result<()> {\n         self.ann.pre(self, NodeSubItem(ti.id))?;\n         self.hardbreak_if_not_bol()?;\n         self.maybe_print_comment(ti.span.lo)?;\n         self.print_outer_attributes(&ti.attrs)?;\n         match ti.node {\n-            hir::ConstTraitItem(ref ty, ref default) => {\n+            hir::TraitItemKind::Const(ref ty, ref default) => {\n                 self.print_associated_const(ti.name,\n                                             &ty,\n                                             default.as_ref().map(|expr| &**expr),\n                                             &hir::Inherited)?;\n             }\n-            hir::MethodTraitItem(ref sig, ref body) => {\n+            hir::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     self.head(\"\")?;\n                 }\n@@ -1034,7 +1044,7 @@ impl<'a> State<'a> {\n                     word(&mut self.s, \";\")?;\n                 }\n             }\n-            hir::TypeTraitItem(ref bounds, ref default) => {\n+            hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 self.print_associated_type(ti.name,\n                                            Some(bounds),\n                                            default.as_ref().map(|ty| &**ty))?;"}, {"sha": "026f4b187e2353ee960c231c810f71856b7b5578", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 },\n                 ast_map::NodeTraitItem(item) => {\n                     match item.node {\n-                        hir::MethodTraitItem(ref sig, Some(_)) => {\n+                        hir::TraitItemKind::Method(ref sig, Some(_)) => {\n                             Some((&sig.decl,\n                                   &sig.generics,\n                                   sig.unsafety,"}, {"sha": "7d570596386b68bc6023ffdd55c3833780af7a17", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -183,9 +183,9 @@ impl<'a> InlinedItemRef<'a> {\n                            _tcx: TyCtxt)\n                            -> InlinedItemRef<'a> {\n         let (body, args) = match item.node {\n-            hir::ConstTraitItem(_, Some(ref body)) =>\n+            hir::TraitItemKind::Const(_, Some(ref body)) =>\n                 (&**body, Vec::new()),\n-            hir::ConstTraitItem(_, None) => {\n+            hir::TraitItemKind::Const(_, None) => {\n                 bug!(\"InlinedItemRef::from_trait_item called for const without body\")\n             },\n             _ => bug!(\"InlinedItemRef::from_trait_item wrong kind\")"}, {"sha": "2206336164a179a3fc388c210905b240ad66a680", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -328,11 +328,12 @@ impl<'v, 'k> ItemLikeVisitor<'v> for LifeSeeder<'k> {\n                 self.worklist.extend(enum_def.variants.iter()\n                                                       .map(|variant| variant.node.data.id()));\n             }\n-            hir::ItemTrait(.., ref trait_items) => {\n-                for trait_item in trait_items {\n+            hir::ItemTrait(.., ref trait_item_refs) => {\n+                for trait_item_ref in trait_item_refs {\n+                    let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.node {\n-                        hir::ConstTraitItem(_, Some(_)) |\n-                        hir::MethodTraitItem(_, Some(_)) => {\n+                        hir::TraitItemKind::Const(_, Some(_)) |\n+                        hir::TraitItemKind::Method(_, Some(_)) => {\n                             if has_allow_dead_code_or_lang_attr(&trait_item.attrs) {\n                                 self.worklist.push(trait_item.id);\n                             }\n@@ -354,6 +355,10 @@ impl<'v, 'k> ItemLikeVisitor<'v> for LifeSeeder<'k> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _item: &hir::TraitItem) {\n+        // ignore: we are handling this in `visit_item` above\n+    }\n+\n     fn visit_impl_item(&mut self, _item: &hir::ImplItem) {\n         // ignore: we are handling this in `visit_item` above\n     }\n@@ -567,15 +572,15 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     // Overwrite so that we don't warn the trait item itself.\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         match trait_item.node {\n-            hir::ConstTraitItem(_, Some(ref body)) => {\n+            hir::TraitItemKind::Const(_, Some(ref body)) => {\n                 intravisit::walk_expr(self, body)\n             }\n-            hir::MethodTraitItem(_, Some(body_id)) => {\n+            hir::TraitItemKind::Method(_, Some(body_id)) => {\n                 self.visit_body(body_id)\n             }\n-            hir::ConstTraitItem(_, None) |\n-            hir::MethodTraitItem(_, None) |\n-            hir::TypeTraitItem(..) => {}\n+            hir::TraitItemKind::Const(_, None) |\n+            hir::TraitItemKind::Method(_, None) |\n+            hir::TraitItemKind::Type(..) => {}\n         }\n     }\n }"}, {"sha": "f2e46d4cbc96ba6c0831179db41b23e66e51fd29", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -17,7 +17,7 @@ use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n-use hir::{Item, ItemFn, ImplItem};\n+use hir::{Item, ItemFn, ImplItem, TraitItem};\n use hir::itemlikevisit::ItemLikeVisitor;\n \n struct EntryContext<'a, 'tcx: 'a> {\n@@ -47,6 +47,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n         find_item(item, self, at_root);\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &'tcx TraitItem) {\n+        // entry fn is never a trait item\n+    }\n \n     fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem) {\n         // entry fn is never an impl item"}, {"sha": "1c31e1800ee3acb1df76de10f83456f139a64753", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n-        if let hir::ConstTraitItem(_, Some(ref expr)) = item.node {\n+        if let hir::TraitItemKind::Const(_, Some(ref expr)) = item.node {\n             self.visit_const(item.id, expr);\n         } else {\n             intravisit::walk_trait_item(self, item);"}, {"sha": "4cae5b370eb7eb77ee603a62c373ccf456dafe60", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -140,6 +140,10 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+        // at present, lang items are always items, not trait items\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n         // at present, lang items are always items, not impl items\n     }"}, {"sha": "25f70d048198101311045cf66f8df846b2fef572", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -166,9 +166,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             Some(ast_map::NodeTraitItem(trait_method)) => {\n                 match trait_method.node {\n-                    hir::ConstTraitItem(_, ref default) => default.is_some(),\n-                    hir::MethodTraitItem(_, ref body) => body.is_some(),\n-                    hir::TypeTraitItem(..) => false,\n+                    hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n+                    hir::TraitItemKind::Method(_, ref body) => body.is_some(),\n+                    hir::TraitItemKind::Type(..) => false,\n                 }\n             }\n             Some(ast_map::NodeImplItem(impl_item)) => {\n@@ -274,17 +274,17 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             ast_map::NodeTraitItem(trait_method) => {\n                 match trait_method.node {\n-                    hir::ConstTraitItem(_, None) |\n-                    hir::MethodTraitItem(_, None) => {\n+                    hir::TraitItemKind::Const(_, None) |\n+                    hir::TraitItemKind::Method(_, None) => {\n                         // Keep going, nothing to get exported\n                     }\n-                    hir::ConstTraitItem(_, Some(ref body)) => {\n+                    hir::TraitItemKind::Const(_, Some(ref body)) => {\n                         self.visit_expr(body);\n                     }\n-                    hir::MethodTraitItem(_, Some(body_id)) => {\n+                    hir::TraitItemKind::Method(_, Some(body_id)) => {\n                         self.visit_body(body_id);\n                     }\n-                    hir::TypeTraitItem(..) => {}\n+                    hir::TraitItemKind::Type(..) => {}\n                 }\n             }\n             ast_map::NodeImplItem(impl_item) => {\n@@ -358,6 +358,8 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {}\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n         // processed in visit_item above\n     }"}, {"sha": "443770e61b6589612853a46d05e3c51423e49555", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -266,7 +266,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         // methods in an impl can reuse label names.\n         let saved = replace(&mut self.labels_in_fn, vec![]);\n \n-        if let hir::MethodTraitItem(ref sig, None) = trait_item.node {\n+        if let hir::TraitItemKind::Method(ref sig, None) = trait_item.node {\n             self.visit_early_late(\n                 trait_item.id,\n                 &sig.decl, &sig.generics,"}, {"sha": "3c5a91f4ff04c8dae35599a94bbf7d9964032d2e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> MirSource {\n \n         match tcx.map.get(id) {\n             map::NodeItem(&Item { node: ItemConst(..), .. }) |\n-            map::NodeTraitItem(&TraitItem { node: ConstTraitItem(..), .. }) |\n+            map::NodeTraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n             map::NodeImplItem(&ImplItem { node: ImplItemKind::Const(..), .. }) => {\n                 MirSource::Const(id)\n             }"}, {"sha": "67137470098db2f2684181e68c70b3a82b14e378", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1212,7 +1212,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeTraitItem(trait_item)) => {\n                 match trait_item.node {\n-                    hir::TypeTraitItem(..) | hir::ConstTraitItem(..) => {\n+                    hir::TraitItemKind::Type(..) | hir::TraitItemKind::Const(..) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the trait\n                         let trait_id = tcx.map.get_parent(id);\n@@ -1221,7 +1221,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             trait_def_id,\n                                                             tcx.region_maps.item_extent(id))\n                     }\n-                    hir::MethodTraitItem(_, ref body) => {\n+                    hir::TraitItemKind::Method(_, ref body) => {\n                         // Use call-site for extent (unless this is a\n                         // trait method with no default; then fallback\n                         // to the method id).\n@@ -2100,10 +2100,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                hir::ItemTrait(.., ref trait_items) => {\n-                    for trait_item in trait_items {\n+                hir::ItemTrait(.., ref trait_item_refs) => {\n+                    for trait_item_ref in trait_item_refs {\n                         let assoc_item =\n-                            self.associated_item_from_trait_item_ref(parent_def_id, trait_item);\n+                            self.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n                         self.associated_items.borrow_mut().insert(assoc_item.def_id, assoc_item);\n                     }\n                 }\n@@ -2121,28 +2121,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     fn associated_item_from_trait_item_ref(self,\n                                            parent_def_id: DefId,\n-                                           trait_item: &hir::TraitItem)\n+                                           trait_item_ref: &hir::TraitItemRef)\n                                            -> AssociatedItem {\n-        let def_id = self.map.local_def_id(trait_item.id);\n-\n-        let (kind, has_self, has_value) = match trait_item.node {\n-            hir::MethodTraitItem(ref sig, ref body) => {\n-                (AssociatedKind::Method, sig.decl.has_self(),\n-                 body.is_some())\n-            }\n-            hir::ConstTraitItem(_, ref value) => {\n-                (AssociatedKind::Const, false, value.is_some())\n-            }\n-            hir::TypeTraitItem(_, ref ty) => {\n-                (AssociatedKind::Type, false, ty.is_some())\n+        let def_id = self.map.local_def_id(trait_item_ref.id.node_id);\n+        let (kind, has_self) = match trait_item_ref.kind {\n+            hir::AssociatedItemKind::Const => (ty::AssociatedKind::Const, false),\n+            hir::AssociatedItemKind::Method { has_self } => {\n+                (ty::AssociatedKind::Method, has_self)\n             }\n+            hir::AssociatedItemKind::Type => (ty::AssociatedKind::Type, false),\n         };\n \n         AssociatedItem {\n-            name: trait_item.name,\n+            name: trait_item_ref.name,\n             kind: kind,\n-            vis: Visibility::from_hir(&hir::Inherited, trait_item.id, self),\n-            defaultness: hir::Defaultness::Default { has_value: has_value },\n+            vis: Visibility::from_hir(&hir::Inherited, trait_item_ref.id.node_id, self),\n+            defaultness: trait_item_ref.defaultness,\n             def_id: def_id,\n             container: TraitContainer(parent_def_id),\n             method_has_self_argument: has_self\n@@ -2187,11 +2181,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             let id = self.map.as_local_node_id(def_id).unwrap();\n             let item = self.map.expect_item(id);\n             let vec: Vec<_> = match item.node {\n-                hir::ItemTrait(.., ref trait_items) => {\n-                    trait_items.iter()\n-                               .map(|trait_item| trait_item.id)\n-                               .map(|id| self.map.local_def_id(id))\n-                               .collect()\n+                hir::ItemTrait(.., ref trait_item_refs) => {\n+                    trait_item_refs.iter()\n+                                   .map(|trait_item_ref| trait_item_ref.id)\n+                                   .map(|id| self.map.local_def_id(id.node_id))\n+                                   .collect()\n                 }\n                 hir::ItemImpl(.., ref impl_item_refs) => {\n                     impl_item_refs.iter()"}, {"sha": "ebbd1baa8fabbcef14b37b4e07ca91b44f186a8a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n-        if let hir::ConstTraitItem(_, Some(ref expr)) = ti.node {\n+        if let hir::TraitItemKind::Const(_, Some(ref expr)) = ti.node {\n             gather_loans::gather_loans_in_static_initializer(self, ti.id, &expr);\n         }\n         intravisit::walk_trait_item(self, ti);"}, {"sha": "da28187496bb300daeb98ae8b41c73404db940b2", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n-        if let hir::ConstTraitItem(..) = item.node {\n+        if let hir::TraitItemKind::Const(..) = item.node {\n             return // nothing worth match checking in a constant\n         } else {\n             intravisit::walk_trait_item(self, item);"}, {"sha": "09f38e5be8f1f634922ffada229207fe3575da4b", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -102,7 +102,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeTraitItem(ti)) => match ti.node {\n-                hir::ConstTraitItem(ref ty, ref expr_option) => {\n+                hir::TraitItemKind::Const(ref ty, ref expr_option) => {\n                     if let Some(substs) = substs {\n                         // If we have a trait item and the substitutions for it,\n                         // `resolve_trait_associated_const` will select an impl"}, {"sha": "6a884bafce752dcc0060cfc68247830c2800459c", "filename": "src/librustc_driver/derive_registrar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_driver%2Fderive_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_driver%2Fderive_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fderive_registrar.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -35,6 +35,9 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "b5fe158f158cac7aead2d5fe5d8144a75243b3fa", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -171,6 +171,10 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for IfThisChanged<'a, 'tcx> {\n         self.process_attrs(item.id, &item.attrs);\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        self.process_attrs(trait_item.id, &trait_item.attrs);\n+    }\n+\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         self.process_attrs(impl_item.id, &impl_item.attrs);\n     }"}, {"sha": "49609fbc7984f937c84ea3ab51b227db64a7f45f", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -234,6 +234,11 @@ impl<'a, 'tcx> Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n         visit::walk_item(self, item);\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        self.calculate_node_id(trait_item.id, |v| v.visit_trait_item(trait_item));\n+        visit::walk_trait_item(self, trait_item);\n+    }\n+\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         self.calculate_node_id(impl_item.id, |v| v.visit_impl_item(impl_item));\n         visit::walk_impl_item(self, impl_item);"}, {"sha": "173bcdc5b7a1661ab45a5cdf2c8c6d5cc54ee3d9", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -473,12 +473,12 @@ enum SawTraitOrImplItemComponent {\n     SawTraitOrImplItemType\n }\n \n-fn saw_trait_item(ti: &TraitItem_) -> SawTraitOrImplItemComponent {\n+fn saw_trait_item(ti: &TraitItemKind) -> SawTraitOrImplItemComponent {\n     match *ti {\n-        ConstTraitItem(..) => SawTraitOrImplItemConst,\n-        MethodTraitItem(ref sig, ref body) =>\n+        TraitItemKind::Const(..) => SawTraitOrImplItemConst,\n+        TraitItemKind::Method(ref sig, ref body) =>\n             SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi, body.is_some()),\n-        TypeTraitItem(..) => SawTraitOrImplItemType\n+        TraitItemKind::Type(..) => SawTraitOrImplItemType\n     }\n }\n \n@@ -1157,6 +1157,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             // These fields are handled separately:\n             exported_macros: _,\n             items: _,\n+            trait_items: _,\n             impl_items: _,\n             exprs: _,\n         } = *krate;"}, {"sha": "481462dff86e479289e36f363defdd3598877cd2", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -185,6 +185,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }\n@@ -229,6 +232,9 @@ impl<'a, 'tcx, 'm> ItemLikeVisitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx,\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "4be6058ec2f975302df4441f1f74a4bcc69cc880", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, trait_item: &hir::TraitItem) {\n-        if let hir::MethodTraitItem(_, None) = trait_item.node {\n+        if let hir::TraitItemKind::Method(_, None) = trait_item.node {\n             self.check_snake_case(cx,\n                                   \"trait method\",\n                                   &trait_item.name.as_str(),\n@@ -363,7 +363,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n \n     fn check_trait_item(&mut self, cx: &LateContext, ti: &hir::TraitItem) {\n         match ti.node {\n-            hir::ConstTraitItem(..) => {\n+            hir::TraitItemKind::Const(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", ti.name, ti.span);\n             }\n             _ => {}"}, {"sha": "0fb5dbf0ad27dae16dd8b76ff0c3818c696177dd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, trait_item: &hir::TraitItem) {\n-        if let hir::MethodTraitItem(ref sig, None) = trait_item.node {\n+        if let hir::TraitItemKind::Method(ref sig, None) = trait_item.node {\n             if sig.unsafety == hir::Unsafety::Unsafe {\n                 cx.span_lint(UNSAFE_CODE,\n                              trait_item.span,\n@@ -374,12 +374,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemEnum(..) => \"an enum\",\n             hir::ItemStruct(..) => \"a struct\",\n             hir::ItemUnion(..) => \"a union\",\n-            hir::ItemTrait(.., ref items) => {\n+            hir::ItemTrait(.., ref trait_item_refs) => {\n                 // Issue #11592, traits are always considered exported, even when private.\n                 if it.vis == hir::Visibility::Inherited {\n                     self.private_traits.insert(it.id);\n-                    for itm in items {\n-                        self.private_traits.insert(itm.id);\n+                    for trait_item_ref in trait_item_refs {\n+                        self.private_traits.insert(trait_item_ref.id.node_id);\n                     }\n                     return;\n                 }\n@@ -418,9 +418,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n \n         let desc = match trait_item.node {\n-            hir::ConstTraitItem(..) => \"an associated constant\",\n-            hir::MethodTraitItem(..) => \"a trait method\",\n-            hir::TypeTraitItem(..) => \"an associated type\",\n+            hir::TraitItemKind::Const(..) => \"an associated constant\",\n+            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n \n         self.check_missing_docs_attrs(cx,"}, {"sha": "72abf3ea36a5e2fa354f5297d4944a54fb93fe33", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let kind = match trait_item.kind {\n             ty::AssociatedKind::Const => EntryKind::AssociatedConst(container),\n             ty::AssociatedKind::Method => {\n-                let fn_data = if let hir::MethodTraitItem(ref sig, _) = ast_item.node {\n+                let fn_data = if let hir::TraitItemKind::Method(ref sig, _) = ast_item.node {\n                     FnData {\n                         constness: hir::Constness::NotConst,\n                         arg_names: self.encode_fn_arg_names(&sig.decl),\n@@ -486,7 +486,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n \n-            ast: if let hir::ConstTraitItem(_, Some(_)) = ast_item.node {\n+            ast: if let hir::TraitItemKind::Const(_, Some(_)) = ast_item.node {\n                 // We only save the HIR for associated consts with bodies\n                 // (InlinedItemRef::from_trait_item panics otherwise)\n                 let trait_def_id = trait_item.container.id();\n@@ -1162,6 +1162,8 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem) {}\n+\n     fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem) {\n         // handled in `visit_item` above\n     }"}, {"sha": "403b84c75842571ffcad30b6641559d7f031ee2b", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n \n     // Trait associated const defaults.\n     fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n-        if let hir::ConstTraitItem(_, Some(ref expr)) = item.node {\n+        if let hir::TraitItemKind::Const(_, Some(ref expr)) = item.node {\n             self.cx(MirSource::Const(item.id)).build(|cx| {\n                 build::construct_const(cx, item.id, expr)\n             });"}, {"sha": "2ea5c6d8c4795604d396a1200872b030935ce0a3", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, t: &'tcx hir::TraitItem) {\n         match t.node {\n-            hir::ConstTraitItem(_, ref default) => {\n+            hir::TraitItemKind::Const(_, ref default) => {\n                 if let Some(ref expr) = *default {\n                     self.global_expr(Mode::Const, &expr);\n                 } else {"}, {"sha": "34b6c5e7571b608a6da4148fdaffbfa9a5de9691", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -115,6 +115,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.visit_item(nested_item)\n     }\n \n+    fn visit_nested_trait_item(&mut self, trait_item_id: hir::TraitItemId) {\n+        let nested_trait_item = self.krate.unwrap().trait_item(trait_item_id);\n+        self.visit_trait_item(nested_trait_item)\n+    }\n+\n     fn visit_nested_impl_item(&mut self, impl_item_id: hir::ImplItemId) {\n         let nested_impl_item = self.krate.unwrap().impl_item(impl_item_id);\n         self.visit_impl_item(nested_impl_item)"}, {"sha": "213d85203a79e542bdc261ae8ac546a8329f58c8", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n         match ti.node {\n-            hir::ConstTraitItem(_, ref default) => {\n+            hir::TraitItemKind::Const(_, ref default) => {\n                 if let Some(_) = *default {\n                     let mut recursion_visitor = CheckItemRecursionVisitor::new(self, &ti.span);\n                     recursion_visitor.visit_trait_item(ti);"}, {"sha": "34ebd12de9c18fbc38b56baedf7ff4ddcbf50e1c", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -33,6 +33,9 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "81863a3fadfd36f69badeacf39ac631fe6905b38", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -160,21 +160,19 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n             hir::ItemImpl(.., None, _, ref impl_item_refs) => {\n                 for impl_item_ref in impl_item_refs {\n-                    let impl_item = self.tcx.map.impl_item(impl_item_ref.id);\n-                    if impl_item.vis == hir::Public {\n-                        self.update(impl_item.id, item_level);\n+                    if impl_item_ref.vis == hir::Public {\n+                        self.update(impl_item_ref.id.node_id, item_level);\n                     }\n                 }\n             }\n             hir::ItemImpl(.., Some(_), _, ref impl_item_refs) => {\n                 for impl_item_ref in impl_item_refs {\n-                    let impl_item = self.tcx.map.impl_item(impl_item_ref.id);\n-                    self.update(impl_item.id, item_level);\n+                    self.update(impl_item_ref.id.node_id, item_level);\n                 }\n             }\n-            hir::ItemTrait(.., ref trait_items) => {\n-                for trait_item in trait_items {\n-                    self.update(trait_item.id, item_level);\n+            hir::ItemTrait(.., ref trait_item_refs) => {\n+                for trait_item_ref in trait_item_refs {\n+                    self.update(trait_item_ref.id.node_id, item_level);\n                 }\n             }\n             hir::ItemStruct(ref def, _) | hir::ItemUnion(ref def, _) => {\n@@ -214,15 +212,16 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     self.reach(item.id).generics().predicates().item_type();\n                 }\n             }\n-            hir::ItemTrait(.., ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_item_refs) => {\n                 if item_level.is_some() {\n                     self.reach(item.id).generics().predicates();\n \n-                    for trait_item in trait_items {\n-                        let mut reach = self.reach(trait_item.id);\n+                    for trait_item_ref in trait_item_refs {\n+                        let mut reach = self.reach(trait_item_ref.id.node_id);\n                         reach.generics().predicates();\n \n-                        if let hir::TypeTraitItem(_, None) = trait_item.node {\n+                        if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n+                           !trait_item_ref.defaultness.has_value() {\n                             // No type to visit.\n                         } else {\n                             reach.item_type();\n@@ -231,12 +230,12 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n             // Visit everything except for private impl items\n-            hir::ItemImpl(.., ref trait_ref, _, ref impl_items) => {\n+            hir::ItemImpl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 if item_level.is_some() {\n                     self.reach(item.id).generics().predicates().impl_trait_ref();\n \n-                    for impl_item in impl_items {\n-                        let id = impl_item.id.node_id;\n+                    for impl_item_ref in impl_item_refs {\n+                        let id = impl_item_ref.id.node_id;\n                         if trait_ref.is_some() || self.get(id).is_some() {\n                             self.reach(id).generics().predicates().item_type();\n                         }\n@@ -789,22 +788,19 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     // methods will be visible as `Public::foo`.\n                     let mut found_pub_static = false;\n                     for impl_item_ref in impl_item_refs {\n-                        let impl_item = self.tcx.map.impl_item(impl_item_ref.id);\n-                        match impl_item.node {\n-                            hir::ImplItemKind::Const(..) => {\n-                                if self.item_is_public(&impl_item.id, &impl_item.vis) {\n+                        if self.item_is_public(&impl_item_ref.id.node_id, &impl_item_ref.vis) {\n+                            let impl_item = self.tcx.map.impl_item(impl_item_ref.id);\n+                            match impl_item_ref.kind {\n+                                hir::AssociatedItemKind::Const => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n-                            }\n-                            hir::ImplItemKind::Method(ref sig, _) => {\n-                                if !sig.decl.has_self() &&\n-                                        self.item_is_public(&impl_item.id, &impl_item.vis) {\n+                                hir::AssociatedItemKind::Method { has_self: false } => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n+                                _ => {}\n                             }\n-                            _ => {}\n                         }\n                     }\n                     if found_pub_static {\n@@ -1092,14 +1088,15 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.inner_visibility = item_visibility;\n                 intravisit::walk_item(self, item);\n             }\n-            hir::ItemTrait(.., ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_item_refs) => {\n                 self.check(item.id, item_visibility).generics().predicates();\n \n-                for trait_item in trait_items {\n-                    let mut check = self.check(trait_item.id, item_visibility);\n+                for trait_item_ref in trait_item_refs {\n+                    let mut check = self.check(trait_item_ref.id.node_id, item_visibility);\n                     check.generics().predicates();\n \n-                    if let hir::TypeTraitItem(_, None) = trait_item.node {\n+                    if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n+                       !trait_item_ref.defaultness.has_value() {\n                         // No type to visit.\n                     } else {\n                         check.item_type();"}, {"sha": "c5c009ccca6c88990cc107cf8de91d91d3c71cab", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1122,6 +1122,11 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _: &'v hir::TraitItem) {\n+        // Even if there's a default body with no explicit generics,\n+        // it's still generic over some `Self: Trait`, so not a root.\n+    }\n+\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.node {\n             hir::ImplItemKind::Method(hir::MethodSig {"}, {"sha": "a23a2acadb43f6bb63208a943473518359a25619", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1708,12 +1708,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     pub fn ty_of_method(&self,\n                         sig: &hir::MethodSig,\n-                        untransformed_self_ty: Ty<'tcx>,\n+                        opt_self_value_ty: Option<Ty<'tcx>>,\n                         anon_scope: Option<AnonTypeScope>)\n                         -> &'tcx ty::BareFnTy<'tcx> {\n         self.ty_of_method_or_bare_fn(sig.unsafety,\n                                      sig.abi,\n-                                     Some(untransformed_self_ty),\n+                                     opt_self_value_ty,\n                                      &sig.decl,\n                                      None,\n                                      anon_scope)\n@@ -1731,7 +1731,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     fn ty_of_method_or_bare_fn(&self,\n                                unsafety: hir::Unsafety,\n                                abi: abi::Abi,\n-                               opt_untransformed_self_ty: Option<Ty<'tcx>>,\n+                               opt_self_value_ty: Option<Ty<'tcx>>,\n                                decl: &hir::FnDecl,\n                                arg_anon_scope: Option<AnonTypeScope>,\n                                ret_anon_scope: Option<AnonTypeScope>)\n@@ -1746,13 +1746,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let input_tys: Vec<Ty> =\n             decl.inputs.iter().map(|a| self.ty_of_arg(&rb, a, None)).collect();\n \n-        let has_self = decl.has_self();\n-        let explicit_self = match (opt_untransformed_self_ty, has_self) {\n-            (Some(untransformed_self_ty), true) => {\n-                Some(ExplicitSelf::determine(untransformed_self_ty, input_tys[0]))\n-            }\n-            _ => None\n-        };\n+        let has_self = opt_self_value_ty.is_some();\n+        let explicit_self = opt_self_value_ty.map(|self_value_ty| {\n+            ExplicitSelf::determine(self_value_ty, input_tys[0])\n+        });\n \n         let implied_output_region = match explicit_self {\n             // `implied_output_region` is the region that will be assumed for any"}, {"sha": "0a18aad2712bb694029009540b08931451a27d35", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir::{self, ImplItemKind, TraitItem_};\n+use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::ty;\n@@ -449,10 +449,10 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n         TypeError::Mutability => {\n             if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n-                    TraitItem_::MethodTraitItem(ref trait_m_sig, _) => {\n+                    TraitItemKind::Method(ref trait_m_sig, _) => {\n                         trait_m_sig.decl.inputs.iter()\n                     }\n-                    _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m),\n+                    _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n                 };\n \n                 impl_m_iter.zip(trait_m_iter).find(|&(ref impl_arg, ref trait_arg)| {\n@@ -475,10 +475,10 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n             if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n                     match tcx.map.expect_trait_item(trait_m_node_id).node {\n-                        TraitItem_::MethodTraitItem(ref trait_m_sig, _) => {\n+                        TraitItemKind::Method(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n-                        _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m),\n+                        _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n                     };\n \n                 let impl_iter = impl_sig.inputs().iter();\n@@ -674,7 +674,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         let trait_m_node_id = tcx.map.as_local_node_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_node_id {\n             match tcx.map.expect_trait_item(trait_id).node {\n-                TraitItem_::MethodTraitItem(ref trait_m_sig, _) => {\n+                TraitItemKind::Method(ref trait_m_sig, _) => {\n                     if let Some(arg) = trait_m_sig.decl.inputs.get(if trait_number_args > 0 {\n                         trait_number_args - 1\n                     } else {\n@@ -825,7 +825,7 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             // Add a label to the Span containing just the type of the item\n             let trait_c_node_id = tcx.map.as_local_node_id(trait_c.def_id).unwrap();\n             let trait_c_span = match tcx.map.expect_trait_item(trait_c_node_id).node {\n-                TraitItem_::ConstTraitItem(ref ty, _) => ty.span,\n+                TraitItemKind::Const(ref ty, _) => ty.span,\n                 _ => bug!(\"{:?} is not a trait const\", trait_c),\n             };\n "}, {"sha": "4664f51d67bf5d1a22061010ade580249d770c7b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -463,6 +463,9 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                 }\n             }\n \n+            fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+            }\n+\n             fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n             }\n         }"}, {"sha": "2f39ef0aac61111605d3adad73808f7b0b404995", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -565,6 +565,10 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n         check_item_body(self.ccx, i);\n     }\n \n+    fn visit_trait_item(&mut self, _item: &'tcx hir::TraitItem) {\n+        // done as part of `visit_item` above\n+    }\n+\n     fn visit_impl_item(&mut self, _item: &'tcx hir::ImplItem) {\n         // done as part of `visit_item` above\n     }\n@@ -945,18 +949,19 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n             }\n         }\n       }\n-      hir::ItemTrait(.., ref trait_items) => {\n-        for trait_item in trait_items {\n+      hir::ItemTrait(.., ref trait_item_refs) => {\n+        for trait_item_ref in trait_item_refs {\n+            let trait_item = ccx.tcx.map.trait_item(trait_item_ref.id);\n             match trait_item.node {\n-                hir::ConstTraitItem(_, Some(ref expr)) => {\n+                hir::TraitItemKind::Const(_, Some(ref expr)) => {\n                     check_const(ccx, &expr, trait_item.id)\n                 }\n-                hir::MethodTraitItem(ref sig, Some(body_id)) => {\n+                hir::TraitItemKind::Method(ref sig, Some(body_id)) => {\n                     check_bare_fn(ccx, &sig.decl, body_id, trait_item.id, trait_item.span);\n                 }\n-                hir::MethodTraitItem(_, None) |\n-                hir::ConstTraitItem(_, None) |\n-                hir::TypeTraitItem(..) => {\n+                hir::TraitItemKind::Method(_, None) |\n+                hir::TraitItemKind::Const(_, None) |\n+                hir::TraitItemKind::Type(..) => {\n                     // Nothing to do.\n                 }\n             }"}, {"sha": "b836bba3dab34ea22bcdd598f843a54863d71dc0", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -159,10 +159,10 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         }\n     }\n \n-    fn check_trait_or_impl_item(&mut self,\n-                                item_id: ast::NodeId,\n-                                span: Span,\n-                                sig_if_method: Option<&hir::MethodSig>) {\n+    fn check_associated_item(&mut self,\n+                             item_id: ast::NodeId,\n+                             span: Span,\n+                             sig_if_method: Option<&hir::MethodSig>) {\n         let code = self.code.clone();\n         self.for_id(item_id, span).with_fcx(|fcx, this| {\n             let free_substs = &fcx.parameter_environment.free_substs;\n@@ -607,10 +607,10 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let method_sig = match trait_item.node {\n-            hir::TraitItem_::MethodTraitItem(ref sig, _) => Some(sig),\n+            hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n             _ => None\n         };\n-        self.check_trait_or_impl_item(trait_item.id, trait_item.span, method_sig);\n+        self.check_associated_item(trait_item.id, trait_item.span, method_sig);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n@@ -620,7 +620,7 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n             _ => None\n         };\n-        self.check_trait_or_impl_item(impl_item.id, impl_item.span, method_sig);\n+        self.check_associated_item(impl_item.id, impl_item.span, method_sig);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n }"}, {"sha": "cd9453770a6ab28ff7a3e63af12db965a526fcec", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -50,6 +50,9 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "3bbe5aa1fef376272fd19e28e1f57ae5f4b741ae", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -58,6 +58,9 @@ impl<'a, 'gcx, 'tcx, 'v> ItemLikeVisitor<'v> for CoherenceCheckVisitor<'a, 'gcx,\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "f3cfaf6624e4348d86aaa02f8323bb6a6609eb7c", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -67,13 +67,15 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n             }\n         }\n     }\n+}\n \n+impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n     /// Checks exactly one impl for orphan rules and other such\n     /// restrictions.  In this fn, it can happen that multiple errors\n     /// apply to a specific impl, so just return after reporting one\n     /// to prevent inundating the user with a bunch of similar error\n     /// reports.\n-    fn check_item(&self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n             hir::ItemImpl(.., None, ref ty, _) => {\n@@ -378,11 +380,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n             }\n         }\n     }\n-}\n \n-impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n-        self.check_item(item);\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "a09bdf0533a151ecd7373192412932bcf0561d6f", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -205,6 +205,9 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "c4c7c699f65f62ba5c8a74524587d35e9de8e51d", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -107,6 +107,9 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "5e41ee70dd25fc35ff0b0a60d25fc3648c1e6d0b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 58, "deletions": 50, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -204,6 +204,13 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, ty);\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        self.with_collect_item_sig(trait_item.id, || {\n+            convert_trait_item(self.ccx, trait_item)\n+        });\n+        intravisit::walk_trait_item(self, trait_item);\n+    }\n+\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         self.with_collect_item_sig(impl_item.id, || {\n             convert_impl_item(self.ccx, impl_item)\n@@ -644,8 +651,14 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         ImplContainer(_) => Some(AnonTypeScope::new(def_id)),\n         TraitContainer(_) => None\n     };\n+    let assoc_item = ccx.tcx.associated_item(def_id);\n+    let self_value_ty = if assoc_item.method_has_self_argument {\n+        Some(untransformed_rcvr_ty)\n+    } else {\n+        None\n+    };\n     let fty = AstConv::ty_of_method(&ccx.icx(&(rcvr_ty_predicates, &sig.generics)),\n-                                    sig, untransformed_rcvr_ty, anon_scope);\n+                                    sig, self_value_ty, anon_scope);\n \n     let substs = mk_item_substs(&ccx.icx(&(rcvr_ty_predicates, &sig.generics)),\n                                 ccx.tcx.map.span(id), def_id);\n@@ -785,56 +798,12 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             tcx.predicates.borrow_mut().insert(def_id, ty_predicates.clone());\n         },\n-        hir::ItemTrait(.., ref trait_items) => {\n+        hir::ItemTrait(..) => {\n             generics_of_def_id(ccx, def_id);\n             trait_def_of_item(ccx, it);\n             let _: Result<(), ErrorReported> = // any error is already reported, can ignore\n                 ccx.ensure_super_predicates(it.span, def_id);\n             convert_trait_predicates(ccx, it);\n-            let trait_predicates = tcx.item_predicates(def_id);\n-\n-            debug!(\"convert: trait_bounds={:?}\", trait_predicates);\n-\n-            // FIXME: is the ordering here important? I think it is.\n-            let container = TraitContainer(def_id);\n-\n-            // Convert all the associated constants.\n-            for trait_item in trait_items {\n-                if let hir::ConstTraitItem(ref ty, _) = trait_item.node {\n-                    let const_def_id = ccx.tcx.map.local_def_id(trait_item.id);\n-                    generics_of_def_id(ccx, const_def_id);\n-                    let ty = ccx.icx(&trait_predicates)\n-                        .to_ty(&ExplicitRscope, ty);\n-                    tcx.item_types.borrow_mut().insert(const_def_id, ty);\n-                    convert_associated_const(ccx, container, trait_item.id, ty)\n-                }\n-            }\n-\n-            // Convert all the associated types.\n-            for trait_item in trait_items {\n-                if let hir::TypeTraitItem(_, ref opt_ty) = trait_item.node {\n-                    let type_def_id = ccx.tcx.map.local_def_id(trait_item.id);\n-                    generics_of_def_id(ccx, type_def_id);\n-\n-                    let typ = opt_ty.as_ref().map({\n-                        |ty| ccx.icx(&trait_predicates).to_ty(&ExplicitRscope, &ty)\n-                    });\n-\n-                    convert_associated_type(ccx, container, trait_item.id, typ);\n-                }\n-            }\n-\n-            // Convert all the methods\n-            for trait_item in trait_items {\n-                if let hir::MethodTraitItem(ref sig, _) = trait_item.node {\n-                    convert_method(ccx,\n-                                   container,\n-                                   trait_item.id,\n-                                   sig,\n-                                   tcx.mk_self_type(),\n-                                   &trait_predicates);\n-                }\n-            }\n         },\n         hir::ItemStruct(ref struct_def, _) |\n         hir::ItemUnion(ref struct_def, _) => {\n@@ -866,6 +835,44 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     }\n }\n \n+fn convert_trait_item(ccx: &CrateCtxt, trait_item: &hir::TraitItem) {\n+    let tcx = ccx.tcx;\n+\n+    // we can lookup details about the trait because items are visited\n+    // before trait-items\n+    let trait_def_id = tcx.map.get_parent_did(trait_item.id);\n+    let trait_predicates = tcx.item_predicates(trait_def_id);\n+\n+    match trait_item.node {\n+        hir::TraitItemKind::Const(ref ty, _) => {\n+            let const_def_id = ccx.tcx.map.local_def_id(trait_item.id);\n+            generics_of_def_id(ccx, const_def_id);\n+            let ty = ccx.icx(&trait_predicates)\n+                        .to_ty(&ExplicitRscope, &ty);\n+            tcx.item_types.borrow_mut().insert(const_def_id, ty);\n+            convert_associated_const(ccx, TraitContainer(trait_def_id),\n+                                     trait_item.id, ty);\n+        }\n+\n+        hir::TraitItemKind::Type(_, ref opt_ty) => {\n+            let type_def_id = ccx.tcx.map.local_def_id(trait_item.id);\n+            generics_of_def_id(ccx, type_def_id);\n+\n+            let typ = opt_ty.as_ref().map({\n+                |ty| ccx.icx(&trait_predicates).to_ty(&ExplicitRscope, &ty)\n+            });\n+\n+            convert_associated_type(ccx, TraitContainer(trait_def_id), trait_item.id, typ);\n+        }\n+\n+        hir::TraitItemKind::Method(ref sig, _) => {\n+            convert_method(ccx, TraitContainer(trait_def_id),\n+                           trait_item.id, sig, tcx.mk_self_type(),\n+                           &trait_predicates);\n+        }\n+    }\n+}\n+\n fn convert_impl_item(ccx: &CrateCtxt, impl_item: &hir::ImplItem) {\n     let tcx = ccx.tcx;\n \n@@ -1290,12 +1297,13 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &hir::Item)\n                                                  ast_generics: &hir::Generics,\n                                                  trait_predicates: &ty::GenericPredicates<'tcx>,\n                                                  self_trait_ref: ty::TraitRef<'tcx>,\n-                                                 trait_items: &[hir::TraitItem])\n+                                                 trait_item_refs: &[hir::TraitItemRef])\n                                                  -> Vec<ty::Predicate<'tcx>>\n     {\n-        trait_items.iter().flat_map(|trait_item| {\n+        trait_item_refs.iter().flat_map(|trait_item_ref| {\n+            let trait_item = ccx.tcx.map.trait_item(trait_item_ref.id);\n             let bounds = match trait_item.node {\n-                hir::TypeTraitItem(ref bounds, _) => bounds,\n+                hir::TraitItemKind::Type(ref bounds, _) => bounds,\n                 _ => {\n                     return vec![].into_iter();\n                 }\n@@ -1363,7 +1371,7 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         let ast_generics = match node {\n             NodeTraitItem(item) => {\n                 match item.node {\n-                    MethodTraitItem(ref sig, _) => &sig.generics,\n+                    TraitItemKind::Method(ref sig, _) => &sig.generics,\n                     _ => &no_generics\n                 }\n             }"}, {"sha": "ce495e6fb4cd8a8cc689a4bcdb54e888e5cebf59", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -87,6 +87,8 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem) { }\n+\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n "}, {"sha": "507079a4f874cd93e017458416e75fd1c644695b", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -120,6 +120,9 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "d4d3edbcb126e8732f82b03d5ef4e1718a2a758f", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -258,6 +258,9 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }"}, {"sha": "34e6aa5528b634667c1f115c63da36550dfb44de", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1270,17 +1270,17 @@ impl Clean<PolyTrait> for hir::PolyTraitRef {\n impl Clean<Item> for hir::TraitItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n-            hir::ConstTraitItem(ref ty, ref default) => {\n+            hir::TraitItemKind::Const(ref ty, ref default) => {\n                 AssociatedConstItem(ty.clean(cx),\n                                     default.as_ref().map(|e| pprust::expr_to_string(&e)))\n             }\n-            hir::MethodTraitItem(ref sig, Some(_)) => {\n+            hir::TraitItemKind::Method(ref sig, Some(_)) => {\n                 MethodItem(sig.clean(cx))\n             }\n-            hir::MethodTraitItem(ref sig, None) => {\n+            hir::TraitItemKind::Method(ref sig, None) => {\n                 TyMethodItem(sig.clean(cx))\n             }\n-            hir::TypeTraitItem(ref bounds, ref default) => {\n+            hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 AssociatedTypeItem(bounds.clean(cx), default.clean(cx))\n             }\n         };"}, {"sha": "5a90a739de4e77fbad18c08cf6f51024f92d7ce1", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -456,11 +456,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            hir::ItemTrait(unsafety, ref gen, ref b, ref items) => {\n+            hir::ItemTrait(unsafety, ref gen, ref b, ref item_ids) => {\n+                let items = item_ids.iter()\n+                                    .map(|ti| self.cx.tcx.map.trait_item(ti.id).clone())\n+                                    .collect();\n                 let t = Trait {\n                     unsafety: unsafety,\n                     name: name,\n-                    items: items.clone(),\n+                    items: items,\n                     generics: gen.clone(),\n                     bounds: b.iter().cloned().collect(),\n                     id: item.id,"}, {"sha": "36382e776ce281fe4f4182303e2f2e52e291270f", "filename": "src/test/compile-fail/dep-graph-struct-signature.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -34,9 +34,11 @@ struct WontChange {\n mod signatures {\n     use WillChange;\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n-    #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(CollectItem)] //~ ERROR no path\n     trait Bar {\n+        #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(CollectItem)] //~ ERROR OK\n         fn do_something(x: WillChange);\n     }\n "}, {"sha": "4cc15e8b522ac7add81492663a36395c325d2c06", "filename": "src/test/compile-fail/dep-graph-type-alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -35,8 +35,9 @@ enum Enum {\n     Variant2(i32)\n }\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+#[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n trait Trait {\n+    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n     fn method(&self, _: TypeAlias);\n }\n "}, {"sha": "d3793d6cdd8dfc2cb51eb802fd4dfb2be59bfc64", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 140, "deletions": 28, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -98,11 +98,15 @@ trait TraitAddReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddReturnType {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() -> u32;\n }\n \n@@ -115,11 +119,15 @@ trait TraitChangeReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeReturnType {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() -> u64;\n }\n \n@@ -132,11 +140,15 @@ trait TraitAddParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddParameterToMethod {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: u32);\n }\n \n@@ -149,11 +161,15 @@ trait TraitChangeMethodParameterName {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterName {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(b: u32);\n }\n \n@@ -166,11 +182,15 @@ trait TraitChangeMethodParameterType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterType {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: i64);\n }\n \n@@ -183,11 +203,15 @@ trait TraitChangeMethodParameterTypeRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterTypeRef {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: &mut i32);\n }\n \n@@ -200,11 +224,15 @@ trait TraitChangeMethodParametersOrder {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParametersOrder {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(b: i64, a: i32);\n }\n \n@@ -253,11 +281,15 @@ trait TraitChangeModeSelfRefToMut {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfRefToMut {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(&mut self);\n }\n \n@@ -269,11 +301,15 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(mut self) {}\n }\n \n@@ -285,11 +321,15 @@ trait TraitChangeModeSelfOwnToRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToRef {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(&self);\n }\n \n@@ -302,11 +342,15 @@ trait TraitAddUnsafeModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddUnsafeModifier {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     unsafe fn method();\n }\n \n@@ -319,11 +363,15 @@ trait TraitAddExternModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddExternModifier {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern fn method();\n }\n \n@@ -336,11 +384,15 @@ trait TraitChangeExternCToRustIntrinsic {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeExternCToRustIntrinsic {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern \"rust-intrinsic\" fn method();\n }\n \n@@ -353,11 +405,15 @@ trait TraitAddTypeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToMethod {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T>();\n }\n \n@@ -370,11 +426,15 @@ trait TraitAddLifetimeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToMethod {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a>();\n }\n \n@@ -391,11 +451,15 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0>();\n }\n \n@@ -408,11 +472,15 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: Sized>();\n }\n \n@@ -425,11 +493,15 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n }\n \n@@ -442,11 +514,15 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0 + ReferencedTrait1>();\n }\n \n@@ -459,11 +535,15 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: Sized + Sync>();\n }\n \n@@ -476,11 +556,15 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n }\n \n@@ -514,11 +598,15 @@ trait TraitAddTraitBoundToAssociatedType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToAssociatedType {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: ReferencedTrait0;\n \n     fn mathod();\n@@ -535,11 +623,15 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: 'a;\n \n     fn mathod();\n@@ -617,11 +709,15 @@ trait TraitChangeTypeOfAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeTypeOfAssociatedConstant {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const Value: f64;\n \n     fn mathod();\n@@ -1013,11 +1109,15 @@ mod change_return_type_of_method_indirectly_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ReturnType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeReturnType {\n+        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method() -> ReturnType;\n     }\n }\n@@ -1031,11 +1131,15 @@ mod change_method_parameter_type_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ArgType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeArgType {\n+        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method(a: ArgType);\n     }\n }\n@@ -1049,11 +1153,15 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameter {\n+        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method<T: Bound>(a: T);\n     }\n }\n@@ -1068,11 +1176,15 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n+        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method<T>(a: T) where T: Bound;\n     }\n }"}, {"sha": "58f66c1358437132e9236fb7a0c6b3e677bcd297", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/864928297d0fc0675c5eae62a58d8488941d58cf/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=864928297d0fc0675c5eae62a58d8488941d58cf", "patch": "@@ -1,11 +1,3 @@\n-error: cannot borrow immutable borrowed content `*a` as mutable\n-  --> $DIR/mut-arg-hint.rs:13:9\n-   |\n-12 |     fn foo(mut a: &String) {\n-   |                   ------- use `&mut String` here to make mutable\n-13 |         a.push_str(\"bar\");\n-   |         ^\n-\n error: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:18:5\n    |\n@@ -14,6 +6,14 @@ error: cannot borrow immutable borrowed content `*a` as mutable\n 18 |     a.push_str(\"foo\");\n    |     ^\n \n+error: cannot borrow immutable borrowed content `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:13:9\n+   |\n+12 |     fn foo(mut a: &String) {\n+   |                   ------- use `&mut String` here to make mutable\n+13 |         a.push_str(\"bar\");\n+   |         ^\n+\n error: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:25:9\n    |"}]}