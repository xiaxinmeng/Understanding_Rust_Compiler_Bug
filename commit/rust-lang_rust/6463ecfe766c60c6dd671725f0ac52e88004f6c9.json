{"sha": "6463ecfe766c60c6dd671725f0ac52e88004f6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjNlY2ZlNzY2YzYwYzZkZDY3MTcyNWYwYWM1MmU4ODAwNGY2Yzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-19T10:32:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-23T18:08:41Z"}, "message": "miri-unleash tests: ensure they fire even with 'allow(const_err)'", "tree": {"sha": "992654bc5d845d5ae276c8948bc6760531b77d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992654bc5d845d5ae276c8948bc6760531b77d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6463ecfe766c60c6dd671725f0ac52e88004f6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6463ecfe766c60c6dd671725f0ac52e88004f6c9", "html_url": "https://github.com/rust-lang/rust/commit/6463ecfe766c60c6dd671725f0ac52e88004f6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6463ecfe766c60c6dd671725f0ac52e88004f6c9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413a12909f3b149af17d75268ed4a136afb82c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/413a12909f3b149af17d75268ed4a136afb82c36", "html_url": "https://github.com/rust-lang/rust/commit/413a12909f3b149af17d75268ed4a136afb82c36"}], "stats": {"total": 314, "additions": 140, "deletions": 174}, "files": [{"sha": "a99e6327987f0cd6d02f2c6342d0f7f09c052696", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -2,15 +2,20 @@\n // compile-flags: -Z unleash-the-miri-inside-of-you\n \n #![feature(const_extern_fn)]\n+#![allow(const_err)]\n \n const extern \"C\" fn c_fn() {}\n \n const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n-    my_fn(); //~ ERROR any use of this value will cause an error\n+    my_fn();\n     //~^ WARN skipping const checks\n+    //~| ERROR could not evaluate static initializer\n+    //~| NOTE calling a function with ABI C using caller ABI Rust\n+    //~| NOTE inside `call_rust_fn`\n }\n \n-const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n //~^ WARN skipping const checks\n+//~| NOTE inside `VAL`\n \n fn main() {}"}, {"sha": "674a293d2815e88bf052dd0ec76597b1e5b77c7e", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,29 +1,27 @@\n warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:9:5\n+  --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:13:39\n+  --> $DIR/abi-mismatch.rs:17:40\n    |\n-LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/abi-mismatch.rs:9:5\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with ABI C using caller ABI Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:9:5\n-   |     inside `VAL` at $DIR/abi-mismatch.rs:13:17\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n ...\n-LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   | --------------------------------------------------------------------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n+LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:17:18\n \n error: aborting due to previous error; 2 warnings emitted\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "1b18470eded42c4d315a9ff8fd2a6d29f653e954", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(const_mut_refs, box_syntax)]\n-#![deny(const_err)]\n+#![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n "}, {"sha": "11f4a30d1779b3c3a2182b014197ae73584ade2d", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,39 +1,37 @@\n+// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![warn(const_err)]\n+#![allow(const_err)]\n \n #![feature(const_raw_ptr_deref)]\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n-const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n-    static FOO: AtomicUsize = AtomicUsize::new(0);\n-    unsafe { &*(&FOO as *const _ as *const usize) }\n-    //~^ WARN skipping const checks\n-};\n+// These tests only cause an error when *using* the const.\n \n const MUTATE_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n-    FOO.fetch_add(1, Ordering::Relaxed) //~ WARN any use of this value will cause an error\n+    FOO.fetch_add(1, Ordering::Relaxed)\n     //~^ WARN skipping const checks\n     //~| WARN skipping const checks\n };\n \n const READ_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n-    unsafe { *(&FOO as *const _ as *const usize) } //~ WARN any use of this value will cause an err\n+    unsafe { *(&FOO as *const _ as *const usize) }\n     //~^ WARN skipping const checks\n };\n \n static mut MUTABLE: u32 = 0;\n-const READ_MUT: u32 = unsafe { MUTABLE }; //~ WARN any use of this value will cause an error\n+const READ_MUT: u32 = unsafe { MUTABLE };\n //~^ WARN skipping const checks\n //~| WARN skipping const checks\n \n-// ok some day perhaps\n-const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n-    static FOO: usize = 0;\n-    &FOO\n-    //~^ WARN skipping const checks\n-};\n-fn main() {}\n+fn main() {\n+    MUTATE_INTERIOR_MUT;\n+    //~^ ERROR: erroneous constant used\n+    READ_INTERIOR_MUT;\n+    //~^ ERROR: erroneous constant used\n+    READ_MUT;\n+    //~^ ERROR: erroneous constant used\n+}"}, {"sha": "788762808f13b1f3e0c7b4390a8f7e9008a135f5", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 18, "deletions": 73, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,106 +1,51 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:11:18\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |                  ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:17:5\n+  --> $DIR/const_refers_to_static.rs:14:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:17:5\n+  --> $DIR/const_refers_to_static.rs:14:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:24:17\n+  --> $DIR/const_refers_to_static.rs:21:17\n    |\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |                 ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:29:32\n+  --> $DIR/const_refers_to_static.rs:26:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:29:32\n+  --> $DIR/const_refers_to_static.rs:26:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:36:6\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:31:5\n    |\n-LL |     &FOO\n-   |      ^^^\n+LL |     MUTATE_INTERIOR_MUT;\n+   |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static.rs:9:1\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:33:5\n    |\n-LL | / const REF_INTERIOR_MUT: &usize = {\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n-LL | |\n-LL | | };\n-   | |__^ type validation failed: encountered a reference pointing to a static variable\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+LL |     READ_INTERIOR_MUT;\n+   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:17:5\n-   |\n-LL | / const MUTATE_INTERIOR_MUT: usize = {\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `std::sync::atomic::AtomicUsize::fetch_add`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const_refers_to_static.rs:2:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:24:14\n-   |\n-LL | / const READ_INTERIOR_MUT: usize = {\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n-   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n-LL | |\n-LL | | };\n-   | |__-\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:29:32\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   | -------------------------------^^^^^^^---\n-   |                                |\n-   |                                constant accesses static\n-\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static.rs:34:1\n-   |\n-LL | / const READ_IMMUT: &usize = {\n-LL | |     static FOO: usize = 0;\n-LL | |     &FOO\n-LL | |\n-LL | | };\n-   | |__^ type validation failed: encountered a reference pointing to a static variable\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:35:5\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+LL |     READ_MUT;\n+   |     ^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors; 10 warnings emitted\n+error: aborting due to 3 previous errors; 5 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "2704f2a7d73c1d1e6b5d6df90f9350941c5036a3", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![allow(const_err)]\n+\n+#![feature(const_raw_ptr_deref)]\n+\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::Ordering;\n+\n+// These tests cause immediate error when *defining* the const.\n+\n+const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { &*(&FOO as *const _ as *const usize) }\n+    //~^ WARN skipping const checks\n+};\n+\n+// ok some day perhaps\n+const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n+    static FOO: usize = 0;\n+    &FOO\n+    //~^ WARN skipping const checks\n+};\n+\n+fn main() {}"}, {"sha": "2a233d63efef8348d491425c3ca04d34ca8ea496", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -0,0 +1,39 @@\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static2.rs:13:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static2.rs:20:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static2.rs:11:1\n+   |\n+LL | / const REF_INTERIOR_MUT: &usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n+LL | |\n+LL | | };\n+   | |__^ type validation failed: encountered a reference pointing to a static variable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static2.rs:18:1\n+   |\n+LL | / const READ_IMMUT: &usize = {\n+LL | |     static FOO: usize = 0;\n+LL | |     &FOO\n+LL | |\n+LL | | };\n+   | |__^ type validation failed: encountered a reference pointing to a static variable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "3b9208dd12609c014e30e28855e07af4768521e9", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // error-pattern: calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n-#![deny(const_err)]\n+#![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n "}, {"sha": "5866f8b4f246f5543d5c7538d23f0ddd0e34645e", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n-#![deny(const_err)]\n+#![deny(const_err)] // FIXME: ICEs with allow! See #71316.\n \n use std::cell::UnsafeCell;\n "}, {"sha": "514c103263f35e9ba4417add70972c91de81bf14", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -19,7 +19,7 @@ LL | | };\n note: the lint level is defined here\n   --> $DIR/mutable_const.rs:5:9\n    |\n-LL | #![deny(const_err)]\n+LL | #![deny(const_err)] // FIXME: ICEs with allow! See #71316.\n    |         ^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "c5b880ba30920652d40c1ac0caaf2d3d3bdbb7c8", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -7,7 +7,7 @@\n \n #![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n-#![deny(const_err)]\n+#![allow(const_err)]\n \n use std::cell::UnsafeCell;\n "}, {"sha": "902fe0aa1e7e4e724e422da393610e22b915c1e6", "filename": "src/test/ui/consts/miri_unleashed/mutating_global.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,14 +1,15 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+#![allow(const_err)]\n \n // Make sure we cannot mutate globals.\n \n static mut GLOBAL: i32 = 0;\n \n-const MUTATING_GLOBAL: () = {\n+static MUTATING_GLOBAL: () = {\n     unsafe {\n-        GLOBAL = 99 //~ ERROR any use of this value will cause an error\n-        //~^ WARN skipping const checks\n-        //~| WARN skipping const checks\n+        GLOBAL = 99\n+        //~^ ERROR could not evaluate static initializer\n+        //~| NOTE modifying a static's initial value\n     }\n };\n "}, {"sha": "ba9dd56190ac12d07035b6e12a9a5a6dfc738ffe", "filename": "src/test/ui/consts/miri_unleashed/mutating_global.stderr", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutating_global.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,29 +1,9 @@\n-warning: skipping const checks\n-  --> $DIR/mutating_global.rs:9:9\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/mutating_global.rs:10:9\n    |\n LL |         GLOBAL = 99\n-   |         ^^^^^^\n+   |         ^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n \n-warning: skipping const checks\n-  --> $DIR/mutating_global.rs:9:9\n-   |\n-LL |         GLOBAL = 99\n-   |         ^^^^^^\n-\n-error: any use of this value will cause an error\n-  --> $DIR/mutating_global.rs:9:9\n-   |\n-LL | / const MUTATING_GLOBAL: () = {\n-LL | |     unsafe {\n-LL | |         GLOBAL = 99\n-   | |         ^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n-LL | |\n-LL | |\n-LL | |     }\n-LL | | };\n-   | |__-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "b401884139d9f4e400efd8ec09e933708de0bc91", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,17 +1,13 @@\n-// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![warn(const_err)]\n+#![allow(const_err)]\n \n // A test demonstrating that we prevent calling non-const fn during CTFE.\n \n fn foo() {}\n \n-const C: () = foo(); //~ WARN: skipping const checks\n-//~^ WARN any use of this value will cause an error\n+static C: () = foo(); //~ WARN: skipping const checks\n+//~^ ERROR could not evaluate static initializer\n+//~| NOTE calling non-const function `foo`\n \n-fn main() {\n-    println!(\"{:?}\", C);\n-    //~^ ERROR: evaluation of constant expression failed\n-    //~| WARN: erroneous constant used [const_err]\n-}\n+fn main() {}"}, {"sha": "d20cd6d6f0b9e557533eb2e16d944b28958c2cef", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6463ecfe766c60c6dd671725f0ac52e88004f6c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=6463ecfe766c60c6dd671725f0ac52e88004f6c9", "patch": "@@ -1,35 +1,15 @@\n warning: skipping const checks\n-  --> $DIR/non_const_fn.rs:10:15\n+  --> $DIR/non_const_fn.rs:9:16\n    |\n-LL | const C: () = foo();\n-   |               ^^^^^\n+LL | static C: () = foo();\n+   |                ^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/non_const_fn.rs:10:15\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/non_const_fn.rs:9:16\n    |\n-LL | const C: () = foo();\n-   | --------------^^^^^-\n-   |               |\n-   |               calling non-const function `foo`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/non_const_fn.rs:4:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/non_const_fn.rs:14:22\n-   |\n-LL |     println!(\"{:?}\", C);\n-   |                      ^ referenced constant has errors\n-\n-warning: erroneous constant used\n-  --> $DIR/non_const_fn.rs:14:22\n-   |\n-LL |     println!(\"{:?}\", C);\n-   |                      ^ referenced constant has errors\n+LL | static C: () = foo();\n+   |                ^^^^^ calling non-const function `foo`\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}]}