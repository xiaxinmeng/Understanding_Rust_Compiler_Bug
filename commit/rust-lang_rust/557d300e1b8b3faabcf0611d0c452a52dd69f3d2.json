{"sha": "557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "node_id": "C_kwDOAAsO6NoAKDU1N2QzMDBlMWI4YjNmYWFiY2YwNjExZDBjNDUyYTUyZGQ2OWYzZDI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-02-07T14:08:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-07T14:08:31Z"}, "message": "Rollup merge of #91530 - bobrippling:suggest-1-tuple-parens, r=camelid\n\nSuggest 1-tuple parentheses on exprs without existing parens\n\nA follow-on from #86116, split out from #90677.\n\nThis alters the suggestion to add a trailing comma to create a 1-tuple - previously we would only apply this if the relevant expression was parenthesised. We now make the suggestion regardless of parentheses, which reduces the fragility of the check (w.r.t formatting).\n\ne.g.\n```rust\nlet a: Option<(i32,)> = Some(3);\n```\n\ngets the below suggestion:\n\n```rust\nlet a: Option<(i32,)> = Some((3,));\n//                           ^ ^^\n```\n\nThis change also improves the suggestion in other ways, such as by only making the suggestion if the types would match after the suggestion is applied and making the suggestion a multipart suggestion.", "tree": {"sha": "d05f5ce7a927a42df07e7a41294eee97823a7487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05f5ce7a927a42df07e7a41294eee97823a7487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiASffCRBK7hj4Ov3rIwAARSYIAF6vjWPhf6JLFC4TD8YWNVQ+\nezEwMiXU3dLjCCH8rSZoTItse8r7UsjMHX3NFv7GIOvAJEXGb8dpmA1dwpamYQmg\nQUyIWjkFSNOvep321BWnisoaHLhFsOTTicy4QQ0xeVGQhrX3oXCBW8J3iTDVeehM\nMy1LL3oBT972Cu0R7iEqF7NwvebUfECobs2vORyFvOifa77kUGFNpNWprGIWucr9\nh14zhz2ttBEMyCeozWwDMY4EG1LIXeBGptIr413KIRPohH5VsXbMOoT4xSIoifFN\nmXGc5FF7M8FoD7i3JQfT8x5FZOJfzpGbRYj5feax2LqUZeurHBEmUGowZ/pyHyE=\n=od7A\n-----END PGP SIGNATURE-----\n", "payload": "tree d05f5ce7a927a42df07e7a41294eee97823a7487\nparent aee13fb7c50faba1db567736c1b17cbc4716c74d\nparent 82a012299dcf6fefc107cbb7036465fe94ec1e2d\nauthor Mara Bos <m-ou.se@m-ou.se> 1644242911 +0000\ncommitter GitHub <noreply@github.com> 1644242911 +0000\n\nRollup merge of #91530 - bobrippling:suggest-1-tuple-parens, r=camelid\n\nSuggest 1-tuple parentheses on exprs without existing parens\n\nA follow-on from #86116, split out from #90677.\n\nThis alters the suggestion to add a trailing comma to create a 1-tuple - previously we would only apply this if the relevant expression was parenthesised. We now make the suggestion regardless of parentheses, which reduces the fragility of the check (w.r.t formatting).\n\ne.g.\n```rust\nlet a: Option<(i32,)> = Some(3);\n```\n\ngets the below suggestion:\n\n```rust\nlet a: Option<(i32,)> = Some((3,));\n//                           ^ ^^\n```\n\nThis change also improves the suggestion in other ways, such as by only making the suggestion if the types would match after the suggestion is applied and making the suggestion a multipart suggestion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "html_url": "https://github.com/rust-lang/rust/commit/557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee13fb7c50faba1db567736c1b17cbc4716c74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee13fb7c50faba1db567736c1b17cbc4716c74d", "html_url": "https://github.com/rust-lang/rust/commit/aee13fb7c50faba1db567736c1b17cbc4716c74d"}, {"sha": "82a012299dcf6fefc107cbb7036465fe94ec1e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a012299dcf6fefc107cbb7036465fe94ec1e2d", "html_url": "https://github.com/rust-lang/rust/commit/82a012299dcf6fefc107cbb7036465fe94ec1e2d"}], "stats": {"total": 146, "additions": 119, "deletions": 27}, "files": [{"sha": "c5da9977db782404c8abef815f91a10e131330bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -2044,19 +2044,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // If a tuple of length one was expected and the found expression has\n                         // parentheses around it, perhaps the user meant to write `(expr,)` to\n                         // build a tuple (issue #86100)\n-                        (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n-                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n-                                if let Some(code) =\n-                                    code.strip_prefix('(').and_then(|s| s.strip_suffix(')'))\n-                                {\n-                                    err.span_suggestion(\n-                                        span,\n-                                        \"use a trailing comma to create a tuple with one element\",\n-                                        format!(\"({},)\", code),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                }\n-                            }\n+                        (ty::Tuple(_), _) => {\n+                            self.emit_tuple_wrap_err(&mut err, span, found, expected)\n                         }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to\n@@ -2119,6 +2108,41 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         diag\n     }\n \n+    fn emit_tuple_wrap_err(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        found: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) {\n+        let [expected_tup_elem] = &expected.tuple_fields().collect::<Vec<_>>()[..]\n+            else { return };\n+\n+        if !same_type_modulo_infer(expected_tup_elem, found) {\n+            return;\n+        }\n+\n+        let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n+            else { return };\n+\n+        let msg = \"use a trailing comma to create a tuple with one element\";\n+        if code.starts_with('(') && code.ends_with(')') {\n+            let before_close = span.hi() - BytePos::from_u32(1);\n+            err.span_suggestion(\n+                span.with_hi(before_close).shrink_to_hi(),\n+                msg,\n+                \",\".into(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.multipart_suggestion(\n+                msg,\n+                vec![(span.shrink_to_lo(), \"(\".into()), (span.shrink_to_hi(), \",)\".into())],\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     fn values_str(\n         &self,\n         values: ValuePairs<'tcx>,"}, {"sha": "d301f8c4054c23bb901cac12cc877926b3a90607", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -6,6 +6,10 @@ LL | const TUP: (usize,) = 5usize << 64;\n    |\n    = note: expected tuple `(usize,)`\n                found type `usize`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL | const TUP: (usize,) = (5usize << 64,);\n+   |                       +            ++\n \n error: aborting due to previous error\n "}, {"sha": "5403b8d6d2871ae65a8f548ff6e39e2e2b9a1659", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -10,6 +10,12 @@ fn main() {\n \n     let _: Option<(i8,)> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+\n+    let _: Option<(i32,)> = Some(5_usize);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((5_usize));\n+    //~^ ERROR mismatched types\n }\n \n fn int_bool(_: (i32, bool)) {"}, {"sha": "ddcdfb1c3b34413be0a3bc9e6504cbb75db0897a", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -15,7 +15,7 @@ LL |     int_bool(1, 2);\n    |     expected 1 argument\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple-errors.rs:15:4\n+  --> $DIR/args-instead-of-tuple-errors.rs:21:4\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n@@ -28,6 +28,25 @@ LL |     let _: Option<(i8,)> = Some();\n    |                            |\n    |                            expected 1 argument\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(5_usize);\n+   |                                  ^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((5_usize));\n+   |                                  ^^^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "66e53f9ce2c80bef49c642f16571fc521fb0f458", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some(());\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n     two_ints((1, 2)); //~ ERROR this function takes 1 argument\n \n     with_generic((3, 4)); //~ ERROR this function takes 1 argument"}, {"sha": "a15bff07ebfe6766e2a99ea097f7d23ea7397215", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some(3);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3));\n+    //~^ ERROR mismatched types\n+\n     two_ints(1, 2); //~ ERROR this function takes 1 argument\n \n     with_generic(3, 4); //~ ERROR this function takes 1 argument"}, {"sha": "6a7602c9d0f45cc3742ad56b50a52b0b5719e1c1", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -31,14 +31,40 @@ help: expected the unit value `()`; create it with empty parentheses\n LL |     let _: Option<()> = Some(());\n    |                              ++\n \n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(3);\n+   |                                  ^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                  + ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((3));\n+   |                                  ^^^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                    +\n+\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:14:5\n+  --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n    |     ^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:19:4\n+  --> $DIR/args-instead-of-tuple.rs:25:4\n    |\n LL | fn two_ints(_: (i32, i32)) {\n    |    ^^^^^^^^ -------------\n@@ -48,13 +74,13 @@ LL |     two_ints((1, 2));\n    |              +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:16:5\n+  --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n    |     ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -64,13 +90,13 @@ LL |     with_generic((3, 4));\n    |                  +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:25:9\n+  --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);\n    |         ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -79,6 +105,7 @@ help: use parentheses to construct a tuple\n LL |         with_generic((a, b));\n    |                      +    +\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "0016f19284250eae33697601612bed322883c80c", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/557d300e1b8b3faabcf0611d0c452a52dd69f3d2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=557d300e1b8b3faabcf0611d0c452a52dd69f3d2", "patch": "@@ -11,7 +11,7 @@ LL |     let _x: (i32,) = (5);\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _x: (i32,) = (5,);\n-   |                      ~~~~\n+   |                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n@@ -24,7 +24,7 @@ LL |     foo((Some(3)));\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     foo((Some(3),));\n-   |         ~~~~~~~~~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:17:22\n@@ -37,7 +37,7 @@ LL |     let _s = S { _s: (\"abc\".to_string()) };\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _s = S { _s: (\"abc\".to_string(),) };\n-   |                      ~~~~~~~~~~~~~~~~~~~~\n+   |                                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:23:22"}]}