{"sha": "57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YmE4ZWRiOWViN2E4MDVmNjNhYjQyNWZiNWIxYjdiYWEyZTlmYjM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-11T19:18:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-22T21:04:46Z"}, "message": "Retire rustc_dep_node_try_load_from_on_disk_cache.", "tree": {"sha": "4ed759c2fcbc1f35de227b07aea15f1c49bd4717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ed759c2fcbc1f35de227b07aea15f1c49bd4717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "html_url": "https://github.com/rust-lang/rust/commit/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e853cc0b2886cf01942df71f524025af1c94f812", "url": "https://api.github.com/repos/rust-lang/rust/commits/e853cc0b2886cf01942df71f524025af1c94f812", "html_url": "https://github.com/rust-lang/rust/commit/e853cc0b2886cf01942df71f524025af1c94f812"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "fd85919636949ac89760c4b4270b6b94449e613a", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "patch": "@@ -421,7 +421,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n     let mut dep_node_def_stream = quote! {};\n-    let mut try_load_from_on_disk_cache_stream = quote! {};\n     let mut cached_queries = quote! {};\n \n     for group in groups.0 {\n@@ -439,22 +438,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 cached_queries.extend(quote! {\n                     #name,\n                 });\n-\n-                try_load_from_on_disk_cache_stream.extend(quote! {\n-                    ::rustc_middle::dep_graph::DepKind::#name => {\n-                        if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n-                            debug_assert!($tcx.dep_graph\n-                                            .node_color($dep_node)\n-                                            .map(|c| c.is_green())\n-                                            .unwrap_or(false));\n-\n-                            let key = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node).unwrap();\n-                            if queries::#name::cache_on_disk($tcx, &key, None) {\n-                                let _ = $tcx.#name(key);\n-                            }\n-                        }\n-                    }\n-                });\n             }\n \n             let mut attributes = Vec::new();\n@@ -528,14 +511,5 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         }\n \n         #query_description_stream\n-\n-        macro_rules! rustc_dep_node_try_load_from_on_disk_cache {\n-            ($dep_node:expr, $tcx:expr) => {\n-                match $dep_node.kind {\n-                    #try_load_from_on_disk_cache_stream\n-                    _ => (),\n-                }\n-            }\n-        }\n     })\n }"}, {"sha": "7ba4d5a14dffb49e474bcbe37a6607ff8b84cd96", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "patch": "@@ -210,7 +210,29 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n }\n \n pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n-    rustc_dep_node_try_load_from_on_disk_cache!(dep_node, tcx)\n+    macro_rules! try_load_from_on_disk_cache {\n+        ($($name:ident,)*) => {\n+            match dep_node.kind {\n+                $(DepKind::$name => {\n+                    if <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n+                        debug_assert!(tcx.dep_graph\n+                                         .node_color(dep_node)\n+                                         .map(|c| c.is_green())\n+                                         .unwrap_or(false));\n+\n+                        let key = <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node).unwrap();\n+                        if queries::$name::cache_on_disk(tcx, &key, None) {\n+                            let _ = tcx.$name(key);\n+                        }\n+                    }\n+                })*\n+\n+                _ => (),\n+            }\n+        }\n+    }\n+\n+    rustc_cached_queries!(try_load_from_on_disk_cache!);\n }\n \n mod sealed {"}]}