{"sha": "5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTZiM2E3MjhmYjUwY2Q2NTIzN2I4ZWVhYzJmMmRmMDVjM2M3N2Y=", "commit": {"author": {"name": "Bryan Drewery", "email": "bryan@shatow.net", "date": "2018-03-02T20:50:07Z"}, "committer": {"name": "Bryan Drewery", "email": "bryan@shatow.net", "date": "2018-03-02T20:54:03Z"}, "message": "Move glibc version lookup handling to sys::os and add a simpler glibc_version()", "tree": {"sha": "93a97596ff49b48b7a0d75f1c3c1d2cea66fe27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a97596ff49b48b7a0d75f1c3c1d2cea66fe27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "html_url": "https://github.com/rust-lang/rust/commit/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f/comments", "author": {"login": "bdrewery", "id": 33693, "node_id": "MDQ6VXNlcjMzNjkz", "avatar_url": "https://avatars.githubusercontent.com/u/33693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrewery", "html_url": "https://github.com/bdrewery", "followers_url": "https://api.github.com/users/bdrewery/followers", "following_url": "https://api.github.com/users/bdrewery/following{/other_user}", "gists_url": "https://api.github.com/users/bdrewery/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrewery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrewery/subscriptions", "organizations_url": "https://api.github.com/users/bdrewery/orgs", "repos_url": "https://api.github.com/users/bdrewery/repos", "events_url": "https://api.github.com/users/bdrewery/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrewery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bdrewery", "id": 33693, "node_id": "MDQ6VXNlcjMzNjkz", "avatar_url": "https://avatars.githubusercontent.com/u/33693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrewery", "html_url": "https://github.com/bdrewery", "followers_url": "https://api.github.com/users/bdrewery/followers", "following_url": "https://api.github.com/users/bdrewery/following{/other_user}", "gists_url": "https://api.github.com/users/bdrewery/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrewery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrewery/subscriptions", "organizations_url": "https://api.github.com/users/bdrewery/orgs", "repos_url": "https://api.github.com/users/bdrewery/repos", "events_url": "https://api.github.com/users/bdrewery/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrewery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b50efb6eb048297cda699ad017821822591d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b50efb6eb048297cda699ad017821822591d7a", "html_url": "https://github.com/rust-lang/rust/commit/99b50efb6eb048297cda699ad017821822591d7a"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "04d9f0b06d344efbda8cce7bebdcd6bdd835c983", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "patch": "@@ -383,42 +383,19 @@ impl IntoInner<c_int> for Socket {\n // believe it's thread-safe).\n #[cfg(target_env = \"gnu\")]\n fn on_resolver_failure() {\n+    use sys;\n+\n     // If the version fails to parse, we treat it the same as \"not glibc\".\n-    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n-        if let Some(version) = parse_glibc_version(version_str) {\n-            if version < (2, 26) {\n-                unsafe { libc::res_init() };\n-            }\n+    if let Some(version) = sys::os::glibc_version() {\n+        if version < (2, 26) {\n+            unsafe { libc::res_init() };\n         }\n     }\n }\n \n #[cfg(not(target_env = \"gnu\"))]\n fn on_resolver_failure() {}\n \n-#[cfg(target_env = \"gnu\")]\n-fn glibc_version_cstr() -> Option<&'static CStr> {\n-    weak! {\n-        fn gnu_get_libc_version() -> *const libc::c_char\n-    }\n-    if let Some(f) = gnu_get_libc_version.get() {\n-        unsafe { Some(CStr::from_ptr(f())) }\n-    } else {\n-        None\n-    }\n-}\n-\n-// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n-// ignoring any extra dot-separated parts. Otherwise return None.\n-#[cfg(target_env = \"gnu\")]\n-fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n-    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n-    match (parsed_ints.next(), parsed_ints.next()) {\n-        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n-        _ => None\n-    }\n-}\n-\n #[cfg(all(test, taget_env = \"gnu\"))]\n mod test {\n     use super::*;"}, {"sha": "4c86fddee4b45c3eef51466095edc283340e9839", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=5ba6b3a728fb50cd65237b8eeac2f2df05c3c77f", "patch": "@@ -546,3 +546,35 @@ pub fn getpid() -> u32 {\n pub fn getppid() -> u32 {\n     unsafe { libc::getppid() as u32 }\n }\n+\n+#[cfg(target_env = \"gnu\")]\n+pub fn glibc_version() -> Option<(usize, usize)> {\n+    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n+        parse_glibc_version(version_str)\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(target_env = \"gnu\")]\n+fn glibc_version_cstr() -> Option<&'static CStr> {\n+    weak! {\n+        fn gnu_get_libc_version() -> *const libc::c_char\n+    }\n+    if let Some(f) = gnu_get_libc_version.get() {\n+        unsafe { Some(CStr::from_ptr(f())) }\n+    } else {\n+        None\n+    }\n+}\n+\n+// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n+// ignoring any extra dot-separated parts. Otherwise return None.\n+#[cfg(target_env = \"gnu\")]\n+fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n+    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n+    match (parsed_ints.next(), parsed_ints.next()) {\n+        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n+        _ => None\n+    }\n+}"}]}