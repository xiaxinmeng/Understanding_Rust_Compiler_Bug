{"sha": "83c58d6fb6469f57cb9a7b0d5de34f1567892653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYzU4ZDZmYjY0NjlmNTdjYjlhN2IwZDVkZTM0ZjE1Njc4OTI2NTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-06T22:16:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T22:16:05Z"}, "message": "Rollup merge of #77568 - lcnr:mir-inline-def-id, r=ecstatic-morse\n\ninliner: use caller param_env\n\nWe used the callee param env instead of the caller param env by accident in #77430, this PR fixes that and caches it in the `Inliner` struct.\n\nfixes #77564\n\nr? @ecstatic-morse", "tree": {"sha": "0a15964f4533bb02546208a67cf0979f7539a5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a15964f4533bb02546208a67cf0979f7539a5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83c58d6fb6469f57cb9a7b0d5de34f1567892653", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffOylCRBK7hj4Ov3rIwAAdHIIAB0zQ9Wc7mD8FNBXfGZPx/Yk\nWvD9I6NOzPVbPVwgbVcW/ujF9HLmgLp4shWEuhCMxK7rnVRWjSKHcVw1MQFxri4T\n/wAhQqUWw/slqW2PH6cz4QDQlSQynxS+vGcGuc2BB3ww3X+WZZwT+CZR59ayg0W0\nAt6eCT1Qa2s3/ee2Q7DiWMa620bt7J3xIMVAk/IEjSKedNdqR01UWfRNyMywyb9I\n0yB2y4FuRfUg6WY69giNQR/7i65rFKHBjO45RglNnqezdIYmG+7BQh61MiQ4sV9o\nG3K0SpIhIE8NF5V1eQ9zFN6bEIekoYkK45FCk2h2csMo1kdKi4vz/FJO1Q0EYXs=\n=DQli\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a15964f4533bb02546208a67cf0979f7539a5da\nparent a7a75b908a7fa0750d21ddd3934a173161c21503\nparent daf48b82abd87b6f2016881528be2e978fd5def7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602022565 +0200\ncommitter GitHub <noreply@github.com> 1602022565 +0200\n\nRollup merge of #77568 - lcnr:mir-inline-def-id, r=ecstatic-morse\n\ninliner: use caller param_env\n\nWe used the callee param env instead of the caller param env by accident in #77430, this PR fixes that and caches it in the `Inliner` struct.\n\nfixes #77564\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83c58d6fb6469f57cb9a7b0d5de34f1567892653", "html_url": "https://github.com/rust-lang/rust/commit/83c58d6fb6469f57cb9a7b0d5de34f1567892653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83c58d6fb6469f57cb9a7b0d5de34f1567892653/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7a75b908a7fa0750d21ddd3934a173161c21503", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a75b908a7fa0750d21ddd3934a173161c21503", "html_url": "https://github.com/rust-lang/rust/commit/a7a75b908a7fa0750d21ddd3934a173161c21503"}, {"sha": "daf48b82abd87b6f2016881528be2e978fd5def7", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf48b82abd87b6f2016881528be2e978fd5def7", "html_url": "https://github.com/rust-lang/rust/commit/daf48b82abd87b6f2016881528be2e978fd5def7"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "bec1eb790478c10d6ed1f51c446dcc523078064e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83c58d6fb6469f57cb9a7b0d5de34f1567892653/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c58d6fb6469f57cb9a7b0d5de34f1567892653/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=83c58d6fb6469f57cb9a7b0d5de34f1567892653", "patch": "@@ -45,15 +45,20 @@ impl<'tcx> MirPass<'tcx> for Inline {\n                 // based function.\n                 debug!(\"function inlining is disabled when compiling with `instrument_coverage`\");\n             } else {\n-                Inliner { tcx, codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()) }\n-                    .run_pass(body);\n+                Inliner {\n+                    tcx,\n+                    param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n+                    codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()),\n+                }\n+                .run_pass(body);\n             }\n         }\n     }\n }\n \n struct Inliner<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n }\n \n@@ -75,17 +80,13 @@ impl Inliner<'tcx> {\n \n         let def_id = caller_body.source.def_id();\n \n-        let param_env = self.tcx.param_env_reveal_all_normalized(def_id);\n-\n         // Only do inlining into fn bodies.\n         let self_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         if self.tcx.hir().body_owner_kind(self_hir_id).is_fn_or_closure()\n             && caller_body.source.promoted.is_none()\n         {\n             for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated() {\n-                if let Some(callsite) =\n-                    self.get_valid_function_call(bb, bb_data, caller_body, param_env)\n-                {\n+                if let Some(callsite) = self.get_valid_function_call(bb, bb_data, caller_body) {\n                     callsites.push_back(callsite);\n                 }\n             }\n@@ -131,7 +132,7 @@ impl Inliner<'tcx> {\n                 let callee_body = if self.consider_optimizing(callsite, callee_body) {\n                     self.tcx.subst_and_normalize_erasing_regions(\n                         &callsite.substs,\n-                        param_env,\n+                        self.param_env,\n                         callee_body,\n                     )\n                 } else {\n@@ -159,7 +160,7 @@ impl Inliner<'tcx> {\n                 // Add callsites from inlined function\n                 for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated().skip(start) {\n                     if let Some(new_callsite) =\n-                        self.get_valid_function_call(bb, bb_data, caller_body, param_env)\n+                        self.get_valid_function_call(bb, bb_data, caller_body)\n                     {\n                         // Don't inline the same function multiple times.\n                         if callsite.callee != new_callsite.callee {\n@@ -190,7 +191,6 @@ impl Inliner<'tcx> {\n         bb: BasicBlock,\n         bb_data: &BasicBlockData<'tcx>,\n         caller_body: &Body<'tcx>,\n-        param_env: ParamEnv<'tcx>,\n     ) -> Option<CallSite<'tcx>> {\n         // Don't inline calls that are in cleanup blocks.\n         if bb_data.is_cleanup {\n@@ -201,8 +201,9 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                let instance =\n-                    Instance::resolve(self.tcx, param_env, callee_def_id, substs).ok().flatten()?;\n+                let instance = Instance::resolve(self.tcx, self.param_env, callee_def_id, substs)\n+                    .ok()\n+                    .flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;\n@@ -300,9 +301,6 @@ impl Inliner<'tcx> {\n         debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n-\n-        let param_env = tcx.param_env(callee_body.source.def_id());\n-\n         let mut first_block = true;\n         let mut cost = 0;\n \n@@ -335,7 +333,7 @@ impl Inliner<'tcx> {\n                     // If the place doesn't actually need dropping, treat it like\n                     // a regular goto.\n                     let ty = place.ty(callee_body, tcx).subst(tcx, callsite.substs).ty;\n-                    if ty.needs_drop(tcx, param_env) {\n+                    if ty.needs_drop(tcx, self.param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n                             cost += LANDINGPAD_PENALTY;\n@@ -400,7 +398,7 @@ impl Inliner<'tcx> {\n             let ty = v.ty.subst(tcx, callsite.substs);\n             // Cost of the var is the size in machine-words, if we know\n             // it.\n-            if let Some(size) = type_size_of(tcx, param_env, ty) {\n+            if let Some(size) = type_size_of(tcx, self.param_env, ty) {\n                 cost += (size / ptr_size) as usize;\n             } else {\n                 cost += UNKNOWN_SIZE_COST;"}, {"sha": "262402df2cc5ae4a05aa9b919aade9cd66ab6e78", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77564.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/83c58d6fb6469f57cb9a7b0d5de34f1567892653/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c58d6fb6469f57cb9a7b0d5de34f1567892653/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs?ref=83c58d6fb6469f57cb9a7b0d5de34f1567892653", "patch": "@@ -0,0 +1,38 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+\n+use std::mem::MaybeUninit;\n+const N: usize = 2;\n+\n+trait CollectArray<A>: Iterator<Item = A> {\n+    fn inner_array(&mut self) -> [A; N];\n+    fn collect_array(&mut self) -> [A; N] {\n+        let result = self.inner_array();\n+        assert!(self.next().is_none());\n+        result\n+    }\n+}\n+\n+impl<A, I: ?Sized> CollectArray<A> for I\n+where\n+    I: Iterator<Item = A>,\n+{\n+    fn inner_array(&mut self) -> [A; N] {\n+        let mut result: [MaybeUninit<A>; N] = unsafe { MaybeUninit::uninit().assume_init() };\n+        for (dest, item) in result.iter_mut().zip(self) {\n+            *dest = MaybeUninit::new(item);\n+        }\n+        let temp_ptr: *const [MaybeUninit<A>; N] = &result;\n+        unsafe { std::ptr::read(temp_ptr as *const [A; N]) }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(\n+        [[1, 2], [3, 4]]\n+            .iter()\n+            .map(|row| row.iter().collect_array())\n+            .collect_array(),\n+        [[&1, &2], [&3, &4]]\n+    );\n+}"}]}