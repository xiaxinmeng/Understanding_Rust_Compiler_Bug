{"sha": "864f6d180baf76365619a7fe76b6c8b87e5ead8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGY2ZDE4MGJhZjc2MzY1NjE5YTdmZTc2YjZjOGI4N2U1ZWFkOGY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-22T05:19:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-22T23:46:51Z"}, "message": "Only emit expanded diagnostic information once", "tree": {"sha": "2f6a9c23802f4edf74a969da38b8341a932fe354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f6a9c23802f4edf74a969da38b8341a932fe354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864f6d180baf76365619a7fe76b6c8b87e5ead8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864f6d180baf76365619a7fe76b6c8b87e5ead8f", "html_url": "https://github.com/rust-lang/rust/commit/864f6d180baf76365619a7fe76b6c8b87e5ead8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864f6d180baf76365619a7fe76b6c8b87e5ead8f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76d3f62cc34a77496305639f22a7da168ebc301", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76d3f62cc34a77496305639f22a7da168ebc301", "html_url": "https://github.com/rust-lang/rust/commit/e76d3f62cc34a77496305639f22a7da168ebc301"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "2e654fe9929a6af7801755994f0dcc8147c29043", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=864f6d180baf76365619a7fe76b6c8b87e5ead8f", "patch": "@@ -27,7 +27,7 @@ pub struct Diagnostic {\n     pub suggestions: Vec<CodeSuggestion>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DiagnosticId {\n     Error(String),\n     Lint(String),\n@@ -281,6 +281,10 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn get_code(&self) -> Option<DiagnosticId> {\n+        self.code.clone()\n+    }\n+\n     pub fn message(&self) -> String {\n         self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n     }"}, {"sha": "cabafa052a32c4866f4dc9af794c6e9cea6cbd5d", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=864f6d180baf76365619a7fe76b6c8b87e5ead8f", "patch": "@@ -244,6 +244,7 @@ pub struct Handler {\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n+    tracked_diagnostic_codes: RefCell<FxHashSet<DiagnosticId>>,\n \n     // This set contains a hash of every diagnostic that has been emitted by\n     // this handler. These hashes is used to avoid emitting the same error\n@@ -303,6 +304,7 @@ impl Handler {\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),\n+            tracked_diagnostic_codes: RefCell::new(FxHashSet()),\n             emitted_diagnostics: RefCell::new(FxHashSet()),\n         }\n     }\n@@ -575,13 +577,21 @@ impl Handler {\n         (ret, diagnostics)\n     }\n \n+    pub fn code_emitted(&self, code: &DiagnosticId) -> bool {\n+        self.tracked_diagnostic_codes.borrow().contains(code)\n+    }\n+\n     fn emit_db(&self, db: &DiagnosticBuilder) {\n         let diagnostic = &**db;\n \n         if let Some(ref mut list) = *self.tracked_diagnostics.borrow_mut() {\n             list.push(diagnostic.clone());\n         }\n \n+        if let Some(ref code) = diagnostic.code {\n+            self.tracked_diagnostic_codes.borrow_mut().insert(code.clone());\n+        }\n+\n         let diagnostic_hash = {\n             use std::hash::Hash;\n             let mut hasher = StableHasher::new();"}, {"sha": "3cd93a1c84514c0adbe2adfe94eb1062d8451453", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864f6d180baf76365619a7fe76b6c8b87e5ead8f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=864f6d180baf76365619a7fe76b6c8b87e5ead8f", "patch": "@@ -290,18 +290,22 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     self.expr_ty,\n                     fcx.ty_to_string(self.cast_ty)\n                 );\n-                if fcx.tcx.sess.opts.debugging_opts.explain {\n+                if fcx.tcx.sess.opts.debugging_opts.explain\n+                    && !fcx.tcx.sess.parse_sess.span_diagnostic\n+                        .code_emitted(&err.get_code().unwrap()) {\n                     err.note(\n-                        \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a \\\n-                         memory address.\\n\\n\\\n-                         Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also \\\n-                         called DST). DST don't have a statically known size, therefore they can \\\n-                         only exist behind some kind of pointers that contain additional \\\n-                         information. Slices and trait objects are DSTs. In the case of slices, \\\n-                         the additional information the fat pointer holds is their size.\");\n+                        \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n+memory address.\n+\n+Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n+called DST). DST don't have a statically known size, therefore they can\n+only exist behind some kind of pointers that contain additional\n+information. Slices and trait objects are DSTs. In the case of slices,\n+the additional information the fat pointer holds is their size.\");\n                     err.note(\"to fix this error, don't try to cast directly between thin and fat \\\n                               pointers\");\n-                    err.help(\"for more information about casts, take a look at [The Book]\\\n+                    err.help(\"for more information about casts, take a look at\n+                              [The Book]\\\n                               (https://doc.rust-lang.org/book/first-edition/\\\n                               casting-between-types.html)\");\n                 }"}]}