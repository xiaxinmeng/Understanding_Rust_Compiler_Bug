{"sha": "23c2723269e14c3b037feb2c4865a82053403649", "node_id": "C_kwDOAAsO6NoAKDIzYzI3MjMyNjllMTRjM2IwMzdmZWIyYzQ4NjVhODIwNTM0MDM2NDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T23:08:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T23:08:02Z"}, "message": "Auto merge of #92003 - matthiaskrgr:rollup-obgv0rt, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91172 (Warn when a `#[test]`-like built-in attribute macro is present multiple times.)\n - #91796 (Fix since attribute for const_manually_drop feature)\n - #91879 (Remove `in_band_lifetimes` from `rustc_borrowck`)\n - #91947 (Add `io::Error::other`)\n - #91967 (Pull in libdevstat on FreeBSD)\n - #91987 (Add module documentation for rustdoc passes)\n - #92001 (Fix default_method_body_is_const when used across crates)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4fb376635d56124b2dfff2b7a87339b693f0fe62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb376635d56124b2dfff2b7a87339b693f0fe62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c2723269e14c3b037feb2c4865a82053403649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c2723269e14c3b037feb2c4865a82053403649", "html_url": "https://github.com/rust-lang/rust/commit/23c2723269e14c3b037feb2c4865a82053403649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c2723269e14c3b037feb2c4865a82053403649/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5531927e8af9b99ad923af4c827c91038bca51ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5531927e8af9b99ad923af4c827c91038bca51ee", "html_url": "https://github.com/rust-lang/rust/commit/5531927e8af9b99ad923af4c827c91038bca51ee"}, {"sha": "a97384d94c7042427e076cf78c6138e6b76a1c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97384d94c7042427e076cf78c6138e6b76a1c81", "html_url": "https://github.com/rust-lang/rust/commit/a97384d94c7042427e076cf78c6138e6b76a1c81"}], "stats": {"total": 292, "additions": 250, "deletions": 42}, "files": [{"sha": "961a3ba9f19cf872505f91fd5dba3912422e0abb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -3688,6 +3688,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_lint_defs\",\n  \"rustc_parse\",\n  \"rustc_parse_format\",\n  \"rustc_session\","}, {"sha": "4a9904891ecad14ac4cac39b2beaea351e538f7a", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -84,7 +84,7 @@ pub enum LocalsStateAtExit {\n }\n \n impl LocalsStateAtExit {\n-    fn build(\n+    fn build<'tcx>(\n         locals_are_invalidated_at_exit: bool,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,"}, {"sha": "96326ef2d5a07aa7ad0e07bb4a5d4a594a778c34", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -31,7 +31,7 @@ enum UniverseInfoInner<'tcx> {\n     Other,\n }\n \n-impl UniverseInfo<'tcx> {\n+impl<'tcx> UniverseInfo<'tcx> {\n     crate fn other() -> UniverseInfo<'tcx> {\n         UniverseInfo(UniverseInfoInner::Other)\n     }\n@@ -191,7 +191,7 @@ struct PredicateQuery<'tcx> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n+impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n     fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n@@ -231,7 +231,7 @@ struct NormalizeQuery<'tcx, T> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl<T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n+impl<'tcx, T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n where\n     T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx,\n {\n@@ -291,7 +291,7 @@ struct AscribeUserTypeQuery<'tcx> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n+impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n     fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more."}, {"sha": "ab9ecec9715d9e4cbe6a4427813f263ee6176343", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1598,8 +1598,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         mpi: MovePathIndex,\n     ) -> (Vec<MoveSite>, Vec<Location>) {\n-        fn predecessor_locations(\n-            body: &'a mir::Body<'tcx>,\n+        fn predecessor_locations<'a>(\n+            body: &'a mir::Body<'_>,\n             location: Location,\n         ) -> impl Iterator<Item = Location> + 'a {\n             if location.statement_index == 0 {"}, {"sha": "46c85dd6d35e1d6f58a6f8fbb4e6efa0c980a031", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -409,7 +409,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Add a note that a type does not implement `Copy`\n     pub(super) fn note_type_does_not_implement_copy(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut DiagnosticBuilder<'_>,\n         place_desc: &str,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n@@ -733,7 +733,7 @@ pub(super) enum BorrowedContentSource<'tcx> {\n     OverloadedIndex(Ty<'tcx>),\n }\n \n-impl BorrowedContentSource<'tcx> {\n+impl<'tcx> BorrowedContentSource<'tcx> {\n     pub(super) fn describe_for_unnamed_place(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n             BorrowedContentSource::DerefRawPointer => \"a raw pointer\".to_string(),"}, {"sha": "0434c1ba59a10d654e4d7c18669f7567e60a2669", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             HirId, ImplItem, ImplItemKind, Item, ItemKind,\n         };\n \n-        fn maybe_body_id_of_fn(hir_map: &Map<'tcx>, id: HirId) -> Option<BodyId> {\n+        fn maybe_body_id_of_fn(hir_map: &Map<'_>, id: HirId) -> Option<BodyId> {\n             match hir_map.find(id) {\n                 Some(Node::Item(Item { kind: ItemKind::Fn(_, _, body_id), .. }))\n                 | Some(Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })) => {\n@@ -1066,7 +1066,7 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n /// LL |     s: &'a String\n ///    |        ---------- use `&'a mut String` here to make mutable\n /// ```\n-fn annotate_struct_field(\n+fn annotate_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,"}, {"sha": "63ffcb3ec45879c649ef887584b6e98bcefc1e41", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -3,7 +3,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "0fe44328fd9f189d666eb794b09ad00c452a9784", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -53,7 +53,7 @@ rustc_index::newtype_index! {\n     }\n }\n \n-impl Default for MemberConstraintSet<'tcx, ty::RegionVid> {\n+impl Default for MemberConstraintSet<'_, ty::RegionVid> {\n     fn default() -> Self {\n         Self {\n             first_constraints: Default::default(),\n@@ -97,7 +97,7 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n     }\n }\n \n-impl<R1> MemberConstraintSet<'tcx, R1>\n+impl<'tcx, R1> MemberConstraintSet<'tcx, R1>\n where\n     R1: Copy + Hash + Eq,\n {\n@@ -140,7 +140,7 @@ where\n     }\n }\n \n-impl<R> MemberConstraintSet<'tcx, R>\n+impl<R> MemberConstraintSet<'_, R>\n where\n     R: Copy + Hash + Eq,\n {"}, {"sha": "b2c8dfc82c206a05a098114c65f05c93756b345c", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -141,7 +141,7 @@ pub(super) fn borrow_of_local_data(place: Place<'_>) -> bool {\n /// then returns the index of the field being projected. Note that this closure will always\n /// be `self` in the current MIR, because that is the only time we directly access the fields\n /// of a closure type.\n-pub(crate) fn is_upvar_field_projection(\n+pub(crate) fn is_upvar_field_projection<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     upvars: &[Upvar<'tcx>],\n     place_ref: PlaceRef<'tcx>,"}, {"sha": "fec6bdf314b1d6c848748af6c511bba32fb9d842", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -58,7 +58,7 @@ crate struct CreateResult<'tcx> {\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }\n \n-crate fn create(\n+crate fn create<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n@@ -81,7 +81,7 @@ crate fn create(\n     .create()\n }\n \n-impl UniversalRegionRelations<'tcx> {\n+impl UniversalRegionRelations<'_> {\n     /// Records in the `outlives_relation` (and\n     /// `inverse_outlives_relation`) that `fr_a: fr_b`. Invoked by the\n     /// builder below.\n@@ -110,7 +110,7 @@ impl UniversalRegionRelations<'tcx> {\n     /// outlives `fr` and (b) is not local.\n     ///\n     /// (*) If there are multiple competing choices, we return all of them.\n-    crate fn non_local_upper_bounds(&'a self, fr: &'a RegionVid) -> Vec<&'a RegionVid> {\n+    crate fn non_local_upper_bounds<'a>(&'a self, fr: &'a RegionVid) -> Vec<&'a RegionVid> {\n         debug!(\"non_local_upper_bound(fr={:?})\", fr);\n         let res = self.non_local_bounds(&self.inverse_outlives, fr);\n         assert!(!res.is_empty(), \"can't find an upper bound!?\");\n@@ -232,7 +232,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     region_bound_pairs: RegionBoundPairs<'tcx>,\n }\n \n-impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n+impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     crate fn create(mut self) -> CreateResult<'tcx> {\n         let unnormalized_input_output_tys = self\n             .universal_regions"}, {"sha": "dd23683fae8de4677fa09a664b03ac08044df4e3", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -152,7 +152,7 @@ impl LocalUseMapBuild<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for LocalUseMapBuild<'_> {\n+impl Visitor<'_> for LocalUseMapBuild<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match def_use::categorize(context) {"}, {"sha": "f18fe1f43d4da2c8b72ab4785c0411c850bbf14f", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -74,7 +74,7 @@ pub(super) fn generate<'mir, 'tcx>(\n // to compute whether a variable `X` is live if that variable contains\n // some region `R` in its type where `R` is not known to outlive a free\n // region (i.e., where `R` may be valid for just a subset of the fn body).\n-fn compute_live_locals(\n+fn compute_live_locals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     free_regions: &FxHashSet<RegionVid>,\n     body: &Body<'tcx>,\n@@ -104,7 +104,7 @@ fn compute_live_locals(\n /// regions. For these regions, we do not need to compute\n /// liveness, since the outlives constraints will ensure that they\n /// are live over the whole fn body anyhow.\n-fn regions_that_outlive_free_regions(\n+fn regions_that_outlive_free_regions<'tcx>(\n     num_region_vars: usize,\n     universal_regions: &UniversalRegions<'tcx>,\n     constraint_set: &OutlivesConstraintSet<'tcx>,"}, {"sha": "ee067c4872f67423aa60af1c97adb5a44868f897", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -53,7 +53,7 @@ impl UseFactsExtractor<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for UseFactsExtractor<'_> {\n+impl Visitor<'_> for UseFactsExtractor<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match def_use::categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n@@ -63,7 +63,7 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'_>, context: PlaceContext, location: Location) {\n         self.super_place(place, context, location);\n         match context {\n             PlaceContext::NonMutatingUse(_) => {\n@@ -82,7 +82,7 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n     }\n }\n \n-pub(super) fn populate_access_facts(\n+pub(super) fn populate_access_facts<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     body: &Body<'tcx>,\n     location_table: &LocationTable,\n@@ -123,7 +123,7 @@ pub(super) fn populate_access_facts(\n \n // For every potentially drop()-touched region `region` in `local`'s type\n // (`kind`), emit a Polonius `use_of_var_derefs_origin(local, origin)` fact.\n-pub(super) fn add_drop_of_var_derefs_origin(\n+pub(super) fn add_drop_of_var_derefs_origin<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     local: Local,\n     kind: &GenericArg<'tcx>,"}, {"sha": "0969b9a508f1d6112745206d57104903e793ea18", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -34,7 +34,7 @@ use crate::{\n /// DROP-LIVE set are to the liveness sets for regions found in the\n /// `dropck_outlives` result of the variable's type (in particular,\n /// this respects `#[may_dangle]` annotations).\n-pub(super) fn trace(\n+pub(super) fn trace<'mir, 'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     body: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n@@ -119,7 +119,7 @@ struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     stack: Vec<PointIndex>,\n }\n \n-impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n+impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     fn new(cx: LivenessContext<'me, 'typeck, 'flow, 'tcx>) -> Self {\n         let num_points = cx.elements.num_points();\n         LivenessResults {\n@@ -418,7 +418,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     }\n }\n \n-impl LivenessContext<'_, '_, '_, 'tcx> {\n+impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     /// Returns `true` if the local variable (or some part of it) is initialized at the current\n     /// cursor position. Callers should call one of the `seek` methods immediately before to point\n     /// the cursor to the desired location."}, {"sha": "872a4321447041251d988155da1e03daac626be4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -945,7 +945,7 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n     crate type_tests: Vec<TypeTest<'tcx>>,\n }\n \n-impl MirTypeckRegionConstraints<'tcx> {\n+impl<'tcx> MirTypeckRegionConstraints<'tcx> {\n     fn placeholder_region(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "cc3fe0a123c55bc79803e994cddc189e71f13c85", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -51,7 +51,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     universe_info: UniverseInfo<'tcx>,\n }\n \n-impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n+impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n@@ -62,7 +62,7 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     }\n }\n \n-impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n+impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.type_checker.param_env\n     }"}, {"sha": "9031c3b2ecfbb57821e00d092a6391490b293267", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -15,6 +15,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "31086a2acf8cc2a0f0f5e723080b9da79ec5c59e", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,4 +1,4 @@\n-use crate::util::check_builtin_macro_attribute;\n+use crate::util::{check_builtin_macro_attribute, warn_on_duplicate_attribute};\n \n use rustc_ast as ast;\n use rustc_ast::mut_visit::MutVisitor;\n@@ -25,6 +25,7 @@ crate fn expand(\n     annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n+    warn_on_duplicate_attribute(&ecx, &annotatable, sym::cfg_eval);\n     vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable)]\n }\n "}, {"sha": "c08b141b557cae1db99280d915156929ab35d964", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,6 +1,6 @@\n /// The expansion from a test function to the appropriate test struct for libtest\n /// Ideally, this code would be in libtest but for efficiency and error messages it lives here.\n-use crate::util::check_builtin_macro_attribute;\n+use crate::util::{check_builtin_macro_attribute, warn_on_duplicate_attribute};\n \n use rustc_ast as ast;\n use rustc_ast::attr;\n@@ -27,6 +27,7 @@ pub fn expand_test_case(\n     anno_item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::test_case);\n+    warn_on_duplicate_attribute(&ecx, &anno_item, sym::test_case);\n \n     if !ecx.ecfg.should_test {\n         return vec![];\n@@ -55,6 +56,7 @@ pub fn expand_test(\n     item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(cx, meta_item, sym::test);\n+    warn_on_duplicate_attribute(&cx, &item, sym::test);\n     expand_test_or_bench(cx, attr_sp, item, false)\n }\n \n@@ -65,6 +67,7 @@ pub fn expand_bench(\n     item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(cx, meta_item, sym::bench);\n+    warn_on_duplicate_attribute(&cx, &item, sym::bench);\n     expand_test_or_bench(cx, attr_sp, item, true)\n }\n "}, {"sha": "527fe50eff0ceaa4d6dffeee84ef2fa045f947fe", "filename": "compiler/rustc_builtin_macros/src/util.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,6 +1,7 @@\n-use rustc_ast::MetaItem;\n-use rustc_expand::base::ExtCtxt;\n+use rustc_ast::{Attribute, MetaItem};\n+use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_feature::AttributeTemplate;\n+use rustc_lint_defs::builtin::DUPLICATE_MACRO_ATTRIBUTES;\n use rustc_parse::validate_attr;\n use rustc_span::Symbol;\n \n@@ -10,3 +11,33 @@ pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, na\n     let attr = ecx.attribute(meta_item.clone());\n     validate_attr::check_builtin_attribute(&ecx.sess.parse_sess, &attr, name, template);\n }\n+\n+/// Emit a warning if the item is annotated with the given attribute. This is used to diagnose when\n+/// an attribute may have been mistakenly duplicated.\n+pub fn warn_on_duplicate_attribute(ecx: &ExtCtxt<'_>, item: &Annotatable, name: Symbol) {\n+    let attrs: Option<&[Attribute]> = match item {\n+        Annotatable::Item(item) => Some(&item.attrs),\n+        Annotatable::TraitItem(item) => Some(&item.attrs),\n+        Annotatable::ImplItem(item) => Some(&item.attrs),\n+        Annotatable::ForeignItem(item) => Some(&item.attrs),\n+        Annotatable::Expr(expr) => Some(&expr.attrs),\n+        Annotatable::Arm(arm) => Some(&arm.attrs),\n+        Annotatable::ExprField(field) => Some(&field.attrs),\n+        Annotatable::PatField(field) => Some(&field.attrs),\n+        Annotatable::GenericParam(param) => Some(&param.attrs),\n+        Annotatable::Param(param) => Some(&param.attrs),\n+        Annotatable::FieldDef(def) => Some(&def.attrs),\n+        Annotatable::Variant(variant) => Some(&variant.attrs),\n+        _ => None,\n+    };\n+    if let Some(attrs) = attrs {\n+        if let Some(attr) = ecx.sess.find_by_name(attrs, name) {\n+            ecx.parse_sess().buffer_lint(\n+                DUPLICATE_MACRO_ATTRIBUTES,\n+                attr.span,\n+                ecx.current_expansion.lint_node_id,\n+                \"duplicated attribute\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "27a06943cbc25b2f6b300866cc99ef3add07c3b2", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -3066,6 +3066,7 @@ declare_lint_pass! {\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n         DEREF_INTO_DYN_SUPERTRAIT,\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+        DUPLICATE_MACRO_ATTRIBUTES,\n     ]\n }\n \n@@ -3603,3 +3604,32 @@ declare_lint! {\n         reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n     };\n }\n+\n+declare_lint! {\n+    /// The `duplicate_macro_attributes` lint detects when a `#[test]`-like built-in macro\n+    /// attribute is duplicated on an item. This lint may trigger on `bench`, `cfg_eval`, `test`\n+    /// and `test_case`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs --test)\n+    /// #[test]\n+    /// #[test]\n+    /// fn foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// A duplicated attribute may erroneously originate from a copy-paste and the effect of it\n+    /// being duplicated may not be obvious or desireable.\n+    ///\n+    /// For instance, doubling the `#[test]` attributes registers the test to be run twice with no\n+    /// change to its environment.\n+    ///\n+    /// [issue #90979]: https://github.com/rust-lang/rust/issues/90979\n+    pub DUPLICATE_MACRO_ATTRIBUTES,\n+    Warn,\n+    \"duplicated attribute\"\n+}"}, {"sha": "7500df896e9711a7e1f122cf183bf98c8a74aa8a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -870,8 +870,9 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n                 && tcx.sess.opts.output_types.should_codegen();\n-            // Only check the presence of the `const` modifier.\n-            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id());\n+            // The function has a `const` modifier or is annotated with `default_method_body_is_const`.\n+            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())\n+                || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);\n             let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }"}, {"sha": "f577f102e8db24f6e03d65e152ca09ed6e5f3625", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -64,7 +64,7 @@ impl<T> ManuallyDrop<T> {\n     /// ```\n     #[must_use = \"if you don't need the wrapper, you can use `mem::forget` instead\"]\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\")]\n+    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.32.0\")]\n     #[inline(always)]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n@@ -82,7 +82,7 @@ impl<T> ManuallyDrop<T> {\n     /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\")]\n+    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.32.0\")]\n     #[inline(always)]\n     pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value"}, {"sha": "210a9ec718315b3c0e1336ec9d48d5689b01b840", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -417,6 +417,33 @@ impl Error {\n         Self::_new(kind, error.into())\n     }\n \n+    /// Creates a new I/O error from an arbitrary error payload.\n+    ///\n+    /// This function is used to generically create I/O errors which do not\n+    /// originate from the OS itself. It is a shortcut for [`Error::new`]\n+    /// with [`ErrorKind::Other`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_error_other)]\n+    ///\n+    /// use std::io::Error;\n+    ///\n+    /// // errors can be created from strings\n+    /// let custom_error = Error::other(\"oh no!\");\n+    ///\n+    /// // errors can also be created from other errors\n+    /// let custom_error2 = Error::other(custom_error);\n+    /// ```\n+    #[unstable(feature = \"io_error_other\", issue = \"91946\")]\n+    pub fn other<E>(error: E) -> Error\n+    where\n+        E: Into<Box<dyn error::Error + Send + Sync>>,\n+    {\n+        Self::_new(ErrorKind::Other, error.into())\n+    }\n+\n     fn _new(kind: ErrorKind, error: Box<dyn error::Error + Send + Sync>) -> Error {\n         Error { repr: Repr::Custom(Box::new(Custom { kind, error })) }\n     }"}, {"sha": "2f7c57bcdc461189529a20f276f5c49eb5384295", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -53,7 +53,7 @@ files_to_extract=(\n for lib in c cxxrt gcc_s m thr util; do\n   files_to_extract=(\"${files_to_extract[@]}\" \"./lib/lib${lib}.*\" \"./usr/lib/lib${lib}.*\")\n done\n-for lib in c++ c_nonshared compiler_rt execinfo gcc pthread rt ssp_nonshared procstat kvm; do\n+for lib in c++ c_nonshared compiler_rt execinfo gcc pthread rt ssp_nonshared procstat devstat kvm; do\n   files_to_extract=(\"${files_to_extract[@]}\" \"./usr/lib/lib${lib}.*\")\n done\n "}, {"sha": "3410f46e2a8d2d71d6e168c6664ed99a348232c9", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,5 @@\n+//! Detects links that are not linkified, e.g., in Markdown such as `Go to https://example.com/.`\n+//! Suggests wrapping the link with angle brackets: `Go to <https://example.com/>.` to linkify it.\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;"}, {"sha": "6111c982de92253b51f52c65d86910dbaeaf5f35", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! Calculates information used for the --show-coverage flag.\n use crate::clean;\n use crate::core::DocContext;\n use crate::html::markdown::{find_testable_code, ErrorCodes};"}, {"sha": "a50bf558bf3d142489ffc7e38f2825b67b9d48bd", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! Validates syntax inside Rust code blocks (\\`\\`\\`rust).\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_middle::lint::LintDiagnosticBuilder;"}, {"sha": "b86ec8abefaaea8e242b16cc79d4362ae32b8804", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,5 @@\n+//! Looks for items missing (or incorrectly having) doctests.\n+//!\n //! This pass is overloaded and runs two different lints.\n //!\n //! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doctests."}, {"sha": "baa0c7595eb869a75765d390fd185cc74ee8d9a2", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,6 @@\n+//! Collects trait impls for each item in the crate. For example, if a crate\n+//! defines a struct that implements a trait, this pass will note that the\n+//! struct implements that trait.\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;"}, {"sha": "f7a9a0899e390281e1f9faf705bec3da84c5fe8f", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! Detects invalid HTML (like an unclosed `<span>`) in doc comments.\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;"}, {"sha": "d3df2d2794b4271819de9c5344d65a5dfcff9336", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! Propagates [`#[doc(cfg(...))]`](https://github.com/rust-lang/rust/issues/43781) to child items.\n use std::sync::Arc;\n \n use crate::clean::cfg::Cfg;"}, {"sha": "e63534659add7836950c26917203fb312289a7e2", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! Strip all doc(hidden) items from the output.\n use rustc_span::symbol::sym;\n use std::mem;\n "}, {"sha": "21ce9ae7a28e1f4387d42c9f319168743fbd9a67", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,5 @@\n+//! Strips all private import statements (use, extern crate) from a\n+//! crate.\n use crate::clean;\n use crate::core::DocContext;\n use crate::fold::DocFolder;"}, {"sha": "c6b5bec4692dc3b4fbafb94bee7830d266c4289a", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,5 @@\n+//! Strip all private items from the output. Additionally implies strip_priv_imports.\n+//! Basically, the goal is to remove items that are not relevant for public documentation.\n use crate::clean::{self, ItemIdSet};\n use crate::core::DocContext;\n use crate::fold::DocFolder;"}, {"sha": "675443b48a206d509cd0cdcf58ca84ce5ef85fea", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,4 @@\n+//! A collection of utility functions for the `strip_*` passes.\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::privacy::AccessLevels;\n use std::mem;"}, {"sha": "6cac31d2f90dcd1eb3dc0e53ada809678e3f6cce", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,3 +1,16 @@\n+//! Removes excess indentation on comments in order for the Markdown\n+//! to be parsed correctly. This is necessary because the convention for\n+//! writing documentation is to provide a space between the /// or //! marker\n+//! and the doc text, but Markdown is whitespace-sensitive. For example,\n+//! a block of text with four-space indentation is parsed as a code block,\n+//! so if we didn't unindent comments, these list items\n+//!\n+//! /// A list:\n+//! ///\n+//! ///    - Foo\n+//! ///    - Bar\n+//!\n+//! would be parsed as if they were in a code block, which is likely not what the user intended.\n use std::cmp;\n \n use rustc_span::symbol::kw;"}, {"sha": "84a5abcf8b4bcec6f732edd8266a166269046a91", "filename": "src/test/ui/attributes/duplicated-attributes.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -0,0 +1,41 @@\n+// Test that, if an item is annotated with a builtin attribute more than once, a warning is\n+// emitted.\n+// Tests https://github.com/rust-lang/rust/issues/90979\n+\n+// check-pass\n+// compile-flags: --test\n+\n+#![feature(test)]\n+#![feature(cfg_eval)]\n+\n+#[test]\n+#[test]\n+//~^ WARNING duplicated attribute\n+fn f() {}\n+\n+// The following shouldn't trigger an error. The attribute is not duplicated.\n+#[test]\n+fn f2() {}\n+\n+// The following shouldn't trigger an error either. The second attribute is not #[test].\n+#[test]\n+#[inline]\n+fn f3() {}\n+\n+extern crate test;\n+use test::Bencher;\n+\n+#[bench]\n+#[bench]\n+//~^ WARNING duplicated attribute\n+fn f4(_: &mut Bencher) {}\n+\n+#[cfg_eval]\n+#[cfg_eval]\n+//~^ WARNING duplicated attribute\n+struct S;\n+\n+#[cfg_eval]\n+struct S2;\n+\n+fn main() {}"}, {"sha": "735d950b27c220257573b9ff2a8e08782059dbb9", "filename": "src/test/ui/attributes/duplicated-attributes.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -0,0 +1,22 @@\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:12:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+   |\n+   = note: `#[warn(duplicate_macro_attributes)]` on by default\n+\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:29:1\n+   |\n+LL | #[bench]\n+   | ^^^^^^^^\n+\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:34:1\n+   |\n+LL | #[cfg_eval]\n+   | ^^^^^^^^^^^\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "2d049277d7fcf44e1950d2e0fd9804e98f20f1c4", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -1,6 +1,9 @@\n+#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait MyTrait {\n+    #[default_method_body_is_const]\n+    fn defaulted_func(&self) {}\n     fn func(self);\n }\n "}, {"sha": "c0f90c116e459d09a77afcbe9ab24f0e90790982", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-default-method-body-is-const.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c2723269e14c3b037feb2c4865a82053403649/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs?ref=23c2723269e14c3b037feb2c4865a82053403649", "patch": "@@ -0,0 +1,18 @@\n+// This tests that `default_method_body_is_const` methods can\n+// be called from a const context when used across crates.\n+//\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+\n+// aux-build: cross-crate.rs\n+extern crate cross_crate;\n+\n+use cross_crate::*;\n+\n+const _: () = {\n+    Const.func();\n+    Const.defaulted_func();\n+};\n+\n+fn main() {}"}]}