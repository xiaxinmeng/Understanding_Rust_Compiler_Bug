{"sha": "fbcd136b655c2743d3a8c3aa87e460ac38d57046", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiY2QxMzZiNjU1YzI3NDNkM2E4YzNhYTg3ZTQ2MGFjMzhkNTcwNDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-09-14T23:18:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Improve the cycle tests", "tree": {"sha": "453f729c628f22338ae5e17697199be041e93424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453f729c628f22338ae5e17697199be041e93424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbcd136b655c2743d3a8c3aa87e460ac38d57046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcd136b655c2743d3a8c3aa87e460ac38d57046", "html_url": "https://github.com/rust-lang/rust/commit/fbcd136b655c2743d3a8c3aa87e460ac38d57046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbcd136b655c2743d3a8c3aa87e460ac38d57046/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40879408cb055fc078912ca226ac0a41ddb61ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40879408cb055fc078912ca226ac0a41ddb61ce", "html_url": "https://github.com/rust-lang/rust/commit/f40879408cb055fc078912ca226ac0a41ddb61ce"}], "stats": {"total": 281, "additions": 240, "deletions": 41}, "files": [{"sha": "71ac914ef57594a942d8063c768785be8417e60b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.rs", "status": "renamed", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -15,6 +15,10 @@ impl Tr for u8 {\n     type A = u8;\n }\n \n+impl Tr for u16 {\n+    type B = ();\n+}\n+\n impl Tr for u32 {\n     type A = ();\n     type B = u8;\n@@ -28,8 +32,14 @@ impl Tr for bool {\n }\n // (the error is shown twice for some reason)\n \n+impl Tr for usize {\n+//~^ ERROR overflow evaluating the requirement\n+    type B = &'static Self::A;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+\n fn main() {\n-    // Check that the overridden type propagates to the other\n-    let _a: <u8 as Tr>::A = 0u8;\n-    let _b: <u8 as Tr>::B = 0u8;\n+    // We don't check that the types project correctly because the cycle errors stop compilation\n+    // before `main` is type-checked.\n+    // `defaults-cyclic-pass-1.rs` does this.\n }", "previous_filename": "src/test/ui/associated-types/defaults-cyclic-fail.rs"}, {"sha": "4f28a50701ad08d68006a797dd9054bc74a1a355", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -0,0 +1,33 @@\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:12:6\n+   |\n+LL | impl Tr for () {}\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:30:6\n+   |\n+LL | impl Tr for bool {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:37:6\n+   |\n+LL | impl Tr for usize {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:32:5\n+   |\n+LL |     type A = Box<Self::B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-1.rs:39:5\n+   |\n+LL |     type B = &'static Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "2f2e84c60002ab7031a9aa6c2d3270c25969ba73", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -0,0 +1,49 @@\n+// compile-fail\n+\n+#![feature(associated_type_defaults)]\n+\n+// A more complex version of `defaults-cyclic-fail-1.rs`, with non-trivial defaults.\n+\n+// Having a cycle in assoc. type defaults is okay...\n+trait Tr {\n+    type A = Vec<Self::B>;\n+    type B = Box<Self::A>;\n+}\n+\n+// ...but is an error in any impl that doesn't override at least one of the defaults\n+impl Tr for () {}\n+//~^ ERROR overflow evaluating the requirement\n+\n+// As soon as at least one is redefined, it works:\n+impl Tr for u8 {\n+    type A = u8;\n+}\n+\n+impl Tr for u16 {\n+    type B = ();\n+}\n+\n+impl Tr for u32 {\n+    type A = ();\n+    type B = u8;\n+}\n+\n+// ...but only if this actually breaks the cycle\n+impl Tr for bool {\n+//~^ ERROR overflow evaluating the requirement\n+    type A = Box<Self::B>;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+// (the error is shown twice for some reason)\n+\n+impl Tr for usize {\n+//~^ ERROR overflow evaluating the requirement\n+    type B = &'static Self::A;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+\n+fn main() {\n+    // We don't check that the types project correctly because the cycle errors stop compilation\n+    // before `main` is type-checked.\n+    // `defaults-cyclic-pass-2.rs` does this.\n+}"}, {"sha": "bbc130f11f729c173b82efacadcc3c97267e5158", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -0,0 +1,33 @@\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:14:6\n+   |\n+LL | impl Tr for () {}\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:32:6\n+   |\n+LL | impl Tr for bool {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:39:6\n+   |\n+LL | impl Tr for usize {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:34:5\n+   |\n+LL |     type A = Box<Self::B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-2.rs:41:5\n+   |\n+LL |     type B = &'static Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "dd0e5c2ef42147dd47ae8cd54d0256d42f25d3e5", "filename": "src/test/ui/associated-types/defaults-cyclic-fail.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f40879408cb055fc078912ca226ac0a41ddb61ce/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f40879408cb055fc078912ca226ac0a41ddb61ce/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail.stderr?ref=f40879408cb055fc078912ca226ac0a41ddb61ce", "patch": "@@ -1,21 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail.rs:10:6\n-   |\n-LL | impl Tr for () {}\n-   |      ^^\n-\n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail.rs:24:6\n-   |\n-LL | impl Tr for bool {\n-   |      ^^\n-\n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail.rs:26:5\n-   |\n-LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "97c6e5bade233241d530a7ecfd6d5e26380def2b", "filename": "src/test/ui/associated-types/defaults-cyclic-pass-1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n+// that retains it.\n+trait Tr {\n+    type A = Self::B;\n+    type B = Self::A;\n+\n+    fn f();\n+}\n+\n+// An impl has to break the cycle to be accepted.\n+impl Tr for u8 {\n+    type A = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = 0u8;\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+impl Tr for String {\n+    type B = ();\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = ();\n+        let _: Self::B = ();\n+    }\n+}\n+\n+impl Tr for () {\n+    type A = Vec<()>;\n+    type B = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+fn main() {\n+    // Check that both impls now have the right types (seen from outside the impls)\n+    let _: <u8 as Tr>::A = 0u8;\n+    let _: <u8 as Tr>::B = 0u8;\n+\n+    let _: <String as Tr>::A = ();\n+    let _: <String as Tr>::B = ();\n+\n+    let _: <() as Tr>::A = Vec::<()>::new();\n+    let _: <() as Tr>::B = 0u8;\n+}"}, {"sha": "69315a022100b89aa3ac4a377924ca4726737f8e", "filename": "src/test/ui/associated-types/defaults-cyclic-pass-2.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcd136b655c2743d3a8c3aa87e460ac38d57046/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs?ref=fbcd136b655c2743d3a8c3aa87e460ac38d57046", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n+// that retains it.\n+trait Tr {\n+    type A = Vec<Self::B>;\n+    type B = Box<Self::A>;\n+\n+    fn f();\n+}\n+\n+// An impl has to break the cycle to be accepted.\n+impl Tr for u8 {\n+    type A = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = 0u8;\n+        let _: Self::B = Box::new(0u8);\n+    }\n+}\n+\n+impl Tr for String {\n+    type B = ();\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = ();\n+    }\n+}\n+\n+impl Tr for () {\n+    type A = Vec<()>;\n+    type B = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+fn main() {\n+    // Check that both impls now have the right types (seen from outside the impls)\n+    let _: <u8 as Tr>::A = 0u8;\n+    let _: <u8 as Tr>::B = Box::new(0u8);\n+\n+    let _: <String as Tr>::A = Vec::<()>::new();\n+    let _: <String as Tr>::B = ();\n+\n+    let _: <() as Tr>::A = Vec::<()>::new();\n+    let _: <() as Tr>::B = 0u8;\n+}"}, {"sha": "74a0cfa6b73a4911099a9e5aea46fd795578ab28", "filename": "src/test/ui/associated-types/defaults-cyclic-pass.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f40879408cb055fc078912ca226ac0a41ddb61ce/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40879408cb055fc078912ca226ac0a41ddb61ce/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs?ref=f40879408cb055fc078912ca226ac0a41ddb61ce", "patch": "@@ -1,17 +0,0 @@\n-// check-pass\n-\n-#![feature(associated_type_defaults)]\n-\n-// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n-// that retains it.\n-trait Tr {\n-    type A = Self::B;\n-    type B = Self::A;\n-}\n-\n-// An impl has to break the cycle to be accepted.\n-impl Tr for u8 {\n-    type A = u8;\n-}\n-\n-fn main() {}"}]}