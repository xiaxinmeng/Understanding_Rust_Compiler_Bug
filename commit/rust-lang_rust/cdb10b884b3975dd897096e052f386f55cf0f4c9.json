{"sha": "cdb10b884b3975dd897096e052f386f55cf0f4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjEwYjg4NGIzOTc1ZGQ4OTcwOTZlMDUyZjM4NmY1NWNmMGY0Yzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T08:38:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T13:51:35Z"}, "message": "A very simple hack to force an autoderef if the callee has type `&mut\nF`, so that if we have `x: &mut FnMut()`, then `x()` is translated to\n`FnMut::call_mut(&mut *x, ())` rather than `&mut x`. The latter would\nrequire `mut x: &mut FnMut()`, which is really a lot of mut. (Actually,\nthe `mut` is normally required except for the special case of a `&mut F`\nreference, because that's the one case where we distinguish a unique\npath like `x` from a mutable path.)", "tree": {"sha": "a75858430889306bd509cdb801be0df19c742c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75858430889306bd509cdb801be0df19c742c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb10b884b3975dd897096e052f386f55cf0f4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb10b884b3975dd897096e052f386f55cf0f4c9", "html_url": "https://github.com/rust-lang/rust/commit/cdb10b884b3975dd897096e052f386f55cf0f4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb10b884b3975dd897096e052f386f55cf0f4c9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cead47ca53a2c6bb0f774264131dccbc0936d90b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cead47ca53a2c6bb0f774264131dccbc0936d90b", "html_url": "https://github.com/rust-lang/rust/commit/cead47ca53a2c6bb0f774264131dccbc0936d90b"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "3f9c14e0afe398ab8d3b905cf60e3ef082dfb029", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cdb10b884b3975dd897096e052f386f55cf0f4c9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb10b884b3975dd897096e052f386f55cf0f4c9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=cdb10b884b3975dd897096e052f386f55cf0f4c9", "patch": "@@ -83,9 +83,7 @@ pub fn check_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                   UnresolvedTypeAction::Error,\n                   LvaluePreference::NoPreference,\n                   |adj_ty, idx| {\n-                      let autoderefref = ty::AutoDerefRef { autoderefs: idx, autoref: None };\n-                      try_overloaded_call_step(fcx, call_expr, callee_expr,\n-                                               adj_ty, autoderefref)\n+                      try_overloaded_call_step(fcx, call_expr, callee_expr, adj_ty, idx)\n                   });\n \n     match result {\n@@ -119,13 +117,15 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                       call_expr: &'tcx ast::Expr,\n                                       callee_expr: &'tcx ast::Expr,\n                                       adjusted_ty: Ty<'tcx>,\n-                                      autoderefref: ty::AutoDerefRef<'tcx>)\n+                                      autoderefs: usize)\n                                       -> Option<CallStep<'tcx>>\n {\n-    debug!(\"try_overloaded_call_step(call_expr={}, adjusted_ty={}, autoderefref={})\",\n+    debug!(\"try_overloaded_call_step(call_expr={}, adjusted_ty={}, autoderefs={})\",\n            call_expr.repr(fcx.tcx()),\n            adjusted_ty.repr(fcx.tcx()),\n-           autoderefref.repr(fcx.tcx()));\n+           autoderefs);\n+\n+    let autoderefref = ty::AutoDerefRef { autoderefs: autoderefs, autoref: None };\n \n     // If the callee is a bare function or a closure, then we're all set.\n     match structurally_resolved_type(fcx, callee_expr.span, adjusted_ty).sty {\n@@ -161,6 +161,18 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n         }\n \n+        // Hack: we know that there are traits implementing Fn for &F\n+        // where F:Fn and so forth. In the particular case of types\n+        // like `x: &mut FnMut()`, if there is a call `x()`, we would\n+        // normally translate to `FnMut::call_mut(&mut x, ())`, but\n+        // that winds up requiring `mut x: &mut FnMut()`. A little\n+        // over the top. The simplest fix by far is to just ignore\n+        // this case and deref again, so we wind up with\n+        // `FnMut::call_mut(&mut *x, ())`.\n+        ty::ty_rptr(..) if autoderefs == 0 => {\n+            return None;\n+        }\n+\n         _ => {}\n     }\n "}]}