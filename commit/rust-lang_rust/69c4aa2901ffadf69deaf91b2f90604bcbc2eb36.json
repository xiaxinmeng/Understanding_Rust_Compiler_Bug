{"sha": "69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YzRhYTI5MDFmZmFkZjY5ZGVhZjkxYjJmOTA2MDRiY2JjMmViMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T15:28:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T15:28:34Z"}, "message": "Auto merge of #88710 - Mark-Simulacrum:tyvid-idx, r=jackh726\n\nUse index newtyping for TyVid\n\nThis is useful for using TyVid in types like VecGraph, and just otherwise seems like a small win.", "tree": {"sha": "9b342e8324b7679631d20790d637d29c3c9ac2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b342e8324b7679631d20790d637d29c3c9ac2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "html_url": "https://github.com/rust-lang/rust/commit/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73641cd23ba470c6b4dcd72b8d5f62d27c735254", "url": "https://api.github.com/repos/rust-lang/rust/commits/73641cd23ba470c6b4dcd72b8d5f62d27c735254", "html_url": "https://github.com/rust-lang/rust/commit/73641cd23ba470c6b4dcd72b8d5f62d27c735254"}, {"sha": "2eac09d258380a39c8578fb70a68256c8546cece", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eac09d258380a39c8578fb70a68256c8546cece", "html_url": "https://github.com/rust-lang/rust/commit/2eac09d258380a39c8578fb70a68256c8546cece"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "35ebe92c59246d9fd9f585696fc3634f691018d7", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n                 if self.type_vars.0.contains(&vid) {\n                     // This variable was created during the fudging.\n                     // Recreate it with a fresh variable here.\n-                    let idx = (vid.index - self.type_vars.0.start.index) as usize;\n+                    let idx = (vid.as_usize() - self.type_vars.0.start.as_usize()) as usize;\n                     let origin = self.type_vars.1[idx];\n                     self.infcx.next_ty_var(origin)\n                 } else {"}, {"sha": "f15268f6895efa8b92dba07373fc30057997abff", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "patch": "@@ -196,15 +196,15 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_diverges(&self, vid: ty::TyVid) -> Diverging {\n-        self.storage.values.get(vid.index as usize).diverging\n+        self.storage.values.get(vid.index()).diverging\n     }\n \n     /// Returns the origin that was given when `vid` was created.\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {\n-        &self.storage.values.get(vid.index as usize).origin\n+        &self.storage.values.get(vid.as_usize()).origin\n     }\n \n     /// Records that `a == b`, depending on `dir`.\n@@ -269,7 +269,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         assert_eq!(eq_key.vid, sub_key);\n \n         let index = self.values().push(TypeVariableData { origin, diverging });\n-        assert_eq!(eq_key.vid.index, index as u32);\n+        assert_eq!(eq_key.vid.as_u32(), index as u32);\n \n         debug!(\n             \"new_var(index={:?}, universe={:?}, diverging={:?}, origin={:?}\",\n@@ -357,11 +357,11 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         &mut self,\n         value_count: usize,\n     ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {\n-        let range = TyVid { index: value_count as u32 }..TyVid { index: self.num_vars() as u32 };\n+        let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());\n         (\n             range.start..range.end,\n-            (range.start.index..range.end.index)\n-                .map(|index| self.storage.values.get(index as usize).origin)\n+            (range.start.as_usize()..range.end.as_usize())\n+                .map(|index| self.storage.values.get(index).origin)\n                 .collect(),\n         )\n     }\n@@ -371,7 +371,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {\n         (0..self.storage.values.len())\n             .filter_map(|i| {\n-                let vid = ty::TyVid { index: i as u32 };\n+                let vid = ty::TyVid::from_usize(i);\n                 match self.probe(vid) {\n                     TypeVariableValue::Unknown { .. } => Some(vid),\n                     TypeVariableValue::Known { .. } => None,\n@@ -424,10 +424,10 @@ impl<'tcx> ut::UnifyKey for TyVidEqKey<'tcx> {\n     type Value = TypeVariableValue<'tcx>;\n     #[inline(always)]\n     fn index(&self) -> u32 {\n-        self.vid.index\n+        self.vid.as_u32()\n     }\n     fn from_index(i: u32) -> Self {\n-        TyVidEqKey::from(ty::TyVid { index: i })\n+        TyVidEqKey::from(ty::TyVid::from_u32(i))\n     }\n     fn tag() -> &'static str {\n         \"TyVidEqKey\""}, {"sha": "0d3fd748645edb266980aa635a32a72f011529d5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "patch": "@@ -1244,15 +1244,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let sig = if let ty::Tuple(inputs) = inputs.kind() {\n                 tcx.mk_fn_sig(\n                     inputs.iter().map(|k| k.expect_ty()),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,\n                 )\n             } else {\n                 tcx.mk_fn_sig(\n                     std::iter::once(inputs),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,"}, {"sha": "d9ce169efc15ca49d8de63606490a637023e317e", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "patch": "@@ -363,10 +363,11 @@ pub enum IntVarValue {\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub struct FloatVarValue(pub FloatTy);\n \n-/// A **ty**pe **v**ariable **ID**.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n-pub struct TyVid {\n-    pub index: u32,\n+rustc_index::newtype_index! {\n+    /// A **ty**pe **v**ariable **ID**.\n+    pub struct TyVid {\n+        DEBUG_FORMAT = \"_#{}t\"\n+    }\n }\n \n /// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.\n@@ -422,10 +423,10 @@ pub enum InferTy {\n impl UnifyKey for TyVid {\n     type Value = ();\n     fn index(&self) -> u32 {\n-        self.index\n+        self.as_u32()\n     }\n     fn from_index(i: u32) -> TyVid {\n-        TyVid { index: i }\n+        TyVid::from_u32(i)\n     }\n     fn tag() -> &'static str {\n         \"TyVid\"\n@@ -558,7 +559,7 @@ impl<CTX> HashStable<CTX> for InferTy {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         use InferTy::*;\n         match self {\n-            TyVar(v) => v.index.hash_stable(ctx, hasher),\n+            TyVar(v) => v.as_u32().hash_stable(ctx, hasher),\n             IntVar(v) => v.index.hash_stable(ctx, hasher),\n             FloatVar(v) => v.index.hash_stable(ctx, hasher),\n             FreshTy(v) | FreshIntTy(v) | FreshFloatTy(v) => v.hash_stable(ctx, hasher),\n@@ -587,12 +588,6 @@ impl fmt::Debug for FloatVarValue {\n     }\n }\n \n-impl fmt::Debug for TyVid {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"_#{}t\", self.index)\n-    }\n-}\n-\n impl fmt::Debug for IntVid {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"_#{}i\", self.index)"}, {"sha": "9ed6d0c6ece252fcd61ad4a73f893f365baad25b", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "patch": "@@ -742,7 +742,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let projection_ty = pred.skip_binder().projection_ty;\n \n                                 let substs_with_infer_self = tcx.mk_substs(\n-                                    iter::once(tcx.mk_ty_var(ty::TyVid { index: 0 }).into())\n+                                    iter::once(tcx.mk_ty_var(ty::TyVid::from_u32(0)).into())\n                                         .chain(projection_ty.substs.iter().skip(1)),\n                                 );\n "}]}