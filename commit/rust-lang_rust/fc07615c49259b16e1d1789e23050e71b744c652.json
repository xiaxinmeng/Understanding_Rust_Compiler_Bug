{"sha": "fc07615c49259b16e1d1789e23050e71b744c652", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDc2MTVjNDkyNTliMTZlMWQxNzg5ZTIzMDUwZTcxYjc0NGM2NTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T05:48:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T05:48:54Z"}, "message": "Auto merge of #68601 - 0dvictor:split, r=tmandry\n\nSplit `join_codegen_and_link()` into two steps\n\n`join_codegen_and_link()` is split to `join_codegen()` and `link()`.", "tree": {"sha": "b0ce92ca0e2ec863a00a23c6624094a8cdd27de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ce92ca0e2ec863a00a23c6624094a8cdd27de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc07615c49259b16e1d1789e23050e71b744c652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc07615c49259b16e1d1789e23050e71b744c652", "html_url": "https://github.com/rust-lang/rust/commit/fc07615c49259b16e1d1789e23050e71b744c652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc07615c49259b16e1d1789e23050e71b744c652/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a0bd2091b9ca8fe5059fd5f4a26279a388f278", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a0bd2091b9ca8fe5059fd5f4a26279a388f278", "html_url": "https://github.com/rust-lang/rust/commit/42a0bd2091b9ca8fe5059fd5f4a26279a388f278"}, {"sha": "ae51d2ba32a3dfa3811ee19164ef789eb734a38b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae51d2ba32a3dfa3811ee19164ef789eb734a38b", "html_url": "https://github.com/rust-lang/rust/commit/ae51d2ba32a3dfa3811ee19164ef789eb734a38b"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "8091a7485407074b6fd79822929ab4dfc47a644a", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=fc07615c49259b16e1d1789e23050e71b744c652", "patch": "@@ -29,7 +29,7 @@ use rustc::dep_graph::WorkProduct;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n-use rustc_codegen_ssa::CompiledModule;\n+use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n use rustc_errors::{FatalError, Handler};\n use std::any::Any;\n use std::ffi::CStr;\n@@ -39,7 +39,7 @@ use syntax::expand::allocator::AllocatorKind;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{OptLevel, OutputFilenames, OutputType, PrintRequest};\n+use rustc::session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n@@ -270,13 +270,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n         )\n     }\n \n-    fn join_codegen_and_link(\n+    fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         dep_graph: &DepGraph,\n-        outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<Box<dyn Any>, ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -291,14 +290,18 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         sess.compile_status()?;\n \n-        if !sess\n-            .opts\n-            .output_types\n-            .keys()\n-            .any(|&i| i == OutputType::Exe || i == OutputType::Metadata)\n-        {\n-            return Ok(());\n-        }\n+        Ok(Box::new(codegen_results))\n+    }\n+\n+    fn link(\n+        &self,\n+        sess: &Session,\n+        codegen_results: Box<dyn Any>,\n+        outputs: &OutputFilenames,\n+    ) -> Result<(), ErrorReported> {\n+        let codegen_results = codegen_results\n+            .downcast::<CodegenResults>()\n+            .expect(\"Expected CodegenResults, found Box<Any>\");\n \n         if sess.opts.debugging_opts.no_link {\n             // FIXME: use a binary format to encode the `.rlink` file"}, {"sha": "96166e04c2e3c89d6d47db3686c809206e52a4f4", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=fc07615c49259b16e1d1789e23050e71b744c652", "patch": "@@ -43,11 +43,22 @@ pub trait CodegenBackend {\n     /// # Panics\n     ///\n     /// Panics when the passed `Box<dyn Any>` was not returned by `codegen_backend`.\n-    fn join_codegen_and_link(\n+    fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         dep_graph: &DepGraph,\n+    ) -> Result<Box<dyn Any>, ErrorReported>;\n+\n+    /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when the passed `Box<dyn Any>` was not returned by `join_codegen`.\n+    fn link(\n+        &self,\n+        sess: &Session,\n+        codegen_results: Box<dyn Any>,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported>;\n }"}, {"sha": "2ac2845be91b378247e3ce9cb8a5c70beb509696", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc07615c49259b16e1d1789e23050e71b744c652/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=fc07615c49259b16e1d1789e23050e71b744c652", "patch": "@@ -310,19 +310,22 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        let r = self\n-            .codegen_backend\n-            .join_codegen_and_link(\n-                self.ongoing_codegen,\n-                &self.sess,\n-                &self.dep_graph,\n-                &self.prepare_outputs,\n-            )\n-            .map_err(|_| ErrorReported);\n+        let codegen_results =\n+            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess, &self.dep_graph)?;\n         let prof = self.sess.prof.clone();\n         let dep_graph = self.dep_graph;\n         prof.generic_activity(\"drop_dep_graph\").run(move || drop(dep_graph));\n-        r\n+\n+        if !self\n+            .sess\n+            .opts\n+            .output_types\n+            .keys()\n+            .any(|&i| i == OutputType::Exe || i == OutputType::Metadata)\n+        {\n+            return Ok(());\n+        }\n+        self.codegen_backend.link(&self.sess, codegen_results, &self.prepare_outputs)\n     }\n }\n "}, {"sha": "07ef2424cc880d2b9549f70f76cb4896b1365426", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc07615c49259b16e1d1789e23050e71b744c652/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc07615c49259b16e1d1789e23050e71b744c652/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=fc07615c49259b16e1d1789e23050e71b744c652", "patch": "@@ -71,18 +71,28 @@ impl CodegenBackend for TheBackend {\n         Box::new(tcx.crate_name(LOCAL_CRATE) as Symbol)\n     }\n \n-    fn join_codegen_and_link(\n+    fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n-        sess: &Session,\n+        _sess: &Session,\n         _dep_graph: &DepGraph,\n+    ) -> Result<Box<dyn Any>, ErrorReported> {\n+        let crate_name = ongoing_codegen.downcast::<Symbol>()\n+            .expect(\"in join_codegen: ongoing_codegen is not a Symbol\");\n+        Ok(crate_name)\n+    }\n+\n+    fn link(\n+        &self,\n+        sess: &Session,\n+        codegen_results: Box<dyn Any>,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use std::io::Write;\n         use rustc::session::config::CrateType;\n         use rustc_codegen_utils::link::out_filename;\n-        let crate_name = ongoing_codegen.downcast::<Symbol>()\n-            .expect(\"in join_codegen_and_link: ongoing_codegen is not a Symbol\");\n+        let crate_name = codegen_results.downcast::<Symbol>()\n+            .expect(\"in link: codegen_results is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));"}]}