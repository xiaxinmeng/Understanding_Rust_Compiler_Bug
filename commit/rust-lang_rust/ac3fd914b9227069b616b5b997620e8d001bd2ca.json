{"sha": "ac3fd914b9227069b616b5b997620e8d001bd2ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2ZkOTE0YjkyMjcwNjliNjE2YjViOTk3NjIwZThkMDAxYmQyY2E=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-23T17:33:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-23T17:33:14Z"}, "message": "Update docs to talk about ! annotations", "tree": {"sha": "a0c746336b6dd526b54d65e151aacfdefeab2147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c746336b6dd526b54d65e151aacfdefeab2147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3fd914b9227069b616b5b997620e8d001bd2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3fd914b9227069b616b5b997620e8d001bd2ca", "html_url": "https://github.com/rust-lang/rust/commit/ac3fd914b9227069b616b5b997620e8d001bd2ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3fd914b9227069b616b5b997620e8d001bd2ca/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7611c4c9b8a0ad84d8e69930d237b74211ceb1", "html_url": "https://github.com/rust-lang/rust/commit/db7611c4c9b8a0ad84d8e69930d237b74211ceb1"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "66e3913fa9473fe08eb2dcb3070e38de0e29dcf7", "filename": "doc/rust.texi", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ac3fd914b9227069b616b5b997620e8d001bd2ca/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/ac3fd914b9227069b616b5b997620e8d001bd2ca/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=ac3fd914b9227069b616b5b997620e8d001bd2ca", "patch": "@@ -1800,8 +1800,9 @@ the value has the corresponding @emph{function type}, and can be used\n otherwise exactly as a function item (with a minor additional cost of calling\n the function, as such a call is indirect). @xref{Ref.Type.Fn}.\n \n-Every control path in a function ends with either a @code{ret} or @code{be}\n-expression. If a control path lacks a @code{ret} expression in source code, an\n+Every control path in a function ends with a @code{ret} or @code{be}\n+expression or with a diverging expression (described later in this\n+section). If a control path lacks a @code{ret} expression in source code, an\n implicit @code{ret} expression is appended to the end of the control path\n during compilation, returning the implicit @code{()} value.\n \n@@ -1812,6 +1813,44 @@ fn add(int x, int y) -> int @{\n @}\n @end example\n \n+A special kind of function can be declared with a @code{!} character where the\n+output slot type would normally be. For example:\n+@example\n+fn my_err(str s) -> ! @{\n+    log s;\n+    fail;\n+@}\n+@end example\n+\n+We call such functions ``diverging'' because they never return a value to the\n+caller. Every control path in a diverging function must end with a @code{fail}\n+or a call to another diverging function on every control path. The @code{!}\n+annotation does @emph{not} denote a type. Rather, the result type\n+of a diverging function is a special type called @math{\\bot} (``bottom'') that\n+unifies with any type. Rust has no syntax for @math{\\bot}.\n+\n+It might be necessary to declare a diverging function because as mentioned\n+previously, the typechecker checks that every control path in a function ends\n+with a @code{ret}, @code{be}, or diverging expression. So, if @code{my_err}\n+were declared without the @code{!} annotation, the following code would not\n+typecheck:\n+@example\n+fn f(int i) -> int @{\n+   if (i == 42) {\n+     ret 42;\n+   }\n+   else {\n+     my_err(\"Bad number!\");\n+   }\n+@}\n+@end example\n+\n+The typechecker would complain that @code{f} doesn't return a value in the\n+@code{else} branch. Adding the @code{!} annotation on @code{my_err} would\n+express that @code{f} requires no explicit @code{ret}, as if it returns\n+control to the caller, it returns a value (true because it never returns\n+control).\n+ \n @node       Ref.Item.Pred\n @subsection Ref.Item.Pred\n @c * Ref.Item.Pred::            Items defining predicates."}]}