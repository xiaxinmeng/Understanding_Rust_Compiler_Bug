{"sha": "1dc2119c032bf403d0949f39362f3a26f5de09f0", "node_id": "C_kwDOAAsO6NoAKDFkYzIxMTljMDMyYmY0MDNkMDk0OWYzOTM2MmYzYTI2ZjVkZTA5ZjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-28T16:01:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-14T08:15:51Z"}, "message": "Require lifetime bounds for opaque types in order to allow hidden types to capture said lifetimes", "tree": {"sha": "d8cb8b8c406bbfbc0e512b0440ba57fa6463adfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8cb8b8c406bbfbc0e512b0440ba57fa6463adfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc2119c032bf403d0949f39362f3a26f5de09f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc2119c032bf403d0949f39362f3a26f5de09f0", "html_url": "https://github.com/rust-lang/rust/commit/1dc2119c032bf403d0949f39362f3a26f5de09f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc2119c032bf403d0949f39362f3a26f5de09f0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f", "html_url": "https://github.com/rust-lang/rust/commit/1755c8530287d9f29d8d188e5d7a57f6aa35cf7f"}], "stats": {"total": 170, "additions": 142, "deletions": 28}, "files": [{"sha": "11a57ef26217476e2e712b0f1b58adaadcee486c", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -226,7 +226,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         }\n \n         let definition_ty = instantiated_ty\n-            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false)\n+            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false, origin)\n             .ty;\n \n         if !check_opaque_type_parameter_valid("}, {"sha": "d2d596efb93e7f8bc7460962c28b2d8d13658fb4", "filename": "compiler/rustc_hir_analysis/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -564,6 +564,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 opaque_type_key,\n                 self.fcx.infcx.tcx,\n                 true,\n+                decl.origin,\n             );\n \n             self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);"}, {"sha": "a92bb0f2e55eeee2cfd69702c6eef2ca7935cefa", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -26,6 +26,7 @@ use crate::ty::util::Discr;\n pub use adt::*;\n pub use assoc::*;\n pub use generics::*;\n+use hir::OpaqueTyOrigin;\n use rustc_ast as ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n@@ -1309,6 +1310,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         // typeck errors have subpar spans for opaque types, so delay error reporting until borrowck.\n         ignore_errors: bool,\n+        origin: OpaqueTyOrigin,\n     ) -> Self {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n@@ -1320,8 +1322,79 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         // shifting.\n         let id_substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n         debug!(?id_substs);\n-        let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n-            substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n+\n+        let map = substs.iter().zip(id_substs);\n+\n+        let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> = match origin {\n+            // HACK: The HIR lowering for async fn does not generate\n+            // any `+ Captures<'x>` bounds for the `impl Future<...>`, so all async fns with lifetimes\n+            // would now fail to compile. We should probably just make hir lowering fill this in properly.\n+            OpaqueTyOrigin::AsyncFn(_) => map.collect(),\n+            OpaqueTyOrigin::FnReturn(_) | OpaqueTyOrigin::TyAlias => {\n+                // Opaque types may only use regions that are bound. So for\n+                // ```rust\n+                // type Foo<'a, 'b, 'c> = impl Trait<'a> + 'b;\n+                // ```\n+                // we may not use `'c` in the hidden type.\n+                struct OpaqueTypeLifetimeCollector<'tcx> {\n+                    lifetimes: FxHashSet<ty::Region<'tcx>>,\n+                }\n+\n+                impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n+                    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                        self.lifetimes.insert(r);\n+                        r.super_visit_with(self)\n+                    }\n+                }\n+\n+                let mut collector = OpaqueTypeLifetimeCollector { lifetimes: Default::default() };\n+\n+                for pred in tcx.bound_explicit_item_bounds(def_id.to_def_id()).transpose_iter() {\n+                    let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n+\n+                    trace!(pred=?pred.kind());\n+\n+                    // We only ignore opaque type substs if the opaque type is the outermost type.\n+                    // The opaque type may be nested within itself via recursion in e.g.\n+                    // type Foo<'a> = impl PartialEq<Foo<'a>>;\n+                    // which thus mentions `'a` and should thus accept hidden types that borrow 'a\n+                    // instead of requiring an additional `+ 'a`.\n+                    match pred.kind().skip_binder() {\n+                        ty::PredicateKind::Trait(TraitPredicate {\n+                            trait_ref: ty::TraitRef { def_id: _, substs },\n+                            constness: _,\n+                            polarity: _,\n+                        }) => {\n+                            trace!(?substs);\n+                            for subst in &substs[1..] {\n+                                subst.visit_with(&mut collector);\n+                            }\n+                        }\n+                        ty::PredicateKind::Projection(ty::ProjectionPredicate {\n+                            projection_ty: ty::ProjectionTy { substs, item_def_id: _ },\n+                            term,\n+                        }) => {\n+                            for subst in &substs[1..] {\n+                                subst.visit_with(&mut collector);\n+                            }\n+                            term.visit_with(&mut collector);\n+                        }\n+                        _ => {\n+                            pred.visit_with(&mut collector);\n+                        }\n+                    }\n+                }\n+                let lifetimes = collector.lifetimes;\n+                trace!(?lifetimes);\n+                map.filter(|(_, v)| {\n+                    let ty::GenericArgKind::Lifetime(lt) = v.unpack() else {\n+                        return true;\n+                    };\n+                    lifetimes.contains(&lt)\n+                })\n+                .collect()\n+            }\n+        };\n         debug!(\"map = {:#?}\", map);\n \n         // Convert the type from the function into a type valid outside"}, {"sha": "8c7b41d73b7c6cbf903f2c5dabcba80ca086b3e1", "filename": "src/test/ui/impl-trait/issue-86465.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,6 +1,10 @@\n #![feature(type_alias_impl_trait)]\n \n-type X<'a, 'b> = impl std::fmt::Debug;\n+pub trait Captures<'a> {}\n+\n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type X<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n \n fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n     (a, a)"}, {"sha": "b949b2b4245d8e40dcee6f9f439e1a5b90525793", "filename": "src/test/ui/impl-trait/issue-86465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,5 +1,5 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-86465.rs:6:5\n+  --> $DIR/issue-86465.rs:10:5\n    |\n LL |     (a, a)\n    |     ^^^^^^"}, {"sha": "5f75fdc716efdc6d135b628a175797cd8726bef2", "filename": "src/test/ui/type-alias-impl-trait/different_lifetimes_defining_uses.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,7 +1,11 @@\n #![feature(type_alias_impl_trait)]\n #![allow(dead_code)]\n \n-type OneLifetime<'a, 'b> = impl std::fmt::Debug;\n+pub trait Captures<'a> {}\n+\n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type OneLifetime<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n \n fn foo<'a, 'b>(a: &'a u32, b: &'b u32) -> OneLifetime<'a, 'b> {\n     a"}, {"sha": "546598e8a5c993bdd7bb8265c9a4dd84d73a5b97", "filename": "src/test/ui/type-alias-impl-trait/different_lifetimes_defining_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_lifetimes_defining_uses.rs:11:5\n+  --> $DIR/different_lifetimes_defining_uses.rs:15:5\n    |\n LL |     b\n    |     ^ expected `&'a u32`, got `&'b u32`\n    |\n note: previous use here\n-  --> $DIR/different_lifetimes_defining_uses.rs:7:5\n+  --> $DIR/different_lifetimes_defining_uses.rs:11:5\n    |\n LL |     a\n    |     ^"}, {"sha": "9d938a61600f54705db35462b7b402c579bf1009", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -2,8 +2,11 @@\n \n fn main() {}\n \n-type Two<'a, 'b> = impl std::fmt::Debug;\n+pub trait Captures<'a> {}\n \n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type Two<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n \n fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n     t"}, {"sha": "72e1ef4b4923be4fb9d2ff990c3c1f28780d4fac", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,13 +1,13 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:9:5\n+  --> $DIR/generic_duplicate_lifetime_param.rs:12:5\n    |\n LL |     t\n    |     ^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:5:10\n+  --> $DIR/generic_duplicate_lifetime_param.rs:9:10\n    |\n-LL | type Two<'a, 'b> = impl std::fmt::Debug;\n+LL | type Two<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n    |          ^^  ^^\n \n error: aborting due to previous error"}, {"sha": "80462f8ac046cb451c33a47c47d27c862772927c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -7,7 +7,12 @@ fn main() {}\n // test that unused generic parameters are ok\n type TwoTys<T, U> = impl Debug;\n \n-type TwoLifetimes<'a, 'b> = impl Debug;\n+\n+pub trait Captures<'a> {}\n+\n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type TwoLifetimes<'a, 'b> = impl Debug + Captures<'a> + Captures<'b>;\n \n type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n "}, {"sha": "98e4bfea10d6325b62d8402fe80c641e91e24d56", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,5 +1,5 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:16:5\n+  --> $DIR/generic_duplicate_param_use.rs:21:5\n    |\n LL |     t\n    |     ^\n@@ -11,25 +11,25 @@ LL | type TwoTys<T, U> = impl Debug;\n    |             ^  ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:5\n+  --> $DIR/generic_duplicate_param_use.rs:26:5\n    |\n LL |     t\n    |     ^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:10:19\n+  --> $DIR/generic_duplicate_param_use.rs:15:19\n    |\n-LL | type TwoLifetimes<'a, 'b> = impl Debug;\n+LL | type TwoLifetimes<'a, 'b> = impl Debug + Captures<'a> + Captures<'b>;\n    |                   ^^  ^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:5\n+  --> $DIR/generic_duplicate_param_use.rs:31:5\n    |\n LL |     t\n    |     ^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:16\n+  --> $DIR/generic_duplicate_param_use.rs:17:16\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n    |                ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^"}, {"sha": "106efefbaf278d5c368017c96dd9f2fb3c9f6ea2", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,10 +1,11 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-type Region<'a> = impl std::fmt::Debug;\n+type Region<'a> = impl std::fmt::Debug + 'a;\n+\n \n fn region<'b>(a: &'b ()) -> Region<'b> {\n     a"}, {"sha": "07f825aea50702b05abb00be7a1be8aebd28812e", "filename": "src/test/ui/type-alias-impl-trait/implied_lifetime_wf_check3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_lifetime_wf_check3.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,7 +1,7 @@\n #![feature(type_alias_impl_trait)]\n \n mod test_lifetime_param {\n-    type Ty<'a> = impl Sized;\n+    type Ty<'a> = impl Sized + 'a;\n     fn defining(a: &str) -> Ty<'_> { a }\n     fn assert_static<'a: 'static>() {}\n     //~^ WARN: unnecessary lifetime parameter `'a`\n@@ -10,7 +10,7 @@ mod test_lifetime_param {\n }\n \n mod test_higher_kinded_lifetime_param {\n-    type Ty<'a> = impl Sized;\n+    type Ty<'a> = impl Sized + 'a;\n     fn defining(a: &str) -> Ty<'_> { a }\n     fn assert_static<'a: 'static>() {}\n     //~^ WARN: unnecessary lifetime parameter `'a`"}, {"sha": "058417bdb804885471960e401722d9c845bbb20f", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -4,7 +4,7 @@\n \n use std::future::Future;\n \n-type G<'a, T> = impl Future<Output = ()>;\n+type G<'a, T> = impl Future<Output = ()> + 'a;\n \n trait Trait {\n     type F: Future<Output = ()>;"}, {"sha": "3b95a575ac22d6179ab068b5e5d231a3fa03e04b", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -6,7 +6,7 @@ LL |         async move { self.f().await }\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type G<'a, T: Trait> = impl Future<Output = ()>;\n+LL | type G<'a, T: Trait> = impl Future<Output = ()> + 'a;\n    |             +++++++\n \n error: aborting due to previous error"}, {"sha": "428194058c34d65cd96833ae7b5af559a58b91ef", "filename": "src/test/ui/type-alias-impl-trait/missing_lifetime_bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -0,0 +1,7 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque<'a, T> = impl Sized;\n+fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n+//~^ ERROR: non-defining opaque type use in defining scope\n+\n+fn main() {}"}, {"sha": "df2b3ed1911ed8d2253cafbfd84aa4ef9a255a78", "filename": "src/test/ui/type-alias-impl-trait/missing_lifetime_bound.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -0,0 +1,8 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/missing_lifetime_bound.rs:4:47\n+   |\n+LL | fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n+   |                                               ^ lifetime `'a` is part of concrete type but not used in parameter list of the `impl Trait` type alias\n+\n+error: aborting due to previous error\n+"}, {"sha": "65eb2952e0ff01e1cf6e0b2bf788a6abbc61c456", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,6 +1,10 @@\n #![feature(type_alias_impl_trait)]\n \n-type Foo<'a, 'b> = impl std::fmt::Debug;\n+pub trait Captures<'a> {}\n+\n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type Foo<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n \n fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n     (i, i) //~ ERROR concrete type differs from previous"}, {"sha": "d7676b8e9b1b12e7e788b4d55745ee8bd6085abb", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -1,5 +1,5 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:6:5\n+  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:10:5\n    |\n LL |     (i, i)\n    |     ^^^^^^"}, {"sha": "21fca047a3c92eeefec3dbdce30d8aad489e1bb3", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-pass.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2119c032bf403d0949f39362f3a26f5de09f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs?ref=1dc2119c032bf403d0949f39362f3a26f5de09f0", "patch": "@@ -7,7 +7,11 @@ fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>)\n     (a.clone(), a)\n }\n \n-type Foo<'a, 'b> = impl std::fmt::Debug;\n+pub trait Captures<'a> {}\n+\n+impl<'a, T: ?Sized> Captures<'a> for T {}\n+\n+type Foo<'a, 'b> = impl std::fmt::Debug + Captures<'a> + Captures<'b>;\n \n fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n     (i, j)"}]}