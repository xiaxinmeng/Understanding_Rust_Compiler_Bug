{"sha": "1f9036872d7ea8bee91f8588e3c4a613c58c76cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTAzNjg3MmQ3ZWE4YmVlOTFmODU4OGUzYzRhNjEzYzU4Yzc2Y2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-04T09:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T09:54:04Z"}, "message": "Rollup merge of #36938 - tmiasko:cursor-seek-overflow, r=alexcrichton\n\nCheck for overflow in Cursor<Vec<u8>>::write.\n\nEnsure that cursor position fits into usize, before proceeding with\nwrite. Fixes issue #36884.", "tree": {"sha": "6deb3afa67883bda0e890dfff47fc6d2805476ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6deb3afa67883bda0e890dfff47fc6d2805476ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9036872d7ea8bee91f8588e3c4a613c58c76cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9036872d7ea8bee91f8588e3c4a613c58c76cb", "html_url": "https://github.com/rust-lang/rust/commit/1f9036872d7ea8bee91f8588e3c4a613c58c76cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9036872d7ea8bee91f8588e3c4a613c58c76cb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e412a1e50c687150700142e184ce26d85de464", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e412a1e50c687150700142e184ce26d85de464", "html_url": "https://github.com/rust-lang/rust/commit/05e412a1e50c687150700142e184ce26d85de464"}, {"sha": "4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "html_url": "https://github.com/rust-lang/rust/commit/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "ae0085f1044e4bb683e37e49a67592d539013765", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f9036872d7ea8bee91f8588e3c4a613c58c76cb/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9036872d7ea8bee91f8588e3c4a613c58c76cb/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=1f9036872d7ea8bee91f8588e3c4a613c58c76cb", "patch": "@@ -10,6 +10,7 @@\n \n use io::prelude::*;\n \n+use core::convert::TryInto;\n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n \n@@ -242,26 +243,28 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Cursor<Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        let pos: usize = self.position().try_into().map_err(|_| {\n+            Error::new(ErrorKind::InvalidInput,\n+                       \"cursor position exceeds maximum possible vector length\")\n+        })?;\n         // Make sure the internal buffer is as least as big as where we\n         // currently are\n-        let pos = self.position();\n-        let amt = pos.saturating_sub(self.inner.len() as u64);\n-        // use `resize` so that the zero filling is as efficient as possible\n         let len = self.inner.len();\n-        self.inner.resize(len + amt as usize, 0);\n-\n+        if len < pos {\n+            // use `resize` so that the zero filling is as efficient as possible\n+            self.inner.resize(pos, 0);\n+        }\n         // Figure out what bytes will be used to overwrite what's currently\n         // there (left), and what will be appended on the end (right)\n         {\n-            let pos = pos as usize;\n             let space = self.inner.len() - pos;\n             let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n             self.inner[pos..pos + left.len()].copy_from_slice(left);\n             self.inner.extend_from_slice(right);\n         }\n \n         // Bump us forward\n-        self.set_position(pos + buf.len() as u64);\n+        self.set_position((pos + buf.len()) as u64);\n         Ok(buf.len())\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n@@ -580,4 +583,12 @@ mod tests {\n         let mut r = Cursor::new(Vec::new());\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n     }\n+\n+    #[test]\n+    #[cfg(target_pointer_width = \"32\")]\n+    fn vec_seek_and_write_past_usize_max() {\n+        let mut c = Cursor::new(Vec::new());\n+        c.set_position(<usize>::max_value() as u64 + 1);\n+        assert!(c.write_all(&[1, 2, 3]).is_err());\n+    }\n }"}]}