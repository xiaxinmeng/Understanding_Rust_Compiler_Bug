{"sha": "5d9ca00d94464c96c70ccb47027af6f858d7b975", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOWNhMDBkOTQ0NjRjOTZjNzBjY2I0NzAyN2FmNmY4NThkN2I5NzU=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-08-02T20:39:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-02T20:39:04Z"}, "message": "Merge pull request #2992 from etaoins/allow-pass-by-ref-on-adt-return\n\nAllow pass by ref when returning ADT with ref", "tree": {"sha": "419778fa46b3f5c458b7a8301d5ea14bb98eae6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419778fa46b3f5c458b7a8301d5ea14bb98eae6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9ca00d94464c96c70ccb47027af6f858d7b975", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbY2voCRBK7hj4Ov3rIwAAdHIIAImaPDkrJM9W2+70ZBolJ3As\n8LuHRFxvoZCbsXt2qmTJx2KJg4yeaNprV2KyMc0kgkqFSUKVUY7jJtqYKqj17/kQ\nLAVH78mWd6eoUz+q5fcNmgBC7m0/cbbz90TPH1u2nDFqJKLZwM8uQdvB7c1j3jjj\nlWPAyY8w5y3E32j7JFWYMqJA6tUGLzED/6HflB6NySvWblVBzNUPFn0DrQnbByID\nkCDN6uEeJgVay+W/As0JgYzFMm83vPweg8I26hMCVChjSMpUQMd3BB+D7+VOA+2I\n4Wto5rz8w/ImEe6PK+uNTDwcSZoLnRKCe1khcaoc+vHJo6yqTn9+EGZJUlLlVZ8=\n=Cbs7\n-----END PGP SIGNATURE-----\n", "payload": "tree 419778fa46b3f5c458b7a8301d5ea14bb98eae6d\nparent 40349b23ea1730f9a5ef4056edf4854908073a48\nparent 08d6b3d2f60e30eafafc4886202cd8221187cc98\nauthor Philipp Krones <uwdkn@student.kit.edu> 1533242344 +0200\ncommitter GitHub <noreply@github.com> 1533242344 +0200\n\nMerge pull request #2992 from etaoins/allow-pass-by-ref-on-adt-return\n\nAllow pass by ref when returning ADT with ref"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9ca00d94464c96c70ccb47027af6f858d7b975", "html_url": "https://github.com/rust-lang/rust/commit/5d9ca00d94464c96c70ccb47027af6f858d7b975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9ca00d94464c96c70ccb47027af6f858d7b975/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40349b23ea1730f9a5ef4056edf4854908073a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/40349b23ea1730f9a5ef4056edf4854908073a48", "html_url": "https://github.com/rust-lang/rust/commit/40349b23ea1730f9a5ef4056edf4854908073a48"}, {"sha": "08d6b3d2f60e30eafafc4886202cd8221187cc98", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d6b3d2f60e30eafafc4886202cd8221187cc98", "html_url": "https://github.com/rust-lang/rust/commit/08d6b3d2f60e30eafafc4886202cd8221187cc98"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "a01a1c5ae31bd241267bf942497ef21d5ee74a88", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d9ca00d94464c96c70ccb47027af6f858d7b975/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9ca00d94464c96c70ccb47027af6f858d7b975/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=5d9ca00d94464c96c70ccb47027af6f858d7b975", "patch": "@@ -124,10 +124,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         // Use lifetimes to determine if we're returning a reference to the\n         // argument. In that case we can't switch to pass-by-value as the\n         // argument will not live long enough.\n-        let output_lt = if let TypeVariants::TyRef(output_lt, _, _) = fn_sig.output().sty {\n-            Some(output_lt)\n-        } else {\n-            None\n+        let output_lts = match fn_sig.output().sty {\n+            TypeVariants::TyRef(output_lt, _, _) => vec![output_lt],\n+            TypeVariants::TyAdt(_, substs) => substs.regions().collect(),\n+            _ => vec![],\n         };\n \n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n@@ -138,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n \n             if_chain! {\n                 if let TypeVariants::TyRef(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n-                if Some(input_lt) != output_lt;\n+                if !output_lts.contains(&input_lt);\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n                 if size <= self.limit;"}, {"sha": "9b905e8d62888ebe60b4eaffe67a5c29df98df06", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d9ca00d94464c96c70ccb47027af6f858d7b975/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9ca00d94464c96c70ccb47027af6f858d7b975/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=5d9ca00d94464c96c70ccb47027af6f858d7b975", "patch": "@@ -6,6 +6,10 @@ struct Foo(u32);\n #[derive(Copy, Clone)]\n struct Bar([u8; 24]);\n \n+struct FooRef<'a> {\n+    foo: &'a Foo,\n+}\n+\n type Baz = u32;\n \n fn good(a: &mut u32, b: u32, c: &Bar) {\n@@ -20,6 +24,19 @@ fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n     &foo.0\n }\n \n+fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {\n+    FooRef {\n+        foo,\n+    }\n+}\n+\n+#[allow(needless_lifetimes)]\n+fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {\n+    FooRef {\n+        foo,\n+    }\n+}\n+\n fn bad(x: &u32, y: &Foo, z: &Baz) {\n }\n "}, {"sha": "757b6b4c9a98e2838a94168f26772b575c82a327", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5d9ca00d94464c96c70ccb47027af6f858d7b975/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d9ca00d94464c96c70ccb47027af6f858d7b975/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=5d9ca00d94464c96c70ccb47027af6f858d7b975", "patch": "@@ -1,81 +1,81 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:11\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:20\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:23:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:40:29\n    |\n-23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+40 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:12\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:22\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:31\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:33:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:40\n    |\n-33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:16\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:25\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:36:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:53:34\n    |\n-36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+53 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:16\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:25\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:34\n    |\n-50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: aborting due to 13 previous errors"}]}