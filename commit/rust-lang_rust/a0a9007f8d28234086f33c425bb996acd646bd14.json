{"sha": "a0a9007f8d28234086f33c425bb996acd646bd14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYTkwMDdmOGQyODIzNDA4NmYzM2M0MjViYjk5NmFjZDY0NmJkMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-25T00:26:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-25T00:26:17Z"}, "message": "Auto merge of #47006 - bitshifter:stabilize-repr-align, r=eddyb\n\nStabilized `#[repr(align(x))]` attribute (RFC 1358)\n\nStabilzed `#[repr(align(x))]` with attr_literal syntax as proposed by @eddyb https://github.com/rust-lang/rust/issues/33626#issuecomment-348467804", "tree": {"sha": "59ea2149cf3162489b534869f2030d97000f1cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ea2149cf3162489b534869f2030d97000f1cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0a9007f8d28234086f33c425bb996acd646bd14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a9007f8d28234086f33c425bb996acd646bd14", "html_url": "https://github.com/rust-lang/rust/commit/a0a9007f8d28234086f33c425bb996acd646bd14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0a9007f8d28234086f33c425bb996acd646bd14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0dcecff90c45ad5d4eb60859e22bb3f1b03842a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a", "html_url": "https://github.com/rust-lang/rust/commit/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a"}, {"sha": "651ea8ea44d8ac8a02dc357412eb73f830057cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/651ea8ea44d8ac8a02dc357412eb73f830057cae", "html_url": "https://github.com/rust-lang/rust/commit/651ea8ea44d8ac8a02dc357412eb73f830057cae"}], "stats": {"total": 85, "additions": 20, "deletions": 65}, "files": [{"sha": "427a7adcbded15a0895eebdce3474992899765a5", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -23,7 +23,6 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n-#![feature(repr_align)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n #![feature(str_escape)]"}, {"sha": "a8049e676b3bb6a00f39823c7691bff3dfc23e0a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -296,7 +296,6 @@\n #![feature(ptr_internals)]\n #![feature(rand)]\n #![feature(raw)]\n-#![feature(repr_align)]\n #![feature(rustc_attrs)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n@@ -323,6 +322,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n+#![cfg_attr(stage0, feature(repr_align))]\n \n #![default_lib_allocator]\n "}, {"sha": "5a7b53153fd6139ba2672503a61d39067ff57b7f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -343,9 +343,6 @@ declare_features! (\n     // Allows the `catch {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436)),\n \n-    // Allows `repr(align(u16))` struct attribute (RFC 1358)\n-    (active, repr_align, \"1.17.0\", Some(33626)),\n-\n     // Used to preserve symbols (see llvm.used)\n     (active, used, \"1.18.0\", Some(40289)),\n \n@@ -546,6 +543,8 @@ declare_features! (\n     // Allows the sysV64 ABI to be specified on all platforms\n     // instead of just the platforms on which it is the C ABI\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167)),\n+    // Allows `repr(align(16))` struct attribute (RFC 1358)\n+    (accepted, repr_align, \"1.24.0\", Some(33626)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1456,15 +1455,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n+        // allow attr_literals in #[repr(align(x))]\n+        let mut is_repr_align = false;\n+        if attr.path == \"repr\" {\n+            if let Some(content) = attr.meta_item_list() {\n+                is_repr_align = content.iter().any(|c| c.check_name(\"align\"));\n+            }\n+        }\n+\n         if self.context.features.proc_macro && attr::is_known(attr) {\n             return\n         }\n \n-        let meta = panictry!(attr.parse_meta(self.context.parse_sess));\n-        if contains_novel_literal(&meta) {\n-            gate_feature_post!(&self, attr_literals, attr.span,\n-                               \"non-string literals in attributes, or string \\\n-                               literals in top-level positions, are experimental\");\n+        if !is_repr_align {\n+            let meta = panictry!(attr.parse_meta(self.context.parse_sess));\n+            if contains_novel_literal(&meta) {\n+                gate_feature_post!(&self, attr_literals, attr.span,\n+                                   \"non-string literals in attributes, or string \\\n+                                   literals in top-level positions, are experimental\");\n+            }\n         }\n     }\n \n@@ -1522,11 +1531,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                             gate_feature_post!(&self, repr_simd, attr.span,\n                                                \"SIMD types are experimental and possibly buggy\");\n                         }\n-                        if item.check_name(\"align\") {\n-                            gate_feature_post!(&self, repr_align, attr.span,\n-                                               \"the struct `#[repr(align(u16))]` attribute \\\n-                                                is experimental\");\n-                        }\n                         if item.check_name(\"transparent\") {\n                             gate_feature_post!(&self, repr_transparent, attr.span,\n                                                \"the `#[repr(transparent)]` attribute \\"}, {"sha": "155319cb1541f38628543711c89e2092965bc925", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -13,9 +13,6 @@\n \n #![crate_type = \"lib\"]\n \n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n-\n #[repr(align(64))]\n pub struct Align64(i32);\n // CHECK: %Align64 = type { [0 x i32], i32, [15 x i32] }"}, {"sha": "8acc8b7bb1e5c8db1d51facb18f308cd47d00df6", "filename": "src/test/compile-fail/conflicting-repr-hints.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n \n #[repr(C)]\n enum A { A }"}, {"sha": "7c8eb6a2de93aaf71d26e30076906020769cd9a6", "filename": "src/test/compile-fail/repr-align.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-align.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(dead_code)]\n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n \n #[repr(align(16.0))] //~ ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n struct A(i32);"}, {"sha": "27890333a51656220750071157f8e23ea6d28496", "filename": "src/test/compile-fail/repr-packed-contains-align.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n #![feature(untagged_unions)]\n #![allow(dead_code)]\n "}, {"sha": "dea8462705f280d73a49d5fabbc160500bb5a84f", "filename": "src/test/run-pass/align-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Frun-pass%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Frun-pass%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-struct.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n #![feature(box_syntax)]\n \n use std::mem;"}, {"sha": "54e4e12d24fa52676ae56ddd2ade4b1992012fe5", "filename": "src/test/run-pass/union/union-align.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-align.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n #![feature(untagged_unions)]\n \n use std::mem::{size_of, size_of_val, align_of, align_of_val};"}, {"sha": "9591d367a2d191ef99a2e92476c602dc28184a10", "filename": "src/test/ui/feature-gate-repr_align.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs?ref=a0dcecff90c45ad5d4eb60859e22bb3f1b03842a", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![feature(attr_literals)]\n-\n-#[repr(align(64))] //~ error: the struct `#[repr(align(u16))]` attribute is experimental\n-struct Foo(u64, u64);\n-\n-fn main() {}"}, {"sha": "dd88067d58f9a940cdb5582c053210f7fbafac48", "filename": "src/test/ui/feature-gate-repr_align.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0dcecff90c45ad5d4eb60859e22bb3f1b03842a/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr?ref=a0dcecff90c45ad5d4eb60859e22bb3f1b03842a", "patch": "@@ -1,10 +0,0 @@\n-error[E0658]: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n-  --> $DIR/feature-gate-repr_align.rs:12:1\n-   |\n-12 | #[repr(align(64))] //~ error: the struct `#[repr(align(u16))]` attribute is experimental\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(repr_align)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "92928bba1c3aca9e9820cc3db26f278da6786ac6", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -18,8 +18,6 @@\n // It avoids using u64/i64 because on some targets that is only 4-byte\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n-#![feature(attr_literals)]\n-#![feature(repr_align)]\n #![feature(start)]\n #![allow(dead_code)]\n "}, {"sha": "83a4c5d5dd2ff4fc980291062d5360a6ae530657", "filename": "src/test/ui/span/gated-features-attr-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(attr_literals)]\n \n-#[repr(align(16))] //~ ERROR is experimental\n+#[repr(align(16))]\n struct Gem {\n     mohs_hardness: u8,\n     poofed: bool,"}, {"sha": "f15c4a72c5a6b9cdf7f45c481b0b4f034396e0c9", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9007f8d28234086f33c425bb996acd646bd14/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=a0a9007f8d28234086f33c425bb996acd646bd14", "patch": "@@ -1,11 +1,3 @@\n-error[E0658]: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n-  --> $DIR/gated-features-attr-spans.rs:13:1\n-   |\n-13 | #[repr(align(16))] //~ ERROR is experimental\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(repr_align)] to the crate attributes to enable\n-\n error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n   --> $DIR/gated-features-attr-spans.rs:20:1\n    |\n@@ -30,5 +22,5 @@ warning: `#[must_use]` on functions is experimental (see issue #43302)\n    |\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}