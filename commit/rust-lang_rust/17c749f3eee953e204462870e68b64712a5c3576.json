{"sha": "17c749f3eee953e204462870e68b64712a5c3576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Yzc0OWYzZWVlOTUzZTIwNDQ2Mjg3MGU2OGI2NDcxMmE1YzM1NzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-05T21:57:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:23Z"}, "message": "Fix tidy warnings", "tree": {"sha": "8d8646f6ab4e25b1ee09359c936a18f27e9d376a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8646f6ab4e25b1ee09359c936a18f27e9d376a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17c749f3eee953e204462870e68b64712a5c3576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17c749f3eee953e204462870e68b64712a5c3576", "html_url": "https://github.com/rust-lang/rust/commit/17c749f3eee953e204462870e68b64712a5c3576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17c749f3eee953e204462870e68b64712a5c3576/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d861982ca6a1fa5773373362771aa08b9f732de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d861982ca6a1fa5773373362771aa08b9f732de0", "html_url": "https://github.com/rust-lang/rust/commit/d861982ca6a1fa5773373362771aa08b9f732de0"}], "stats": {"total": 197, "additions": 122, "deletions": 75}, "files": [{"sha": "2a88c842a8f736c9e07487308c17b9c4aef97a79", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -33,6 +33,6 @@ pub trait Generator<Arg = ()> {\n     /// The type of value this generator returns.\n     type Return;\n \n-    /// This resumes the execution of the generator. \n+    /// This resumes the execution of the generator.\n     fn resume(&mut self, arg: Arg) -> State<Self::Yield, Self::Return>;\n }"}, {"sha": "8b092ff727ebf046c38085e7da3a9f1b22a73c8e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -2109,7 +2109,7 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::ImplArg => {\n                 hir::ExprImplArg(self.impl_arg_id())\n             }\n-            \n+\n             // Desugar ExprIfLet\n             // From: `if let <pat> = <sub_expr> <body> [<else_opt>]`\n             ExprKind::IfLet(ref pat, ref sub_expr, ref body, ref else_opt) => {"}, {"sha": "272e442cfcd297af8f52ac9690ebea7609211206", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -1317,7 +1317,7 @@ impl<'a> State<'a> {\n                     self.head(\"gen\")?;\n                     space(&mut self.s)?;\n                 }\n-                \n+\n                 self.print_capture_clause(capture_clause)?;\n \n                 self.print_closure_args(&decl, body)?;"}, {"sha": "3fa13d7ab9efe119274158e8605a01ff36fcf7ee", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -146,7 +146,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         if local_visitor.found_impl_arg {\n-            labels.push((DUMMY_SP, format!(\"consider giving a type to the implicit generator argument\")));\n+            labels.push((DUMMY_SP, format!(\"consider giving a type to the \\\n+                                            implicit generator argument\")));\n         }\n \n         let mut err = struct_span_err!(self.tcx.sess,"}, {"sha": "2d0269e5845fae5496a980d8f46963d877a90f42", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -1075,7 +1075,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n         if let Some(ref impl_arg) = body.impl_arg {\n             record_var_lifetime(self, impl_arg.id, impl_arg.span);\n         }\n-        \n+\n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n         self.visit_expr(&body.value);\n@@ -1161,12 +1161,13 @@ impl<'tcx> Visitor<'tcx> for YieldFinder {\n         if let hir::ExprSuspend(..) = expr.node {\n             self.0 = true;\n         }\n-        \n+\n         intravisit::walk_expr(self, expr);\n     }\n }\n \n-pub fn extent_has_yield<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(tcx: TyCtxt<'a, 'gcx, 'tcx>, extent: CodeExtent) -> bool {\n+pub fn extent_has_yield<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                                     extent: CodeExtent) -> bool {\n     let mut finder = YieldFinder(false);\n \n     match extent {\n@@ -1181,7 +1182,7 @@ pub fn extent_has_yield<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(tcx: TyCtxt<'a, 'gcx, 'tcx>\n                 }\n                 Node::NodeExpr(expr) => intravisit::walk_expr(&mut finder, expr),\n                 Node::NodeStmt(stmt) => intravisit::walk_stmt(&mut finder, stmt),\n-                Node::NodeBlock(block) => intravisit::walk_block(&mut finder, block), \n+                Node::NodeBlock(block) => intravisit::walk_block(&mut finder, block),\n                 _ => bug!(),\n             }\n         }"}, {"sha": "9bfd7f175c275afb739a0e012da894868834e0ae", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -1355,7 +1355,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                 }\n                                 struct_fmt.field(\"$state\", &lvs[freevars.len()]);\n                                 for i in (freevars.len() + 1)..lvs.len() {\n-                                    struct_fmt.field(&format!(\"${}\", i - freevars.len() - 1), &lvs[i]);\n+                                    struct_fmt.field(&format!(\"${}\", i - freevars.len() - 1),\n+                                                     &lvs[i]);\n                                 }\n                             });\n "}, {"sha": "12588edbea9c0c22633e0f3e51b17be26c346728", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -204,7 +204,10 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                     AggregateKind::Generator(did, substs) => {\n                         let node_id = tcx.hir.as_local_node_id(did).unwrap();\n-                        let interior = *tcx.typeck_tables_of(did).generator_interiors.get(&node_id).unwrap();\n+                        let interior = *tcx.typeck_tables_of(did)\n+                            .generator_interiors\n+                            .get(&node_id)\n+                            .unwrap();\n                         tcx.mk_generator(did, substs, interior.subst(tcx, substs.substs))\n                     }\n                 }"}, {"sha": "bd162c090f75b11fb3f05ed35bded3c7a2156f13", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -399,7 +399,7 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     TerminatorKind::Resume |\n-                    TerminatorKind::Return | \n+                    TerminatorKind::Return |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable => {\n                     }"}, {"sha": "887edc5036490ffb2561222fb58df34249a5184c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -2583,7 +2583,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             value: trait_ref,\n             obligations\n         } = self.generator_trait_ref(obligation, closure_def_id, substs);\n-        \n+\n         debug!(\"confirm_generator_candidate(closure_def_id={:?}, trait_ref={:?}, obligations={:?})\",\n                closure_def_id,\n                trait_ref,"}, {"sha": "dd3c0d66a9cc24951f4ce1673795081ecf2d89f5", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n         ty::Binder((trait_ref, sig.skip_binder().suspend_ty, sig.skip_binder().return_ty))\n     }\n-    \n+\n     pub fn impl_is_default(self, node_item_def_id: DefId) -> bool {\n         match self.hir.as_local_node_id(node_item_def_id) {\n             Some(node_id) => {"}, {"sha": "5e9caab60c11ee2f00ed0e3f1a0fd42fe29ea17f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -1401,7 +1401,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TyClosure(closure_id, closure_substs))\n     }\n \n-    pub fn mk_generator(self, \n+    pub fn mk_generator(self,\n                         id: DefId,\n                         closure_substs: ClosureSubsts<'tcx>,\n                         interior: GeneratorInterior<'tcx>)"}, {"sha": "2a9480ab06ab29be73a2e55513befa17b3e1d5dc", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -541,7 +541,9 @@ macro_rules! define_maps {\n         impl<$tcx> Query<$tcx> {\n             pub fn describe(&self, tcx: TyCtxt) -> String {\n                 let (r, name) = match *self {\n-                    $(Query::$name(key) => (queries::$name::describe(tcx, key), stringify!($name))),*\n+                    $(Query::$name(key) => {\n+                        (queries::$name::describe(tcx, key), stringify!($name))\n+                    })*\n                 };\n                 if tcx.sess.verbose() {\n                     format!(\"{} [{}]\", r, name)"}, {"sha": "25552889620763ac0e5b48bb75c3396f9d303e09", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -304,13 +304,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.impl_arg_ty, self.suspend_ty, self.return_ty)).map(|(impl_arg_ty, suspend_ty, return_ty)| {\n-            ty::GenSig {\n-                impl_arg_ty,\n-                suspend_ty,\n-                return_ty,\n-            }\n-        })\n+        tcx.lift(&(self.impl_arg_ty, self.suspend_ty, self.return_ty))\n+            .map(|(impl_arg_ty, suspend_ty, return_ty)| {\n+                ty::GenSig {\n+                    impl_arg_ty,\n+                    suspend_ty,\n+                    return_ty,\n+                }\n+            })\n     }\n }\n \n@@ -572,7 +573,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyRef(ref r, tm) => {\n                 ty::TyRef(r.fold_with(folder), tm.fold_with(folder))\n             }\n-            ty::TyGenerator(did, substs, interior) => ty::TyGenerator(did, substs.fold_with(folder), interior.fold_with(folder)),\n+            ty::TyGenerator(did, substs, interior) => {\n+                ty::TyGenerator(did, substs.fold_with(folder), interior.fold_with(folder))\n+            }\n             ty::TyClosure(did, substs) => ty::TyClosure(did, substs.fold_with(folder)),\n             ty::TyProjection(ref data) => ty::TyProjection(data.fold_with(folder)),\n             ty::TyAnon(did, substs) => ty::TyAnon(did, substs.fold_with(folder)),\n@@ -604,7 +607,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyFnDef(_, substs) => substs.visit_with(visitor),\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n-            ty::TyGenerator(_did, ref substs, ref interior) => substs.visit_with(visitor) || interior.visit_with(visitor),\n+            ty::TyGenerator(_did, ref substs, ref interior) => {\n+                substs.visit_with(visitor) || interior.visit_with(visitor)\n+            }\n             ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),\n             ty::TyProjection(ref data) => data.visit_with(visitor),\n             ty::TyAnon(_, ref substs) => substs.visit_with(visitor),"}, {"sha": "cd0b19980957ad98a863b176a3f0c87247644775", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n              },\n              _ => false,\n          };\n- \n+\n          if borrows_impl_arg {\n              span_err!(self.bccx.tcx.sess,\n                 borrow_span,"}, {"sha": "c0bf46dd0fa7c6848346f4596966c03fc3f0015d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -118,14 +118,14 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     });\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n-            \n+\n             let (suspend_ty, impl_arg_ty, return_ty) = if body.is_generator() {\n                 let gen_sig = cx.tables().generator_sigs[&id].clone().unwrap();\n                 (Some(gen_sig.suspend_ty), Some(gen_sig.impl_arg_ty), gen_sig.return_ty)\n             } else {\n                 (None, None, fn_sig.output())\n             };\n-            \n+\n             build::construct_fn(cx, id, arguments, abi, return_ty, suspend_ty, impl_arg_ty, body)\n         } else {\n             build::construct_const(cx, body_id)"}, {"sha": "296d7c19e0e4a3293200d41b5187cde8b8d900f8", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -502,7 +502,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                               block,\n                                               self.arg_count,\n                                               true));\n-            \n+\n             // End all regions for scopes out of which we are breaking.\n             self.cfg.push_end_region(block, src_info, scope.extent);\n \n@@ -513,7 +513,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block = next;\n             }\n         }\n-        \n+\n         self.cfg.terminate(block, src_info, TerminatorKind::GeneratorDrop);\n \n         Some(result)\n@@ -778,7 +778,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in scopes.iter_mut() {\n-            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target, generator_drop);\n+            target = build_diverge_scope(hir.tcx(),\n+                                         cfg,\n+                                         &unit_temp,\n+                                         span,\n+                                         scope,\n+                                         target,\n+                                         generator_drop);\n         }\n         Some(target)\n     }\n@@ -858,7 +864,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            arg_count: usize,\n                            generator_drop: bool)\n                            -> BlockAnd<()> {\n-    \n+\n     let mut iter = scope.drops(generator_drop).iter().rev().peekable();\n     while let Some(drop_data) = iter.next() {\n         let source_info = scope.source_info(drop_data.span);"}, {"sha": "5e33eb95d403f87c681f2506036be71c4fe9ae57", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -327,7 +327,8 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    // The implicit argument is defined after each suspend point so it can never be live in a suspend point.\n+    // The implicit argument is defined after each suspend point so it can never\n+    // be live in a suspend point.\n     set.remove(&Local::new(2));\n \n     // The generator argument is ignored\n@@ -340,7 +341,9 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             def_id: DefId,\n                             source: MirSource,\n                             interior: GeneratorInterior<'tcx>,\n-                            mir: &mut Mir<'tcx>) -> (HashMap<Local, (Ty<'tcx>, usize)>, GeneratorLayout<'tcx>) {\n+                            mir: &mut Mir<'tcx>)\n+    -> (HashMap<Local, (Ty<'tcx>, usize)>, GeneratorLayout<'tcx>)\n+{\n     let source_info = SourceInfo {\n         span: mir.span,\n         scope: ARGUMENT_VISIBILITY_SCOPE,\n@@ -349,7 +352,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut live_locals = locals_live_across_suspend_points(tcx, mir, source);\n \n     let allowed = tcx.erase_regions(&interior.as_slice());\n-    \n+\n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         if !live_locals.contains(&local) {\n             continue;\n@@ -363,7 +366,10 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let upvar_len = mir.upvar_decls.len();\n-    let live_decls : Vec<_> = mir.local_decls.iter_enumerated_mut().filter(|&(local, _)| live_locals.contains(&local)).collect();\n+    let live_decls : Vec<_> = mir.local_decls\n+        .iter_enumerated_mut()\n+        .filter(|&(local, _)| live_locals.contains(&local))\n+        .collect();\n \n     let mut remap = HashMap::new();\n     let unit = tcx.mk_nil();\n@@ -383,7 +389,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let layout = GeneratorLayout {\n         fields: vars\n     };\n-    \n+\n     (remap, layout)\n }\n \n@@ -421,7 +427,7 @@ fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => continue,\n         };\n         let unwind = if let Some(unwind) = unwind {\n-            Unwind::To(unwind) \n+            Unwind::To(unwind)\n         } else {\n             Unwind::InCleanup\n         };\n@@ -503,7 +509,7 @@ fn generate_drop<'a, 'tcx>(\n     // Remove the implicit argument\n     mir.arg_count = 1;\n     mir.local_decls.raw.pop();\n-    \n+\n     // Replace the return variable\n     let source_info = SourceInfo {\n         span: mir.span,\n@@ -524,7 +530,7 @@ fn generate_drop<'a, 'tcx>(\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut {\n             ty: gen_ty,\n-            mutbl: hir::Mutability::MutMutable, \n+            mutbl: hir::Mutability::MutMutable,\n         }),\n         name: None,\n         source_info,\n@@ -650,7 +656,10 @@ fn generate_resume<'a, 'tcx>(\n         values: Cow::from(transform.bb_targets.values().map(|&i| {\n                 ConstInt::U32(i)\n             }).collect::<Vec<_>>()),\n-        targets: transform.bb_targets.keys().map(|&(k, _)| k).chain(once(transform.return_block)).collect(),\n+        targets: transform.bb_targets.keys()\n+            .map(|&(k, _)| k)\n+            .chain(once(transform.return_block))\n+            .collect(),\n     };\n \n     insert_entry_point(mir, BasicBlockData {\n@@ -661,7 +670,7 @@ fn generate_resume<'a, 'tcx>(\n         }),\n         is_cleanup: false,\n     });\n-    \n+\n     // Make sure we remove dead blocks to remove\n     // unrelated code from the drop part of the function\n     simplify::remove_dead_blocks(mir);"}, {"sha": "b196d8aca1f4d7aa2d9ffd2a93fabbb64cf521ac", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -34,7 +34,10 @@ fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n         mirbug($context.tcx(), $context.last_span,\n-               &format!(\"broken MIR in {:?} ({:?}): {}\", $context.body_id, $elem, format!($($message)*)))\n+               &format!(\"broken MIR in {:?} ({:?}): {}\",\n+                        $context.body_id,\n+                        $elem,\n+                        format_args!($($message)*)))\n     })\n }\n "}, {"sha": "79293cfde251fdf1f995be16226d0260945950aa", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -10,7 +10,8 @@\n \n //! Liveness analysis.\n \n-// FIXME: Make sure this analysis uses proper MIR semantics. Also find out what the MIR semantics are.\n+// FIXME: Make sure this analysis uses proper MIR semantics. Also find out what\n+//        the MIR semantics are.\n \n use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n@@ -188,7 +189,10 @@ pub fn write_mir_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n         let print = |w: &mut Write, prefix, result: &IndexVec<BasicBlock, LocalSet>| {\n-            let live: Vec<String> = mir.local_decls.indices().filter(|i| result[block].contains(i)).map(|i| format!(\"{:?}\", i)).collect();\n+            let live: Vec<String> = mir.local_decls.indices()\n+                .filter(|i| result[block].contains(i))\n+                .map(|i| format!(\"{:?}\", i))\n+                .collect();\n             writeln!(w, \"{} {{{}}}\", prefix, live.join(\", \"))\n         };\n         print(w, \"   \", &result.ins)?;"}, {"sha": "cc7df7acb499fd94b9831bf9f94092bd44f320aa", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -171,8 +171,12 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(match *msg {\n             AssertMessage::BoundsCheck { .. } => \"AssertMessage::BoundsCheck\",\n             AssertMessage::Math(..) => \"AssertMessage::Math\",\n-            AssertMessage::GeneratorResumedAfterReturn => \"AssertMessage::GeneratorResumedAfterReturn\",\n-            AssertMessage::GeneratorResumedAfterPanic => \"AssertMessage::GeneratorResumedAfterPanic\",\n+            AssertMessage::GeneratorResumedAfterReturn => {\n+                \"AssertMessage::GeneratorResumedAfterReturn\"\n+            }\n+            AssertMessage::GeneratorResumedAfterPanic => {\n+                \"AssertMessage::GeneratorResumedAfterPanic\"\n+            }\n         }, msg);\n         self.super_assert_message(msg, location);\n     }"}, {"sha": "b938dc66e3c08c183fb77ea9eb050db7884a9e55", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                 ErrKind::Math(err.clone())\n                             }\n                             mir::AssertMessage::GeneratorResumedAfterReturn |\n-                            mir::AssertMessage::GeneratorResumedAfterPanic => \n+                            mir::AssertMessage::GeneratorResumedAfterPanic =>\n                                 span_bug!(span, \"{:?} should not appear in constants?\", msg),\n                         };\n "}, {"sha": "3c38619cf5dd4f069c1a8f5f3b5e1ab2195e7bc5", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -528,7 +528,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                 ty::TyRef(_, mt) | ty::TyRawPtr(mt) => (mt.ty, true),\n                 _ => (arg_ty, false)\n             };\n-            \n+\n             let upvar_tys = match closure_ty.sty {\n                 ty::TyClosure(def_id, substs) |\n                 ty::TyGenerator(def_id, substs, _) => substs.upvar_tys(def_id, tcx),"}, {"sha": "ae64db88d8c5fa1bfec98442fa5f1b92cd153f3f", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                expr,\n                expected);\n         // FIXME: See if expected_kind here can impact generators\n-        \n+\n         // It's always helpful for inference if we know the kind of\n         // closure sooner rather than later, so first examine the expected\n         // type, and see if can glean a closure kind from there."}, {"sha": "44bd2c26b372322b5e1639e978ab621ce0306485", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -31,10 +31,13 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n             if self.fcx.tcx.sess.verbose() {\n                 if let Some(s) = scope {\n                     self.fcx.tcx.sess.span_warn(s.span(&self.fcx.tcx.hir).unwrap_or(DUMMY_SP),\n-                        &format!(\"type in generator with scope = {:?}, type = {:?}\", scope, self.fcx.resolve_type_vars_if_possible(&ty)));\n+                        &format!(\"type in generator with scope = {:?}, type = {:?}\",\n+                                 scope,\n+                                 self.fcx.resolve_type_vars_if_possible(&ty)));\n                 } else {\n                     self.fcx.tcx.sess.span_warn(DUMMY_SP,\n-                        &format!(\"type in generator WITHOUT scope, type = {:?}\", self.fcx.resolve_type_vars_if_possible(&ty)));\n+                        &format!(\"type in generator WITHOUT scope, type = {:?}\",\n+                                 self.fcx.resolve_type_vars_if_possible(&ty)));\n                 }\n                 if let Some(e) = expr {\n                     self.fcx.tcx.sess.span_warn(e.span,\n@@ -51,7 +54,10 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub fn find_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>, def_id: DefId, body_id: hir::BodyId, witness: Ty<'tcx>) {\n+pub fn find_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n+                                     def_id: DefId,\n+                                     body_id: hir::BodyId,\n+                                     witness: Ty<'tcx>) {\n     let body = fcx.tcx.hir.body(body_id);\n     let mut visitor = InteriorVisitor {\n         fcx,\n@@ -64,7 +70,9 @@ pub fn find_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>, def_id: De\n     visitor.types.insert(fcx.tcx.types.bool);\n \n     // Deduplicate types\n-    let set: FxHashSet<_> = visitor.types.into_iter().map(|t| fcx.resolve_type_vars_if_possible(&t)).collect();\n+    let set: FxHashSet<_> = visitor.types.into_iter()\n+        .map(|t| fcx.resolve_type_vars_if_possible(&t))\n+        .collect();\n     let types: Vec<_> = set.into_iter().collect();\n \n     let tuple = fcx.tcx.intern_tup(&types, false);"}, {"sha": "cf8b1d9c8f268c94bb578313ec2770edd1934d3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -2567,7 +2567,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n                 let is_closure = match arg.node {\n-                    // TODO: Should this be applied for generators?\n+                    // FIXME: Should this be applied for generators?\n                     hir::ExprClosure(.., None) => true,\n                     _ => false\n                 };"}, {"sha": "fb1c9ea5a924679ff3c28131dfcb9bab01108e85", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -1159,7 +1159,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if gen.is_some() {\n                 return tcx.typeck_tables_of(def_id).node_id_to_type(node_id);\n             }\n-            \n+\n             tcx.mk_closure(def_id, Substs::for_item(\n                 tcx, def_id,\n                 |def, _| {"}, {"sha": "6b825a9d4012e0fa505ef2a9fc54094d6f5b26f8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -3714,7 +3714,7 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Gen) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Arg))\n     }\n-    \n+\n     fn is_defaultness(&self) -> bool {\n         // `pub` is included for better error messages\n         self.token.is_keyword(keywords::Default) &&"}, {"sha": "460db8e381996dfa718e0f85b2b0818894cb1c88", "filename": "src/test/compile-fail/generator/generator-not-fnmut.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fgenerator-not-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fgenerator-not-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fgenerator-not-fnmut.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -11,15 +11,15 @@\n #![feature(generators)]\n \n fn main() {\n-\tlet mut a = Vec::<bool>::new();\n+    let mut a = Vec::<bool>::new();\n \n-\tlet mut test = || {\n-\t\tlet _: () = gen arg;\n-\t\tyield 3;\n-\t\ta.push(true);\n-\t\t2\n-\t};\n+    let mut test = || {\n+        let _: () = gen arg;\n+        yield 3;\n+        a.push(true);\n+        2\n+    };\n \n-\tlet a1 = test();\n-\tlet a2 = test(); //~ ERROR use of moved value\n+    let a1 = test();\n+    let a2 = test(); //~ ERROR use of moved value\n }"}, {"sha": "52f82873d4c0c60d2745c08b3ad7a151430906ec", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17c749f3eee953e204462870e68b64712a5c3576/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c749f3eee953e204462870e68b64712a5c3576/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=17c749f3eee953e204462870e68b64712a5c3576", "patch": "@@ -26,19 +26,19 @@ impl<T: Generator<Return = ()>> Iterator for W<T> {\n }\n \n fn test() -> impl Generator<Return=(), Yield=u8> {\n-\tfor i in 1..6 {\n-\t\tyield i\n-\t}\n+    for i in 1..6 {\n+        yield i\n+    }\n }\n \n fn main() {\n-\tlet end = 11;\n+    let end = 11;\n \n-\tlet closure_test = |start| {\n-\t\tfor i in start..end {\n-\t\t\tyield i\n-\t\t}\n-\t};\n+    let closure_test = |start| {\n+        for i in start..end {\n+            yield i\n+        }\n+    };\n \n-\tassert!(W(test()).chain(W(closure_test(6))).eq(1..11));\n+    assert!(W(test()).chain(W(closure_test(6))).eq(1..11));\n }"}]}