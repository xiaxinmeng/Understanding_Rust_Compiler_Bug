{"sha": "756caf79e64598886551325dbf9ab7eccee03328", "node_id": "C_kwDOAAsO6NoAKDc1NmNhZjc5ZTY0NTk4ODg2NTUxMzI1ZGJmOWFiN2VjY2VlMDMzMjg", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-05-31T07:23:17Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-06-02T10:45:15Z"}, "message": "account for generics", "tree": {"sha": "c0b490c03e5e3709399db31aee173ce47845b54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b490c03e5e3709399db31aee173ce47845b54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756caf79e64598886551325dbf9ab7eccee03328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756caf79e64598886551325dbf9ab7eccee03328", "html_url": "https://github.com/rust-lang/rust/commit/756caf79e64598886551325dbf9ab7eccee03328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756caf79e64598886551325dbf9ab7eccee03328/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f94d52b336a8535c6df1670ed6eb56c08acb55", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f94d52b336a8535c6df1670ed6eb56c08acb55", "html_url": "https://github.com/rust-lang/rust/commit/19f94d52b336a8535c6df1670ed6eb56c08acb55"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "63ac092dfaf1230b0239da8f8dbdd89270673b2d", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/756caf79e64598886551325dbf9ab7eccee03328/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756caf79e64598886551325dbf9ab7eccee03328/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=756caf79e64598886551325dbf9ab7eccee03328", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::LayoutOf;\n+use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n@@ -26,6 +27,15 @@ declare_clippy_lint! {\n     /// the overhead is negligible and the boxing is counter-productive. Always\n     /// measure the change this lint suggests.\n     ///\n+    /// For types that implement `Copy`, the suggestion to `Box` a variant's\n+    /// data would require removing the trait impl. The types can of course\n+    /// still be `Clone`, but that is worse ergonomically. Depending on the\n+    /// use case it may be possible to store the large data in an auxillary\n+    /// structure (e.g. Arena or ECS).\n+    ///\n+    /// The lint will ignore generic types if the layout depends on the\n+    /// generics, even if the size difference will be large anyway.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// // Bad\n@@ -74,7 +84,7 @@ struct VariantInfo {\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &Item<'tcx>) {\n         if in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n@@ -132,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         let fields = def.variants[variants_size[0].ind].data.fields();\n                         variants_size[0].fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n                         let mut applicability = Applicability::MaybeIncorrect;\n-                        if is_copy(cx, ty) {\n+                        if is_copy(cx, ty) || maybe_copy(cx, ty) {\n                             diag.span_note(\n                                 item.ident.span,\n                                 \"boxing a variant would require the type no longer be `Copy`\",\n@@ -176,3 +186,13 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         }\n     }\n }\n+\n+fn maybe_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    if let Adt(_def, substs) = ty.kind()\n+        && substs.types().next().is_some()\n+        && let Some(copy_trait) = cx.tcx.lang_items().copy_trait()\n+    {\n+        return cx.tcx.non_blanket_impls_for_ty(copy_trait, ty).next().is_some();\n+    }\n+    false\n+}"}, {"sha": "23152a13322e82ab3b73d7bb4481db22cc1f9668", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/756caf79e64598886551325dbf9ab7eccee03328/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756caf79e64598886551325dbf9ab7eccee03328/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=756caf79e64598886551325dbf9ab7eccee03328", "patch": "@@ -114,8 +114,22 @@ impl Clone for ManuallyCopyLargeEnum {\n         *self\n     }\n }\n+\n impl Copy for ManuallyCopyLargeEnum {}\n \n+enum SomeGenericPossiblyCopyEnum<T> {\n+    A(bool, std::marker::PhantomData<T>),\n+    B([u64; 4000]),\n+}\n+\n+impl<T: Copy> Clone for SomeGenericPossiblyCopyEnum<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<T: Copy> Copy for SomeGenericPossiblyCopyEnum<T> {}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "0248327262da0f63852ecfa684f6b38c058670f7", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/756caf79e64598886551325dbf9ab7eccee03328/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/756caf79e64598886551325dbf9ab7eccee03328/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=756caf79e64598886551325dbf9ab7eccee03328", "patch": "@@ -171,5 +171,27 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     B([u128; 4000]),\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^ this variant is 32000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:121:5\n+   |\n+LL |     A(bool, std::marker::PhantomData<T>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:120:6\n+   |\n+LL | enum SomeGenericPossiblyCopyEnum<T> {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}]}