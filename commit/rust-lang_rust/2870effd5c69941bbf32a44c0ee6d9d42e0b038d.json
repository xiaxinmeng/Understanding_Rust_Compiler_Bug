{"sha": "2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzBlZmZkNWM2OTk0MWJiZjMyYTQ0YzBlZTZkOWQ0MmUwYjAzOGQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T16:17:39Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T19:36:06Z"}, "message": "Implement reference / pointer types\n\n - parse them\n - infer types of & and * expressions", "tree": {"sha": "bf2c5ff08e6f316c1d9d629ae3595e6f7c069e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2c5ff08e6f316c1d9d629ae3595e6f7c069e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "html_url": "https://github.com/rust-lang/rust/commit/2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96d3612390e070936a176571c946ad0cafa69a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96d3612390e070936a176571c946ad0cafa69a9", "html_url": "https://github.com/rust-lang/rust/commit/b96d3612390e070936a176571c946ad0cafa69a9"}], "stats": {"total": 196, "additions": 173, "deletions": 23}, "files": [{"sha": "54aa6715c8fbb469737f3219c576382447abb87a", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -11,7 +11,7 @@ use rustc_hash::{FxHashMap};\n use ra_db::{LocalSyntaxPtr, Cancelable};\n use ra_syntax::{\n     SmolStr,\n-    ast::{self, AstNode, LoopBodyOwner, ArgListOwner},\n+    ast::{self, AstNode, LoopBodyOwner, ArgListOwner, PrefixOp},\n     SyntaxNodeRef\n };\n \n@@ -21,6 +21,36 @@ use crate::{\n     adt::VariantData,\n };\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Mutability {\n+    Shared,\n+    Mut,\n+}\n+\n+impl Mutability {\n+    pub fn from_mutable(mutable: bool) -> Mutability {\n+        if mutable {\n+            Mutability::Mut\n+        } else {\n+            Mutability::Shared\n+        }\n+    }\n+\n+    pub fn as_keyword_for_ref(self) -> &'static str {\n+        match self {\n+            Mutability::Shared => \"\",\n+            Mutability::Mut => \"mut \",\n+        }\n+    }\n+\n+    pub fn as_keyword_for_ptr(self) -> &'static str {\n+        match self {\n+            Mutability::Shared => \"const \",\n+            Mutability::Mut => \"mut \",\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Ty {\n     /// The primitive boolean type. Written as `bool`.\n@@ -56,12 +86,13 @@ pub enum Ty {\n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(TyRef),\n \n-    // A raw pointer. Written as `*mut T` or `*const T`\n-    // RawPtr(TypeAndMut<'tcx>),\n+    /// A raw pointer. Written as `*mut T` or `*const T`\n+    RawPtr(TyRef, Mutability),\n+\n+    /// A reference; a pointer with an associated lifetime. Written as\n+    /// `&'a mut T` or `&'a T`.\n+    Ref(TyRef, Mutability),\n \n-    // A reference; a pointer with an associated lifetime. Written as\n-    // `&'a mut T` or `&'a T`.\n-    // Ref(Ty<'tcx>, hir::Mutability),\n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n     /// For example the type of `bar` here:\n@@ -172,7 +203,7 @@ impl Ty {\n     ) -> Cancelable<Self> {\n         use ra_syntax::ast::TypeRef::*;\n         Ok(match node {\n-            ParenType(_inner) => Ty::Unknown, // TODO\n+            ParenType(inner) => Ty::new_opt(db, module, inner.type_ref())?,\n             TupleType(_inner) => Ty::Unknown, // TODO\n             NeverType(..) => Ty::Never,\n             PathType(inner) => {\n@@ -182,10 +213,18 @@ impl Ty {\n                     Ty::Unknown\n                 }\n             }\n-            PointerType(_inner) => Ty::Unknown,     // TODO\n-            ArrayType(_inner) => Ty::Unknown,       // TODO\n-            SliceType(_inner) => Ty::Unknown,       // TODO\n-            ReferenceType(_inner) => Ty::Unknown,   // TODO\n+            PointerType(inner) => {\n+                let inner_ty = Ty::new_opt(db, module, inner.type_ref())?;\n+                let mutability = Mutability::from_mutable(inner.is_mut());\n+                Ty::RawPtr(Arc::new(inner_ty), mutability)\n+            }\n+            ArrayType(_inner) => Ty::Unknown, // TODO\n+            SliceType(_inner) => Ty::Unknown, // TODO\n+            ReferenceType(inner) => {\n+                let inner_ty = Ty::new_opt(db, module, inner.type_ref())?;\n+                let mutability = Mutability::from_mutable(inner.is_mut());\n+                Ty::Ref(Arc::new(inner_ty), mutability)\n+            }\n             PlaceholderType(_inner) => Ty::Unknown, // TODO\n             FnPointerType(_inner) => Ty::Unknown,   // TODO\n             ForType(_inner) => Ty::Unknown,         // TODO\n@@ -209,6 +248,8 @@ impl fmt::Display for Ty {\n             Ty::Float(t) => write!(f, \"{}\", t.ty_to_string()),\n             Ty::Str => write!(f, \"str\"),\n             Ty::Slice(t) => write!(f, \"[{}]\", t),\n+            Ty::RawPtr(t, m) => write!(f, \"*{}{}\", m.as_keyword_for_ptr(), t),\n+            Ty::Ref(t, m) => write!(f, \"&{}{}\", m.as_keyword_for_ref(), t),\n             Ty::Never => write!(f, \"!\"),\n             Ty::Tuple(ts) => {\n                 write!(f, \"(\")?;\n@@ -539,12 +580,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 cast_ty\n             }\n             ast::Expr::RefExpr(e) => {\n-                let _inner_ty = self.infer_expr_opt(e.expr())?;\n-                Ty::Unknown\n+                let inner_ty = self.infer_expr_opt(e.expr())?;\n+                let m = Mutability::from_mutable(e.is_mut());\n+                // TODO reference coercions etc.\n+                Ty::Ref(Arc::new(inner_ty), m)\n             }\n             ast::Expr::PrefixExpr(e) => {\n-                let _inner_ty = self.infer_expr_opt(e.expr())?;\n-                Ty::Unknown\n+                let inner_ty = self.infer_expr_opt(e.expr())?;\n+                match e.op() {\n+                    Some(PrefixOp::Deref) => {\n+                        match inner_ty {\n+                            // builtin deref:\n+                            Ty::Ref(ref_inner, _) => (*ref_inner).clone(),\n+                            Ty::RawPtr(ptr_inner, _) => (*ptr_inner).clone(),\n+                            // TODO Deref::deref\n+                            _ => Ty::Unknown,\n+                        }\n+                    }\n+                    _ => Ty::Unknown,\n+                }\n             }\n             ast::Expr::RangeExpr(_e) => Ty::Unknown,\n             ast::Expr::BinExpr(_e) => Ty::Unknown,"}, {"sha": "a76925b58ee130f27df0c6f011b23f5d71322fee", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -91,6 +91,28 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_refs_and_ptrs() {\n+    check_inference(\n+        r#\"\n+fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n+    a;\n+    *a;\n+    &a;\n+    &mut a;\n+    b;\n+    *b;\n+    &b;\n+    c;\n+    *c;\n+    d;\n+    *d;\n+}\n+\"#,\n+        \"0005_refs.txt\",\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.source_file(file_id);"}, {"sha": "212e92e0008a6b21573a3a9bcbc48c0733f52e80", "filename": "crates/ra_hir/src/ty/tests/data/0001_basics.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0001_basics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0001_basics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0001_basics.txt?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -1,4 +1,4 @@\n-[33; 34) 'd': [unknown]\n+[33; 34) 'd': &[unknown]\n [88; 94) '1isize': [unknown]\n [48; 49) 'a': u32\n [55; 56) 'b': isize\n@@ -10,4 +10,4 @@\n [17; 18) 'b': isize\n [100; 106) '\"test\"': [unknown]\n [42; 121) '{     ...f32; }': ()\n-[69; 70) 'd': [unknown]\n+[69; 70) 'd': &[unknown]"}, {"sha": "296e955c19ef919775acebfecce11c4da533cda1", "filename": "crates/ra_hir/src/ty/tests/data/0005_refs.txt", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0005_refs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0005_refs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0005_refs.txt?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -0,0 +1,23 @@\n+[115; 117) '&b': &&mut u32\n+[88; 94) '&mut a': &mut &u32\n+[146; 147) 'd': *mut u32\n+[145; 147) '*d': u32\n+[65; 66) 'a': &u32\n+[46; 47) 'd': *mut u32\n+[59; 150) '{     ... *d; }': ()\n+[116; 117) 'b': &mut u32\n+[131; 132) 'c': *const u32\n+[130; 132) '*c': u32\n+[72; 74) '*a': u32\n+[107; 109) '*b': u32\n+[108; 109) 'b': &mut u32\n+[9; 10) 'a': &u32\n+[18; 19) 'b': &mut u32\n+[93; 94) 'a': &u32\n+[100; 101) 'b': &mut u32\n+[81; 82) 'a': &u32\n+[80; 82) '&a': &&u32\n+[73; 74) 'a': &u32\n+[123; 124) 'c': *const u32\n+[31; 32) 'c': *const u32\n+[138; 139) 'd': *mut u32"}, {"sha": "8fb6b64083f7f9a677f55ae402ab00cad0e866b2", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -394,3 +394,42 @@ impl<'a> EnumVariant<'a> {\n         StructFlavor::from_node(self)\n     }\n }\n+\n+impl<'a> PointerType<'a> {\n+    pub fn is_mut(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == MUT_KW)\n+    }\n+}\n+\n+impl<'a> ReferenceType<'a> {\n+    pub fn is_mut(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == MUT_KW)\n+    }\n+}\n+\n+impl<'a> RefExpr<'a> {\n+    pub fn is_mut(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == MUT_KW)\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum PrefixOp {\n+    /// The `*` operator for dereferencing\n+    Deref,\n+    /// The `!` operator for logical inversion\n+    Not,\n+    /// The `-` operator for negation\n+    Neg,\n+}\n+\n+impl<'a> PrefixExpr<'a> {\n+    pub fn op(&self) -> Option<PrefixOp> {\n+        match self.syntax().first_child()?.kind() {\n+            STAR => Some(PrefixOp::Deref),\n+            EXCL => Some(PrefixOp::Not),\n+            MINUS => Some(PrefixOp::Neg),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "535dcc97524aebee245fe034f226bbf68e1f230f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -2607,7 +2607,11 @@ impl<R: TreeRoot<RaTypes>> ParenTypeNode<R> {\n }\n \n \n-impl<'a> ParenType<'a> {}\n+impl<'a> ParenType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Pat\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -2972,7 +2976,11 @@ impl<R: TreeRoot<RaTypes>> PointerTypeNode<R> {\n }\n \n \n-impl<'a> PointerType<'a> {}\n+impl<'a> PointerType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // PosField\n #[derive(Debug, Clone, Copy,)]\n@@ -3285,7 +3293,11 @@ impl<R: TreeRoot<RaTypes>> ReferenceTypeNode<R> {\n }\n \n \n-impl<'a> ReferenceType<'a> {}\n+impl<'a> ReferenceType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // RetType\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "8b1bd6d1c1fddaaa79d0f0fb1cc4e2a66b34bf8f", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2870effd5c69941bbf32a44c0ee6d9d42e0b038d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "patch": "@@ -303,14 +303,14 @@ Grammar(\n         ] ),\n         \"ImplItem\": (),\n \n-        \"ParenType\": (),\n+        \"ParenType\": (options: [\"TypeRef\"]),\n         \"TupleType\": (),\n         \"NeverType\": (),\n         \"PathType\": (options: [\"Path\"]),\n-        \"PointerType\": (),\n+        \"PointerType\": (options: [\"TypeRef\"]),\n         \"ArrayType\": (),\n         \"SliceType\": (),\n-        \"ReferenceType\": (),\n+        \"ReferenceType\": (options: [\"TypeRef\"]),\n         \"PlaceholderType\": (),\n         \"FnPointerType\": (),\n         \"ForType\": (),"}]}