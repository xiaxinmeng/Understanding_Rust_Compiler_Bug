{"sha": "5d3916d5668cf79430ff64e66bce15bcfcede6aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzkxNmQ1NjY4Y2Y3OTQzMGZmNjRlNjZiY2UxNWJjZmNlZGU2YWE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-01T16:04:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-01T16:04:54Z"}, "message": "Rollup merge of #49451 - QuietMisdreavus:epoch-doctests, r=GuillaumeGomez\n\nrustdoc: add an --edition flag to compile docs/doctests with a certain edition\n\nTo correspond with the 2018 edition, this adds a (currently unstable) `--edition` flag to rustdoc that makes it compile crates and doctests with the given edition. Once this lands, Cargo should be updated to pass this flag when the edition configuration option is given.", "tree": {"sha": "a14f0ff7f4502d4a35a956fc5386b0a56df80ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14f0ff7f4502d4a35a956fc5386b0a56df80ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d3916d5668cf79430ff64e66bce15bcfcede6aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawQMmCRBK7hj4Ov3rIwAAdHIIACSFt1Ucz5Tc3GRBXUQiYJPj\nlBGu80FH8IakoiY+LIphJZYSlCdloqjGILP0zymsKi3V3OivrT68d3EqyfL6X+SO\n2/aO5S0I/BMU6Hhv1JSj9MiV8ySgeVDveGVbIuHuDznrIOg7iH6DU97njfvw37wD\nYdZwKY2DtNVi/uIKTCAka8Jyx6m8o4JWRK51xZs2ajSYldPcFN46zIgB4b6+Ti29\n4JXJmZo2jjNrqcTxDyMMKw+RpWl4whTgxkb+0nWT84+ODly4DXxQoDF3wqRm3Wze\nJGmyaEarhH9ZNScNCZzTweS1sFbfRPKnr6OyYN2CbbOqhgUh4cEC9s/FoQiSfQ0=\n=ykoj\n-----END PGP SIGNATURE-----\n", "payload": "tree a14f0ff7f4502d4a35a956fc5386b0a56df80ef7\nparent d2235f20b5295394450f4962fb5f93254e63640c\nparent 97aead0c6c1e3e7e5c442f729c441d31e66342d2\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1522598694 +0200\ncommitter GitHub <noreply@github.com> 1522598694 +0200\n\nRollup merge of #49451 - QuietMisdreavus:epoch-doctests, r=GuillaumeGomez\n\nrustdoc: add an --edition flag to compile docs/doctests with a certain edition\n\nTo correspond with the 2018 edition, this adds a (currently unstable) `--edition` flag to rustdoc that makes it compile crates and doctests with the given edition. Once this lands, Cargo should be updated to pass this flag when the edition configuration option is given.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3916d5668cf79430ff64e66bce15bcfcede6aa", "html_url": "https://github.com/rust-lang/rust/commit/5d3916d5668cf79430ff64e66bce15bcfcede6aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d3916d5668cf79430ff64e66bce15bcfcede6aa/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2235f20b5295394450f4962fb5f93254e63640c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2235f20b5295394450f4962fb5f93254e63640c", "html_url": "https://github.com/rust-lang/rust/commit/d2235f20b5295394450f4962fb5f93254e63640c"}, {"sha": "97aead0c6c1e3e7e5c442f729c441d31e66342d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97aead0c6c1e3e7e5c442f729c441d31e66342d2", "html_url": "https://github.com/rust-lang/rust/commit/97aead0c6c1e3e7e5c442f729c441d31e66342d2"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "bf97fb4686180f981f7c9e4983606f9910455f1b", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=5d3916d5668cf79430ff64e66bce15bcfcede6aa", "patch": "@@ -348,6 +348,19 @@ details.\n \n [issue-display-warnings]: https://github.com/rust-lang/rust/issues/41574\n \n+### `--edition`: control the edition of docs and doctests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --edition 2018\n+$ rustdoc --test src/lib.rs -Z unstable-options --edition 2018\n+```\n+\n+This flag allows rustdoc to treat your rust code as the given edition. It will compile doctests with\n+the given edition as well. As with `rustc`, the default edition that `rustdoc` will use is `2015`\n+(the first edition).\n+\n ### `-Z force-unstable-if-unmarked`\n \n Using this flag looks like this:"}, {"sha": "6e2be2610cec072a4001c72d5788ba8049643be8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5d3916d5668cf79430ff64e66bce15bcfcede6aa", "patch": "@@ -26,6 +26,7 @@ use rustc_back::target::TargetTriple;\n \n use syntax::ast::NodeId;\n use syntax::codemap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use errors;\n use errors::emitter::ColorConfig;\n@@ -123,7 +124,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 maybe_sysroot: Option<PathBuf>,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n-                force_unstable_if_unmarked: bool) -> (clean::Crate, RenderInfo)\n+                force_unstable_if_unmarked: bool,\n+                edition: Edition) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -148,6 +150,7 @@ pub fn run_core(search_paths: SearchPaths,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n             force_unstable_if_unmarked,\n+            edition,\n             ..config::basic_debugging_options()\n         },\n         ..config::basic_options().clone()"}, {"sha": "e31390f59e292cead33782f4d7dac0d2cc4ea70d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5d3916d5668cf79430ff64e66bce15bcfcede6aa", "patch": "@@ -61,6 +61,7 @@ use std::path::{Path, PathBuf};\n use std::process;\n use std::sync::mpsc::channel;\n \n+use syntax::edition::Edition;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n@@ -271,6 +272,11 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                       \\\"light-suffix.css\\\"\",\n                      \"PATH\")\n         }),\n+        unstable(\"edition\", |o| {\n+            o.optopt(\"\", \"edition\",\n+                     \"edition to use when compiling rust code (default: 2015)\",\n+                     \"EDITION\")\n+        }),\n     ]\n }\n \n@@ -429,14 +435,23 @@ pub fn main_args(args: &[String]) -> isize {\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n \n+    let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n+    let edition = match edition.parse() {\n+        Ok(e) => e,\n+        Err(_) => {\n+            print_error(\"could not parse edition\");\n+            return 1;\n+        }\n+    };\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  display_warnings, linker)\n+                                  display_warnings, linker, edition)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, display_warnings, linker)\n+                             maybe_sysroot, display_warnings, linker, edition)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -446,7 +461,7 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, &matches, move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -487,14 +502,15 @@ fn print_error<T>(error_message: T) where T: Display {\n /// and files and then generates the necessary rustdoc output for formatting.\n fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n+                       edition: Edition,\n                        matches: &getopts::Matches,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, matches, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, matches, f))\n+        None => Ok(rust_input(input, externs, edition, matches, f))\n     }\n }\n \n@@ -520,8 +536,14 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n /// generated from the cleaned AST of the crate.\n ///\n /// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(cratefile: PathBuf, externs: Externs, matches: &getopts::Matches, f: F) -> R\n-where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n+fn rust_input<R, F>(cratefile: PathBuf,\n+                    externs: Externs,\n+                    edition: Edition,\n+                    matches: &getopts::Matches,\n+                    f: F) -> R\n+where R: 'static + Send,\n+      F: 'static + Send + FnOnce(Output) -> R\n+{\n     let mut default_passes = !matches.opt_present(\"no-defaults\");\n     let mut passes = matches.opt_strs(\"passes\");\n     let mut plugins = matches.opt_strs(\"plugins\");\n@@ -570,7 +592,7 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked);\n+                           force_unstable_if_unmarked, edition);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "daa8966b104e8d193c22925b9d426872b4d92eb1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=5d3916d5668cf79430ff64e66bce15bcfcede6aa", "patch": "@@ -18,6 +18,7 @@ use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n use syntax::codemap::DUMMY_SP;\n+use syntax::edition::Edition;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -139,7 +140,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>, edition: Edition) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -151,7 +152,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n-                                       linker);\n+                                       linker, edition);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP, None);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests,"}, {"sha": "ab11b0d62e9f71055dec5ef63071aadd6ab554a3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3916d5668cf79430ff64e66bce15bcfcede6aa/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5d3916d5668cf79430ff64e66bce15bcfcede6aa", "patch": "@@ -34,6 +34,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n@@ -57,7 +58,8 @@ pub fn run(input_path: &Path,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n            display_warnings: bool,\n-           linker: Option<PathBuf>)\n+           linker: Option<PathBuf>,\n+           edition: Edition)\n            -> isize {\n     let input = config::Input::File(input_path.to_owned());\n \n@@ -70,6 +72,10 @@ pub fn run(input_path: &Path,\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n \n@@ -117,7 +123,8 @@ pub fn run(input_path: &Path,\n                                        maybe_sysroot,\n                                        Some(codemap),\n                                        None,\n-                                       linker);\n+                                       linker,\n+                                       edition);\n \n     {\n         let map = hir::map::map_crate(&sess, &cstore, &mut hir_forest, &defs);\n@@ -177,8 +184,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>,\n-            linker: Option<PathBuf>) {\n+            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -204,6 +210,10 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         },\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n \n@@ -465,13 +475,14 @@ pub struct Collector {\n     codemap: Option<Lrc<CodeMap>>,\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n+    edition: Edition,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n                codemap: Option<Lrc<CodeMap>>, filename: Option<PathBuf>,\n-               linker: Option<PathBuf>) -> Collector {\n+               linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -486,6 +497,7 @@ impl Collector {\n             codemap,\n             filename,\n             linker,\n+            edition,\n         }\n     }\n \n@@ -505,6 +517,7 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n+        let edition = self.edition;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -535,7 +548,8 @@ impl Collector {\n                                  error_codes,\n                                  &opts,\n                                  maybe_sysroot,\n-                                 linker)\n+                                 linker,\n+                                 edition)\n                     }))\n                 } {\n                     Ok(()) => (),"}]}