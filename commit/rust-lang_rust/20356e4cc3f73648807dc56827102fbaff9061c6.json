{"sha": "20356e4cc3f73648807dc56827102fbaff9061c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzU2ZTRjYzNmNzM2NDg4MDdkYzU2ODI3MTAyZmJhZmY5MDYxYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-11T18:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-11T18:21:44Z"}, "message": "auto merge of #14108 : thestinger/rust/jemalloc, r=huonw", "tree": {"sha": "240e610f5cabddde9d392be5d22a1770c1bba2de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240e610f5cabddde9d392be5d22a1770c1bba2de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20356e4cc3f73648807dc56827102fbaff9061c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20356e4cc3f73648807dc56827102fbaff9061c6", "html_url": "https://github.com/rust-lang/rust/commit/20356e4cc3f73648807dc56827102fbaff9061c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20356e4cc3f73648807dc56827102fbaff9061c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c690bda159285c7a5e17d39df4b76a92d115c9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c690bda159285c7a5e17d39df4b76a92d115c9fd", "html_url": "https://github.com/rust-lang/rust/commit/c690bda159285c7a5e17d39df4b76a92d115c9fd"}, {"sha": "420708f38992b488570bc8702a887593a57d746f", "url": "https://api.github.com/repos/rust-lang/rust/commits/420708f38992b488570bc8702a887593a57d746f", "html_url": "https://github.com/rust-lang/rust/commit/420708f38992b488570bc8702a887593a57d746f"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "7dfc89b01de745a745d6e772da194eb277adc958", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/20356e4cc3f73648807dc56827102fbaff9061c6/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20356e4cc3f73648807dc56827102fbaff9061c6/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=20356e4cc3f73648807dc56827102fbaff9061c6", "patch": "@@ -30,8 +30,6 @@ use std::result::{Ok, Err};\n use std::slice::ImmutableVector;\n \n mod table {\n-    extern crate libc;\n-\n     use std::clone::Clone;\n     use std::cmp;\n     use std::cmp::Eq;\n@@ -42,10 +40,10 @@ mod table {\n     use std::prelude::Drop;\n     use std::ptr;\n     use std::ptr::RawPtr;\n-    use std::rt::libc_heap;\n-    use std::intrinsics::{size_of, min_align_of, transmute};\n-    use std::intrinsics::{move_val_init, set_memory};\n+    use std::mem::{min_align_of, size_of};\n+    use std::intrinsics::{move_val_init, set_memory, transmute};\n     use std::iter::{Iterator, range_step_inclusive};\n+    use std::rt::heap::{allocate, deallocate};\n \n     static EMPTY_BUCKET: u64 = 0u64;\n \n@@ -185,10 +183,6 @@ mod table {\n         assert_eq!(round_up_to_next(5, 4), 8);\n     }\n \n-    fn has_alignment(n: uint, alignment: uint) -> bool {\n-        round_up_to_next(n, alignment) == n\n-    }\n-\n     // Returns a tuple of (minimum required malloc alignment, hash_offset,\n     // key_offset, val_offset, array_size), from the start of a mallocated array.\n     fn calculate_offsets(\n@@ -243,12 +237,7 @@ mod table {\n                     keys_size,   min_align_of::< K >(),\n                     vals_size,   min_align_of::< V >());\n \n-            let buffer = libc_heap::malloc_raw(size) as *mut u8;\n-\n-            // FIXME #13094: If malloc was not at as aligned as we expected,\n-            // our offset calculations are just plain wrong. We could support\n-            // any alignment if we switched from `malloc` to `posix_memalign`.\n-            assert!(has_alignment(buffer as uint, malloc_alignment));\n+            let buffer = allocate(size, malloc_alignment);\n \n             let hashes = buffer.offset(hash_offset as int) as *mut u64;\n             let keys   = buffer.offset(keys_offset as int) as *mut K;\n@@ -418,7 +407,7 @@ mod table {\n     // modified to no longer assume this.\n     #[test]\n     fn can_alias_safehash_as_u64() {\n-        unsafe { assert_eq!(size_of::<SafeHash>(), size_of::<u64>()) };\n+        assert_eq!(size_of::<SafeHash>(), size_of::<u64>())\n     }\n \n     pub struct Entries<'a, K, V> {\n@@ -560,8 +549,15 @@ mod table {\n \n             assert_eq!(self.size, 0);\n \n+            let hashes_size = self.capacity * size_of::<u64>();\n+            let keys_size = self.capacity * size_of::<K>();\n+            let vals_size = self.capacity * size_of::<V>();\n+            let (align, _, _, _, size) = calculate_offsets(hashes_size, min_align_of::<u64>(),\n+                                                           keys_size, min_align_of::<K>(),\n+                                                           vals_size, min_align_of::<V>());\n+\n             unsafe {\n-                libc::free(self.hashes as *mut libc::c_void);\n+                deallocate(self.hashes as *mut u8, size, align);\n                 // Remember how everything was allocated out of one buffer\n                 // during initialization? We only need one call to free here.\n             }"}, {"sha": "30b95ffb34f69f42875dc1cb267db775562f1f58", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/20356e4cc3f73648807dc56827102fbaff9061c6/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20356e4cc3f73648807dc56827102fbaff9061c6/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=20356e4cc3f73648807dc56827102fbaff9061c6", "patch": "@@ -51,8 +51,7 @@\n use clone::Clone;\n use iter::{range, Iterator};\n use kinds::Send;\n-use libc;\n-use mem;\n+use mem::{forget, min_align_of, size_of, transmute};\n use ops::Drop;\n use option::{Option, Some, None};\n use owned::Box;\n@@ -62,6 +61,7 @@ use slice::ImmutableVector;\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicInt, AtomicPtr, SeqCst};\n use unstable::sync::Exclusive;\n+use rt::heap::{allocate, deallocate};\n use vec::Vec;\n \n // Once the queue is less than 1/K full, then it will be downsized. Note that\n@@ -229,7 +229,7 @@ impl<T: Send> Deque<T> {\n         Deque {\n             bottom: AtomicInt::new(0),\n             top: AtomicInt::new(0),\n-            array: AtomicPtr::new(unsafe { mem::transmute(buf) }),\n+            array: AtomicPtr::new(unsafe { transmute(buf) }),\n             pool: pool,\n         }\n     }\n@@ -271,7 +271,7 @@ impl<T: Send> Deque<T> {\n             return Some(data);\n         } else {\n             self.bottom.store(t + 1, SeqCst);\n-            mem::forget(data); // someone else stole this value\n+            forget(data); // someone else stole this value\n             return None;\n         }\n     }\n@@ -293,7 +293,7 @@ impl<T: Send> Deque<T> {\n         if self.top.compare_and_swap(t, t + 1, SeqCst) == t {\n             Data(data)\n         } else {\n-            mem::forget(data); // someone else stole this value\n+            forget(data); // someone else stole this value\n             Abort\n         }\n     }\n@@ -314,15 +314,15 @@ impl<T: Send> Deque<T> {\n     // continue to be read after we flag this buffer for reclamation.\n     unsafe fn swap_buffer(&mut self, b: int, old: *mut Buffer<T>,\n                           buf: Buffer<T>) -> *mut Buffer<T> {\n-        let newbuf: *mut Buffer<T> = mem::transmute(box buf);\n+        let newbuf: *mut Buffer<T> = transmute(box buf);\n         self.array.store(newbuf, SeqCst);\n         let ss = (*newbuf).size();\n         self.bottom.store(b + ss, SeqCst);\n         let t = self.top.load(SeqCst);\n         if self.top.compare_and_swap(t, t + ss, SeqCst) != t {\n             self.bottom.store(b, SeqCst);\n         }\n-        self.pool.free(mem::transmute(old));\n+        self.pool.free(transmute(old));\n         return newbuf;\n     }\n }\n@@ -339,15 +339,19 @@ impl<T: Send> Drop for Deque<T> {\n         for i in range(t, b) {\n             let _: T = unsafe { (*a).get(i) };\n         }\n-        self.pool.free(unsafe { mem::transmute(a) });\n+        self.pool.free(unsafe { transmute(a) });\n     }\n }\n \n+#[inline]\n+fn buffer_alloc_size<T>(log_size: int) -> uint {\n+    (1 << log_size) * size_of::<T>()\n+}\n+\n impl<T: Send> Buffer<T> {\n     unsafe fn new(log_size: int) -> Buffer<T> {\n-        let size = (1 << log_size) * mem::size_of::<T>();\n-        let buffer = libc::malloc(size as libc::size_t);\n-        assert!(!buffer.is_null());\n+        let size = buffer_alloc_size::<T>(log_size);\n+        let buffer = allocate(size, min_align_of::<T>());\n         Buffer {\n             storage: buffer as *T,\n             log_size: log_size,\n@@ -372,7 +376,7 @@ impl<T: Send> Buffer<T> {\n     unsafe fn put(&mut self, i: int, t: T) {\n         let ptr = self.storage.offset(i & self.mask());\n         ptr::copy_nonoverlapping_memory(ptr as *mut T, &t as *T, 1);\n-        mem::forget(t);\n+        forget(t);\n     }\n \n     // Again, unsafe because this has incredibly dubious ownership violations.\n@@ -390,7 +394,8 @@ impl<T: Send> Buffer<T> {\n impl<T: Send> Drop for Buffer<T> {\n     fn drop(&mut self) {\n         // It is assumed that all buffers are empty on drop.\n-        unsafe { libc::free(self.storage as *mut libc::c_void) }\n+        let size = buffer_alloc_size::<T>(self.log_size);\n+        unsafe { deallocate(self.storage as *mut u8, size, min_align_of::<T>()) }\n     }\n }\n \n@@ -606,8 +611,7 @@ mod tests {\n             let s = s.clone();\n             let unique_box = box AtomicUint::new(0);\n             let thread_box = unsafe {\n-                *mem::transmute::<&Box<AtomicUint>,\n-                                   **mut AtomicUint>(&unique_box)\n+                *mem::transmute::<&Box<AtomicUint>, **mut AtomicUint>(&unique_box)\n             };\n             (Thread::start(proc() {\n                 unsafe {"}]}