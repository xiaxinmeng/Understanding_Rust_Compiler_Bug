{"sha": "5bb68c31f8cef24174a7d3499de6b4ebea069900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjY4YzMxZjhjZWYyNDE3NGE3ZDM0OTlkZTZiNGViZWEwNjk5MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-05T15:58:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-05T15:58:06Z"}, "message": "Auto merge of #79445 - SNCPlay42:struct-tail-recursion-limit, r=oli-obk\n\ncheck the recursion limit when finding a struct's tail\n\nfixes #79437\n\nThis does a `delay_span_bug` (via `ty_error_with_message`) rather than emit a new error message, under the assumption that there will be an error elsewhere (even if the type isn't infinitely recursive, just deeper than the recursion limit, this appears to be the case).", "tree": {"sha": "f021c48a63c43acbdbe56bd78293270a5ef88bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f021c48a63c43acbdbe56bd78293270a5ef88bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb68c31f8cef24174a7d3499de6b4ebea069900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb68c31f8cef24174a7d3499de6b4ebea069900", "html_url": "https://github.com/rust-lang/rust/commit/5bb68c31f8cef24174a7d3499de6b4ebea069900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb68c31f8cef24174a7d3499de6b4ebea069900/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9122b769c8306b1cb3c8d1f96fca3ea3e208e22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9122b769c8306b1cb3c8d1f96fca3ea3e208e22e", "html_url": "https://github.com/rust-lang/rust/commit/9122b769c8306b1cb3c8d1f96fca3ea3e208e22e"}, {"sha": "98fc02d6faeb39c7a4264af8ffdedc6a5a157f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/98fc02d6faeb39c7a4264af8ffdedc6a5a157f89", "html_url": "https://github.com/rust-lang/rust/commit/98fc02d6faeb39c7a4264af8ffdedc6a5a157f89"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "25787f005aa23b454c008ce960a55c3c6cbfe5e2", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bb68c31f8cef24174a7d3499de6b4ebea069900/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb68c31f8cef24174a7d3499de6b4ebea069900/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=5bb68c31f8cef24174a7d3499de6b4ebea069900", "patch": "@@ -18,7 +18,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use smallvec::SmallVec;\n use std::{cmp, fmt};\n@@ -221,7 +221,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         mut ty: Ty<'tcx>,\n         normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> Ty<'tcx> {\n-        loop {\n+        for iteration in 0.. {\n+            if !self.sess.recursion_limit().value_within_limit(iteration) {\n+                return self.ty_error_with_message(\n+                    DUMMY_SP,\n+                    &format!(\"reached the recursion limit finding the struct tail for {}\", ty),\n+                );\n+            }\n             match *ty.kind() {\n                 ty::Adt(def, substs) => {\n                     if !def.is_struct() {"}, {"sha": "70a203ea6e81468ba6e015f4006f4d4576e58184", "filename": "src/test/ui/infinite/infinite-struct.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bb68c31f8cef24174a7d3499de6b4ebea069900/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb68c31f8cef24174a7d3499de6b4ebea069900/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs?ref=5bb68c31f8cef24174a7d3499de6b4ebea069900", "patch": "@@ -0,0 +1,10 @@\n+struct Take(Take);\n+//~^ ERROR has infinite size\n+//~| ERROR cycle detected\n+\n+// check that we don't hang trying to find the tail of a recursive struct (#79437)\n+fn foo() -> Take {\n+    Take(loop {})\n+}\n+\n+fn main() {}"}, {"sha": "d180670e38fda7a8ba7d17384f342458ab7290e5", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5bb68c31f8cef24174a7d3499de6b4ebea069900/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bb68c31f8cef24174a7d3499de6b4ebea069900/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=5bb68c31f8cef24174a7d3499de6b4ebea069900", "patch": "@@ -0,0 +1,27 @@\n+error[E0072]: recursive type `Take` has infinite size\n+  --> $DIR/infinite-struct.rs:1:1\n+   |\n+LL | struct Take(Take);\n+   | ^^^^^^^^^^^^----^^\n+   | |           |\n+   | |           recursive without indirection\n+   | recursive type has infinite size\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Take` representable\n+   |\n+LL | struct Take(Box<Take>);\n+   |             ^^^^    ^\n+\n+error[E0391]: cycle detected when computing drop-check constraints for `Take`\n+  --> $DIR/infinite-struct.rs:1:1\n+   |\n+LL | struct Take(Take);\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...which again requires computing drop-check constraints for `Take`, completing the cycle\n+   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: Take } }`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0072, E0391.\n+For more information about an error, try `rustc --explain E0072`."}]}