{"sha": "212aa3ea28d91a97d1e1261709c0b6e6790788e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMmFhM2VhMjhkOTFhOTdkMWUxMjYxNzA5YzBiNmU2NzkwNzg4ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T10:04:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T10:04:22Z"}, "message": "Auto merge of #69330 - Centril:literally-melting-ice, r=eddyb\n\n`lit_to_const`: gracefully bubble up type errors.\n\nFixes https://github.com/rust-lang/rust/issues/69310 which was injected by https://github.com/rust-lang/rust/pull/68118.\n\nr? @pnkfelix @varkor @eddyb\ncc @skinny121", "tree": {"sha": "5e75f23ad960eaaa90bcff58468ef28f18151134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e75f23ad960eaaa90bcff58468ef28f18151134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/212aa3ea28d91a97d1e1261709c0b6e6790788e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/212aa3ea28d91a97d1e1261709c0b6e6790788e6", "html_url": "https://github.com/rust-lang/rust/commit/212aa3ea28d91a97d1e1261709c0b6e6790788e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/212aa3ea28d91a97d1e1261709c0b6e6790788e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "html_url": "https://github.com/rust-lang/rust/commit/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650"}, {"sha": "748dd455ad202b7d2366bac51de930deb61f0827", "url": "https://api.github.com/repos/rust-lang/rust/commits/748dd455ad202b7d2366bac51de930deb61f0827", "html_url": "https://github.com/rust-lang/rust/commit/748dd455ad202b7d2366bac51de930deb61f0827"}], "stats": {"total": 93, "additions": 56, "deletions": 37}, "files": [{"sha": "c62f9a049a050f6d09e943bd378df23645a7b3fd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -148,6 +148,10 @@ pub struct LitToConstInput<'tcx> {\n /// Error type for `tcx.lit_to_const`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, HashStable)]\n pub enum LitToConstError {\n+    /// The literal's inferred type did not match the expected `ty` in the input.\n+    /// This is used for graceful error handling (`delay_span_bug`) in\n+    /// type checking (`AstConv::ast_const_to_const`).\n+    TypeError,\n     UnparseableFloat,\n     Reported,\n }"}, {"sha": "e9dd78542753f924c3934ddb3de14785eb571cca", "filename": "src/librustc_mir_build/hair/constant.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::interpret::{\n     truncate, Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n-use rustc::ty::{self, layout::Size, ParamEnv, TyCtxt};\n+use rustc::ty::{self, layout::Size, ParamEnv, TyCtxt, TyS};\n use rustc_span::symbol::Symbol;\n use syntax::ast;\n \n@@ -20,50 +20,35 @@ crate fn lit_to_const<'tcx>(\n         Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n     };\n \n-    let lit = match *lit {\n-        ast::LitKind::Str(ref s, _) => {\n+    let lit = match (lit, &ty.kind) {\n+        (ast::LitKind::Str(s, _), ty::Ref(_, TyS { kind: ty::Str, .. }, _)) => {\n             let s = s.as_str();\n             let allocation = Allocation::from_byte_aligned_bytes(s.as_bytes());\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         }\n-        ast::LitKind::ByteStr(ref data) => {\n-            if let ty::Ref(_, ref_ty, _) = ty.kind {\n-                match ref_ty.kind {\n-                    ty::Slice(_) => {\n-                        let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n-                        let allocation = tcx.intern_const_alloc(allocation);\n-                        ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n-                    }\n-                    ty::Array(_, _) => {\n-                        let id = tcx.allocate_bytes(data);\n-                        ConstValue::Scalar(Scalar::Ptr(id.into()))\n-                    }\n-                    _ => {\n-                        bug!(\"bytestring should have type of either &[u8] or &[u8; _], not {}\", ty)\n-                    }\n-                }\n-            } else {\n-                bug!(\"bytestring should have type of either &[u8] or &[u8; _], not {}\", ty)\n-            }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, TyS { kind: ty::Slice(_), .. }, _)) => {\n+            let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n+            let allocation = tcx.intern_const_alloc(allocation);\n+            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n+        }\n+        (ast::LitKind::ByteStr(data), ty::Ref(_, TyS { kind: ty::Array(_, _), .. }, _)) => {\n+            let id = tcx.allocate_bytes(data);\n+            ConstValue::Scalar(Scalar::Ptr(id.into()))\n+        }\n+        (ast::LitKind::Byte(n), ty::Uint(ast::UintTy::U8)) => {\n+            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n         }\n-        ast::LitKind::Byte(n) => ConstValue::Scalar(Scalar::from_uint(n, Size::from_bytes(1))),\n-        ast::LitKind::Int(n, _) if neg => {\n-            let n = n as i128;\n-            let n = n.overflowing_neg().0;\n-            trunc(n as u128)?\n+        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n+            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n         }\n-        ast::LitKind::Int(n, _) => trunc(n)?,\n-        ast::LitKind::Float(n, _) => {\n-            let fty = match ty.kind {\n-                ty::Float(fty) => fty,\n-                _ => bug!(),\n-            };\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n+            parse_float(*n, *fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n         }\n-        ast::LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n-        ast::LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n-        ast::LitKind::Err(_) => return Err(LitToConstError::Reported),\n+        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n+        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n+        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n+        _ => return Err(LitToConstError::TypeError),\n     };\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }"}, {"sha": "f4860733db835ea94670b5a8c3391833f6896a50", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -148,6 +148,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n                 // create a dummy value and continue compiling\n                 Const::from_bits(self.tcx, 0, self.param_env.and(ty))\n             }\n+            Err(LitToConstError::TypeError) => bug!(\"const_eval_literal: had type error\"),\n         }\n     }\n "}, {"sha": "6979a98e68736ff2c902604e10d909d871ae9867", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -846,6 +846,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     PatKind::Wild\n                 }\n                 Err(LitToConstError::Reported) => PatKind::Wild,\n+                Err(LitToConstError::TypeError) => bug!(\"lower_lit: had type error\"),\n             }\n         }\n     }"}, {"sha": "78c05a51e4fbd19df1ba9da033ed370a650bdbcd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -2742,6 +2742,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // mir.\n             if let Ok(c) = tcx.at(expr.span).lit_to_const(lit_input) {\n                 return c;\n+            } else {\n+                tcx.sess.delay_span_bug(expr.span, \"ast_const_to_const: couldn't lit_to_const\");\n             }\n         }\n "}, {"sha": "98be8c345a9ed66e00242e6eae475ed56d9d0960", "filename": "src/test/ui/consts/issue-69310-array-size-lit-wrong-ty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.rs?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -0,0 +1,11 @@\n+// This is a regression test for #69310, which was injected by #68118.\n+// The issue here was that as a performance optimization,\n+// we call the query `lit_to_const(input);`.\n+// However, the literal `input.lit` would not be of the type expected by `input.ty`.\n+// As a result, we immediately called `bug!(...)` instead of bubbling up the problem\n+// so that it could be handled by the caller of `lit_to_const` (`ast_const_to_const`).\n+\n+fn main() {}\n+\n+const A: [(); 0.1] = [()]; //~ ERROR mismatched types\n+const B: [(); b\"a\"] = [()]; //~ ERROR mismatched types"}, {"sha": "7078b4bd7be1d59571d2551d578d6bd00723e693", "filename": "src/test/ui/consts/issue-69310-array-size-lit-wrong-ty.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/212aa3ea28d91a97d1e1261709c0b6e6790788e6/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69310-array-size-lit-wrong-ty.stderr?ref=212aa3ea28d91a97d1e1261709c0b6e6790788e6", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69310-array-size-lit-wrong-ty.rs:10:15\n+   |\n+LL | const A: [(); 0.1] = [()];\n+   |               ^^^ expected `usize`, found floating-point number\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69310-array-size-lit-wrong-ty.rs:11:15\n+   |\n+LL | const B: [(); b\"a\"] = [()];\n+   |               ^^^^ expected `usize`, found `&[u8; 1]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}