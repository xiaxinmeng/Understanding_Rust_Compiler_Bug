{"sha": "0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTVlOGE4OGZmMDVjY2Y0ODAzZTBiZDU0YjNhYWJiYzYxNzk1NmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-11T15:37:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-11T15:37:02Z"}, "message": "Rollup merge of #69044 - jonas-schievink:dont-run-coherence-twice, r=davidtwco\n\nDon't run coherence twice for future-compat lints\n\nThis fixes the regression introduced by https://github.com/rust-lang/rust/pull/65232 (which I mentioned in https://github.com/rust-lang/rust/pull/65232#issuecomment-583739037).\n\nOld algorithm:\n* Run coherence with all future-incompatible checks off, reporting errors on any overlap.\n* If there's no overlap (common case), run it *again*, with the future-incompatible checks on. Report warnings for any overlap found.\n\nNew algorithm:\n* Run coherence with all additional future-incompatible checks *on*, which means that we'll find *all* potentially overlapping impls immediately.\n* If this found overlap, run coherence again, with the future-incompatible checks off. If that *still* gives an error, we report it. If not, it ought to be a warning.\n\nThis reduces time spent in coherence checking for the nrf52810-pac by roughly 50% relative to current master.", "tree": {"sha": "47c1fc9cccbc960b4effbabe99eb11386fe96add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c1fc9cccbc960b4effbabe99eb11386fe96add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQsofCRBK7hj4Ov3rIwAAdHIIAK4k+yswI/aHTca0xaecbenq\n07ds2FgQ5g8AX/Ei//uKmKr++q+1YFx8iBKjhRw2XbIsOC6NHr40vkJ1Wt4BtXbd\nI5AYqBrJ/gzEUkpySixmq2fGbzDPCxae9xq//WonZ/3mhrI4GUp6nAIadslW9GAe\nug2DEOtg3QvA1peWkJlZWILni9Fu4GGuAYWMpv5zcZVDjP3yVe9xbctl0kPHMp24\n18l/Wf6oyLCcCz74SJcB1qKVAiE3IwGEeyQdZ4ljBQqnTbJwwsVY/Iu4U2QZA9p5\nJQOcBtRNg6hfz0aQkVnyPMHU0K0kPtTKfrK0ZiyvjRpKRqLY7HPuLxAt6h8RDpw=\n=W/mP\n-----END PGP SIGNATURE-----\n", "payload": "tree 47c1fc9cccbc960b4effbabe99eb11386fe96add\nparent dc98cb09c0479710fa6d59c3f1a6e1ac962f0aa4\nparent f66793757fd1cdfa6098ec1b8532ba0382792c4d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581435422 +0100\ncommitter GitHub <noreply@github.com> 1581435422 +0100\n\nRollup merge of #69044 - jonas-schievink:dont-run-coherence-twice, r=davidtwco\n\nDon't run coherence twice for future-compat lints\n\nThis fixes the regression introduced by https://github.com/rust-lang/rust/pull/65232 (which I mentioned in https://github.com/rust-lang/rust/pull/65232#issuecomment-583739037).\n\nOld algorithm:\n* Run coherence with all future-incompatible checks off, reporting errors on any overlap.\n* If there's no overlap (common case), run it *again*, with the future-incompatible checks on. Report warnings for any overlap found.\n\nNew algorithm:\n* Run coherence with all additional future-incompatible checks *on*, which means that we'll find *all* potentially overlapping impls immediately.\n* If this found overlap, run coherence again, with the future-incompatible checks off. If that *still* gives an error, we report it. If not, it ought to be a warning.\n\nThis reduces time spent in coherence checking for the nrf52810-pac by roughly 50% relative to current master.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f", "html_url": "https://github.com/rust-lang/rust/commit/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc98cb09c0479710fa6d59c3f1a6e1ac962f0aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc98cb09c0479710fa6d59c3f1a6e1ac962f0aa4", "html_url": "https://github.com/rust-lang/rust/commit/dc98cb09c0479710fa6d59c3f1a6e1ac962f0aa4"}, {"sha": "f66793757fd1cdfa6098ec1b8532ba0382792c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66793757fd1cdfa6098ec1b8532ba0382792c4d", "html_url": "https://github.com/rust-lang/rust/commit/f66793757fd1cdfa6098ec1b8532ba0382792c4d"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "e09bcdcbc628ea8d2f5e9b244031359318907e05", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=0ba5e8a88ff05ccf4803e0bd54b3aabbc617956f", "patch": "@@ -86,10 +86,10 @@ impl<'tcx> Children {\n                 impl_def_id, simplified_self, possible_sibling,\n             );\n \n-            let overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n-                // Found overlap, but no specialization; error out.\n+            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n+\n                 OverlapError {\n                     with_impl: possible_sibling,\n                     trait_desc: trait_ref.print_only_trait_path().to_string(),\n@@ -106,21 +106,49 @@ impl<'tcx> Children {\n                 }\n             };\n \n-            let allowed_to_overlap =\n-                tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling);\n+            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,\n+                                        last_lint: &mut _| {\n+                // Found overlap, but no specialization; error out or report future-compat warning.\n+\n+                // Do we *still* get overlap if we disable the future-incompatible modes?\n+                let should_err = traits::overlapping_impls(\n+                    tcx,\n+                    possible_sibling,\n+                    impl_def_id,\n+                    traits::SkipLeakCheck::default(),\n+                    |_| true,\n+                    || false,\n+                );\n+\n+                let error = create_overlap_error(overlap);\n+\n+                if should_err {\n+                    Err(error)\n+                } else {\n+                    *last_lint = Some(FutureCompatOverlapError {\n+                        error,\n+                        kind: FutureCompatOverlapErrorKind::LeakCheck,\n+                    });\n+\n+                    Ok((false, false))\n+                }\n+            };\n \n+            let last_lint_mut = &mut last_lint;\n             let (le, ge) = traits::overlapping_impls(\n                 tcx,\n                 possible_sibling,\n                 impl_def_id,\n-                traits::SkipLeakCheck::default(),\n+                traits::SkipLeakCheck::Yes,\n                 |overlap| {\n-                    if let Some(overlap_kind) = &allowed_to_overlap {\n+                    if let Some(overlap_kind) =\n+                        tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling)\n+                    {\n                         match overlap_kind {\n                             ty::ImplOverlapKind::Permitted { marker: _ } => {}\n                             ty::ImplOverlapKind::Issue33140 => {\n-                                last_lint = Some(FutureCompatOverlapError {\n-                                    error: overlap_error(overlap),\n+                                *last_lint_mut = Some(FutureCompatOverlapError {\n+                                    error: create_overlap_error(overlap),\n                                     kind: FutureCompatOverlapErrorKind::Issue33140,\n                                 });\n                             }\n@@ -132,7 +160,11 @@ impl<'tcx> Children {\n                     let le = tcx.specializes((impl_def_id, possible_sibling));\n                     let ge = tcx.specializes((possible_sibling, impl_def_id));\n \n-                    if le == ge { Err(overlap_error(overlap)) } else { Ok((le, ge)) }\n+                    if le == ge {\n+                        report_overlap_error(overlap, last_lint_mut)\n+                    } else {\n+                        Ok((le, ge))\n+                    }\n                 },\n                 || Ok((false, false)),\n             )?;\n@@ -153,27 +185,8 @@ impl<'tcx> Children {\n \n                 replace_children.push(possible_sibling);\n             } else {\n-                if let None = allowed_to_overlap {\n-                    // Do future-compat checks for overlap.\n-\n-                    if last_lint.is_none() {\n-                        traits::overlapping_impls(\n-                            tcx,\n-                            possible_sibling,\n-                            impl_def_id,\n-                            traits::SkipLeakCheck::Yes,\n-                            |overlap| {\n-                                last_lint = Some(FutureCompatOverlapError {\n-                                    error: overlap_error(overlap),\n-                                    kind: FutureCompatOverlapErrorKind::LeakCheck,\n-                                });\n-                            },\n-                            || (),\n-                        );\n-                    }\n-                }\n-\n-                // no overlap (error bailed already via ?)\n+                // Either there's no overlap, or the overlap was already reported by\n+                // `overlap_error`.\n             }\n         }\n "}]}