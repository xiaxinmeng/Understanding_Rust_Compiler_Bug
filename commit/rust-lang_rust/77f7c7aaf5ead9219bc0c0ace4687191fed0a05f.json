{"sha": "77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjdjN2FhZjVlYWQ5MjE5YmMwYzBhY2U0Njg3MTkxZmVkMGEwNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T23:33:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-26T23:33:21Z"}, "message": "Auto merge of #38274 - elahn:windows-readconsole-ctrl-z, r=alexcrichton\n\nCtrl-Z returns from Stdin.read() when reading from the console on Windows\n\nFixes #19914.\nFixes read(), read_to_string(), read_to_end(), etc.\n\nr? @alexcrichton", "tree": {"sha": "0050fa8cb9b19bf73c36c7bf25e1dbd2be08428d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0050fa8cb9b19bf73c36c7bf25e1dbd2be08428d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "html_url": "https://github.com/rust-lang/rust/commit/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "html_url": "https://github.com/rust-lang/rust/commit/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d"}, {"sha": "f9bca00469f4e6826c79638a5058c838ab4c1925", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bca00469f4e6826c79638a5058c838ab4c1925", "html_url": "https://github.com/rust-lang/rust/commit/f9bca00469f4e6826c79638a5058c838ab4c1925"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "d1c404195bc68d5bde33a61f08cb9765694c2394", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "patch": "@@ -818,6 +818,16 @@ pub enum EXCEPTION_DISPOSITION {\n     ExceptionCollidedUnwind\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct CONSOLE_READCONSOLE_CONTROL {\n+    pub nLength: ULONG,\n+    pub nInitialChars: ULONG,\n+    pub dwCtrlWakeupMask: ULONG,\n+    pub dwControlKeyState: ULONG,\n+}\n+pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n+\n #[link(name = \"ws2_32\")]\n #[link(name = \"userenv\")]\n #[link(name = \"shell32\")]\n@@ -848,12 +858,11 @@ extern \"system\" {\n     pub fn LeaveCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n     pub fn DeleteCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n \n-    // FIXME - pInputControl should be PCONSOLE_READCONSOLE_CONTROL\n     pub fn ReadConsoleW(hConsoleInput: HANDLE,\n                         lpBuffer: LPVOID,\n                         nNumberOfCharsToRead: DWORD,\n                         lpNumberOfCharsRead: LPDWORD,\n-                        pInputControl: LPVOID) -> BOOL;\n+                        pInputControl: PCONSOLE_READCONSOLE_CONTROL) -> BOOL;\n \n     pub fn WriteConsoleW(hConsoleOutput: HANDLE,\n                          lpBuffer: LPCVOID,"}, {"sha": "b1a57c349fbb909e942fc854571ed57967e708ee", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f7c7aaf5ead9219bc0c0ace4687191fed0a05f/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=77f7c7aaf5ead9219bc0c0ace4687191fed0a05f", "patch": "@@ -111,19 +111,27 @@ impl Stdin {\n         if utf8.position() as usize == utf8.get_ref().len() {\n             let mut utf16 = vec![0u16; 0x1000];\n             let mut num = 0;\n+            let mut input_control = readconsole_input_control(CTRL_Z_MASK);\n             cvt(unsafe {\n                 c::ReadConsoleW(handle,\n                                 utf16.as_mut_ptr() as c::LPVOID,\n                                 utf16.len() as u32,\n                                 &mut num,\n-                                ptr::null_mut())\n+                                &mut input_control as c::PCONSOLE_READCONSOLE_CONTROL)\n             })?;\n             utf16.truncate(num as usize);\n             // FIXME: what to do about this data that has already been read?\n-            let data = match String::from_utf16(&utf16) {\n+            let mut data = match String::from_utf16(&utf16) {\n                 Ok(utf8) => utf8.into_bytes(),\n                 Err(..) => return Err(invalid_encoding()),\n             };\n+            if let Output::Console(_) = self.handle {\n+                if let Some(&last_byte) = data.last() {\n+                    if last_byte == CTRL_Z {\n+                        data.pop();\n+                    }\n+                }\n+            }\n             *utf8 = Cursor::new(data);\n         }\n \n@@ -217,6 +225,18 @@ fn invalid_encoding() -> io::Error {\n     io::Error::new(io::ErrorKind::InvalidData, \"text was not valid unicode\")\n }\n \n+fn readconsole_input_control(wakeup_mask: c::ULONG) -> c::CONSOLE_READCONSOLE_CONTROL {\n+    c::CONSOLE_READCONSOLE_CONTROL {\n+        nLength: ::mem::size_of::<c::CONSOLE_READCONSOLE_CONTROL>() as c::ULONG,\n+        nInitialChars: 0,\n+        dwCtrlWakeupMask: wakeup_mask,\n+        dwControlKeyState: 0,\n+    }\n+}\n+\n+const CTRL_Z: u8 = 0x1A;\n+const CTRL_Z_MASK: c::ULONG = 0x4000000; //1 << 0x1A\n+\n pub const EBADF_ERR: i32 = ::sys::c::ERROR_INVALID_HANDLE as i32;\n // The default buffer capacity is 64k, but apparently windows\n // doesn't like 64k reads on stdin. See #13304 for details, but the"}]}