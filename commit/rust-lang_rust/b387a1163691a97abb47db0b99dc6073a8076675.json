{"sha": "b387a1163691a97abb47db0b99dc6073a8076675", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODdhMTE2MzY5MWE5N2FiYjQ3ZGIwYjk5ZGM2MDczYTgwNzY2NzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-29T19:58:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T19:58:19Z"}, "message": "Rollup merge of #71095 - pickfire:box-from-array, r=dtolnay\n\nimpl From<[T; N]> for Box<[T]>\n\nBased on https://github.com/rust-lang/rust/pull/68692", "tree": {"sha": "85d34a053879fc126fc1b0e88b8e334d55195058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d34a053879fc126fc1b0e88b8e334d55195058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b387a1163691a97abb47db0b99dc6073a8076675", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0WlcCRBK7hj4Ov3rIwAAdHIIAAiRYAYdNSBO6yCTpcgOksE/\npDrda5OVhHNCruEAC6UaottTnG9POYQAvZVQjGNjTEdzoZwTVrUF7V7UgW00w6Pf\n2SICXYV14alg3jUHfAIVhEvmH9uWDw6tklHJHN7PLXYBJ8VKj1n0Imcf7TMle9XC\nREsjurp2qyHynwzrmKH0MLlzYfRqJtfqLavfQ/slrHdXdL4+WP2WLxIWiOaGIoTc\nTxM9wF9VfkGNBsoQLy73OF8n6wwBh+BBdAPLGHQSsM8nxJH0sel7abeUYvJzNtXQ\n0HFWz4w574IAu/k+75QKMa3QZhDDe0ZvoZLhA2UvhUZSeak46sJ7HxsPMz5Hk6s=\n=lUd6\n-----END PGP SIGNATURE-----\n", "payload": "tree 85d34a053879fc126fc1b0e88b8e334d55195058\nparent 81207802a0d83a2d43cb57f3a67f1b948d3b108f\nparent a8ed9aa9f016c60f5fa55326f1f6a30e2be9d83e\nauthor Ralf Jung <post@ralfj.de> 1590782299 +0200\ncommitter GitHub <noreply@github.com> 1590782299 +0200\n\nRollup merge of #71095 - pickfire:box-from-array, r=dtolnay\n\nimpl From<[T; N]> for Box<[T]>\n\nBased on https://github.com/rust-lang/rust/pull/68692\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b387a1163691a97abb47db0b99dc6073a8076675", "html_url": "https://github.com/rust-lang/rust/commit/b387a1163691a97abb47db0b99dc6073a8076675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b387a1163691a97abb47db0b99dc6073a8076675/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81207802a0d83a2d43cb57f3a67f1b948d3b108f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81207802a0d83a2d43cb57f3a67f1b948d3b108f", "html_url": "https://github.com/rust-lang/rust/commit/81207802a0d83a2d43cb57f3a67f1b948d3b108f"}, {"sha": "a8ed9aa9f016c60f5fa55326f1f6a30e2be9d83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ed9aa9f016c60f5fa55326f1f6a30e2be9d83e", "html_url": "https://github.com/rust-lang/rust/commit/a8ed9aa9f016c60f5fa55326f1f6a30e2be9d83e"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "8cc6f04c0653a401dbb5efdb70b3c745f4403ee1", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b387a1163691a97abb47db0b99dc6073a8076675/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b387a1163691a97abb47db0b99dc6073a8076675/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b387a1163691a97abb47db0b99dc6073a8076675", "patch": "@@ -865,6 +865,25 @@ impl From<Box<str>> for Box<[u8]> {\n     }\n }\n \n+#[stable(feature = \"box_from_array\", since = \"1.45.0\")]\n+impl<T, const N: usize> From<[T; N]> for Box<[T]>\n+where\n+    [T; N]: LengthAtMost32,\n+{\n+    /// Converts a `[T; N]` into a `Box<[T]>`\n+    ///\n+    /// This conversion moves the array to newly heap-allocated memory.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let boxed: Box<[u8]> = Box::from([4, 2]);\n+    /// println!(\"{:?}\", boxed);\n+    /// ```\n+    fn from(array: [T; N]) -> Box<[T]> {\n+        box array\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]>\n where"}, {"sha": "b4a083636b64fc237670e8ebc8f2ffa6142b1bdb", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-impls-length-32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs?ref=b387a1163691a97abb47db0b99dc6073a8076675", "patch": "@@ -18,6 +18,10 @@ pub fn yes_array_into_vec<T>() -> Vec<T> {\n     [].into()\n }\n \n+pub fn yes_array_into_box<T>() -> Box<[T]> {\n+    [].into()\n+}\n+\n use std::collections::VecDeque;\n \n pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>"}, {"sha": "48cf21d489adacdbf6001245e2f10fa22fa71ee7", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs?ref=b387a1163691a97abb47db0b99dc6073a8076675", "patch": "@@ -12,6 +12,8 @@ pub fn no_box() {\n     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n     //~^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n     //~^^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n+    let boxed_slice = <Box<[i32]>>::from([0; 33]);\n+    //~^ 15:42: 15:49: arrays only have std trait implementations for lengths 0..=32 [E0277]\n }\n \n pub fn no_rc() {"}, {"sha": "5c01603ab881c116310d13f0d4384c1505d30a55", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b387a1163691a97abb47db0b99dc6073a8076675/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=b387a1163691a97abb47db0b99dc6073a8076675", "patch": "@@ -18,10 +18,23 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<&str>>\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::borrow::Cow<'a, str>>>\n              <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::string::String>>\n-           and 21 others\n+           and 22 others\n    = note: required because of the requirements on the impl of `std::convert::Into<std::boxed::Box<[i32; 33]>>` for `std::boxed::Box<[i32]>`\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::boxed::Box<[i32]>>` for `std::boxed::Box<[i32; 33]>`\n \n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-types-no-impls-length-33.rs:15:42\n+   |\n+LL |     let boxed_slice = <Box<[i32]>>::from([0; 33]);\n+   |                                          ^^^^^^^\n+   |                                          |\n+   |                                          expected an implementor of trait `std::convert::From<[{integer}; 33]>`\n+   |                                          help: consider borrowing here: `&[0; 33]`\n+   |\n+   = note: the trait bound `[i32; 33]: std::convert::From<[{integer}; 33]>` is not satisfied\n+   = note: required because of the requirements on the impl of `std::convert::From<[i32; 33]>` for `std::boxed::Box<[i32]>`\n+   = note: required by `std::convert::From::from`\n+\n error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n   --> $DIR/alloc-types-no-impls-length-33.rs:12:23\n    |\n@@ -32,7 +45,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n              <std::boxed::Box<[T; N]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n    |\n LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n@@ -47,7 +60,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::rc::Rc<[i32]>>` for `std::rc::Rc<[i32; 33]>`\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n    |\n LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n@@ -56,7 +69,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n              <std::rc::Rc<[T; N]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:28:23\n    |\n LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n@@ -71,14 +84,14 @@ LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::sync::Arc<[i32]>>` for `std::sync::Arc<[i32; 33]>`\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:28:23\n    |\n LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n              <std::sync::Arc<[T; N]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}