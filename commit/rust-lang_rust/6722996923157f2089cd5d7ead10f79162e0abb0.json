{"sha": "6722996923157f2089cd5d7ead10f79162e0abb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjI5OTY5MjMxNTdmMjA4OWNkNWQ3ZWFkMTBmNzkxNjJlMGFiYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T04:28:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T04:28:49Z"}, "message": "Auto merge of #43854 - estebank:missing-cond, r=nikomatsakis\n\nPoint out missing if conditional\n\nOn a case where an else conditional is missing, point this out\ninstead of the token immediately after the (incorrect) else block:\n\n```\nerror: missing condition for `if` statemementt push fork -f\n\n  --> $DIR/issue-13483.rs:16:5\n   |\n13 |    } else if {\n   |             ^ expected if condition here\n```\n\ninstead of\n\n```\nerror: expected `{`, found `else`\n  --> ../../src/test/ui/issue-13483.rs:14:7\n   |\n14 |     } else {\n   |       ^^^^\n```\n\nFix #13483.", "tree": {"sha": "347c6a343b294adf6eaaad2e91eba995c5bf7059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347c6a343b294adf6eaaad2e91eba995c5bf7059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6722996923157f2089cd5d7ead10f79162e0abb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6722996923157f2089cd5d7ead10f79162e0abb0", "html_url": "https://github.com/rust-lang/rust/commit/6722996923157f2089cd5d7ead10f79162e0abb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6722996923157f2089cd5d7ead10f79162e0abb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942711e115834ea2b4d91e1b3d3ae84b69cad670", "url": "https://api.github.com/repos/rust-lang/rust/commits/942711e115834ea2b4d91e1b3d3ae84b69cad670", "html_url": "https://github.com/rust-lang/rust/commit/942711e115834ea2b4d91e1b3d3ae84b69cad670"}, {"sha": "f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9", "html_url": "https://github.com/rust-lang/rust/commit/f06323337dd0cf748e8a0ca49d91dac2eae6b4a9"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "fa4df2196a3c573d1a483ae5ee33376e7b771294", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6722996923157f2089cd5d7ead10f79162e0abb0", "patch": "@@ -844,6 +844,32 @@ pub struct Expr {\n     pub attrs: ThinVec<Attribute>\n }\n \n+impl Expr {\n+    /// Wether this expression would be valid somewhere that expects a value, for example, an `if`\n+    /// condition.\n+    pub fn returns(&self) -> bool {\n+        if let ExprKind::Block(ref block) = self.node {\n+            match block.stmts.last().map(|last_stmt| &last_stmt.node) {\n+                // implicit return\n+                Some(&StmtKind::Expr(_)) => true,\n+                Some(&StmtKind::Semi(ref expr)) => {\n+                    if let ExprKind::Ret(_) = expr.node {\n+                        // last statement is explicit return\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                }\n+                // This is a block that doesn't end in either an implicit or explicit return\n+                _ => false,\n+            }\n+        } else {\n+            // This is not a block, it is a value\n+            true\n+        }\n+    }\n+}\n+\n impl fmt::Debug for Expr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"expr({}: {})\", self.id, pprust::expr_to_string(self))"}, {"sha": "2b2f925306d9a9df100e70b9e7e0a30cffc4a832", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6722996923157f2089cd5d7ead10f79162e0abb0", "patch": "@@ -2965,6 +2965,18 @@ impl<'a> Parser<'a> {\n         }\n         let lo = self.prev_span;\n         let cond = self.parse_expr_res(RESTRICTION_NO_STRUCT_LITERAL, None)?;\n+\n+        // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n+        // verify that the last statement is either an implicit return (no `;`) or an explicit\n+        // return. This won't catch blocks with an explicit `return`, but that would be caught by\n+        // the dead code lint.\n+        if self.eat_keyword(keywords::Else) || !cond.returns() {\n+            let sp = lo.next_point();\n+            let mut err = self.diagnostic()\n+                .struct_span_err(sp, \"missing condition for `if` statemement\");\n+            err.span_label(sp, \"expected if condition here\");\n+            return Err(err)\n+        }\n         let thn = self.parse_block()?;\n         let mut els: Option<P<Expr>> = None;\n         let mut hi = thn.span;"}, {"sha": "863780439127642bce9520c075fe565469d6f555", "filename": "src/test/ui/issue-13483.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Ftest%2Fui%2Fissue-13483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Ftest%2Fui%2Fissue-13483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.rs?ref=6722996923157f2089cd5d7ead10f79162e0abb0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    if true {\n+    } else if {\n+    } else {\n+    }\n+}\n+\n+fn foo() {\n+    if true {\n+    } else if {\n+    }\n+    bar();\n+}\n+\n+fn bar() {}"}, {"sha": "3446969dfd21311b504756e2628f1297f96b345a", "filename": "src/test/ui/issue-13483.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Ftest%2Fui%2Fissue-13483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6722996923157f2089cd5d7ead10f79162e0abb0/src%2Ftest%2Fui%2Fissue-13483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13483.stderr?ref=6722996923157f2089cd5d7ead10f79162e0abb0", "patch": "@@ -0,0 +1,14 @@\n+error: missing condition for `if` statemement\n+  --> $DIR/issue-13483.rs:13:14\n+   |\n+13 |     } else if {\n+   |              ^ expected if condition here\n+\n+error: missing condition for `if` statemement\n+  --> $DIR/issue-13483.rs:20:14\n+   |\n+20 |     } else if {\n+   |              ^ expected if condition here\n+\n+error: aborting due to 2 previous errors\n+"}]}