{"sha": "42e895d4d99ec7724f3efd632f52170f3f99a5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZTg5NWQ0ZDk5ZWM3NzI0ZjNlZmQ2MzJmNTIxNzBmM2Y5OWE1YWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T21:44:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T21:44:44Z"}, "message": "Improve 'mut ' diagnostic.", "tree": {"sha": "ee1a9de1892767097e8a7ce767191648c78ef3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1a9de1892767097e8a7ce767191648c78ef3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e895d4d99ec7724f3efd632f52170f3f99a5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e895d4d99ec7724f3efd632f52170f3f99a5aa", "html_url": "https://github.com/rust-lang/rust/commit/42e895d4d99ec7724f3efd632f52170f3f99a5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e895d4d99ec7724f3efd632f52170f3f99a5aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbbe3363c94b120d1eba9cba01dadddd862716b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbe3363c94b120d1eba9cba01dadddd862716b8", "html_url": "https://github.com/rust-lang/rust/commit/dbbe3363c94b120d1eba9cba01dadddd862716b8"}], "stats": {"total": 119, "additions": 82, "deletions": 37}, "files": [{"sha": "1ffb112a5e87e08ec4ef0db32fbd5d46387794de", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -405,22 +405,13 @@ impl<'a> Parser<'a> {\n         let mut pat = self.parse_pat(Some(\"identifier\"))?;\n \n         // Add `mut` to any binding in the parsed pattern.\n-        struct AddMut;\n-        impl MutVisitor for AddMut {\n-            fn visit_pat(&mut self, pat: &mut P<Pat>) {\n-                if let PatKind::Ident(BindingMode::ByValue(ref mut m), ..) = pat.node {\n-                    *m = Mutability::Mutable;\n-                }\n-                noop_visit_pat(pat, self);\n-            }\n-        }\n-        AddMut.visit_pat(&mut pat);\n+        let changed_any_binding = Self::make_all_value_bindings_mutable(&mut pat);\n \n         // Unwrap; If we don't have `mut $ident`, error.\n         let pat = pat.into_inner();\n         match &pat.node {\n             PatKind::Ident(..) => {}\n-            _ => self.ban_mut_general_pat(mut_span, &pat),\n+            _ => self.ban_mut_general_pat(mut_span, &pat, changed_any_binding),\n         }\n \n         Ok(pat.node)\n@@ -442,17 +433,40 @@ impl<'a> Parser<'a> {\n         self.parse_pat_ident(BindingMode::ByRef(Mutability::Mutable))\n     }\n \n+    /// Turn all by-value immutable bindings in a pattern into mutable bindings.\n+    /// Returns `true` if any change was made.\n+    fn make_all_value_bindings_mutable(pat: &mut P<Pat>) -> bool {\n+        struct AddMut(bool);\n+        impl MutVisitor for AddMut {\n+            fn visit_pat(&mut self, pat: &mut P<Pat>) {\n+                if let PatKind::Ident(BindingMode::ByValue(ref mut m @ Mutability::Immutable), ..)\n+                    = pat.node\n+                {\n+                    *m = Mutability::Mutable;\n+                    self.0 = true;\n+                }\n+                noop_visit_pat(pat, self);\n+            }\n+        }\n+\n+        let mut add_mut = AddMut(false);\n+        add_mut.visit_pat(pat);\n+        add_mut.0\n+    }\n+\n     /// Error on `mut $pat` where `$pat` is not an ident.\n-    fn ban_mut_general_pat(&self, lo: Span, pat: &Pat) {\n+    fn ban_mut_general_pat(&self, lo: Span, pat: &Pat, changed_any_binding: bool) {\n         let span = lo.to(pat.span);\n-        self.struct_span_err(span, \"`mut` must be attached to each individual binding\")\n-            .span_suggestion(\n-                span,\n-                \"add `mut` to each binding\",\n-                pprust::pat_to_string(&pat),\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let fix = pprust::pat_to_string(&pat);\n+        let (problem, suggestion) = if changed_any_binding {\n+            (\"`mut` must be attached to each individual binding\", \"add `mut` to each binding\")\n+        } else {\n+            (\"`mut` must be followed by a named binding\", \"remove the `mut` prefix\")\n+        };\n+        self.struct_span_err(span, problem)\n+            .span_suggestion(span, suggestion, fix, Applicability::MachineApplicable)\n+            .note(\"`mut` may be followed by `variable` and `variable @ pattern`\")\n+            .emit()\n     }\n \n     /// Eat any extraneous `mut`s and error + recover if we ate any."}, {"sha": "500242030c6556ae272760b25ea848f953509fe0", "filename": "src/test/ui/parser/issue-32501.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32501.rs?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let mut b = 0;\n     let mut _b = 0;\n     let mut _ = 0;\n-    //~^ ERROR `mut` must be attached to each individual binding\n+    //~^ ERROR `mut` must be followed by a named binding\n }"}, {"sha": "d53302449a8067c8f293d82776d1cdc6d93c9fe6", "filename": "src/test/ui/parser/issue-32501.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32501.stderr?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -1,8 +1,10 @@\n-error: `mut` must be attached to each individual binding\n+error: `mut` must be followed by a named binding\n   --> $DIR/issue-32501.rs:7:9\n    |\n LL |     let mut _ = 0;\n-   |         ^^^^^ help: add `mut` to each binding: `_`\n+   |         ^^^^^ help: remove the `mut` prefix: `_`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: aborting due to previous error\n "}, {"sha": "d46186a0fea0e5712205c0c3e684dde5c859f2ae", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -6,6 +6,9 @@\n #![allow(warnings)]\n \n pub fn main() {\n+    let mut _ = 0; //~ ERROR `mut` must be followed by a named binding\n+    let mut (_, _) = (0, 0); //~ ERROR `mut` must be followed by a named binding\n+\n     let mut mut x = 0;\n     //~^ ERROR `mut` on a binding may not be repeated\n     //~| remove the additional `mut`s"}, {"sha": "18ffaa525587014d64e9ce6ac80cc29debea072a", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -1,29 +1,49 @@\n+error: `mut` must be followed by a named binding\n+  --> $DIR/mut-patterns.rs:9:9\n+   |\n+LL |     let mut _ = 0;\n+   |         ^^^^^ help: remove the `mut` prefix: `_`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n+error: `mut` must be followed by a named binding\n+  --> $DIR/mut-patterns.rs:10:9\n+   |\n+LL |     let mut (_, _) = (0, 0);\n+   |         ^^^^^^^^^^ help: remove the `mut` prefix: `(_, _)`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n error: `mut` on a binding may not be repeated\n-  --> $DIR/mut-patterns.rs:9:13\n+  --> $DIR/mut-patterns.rs:12:13\n    |\n LL |     let mut mut x = 0;\n    |             ^^^ help: remove the additional `mut`s\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:14:9\n+  --> $DIR/mut-patterns.rs:17:9\n    |\n LL |     let mut Foo { x: x } = Foo { x: 3 };\n    |         ^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { x: mut x }`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:18:9\n+  --> $DIR/mut-patterns.rs:21:9\n    |\n LL |     let mut Foo { x } = Foo { x: 3 };\n    |         ^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { mut x }`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` on a binding may not be repeated\n-  --> $DIR/mut-patterns.rs:23:13\n+  --> $DIR/mut-patterns.rs:26:13\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |             ^^^ help: remove the additional `mut`s\n \n error: expected identifier, found reserved keyword `yield`\n-  --> $DIR/mut-patterns.rs:23:17\n+  --> $DIR/mut-patterns.rs:26:17\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^ expected identifier, found reserved keyword\n@@ -33,7 +53,7 @@ LL |     let mut mut r#yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^^^\n \n error: expected identifier, found reserved keyword `become`\n-  --> $DIR/mut-patterns.rs:23:23\n+  --> $DIR/mut-patterns.rs:26:23\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                       ^^^^^^ expected identifier, found reserved keyword\n@@ -43,7 +63,7 @@ LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n    |                       ^^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/mut-patterns.rs:23:31\n+  --> $DIR/mut-patterns.rs:26:31\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                               ^^^^^ expected identifier, found reserved keyword\n@@ -53,25 +73,29 @@ LL |     let mut mut yield(become, r#await) = r#yield(0, 0);\n    |                               ^^^^^^^\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:23:9\n+  --> $DIR/mut-patterns.rs:26:9\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `r#yield(mut r#become, mut r#await)`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:32:9\n+  --> $DIR/mut-patterns.rs:35:9\n    |\n LL |     let mut W(mut a, W(b, W(ref c, W(d, B { box f }))))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `W(mut a, W(mut b, W(ref c, W(mut d, B { box mut f }))))`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: expected identifier, found `x`\n-  --> $DIR/mut-patterns.rs:39:21\n+  --> $DIR/mut-patterns.rs:42:21\n    |\n LL |             let mut $p = 0;\n    |                     ^^ expected identifier\n ...\n LL |     foo!(x);\n    |     -------- in this macro invocation\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "844f13c2f896a589fda4275db0ed2de87e7dc635", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n         ref Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         mut Self => (),\n-        //~^ ERROR `mut` must be attached to each individual binding\n+        //~^ ERROR `mut` must be followed by a named binding\n         //~| ERROR cannot find unit struct/variant or constant `Self`\n         ref mut Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`"}, {"sha": "bb631194bf3df61fa3da63404740d2e6a1733845", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42e895d4d99ec7724f3efd632f52170f3f99a5aa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=42e895d4d99ec7724f3efd632f52170f3f99a5aa", "patch": "@@ -10,11 +10,13 @@ error: expected identifier, found keyword `Self`\n LL |         ref Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n-error: `mut` must be attached to each individual binding\n+error: `mut` must be followed by a named binding\n   --> $DIR/self_type_keyword.rs:16:9\n    |\n LL |         mut Self => (),\n-   |         ^^^^^^^^ help: add `mut` to each binding: `Self`\n+   |         ^^^^^^^^ help: remove the `mut` prefix: `Self`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: expected identifier, found keyword `Self`\n   --> $DIR/self_type_keyword.rs:19:17"}]}