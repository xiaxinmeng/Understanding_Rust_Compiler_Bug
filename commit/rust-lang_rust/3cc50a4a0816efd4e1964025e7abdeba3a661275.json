{"sha": "3cc50a4a0816efd4e1964025e7abdeba3a661275", "node_id": "C_kwDOAAsO6NoAKDNjYzUwYTRhMDgxNmVmZDRlMTk2NDAyNWU3YWJkZWJhM2E2NjEyNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T01:35:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T01:35:55Z"}, "message": "Auto merge of #8882 - kyoto7250:get_first, r=llogiq\n\nfeat(lint): impl lint about use first() instead of get(0)\n\nclose #8851\n\nThis PR adds new lint about considering replacing .get(0) with .first().\n\nThank you in advance.\n\nchangelog: adds new lint [`get_first`] to consider replacing .get(0) with .first()", "tree": {"sha": "16c31c0dcc35d3ce530bc20bfd6b917b6124d4bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c31c0dcc35d3ce530bc20bfd6b917b6124d4bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc50a4a0816efd4e1964025e7abdeba3a661275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc50a4a0816efd4e1964025e7abdeba3a661275", "html_url": "https://github.com/rust-lang/rust/commit/3cc50a4a0816efd4e1964025e7abdeba3a661275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc50a4a0816efd4e1964025e7abdeba3a661275/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97784fd07b1981292703fb136cf6e4f7cddc113", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97784fd07b1981292703fb136cf6e4f7cddc113", "html_url": "https://github.com/rust-lang/rust/commit/b97784fd07b1981292703fb136cf6e4f7cddc113"}, {"sha": "d0f93c12a2a6f0d693507ff6325fed62720e616b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f93c12a2a6f0d693507ff6325fed62720e616b", "html_url": "https://github.com/rust-lang/rust/commit/d0f93c12a2a6f0d693507ff6325fed62720e616b"}], "stats": {"total": 280, "additions": 234, "deletions": 46}, "files": [{"sha": "0f6295a45f3fbbd63491a522c268f7ef24a068b1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -3435,6 +3435,7 @@ Released 2018-09-13\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n+[`get_first`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_first\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n [`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion"}, {"sha": "0748ab45252ad3d8decd4ad9b8e80a99afc0f29c", "filename": "clippy_lints/src/get_first.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -0,0 +1,69 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_slice_of_primitives, match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(0)` instead of\n+    /// `x.first()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.first()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.get(0);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.first();\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub GET_FIRST,\n+    style,\n+    \"Using `x.get(0)` when `x.first()` is simpler\"\n+}\n+declare_lint_pass!(GetFirst => [GET_FIRST]);\n+\n+impl<'tcx> LateLintPass<'tcx> for GetFirst {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(_, [struct_calling_on, method_arg], _) = &expr.kind;\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, expr_def_id, &paths::SLICE_GET);\n+\n+            if let Some(_) = is_slice_of_primitives(cx, struct_calling_on);\n+            if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = method_arg.kind;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let slice_name = snippet_with_applicability(\n+                    cx,\n+                    struct_calling_on.span, \"..\",\n+                    &mut applicability,\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    GET_FIRST,\n+                    expr.span,\n+                    &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                    \"try\",\n+                    format!(\"{}.first()\", slice_name),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "a028b41db7740af125b61df78aed18d3f7779cea", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -91,6 +91,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),"}, {"sha": "570d736518bde84802c671305f7afed333bb57e1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -183,6 +183,7 @@ store.register_lints(&[\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n+    get_first::GET_FIRST,\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,"}, {"sha": "ea2e1082458c29b53840d673df6eb6af43a5d148", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -31,6 +31,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),"}, {"sha": "5f636e5114bddbf76bad91fd964a84f0b56c852c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -242,6 +242,7 @@ mod from_over_into;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n+mod get_first;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n@@ -904,6 +905,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n+    store.register_late_pass(|| Box::new(get_first::GetFirst));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b8d1dabe007641423c65a180080412c750222117", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -34,13 +34,18 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             if let ast::LitKind::Int(start_idx, _) = start_lit.node;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n+                let suggest = if start_idx == 0 {\n+                    format!(\"{}.first()\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n+                } else {\n+                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx)\n+                };\n                 span_lint_and_sugg(\n                     cx,\n                     ITER_NEXT_SLICE,\n                     expr.span,\n                     \"using `.iter().next()` on a Slice without end index\",\n                     \"try calling\",\n-                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx),\n+                    suggest,\n                     applicability,\n                 );\n             }\n@@ -55,7 +60,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             \"using `.iter().next()` on an array\",\n             \"try calling\",\n             format!(\n-                \"{}.get(0)\",\n+                \"{}.first()\",\n                 snippet_with_applicability(cx, caller_expr.span, \"..\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "0064694ff929f7600e25b03453c0fcfbbd71fb46", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -141,6 +141,7 @@ pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];\n pub const SLICE_FROM_RAW_PARTS_MUT: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts_mut\"];\n+pub const SLICE_GET: [&str; 4] = [\"core\", \"slice\", \"<impl [T]>\", \"get\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];"}, {"sha": "0e82fb20e45585817de8323ec873f8ad73623d1a", "filename": "tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: --test\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::get_first, clippy::from_iter_instead_of_collect)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "46faa0a7b9117f79dd456086a56a341b3a443993", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -1,7 +1,7 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n-#![allow(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_closure_call, clippy::get_first)]\n \n \n struct S;"}, {"sha": "def58afa4fbf2316651aec3456ec1887c0099e49", "filename": "tests/ui/get_first.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.fixed?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.first(); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.first(); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.first(); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "85a381854cd3be0a734306362f0961e0e21dbe08", "filename": "tests/ui/get_first.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(0); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.get(0); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.get(0); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "466beff9c92df65d6989d6642c7eb1b635b763b6", "filename": "tests/ui/get_first.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.stderr?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -0,0 +1,22 @@\n+error: accessing first element with `x.get(0)`\n+  --> $DIR/get_first.rs:19:13\n+   |\n+LL |     let _ = x.get(0); // Use x.first()\n+   |             ^^^^^^^^ help: try: `x.first()`\n+   |\n+   = note: `-D clippy::get-first` implied by `-D warnings`\n+\n+error: accessing first element with `y.get(0)`\n+  --> $DIR/get_first.rs:24:13\n+   |\n+LL |     let _ = y.get(0); // Use y.first()\n+   |             ^^^^^^^^ help: try: `y.first()`\n+\n+error: accessing first element with `z.get(0)`\n+  --> $DIR/get_first.rs:29:13\n+   |\n+LL |     let _ = z.get(0); // Use z.first()\n+   |             ^^^^^^^^ help: try: `z.first()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5827fc7d76e60b8e71303caf3cbac793d1d585de", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect, clippy::get_first)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "a2a323c14fb7c827f6a439e8495d17708b3fa3a3", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect, clippy::get_first)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "f612d26aaabccd26bb41e0c712de7ddb8327da8d", "filename": "tests/ui/iter_next_slice.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.fixed?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -6,17 +6,17 @@ fn main() {\n     let s = [1, 2, 3];\n     let v = vec![1, 2, 3];\n \n-    let _ = s.get(0);\n-    // Should be replaced by s.get(0)\n+    let _ = s.first();\n+    // Should be replaced by s.first()\n \n     let _ = s.get(2);\n     // Should be replaced by s.get(2)\n \n     let _ = v.get(5);\n     // Should be replaced by v.get(5)\n \n-    let _ = v.get(0);\n-    // Should be replaced by v.get(0)\n+    let _ = v.first();\n+    // Should be replaced by v.first()\n \n     let o = Some(5);\n     o.iter().next();"}, {"sha": "5195f1c86675fcde359783afbeb8468e5b59f17a", "filename": "tests/ui/iter_next_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let v = vec![1, 2, 3];\n \n     let _ = s.iter().next();\n-    // Should be replaced by s.get(0)\n+    // Should be replaced by s.first()\n \n     let _ = s[2..].iter().next();\n     // Should be replaced by s.get(2)\n@@ -16,7 +16,7 @@ fn main() {\n     // Should be replaced by v.get(5)\n \n     let _ = v.iter().next();\n-    // Should be replaced by v.get(0)\n+    // Should be replaced by v.first()\n \n     let o = Some(5);\n     o.iter().next();"}, {"sha": "d8b89061ff8954ebb4862cad8b0b5e443ab64949", "filename": "tests/ui/iter_next_slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fiter_next_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.stderr?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -2,7 +2,7 @@ error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:9:13\n    |\n LL |     let _ = s.iter().next();\n-   |             ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `s.first()`\n    |\n    = note: `-D clippy::iter-next-slice` implied by `-D warnings`\n \n@@ -22,7 +22,7 @@ error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:18:13\n    |\n LL |     let _ = v.iter().next();\n-   |             ^^^^^^^^^^^^^^^ help: try calling: `v.get(0)`\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `v.first()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fc686b1dac0e135900213be13f191040abcd10fb", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -4,7 +4,8 @@\n     clippy::boxed_local,\n     clippy::needless_pass_by_value,\n     clippy::unnecessary_wraps,\n-    dyn_drop\n+    dyn_drop,\n+    clippy::get_first\n )]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}"}, {"sha": "3c428fd4674ce754b9ebc30f36961d0959a0923a", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cc50a4a0816efd4e1964025e7abdeba3a661275/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=3cc50a4a0816efd4e1964025e7abdeba3a661275", "patch": "@@ -1,187 +1,187 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:10:1\n+  --> $DIR/needless_lifetimes.rs:11:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:12:1\n+  --> $DIR/needless_lifetimes.rs:13:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:22:1\n+  --> $DIR/needless_lifetimes.rs:23:1\n    |\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:56:1\n+  --> $DIR/needless_lifetimes.rs:57:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:61:1\n+  --> $DIR/needless_lifetimes.rs:62:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:73:1\n+  --> $DIR/needless_lifetimes.rs:74:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:97:1\n+  --> $DIR/needless_lifetimes.rs:98:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:127:5\n+  --> $DIR/needless_lifetimes.rs:128:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:136:5\n+  --> $DIR/needless_lifetimes.rs:137:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:155:1\n+  --> $DIR/needless_lifetimes.rs:156:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:185:1\n+  --> $DIR/needless_lifetimes.rs:186:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:191:1\n+  --> $DIR/needless_lifetimes.rs:192:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:210:1\n+  --> $DIR/needless_lifetimes.rs:211:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:218:1\n+  --> $DIR/needless_lifetimes.rs:219:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:254:1\n+  --> $DIR/needless_lifetimes.rs:255:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:261:9\n+  --> $DIR/needless_lifetimes.rs:262:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:265:9\n+  --> $DIR/needless_lifetimes.rs:266:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:278:9\n+  --> $DIR/needless_lifetimes.rs:279:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:310:5\n+  --> $DIR/needless_lifetimes.rs:311:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:319:5\n+  --> $DIR/needless_lifetimes.rs:320:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:331:5\n+  --> $DIR/needless_lifetimes.rs:332:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:346:5\n+  --> $DIR/needless_lifetimes.rs:347:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:359:5\n+  --> $DIR/needless_lifetimes.rs:360:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:362:5\n+  --> $DIR/needless_lifetimes.rs:363:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:384:9\n+  --> $DIR/needless_lifetimes.rs:385:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:387:9\n+  --> $DIR/needless_lifetimes.rs:388:9\n    |\n LL |         fn implicit_mut<'a>(&'a mut self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:398:9\n+  --> $DIR/needless_lifetimes.rs:399:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:404:9\n+  --> $DIR/needless_lifetimes.rs:405:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:405:9\n+  --> $DIR/needless_lifetimes.rs:406:9\n    |\n LL |         fn implicit_provided<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:414:9\n+  --> $DIR/needless_lifetimes.rs:415:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:415:9\n+  --> $DIR/needless_lifetimes.rs:416:9\n    |\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}