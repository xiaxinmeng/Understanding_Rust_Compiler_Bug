{"sha": "7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "node_id": "C_kwDOAAsO6NoAKDcwMDBlNzU4YzE5NDcyYmIxZTY0MmU1YjRiZDQ2M2EzYjVjOGNhNjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T15:57:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T15:57:27Z"}, "message": "Auto merge of #8564 - Jarcho:transmute_erase_regions, r=Alexendoo\n\nDon't lint `useless_transmute` on types with erased regions\n\nfixes #6356\nfixes #3340\nfixes #2906\n\nThis should get a proper fix at some point, but this at least gets the lint running on some types.\n\ncc #5343\n\nchangelog: Don't lint `useless_transmute` on types with erased regions", "tree": {"sha": "e62852b382b2cf93d8752fe45f5dd2970a979d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62852b382b2cf93d8752fe45f5dd2970a979d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "html_url": "https://github.com/rust-lang/rust/commit/7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9add456618532976498043379f0e15a2a542a5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9add456618532976498043379f0e15a2a542a5a9", "html_url": "https://github.com/rust-lang/rust/commit/9add456618532976498043379f0e15a2a542a5a9"}, {"sha": "0c6ebf1c6abd86c92c063e03fa38de247eae8782", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6ebf1c6abd86c92c063e03fa38de247eae8782", "html_url": "https://github.com/rust-lang/rust/commit/0c6ebf1c6abd86c92c063e03fa38de247eae8782"}], "stats": {"total": 161, "additions": 88, "deletions": 73}, "files": [{"sha": "8567b6b8a7e6a8191d6cff17193ffa10ae910b18", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -305,6 +305,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),\n     LintId::of(types::BORROWED_BOX),"}, {"sha": "fe8637faf97539a42f9a3ef3a535e6c77611cc5e", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -90,6 +90,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(types::BORROWED_BOX),\n     LintId::of(types::TYPE_COMPLEXITY),\n     LintId::of(types::VEC_BOX),"}, {"sha": "f961952991f54c046a98af2e8c02a15d339c6485", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -31,7 +31,6 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n     LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n-    LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(unused_rounding::UNUSED_ROUNDING),\n     LintId::of(use_self::USE_SELF),\n ])"}, {"sha": "cbe1406728bc7d61dd6c87b0d216cdaae85e5221", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub USELESS_TRANSMUTE,\n-    nursery,\n+    complexity,\n     \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n "}, {"sha": "a0d104e239042e6ce4b091a1c7b9e16a9151f359", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n@@ -16,7 +16,7 @@ pub(super) fn check<'tcx>(\n     arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        _ if from_ty == to_ty => {\n+        _ if from_ty == to_ty && !from_ty.has_erased_regions() => {\n             span_lint(\n                 cx,\n                 USELESS_TRANSMUTE,\n@@ -26,28 +26,31 @@ pub(super) fn check<'tcx>(\n             true\n         },\n         (ty::Ref(_, rty, rty_mutbl), ty::RawPtr(ptr_ty)) => {\n-            span_lint_and_then(\n-                cx,\n-                USELESS_TRANSMUTE,\n-                e.span,\n-                \"transmute from a reference to a pointer\",\n-                |diag| {\n-                    if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        let rty_and_mut = ty::TypeAndMut {\n-                            ty: *rty,\n-                            mutbl: *rty_mutbl,\n-                        };\n+            // No way to give the correct suggestion here. Avoid linting for now.\n+            if !rty.has_erased_regions() {\n+                span_lint_and_then(\n+                    cx,\n+                    USELESS_TRANSMUTE,\n+                    e.span,\n+                    \"transmute from a reference to a pointer\",\n+                    |diag| {\n+                        if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n+                            let rty_and_mut = ty::TypeAndMut {\n+                                ty: *rty,\n+                                mutbl: *rty_mutbl,\n+                            };\n \n-                        let sugg = if *ptr_ty == rty_and_mut {\n-                            arg.as_ty(to_ty)\n-                        } else {\n-                            arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n-                        };\n+                            let sugg = if *ptr_ty == rty_and_mut {\n+                                arg.as_ty(to_ty)\n+                            } else {\n+                                arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n+                            };\n \n-                        diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n-                    }\n-                },\n-            );\n+                            diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                        }\n+                    },\n+                );\n+            }\n             true\n         },\n         (ty::Int(_) | ty::Uint(_), ty::RawPtr(_)) => {"}, {"sha": "001c910239affa60e9476ea9c0ed71844340db86", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -16,7 +16,8 @@ fn my_vec() -> MyVec<i32> {\n #[allow(clippy::needless_lifetimes, clippy::transmute_ptr_to_ptr)]\n #[warn(clippy::useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n-    let _: &'a T = core::intrinsics::transmute(t);\n+    // FIXME: should lint\n+    // let _: &'a T = core::intrinsics::transmute(t);\n \n     let _: &'a U = core::intrinsics::transmute(t);\n \n@@ -48,6 +49,22 @@ fn useless() {\n \n         let _ = (1 + 1_usize) as *const usize;\n     }\n+\n+    unsafe fn _f<'a, 'b>(x: &'a u32) -> &'b u32 {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f2<'a, 'b>(x: *const (dyn Iterator<Item = u32> + 'a)) -> *const (dyn Iterator<Item = u32> + 'b) {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f3<'a, 'b>(x: fn(&'a u32)) -> fn(&'b u32) {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f4<'a, 'b>(x: std::borrow::Cow<'a, str>) -> std::borrow::Cow<'b, str> {\n+        std::mem::transmute(x)\n+    }\n }\n \n struct Usize(usize);"}, {"sha": "008b4a981d7e68126a9d96ed3742a454acba11be", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -1,250 +1,244 @@\n-error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:19:20\n-   |\n-LL |     let _: &'a T = core::intrinsics::transmute(t);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n-\n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:23:23\n+  --> $DIR/transmute.rs:24:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:25:21\n+  --> $DIR/transmute.rs:26:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:27:23\n+  --> $DIR/transmute.rs:28:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:33:27\n+  --> $DIR/transmute.rs:34:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:35:27\n+  --> $DIR/transmute.rs:36:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:37:27\n+  --> $DIR/transmute.rs:38:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:39:27\n+  --> $DIR/transmute.rs:40:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:41:27\n+  --> $DIR/transmute.rs:42:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:43:31\n+  --> $DIR/transmute.rs:44:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:47:31\n+  --> $DIR/transmute.rs:48:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:62:24\n+  --> $DIR/transmute.rs:79:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:64:24\n+  --> $DIR/transmute.rs:81:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:66:31\n+  --> $DIR/transmute.rs:83:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:68:29\n+  --> $DIR/transmute.rs:85:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:74:28\n+  --> $DIR/transmute.rs:91:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:92:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:84:28\n+  --> $DIR/transmute.rs:101:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:90:31\n+  --> $DIR/transmute.rs:107:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:91:31\n+  --> $DIR/transmute.rs:108:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:92:31\n+  --> $DIR/transmute.rs:109:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:93:31\n+  --> $DIR/transmute.rs:110:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:113:30\n+  --> $DIR/transmute.rs:130:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n    |\n    = note: `-D clippy::transmute-num-to-bytes` implied by `-D warnings`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:114:30\n+  --> $DIR/transmute.rs:131:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:115:31\n+  --> $DIR/transmute.rs:132:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:116:30\n+  --> $DIR/transmute.rs:133:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:117:30\n+  --> $DIR/transmute.rs:134:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:118:31\n+  --> $DIR/transmute.rs:135:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `f32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:119:30\n+  --> $DIR/transmute.rs:136:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0.0f32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f32.to_ne_bytes()`\n \n error: transmute from a `f64` to a `[u8; 8]`\n-  --> $DIR/transmute.rs:120:30\n+  --> $DIR/transmute.rs:137:30\n    |\n LL |             let _: [u8; 8] = std::mem::transmute(0.0f64);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f64.to_ne_bytes()`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:125:30\n+  --> $DIR/transmute.rs:142:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:126:30\n+  --> $DIR/transmute.rs:143:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:127:31\n+  --> $DIR/transmute.rs:144:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:128:30\n+  --> $DIR/transmute.rs:145:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:129:30\n+  --> $DIR/transmute.rs:146:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:130:31\n+  --> $DIR/transmute.rs:147:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:140:28\n+  --> $DIR/transmute.rs:157:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(B) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(B).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:141:32\n+  --> $DIR/transmute.rs:158:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:142:30\n+  --> $DIR/transmute.rs:159:30\n    |\n LL |     const _: &str = unsafe { std::mem::transmute(B) };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_unchecked(B)`\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "ebcaa7a84cfb1e9efc1601d6ac0691c4ad89f790", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7000e758c19472bb1e642e5b4bd463a3b5c8ca68/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::transmute_undefined_repr)]\n-#![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref, clippy::useless_transmute)]\n \n use core::any::TypeId;\n use core::ffi::c_void;"}]}