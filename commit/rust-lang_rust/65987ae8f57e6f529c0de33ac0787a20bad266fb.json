{"sha": "65987ae8f57e6f529c0de33ac0787a20bad266fb", "node_id": "C_kwDOAAsO6NoAKDY1OTg3YWU4ZjU3ZTZmNTI5YzBkZTMzYWMwNzg3YTIwYmFkMjY2ZmI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-19T07:20:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-19T07:21:54Z"}, "message": "Make std::sys::wasm::futex consistent with unix::futex.", "tree": {"sha": "74755863e665ba25824052b5435fadfeb73d1c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74755863e665ba25824052b5435fadfeb73d1c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65987ae8f57e6f529c0de33ac0787a20bad266fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65987ae8f57e6f529c0de33ac0787a20bad266fb", "html_url": "https://github.com/rust-lang/rust/commit/65987ae8f57e6f529c0de33ac0787a20bad266fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65987ae8f57e6f529c0de33ac0787a20bad266fb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8305398d7ae6128811ec2b3223939bcd067530c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8305398d7ae6128811ec2b3223939bcd067530c2", "html_url": "https://github.com/rust-lang/rust/commit/8305398d7ae6128811ec2b3223939bcd067530c2"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "11413ba3bf5642d484b1a3de09f3c0579b18e426", "filename": "library/std/src/sys/wasm/atomics/futex.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65987ae8f57e6f529c0de33ac0787a20bad266fb/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65987ae8f57e6f529c0de33ac0787a20bad266fb/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs?ref=65987ae8f57e6f529c0de33ac0787a20bad266fb", "patch": "@@ -3,19 +3,33 @@ use crate::convert::TryInto;\n use crate::sync::atomic::AtomicU32;\n use crate::time::Duration;\n \n-pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) {\n+/// Wait for a futex_wake operation to wake us.\n+///\n+/// Returns directly if the futex doesn't hold the expected value.\n+///\n+/// Returns false on timeout, and true in all other cases.\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     let timeout = timeout.and_then(|t| t.as_nanos().try_into().ok()).unwrap_or(-1);\n     unsafe {\n         wasm32::memory_atomic_wait32(\n             futex as *const AtomicU32 as *mut i32,\n             expected as i32,\n             timeout,\n-        );\n+        ) < 2\n     }\n }\n \n-pub fn futex_wake(futex: &AtomicU32) {\n+/// Wake up one thread that's blocked on futex_wait on this futex.\n+///\n+/// Returns true if this actually woke up such a thread,\n+/// or false if no thread was waiting on this futex.\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    unsafe { wasm32::memory_atomic_notify(futex as *const AtomicU32 as *mut i32, 1) > 0 }\n+}\n+\n+/// Wake up all threads that are waiting on futex_wait on this futex.\n+pub fn futex_wake_all(futex: &AtomicU32) {\n     unsafe {\n-        wasm32::memory_atomic_notify(futex as *const AtomicU32 as *mut i32, 1);\n+        wasm32::memory_atomic_notify(futex as *const AtomicU32 as *mut i32, i32::MAX as u32);\n     }\n }"}]}