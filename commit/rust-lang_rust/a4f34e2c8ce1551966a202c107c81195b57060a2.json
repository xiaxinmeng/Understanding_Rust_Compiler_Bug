{"sha": "a4f34e2c8ce1551966a202c107c81195b57060a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZjM0ZTJjOGNlMTU1MTk2NmEyMDJjMTA3YzgxMTk1YjU3MDYwYTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-21T16:18:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-21T16:28:47Z"}, "message": "Acquire original text range when searching for references", "tree": {"sha": "ff1210bc8b7e09b9ed6091186311253392cae27d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1210bc8b7e09b9ed6091186311253392cae27d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4f34e2c8ce1551966a202c107c81195b57060a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f34e2c8ce1551966a202c107c81195b57060a2", "html_url": "https://github.com/rust-lang/rust/commit/a4f34e2c8ce1551966a202c107c81195b57060a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4f34e2c8ce1551966a202c107c81195b57060a2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04525253a06e0c598fcd91c871bf4f19de6394b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04525253a06e0c598fcd91c871bf4f19de6394b7", "html_url": "https://github.com/rust-lang/rust/commit/04525253a06e0c598fcd91c871bf4f19de6394b7"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "33b7358f72242c699a0f404bdf1e5fa857acf10f", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a4f34e2c8ce1551966a202c107c81195b57060a2/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f34e2c8ce1551966a202c107c81195b57060a2/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=a4f34e2c8ce1551966a202c107c81195b57060a2", "patch": "@@ -147,32 +147,32 @@ fn find_name(\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n         let def = NameClass::classify(sema, &name)?.referenced_or_defined(sema.db);\n-        let range = name.syntax().text_range();\n+        let FileRange { range, .. } = sema.original_range(name.syntax());\n         return Some(RangeInfo::new(range, def));\n     }\n \n-    let (text_range, def) = if let Some(lifetime) =\n+    let (FileRange { range, .. }, def) = if let Some(lifetime) =\n         sema.find_node_at_offset_with_descend::<ast::Lifetime>(&syntax, position.offset)\n     {\n         if let Some(def) = NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| NameRefClass::referenced(class, sema.db))\n         {\n-            (lifetime.syntax().text_range(), def)\n+            (sema.original_range(lifetime.syntax()), def)\n         } else {\n             (\n-                lifetime.syntax().text_range(),\n+                sema.original_range(lifetime.syntax()),\n                 NameClass::classify_lifetime(sema, &lifetime)?.referenced_or_defined(sema.db),\n             )\n         }\n     } else {\n         let name_ref =\n             sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n         (\n-            name_ref.syntax().text_range(),\n+            sema.original_range(name_ref.syntax()),\n             NameRefClass::classify(sema, &name_ref)?.referenced(sema.db),\n         )\n     };\n-    Some(RangeInfo::new(text_range, def))\n+    Some(RangeInfo::new(range, def))\n }\n \n fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {\n@@ -1086,4 +1086,40 @@ impl<'a> Foo<'a> for &'a () {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_map_range_to_original() {\n+        check(\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a<|> = \"test\";\n+    foo!(a);\n+}\n+\"#,\n+            expect![[r#\"\n+                a Local FileId(0) 59..60 Other\n+\n+                FileId(0) 80..81 Other Read\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_map_range_to_original_ref() {\n+        check(\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a = \"test\";\n+    foo!(a<|>);\n+}\n+\"#,\n+            expect![[r#\"\n+                a Local FileId(0) 59..60 Other\n+\n+                FileId(0) 80..81 Other Read\n+            \"#]],\n+        );\n+    }\n }"}]}