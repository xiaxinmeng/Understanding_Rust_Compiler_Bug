{"sha": "1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDRmZWU4OGQ0OGU5Zjc4NDRjNmQzMTZhZTg1NDBkYjE5ZGM5ZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-20T22:35:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-20T22:35:41Z"}, "message": "Auto merge of #46130 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #46082, #46088, #46092, #46107, #46119, #46121, #46122, #46124, #46128\n- Failed merges:", "tree": {"sha": "9172d777e1fb0167b82154a5391cf53ed9cac16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9172d777e1fb0167b82154a5391cf53ed9cac16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "html_url": "https://github.com/rust-lang/rust/commit/1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33374fa9d09e2a790979b31e61100dfed4b44139", "url": "https://api.github.com/repos/rust-lang/rust/commits/33374fa9d09e2a790979b31e61100dfed4b44139", "html_url": "https://github.com/rust-lang/rust/commit/33374fa9d09e2a790979b31e61100dfed4b44139"}, {"sha": "079a6e4cc2ade85faf8c7a4be1bbbd60c7aee9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/079a6e4cc2ade85faf8c7a4be1bbbd60c7aee9c1", "html_url": "https://github.com/rust-lang/rust/commit/079a6e4cc2ade85faf8c7a4be1bbbd60c7aee9c1"}], "stats": {"total": 163, "additions": 114, "deletions": 49}, "files": [{"sha": "fc0a3c0fd881ae6029417d4fa7ac107a4aa04943", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -1328,7 +1328,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Arc<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Arc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&self.ptr, f)\n+        fmt::Pointer::fmt(&(&**self as *const T), f)\n     }\n }\n "}, {"sha": "77f65412bd3e199d0d03d35a32635101d595d0c2", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Utilities for formatting and printing `String`s\n+//! Utilities for formatting and printing `String`s.\n //!\n //! This module contains the runtime support for the [`format!`] syntax extension.\n //! This macro is implemented in the compiler to emit calls to this module in"}, {"sha": "72b9fa0eb47213ebca9dfdc1ca497d4caa3e0856", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -1072,7 +1072,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Rc<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> fmt::Pointer for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&self.ptr, f)\n+        fmt::Pointer::fmt(&(&**self as *const T), f)\n     }\n }\n "}, {"sha": "6e8515f0b36254c338c8dc01ceb91a7161ad20eb", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -1734,7 +1734,7 @@ impl str {\n     /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// assert_eq!(\"1fooX\".trim_left_matches(|c| c == '1' || c == 'X'), \"fooX\");\n+    /// assert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str"}, {"sha": "122baec8e58dc6d91d7bbc9a1decc0581f8e771d", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -361,7 +361,7 @@ macro_rules! try {\n     })\n }\n \n-/// Write formatted data into a buffer\n+/// Write formatted data into a buffer.\n ///\n /// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n /// formatted according to the specified format string and the result will be passed to the writer."}, {"sha": "ec173ef66f63ecd5fccb0b09f4b369122a20f1f4", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -91,7 +91,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                     IllegalMoveOriginKind::Static =>\n                         tcx.cannot_move_out_of(span, \"static item\", origin),\n                     IllegalMoveOriginKind::BorrowedContent =>\n-                        tcx.cannot_move_out_of(span, \"borrowed_content\", origin),\n+                        tcx.cannot_move_out_of(span, \"borrowed content\", origin),\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } =>\n                         tcx.cannot_move_out_of_interior_of_drop(span, ty, origin),\n                     IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } =>"}, {"sha": "645a4c2115095e575c5c0d72935fb2e6faceb0ed", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n //! This module provides constants which are specific to the implementation\n-//! of the `f32` floating point data type. Mathematically significant\n-//! numbers are provided in the `consts` sub-module.\n+//! of the `f32` floating point data type.\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n //! *[See also the `f32` primitive type](../primitive.f32.html).*\n "}, {"sha": "7fd798155bd5957a87ebf8e5b5271fbc61d6f459", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n //! This module provides constants which are specific to the implementation\n-//! of the `f64` floating point data type. Mathematically significant\n-//! numbers are provided in the `consts` sub-module.\n+//! of the `f64` floating point data type.\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n //! *[See also the `f64` primitive type](../primitive.f64.html).*\n "}, {"sha": "62313d7d3a6e8bcec09958cc20bead711189b04e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -419,14 +419,8 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// [`File`]s implement `Read`:\n ///\n-/// [`read()`]: trait.Read.html#tymethod.read\n-/// [`std::io`]: ../../std/io/index.html\n-/// [`File`]: ../fs/struct.File.html\n-/// [`BufRead`]: trait.BufRead.html\n-/// [`BufReader`]: struct.BufReader.html\n-///\n /// ```\n-/// use std::io;\n+/// # use std::io;\n /// use std::io::prelude::*;\n /// use std::fs::File;\n ///\n@@ -449,6 +443,32 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// # Ok(())\n /// # }\n /// ```\n+///\n+/// Read from `&str` because [`&[u8]`] implements [`Read`]:\n+///\n+/// ```\n+/// # use std::io;\n+/// use std::io::prelude::*;\n+///\n+/// # fn foo() -> io::Result<()> {\n+/// let mut b = \"This string will be read\".as_bytes();\n+/// let mut buffer = [0; 10];\n+///\n+/// // read up to 10 bytes\n+/// b.read(&mut buffer)?;\n+///\n+/// // etc... it works exactly as a File does!\n+/// # Ok(())\n+/// # }\n+/// ```\n+///\n+/// [`read()`]: trait.Read.html#tymethod.read\n+/// [`std::io`]: ../../std/io/index.html\n+/// [`File`]: ../fs/struct.File.html\n+/// [`BufRead`]: trait.BufRead.html\n+/// [`BufReader`]: struct.BufReader.html\n+/// [`&[u8]`]: primitive.slice.html\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning"}, {"sha": "219e55d6c12062baf44552036ca1eac14d2a450a", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Panic support in the standard library\n+//! Panic support in the standard library.\n \n #![stable(feature = \"std_panic\", since = \"1.9.0\")]\n "}, {"sha": "81f5594bc52314043edc3acc7e9ba9770f125931", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -382,6 +382,17 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n     }\n }\n \n+#[stable(feature = \"mutex_from\", since = \"1.22.0\")]\n+impl<T> From<T> for Mutex<T> {\n+    /// Creates a new mutex in an unlocked state ready for use.\n+    /// This is equivalent to [`Mutex::new`].\n+    ///\n+    /// [`Mutex::new`]: #method.new\n+    fn from(t: T) -> Self {\n+        Mutex::new(t)\n+    }\n+}\n+\n #[stable(feature = \"mutex_default\", since = \"1.10.0\")]\n impl<T: ?Sized + Default> Default for Mutex<T> {\n     /// Creates a `Mutex<T>`, with the `Default` value for T."}, {"sha": "fd6cff6b69c40f8270c2e101dc15af5c1951256f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -457,6 +457,17 @@ impl<T: Default> Default for RwLock<T> {\n     }\n }\n \n+#[stable(feature = \"rw_lock_from\", since = \"1.22.0\")]\n+impl<T> From<T> for RwLock<T> {\n+    /// Creates a new instance of an `RwLock<T>` which is unlocked.\n+    /// This is equivalent to [`RwLock::new`].\n+    ///\n+    /// [`RwLock::new`]: #method.new\n+    fn from(t: T) -> Self {\n+        RwLock::new(t)\n+    }\n+}\n+\n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>)\n                   -> LockResult<RwLockReadGuard<'rwlock, T>> {"}, {"sha": "480765b77a02816f8f424423fb047439cae0428b", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -213,3 +213,7 @@ pub fn exit(code: i32) -> ! {\n pub fn getpid() -> u32 {\n     syscall::getpid().unwrap() as u32\n }\n+\n+pub fn getppid() -> u32 {\n+    syscall::getppid().unwrap() as u32\n+}"}, {"sha": "60309bec6d4fcbffb11c0eec924ecb343be8bbb7", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -191,3 +191,9 @@ impl IntoRawFd for process::ChildStderr {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n+\n+/// Returns the OS-assigned process identifier associated with this process's parent.\n+#[unstable(feature = \"unix_ppid\", issue = \"46104\")]\n+pub fn parent_id() -> u32 {\n+    ::sys::os::getppid()\n+}"}, {"sha": "7e965b4b4c5b2d73c41e58293651b264ec09c466", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -515,3 +515,7 @@ pub fn exit(code: i32) -> ! {\n pub fn getpid() -> u32 {\n     unsafe { libc::getpid() as u32 }\n }\n+\n+pub fn getppid() -> u32 {\n+    unsafe { libc::getppid() as u32 }\n+}"}, {"sha": "591ebdc9ddb255938d89d5dc70895a23ee7ab351", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -66,7 +66,7 @@ static Archive::Kind fromRust(LLVMRustArchiveKind Kind) {\n   case LLVMRustArchiveKind::COFF:\n     return Archive::K_COFF;\n   default:\n-    llvm_unreachable(\"Bad ArchiveKind.\");\n+    report_fatal_error(\"Bad ArchiveKind.\");\n   }\n }\n "}, {"sha": "4a359fb3ad306426bdd8233509afee815ba83305", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -235,7 +235,7 @@ static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n   case LLVMRustCodeModel::Large:\n     return CodeModel::Large;\n   default:\n-    llvm_unreachable(\"Bad CodeModel.\");\n+    report_fatal_error(\"Bad CodeModel.\");\n   }\n }\n \n@@ -258,7 +258,7 @@ static CodeGenOpt::Level fromRust(LLVMRustCodeGenOptLevel Level) {\n   case LLVMRustCodeGenOptLevel::Aggressive:\n     return CodeGenOpt::Aggressive;\n   default:\n-    llvm_unreachable(\"Bad CodeGenOptLevel.\");\n+    report_fatal_error(\"Bad CodeGenOptLevel.\");\n   }\n }\n \n@@ -302,7 +302,7 @@ static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n     break;\n #endif\n   }\n-  llvm_unreachable(\"Bad RelocModel.\");\n+  report_fatal_error(\"Bad RelocModel.\");\n }\n \n #if LLVM_RUSTLLVM\n@@ -511,7 +511,7 @@ static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n   case LLVMRustFileType::ObjectFile:\n     return TargetMachine::CGFT_ObjectFile;\n   default:\n-    llvm_unreachable(\"Bad FileType.\");\n+    report_fatal_error(\"Bad FileType.\");\n   }\n }\n \n@@ -1197,7 +1197,7 @@ extern \"C\" bool\n LLVMRustWriteThinBitcodeToFile(LLVMPassManagerRef PMR,\n                                LLVMModuleRef M,\n                                const char *BcFile) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n struct LLVMRustThinLTOData {\n@@ -1211,62 +1211,62 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                           int num_modules,\n                           const char **preserved_symbols,\n                           int num_symbols) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTORename(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOInternalize(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" void\n LLVMRustFreeThinLTOData(LLVMRustThinLTOData *Data) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n struct LLVMRustThinLTOBuffer {\n };\n \n extern \"C\" LLVMRustThinLTOBuffer*\n LLVMRustThinLTOBufferCreate(LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" void\n LLVMRustThinLTOBufferFree(LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" const void*\n LLVMRustThinLTOBufferPtr(const LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" size_t\n LLVMRustThinLTOBufferLen(const LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" LLVMModuleRef\n LLVMRustParseBitcodeForThinLTO(LLVMContextRef Context,\n                                const char *data,\n                                size_t len,\n                                const char *identifier) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n #endif // LLVM_VERSION_GE(4, 0)"}, {"sha": "424b226bcf778d98a8b4b45e9cf42db5387c8a12", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -54,7 +54,7 @@ static AtomicOrdering fromRust(LLVMAtomicOrdering Ordering) {\n     return AtomicOrdering::SequentiallyConsistent;\n   }\n \n-  llvm_unreachable(\"Invalid LLVMAtomicOrdering value!\");\n+  report_fatal_error(\"Invalid LLVMAtomicOrdering value!\");\n }\n \n static LLVM_THREAD_LOCAL char *LastError;\n@@ -161,7 +161,7 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   case SanitizeMemory:\n     return Attribute::SanitizeMemory;\n   }\n-  llvm_unreachable(\"bad AttributeKind\");\n+  report_fatal_error(\"bad AttributeKind\");\n }\n \n extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n@@ -356,7 +356,7 @@ static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n   case LLVMRustSynchronizationScope::CrossThread:\n     return SyncScope::System;\n   default:\n-    llvm_unreachable(\"bad SynchronizationScope.\");\n+    report_fatal_error(\"bad SynchronizationScope.\");\n   }\n }\n #else\n@@ -367,7 +367,7 @@ static SynchronizationScope fromRust(LLVMRustSynchronizationScope Scope) {\n   case LLVMRustSynchronizationScope::CrossThread:\n     return CrossThread;\n   default:\n-    llvm_unreachable(\"bad SynchronizationScope.\");\n+    report_fatal_error(\"bad SynchronizationScope.\");\n   }\n }\n #endif\n@@ -397,7 +397,7 @@ static InlineAsm::AsmDialect fromRust(LLVMRustAsmDialect Dialect) {\n   case LLVMRustAsmDialect::Intel:\n     return InlineAsm::AD_Intel;\n   default:\n-    llvm_unreachable(\"bad AsmDialect.\");\n+    report_fatal_error(\"bad AsmDialect.\");\n   }\n }\n \n@@ -748,7 +748,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n         unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags)\n #if LLVM_VERSION_GE(4, 0)\n         ,\n-\tAlignInBits\n+  AlignInBits\n #endif\n         ));\n   } else {\n@@ -1149,7 +1149,7 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMTokenTypeKind;\n #endif\n   }\n-  llvm_unreachable(\"Unhandled TypeID.\");\n+  report_fatal_error(\"Unhandled TypeID.\");\n }\n \n extern \"C\" void LLVMRustWriteDebugLocToString(LLVMContextRef C,\n@@ -1370,7 +1370,7 @@ static LLVMRustLinkage toRust(LLVMLinkage Linkage) {\n   case LLVMCommonLinkage:\n     return LLVMRustLinkage::CommonLinkage;\n   default:\n-    llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+    report_fatal_error(\"Invalid LLVMRustLinkage value!\");\n   }\n }\n \n@@ -1399,7 +1399,7 @@ static LLVMLinkage fromRust(LLVMRustLinkage Linkage) {\n   case LLVMRustLinkage::CommonLinkage:\n     return LLVMCommonLinkage;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+  report_fatal_error(\"Invalid LLVMRustLinkage value!\");\n }\n \n extern \"C\" LLVMRustLinkage LLVMRustGetLinkage(LLVMValueRef V) {\n@@ -1447,7 +1447,7 @@ static LLVMRustVisibility toRust(LLVMVisibility Vis) {\n   case LLVMProtectedVisibility:\n     return LLVMRustVisibility::Protected;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+  report_fatal_error(\"Invalid LLVMRustVisibility value!\");\n }\n \n static LLVMVisibility fromRust(LLVMRustVisibility Vis) {\n@@ -1459,7 +1459,7 @@ static LLVMVisibility fromRust(LLVMRustVisibility Vis) {\n   case LLVMRustVisibility::Protected:\n     return LLVMProtectedVisibility;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+  report_fatal_error(\"Invalid LLVMRustVisibility value!\");\n }\n \n extern \"C\" LLVMRustVisibility LLVMRustGetVisibility(LLVMValueRef V) {"}, {"sha": "0bc29e8b5aa9e3d0b3ead9e3e2f1e64eec05c482", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -106,7 +106,7 @@ result is then compared against reference files named\n those files doesn't exist, the output must be empty. If the test run\n fails, we will print out the current output, but it is also saved in\n `build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n-printed as part of the test failure mesage), so you can run `diff` and\n+printed as part of the test failure message), so you can run `diff` and\n so forth.\n \n ### Editing and updating the reference files"}, {"sha": "bd49f288eb2eb57cc2385511e94315d9f79ce952", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -57,7 +57,6 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/libbacktrace\",\n         \"src/libcompiler_builtins\",\n         \"src/compiler-rt\",\n-        \"src/rustllvm\",\n         \"src/liblibc\",\n         \"src/vendor\",\n         \"src/rt/hoedown\","}, {"sha": "40d84b98d3a7de685a7bcb37ba4b4b101fc9b4db", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e44fee88d48e9f7844c6d316ae8540db19dc9fa/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "patch": "@@ -50,6 +50,11 @@ const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest\n \n \"#;\n \n+const LLVM_UNREACHABLE_INFO: &str = r\"\\\n+C++ code used llvm_unreachable, which triggers undefined behavior\n+when executed when assertions are disabled.\n+Use llvm::report_fatal_error for increased robustness.\";\n+\n /// Parser states for line_is_url.\n #[derive(PartialEq)]\n #[allow(non_camel_case_types)]\n@@ -108,7 +113,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".h\"];\n+        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\"];\n         if extensions.iter().all(|e| !filename.ends_with(e)) ||\n            filename.starts_with(\".#\") {\n             return\n@@ -153,6 +158,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n             }\n+            if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {\n+                err(LLVM_UNREACHABLE_INFO);\n+            }\n         }\n         if !licenseck(file, &contents) {\n             tidy_error!(bad, \"{}: incorrect license\", file.display());"}]}