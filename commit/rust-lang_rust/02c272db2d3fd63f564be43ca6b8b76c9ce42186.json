{"sha": "02c272db2d3fd63f564be43ca6b8b76c9ce42186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzI3MmRiMmQzZmQ2M2Y1NjRiZTQzY2E2YjhiNzZjOWNlNDIxODY=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-07-19T23:14:56Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-08-08T08:52:10Z"}, "message": "Make Ipv{4,6}Addr::new const fns", "tree": {"sha": "7966b68a38ddec9e326f3f383eef396b817dbeea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7966b68a38ddec9e326f3f383eef396b817dbeea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c272db2d3fd63f564be43ca6b8b76c9ce42186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c272db2d3fd63f564be43ca6b8b76c9ce42186", "html_url": "https://github.com/rust-lang/rust/commit/02c272db2d3fd63f564be43ca6b8b76c9ce42186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c272db2d3fd63f564be43ca6b8b76c9ce42186/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f943c0697e88762f1a81f1747226674f725c77f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f943c0697e88762f1a81f1747226674f725c77f", "html_url": "https://github.com/rust-lang/rust/commit/6f943c0697e88762f1a81f1747226674f725c77f"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "6d14a2eeb32d02d5099434232ede1baaabc32d27", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c272db2d3fd63f564be43ca6b8b76c9ce42186/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c272db2d3fd63f564be43ca6b8b76c9ce42186/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=02c272db2d3fd63f564be43ca6b8b76c9ce42186", "patch": "@@ -252,6 +252,7 @@\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]\n+#![feature(const_int_ops)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n@@ -281,6 +282,7 @@\n #![feature(ptr_internals)]\n #![feature(raw)]\n #![feature(rustc_attrs)]\n+#![feature(rustc_const_unstable)]\n #![feature(std_internals)]\n #![feature(stdsimd)]\n #![feature(shrink_to)]"}, {"sha": "ac9b95f84e945f92a5644419962761fc8d3012cc", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/02c272db2d3fd63f564be43ca6b8b76c9ce42186/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c272db2d3fd63f564be43ca6b8b76c9ce42186/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=02c272db2d3fd63f564be43ca6b8b76c9ce42186", "patch": "@@ -17,7 +17,6 @@ use cmp::Ordering;\n use fmt;\n use hash;\n use mem;\n-use net::{hton, ntoh};\n use sys::net::netc as c;\n use sys_common::{AsInner, FromInner};\n \n@@ -340,13 +339,16 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n+    #[rustc_const_unstable(feature = \"const_ip\")]\n+    pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         Ipv4Addr {\n             inner: c::in_addr {\n-                s_addr: hton(((a as u32) << 24) |\n-                             ((b as u32) << 16) |\n-                             ((c as u32) <<  8) |\n-                              (d as u32)),\n+                s_addr: u32::to_be(\n+                    ((a as u32) << 24) |\n+                    ((b as u32) << 16) |\n+                    ((c as u32) <<  8) |\n+                    (d as u32)\n+                ),\n             }\n         }\n     }\n@@ -399,7 +401,7 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n-        let bits = ntoh(self.inner.s_addr);\n+        let bits = u32::from_be(self.inner.s_addr);\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }\n \n@@ -763,7 +765,7 @@ impl PartialOrd<IpAddr> for Ipv4Addr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n-        ntoh(self.inner.s_addr).cmp(&ntoh(other.inner.s_addr))\n+        u32::from_be(self.inner.s_addr).cmp(&u32::from_be(other.inner.s_addr))\n     }\n }\n \n@@ -856,18 +858,24 @@ impl Ipv6Addr {\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16,\n-               h: u16) -> Ipv6Addr {\n-        let mut addr: c::in6_addr = unsafe { mem::zeroed() };\n-        addr.s6_addr = [(a >> 8) as u8, a as u8,\n-                        (b >> 8) as u8, b as u8,\n-                        (c >> 8) as u8, c as u8,\n-                        (d >> 8) as u8, d as u8,\n-                        (e >> 8) as u8, e as u8,\n-                        (f >> 8) as u8, f as u8,\n-                        (g >> 8) as u8, g as u8,\n-                        (h >> 8) as u8, h as u8];\n-        Ipv6Addr { inner: addr }\n+    #[rustc_const_unstable(feature = \"const_ip\")]\n+    pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16,\n+                     g: u16, h: u16) -> Ipv6Addr {\n+        Ipv6Addr {\n+            inner: c::in6_addr {\n+                s6_addr: [\n+                    (a >> 8) as u8, a as u8,\n+                    (b >> 8) as u8, b as u8,\n+                    (c >> 8) as u8, c as u8,\n+                    (d >> 8) as u8, d as u8,\n+                    (e >> 8) as u8, e as u8,\n+                    (f >> 8) as u8, f as u8,\n+                    (g >> 8) as u8, g as u8,\n+                    (h >> 8) as u8, h as u8\n+                ],\n+            }\n+        }\n+\n     }\n \n     /// Creates a new IPv6 address representing localhost: `::1`."}]}