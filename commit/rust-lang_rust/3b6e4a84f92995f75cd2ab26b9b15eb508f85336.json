{"sha": "3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNmU0YTg0ZjkyOTk1Zjc1Y2QyYWIyNmI5YjE1ZWI1MDhmODUzMzY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-01T15:37:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-11T21:21:06Z"}, "message": "Move #[doc(alias)] attribute checks in rustc", "tree": {"sha": "451ee6282f0c5989c366e003db5456a1dfe9a087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451ee6282f0c5989c366e003db5456a1dfe9a087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "html_url": "https://github.com/rust-lang/rust/commit/3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51db2a65dd2fd9e1492a169bff424c0eae258517", "url": "https://api.github.com/repos/rust-lang/rust/commits/51db2a65dd2fd9e1492a169bff424c0eae258517", "html_url": "https://github.com/rust-lang/rust/commit/51db2a65dd2fd9e1492a169bff424c0eae258517"}], "stats": {"total": 155, "additions": 92, "deletions": 63}, "files": [{"sha": "a729bb55110052f4006c153366da87b5f45a1a6c", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "patch": "@@ -70,7 +70,7 @@ impl CheckAttrVisitor<'tcx> {\n             } else if self.tcx.sess.check_name(attr, sym::track_caller) {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n-                self.check_doc_alias(attr)\n+                self.check_doc_alias(attr, hir_id, target)\n             } else {\n                 true\n             };\n@@ -217,7 +217,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_doc_alias(&self, attr: &Attribute) -> bool {\n+    fn check_doc_alias(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n         if let Some(mi) = attr.meta() {\n             if let Some(list) = mi.meta_item_list() {\n                 for meta in list {\n@@ -238,6 +238,32 @@ impl CheckAttrVisitor<'tcx> {\n                                 .emit();\n                             return false;\n                         }\n+                        if let Some(err) = match target {\n+                            Target::Impl => Some(\"implementation block\"),\n+                            Target::ForeignMod => Some(\"extern block\"),\n+                            Target::AssocConst | Target::AssocTy => {\n+                                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n+                                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                                if Target::from_item(containing_item) == Target::Impl {\n+                                    Some(if target == Target::AssocConst {\n+                                        \"const in implementation block\"\n+                                    } else {\n+                                        \"type alias in implementation block\"\n+                                    })\n+                                } else {\n+                                    None\n+                                }\n+                            }\n+                            _ => None,\n+                        } {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    meta.span(),\n+                                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err,),\n+                                )\n+                                .emit();\n+                        }\n                     }\n                 }\n             }"}, {"sha": "cf57ffd0b4b305532d41bcda67bd6942a4ed0e9b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "patch": "@@ -31,27 +31,6 @@ fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<String> {\n     std::iter::once(crate_name).chain(relative).collect()\n }\n \n-fn check_doc_alias_attrs(\n-    attrs: &[ast::Attribute],\n-    item_kind: &str,\n-    diagnostic: &::rustc_errors::Handler,\n-) {\n-    for attr in attrs {\n-        if let Some(attr) = attr.meta() {\n-            if let Some(list) = attr.meta_item_list() {\n-                for meta in list {\n-                    if meta.check_name(sym::alias) {\n-                        diagnostic.span_err(\n-                            meta.span(),\n-                            &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", item_kind),\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n@@ -408,7 +387,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         match item.kind {\n             hir::ItemKind::ForeignMod(ref fm) => {\n-                check_doc_alias_attrs(&item.attrs, \"extern block\", self.cx.sess().diagnostic());\n                 for item in fm.items {\n                     self.visit_foreign_item(item, None, om);\n                 }\n@@ -583,22 +561,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 self_ty,\n                 ref items,\n             } => {\n-                check_doc_alias_attrs(\n-                    &item.attrs,\n-                    \"implementation block\",\n-                    self.cx.sess().diagnostic(),\n-                );\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n                 if !self.inlining && of_trait.is_none() {\n-                    let items = items\n-                        .iter()\n-                        .map(|item| {\n-                            let item = self.cx.tcx.hir().impl_item(item.id);\n-                            self.check_impl_doc_alias_attr(item);\n-                            item\n-                        })\n-                        .collect();\n+                    let items =\n+                        items.iter().map(|item| self.cx.tcx.hir().impl_item(item.id)).collect();\n                     let i = Impl {\n                         unsafety,\n                         polarity,\n@@ -614,31 +581,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         vis: &item.vis,\n                     };\n                     om.impls.push(i);\n-                } else if of_trait.is_some() {\n-                    for item in items.iter() {\n-                        self.check_impl_doc_alias_attr(self.cx.tcx.hir().impl_item(item.id));\n-                    }\n                 }\n             }\n         }\n     }\n \n-    fn check_impl_doc_alias_attr(&self, item: &hir::ImplItem<'_>) {\n-        match item.kind {\n-            hir::ImplItemKind::Const(_, _) => check_doc_alias_attrs(\n-                &item.attrs,\n-                \"const in implementation block\",\n-                self.cx.sess().diagnostic(),\n-            ),\n-            hir::ImplItemKind::TyAlias(_) => check_doc_alias_attrs(\n-                &item.attrs,\n-                \"type alias in implementation block\",\n-                self.cx.sess().diagnostic(),\n-            ),\n-            hir::ImplItemKind::Fn(_, _) => {}\n-        }\n-    }\n-\n     fn visit_foreign_item(\n         &mut self,\n         item: &'tcx hir::ForeignItem<'_>,"}, {"sha": "cc51101c16455f503658feac832ac09fc5c814e8", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.stderr?ref=3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "patch": "@@ -10,18 +10,18 @@ error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n LL | #[doc(alias = \"bar\")]\n    |       ^^^^^^^^^^^^^\n \n-error: `#[doc(alias = \"...\")]` isn't allowed on const in implementation block\n-  --> $DIR/check-doc-alias-attr-location.rs:14:11\n-   |\n-LL |     #[doc(alias = \"const\")]\n-   |           ^^^^^^^^^^^^^^^\n-\n error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n   --> $DIR/check-doc-alias-attr-location.rs:18:7\n    |\n LL | #[doc(alias = \"foobar\")]\n    |       ^^^^^^^^^^^^^^^^\n \n+error: `#[doc(alias = \"...\")]` isn't allowed on const in implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:14:11\n+   |\n+LL |     #[doc(alias = \"const\")]\n+   |           ^^^^^^^^^^^^^^^\n+\n error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation block\n   --> $DIR/check-doc-alias-attr-location.rs:20:11\n    |"}, {"sha": "9f0b1dcf44af2525401bbff238573534fd2d055e", "filename": "src/test/ui/check-doc-alias-attr-location.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs?ref=3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "patch": "@@ -0,0 +1,24 @@\n+#![crate_type=\"lib\"]\n+#![feature(doc_alias)]\n+\n+pub struct Bar;\n+pub trait Foo {\n+    type X;\n+    fn foo() -> Self::X;\n+}\n+\n+#[doc(alias = \"foo\")] //~ ERROR\n+extern {}\n+\n+#[doc(alias = \"bar\")] //~ ERROR\n+impl Bar {\n+    #[doc(alias = \"const\")] //~ ERROR\n+    const A: u32 = 0;\n+}\n+\n+#[doc(alias = \"foobar\")] //~ ERROR\n+impl Foo for Bar {\n+    #[doc(alias = \"assoc\")] //~ ERROR\n+    type X = i32;\n+    fn foo() -> Self::X { 0 }\n+}"}, {"sha": "b4a0847a002baed1a57b5ed1854211144832a4f3", "filename": "src/test/ui/check-doc-alias-attr-location.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b6e4a84f92995f75cd2ab26b9b15eb508f85336/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.stderr?ref=3b6e4a84f92995f75cd2ab26b9b15eb508f85336", "patch": "@@ -0,0 +1,32 @@\n+error: `#[doc(alias = \"...\")]` isn't allowed on extern block\n+  --> $DIR/check-doc-alias-attr-location.rs:10:7\n+   |\n+LL | #[doc(alias = \"foo\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:13:7\n+   |\n+LL | #[doc(alias = \"bar\")]\n+   |       ^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:19:7\n+   |\n+LL | #[doc(alias = \"foobar\")]\n+   |       ^^^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on const in implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:15:11\n+   |\n+LL |     #[doc(alias = \"const\")]\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: `#[doc(alias = \"...\")]` isn't allowed on type alias in implementation block\n+  --> $DIR/check-doc-alias-attr-location.rs:21:11\n+   |\n+LL |     #[doc(alias = \"assoc\")]\n+   |           ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}