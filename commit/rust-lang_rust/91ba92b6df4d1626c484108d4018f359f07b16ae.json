{"sha": "91ba92b6df4d1626c484108d4018f359f07b16ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYmE5MmI2ZGY0ZDE2MjZjNDg0MTA4ZDQwMThmMzU5ZjA3YjE2YWU=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-11T19:23:00Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-11T19:23:00Z"}, "message": "Change safety comment for usize with the one from LukasKalbertodt review", "tree": {"sha": "a2e3338eed15225b9c2d6d687763c7cef9c6aa6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e3338eed15225b9c2d6d687763c7cef9c6aa6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ba92b6df4d1626c484108d4018f359f07b16ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ba92b6df4d1626c484108d4018f359f07b16ae", "html_url": "https://github.com/rust-lang/rust/commit/91ba92b6df4d1626c484108d4018f359f07b16ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ba92b6df4d1626c484108d4018f359f07b16ae/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0de2f828db7c06624f55f69877197f9b26c753", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0de2f828db7c06624f55f69877197f9b26c753", "html_url": "https://github.com/rust-lang/rust/commit/5a0de2f828db7c06624f55f69877197f9b26c753"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "8ad3c414454ae68edfe3e18804073f22e8c64483", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/91ba92b6df4d1626c484108d4018f359f07b16ae/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ba92b6df4d1626c484108d4018f359f07b16ae/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=91ba92b6df4d1626c484108d4018f359f07b16ae", "patch": "@@ -559,27 +559,24 @@ impl<T> [T] {\n             // Use the llvm.bswap intrinsic to reverse u8s in a usize\n             let chunk = mem::size_of::<usize>();\n             while i + chunk - 1 < ln / 2 {\n-                // SAFETY: An unaligned usize can be read from `i` if `i + 1 < ln`\n-                // (and obviously `i < ln`), because each element is 1 byte and\n-                // we're reading `chunk`.\n+                // SAFETY:\n                 //\n-                // Since we checked for the `x86` and `x86_64` target before\n-                // getting here so `chunk` is at most 8 bytes.\n-                //\n-                // `i + chunk - 1 < ln / 2` # while condition\n-                // `i + 8 - 1 < ln / 2`\n-                // `i + 7 < ln / 2`\n-                // so obviously `i + 1 < ln / 2`\n-                //\n-                // Since it's less than the length divided by 2, then it must be\n-                // in bounds.\n-                //\n-                // This also means that the condition `0 < i + chunk <= ln` is\n-                // always respected, ensuring the `pb` pointer can be used\n-                // safely.\n-                //\n-                // Note: when updating this comment, update the others in the\n-                // function too.\n+                // - Note that `chunk` is either 4 or 8 due to the cfg check\n+                //   above. So `chunk - 1` is positive.\n+                // - Indexing with index `i` is fine as the loop check guarantees\n+                //   `i + chunk - 1 < ln / 2`\n+                //   <=> `i < ln / 2 - (chunk - 1) < ln / 2 < ln`.\n+                // - Indexing with index `ln - i - chunk = ln - (i + chunk)` is fine:\n+                //   - `i + chunk > 0` is trivially true.\n+                //   - The loop check guarantees:\n+                //     `i + chunk - 1 < ln / 2`\n+                //     <=> `i + chunk \u2264 ln / 2 \u2264 ln`, thus subtraction does not underflow.\n+                // - The `read_unaligned` and `write_unaligned` calls are fine:\n+                //   - `pa` points to index `i` where `i < ln / 2 - (chunk - 1)`\n+                //     (see above) and `pb` points to index `ln - i - chunk`, so\n+                //     both are at least `chunk`\n+                //     many bytes away from the end of `self`.\n+                //   - Any initialized memory is valid `usize`.\n                 unsafe {\n                     let pa: *mut T = self.get_unchecked_mut(i);\n                     let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);\n@@ -610,9 +607,6 @@ impl<T> [T] {\n                 // This also means that the condition `0 < i + chunk <= ln` is\n                 // always respected, ensuring the `pb` pointer can be used\n                 // safely.\n-                //\n-                // Note: when updating this comment, update the others in the\n-                // function too.\n                 unsafe {\n                     let pa: *mut T = self.get_unchecked_mut(i);\n                     let pb: *mut T = self.get_unchecked_mut(ln - i - chunk);"}]}