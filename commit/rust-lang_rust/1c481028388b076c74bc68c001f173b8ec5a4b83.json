{"sha": "1c481028388b076c74bc68c001f173b8ec5a4b83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNDgxMDI4Mzg4YjA3NmM3NGJjNjhjMDAxZjE3M2I4ZWM1YTRiODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T23:23:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T23:23:19Z"}, "message": "rustc: Add ty_istr and ty_ivec types", "tree": {"sha": "f888d6cc0b2680ca7c3270749f9c51394899a6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f888d6cc0b2680ca7c3270749f9c51394899a6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c481028388b076c74bc68c001f173b8ec5a4b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c481028388b076c74bc68c001f173b8ec5a4b83", "html_url": "https://github.com/rust-lang/rust/commit/1c481028388b076c74bc68c001f173b8ec5a4b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c481028388b076c74bc68c001f173b8ec5a4b83/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1408e1aa16d6212613f18c6e0b833433a959c975", "url": "https://api.github.com/repos/rust-lang/rust/commits/1408e1aa16d6212613f18c6e0b833433a959c975", "html_url": "https://github.com/rust-lang/rust/commit/1408e1aa16d6212613f18c6e0b833433a959c975"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "49749fde64dd8e77e59e1dd28dcca84bd630ae89", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1c481028388b076c74bc68c001f173b8ec5a4b83", "patch": "@@ -334,8 +334,10 @@ tag ty_ {\n     ty_machine(util::common::ty_mach);\n     ty_char;\n     ty_str;\n+    ty_istr;        // interior string\n     ty_box(mt);\n     ty_vec(mt);\n+    ty_ivec(mt);    // interior vector\n     ty_ptr(mt);\n     ty_task;\n     ty_port(@ty);\n@@ -346,8 +348,6 @@ tag ty_ {\n     ty_obj(vec[ty_method]);\n     ty_path(path, ann);\n     ty_type;\n-    ty_ivec(@ty);   // interior vector\n-    ty_istr;        // interior string\n     ty_constr(@ty, vec[@constr]);\n }\n "}, {"sha": "5635050e7da3683ff52c10b833dbdbb9917f8567", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1c481028388b076c74bc68c001f173b8ec5a4b83", "patch": "@@ -573,7 +573,7 @@ fn parse_ty(&parser p) -> @ast::ty {\n         expect(p, token::RBRACKET);\n     } else if (eat_word(p, \"ivec\")) {\n         expect(p, token::LBRACKET);\n-        t = ast::ty_ivec(parse_ty(p));\n+        t = ast::ty_ivec(parse_mt(p));\n         hi = p.get_hi_pos();\n         expect(p, token::RBRACKET);\n     } else if (eat_word(p, \"mutable\")) {"}, {"sha": "bd4944580a84f6311b5682647468fc9f46fca8c3", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1c481028388b076c74bc68c001f173b8ec5a4b83", "patch": "@@ -105,9 +105,11 @@ tag sty {\n     ty_machine(util::common::ty_mach);\n     ty_char;\n     ty_str;\n+    ty_istr;\n     ty_tag(ast::def_id, vec[t]);\n     ty_box(mt);\n     ty_vec(mt);\n+    ty_ivec(mt);\n     ty_ptr(mt);\n     ty_port(t);\n     ty_chan(t);\n@@ -162,11 +164,12 @@ const uint idx_f32      = 13u;\n const uint idx_f64      = 14u;\n const uint idx_char     = 15u;\n const uint idx_str      = 16u;\n-const uint idx_task     = 17u;\n-const uint idx_native   = 18u;\n-const uint idx_type     = 19u;\n-const uint idx_bot      = 20u;\n-const uint idx_first_others = 21u;\n+const uint idx_istr     = 17u;\n+const uint idx_task     = 18u;\n+const uint idx_native   = 19u;\n+const uint idx_type     = 20u;\n+const uint idx_bot      = 21u;\n+const uint idx_first_others = 22u;\n \n type type_store = interner::interner[raw_t];\n \n@@ -193,6 +196,7 @@ fn populate_type_store(&ctxt cx) {\n     intern(cx, ty_machine(ty_f64), none[str]);\n     intern(cx, ty_char, none[str]);\n     intern(cx, ty_str, none[str]);\n+    intern(cx, ty_istr, none[str]);\n     intern(cx, ty_task, none[str]);\n     intern(cx, ty_native, none[str]);\n     intern(cx, ty_type, none[str]);\n@@ -388,6 +392,7 @@ fn mk_mach(&ctxt cx, &util::common::ty_mach tm) -> t {\n \n fn mk_char(&ctxt cx) -> t    { ret idx_char; }\n fn mk_str(&ctxt cx) -> t     { ret idx_str; }\n+fn mk_istr(&ctxt cx) -> t    { ret idx_istr; }\n \n fn mk_tag(&ctxt cx, &ast::def_id did, &vec[t] tys) -> t {\n     ret gen_ty(cx, ty_tag(did, tys));\n@@ -407,6 +412,8 @@ fn mk_imm_box(&ctxt cx, &t ty) -> t {\n \n fn mk_vec(&ctxt cx, &mt tm) -> t  { ret gen_ty(cx, ty_vec(tm)); }\n \n+fn mk_ivec(&ctxt cx, &mt tm) -> t { ret gen_ty(cx, ty_ivec(tm)); }\n+\n fn mk_imm_vec(&ctxt cx, &t typ) -> t {\n     ret gen_ty(cx, ty_vec(rec(ty=typ, mut=ast::imm)));\n }\n@@ -494,10 +501,12 @@ fn walk_ty(&ctxt cx, ty_walk walker, t ty) {\n         case (ty_machine(_))    { /* no-op */ }\n         case (ty_char)          { /* no-op */ }\n         case (ty_str)           { /* no-op */ }\n+        case (ty_istr)          { /* no-op */ }\n         case (ty_type)          { /* no-op */ }\n         case (ty_native)        { /* no-op */ }\n         case (ty_box(?tm))      { walk_ty(cx, walker, tm.ty); }\n         case (ty_vec(?tm))      { walk_ty(cx, walker, tm.ty); }\n+        case (ty_ivec(?tm))     { walk_ty(cx, walker, tm.ty); }\n         case (ty_port(?subty))  { walk_ty(cx, walker, subty); }\n         case (ty_chan(?subty))  { walk_ty(cx, walker, subty); }\n         case (ty_tag(?tid, ?subtys)) {\n@@ -998,48 +1007,50 @@ fn hash_type_structure(&sty st) -> uint {\n         }\n         case (ty_char) { ret 15u; }\n         case (ty_str) { ret 16u; }\n+        case (ty_istr) { ret 17u; }\n         case (ty_tag(?did, ?tys)) {\n-            auto h = hash_def(17u, did);\n+            auto h = hash_def(18u, did);\n             for (t typ in tys) {\n                 h += h << 5u + hash_ty(typ);\n             }\n             ret h;\n         }\n-        case (ty_box(?mt)) { ret hash_subty(18u, mt.ty); }\n-        case (ty_vec(?mt)) { ret hash_subty(19u, mt.ty); }\n-        case (ty_port(?typ)) { ret hash_subty(20u, typ); }\n-        case (ty_chan(?typ)) { ret hash_subty(21u, typ); }\n-        case (ty_task) { ret 22u; }\n+        case (ty_box(?mt)) { ret hash_subty(19u, mt.ty); }\n+        case (ty_vec(?mt)) { ret hash_subty(20u, mt.ty); }\n+        case (ty_ivec(?mt)) { ret hash_subty(21u, mt.ty); }\n+        case (ty_port(?typ)) { ret hash_subty(22u, typ); }\n+        case (ty_chan(?typ)) { ret hash_subty(23u, typ); }\n+        case (ty_task) { ret 24u; }\n         case (ty_tup(?mts)) {\n-            auto h = 23u;\n+            auto h = 25u;\n             for (mt tm in mts) {\n                 h += h << 5u + hash_ty(tm.ty);\n             }\n             ret h;\n         }\n         case (ty_rec(?fields)) {\n-            auto h = 24u;\n+            auto h = 26u;\n             for (field f in fields) {\n                 h += h << 5u + hash_ty(f.mt.ty);\n             }\n             ret h;\n         }\n         // ???\n-        case (ty_fn(_, ?args, ?rty, _, _)) { ret hash_fn(25u, args, rty); } \n-        case (ty_native_fn(_, ?args, ?rty)) { ret hash_fn(26u, args, rty); }\n+        case (ty_fn(_, ?args, ?rty, _, _)) { ret hash_fn(27u, args, rty); } \n+        case (ty_native_fn(_, ?args, ?rty)) { ret hash_fn(28u, args, rty); }\n         case (ty_obj(?methods)) {\n-            auto h = 27u;\n+            auto h = 29u;\n             for (method m in methods) {\n                 h += h << 5u + str::hash(m.ident);\n             }\n             ret h;\n         }\n-        case (ty_var(?v)) { ret hash_uint(28u, v as uint); }\n-        case (ty_param(?pid)) { ret hash_uint(29u, pid); }\n-        case (ty_type) { ret 30u; }\n-        case (ty_native) { ret 31u; }\n-        case (ty_bot) { ret 32u; }\n-        case (ty_ptr(?mt)) { ret hash_subty(33u, mt.ty); }\n+        case (ty_var(?v)) { ret hash_uint(30u, v as uint); }\n+        case (ty_param(?pid)) { ret hash_uint(31u, pid); }\n+        case (ty_type) { ret 32u; }\n+        case (ty_native) { ret 33u; }\n+        case (ty_bot) { ret 34u; }\n+        case (ty_ptr(?mt)) { ret hash_subty(35u, mt.ty); }\n     }\n }\n "}, {"sha": "b6f5f71fbc84f965661d7bbc4be20d92d6c6f67c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1c481028388b076c74bc68c001f173b8ec5a4b83", "patch": "@@ -277,12 +277,16 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n         case (ast::ty_machine(?tm)) { typ = ty::mk_mach(tcx, tm); }\n         case (ast::ty_char)         { typ = ty::mk_char(tcx); }\n         case (ast::ty_str)          { typ = ty::mk_str(tcx); }\n+        case (ast::ty_istr)         { typ = ty::mk_istr(tcx); }\n         case (ast::ty_box(?mt)) {\n             typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n         }\n         case (ast::ty_vec(?mt)) {\n             typ = ty::mk_vec(tcx, ast_mt_to_mt(tcx, getter, mt));\n         }\n+        case (ast::ty_ivec(?mt)) {\n+            typ = ty::mk_ivec(tcx, ast_mt_to_mt(tcx, getter, mt));\n+        }\n         case (ast::ty_ptr(?mt)) {\n             typ = ty::mk_ptr(tcx, ast_mt_to_mt(tcx, getter, mt));\n         }"}, {"sha": "11f0fd10c287df077be65eea741aa544b728cec1", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c481028388b076c74bc68c001f173b8ec5a4b83/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=1c481028388b076c74bc68c001f173b8ec5a4b83", "patch": "@@ -154,8 +154,10 @@ fn walk_ty(&ast_visitor v, @ast::ty t) {\n         case (ast::ty_machine(_)) {}\n         case (ast::ty_char) {}\n         case (ast::ty_str) {}\n+        case (ast::ty_istr) {}\n         case (ast::ty_box(?mt)) { walk_ty(v, mt.ty); }\n         case (ast::ty_vec(?mt)) { walk_ty(v, mt.ty); }\n+        case (ast::ty_ivec(?mt)) { walk_ty(v, mt.ty); }\n         case (ast::ty_ptr(?mt)) { walk_ty(v, mt.ty); }\n         case (ast::ty_task) {}\n         case (ast::ty_port(?t)) { walk_ty(v, t); }"}]}