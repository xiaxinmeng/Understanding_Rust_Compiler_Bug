{"sha": "e1da00210a19817636e3e4c2ebe4844d0b704f61", "node_id": "C_kwDOAAsO6NoAKGUxZGEwMDIxMGExOTgxNzYzNmUzZTRjMmViZTQ4NDRkMGI3MDRmNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T10:25:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T10:25:15Z"}, "message": "Auto merge of #10363 - c410-f3r:lock-1, r=xFrednet\n\n[significant_drop_tightening] Ignore inexpensive statements\n\nNot all statements that follow the last use of a lock guard are expensive and can therefore be ignored by the lint.\n\n```rust\npub fn foo() -> i32 {\n    let mutex = Mutex::new(1);\n    let lock = mutex.lock().unwrap();\n    let rslt = *lock;\n    let another = rslt;\n   another\n}\n```\n\n---\n\nchangelog: [`significant_drop_tightening`]: No longer lints for inexpensive statements after the lock guard\n[#10363](https://github.com/rust-lang/rust-clippy/pull/10363)\n<!-- changelog_checked -->", "tree": {"sha": "c9c4e6e366e8a02b55357eb9b63b46d2ea7c055e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c4e6e366e8a02b55357eb9b63b46d2ea7c055e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1da00210a19817636e3e4c2ebe4844d0b704f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1da00210a19817636e3e4c2ebe4844d0b704f61", "html_url": "https://github.com/rust-lang/rust/commit/e1da00210a19817636e3e4c2ebe4844d0b704f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1da00210a19817636e3e4c2ebe4844d0b704f61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6444621c101151b49a5e7c9854d602483000e337", "url": "https://api.github.com/repos/rust-lang/rust/commits/6444621c101151b49a5e7c9854d602483000e337", "html_url": "https://github.com/rust-lang/rust/commit/6444621c101151b49a5e7c9854d602483000e337"}, {"sha": "747f81ecd00a4b6daceb9d7e53c6790498196863", "url": "https://api.github.com/repos/rust-lang/rust/commits/747f81ecd00a4b6daceb9d7e53c6790498196863", "html_url": "https://github.com/rust-lang/rust/commit/747f81ecd00a4b6daceb9d7e53c6790498196863"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "367466b7d8206dcf23ae8073f8c1d1f3224955a5", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1da00210a19817636e3e4c2ebe4844d0b704f61/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da00210a19817636e3e4c2ebe4844d0b704f61/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=e1da00210a19817636e3e4c2ebe4844d0b704f61", "patch": "@@ -61,6 +61,18 @@ pub struct SignificantDropTightening<'tcx> {\n }\n \n impl<'tcx> SignificantDropTightening<'tcx> {\n+    /// Searches for at least one statement that could slow down the release of a significant drop.\n+    fn at_least_one_stmt_is_expensive(stmts: &[hir::Stmt<'_>]) -> bool {\n+        for stmt in stmts {\n+            match stmt.kind {\n+                hir::StmtKind::Local(local) if let Some(expr) = local.init\n+                    && let hir::ExprKind::Path(_) = expr.kind => {},\n+                _ => return true\n+            };\n+        }\n+        false\n+    }\n+\n     /// Verifies if the expression is of type `drop(some_lock_path)` to assert that the temporary\n     /// is already being dropped before the end of its scope.\n     fn has_drop(expr: &'tcx hir::Expr<'_>, init_bind_ident: Ident) -> bool {\n@@ -198,13 +210,15 @@ impl<'tcx> LateLintPass<'tcx> for SignificantDropTightening<'tcx> {\n                     }\n                     self.modify_sdap_if_sig_drop_exists(cx, expr, idx, &mut sdap, stmt, |_| {});\n                 },\n-                _ => continue\n+                _ => {}\n             };\n         }\n-        if sdap.number_of_stmts > 1 && {\n-            let last_stmts_idx = block.stmts.len().wrapping_sub(1);\n-            sdap.last_use_stmt_idx != last_stmts_idx\n-        } {\n+        let stmts_after_last_use = sdap\n+            .last_use_stmt_idx\n+            .checked_add(1)\n+            .and_then(|idx| block.stmts.get(idx..))\n+            .unwrap_or_default();\n+        if sdap.number_of_stmts > 1 && Self::at_least_one_stmt_is_expensive(stmts_after_last_use) {\n             span_lint_and_then(\n                 cx,\n                 SIGNIFICANT_DROP_TIGHTENING,"}, {"sha": "5d176d2a92726e54ca135c786e0bbc110d7ce510", "filename": "tests/ui/significant_drop_tightening.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.fixed?ref=e1da00210a19817636e3e4c2ebe4844d0b704f61", "patch": "@@ -4,6 +4,14 @@\n \n use std::sync::Mutex;\n \n+pub fn post_bindings_can_be_ignored() {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let another = rslt;\n+    let _ = another;\n+}\n+\n pub fn unnecessary_contention_with_multiple_owned_results() {\n     {\n         let mutex = Mutex::new(1i32);"}, {"sha": "be9c0774275d62e5c0715019b3425acc49e4c952", "filename": "tests/ui/significant_drop_tightening.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.rs?ref=e1da00210a19817636e3e4c2ebe4844d0b704f61", "patch": "@@ -4,6 +4,14 @@\n \n use std::sync::Mutex;\n \n+pub fn post_bindings_can_be_ignored() {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let another = rslt;\n+    let _ = another;\n+}\n+\n pub fn unnecessary_contention_with_multiple_owned_results() {\n     {\n         let mutex = Mutex::new(1i32);"}, {"sha": "0ec9b1acb59510501d99570d57a7551a3ac1e107", "filename": "tests/ui/significant_drop_tightening.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1da00210a19817636e3e4c2ebe4844d0b704f61/tests%2Fui%2Fsignificant_drop_tightening.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.stderr?ref=e1da00210a19817636e3e4c2ebe4844d0b704f61", "patch": "@@ -1,5 +1,5 @@\n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:17:13\n+  --> $DIR/significant_drop_tightening.rs:25:13\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(1i32);\n@@ -20,7 +20,7 @@ LL +         drop(lock);\n    |\n \n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:38:13\n+  --> $DIR/significant_drop_tightening.rs:46:13\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(1i32);\n@@ -44,7 +44,7 @@ LL +\n    |\n \n error: temporary with significant `Drop` can be early dropped\n-  --> $DIR/significant_drop_tightening.rs:44:17\n+  --> $DIR/significant_drop_tightening.rs:52:17\n    |\n LL | /     {\n LL | |         let mutex = Mutex::new(vec![1i32]);"}]}