{"sha": "5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "node_id": "C_kwDOAAsO6NoAKDViNjU0YTdlNWVhYTM3N2JiNzVmZWU4ZGQyMGI4ZGFiYTZkNDA4ZGQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-17T19:40:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-27T13:50:33Z"}, "message": "Fix handling of items inside a `doc(hidden)` block", "tree": {"sha": "1be2d001fae7f5ef8c70795633733af76d772deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be2d001fae7f5ef8c70795633733af76d772deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "html_url": "https://github.com/rust-lang/rust/commit/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34685485c7c3dc001dd25ff1ba1db76694173a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/34685485c7c3dc001dd25ff1ba1db76694173a21", "html_url": "https://github.com/rust-lang/rust/commit/34685485c7c3dc001dd25ff1ba1db76694173a21"}], "stats": {"total": 100, "additions": 66, "deletions": 34}, "files": [{"sha": "ee9d0e829f0f2df053d992442f9804a5d7bb9a72", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "patch": "@@ -2225,21 +2225,17 @@ fn clean_maybe_renamed_item<'tcx>(\n             get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs);\n         }\n \n-        if !extra_attrs.is_empty() {\n+        let mut item = if !extra_attrs.is_empty() {\n             extra_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n             let attrs = Attributes::from_ast(&extra_attrs);\n             let cfg = extra_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n \n-            vec![Item::from_def_id_and_attrs_and_parts(\n-                def_id,\n-                Some(name),\n-                kind,\n-                Box::new(attrs),\n-                cfg,\n-            )]\n+            Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg)\n         } else {\n-            vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n-        }\n+            Item::from_def_id_and_parts(def_id, Some(name), kind, cx)\n+        };\n+        item.inline_stmt_id = import_id.map(|def_id| def_id.to_def_id());\n+        vec![item]\n     })\n }\n "}, {"sha": "cfd2171395cebf1e39c6eafac5e02cbc61b970e1", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "patch": "@@ -1,4 +1,6 @@\n //! Strip all doc(hidden) items from the output.\n+\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n use std::mem;\n \n@@ -7,6 +9,7 @@ use crate::clean::{Item, ItemIdSet, NestedAttributesExt};\n use crate::core::DocContext;\n use crate::fold::{strip_item, DocFolder};\n use crate::passes::{ImplStripper, Pass};\n+use crate::visit_ast::inherits_doc_hidden;\n \n pub(crate) const STRIP_HIDDEN: Pass = Pass {\n     name: \"strip-hidden\",\n@@ -21,7 +24,12 @@ pub(crate) fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clea\n \n     // strip all #[doc(hidden)] items\n     let krate = {\n-        let mut stripper = Stripper { retained: &mut retained, update_retained: true };\n+        let mut stripper = Stripper {\n+            retained: &mut retained,\n+            update_retained: true,\n+            tcx: cx.tcx,\n+            is_in_hidden_item: false,\n+        };\n         stripper.fold_crate(krate)\n     };\n \n@@ -36,14 +44,38 @@ pub(crate) fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clea\n     stripper.fold_crate(krate)\n }\n \n-struct Stripper<'a> {\n+struct Stripper<'a, 'tcx> {\n     retained: &'a mut ItemIdSet,\n     update_retained: bool,\n+    tcx: TyCtxt<'tcx>,\n+    is_in_hidden_item: bool,\n+}\n+\n+impl<'a, 'tcx> Stripper<'a, 'tcx> {\n+    fn set_is_in_hidden_item_and_fold(&mut self, is_in_hidden_item: bool, i: Item) -> Item {\n+        let prev = self.is_in_hidden_item;\n+        self.is_in_hidden_item |= is_in_hidden_item;\n+        let ret = self.fold_item_recur(i);\n+        self.is_in_hidden_item = prev;\n+        ret\n+    }\n }\n \n-impl<'a> DocFolder for Stripper<'a> {\n+impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n-        if i.attrs.lists(sym::doc).has_word(sym::hidden) {\n+        let has_doc_hidden = i.attrs.lists(sym::doc).has_word(sym::hidden);\n+        let mut is_hidden = self.is_in_hidden_item || has_doc_hidden;\n+        if !is_hidden && i.inline_stmt_id.is_none() {\n+            // We don't need to check if it's coming from a reexport since the reexport itself was\n+            // already checked.\n+            is_hidden = i\n+                .item_id\n+                .as_def_id()\n+                .and_then(|def_id| def_id.as_local())\n+                .map(|def_id| inherits_doc_hidden(self.tcx, def_id))\n+                .unwrap_or(false);\n+        }\n+        if is_hidden {\n             debug!(\"strip_hidden: stripping {:?} {:?}\", i.type_(), i.name);\n             // Use a dedicated hidden item for fields, variants, and modules.\n             // We need to keep private fields and variants, so that the docs\n@@ -53,23 +85,31 @@ impl<'a> DocFolder for Stripper<'a> {\n             // module it's defined in. Both of these are marked \"stripped,\" and\n             // not included in the final docs, but since they still have an effect\n             // on the final doc, cannot be completely removed from the Clean IR.\n-            match *i.kind {\n+            return match *i.kind {\n                 clean::StructFieldItem(..) | clean::ModuleItem(..) | clean::VariantItem(..) => {\n                     // We need to recurse into stripped modules to\n                     // strip things like impl methods but when doing so\n                     // we must not add any items to the `retained` set.\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = strip_item(self.fold_item_recur(i));\n+                    let ret = strip_item(self.set_is_in_hidden_item_and_fold(true, i));\n                     self.update_retained = old;\n-                    return Some(ret);\n+                    Some(ret)\n+                }\n+                _ => {\n+                    let ret = self.set_is_in_hidden_item_and_fold(true, i);\n+                    if has_doc_hidden {\n+                        // If the item itself has `#[doc(hidden)]`, then we simply remove it.\n+                        None\n+                    } else {\n+                        // However if it's a \"descendant\" of a `#[doc(hidden)]` item, then we strip it.\n+                        Some(strip_item(ret))\n+                    }\n                 }\n-                _ => return None,\n-            }\n-        } else {\n-            if self.update_retained {\n-                self.retained.insert(i.item_id);\n-            }\n+            };\n+        }\n+        if self.update_retained {\n+            self.retained.insert(i.item_id);\n         }\n-        Some(self.fold_item_recur(i))\n+        Some(self.set_is_in_hidden_item_and_fold(is_hidden, i))\n     }\n }"}, {"sha": "2d2afb83f9dd8b7b4cdfc68827d198d11f787568", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b654a7e5eaa377bb75fee8dd20b8daba6d408dd/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5b654a7e5eaa377bb75fee8dd20b8daba6d408dd", "patch": "@@ -187,6 +187,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             }\n         }\n         self.inside_public_path = orig_inside_public_path;\n+        debug!(\"Leaving module {:?}\", m);\n     }\n \n     /// Tries to resolve the target of a `pub use` statement and inlines the\n@@ -290,7 +291,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n         renamed: Option<Symbol>,\n-        parent_id: Option<LocalDefId>,\n+        import_id: Option<LocalDefId>,\n     ) -> bool {\n         debug!(\"visiting item {:?}\", item);\n         let name = renamed.unwrap_or(item.ident.name);\n@@ -347,7 +348,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                     }\n \n-                    self.add_to_current_mod(item, renamed, parent_id);\n+                    self.add_to_current_mod(item, renamed, import_id);\n                 }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -383,13 +384,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.add_to_current_mod(item, renamed, parent_id);\n+                self.add_to_current_mod(item, renamed, import_id);\n             }\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if name != kw::Underscore {\n-                    self.add_to_current_mod(item, renamed, parent_id);\n+                    self.add_to_current_mod(item, renamed, import_id);\n                 }\n             }\n             hir::ItemKind::Impl(impl_) => {\n@@ -437,12 +438,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n-        let parent_id = if self.modules.len() > 1 {\n-            Some(self.modules[self.modules.len() - 2].def_id)\n-        } else {\n-            None\n-        };\n-        if self.visit_item_inner(i, None, parent_id) {\n+        if self.visit_item_inner(i, None, None) {\n             walk_item(self, i);\n         }\n     }"}]}