{"sha": "194710e112ef5cc7bd9f8a7f5924c4574eca0406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDcxMGUxMTJlZjVjYzdiZDlmOGE3ZjU5MjRjNDU3NGVjYTA0MDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-21T14:21:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T13:26:23Z"}, "message": "no barriers for boxes", "tree": {"sha": "39d266e5422d4da69e8b27ff820cc351cefaba41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d266e5422d4da69e8b27ff820cc351cefaba41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194710e112ef5cc7bd9f8a7f5924c4574eca0406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194710e112ef5cc7bd9f8a7f5924c4574eca0406", "html_url": "https://github.com/rust-lang/rust/commit/194710e112ef5cc7bd9f8a7f5924c4574eca0406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194710e112ef5cc7bd9f8a7f5924c4574eca0406/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58309956c10914d55171666abd1782063e921d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/58309956c10914d55171666abd1782063e921d18", "html_url": "https://github.com/rust-lang/rust/commit/58309956c10914d55171666abd1782063e921d18"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "a31fd462e526c92162b4bfbe52d1eccf0b96d77a", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/194710e112ef5cc7bd9f8a7f5924c4574eca0406/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194710e112ef5cc7bd9f8a7f5924c4574eca0406/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=194710e112ef5cc7bd9f8a7f5924c4574eca0406", "patch": "@@ -673,19 +673,27 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         fn_entry: bool,\n         place: PlaceTy<'tcx, Borrow>\n     ) -> EvalResult<'tcx> {\n+        // Determine mutability and whether to add a barrier.\n+        // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n+        // making it useless.\n+        fn qualify(ty: ty::Ty<'_>, fn_entry: bool) -> Option<(Mutability, bool)> {\n+            match ty.sty {\n+                // References are simple\n+                ty::Ref(_, _, mutbl) => Some((mutbl, fn_entry)),\n+                // Boxes do not get a barrier: Barriers reflect that references outlive the call\n+                // they were passed in to; that's just not the case for boxes.\n+                ty::Adt(..) if ty.is_box() => Some((MutMutable, false)),\n+                _ => None,\n+            }\n+        }\n+\n         // We need a visitor to visit all references.  However, that requires\n         // a `MemPlace`, so we have a fast path for reference types that\n         // avoids allocating.\n-        // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n-        // making it useless.\n-        if let Some(mutbl) = match place.layout.ty.sty {\n-            ty::Ref(_, _, mutbl) => Some(mutbl),\n-            ty::Adt(..) if place.layout.ty.is_box() => Some(MutMutable),\n-            _ => None, // handled with the general case below\n-        } {\n+        if let Some((mutbl, barrier)) = qualify(place.layout.ty, fn_entry) {\n             // fast path\n             let val = self.read_immediate(self.place_to_op(place)?)?;\n-            let val = self.retag_reference(val, mutbl, fn_entry)?;\n+            let val = self.retag_reference(val, mutbl, barrier)?;\n             self.write_immediate(val, place)?;\n             return Ok(());\n         }\n@@ -716,14 +724,11 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             {\n                 // Cannot use `builtin_deref` because that reports *immutable* for `Box`,\n                 // making it useless.\n-                let mutbl = match place.layout.ty.sty {\n-                    ty::Ref(_, _, mutbl) => mutbl,\n-                    ty::Adt(..) if place.layout.ty.is_box() => MutMutable,\n-                    _ => return Ok(()), // nothing to do\n-                };\n-                let val = self.ecx.read_immediate(place.into())?;\n-                let val = self.ecx.retag_reference(val, mutbl, self.fn_entry)?;\n-                self.ecx.write_immediate(val, place.into())?;\n+                if let Some((mutbl, barrier)) = qualify(place.layout.ty, self.fn_entry) {\n+                    let val = self.ecx.read_immediate(place.into())?;\n+                    let val = self.ecx.retag_reference(val, mutbl, barrier)?;\n+                    self.ecx.write_immediate(val, place.into())?;\n+                }\n                 Ok(())\n             }\n         }"}, {"sha": "bd0fec859d8f7c424a677f8f1120fd635b8a97bf", "filename": "tests/compile-fail-fullmir/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194710e112ef5cc7bd9f8a7f5924c4574eca0406/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194710e112ef5cc7bd9f8a7f5924c4574eca0406/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=194710e112ef5cc7bd9f8a7f5924c4574eca0406", "patch": "@@ -8,7 +8,7 @@ fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n   unknown_code_2();\n \n   // We know this will return 5\n-  *our\n+  *our //~ ERROR does not exist on the stack\n }\n \n // Now comes the evil context\n@@ -21,7 +21,7 @@ fn unknown_code_1(x: &i32) { unsafe {\n } }\n \n fn unknown_code_2() { unsafe {\n-    *LEAK = 7; //~ ERROR barrier\n+    *LEAK = 7;\n } }\n \n fn main() {"}]}