{"sha": "a8e032820f14cad3630299a1ae16c62dcf59f358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTAzMjgyMGYxNGNhZDM2MzAyOTlhMWFlMTZjNjJkY2Y1OWYzNTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-11T22:01:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-11T22:01:22Z"}, "message": "Merge #3955\n\n3955: Align grammar for record patterns and literals r=matklad a=matklad\n\nThe grammar now looks like this\n\n   [name_ref :] pat\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4438f81bdbf88d694b14c3c448c5bb21c8541091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4438f81bdbf88d694b14c3c448c5bb21c8541091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e032820f14cad3630299a1ae16c62dcf59f358", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekj4yCRBK7hj4Ov3rIwAAdHIIACljRE8wEfvlMOPKYK8M5O3t\nROpBQLMsUr332olEv7lwmktyvUNcySa6DzAsUItTtyu5V71QaVdwZofuQQVlxDJx\nlCiS9UpDWqpP/Z6fwUGlhsftG4LKoM8LKul9PfnSGe3+gusAg7cfuhewCKNtmkgX\n1QorHVY63eNd4fsEOpJFBmntznOt2qscpHWGEN7L1cFUrvXW5Cvun50PurHTbY4s\nq0Ku0G6VaLpnRtPEt/xhVHJiZuzA/qDys26fIcNptjYN3eVJmHEmKesggquLm3MS\nIuYSKKPdKfnc+FuliQFCjsSZfHKUx2SgcuF3fjNw6wm8HYuHv3WSHjWNoUxyUw4=\n=5M5Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 4438f81bdbf88d694b14c3c448c5bb21c8541091\nparent f13da3f895d9d401ff467a6c1fa33a4adf09fe2c\nparent 5e5eb6a108b00c573455d8d088742592012707be\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586642482 +0000\ncommitter GitHub <noreply@github.com> 1586642482 +0000\n\nMerge #3955\n\n3955: Align grammar for record patterns and literals r=matklad a=matklad\n\nThe grammar now looks like this\n\n   [name_ref :] pat\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e032820f14cad3630299a1ae16c62dcf59f358", "html_url": "https://github.com/rust-lang/rust/commit/a8e032820f14cad3630299a1ae16c62dcf59f358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e032820f14cad3630299a1ae16c62dcf59f358/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13da3f895d9d401ff467a6c1fa33a4adf09fe2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13da3f895d9d401ff467a6c1fa33a4adf09fe2c", "html_url": "https://github.com/rust-lang/rust/commit/f13da3f895d9d401ff467a6c1fa33a4adf09fe2c"}, {"sha": "5e5eb6a108b00c573455d8d088742592012707be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5eb6a108b00c573455d8d088742592012707be", "html_url": "https://github.com/rust-lang/rust/commit/5e5eb6a108b00c573455d8d088742592012707be"}], "stats": {"total": 246, "additions": 149, "deletions": 97}, "files": [{"sha": "a43e53a119b2a8e6a0bdcf8cc2923880fdc125a0", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -1,20 +1,20 @@\n use std::collections::HashMap;\n \n-use itertools::Itertools;\n-\n use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n+use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n-    algo, ast,\n-    ast::{Name, Path, RecordLit, RecordPat},\n-    AstNode, SyntaxKind, SyntaxNode,\n+    algo,\n+    ast::{self, Path, RecordLit, RecordPat},\n+    match_ast, AstNode, SyntaxKind,\n+    SyntaxKind::*,\n+    SyntaxNode,\n };\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n     AssistId,\n };\n-use ra_syntax::ast::{Expr, NameRef};\n \n // Assist: reorder_fields\n //\n@@ -59,7 +59,6 @@ fn reorder<R: AstNode>(ctx: AssistCtx) -> Option<Assist> {\n }\n \n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n-    use SyntaxKind::*;\n     match node.kind() {\n         RECORD_LIT => vec![RECORD_FIELD],\n         RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n@@ -68,19 +67,14 @@ fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n }\n \n fn get_field_name(node: &SyntaxNode) -> String {\n-    use SyntaxKind::*;\n-    match node.kind() {\n-        RECORD_FIELD => {\n-            if let Some(name) = node.children().find_map(NameRef::cast) {\n-                return name.to_string();\n-            }\n-            node.children().find_map(Expr::cast).map(|expr| expr.to_string()).unwrap_or_default()\n-        }\n-        BIND_PAT | RECORD_FIELD_PAT => {\n-            node.children().find_map(Name::cast).map(|n| n.to_string()).unwrap_or_default()\n+    let res = match_ast! {\n+        match node {\n+            ast::RecordField(field) => { field.field_name().map(|it| it.to_string()) },\n+            ast::RecordFieldPat(field) => { field.field_name().map(|it| it.to_string()) },\n+            _ => None,\n         }\n-        _ => String::new(),\n-    }\n+    };\n+    res.unwrap_or_default()\n }\n \n fn get_fields(record: &SyntaxNode) -> Vec<SyntaxNode> {"}, {"sha": "6caa87db473847206868da2ae2c4745dc8e5e491", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -637,7 +637,7 @@ impl ExprCollector<'_> {\n                 let iter = record_field_pat_list.record_field_pats().filter_map(|f| {\n                     let ast_pat = f.pat()?;\n                     let pat = self.collect_pat(ast_pat);\n-                    let name = f.name()?.as_name();\n+                    let name = f.field_name()?.as_name();\n                     Some(RecordFieldPat { name, pat })\n                 });\n                 fields.extend(iter);"}, {"sha": "fecce224ee607b6a0bf9283e3de35e668dc70ec4", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -83,6 +83,15 @@ impl AsName for ast::Name {\n     }\n }\n \n+impl AsName for ast::NameOrNameRef {\n+    fn as_name(&self) -> Name {\n+        match self {\n+            ast::NameOrNameRef::Name(it) => it.as_name(),\n+            ast::NameOrNameRef::NameRef(it) => it.as_name(),\n+        }\n+    }\n+}\n+\n impl AsName for tt::Ident {\n     fn as_name(&self) -> Name {\n         Name::resolve(&self.text)"}, {"sha": "07cbc521a3f24e8085e89a32d411a230a6a6b083", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -1,7 +1,8 @@\n-use super::{infer, infer_with_mismatches};\n use insta::assert_snapshot;\n use test_utils::covers;\n \n+use super::{infer, infer_with_mismatches};\n+\n #[test]\n fn infer_pattern() {\n     assert_snapshot!("}, {"sha": "a8b4ce114db6e15c2eb45f9f1e896d574e7ccf7d", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -7,6 +7,10 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_pat_binding_or_const {\n         return;\n     }\n+    if ctx.record_pat_syntax.is_some() {\n+        return;\n+    }\n+\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n     ctx.scope().process_all_names(&mut |name, res| {"}, {"sha": "83a553155b0acef7234d8cd270def130651345d1", "filename": "crates/ra_ide/src/completion/complete_record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -2,7 +2,7 @@\n use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let missing_fields = match (ctx.record_lit_pat.as_ref(), ctx.record_lit_syntax.as_ref()) {\n+    let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n         (None, None) => return None,\n         (Some(_), Some(_)) => unreachable!(\"A record cannot be both a literal and a pattern\"),\n         (Some(record_pat), _) => ctx.sema.record_pattern_missing_fields(record_pat),"}, {"sha": "2d8e0776ca5e4ef91975816c5af57069c6221fb9", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -3,7 +3,14 @@\n use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const && !ctx.record_lit_syntax.is_some()) {\n+    if !ctx.is_trivial_path {\n+        return;\n+    }\n+\n+    if ctx.is_pat_binding_or_const\n+        || ctx.record_lit_syntax.is_some()\n+        || ctx.record_pat_syntax.is_some()\n+    {\n         return;\n     }\n "}, {"sha": "8b340159506b2e62aabb2ddd3cdb9071032aad0c", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -30,7 +30,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n-    pub(super) record_lit_pat: Option<ast::RecordPat>,\n+    pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) impl_def: Option<ast::ImplDef>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n@@ -93,7 +93,7 @@ impl<'a> CompletionContext<'a> {\n             function_syntax: None,\n             use_item_syntax: None,\n             record_lit_syntax: None,\n-            record_lit_pat: None,\n+            record_pat_syntax: None,\n             impl_def: None,\n             is_param: false,\n             is_pat_binding_or_const: false,\n@@ -182,6 +182,11 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n+            // FIXME: remove this (V) duplication and make the check more precise\n+            if name_ref.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+                self.record_pat_syntax =\n+                    self.sema.find_node_at_offset_with_macros(&original_file, offset);\n+            }\n             self.classify_name_ref(original_file, name_ref, offset);\n         }\n \n@@ -211,8 +216,9 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n+            // FIXME: remove this (^) duplication and make the check more precise\n             if name.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n-                self.record_lit_pat =\n+                self.record_pat_syntax =\n                     self.sema.find_node_at_offset_with_macros(&original_file, offset);\n             }\n         }"}, {"sha": "c2a6e82e9b451bc5de48370eae4db4d929008d44", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -282,13 +282,10 @@ fn name_ref(p: &mut Parser) {\n }\n \n fn name_ref_or_index(p: &mut Parser) {\n-    if p.at(IDENT) || p.at(INT_NUMBER) {\n-        let m = p.start();\n-        p.bump_any();\n-        m.complete(p, NAME_REF);\n-    } else {\n-        p.err_and_bump(\"expected identifier\");\n-    }\n+    assert!(p.at(IDENT) || p.at(INT_NUMBER));\n+    let m = p.start();\n+    p.bump_any();\n+    m.complete(p, NAME_REF);\n }\n \n fn error_block(p: &mut Parser, message: &str) {"}, {"sha": "68fb2fc7337abca0a3b5dd36706a3fcc10477e11", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -192,14 +192,30 @@ fn record_field_pat_list(p: &mut Parser) {\n         match p.current() {\n             // A trailing `..` is *not* treated as a DOT_DOT_PAT.\n             T![.] if p.at(T![..]) => p.bump(T![..]),\n-\n-            IDENT | INT_NUMBER if p.nth(1) == T![:] => record_field_pat(p),\n             T!['{'] => error_block(p, \"expected ident\"),\n-            T![box] => {\n-                box_pat(p);\n-            }\n-            _ => {\n-                bind_pat(p, false);\n+\n+            c => {\n+                let m = p.start();\n+                match c {\n+                    // test record_field_pat\n+                    // fn foo() {\n+                    //     let S { 0: 1 } = ();\n+                    //     let S { x: 1 } = ();\n+                    // }\n+                    IDENT | INT_NUMBER if p.nth(1) == T![:] => {\n+                        name_ref_or_index(p);\n+                        p.bump(T![:]);\n+                        pattern(p);\n+                    }\n+                    T![box] => {\n+                        // FIXME: not all box patterns should be allowed\n+                        box_pat(p);\n+                    }\n+                    _ => {\n+                        bind_pat(p, false);\n+                    }\n+                }\n+                m.complete(p, RECORD_FIELD_PAT);\n             }\n         }\n         if !p.at(T!['}']) {\n@@ -210,26 +226,6 @@ fn record_field_pat_list(p: &mut Parser) {\n     m.complete(p, RECORD_FIELD_PAT_LIST);\n }\n \n-// test record_field_pat\n-// fn foo() {\n-//     let S { 0: 1 } = ();\n-//     let S { x: 1 } = ();\n-// }\n-fn record_field_pat(p: &mut Parser) {\n-    assert!(p.at(IDENT) || p.at(INT_NUMBER));\n-    assert!(p.nth(1) == T![:]);\n-\n-    let m = p.start();\n-\n-    if !p.eat(INT_NUMBER) {\n-        name(p)\n-    }\n-\n-    p.bump_any();\n-    pattern(p);\n-    m.complete(p, RECORD_FIELD_PAT);\n-}\n-\n // test placeholder_pat\n // fn main() { let _ = (); }\n fn placeholder_pat(p: &mut Parser) -> CompletedMarker {"}, {"sha": "7fca5661ef98a7ce584792f1fee20039d6bf8e0a", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -18,8 +18,8 @@ use crate::{\n pub use self::{\n     expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n-        AttrKind, FieldKind, PathSegmentKind, SelfParamKind, SlicePatComponents, StructKind,\n-        TypeBoundKind, VisibilityKind,\n+        AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n+        StructKind, TypeBoundKind, VisibilityKind,\n     },\n     generated::{nodes::*, tokens::*},\n     tokens::*,"}, {"sha": "f2ea5088e7ab4db48f7e8fa13071162e0709fe09", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -1,6 +1,8 @@\n //! Various extension methods to ast Nodes, which are hard to code-generate.\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n+use std::fmt;\n+\n use itertools::Itertools;\n use ra_parser::SyntaxKind;\n \n@@ -217,6 +219,34 @@ impl ast::RecordField {\n     }\n }\n \n+pub enum NameOrNameRef {\n+    Name(ast::Name),\n+    NameRef(ast::NameRef),\n+}\n+\n+impl fmt::Display for NameOrNameRef {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            NameOrNameRef::Name(it) => fmt::Display::fmt(it, f),\n+            NameOrNameRef::NameRef(it) => fmt::Display::fmt(it, f),\n+        }\n+    }\n+}\n+\n+impl ast::RecordFieldPat {\n+    /// Deals with field init shorthand\n+    pub fn field_name(&self) -> Option<NameOrNameRef> {\n+        if let Some(name_ref) = self.name_ref() {\n+            return Some(NameOrNameRef::NameRef(name_ref));\n+        }\n+        if let Some(ast::Pat::BindPat(pat)) = self.pat() {\n+            let name = pat.name()?;\n+            return Some(NameOrNameRef::Name(name));\n+        }\n+        None\n+    }\n+}\n+\n impl ast::EnumVariant {\n     pub fn parent_enum(&self) -> ast::EnumDef {\n         self.syntax()"}, {"sha": "188f0df968e65447e575f6a827e71aad5ed62d13", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -1806,8 +1806,8 @@ impl AstNode for RecordFieldPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::AttrsOwner for RecordFieldPat {}\n-impl ast::NameOwner for RecordFieldPat {}\n impl RecordFieldPat {\n+    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }"}, {"sha": "fcd099de98881977f3fa9d5ee3f54466f68d82ae", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rast", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -44,18 +44,20 @@ SOURCE_FILE@[0; 119)\n             RECORD_FIELD_PAT_LIST@[40; 56)\n               L_CURLY@[40; 41) \"{\"\n               WHITESPACE@[41; 42) \" \"\n-              BIND_PAT@[42; 43)\n-                NAME@[42; 43)\n-                  IDENT@[42; 43) \"f\"\n+              RECORD_FIELD_PAT@[42; 43)\n+                BIND_PAT@[42; 43)\n+                  NAME@[42; 43)\n+                    IDENT@[42; 43) \"f\"\n               COMMA@[43; 44) \",\"\n               WHITESPACE@[44; 45) \" \"\n-              BIND_PAT@[45; 54)\n-                REF_KW@[45; 48) \"ref\"\n-                WHITESPACE@[48; 49) \" \"\n-                MUT_KW@[49; 52) \"mut\"\n-                WHITESPACE@[52; 53) \" \"\n-                NAME@[53; 54)\n-                  IDENT@[53; 54) \"g\"\n+              RECORD_FIELD_PAT@[45; 54)\n+                BIND_PAT@[45; 54)\n+                  REF_KW@[45; 48) \"ref\"\n+                  WHITESPACE@[48; 49) \" \"\n+                  MUT_KW@[49; 52) \"mut\"\n+                  WHITESPACE@[52; 53) \" \"\n+                  NAME@[53; 54)\n+                    IDENT@[53; 54) \"g\"\n               WHITESPACE@[54; 55) \" \"\n               R_CURLY@[55; 56) \"}\"\n           WHITESPACE@[56; 57) \" \"\n@@ -79,7 +81,7 @@ SOURCE_FILE@[0; 119)\n               L_CURLY@[73; 74) \"{\"\n               WHITESPACE@[74; 75) \" \"\n               RECORD_FIELD_PAT@[75; 79)\n-                NAME@[75; 76)\n+                NAME_REF@[75; 76)\n                   IDENT@[75; 76) \"h\"\n                 COLON@[76; 77) \":\"\n                 WHITESPACE@[77; 78) \" \"\n@@ -110,7 +112,7 @@ SOURCE_FILE@[0; 119)\n               L_CURLY@[101; 102) \"{\"\n               WHITESPACE@[102; 103) \" \"\n               RECORD_FIELD_PAT@[103; 107)\n-                NAME@[103; 104)\n+                NAME_REF@[103; 104)\n                   IDENT@[103; 104) \"h\"\n                 COLON@[104; 105) \":\"\n                 WHITESPACE@[105; 106) \" \""}, {"sha": "1d245f8f31b3db7c335aa2ae01745c1f27fe523a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.rast", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -44,16 +44,17 @@ SOURCE_FILE@[0; 118)\n               RECORD_FIELD_PAT_LIST@[50; 81)\n                 L_CURLY@[50; 51) \"{\"\n                 WHITESPACE@[51; 52) \" \"\n-                BOX_PAT@[52; 57)\n-                  BOX_KW@[52; 55) \"box\"\n-                  WHITESPACE@[55; 56) \" \"\n-                  BIND_PAT@[56; 57)\n-                    NAME@[56; 57)\n-                      IDENT@[56; 57) \"i\"\n+                RECORD_FIELD_PAT@[52; 57)\n+                  BOX_PAT@[52; 57)\n+                    BOX_KW@[52; 55) \"box\"\n+                    WHITESPACE@[55; 56) \" \"\n+                    BIND_PAT@[56; 57)\n+                      NAME@[56; 57)\n+                        IDENT@[56; 57) \"i\"\n                 COMMA@[57; 58) \",\"\n                 WHITESPACE@[58; 59) \" \"\n                 RECORD_FIELD_PAT@[59; 79)\n-                  NAME@[59; 60)\n+                  NAME_REF@[59; 60)\n                     IDENT@[59; 60) \"j\"\n                   COLON@[60; 61) \":\"\n                   WHITESPACE@[61; 62) \" \""}, {"sha": "cac2ffdcf8a844eca39ed7be5bce8adf9483d30e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0145_record_field_pat.rast", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -25,7 +25,8 @@ SOURCE_FILE@[0; 63)\n               L_CURLY@[21; 22) \"{\"\n               WHITESPACE@[22; 23) \" \"\n               RECORD_FIELD_PAT@[23; 27)\n-                INT_NUMBER@[23; 24) \"0\"\n+                NAME_REF@[23; 24)\n+                  INT_NUMBER@[23; 24) \"0\"\n                 COLON@[24; 25) \":\"\n                 WHITESPACE@[25; 26) \" \"\n                 LITERAL_PAT@[26; 27)\n@@ -54,7 +55,7 @@ SOURCE_FILE@[0; 63)\n               L_CURLY@[46; 47) \"{\"\n               WHITESPACE@[47; 48) \" \"\n               RECORD_FIELD_PAT@[48; 52)\n-                NAME@[48; 49)\n+                NAME_REF@[48; 49)\n                   IDENT@[48; 49) \"x\"\n                 COLON@[49; 50) \":\"\n                 WHITESPACE@[50; 51) \" \""}, {"sha": "d0623ba904eafaa42cc1472ecdb88aa8dac2c935", "filename": "crates/ra_syntax/test_data/parser/ok/0063_trait_fn_patterns.rast", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -68,14 +68,16 @@ SOURCE_FILE@[0; 170)\n               RECORD_FIELD_PAT_LIST@[59; 67)\n                 L_CURLY@[59; 60) \"{\"\n                 WHITESPACE@[60; 61) \" \"\n-                BIND_PAT@[61; 62)\n-                  NAME@[61; 62)\n-                    IDENT@[61; 62) \"a\"\n+                RECORD_FIELD_PAT@[61; 62)\n+                  BIND_PAT@[61; 62)\n+                    NAME@[61; 62)\n+                      IDENT@[61; 62) \"a\"\n                 COMMA@[62; 63) \",\"\n                 WHITESPACE@[63; 64) \" \"\n-                BIND_PAT@[64; 65)\n-                  NAME@[64; 65)\n-                    IDENT@[64; 65) \"b\"\n+                RECORD_FIELD_PAT@[64; 65)\n+                  BIND_PAT@[64; 65)\n+                    NAME@[64; 65)\n+                      IDENT@[64; 65) \"b\"\n                 WHITESPACE@[65; 66) \" \"\n                 R_CURLY@[66; 67) \"}\"\n             COLON@[67; 68) \":\""}, {"sha": "5e96b695bb2f120649bd4236bd7bc466588255ff", "filename": "crates/ra_syntax/test_data/parser/ok/0064_impl_fn_params.rast", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -71,14 +71,16 @@ SOURCE_FILE@[0; 137)\n               RECORD_FIELD_PAT_LIST@[58; 66)\n                 L_CURLY@[58; 59) \"{\"\n                 WHITESPACE@[59; 60) \" \"\n-                BIND_PAT@[60; 61)\n-                  NAME@[60; 61)\n-                    IDENT@[60; 61) \"a\"\n+                RECORD_FIELD_PAT@[60; 61)\n+                  BIND_PAT@[60; 61)\n+                    NAME@[60; 61)\n+                      IDENT@[60; 61) \"a\"\n                 COMMA@[61; 62) \",\"\n                 WHITESPACE@[62; 63) \" \"\n-                BIND_PAT@[63; 64)\n-                  NAME@[63; 64)\n-                    IDENT@[63; 64) \"b\"\n+                RECORD_FIELD_PAT@[63; 64)\n+                  BIND_PAT@[63; 64)\n+                    NAME@[63; 64)\n+                      IDENT@[63; 64) \"b\"\n                 WHITESPACE@[64; 65) \" \"\n                 R_CURLY@[65; 66) \"}\"\n             COLON@[66; 67) \":\""}, {"sha": "9c02f7c6f04e9a1fa86bf78dc714f00213b5b78c", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e032820f14cad3630299a1ae16c62dcf59f358/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e032820f14cad3630299a1ae16c62dcf59f358/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=a8e032820f14cad3630299a1ae16c62dcf59f358", "patch": "@@ -511,7 +511,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![..],\n             T!['}']\n         }\n-        struct RecordFieldPat: AttrsOwner, NameOwner { T![:], Pat }\n+        struct RecordFieldPat: AttrsOwner { NameRef, T![:], Pat }\n \n         struct TupleStructPat { Path, T!['('], args: [Pat], T![')'] }\n         struct TuplePat { T!['('], args: [Pat], T![')'] }"}]}