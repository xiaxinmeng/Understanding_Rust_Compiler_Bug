{"sha": "921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "node_id": "C_kwDOAAsO6NoAKDkyMWNmYmU1NmZiZjhhMThhNzJiY2EyMmQyY2M4NzQ4Y2QxMDIxM2Y", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T09:46:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T09:46:51Z"}, "message": "Rollup merge of #99581 - nnethercote:improve-derive-packed-errors, r=estebank\n\nImprove error messages involving `derive` and `packed`.\n\nThere are two errors involving `derive` and `packed`.\n\n```\n`#[derive]` can't be derived on a `#[repr(packed)]` struct with type or const parameters\n`#[derive]` can't be derived on a `#[repr(packed)]` struct that does not derive Copy\n```\nThe second one overstates things. It is possible to use derive on a\nrepr(packed) struct that doesn't derive Copy in two cases.\n- If all the fields within the struct meet the required alignment: 1 for\n  `repr(packed)`, or `N` for `repr(packed(N))`.\n- If `Default` is the only trait derived.\n\nThis commit improves things in a few ways.\n- Changes the errors to say `this trait can't be derived on this ...`.\n  This is more accurate, because it's just *this* trait and *this*\n  packed struct that are a problem, not *all* derived traits on *all*\n  packed structs.\n- Adds more details to the \"ERROR\" lines in the test case, enough to\n  distinguish between the two error messages.\n- Adds more cases to the test case that don't cause errors, e.g. `Default`\n  derives.\n- Uses a wider variety of builtin traits in the test case, for better coverage.\n\nr? `@estebank`", "tree": {"sha": "ecc2b8eab1596befc23fca2cbee27a761da57587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc2b8eab1596befc23fca2cbee27a761da57587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3maLCRBK7hj4Ov3rIwAATeIIAIvqMUyjL87WJ6T+eCv78wpR\nNM7cVoVeffBc6CAGC0ENGzqy5mLFT5gma1kXr50J5VM9DV5wEx+j/rgnXIJugx+e\nGadoJKrIIWqkQWMI+0IS15dhfladtKjQGGbkfQxo9CWKbYU1+D8vhVSwqQoTXnX0\nfn1epZckps7Nws0S7vrpdG7nyBNBPLzdDZd2jVKPnMkmheGmMtlrsjaQ9cvZW1u2\nmnCghFiOX4WWZ4gL6USWuPAErY7sXsuJkiQrnN43WYiUIWpL1KWzPtCm2kuLIfTp\nkD4nrmzo8/ASsiklAA039oGhc9WWhfTFr0eHHJgPALVOlzFf/kvMa/OOXcvgvus=\n=xZmi\n-----END PGP SIGNATURE-----\n", "payload": "tree ecc2b8eab1596befc23fca2cbee27a761da57587\nparent 65d239222577e52118f0b047a8b31d9dca4b21ed\nparent 168c5b18392271abe6156350f0952e2b57fff9c5\nauthor Yuki Okushi <jtitor@2k36.org> 1658742411 +0900\ncommitter GitHub <noreply@github.com> 1658742411 +0900\n\nRollup merge of #99581 - nnethercote:improve-derive-packed-errors, r=estebank\n\nImprove error messages involving `derive` and `packed`.\n\nThere are two errors involving `derive` and `packed`.\n\n```\n`#[derive]` can't be derived on a `#[repr(packed)]` struct with type or const parameters\n`#[derive]` can't be derived on a `#[repr(packed)]` struct that does not derive Copy\n```\nThe second one overstates things. It is possible to use derive on a\nrepr(packed) struct that doesn't derive Copy in two cases.\n- If all the fields within the struct meet the required alignment: 1 for\n  `repr(packed)`, or `N` for `repr(packed(N))`.\n- If `Default` is the only trait derived.\n\nThis commit improves things in a few ways.\n- Changes the errors to say `this trait can't be derived on this ...`.\n  This is more accurate, because it's just *this* trait and *this*\n  packed struct that are a problem, not *all* derived traits on *all*\n  packed structs.\n- Adds more details to the \"ERROR\" lines in the test case, enough to\n  distinguish between the two error messages.\n- Adds more cases to the test case that don't cause errors, e.g. `Default`\n  derives.\n- Uses a wider variety of builtin traits in the test case, for better coverage.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "html_url": "https://github.com/rust-lang/rust/commit/921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d239222577e52118f0b047a8b31d9dca4b21ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d239222577e52118f0b047a8b31d9dca4b21ed", "html_url": "https://github.com/rust-lang/rust/commit/65d239222577e52118f0b047a8b31d9dca4b21ed"}, {"sha": "168c5b18392271abe6156350f0952e2b57fff9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/168c5b18392271abe6156350f0952e2b57fff9c5", "html_url": "https://github.com/rust-lang/rust/commit/168c5b18392271abe6156350f0952e2b57fff9c5"}], "stats": {"total": 119, "additions": 68, "deletions": 51}, "files": [{"sha": "c21c1efe99112609418f4111f5c08c863af97ad8", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "patch": "@@ -36,13 +36,16 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     tcx.struct_span_lint_hir(UNALIGNED_REFERENCES, lint_hir_id, tcx.def_span(def_id), |lint| {\n         // FIXME: when we make this a hard error, this should have its\n         // own error code.\n-        let message = if tcx.generics_of(def_id).own_requires_monomorphization() {\n-            \"`#[derive]` can't be used on a `#[repr(packed)]` struct with \\\n-             type or const parameters (error E0133)\"\n+        let extra = if tcx.generics_of(def_id).own_requires_monomorphization() {\n+            \"with type or const parameters\"\n         } else {\n-            \"`#[derive]` can't be used on a `#[repr(packed)]` struct that \\\n-             does not derive Copy (error E0133)\"\n+            \"that does not derive `Copy`\"\n         };\n+        let message = format!(\n+            \"`{}` can't be derived on this `#[repr(packed)]` struct {} (error E0133)\",\n+            tcx.item_name(tcx.trait_id_of_impl(def_id.to_def_id()).expect(\"derived trait name\")),\n+            extra\n+        );\n         lint.build(message).emit();\n     });\n }"}, {"sha": "3884e397764e75e504bd1f87c9ddc77746cd0f78", "filename": "src/test/ui/derives/deriving-with-repr-packed.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs?ref=921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "patch": "@@ -1,29 +1,43 @@\n #![deny(unaligned_references)]\n \n-// check that derive on a packed struct with non-Copy fields\n-// correctly. This can't be made to work perfectly because\n-// we can't just use the field from the struct as it might\n-// not be aligned.\n+// Check that deriving certain builtin traits on certain packed structs cause\n+// errors. This happens when the derived trait would need to use a potentially\n+// misaligned reference. But there are two cases that are allowed:\n+// - If all the fields within the struct meet the required alignment: 1 for\n+//   `repr(packed)`, or `N` for `repr(packed(N))`.\n+// - If `Default` is the only trait derived, because it doesn't involve any\n+//   references.\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n-//~^ ERROR `#[derive]` can't be used\n+#[derive(Copy, Clone, Default, PartialEq, Eq)]\n+//~^ ERROR `Clone` can't be derived on this `#[repr(packed)]` struct with type or const parameters\n //~| hard error\n-//~^^^ ERROR `#[derive]` can't be used\n+//~^^^ ERROR `PartialEq` can't be derived on this `#[repr(packed)]` struct with type or const parameters\n //~| hard error\n #[repr(packed)]\n pub struct Foo<T>(T, T, T);\n \n-#[derive(PartialEq, Eq)]\n-//~^ ERROR `#[derive]` can't be used\n+#[derive(Default, Hash)]\n+//~^ ERROR `Hash` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy`\n //~| hard error\n #[repr(packed)]\n pub struct Bar(u32, u32, u32);\n \n-#[derive(PartialEq)]\n+// This one is fine because the field alignment is 1.\n+#[derive(Default, Hash)]\n+#[repr(packed)]\n+pub struct Bar2(u8, i8, bool);\n+\n+// This one is fine because the field alignment is 2, matching `packed(2)`.\n+#[derive(Default, Hash)]\n+#[repr(packed(2))]\n+pub struct Bar3(u16, i16, bool);\n+\n+// This one is fine because it's not packed.\n+#[derive(Debug, Default)]\n struct Y(usize);\n \n-#[derive(PartialEq)]\n-//~^ ERROR `#[derive]` can't be used\n+#[derive(Debug, Default)]\n+//~^ ERROR `Debug` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy`\n //~| hard error\n #[repr(packed)]\n struct X(Y);"}, {"sha": "1f98da5b70e9fe70f40651fa25515bc5d0d0bcca", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/921cfbe56fbf8a18a72bca22d2cc8748cd10213f/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=921cfbe56fbf8a18a72bca22d2cc8748cd10213f", "patch": "@@ -1,7 +1,7 @@\n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:8:16\n+error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:11:16\n    |\n-LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n note: the lint level is defined here\n@@ -13,43 +13,43 @@ LL | #![deny(unaligned_references)]\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:8:23\n+error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:11:32\n    |\n-LL | #[derive(Copy, Clone, PartialEq, Eq)]\n-   |                       ^^^^^^^^^\n+LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n+   |                                ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:16:10\n+error: `Hash` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy` (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:19:19\n    |\n-LL | #[derive(PartialEq, Eq)]\n-   |          ^^^^^^^^^\n+LL | #[derive(Default, Hash)]\n+   |                   ^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:25:10\n+error: `Debug` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy` (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:39:10\n    |\n-LL | #[derive(PartialEq)]\n-   |          ^^^^^^^^^\n+LL | #[derive(Debug, Default)]\n+   |          ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:8:16\n+error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:11:16\n    |\n-LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n note: the lint level is defined here\n@@ -62,11 +62,11 @@ LL | #![deny(unaligned_references)]\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:8:23\n+error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:11:32\n    |\n-LL | #[derive(Copy, Clone, PartialEq, Eq)]\n-   |                       ^^^^^^^^^\n+LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n+   |                                ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n@@ -78,11 +78,11 @@ LL | #![deny(unaligned_references)]\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:16:10\n+error: `Hash` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy` (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:19:19\n    |\n-LL | #[derive(PartialEq, Eq)]\n-   |          ^^^^^^^^^\n+LL | #[derive(Default, Hash)]\n+   |                   ^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n@@ -91,14 +91,14 @@ LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:25:10\n+error: `Debug` can't be derived on this `#[repr(packed)]` struct that does not derive `Copy` (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:39:10\n    |\n-LL | #[derive(PartialEq)]\n-   |          ^^^^^^^^^\n+LL | #[derive(Debug, Default)]\n+   |          ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n@@ -107,5 +107,5 @@ LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}