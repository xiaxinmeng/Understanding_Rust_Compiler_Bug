{"sha": "bf9b4578bbe038501ef7c337e22b448de477f61c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOWI0NTc4YmJlMDM4NTAxZWY3YzMzN2UyMmI0NDhkZTQ3N2Y2MWM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-09T22:52:19Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-09T22:52:19Z"}, "message": "Remove Option<...> from result of Crate::root_module\n\nThere doesn't seem to be any need for it, and removing it simplies\nseveral paths of code that depend on it.", "tree": {"sha": "dc307ec47e6bfff850ddc5e0079e14f2512c87a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc307ec47e6bfff850ddc5e0079e14f2512c87a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf9b4578bbe038501ef7c337e22b448de477f61c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9b4578bbe038501ef7c337e22b448de477f61c", "html_url": "https://github.com/rust-lang/rust/commit/bf9b4578bbe038501ef7c337e22b448de477f61c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf9b4578bbe038501ef7c337e22b448de477f61c/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "html_url": "https://github.com/rust-lang/rust/commit/6cde0b1aa0f6b8623c6b81b2396f4a0345891233"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "0de6fdf3fb8a548dbf9f76f8dc157190e200f7a2", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -257,7 +257,7 @@ pub use prelude::*;\n             .find(|dep| &dep.name.to_string() == std_crate)?\n             .krate;\n \n-        let mut module = std_crate.root_module(db)?;\n+        let mut module = std_crate.root_module(db);\n         for segment in path {\n             module = module.children(db).find_map(|child| {\n                 let name = child.name(db)?;"}, {"sha": "44456e49e2bca2e9c61eb97db287356f933c907f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -83,9 +83,9 @@ impl Crate {\n             .collect()\n     }\n \n-    pub fn root_module(self, db: &dyn HirDatabase) -> Option<Module> {\n+    pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n         let module_id = db.crate_def_map(self.id).root;\n-        Some(Module::new(self, module_id))\n+        Module::new(self, module_id)\n     }\n \n     pub fn root_file(self, db: &dyn HirDatabase) -> FileId {"}, {"sha": "45389fd23fedc2e38b201b233390593c8f82ad89", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = classify_name(&sema, &name)?.definition(sema.db)?;\n+                let def = classify_name(&sema, &name)?.definition(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n@@ -82,7 +82,8 @@ pub(crate) fn reference_definition(\n     name_ref: &ast::NameRef,\n ) -> ReferenceResult {\n     let name_kind = classify_name_ref(sema, name_ref);\n-    if let Some(def) = name_kind.and_then(|def| def.definition(sema.db)) {\n+    if let Some(def) = name_kind {\n+        let def = def.definition(sema.db);\n         return match def.try_to_nav(sema.db) {\n             Some(nav) => ReferenceResult::Exact(nav),\n             None => ReferenceResult::Approximate(Vec::new()),"}, {"sha": "f6e493817bd00872de2c2eedf48549bd8410890a", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -85,8 +85,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).and_then(|d| d.definition(sema.db)),\n-            ast::Name(name) => classify_name(&sema, &name).and_then(|d| d.definition(sema.db)),\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "453985de3e3b28379117431302a7e2f5ef8e2f2e", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -130,13 +130,13 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?.definition(sema.db)?;\n+        let def = classify_name(sema, &name)?.definition(sema.db);\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }\n     let name_ref =\n         sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(sema, &name_ref)?.definition(sema.db)?;\n+    let def = classify_name_ref(sema, &name_ref)?.definition(sema.db);\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, def))\n }"}, {"sha": "9bb95277d0da3e29765c4d2e350fe5ebcbf3f94a", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -93,19 +93,19 @@ pub enum NameClass {\n impl NameClass {\n     pub fn into_definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n         Some(match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db)?.into()),\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n             NameClass::ConstReference(_) => return None,\n             NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n         })\n     }\n \n-    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n-        Some(match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db)?.into()),\n+    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n+        match self {\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::FieldShorthand { local: _, field } => field,\n-        })\n+        }\n     }\n }\n \n@@ -148,7 +148,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                         })\n                         .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n \n-                    Some(NameClass::Definition(name_ref_class.definition(sema.db)?))\n+                    Some(NameClass::Definition(name_ref_class.definition(sema.db)))\n                 } else {\n                     let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                     let resolved = sema.resolve_extern_crate(&extern_crate)?;\n@@ -234,14 +234,12 @@ pub enum NameRefClass {\n }\n \n impl NameRefClass {\n-    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n-        Some(match self {\n-            NameRefClass::ExternCrate(krate) => {\n-                Definition::ModuleDef(krate.root_module(db)?.into())\n-            }\n+    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n+        match self {\n+            NameRefClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n-        })\n+        }\n     }\n }\n "}, {"sha": "0d386841e52350b53fd2d1a94856ade2b781ba31", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -72,7 +72,7 @@ impl AnalysisStatsCmd {\n             shuffle(&mut rng, &mut krates);\n         }\n         for krate in krates {\n-            let module = krate.root_module(db).expect(\"crate without root module\");\n+            let module = krate.root_module(db);\n             let file_id = module.definition_source(db).file_id;\n             let file_id = file_id.original_file(db);\n             let source_root = db.file_source_root(file_id);"}, {"sha": "f17fc5dfe907134c03e53f452c2182e7bceb5fe4", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9b4578bbe038501ef7c337e22b448de477f61c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=bf9b4578bbe038501ef7c337e22b448de477f61c", "patch": "@@ -28,7 +28,7 @@ pub fn diagnostics(\n     let mut work = Vec::new();\n     let krates = Crate::all(db);\n     for krate in krates {\n-        let module = krate.root_module(db).expect(\"crate without root module\");\n+        let module = krate.root_module(db);\n         let file_id = module.definition_source(db).file_id;\n         let file_id = file_id.original_file(db);\n         let source_root = db.file_source_root(file_id);"}]}