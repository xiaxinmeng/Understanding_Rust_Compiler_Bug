{"sha": "5f13a3b540ab6024665322d716e487c800645f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTNhM2I1NDBhYjYwMjQ2NjUzMjJkNzE2ZTQ4N2M4MDA2NDVmMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T04:46:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T04:46:27Z"}, "message": "Auto merge of #41286 - lukaramu:std-collections-docs, r=frewsxcv\n\nVarious improvements in std::collections docs\n\nThe meat of this PR are:\n* changes to (almost all?) iterator struct docs in std::collections such that they use the standard iterator boilerplate and state where they are created\n* a bunch of added links (at least as much as possible given std::collections mostly being a facade and whatnot :sweat_smile:)\n* an example for `Bound`\n* changed phrasing for some summary sentences to be less redundant as well as more consistant with others in the module\n\nThere also are various other fixes, e.g. removing parens from method names in the module docs, changing some imperatives to 3rd person, etc.\n\nr? @steveklabnik", "tree": {"sha": "006e132eed0bffe9dbc83f10d6911d44a773c190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006e132eed0bffe9dbc83f10d6911d44a773c190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f13a3b540ab6024665322d716e487c800645f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13a3b540ab6024665322d716e487c800645f24", "html_url": "https://github.com/rust-lang/rust/commit/5f13a3b540ab6024665322d716e487c800645f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f13a3b540ab6024665322d716e487c800645f24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1a74e4d3e629a350928e850514541782b46fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1a74e4d3e629a350928e850514541782b46fdd", "html_url": "https://github.com/rust-lang/rust/commit/be1a74e4d3e629a350928e850514541782b46fdd"}, {"sha": "2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "html_url": "https://github.com/rust-lang/rust/commit/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24"}], "stats": {"total": 561, "additions": 415, "deletions": 146}, "files": [{"sha": "149c285a72a98d10a65aa2a2dc73b255601d24e4", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -20,11 +20,12 @@\n //!\n //! This is a larger example that implements [Dijkstra's algorithm][dijkstra]\n //! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\n-//! It shows how to use `BinaryHeap` with custom types.\n+//! It shows how to use [`BinaryHeap`] with custom types.\n //!\n //! [dijkstra]: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n //! [sssp]: http://en.wikipedia.org/wiki/Shortest_path_problem\n //! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph\n+//! [`BinaryHeap`]: struct.BinaryHeap.html\n //!\n //! ```\n //! use std::cmp::Ordering;\n@@ -218,10 +219,14 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n-/// A container object that represents the result of the [`peek_mut`] method\n-/// on `BinaryHeap`. See its documentation for details.\n+/// Structure wrapping a mutable reference to the greatest item on a\n+/// `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\n+/// its documentation for more.\n ///\n /// [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,\n@@ -434,7 +439,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// given `BinaryHeap`. Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it requests. Therefore\n-    /// capacity can not be relied upon to be precisely minimal. Prefer `reserve` if future\n+    /// capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\n     /// insertions are expected.\n     ///\n     /// # Panics\n@@ -452,6 +457,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert!(heap.capacity() >= 100);\n     /// heap.push(4);\n     /// ```\n+    ///\n+    /// [`reserve`]: #method.reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.data.reserve_exact(additional);\n@@ -971,7 +978,13 @@ impl<'a, T> Drop for Hole<'a, T> {\n     }\n }\n \n-/// `BinaryHeap` iterator.\n+/// An iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.BinaryHeap.html#method.iter\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n@@ -1027,7 +1040,13 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n-/// An iterator that moves out of a `BinaryHeap`.\n+/// An owning iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.BinaryHeap.html#method.into_iter\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {\n@@ -1076,7 +1095,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// An iterator that drains a `BinaryHeap`.\n+/// A draining iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.BinaryHeap.html#method.drain\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n pub struct Drain<'a, T: 'a> {"}, {"sha": "b986c0275502c41d859a9163b0e8ac376317108e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 64, "deletions": 13, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -262,7 +262,13 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s entries.\n+/// An iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.BTreeMap.html#method.iter\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     range: Range<'a, K, V>,\n@@ -276,15 +282,27 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n     }\n }\n \n-/// A mutable iterator over a `BTreeMap`'s entries.\n+/// A mutable iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.BTreeMap.html#method.iter_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n }\n \n-/// An owning iterator over a `BTreeMap`'s entries.\n+/// An owning iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.BTreeMap.html#method.into_iter\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     front: Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>,\n@@ -303,7 +321,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s keys.\n+/// An iterator over the keys of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`keys`]: struct.BTreeMap.html#method.keys\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -316,7 +340,13 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s values.\n+/// An iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`values`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values`]: struct.BTreeMap.html#method.values\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -329,14 +359,26 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a `BTreeMap`'s values.\n+/// A mutable iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values_mut`]: struct.BTreeMap.html#method.values_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n-/// An iterator over a sub-range of `BTreeMap`'s entries.\n+/// An iterator over a sub-range of entries in a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`range`]: struct.BTreeMap.html#method.range\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -350,7 +392,13 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a sub-range of `BTreeMap`'s entries.\n+/// A mutable iterator over a sub-range of entries in a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`range_mut`]: struct.BTreeMap.html#method.range_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -372,18 +420,19 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K,\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-/// This enum is constructed from the [`entry`] method on [`BTreeMap`].\n+///\n+/// This `enum` is constructed from the [`entry`] method on [`BTreeMap`].\n ///\n /// [`BTreeMap`]: struct.BTreeMap.html\n /// [`entry`]: struct.BTreeMap.html#method.entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// A vacant `Entry`\n+    /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n            VacantEntry<'a, K, V>),\n \n-    /// An occupied `Entry`\n+    /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n              OccupiedEntry<'a, K, V>),\n@@ -403,7 +452,8 @@ impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for Entry<'a, K, V> {\n     }\n }\n \n-/// A vacant `Entry`. It is part of the [`Entry`] enum.\n+/// A view into a vacant entry in a `BTreeMap`.\n+/// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -425,7 +475,8 @@ impl<'a, K: 'a + Debug + Ord, V: 'a> Debug for VacantEntry<'a, K, V> {\n     }\n }\n \n-/// An occupied `Entry`. It is part of the [`Entry`] enum.\n+/// A view into an occupied entry in a `BTreeMap`.\n+/// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ffca6964c5fdfe95190d0a1f16f7091ce6328f7a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -74,9 +74,10 @@ pub struct BTreeSet<T> {\n     map: BTreeMap<T, ()>,\n }\n \n-/// An iterator over a `BTreeSet`'s items.\n+/// An iterator over the items of a `BTreeSet`.\n ///\n-/// This structure is created by the [`iter`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`iter`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`iter`]: struct.BTreeSet.html#method.iter\n@@ -94,21 +95,23 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     }\n }\n \n-/// An owning iterator over a `BTreeSet`'s items.\n+/// An owning iterator over the items of a `BTreeSet`.\n ///\n-/// This structure is created by the `into_iter` method on [`BTreeSet`]\n-/// [`BTreeSet`] (provided by the `IntoIterator` trait).\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`into_iter`]: struct.BTreeSet.html#method.into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n \n-/// An iterator over a sub-range of `BTreeSet`'s items.\n+/// An iterator over a sub-range of items in a `BTreeSet`.\n ///\n-/// This structure is created by the [`range`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`range`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n@@ -118,9 +121,10 @@ pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n \n-/// A lazy iterator producing elements in the set difference (in-order).\n+/// A lazy iterator producing elements in the difference of `BTreeSet`s.\n ///\n-/// This structure is created by the [`difference`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`difference`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`difference`]: struct.BTreeSet.html#method.difference\n@@ -139,10 +143,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set symmetric difference (in-order).\n+/// A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.\n ///\n-/// This structure is created by the [`symmetric_difference`] method on\n-/// [`BTreeSet`].\n+/// This `struct` is created by the [`symmetric_difference`] method on\n+/// [`BTreeSet`]. See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference\n@@ -161,9 +165,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set intersection (in-order).\n+/// A lazy iterator producing elements in the intersection of `BTreeSet`s.\n ///\n-/// This structure is created by the [`intersection`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`intersection`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`intersection`]: struct.BTreeSet.html#method.intersection\n@@ -182,9 +187,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set union (in-order).\n+/// A lazy iterator producing elements in the union of `BTreeSet`s.\n ///\n-/// This structure is created by the [`union`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`union`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`union`]: struct.BTreeSet.html#method.union\n@@ -728,7 +734,7 @@ impl<T> IntoIterator for BTreeSet<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n-    /// Gets an iterator for moving out the BtreeSet's contents.\n+    /// Gets an iterator for moving out the `BTreeSet`'s contents.\n     ///\n     /// # Examples\n     ///"}, {"sha": "a207087915a3d66cf5fdc0bb0c99212404608777", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -135,6 +135,42 @@ mod std {\n }\n \n /// An endpoint of a range of keys.\n+///\n+/// # Examples\n+///\n+/// `Bound`s are range endpoints:\n+///\n+/// ```\n+/// #![feature(collections_range)]\n+///\n+/// use std::collections::range::RangeArgument;\n+/// use std::collections::Bound::*;\n+///\n+/// assert_eq!((..100).start(), Unbounded);\n+/// assert_eq!((1..12).start(), Included(&1));\n+/// assert_eq!((1..12).end(), Excluded(&12));\n+/// ```\n+///\n+/// Using a tuple of `Bound`s as an argument to [`BTreeMap::range`].\n+/// Note that in most cases, it's better to use range syntax (`1..5`) instead.\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+/// use std::collections::Bound::{Excluded, Included, Unbounded};\n+///\n+/// let mut map = BTreeMap::new();\n+/// map.insert(3, \"a\");\n+/// map.insert(5, \"b\");\n+/// map.insert(8, \"c\");\n+///\n+/// for (key, value) in map.range((Excluded(3), Included(8))) {\n+///     println!(\"{}: {}\", key, value);\n+/// }\n+///\n+/// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n+/// ```\n+///\n+/// [`BTreeMap::range`]: btree_map/struct.BTreeMap.html#method.range\n #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {"}, {"sha": "bfb03a5b23f1d29e11ffe6834da44f990904a28a", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -56,7 +56,13 @@ struct Node<T> {\n     element: T,\n }\n \n-/// An iterator over references to the elements of a `LinkedList`.\n+/// An iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`LinkedList`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.LinkedList.html#method.iter\n+/// [`LinkedList`]: struct.LinkedList.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     head: Option<Shared<Node<T>>>,\n@@ -82,7 +88,13 @@ impl<'a, T> Clone for Iter<'a, T> {\n     }\n }\n \n-/// An iterator over mutable references to the elements of a `LinkedList`.\n+/// A mutable iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`LinkedList`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.LinkedList.html#method.iter_mut\n+/// [`LinkedList`]: struct.LinkedList.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     list: &'a mut LinkedList<T>,\n@@ -100,7 +112,13 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n     }\n }\n \n-/// An iterator over the elements of a `LinkedList`.\n+/// An owning iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.LinkedList.html#method.into_iter\n+/// [`LinkedList`]: struct.LinkedList.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n@@ -618,12 +636,12 @@ impl<T> LinkedList<T> {\n     /// Splits the list into two at the given index. Returns everything after the given index,\n     /// including the index.\n     ///\n+    /// This operation should compute in O(n) time.\n+    ///\n     /// # Panics\n     ///\n     /// Panics if `at > len`.\n     ///\n-    /// This operation should compute in O(n) time.\n-    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "2ce3b92843bd7f6570bbde6500de4fb6db78e6e9", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! `VecDeque` is a double-ended queue, which is implemented with the help of a\n-//! growing ring buffer.\n+//! A double-ended queue implemented with a growable ring buffer.\n //!\n //! This queue has `O(1)` amortized inserts and removals from both ends of the\n //! container. It also has `O(1)` indexing like a vector. The contained elements\n@@ -43,13 +42,17 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (32 - 1); // Largest possible power of\n #[cfg(target_pointer_width = \"64\")]\n const MAXIMUM_ZST_CAPACITY: usize = 1 << (64 - 1); // Largest possible power of two\n \n-/// `VecDeque` is a growable ring buffer, which can be used as a double-ended\n-/// queue efficiently.\n+/// A double-ended queue implemented with a growable ring buffer.\n ///\n-/// The \"default\" usage of this type as a queue is to use `push_back` to add to\n-/// the queue, and `pop_front` to remove from the queue. `extend` and `append`\n+/// The \"default\" usage of this type as a queue is to use [`push_back`] to add to\n+/// the queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\n /// push onto the back in this manner, and iterating over `VecDeque` goes front\n /// to back.\n+///\n+/// [`push_back`]: #method.push_back\n+/// [`pop_front`]: #method.pop_front\n+/// [`extend`]: #method.extend\n+/// [`append`]: #method.append\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n     // tail and head are pointers into the buffer. Tail always points\n@@ -506,7 +509,7 @@ impl<T> VecDeque<T> {\n     /// given `VecDeque`. Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it requests. Therefore\n-    /// capacity can not be relied upon to be precisely minimal. Prefer `reserve` if future\n+    /// capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\n     /// insertions are expected.\n     ///\n     /// # Panics\n@@ -522,6 +525,8 @@ impl<T> VecDeque<T> {\n     /// buf.reserve_exact(10);\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n+    ///\n+    /// [`reserve`]: #method.reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.reserve(additional);\n@@ -1890,7 +1895,13 @@ fn count(tail: usize, head: usize, size: usize) -> usize {\n     (head.wrapping_sub(tail)) & (size - 1)\n }\n \n-/// `VecDeque` iterator.\n+/// An iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.VecDeque.html#method.iter\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ring: &'a [T],\n@@ -1971,7 +1982,13 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n \n-/// `VecDeque` mutable iterator.\n+/// A mutable iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.VecDeque.html#method.iter_mut\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ring: &'a mut [T],\n@@ -2047,7 +2064,13 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n-/// A by-value `VecDeque` iterator\n+/// An owning iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.VecDeque.html#method.into_iter\n+/// [`VecDeque`]: struct.VecDeque.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n@@ -2097,7 +2120,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// A draining `VecDeque` iterator\n+/// A draining iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.VecDeque.html#method.drain\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     after_tail: usize,"}, {"sha": "eacb59d375a5065885a0c884eeec45ab092cbefa", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 76, "deletions": 33, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -215,8 +215,7 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n // 1. Alfredo Viola (2005). Distributional analysis of Robin Hood linear probing\n //    hashing with buckets.\n \n-/// A hash map implementation which uses linear probing with Robin Hood bucket\n-/// stealing.\n+/// A hash map implemented with linear probing and Robin Hood bucket stealing.\n ///\n /// By default, `HashMap` uses a hashing algorithm selected to provide\n /// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n@@ -235,9 +234,8 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// attacks such as HashDoS.\n ///\n /// The hashing algorithm can be replaced on a per-`HashMap` basis using the\n-/// [`HashMap::default`], [`HashMap::with_hasher`], and\n-/// [`HashMap::with_capacity_and_hasher`] methods. Many alternative algorithms\n-/// are available on crates.io, such as the [`fnv`] crate.\n+/// [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\n+/// alternative algorithms are available on crates.io, such as the [`fnv`] crate.\n ///\n /// It is required that the keys implement the [`Eq`] and [`Hash`] traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n@@ -339,9 +337,9 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n /// [`Cell`]: ../../std/cell/struct.Cell.html\n-/// [`HashMap::default`]: #method.default\n-/// [`HashMap::with_hasher`]: #method.with_hasher\n-/// [`HashMap::with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n+/// [`default`]: #method.default\n+/// [`with_hasher`]: #method.with_hasher\n+/// [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n /// [`fnv`]: https://crates.io/crates/fnv\n ///\n /// ```\n@@ -373,7 +371,7 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// }\n /// ```\n ///\n-/// A HashMap with fixed list of elements can be initialized from an array:\n+/// A `HashMap` with fixed list of elements can be initialized from an array:\n ///\n /// ```\n /// use std::collections::HashMap;\n@@ -654,12 +652,13 @@ impl<K, V, S> HashMap<K, V, S>\n         }\n     }\n \n-    /// Creates an empty `HashMap` with the specified capacity, using `hasher`\n+    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n     /// to hash the keys.\n     ///\n     /// The hash map will be able to hold at least `capacity` elements without\n     /// reallocating. If `capacity` is 0, the hash map will not allocate.\n-    /// Warning: `hasher` is normally randomly generated, and\n+    ///\n+    /// Warning: `hash_builder` is normally randomly generated, and\n     /// is designed to allow HashMaps to be resistant to attacks that\n     /// cause many collisions and very poor performance. Setting it\n     /// manually using this function can expose a DoS attack vector.\n@@ -686,7 +685,9 @@ impl<K, V, S> HashMap<K, V, S>\n         }\n     }\n \n-    /// Returns a reference to the map's hasher.\n+    /// Returns a reference to the map's [`BuildHasher`].\n+    ///\n+    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         &self.hash_builder\n@@ -849,7 +850,7 @@ impl<K, V, S> HashMap<K, V, S>\n     }\n \n     /// An iterator visiting all keys in arbitrary order.\n-    /// Iterator element type is `&'a K`.\n+    /// The iterator element type is `&'a K`.\n     ///\n     /// # Examples\n     ///\n@@ -871,7 +872,7 @@ impl<K, V, S> HashMap<K, V, S>\n     }\n \n     /// An iterator visiting all values in arbitrary order.\n-    /// Iterator element type is `&'a V`.\n+    /// The iterator element type is `&'a V`.\n     ///\n     /// # Examples\n     ///\n@@ -893,7 +894,7 @@ impl<K, V, S> HashMap<K, V, S>\n     }\n \n     /// An iterator visiting all values mutably in arbitrary order.\n-    /// Iterator element type is `&'a mut V`.\n+    /// The iterator element type is `&'a mut V`.\n     ///\n     /// # Examples\n     ///\n@@ -920,7 +921,7 @@ impl<K, V, S> HashMap<K, V, S>\n     }\n \n     /// An iterator visiting all key-value pairs in arbitrary order.\n-    /// Iterator element type is `(&'a K, &'a V)`.\n+    /// The iterator element type is `(&'a K, &'a V)`.\n     ///\n     /// # Examples\n     ///\n@@ -943,7 +944,7 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// An iterator visiting all key-value pairs in arbitrary order,\n     /// with mutable references to the values.\n-    /// Iterator element type is `(&'a K, &'a mut V)`.\n+    /// The iterator element type is `(&'a K, &'a mut V)`.\n     ///\n     /// # Examples\n     ///\n@@ -1333,7 +1334,13 @@ impl<'a, K, Q: ?Sized, V, S> Index<&'a Q> for HashMap<K, V, S>\n     }\n }\n \n-/// HashMap iterator.\n+/// An iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.HashMap.html#method.iter\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>,\n@@ -1356,19 +1363,37 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Iter<'a, K, V> {\n     }\n }\n \n-/// HashMap mutable values iterator.\n+/// A mutable iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.HashMap.html#method.iter_mut\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     inner: table::IterMut<'a, K, V>,\n }\n \n-/// HashMap move iterator.\n+/// An owning iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.HashMap.html#method.into_iter\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     pub(super) inner: table::IntoIter<K, V>,\n }\n \n-/// HashMap keys iterator.\n+/// An iterator over the keys of a `HashMap`.\n+///\n+/// This `struct` is created by the [`keys`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`keys`]: struct.HashMap.html#method.keys\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1391,7 +1416,13 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Keys<'a, K, V> {\n     }\n }\n \n-/// HashMap values iterator.\n+/// An iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`values`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values`]: struct.HashMap.html#method.values\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1414,13 +1445,25 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Values<'a, K, V> {\n     }\n }\n \n-/// HashMap drain iterator.\n+/// A draining iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.HashMap.html#method.drain\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     pub(super) inner: table::Drain<'a, K, V>,\n }\n \n-/// Mutable HashMap values iterator.\n+/// A mutable iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values_mut`]: struct.HashMap.html#method.values_mut\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n@@ -1467,19 +1510,20 @@ impl<'a, K, V> InternalEntry<K, V, &'a mut RawTable<K, V>> {\n     }\n }\n \n-/// A view into a single location in a map, which may be vacant or occupied.\n-/// This enum is constructed from the [`entry`] method on [`HashMap`].\n+/// A view into a single entry in a map, which may either be vacant or occupied.\n+///\n+/// This `enum` is constructed from the [`entry`] method on [`HashMap`].\n ///\n /// [`HashMap`]: struct.HashMap.html\n /// [`entry`]: struct.HashMap.html#method.entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// An occupied Entry.\n+    /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n              OccupiedEntry<'a, K, V>),\n \n-    /// A vacant Entry.\n+    /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n            VacantEntry<'a, K, V>),\n@@ -1503,7 +1547,7 @@ impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for Entry<'a, K, V> {\n     }\n }\n \n-/// A view into a single occupied location in a HashMap.\n+/// A view into an occupied entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n@@ -1523,7 +1567,7 @@ impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n     }\n }\n \n-/// A view into a single empty location in a HashMap.\n+/// A view into a vacant entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n@@ -2366,10 +2410,9 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n-    /// Creates a new `DefaultHasher` using [`DefaultHasher::new`]. See\n-    /// [`DefaultHasher::new`] documentation for more information.\n+    /// Creates a new `DefaultHasher` using [`new`]. See its documentation for more.\n     ///\n-    /// [`DefaultHasher::new`]: #method.new\n+    /// [`new`]: #method.new\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()\n     }"}, {"sha": "e3fad28502573a7604ca0ddbb90744098a4ce413", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 90, "deletions": 28, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -24,11 +24,10 @@ use super::map::{self, HashMap, Keys, RandomState};\n // for `bucket.val` in the case of HashSet. I suppose we would need HKT\n // to get rid of it properly.\n \n-/// An implementation of a hash set using the underlying representation of a\n-/// HashMap where the value is ().\n+/// A hash set implemented as a `HashMap` where the value is `()`.\n ///\n-/// As with the `HashMap` type, a `HashSet` requires that the elements\n-/// implement the `Eq` and `Hash` traits. This can frequently be achieved by\n+/// As with the [`HashMap`] type, a `HashSet` requires that the elements\n+/// implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\n /// using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\n /// it is important that the following property holds:\n ///\n@@ -40,9 +39,9 @@ use super::map::{self, HashMap, Keys, RandomState};\n ///\n ///\n /// It is a logic error for an item to be modified in such a way that the\n-/// item's hash, as determined by the `Hash` trait, or its equality, as\n-/// determined by the `Eq` trait, changes while it is in the set. This is\n-/// normally only possible through `Cell`, `RefCell`, global state, I/O, or\n+/// item's hash, as determined by the [`Hash`] trait, or its equality, as\n+/// determined by the [`Eq`] trait, changes while it is in the set. This is\n+/// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or\n /// unsafe code.\n ///\n /// # Examples\n@@ -75,8 +74,8 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// ```\n ///\n /// The easiest way to use `HashSet` with a custom type is to derive\n-/// `Eq` and `Hash`. We must also derive `PartialEq`, this will in the\n-/// future be implied by `Eq`.\n+/// [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the\n+/// future be implied by [`Eq`].\n ///\n /// ```\n /// use std::collections::HashSet;\n@@ -99,7 +98,7 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// }\n /// ```\n ///\n-/// HashSet with fixed list of elements can be initialized from an array:\n+/// A `HashSet` with fixed list of elements can be initialized from an array:\n ///\n /// ```\n /// use std::collections::HashSet;\n@@ -110,6 +109,13 @@ use super::map::{self, HashMap, Keys, RandomState};\n ///     // use the values stored in the set\n /// }\n /// ```\n+///\n+/// [`Cell`]: ../../std/cell/struct.Cell.html\n+/// [`Eq`]: ../../std/cmp/trait.Eq.html\n+/// [`Hash`]: ../../std/hash/trait.Hash.html\n+/// [`HashMap`]: struct.HashMap.html\n+/// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n+/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n \n \n #[derive(Clone)]\n@@ -181,7 +187,7 @@ impl<T, S> HashSet<T, S>\n         HashSet { map: HashMap::with_hasher(hasher) }\n     }\n \n-    /// Creates an empty HashSet with with the specified capacity, using\n+    /// Creates an empty `HashSet` with with the specified capacity, using\n     /// `hasher` to hash the keys.\n     ///\n     /// The hash set will be able to hold at least `capacity` elements without\n@@ -208,7 +214,9 @@ impl<T, S> HashSet<T, S>\n         HashSet { map: HashMap::with_capacity_and_hasher(capacity, hasher) }\n     }\n \n-    /// Returns a reference to the set's hasher.\n+    /// Returns a reference to the set's [`BuildHasher`].\n+    ///\n+    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         self.map.hasher()\n@@ -271,7 +279,7 @@ impl<T, S> HashSet<T, S>\n     }\n \n     /// An iterator visiting all elements in arbitrary order.\n-    /// Iterator element type is &'a T.\n+    /// The iterator element type is `&'a T`.\n     ///\n     /// # Examples\n     ///\n@@ -291,7 +299,7 @@ impl<T, S> HashSet<T, S>\n         Iter { iter: self.map.keys() }\n     }\n \n-    /// Visit the values representing the difference,\n+    /// Visits the values representing the difference,\n     /// i.e. the values that are in `self` but not in `other`.\n     ///\n     /// # Examples\n@@ -322,7 +330,7 @@ impl<T, S> HashSet<T, S>\n         }\n     }\n \n-    /// Visit the values representing the symmetric difference,\n+    /// Visits the values representing the symmetric difference,\n     /// i.e. the values that are in `self` or in `other` but not in both.\n     ///\n     /// # Examples\n@@ -350,7 +358,7 @@ impl<T, S> HashSet<T, S>\n         SymmetricDifference { iter: self.difference(other).chain(other.difference(self)) }\n     }\n \n-    /// Visit the values representing the intersection,\n+    /// Visits the values representing the intersection,\n     /// i.e. the values that are both in `self` and `other`.\n     ///\n     /// # Examples\n@@ -376,7 +384,7 @@ impl<T, S> HashSet<T, S>\n         }\n     }\n \n-    /// Visit the values representing the union,\n+    /// Visits the values representing the union,\n     /// i.e. all the values in `self` or `other`, without duplicates.\n     ///\n     /// # Examples\n@@ -460,7 +468,7 @@ impl<T, S> HashSet<T, S>\n     /// Returns `true` if the set contains a value.\n     ///\n     /// The value may be any borrowed form of the set's value type, but\n-    /// `Hash` and `Eq` on the borrowed form *must* match those for\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n     /// # Examples\n@@ -472,6 +480,9 @@ impl<T, S> HashSet<T, S>\n     /// assert_eq!(set.contains(&1), true);\n     /// assert_eq!(set.contains(&4), false);\n     /// ```\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool\n         where T: Borrow<Q>,\n@@ -483,8 +494,11 @@ impl<T, S> HashSet<T, S>\n     /// Returns a reference to the value in the set, if any, that is equal to the given value.\n     ///\n     /// The value may be any borrowed form of the set's value type, but\n-    /// `Hash` and `Eq` on the borrowed form *must* match those for\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n         where T: Borrow<Q>,\n@@ -596,7 +610,7 @@ impl<T, S> HashSet<T, S>\n     /// present in the set.\n     ///\n     /// The value may be any borrowed form of the set's value type, but\n-    /// `Hash` and `Eq` on the borrowed form *must* match those for\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n     /// # Examples\n@@ -610,6 +624,9 @@ impl<T, S> HashSet<T, S>\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n         where T: Borrow<Q>,\n@@ -621,8 +638,11 @@ impl<T, S> HashSet<T, S>\n     /// Removes and returns the value in the set, if any, that is equal to the given one.\n     ///\n     /// The value may be any borrowed form of the set's value type, but\n-    /// `Hash` and `Eq` on the borrowed form *must* match those for\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n         where T: Borrow<Q>,\n@@ -856,25 +876,49 @@ impl<'a, 'b, T, S> Sub<&'b HashSet<T, S>> for &'a HashSet<T, S>\n     }\n }\n \n-/// HashSet iterator\n+/// An iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`iter`]: struct.HashSet.html#method.iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>,\n }\n \n-/// HashSet move iterator\n+/// An owning iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`into_iter`]: struct.HashSet.html#method.into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     iter: map::IntoIter<K, ()>,\n }\n \n-/// HashSet drain iterator\n+/// A draining iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`drain`]: struct.HashSet.html#method.drain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     iter: map::Drain<'a, K, ()>,\n }\n \n-/// Intersection iterator\n+/// A lazy iterator producing elements in the intersection of `HashSet`s.\n+///\n+/// This `struct` is created by the [`intersection`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`intersection`]: struct.HashSet.html#method.intersection\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -883,7 +927,13 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-/// Difference iterator\n+/// A lazy iterator producing elements in the difference of `HashSet`s.\n+///\n+/// This `struct` is created by the [`difference`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`difference`]: struct.HashSet.html#method.difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -892,13 +942,25 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-/// Symmetric difference iterator.\n+/// A lazy iterator producing elements in the symmetric difference of `HashSet`s.\n+///\n+/// This `struct` is created by the [`symmetric_difference`] method on\n+/// [`HashSet`]. See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n }\n \n-/// Set union iterator.\n+/// A lazy iterator producing elements in the union of `HashSet`s.\n+///\n+/// This `struct` is created by the [`union`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`union`]: struct.HashSet.html#method.union\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}, {"sha": "506bf717337bd824704c1233bda7a5fe8bfc8e2d", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -157,29 +157,29 @@\n //! information to do this itself. Therefore, it is up to us programmers to give\n //! it hints.\n //!\n-//! Any `with_capacity()` constructor will instruct the collection to allocate\n+//! Any `with_capacity` constructor will instruct the collection to allocate\n //! enough space for the specified number of elements. Ideally this will be for\n //! exactly that many elements, but some implementation details may prevent\n //! this. [`Vec`] and [`VecDeque`] can be relied on to allocate exactly the\n-//! requested amount, though. Use `with_capacity()` when you know exactly how many\n+//! requested amount, though. Use `with_capacity` when you know exactly how many\n //! elements will be inserted, or at least have a reasonable upper-bound on that\n //! number.\n //!\n-//! When anticipating a large influx of elements, the `reserve()` family of\n+//! When anticipating a large influx of elements, the `reserve` family of\n //! methods can be used to hint to the collection how much room it should make\n-//! for the coming items. As with `with_capacity()`, the precise behavior of\n+//! for the coming items. As with `with_capacity`, the precise behavior of\n //! these methods will be specific to the collection of interest.\n //!\n //! For optimal performance, collections will generally avoid shrinking\n //! themselves. If you believe that a collection will not soon contain any more\n-//! elements, or just really need the memory, the `shrink_to_fit()` method prompts\n+//! elements, or just really need the memory, the `shrink_to_fit` method prompts\n //! the collection to shrink the backing array to the minimum size capable of\n //! holding its elements.\n //!\n //! Finally, if ever you're interested in what the actual capacity of the\n-//! collection is, most collections provide a `capacity()` method to query this\n+//! collection is, most collections provide a `capacity` method to query this\n //! information on demand. This can be useful for debugging purposes, or for\n-//! use with the `reserve()` methods.\n+//! use with the `reserve` methods.\n //!\n //! ## Iterators\n //!\n@@ -194,11 +194,11 @@\n //!\n //! All of the standard collections provide several iterators for performing\n //! bulk manipulation of their contents. The three primary iterators almost\n-//! every collection should provide are `iter()`, `iter_mut()`, and `into_iter()`.\n+//! every collection should provide are `iter`, `iter_mut`, and `into_iter`.\n //! Some of these are not provided on collections where it would be unsound or\n //! unreasonable to provide them.\n //!\n-//! `iter()` provides an iterator of immutable references to all the contents of a\n+//! `iter` provides an iterator of immutable references to all the contents of a\n //! collection in the most \"natural\" order. For sequence collections like [`Vec`],\n //! this means the items will be yielded in increasing order of index starting\n //! at 0. For ordered collections like [`BTreeMap`], this means that the items\n@@ -214,8 +214,8 @@\n //! }\n //! ```\n //!\n-//! `iter_mut()` provides an iterator of *mutable* references in the same order as\n-//! `iter()`. This is great for mutating all the contents of the collection.\n+//! `iter_mut` provides an iterator of *mutable* references in the same order as\n+//! `iter`. This is great for mutating all the contents of the collection.\n //!\n //! ```\n //! let mut vec = vec![1, 2, 3, 4];\n@@ -224,12 +224,12 @@\n //! }\n //! ```\n //!\n-//! `into_iter()` transforms the actual collection into an iterator over its\n+//! `into_iter` transforms the actual collection into an iterator over its\n //! contents by-value. This is great when the collection itself is no longer\n-//! needed, and the values are needed elsewhere. Using `extend()` with `into_iter()`\n+//! needed, and the values are needed elsewhere. Using `extend` with `into_iter`\n //! is the main way that contents of one collection are moved into another.\n-//! `extend()` automatically calls `into_iter()`, and takes any `T: `[`IntoIterator`].\n-//! Calling `collect()` on an iterator itself is also a great way to convert one\n+//! `extend` automatically calls `into_iter`, and takes any `T: `[`IntoIterator`].\n+//! Calling `collect` on an iterator itself is also a great way to convert one\n //! collection into another. Both of these methods should internally use the\n //! capacity management tools discussed in the previous section to do this as\n //! efficiently as possible.\n@@ -248,9 +248,9 @@\n //! ```\n //!\n //! Iterators also provide a series of *adapter* methods for performing common\n-//! threads to sequences. Among the adapters are functional favorites like `map()`,\n-//! `fold()`, `skip()` and `take()`. Of particular interest to collections is the\n-//! `rev()` adapter, that reverses any iterator that supports this operation. Most\n+//! threads to sequences. Among the adapters are functional favorites like `map`,\n+//! `fold`, `skip` and `take`. Of particular interest to collections is the\n+//! `rev` adapter, that reverses any iterator that supports this operation. Most\n //! collections provide reversible iterators as the way to iterate over them in\n //! reverse order.\n //!\n@@ -263,42 +263,42 @@\n //!\n //! Several other collection methods also return iterators to yield a sequence\n //! of results but avoid allocating an entire collection to store the result in.\n-//! This provides maximum flexibility as `collect()` or `extend()` can be called to\n+//! This provides maximum flexibility as `collect` or `extend` can be called to\n //! \"pipe\" the sequence into any collection if desired. Otherwise, the sequence\n //! can be looped over with a `for` loop. The iterator can also be discarded\n //! after partial use, preventing the computation of the unused items.\n //!\n //! ## Entries\n //!\n-//! The `entry()` API is intended to provide an efficient mechanism for\n+//! The `entry` API is intended to provide an efficient mechanism for\n //! manipulating the contents of a map conditionally on the presence of a key or\n //! not. The primary motivating use case for this is to provide efficient\n //! accumulator maps. For instance, if one wishes to maintain a count of the\n //! number of times each key has been seen, they will have to perform some\n //! conditional logic on whether this is the first time the key has been seen or\n-//! not. Normally, this would require a `find()` followed by an `insert()`,\n+//! not. Normally, this would require a `find` followed by an `insert`,\n //! effectively duplicating the search effort on each insertion.\n //!\n //! When a user calls `map.entry(&key)`, the map will search for the key and\n //! then yield a variant of the `Entry` enum.\n //!\n //! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case\n-//! the only valid operation is to `insert()` a value into the entry. When this is\n+//! the only valid operation is to `insert` a value into the entry. When this is\n //! done, the vacant entry is consumed and converted into a mutable reference to\n //! the value that was inserted. This allows for further manipulation of the\n //! value beyond the lifetime of the search itself. This is useful if complex\n //! logic needs to be performed on the value regardless of whether the value was\n //! just inserted.\n //!\n //! If an `Occupied(entry)` is yielded, then the key *was* found. In this case,\n-//! the user has several options: they can `get()`, `insert()` or `remove()` the\n+//! the user has several options: they can `get`, `insert` or `remove` the\n //! value of the occupied entry. Additionally, they can convert the occupied\n //! entry into a mutable reference to its value, providing symmetry to the\n-//! vacant `insert()` case.\n+//! vacant `insert` case.\n //!\n //! ### Examples\n //!\n-//! Here are the two primary ways in which `entry()` is used. First, a simple\n+//! Here are the two primary ways in which `entry` is used. First, a simple\n //! example where the logic performed on the values is trivial.\n //!\n //! #### Counting the number of times each character in a string occurs\n@@ -322,7 +322,7 @@\n //! ```\n //!\n //! When the logic to be performed on the value is more complex, we may simply\n-//! use the `entry()` API to ensure that the value is initialized and perform the\n+//! use the `entry` API to ensure that the value is initialized and perform the\n //! logic afterwards.\n //!\n //! #### Tracking the inebriation of customers at a bar\n@@ -360,7 +360,7 @@\n //!\n //! # Insert and complex keys\n //!\n-//! If we have a more complex key, calls to `insert()` will\n+//! If we have a more complex key, calls to `insert` will\n //! not update the value of the key. For example:\n //!\n //! ```\n@@ -442,16 +442,14 @@ mod hash;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_map {\n-    //! A hash map implementation which uses linear probing with Robin\n-    //! Hood bucket stealing.\n+    //! A hash map implemented with linear probing and Robin Hood bucket stealing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::map::*;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_set {\n-    //! An implementation of a hash set using the underlying representation of a\n-    //! HashMap where the value is ().\n+    //! A hash set implemented as a `HashMap` where the value is `()`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::set::*;\n }"}, {"sha": "137de561c76c980cc77cbac8ad90c8425129695b", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f13a3b540ab6024665322d716e487c800645f24/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13a3b540ab6024665322d716e487c800645f24/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=5f13a3b540ab6024665322d716e487c800645f24", "patch": "@@ -142,7 +142,8 @@ fn check(cache: &mut Cache,\n     if file.ends_with(\"btree_set/struct.BTreeSet.html\") ||\n        file.ends_with(\"collections/struct.BTreeSet.html\") ||\n        file.ends_with(\"collections/btree_map/struct.BTreeMap.html\") ||\n-       file.ends_with(\"collections/hash_map/struct.HashMap.html\") {\n+       file.ends_with(\"collections/hash_map/struct.HashMap.html\") ||\n+       file.ends_with(\"collections/hash_set/struct.HashSet.html\") {\n         return None;\n     }\n "}]}