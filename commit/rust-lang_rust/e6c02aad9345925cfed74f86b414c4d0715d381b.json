{"sha": "e6c02aad9345925cfed74f86b414c4d0715d381b", "node_id": "C_kwDOAAsO6NoAKGU2YzAyYWFkOTM0NTkyNWNmZWQ3NGY4NmI0MTRjNGQwNzE1ZDM4MWI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-27T21:15:25Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-28T16:43:18Z"}, "message": "Improve heuristics whether `format_args` string is a source literal\n\nPreviously, it only checked whether there was _a_ literal at the span of\nthe first argument, not whether the literal actually matched up. This\ncaused issues when a proc macro was generating a different literal with\nthe same span.\n\nThis requires an annoying special case for literals ending in `\\n`\nbecause otherwise `println` wouldn't give detailed diagnostics anymore\nwhich would be bad.", "tree": {"sha": "98fd6b6b4199045d3c413f5cec5318dbb9b8ce22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98fd6b6b4199045d3c413f5cec5318dbb9b8ce22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c02aad9345925cfed74f86b414c4d0715d381b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c02aad9345925cfed74f86b414c4d0715d381b", "html_url": "https://github.com/rust-lang/rust/commit/e6c02aad9345925cfed74f86b414c4d0715d381b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c02aad9345925cfed74f86b414c4d0715d381b/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1322e476bf5eecfad98f0b200f15c1b46a0d46d2", "html_url": "https://github.com/rust-lang/rust/commit/1322e476bf5eecfad98f0b200f15c1b46a0d46d2"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "84243e53fafe0973dc659d1614c58ebdd7963f24", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e6c02aad9345925cfed74f86b414c4d0715d381b/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c02aad9345925cfed74f86b414c4d0715d381b/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=e6c02aad9345925cfed74f86b414c4d0715d381b", "patch": "@@ -20,6 +20,7 @@ pub use Flag::*;\n pub use Piece::*;\n pub use Position::*;\n \n+use rustc_lexer::unescape;\n use std::iter;\n use std::str;\n use std::string;\n@@ -306,7 +307,7 @@ impl<'a> Parser<'a> {\n         append_newline: bool,\n         mode: ParseMode,\n     ) -> Parser<'a> {\n-        let (width_map, is_literal) = find_width_map_from_snippet(snippet, style);\n+        let (width_map, is_literal) = find_width_map_from_snippet(s, snippet, style);\n         Parser {\n             mode,\n             input: s,\n@@ -844,6 +845,7 @@ impl<'a> Parser<'a> {\n /// written code (code snippet) and the `InternedString` that gets processed in the `Parser`\n /// in order to properly synthesise the intra-string `Span`s for error diagnostics.\n fn find_width_map_from_snippet(\n+    input: &str,\n     snippet: Option<string::String>,\n     str_style: Option<usize>,\n ) -> (Vec<InnerWidthMapping>, bool) {\n@@ -856,8 +858,27 @@ fn find_width_map_from_snippet(\n         return (vec![], true);\n     }\n \n+    // Strip quotes.\n     let snippet = &snippet[1..snippet.len() - 1];\n \n+    // Macros like `println` add a newline at the end. That technically doens't make them \"literals\" anymore, but it's fine\n+    // since we will never need to point our spans there, so we lie about it here by ignoring it.\n+    // Since there might actually be newlines in the source code, we need to normalize away all trailing newlines.\n+    // If we only trimmed it off the input, `format!(\"\\n\")` would cause a mismatch as here we they actually match up.\n+    // Alternatively, we could just count the trailing newlines and only trim one from the input if they don't match up.\n+    let input_no_nl = input.trim_end_matches('\\n');\n+    let Ok(unescaped) = unescape_string(snippet) else {\n+        return (vec![], false);\n+    };\n+\n+    let unescaped_no_nl = unescaped.trim_end_matches('\\n');\n+\n+    if unescaped_no_nl != input_no_nl {\n+        // The source string that we're pointing at isn't our input, so spans pointing at it will be incorrect.\n+        // This can for example happen with proc macros that respan generated literals.\n+        return (vec![], false);\n+    }\n+\n     let mut s = snippet.char_indices();\n     let mut width_mappings = vec![];\n     while let Some((pos, c)) = s.next() {\n@@ -936,9 +957,23 @@ fn find_width_map_from_snippet(\n             _ => {}\n         }\n     }\n+\n     (width_mappings, true)\n }\n \n+fn unescape_string(string: &str) -> Result<string::String, unescape::EscapeError> {\n+    let mut buf = string::String::new();\n+    let mut error = Ok(());\n+    unescape::unescape_literal(string, unescape::Mode::Str, &mut |_, unescaped_char| {\n+        match unescaped_char {\n+            Ok(c) => buf.push(c),\n+            Err(err) => error = Err(err),\n+        }\n+    });\n+\n+    error.map(|_| buf)\n+}\n+\n // Assert a reasonable size for `Piece`\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Piece<'_>, 16);"}, {"sha": "539c8fb27b3b0a5b5909b4e791da7d7f3d68bc03", "filename": "src/test/ui/fmt/auxiliary/format-string-proc-macro.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs?ref=e6c02aad9345925cfed74f86b414c4d0715d381b", "patch": "@@ -5,7 +5,8 @@\n \n extern crate proc_macro;\n \n-use proc_macro::{Literal, Span, TokenStream, TokenTree};\n+use proc_macro::{Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n+use std::iter::FromIterator;\n \n #[proc_macro]\n pub fn foo_with_input_span(input: TokenStream) -> TokenStream {\n@@ -26,3 +27,14 @@ pub fn err_with_input_span(input: TokenStream) -> TokenStream {\n \n     TokenStream::from(TokenTree::Literal(lit))\n }\n+\n+#[proc_macro]\n+pub fn respan_to_invalid_format_literal(input: TokenStream) -> TokenStream {\n+    let mut s = Literal::string(\"{\");\n+    s.set_span(input.into_iter().next().unwrap().span());\n+    TokenStream::from_iter([\n+        TokenTree::from(Ident::new(\"format\", Span::call_site())),\n+        TokenTree::from(Punct::new('!', Spacing::Alone)),\n+        TokenTree::from(Group::new(Delimiter::Parenthesis, TokenTree::from(s).into())),\n+    ])\n+}"}, {"sha": "44642a10fc076d3c0dfd2bbee21ad09942ebb5b7", "filename": "src/test/ui/fmt/respanned-literal-issue-106191.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs?ref=e6c02aad9345925cfed74f86b414c4d0715d381b", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:format-string-proc-macro.rs\n+\n+extern crate format_string_proc_macro;\n+\n+fn main() {\n+    format_string_proc_macro::respan_to_invalid_format_literal!(\"\u00a1\");\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n+    format_args!(r#concat!(\"\u00a1        {\"));\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n+}"}, {"sha": "73a3af65a3849dbce8754f03987a89fc49bb0343", "filename": "src/test/ui/fmt/respanned-literal-issue-106191.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6c02aad9345925cfed74f86b414c4d0715d381b/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr?ref=e6c02aad9345925cfed74f86b414c4d0715d381b", "patch": "@@ -0,0 +1,19 @@\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/respanned-literal-issue-106191.rs:6:65\n+   |\n+LL |     format_string_proc_macro::respan_to_invalid_format_literal!(\"\u00a1\");\n+   |                                                                 ^^^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/respanned-literal-issue-106191.rs:8:18\n+   |\n+LL |     format_args!(r#concat!(\"\u00a1        {\"));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}]}