{"sha": "3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "node_id": "C_kwDOAAsO6NoAKDNmNDEzZDJhYmI1Y2Y1ZjcyMDAyYmM3ZGE1NzA5YmY2YzRkYWI0NDQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-06T02:44:41Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-06T02:44:41Z"}, "message": "sess: add `create_{err,warning}`\n\nCurrently, the only API for creating errors from a diagnostic derive\nwill emit it immediately. This makes it difficult to add subdiagnostics\nto diagnostics from the derive, so add `create_{err,warning}` functions\nthat return the diagnostic without emitting it.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "0de8a214f39e1f0bc3a2ec0954ad5cec61423401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de8a214f39e1f0bc3a2ec0954ad5cec61423401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "html_url": "https://github.com/rust-lang/rust/commit/3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f413d2abb5cf5f72002bc7da5709bf6c4dab444/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859079ff127f8886c81152da7bb74b38f84b6797", "url": "https://api.github.com/repos/rust-lang/rust/commits/859079ff127f8886c81152da7bb74b38f84b6797", "html_url": "https://github.com/rust-lang/rust/commit/859079ff127f8886c81152da7bb74b38f84b6797"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "6fb87e15a3303a6ce105be77189b2953f5fe6dc4", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f413d2abb5cf5f72002bc7da5709bf6c4dab444/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f413d2abb5cf5f72002bc7da5709bf6c4dab444/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "patch": "@@ -289,12 +289,26 @@ impl ParseSess {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n \n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        err.into_diagnostic(self)\n+    }\n+\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n-        err.into_diagnostic(self).emit()\n+        self.create_err(err).emit()\n+    }\n+\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        warning: impl SessionDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        warning.into_diagnostic(self)\n     }\n \n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n-        warning.into_diagnostic(self).emit()\n+        self.create_warning(warning).emit()\n     }\n \n     pub fn struct_err("}, {"sha": "b2c23cda6aae545b1bcf2f893eb63dd671d90fa7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f413d2abb5cf5f72002bc7da5709bf6c4dab444/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f413d2abb5cf5f72002bc7da5709bf6c4dab444/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3f413d2abb5cf5f72002bc7da5709bf6c4dab444", "patch": "@@ -413,9 +413,21 @@ impl Session {\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.parse_sess.create_err(err)\n+    }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        self.parse_sess.create_warning(err)\n+    }\n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }"}]}