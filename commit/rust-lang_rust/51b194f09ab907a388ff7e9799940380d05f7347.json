{"sha": "51b194f09ab907a388ff7e9799940380d05f7347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjE5NGYwOWFiOTA3YTM4OGZmN2U5Nzk5OTQwMzgwZDA1ZjczNDc=", "commit": {"author": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-22T15:18:54Z"}, "committer": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-22T15:18:54Z"}, "message": "remove some extra }", "tree": {"sha": "7faf1460bb51f9193202ec8e0206f03b322cf05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7faf1460bb51f9193202ec8e0206f03b322cf05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b194f09ab907a388ff7e9799940380d05f7347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b194f09ab907a388ff7e9799940380d05f7347", "html_url": "https://github.com/rust-lang/rust/commit/51b194f09ab907a388ff7e9799940380d05f7347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b194f09ab907a388ff7e9799940380d05f7347/comments", "author": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02241db72006ba2426fd50663bfa48b3dd88b9ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/02241db72006ba2426fd50663bfa48b3dd88b9ae", "html_url": "https://github.com/rust-lang/rust/commit/02241db72006ba2426fd50663bfa48b3dd88b9ae"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "07d16c6483ec797cbec35e747dda60f9d277c343", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/51b194f09ab907a388ff7e9799940380d05f7347/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b194f09ab907a388ff7e9799940380d05f7347/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=51b194f09ab907a388ff7e9799940380d05f7347", "patch": "@@ -607,39 +607,37 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n }\n \n // Memory reporting\n-    cfg_if! {\n-        if #[cfg(windows)] {\n-            fn get_resident() -> Option<usize> {\n-                use std::mem::{self, MaybeUninit};\n-                use winapi::shared::minwindef::DWORD;\n-                use winapi::um::processthreadsapi::GetCurrentProcess;\n-                use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n-\n-                let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n-                match unsafe {\n-                    GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n-                } {\n-                    0 => None,\n-                    _ => {\n-                        let pmc = unsafe { pmc.assume_init() };\n-                        Some(pmc.WorkingSetSize as usize)\n-                    }\n+cfg_if! {\n+    if #[cfg(windows)] {\n+        fn get_resident() -> Option<usize> {\n+            use std::mem::{self, MaybeUninit};\n+            use winapi::shared::minwindef::DWORD;\n+            use winapi::um::processthreadsapi::GetCurrentProcess;\n+            use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+            let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+            match unsafe {\n+                GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+            } {\n+                0 => None,\n+                _ => {\n+                    let pmc = unsafe { pmc.assume_init() };\n+                    Some(pmc.WorkingSetSize as usize)\n                 }\n             }\n-        } else if #[cfg(unix)] {\n-            fn get_resident() -> Option<usize> {\n-                let field = 1;\n-                let contents = fs::read(\"/proc/self/statm\").ok()?;\n-                let contents = String::from_utf8(contents).ok()?;\n-                let s = contents.split_whitespace().nth(field)?;\n-                let npages = s.parse::<usize>().ok()?;\n-                Some(npages * 4096)\n-            }\n-        } else {\n-            fn get_resident() -> Option<usize> {\n-                None\n-            }\n         }\n+    } else if #[cfg(unix)] {\n+        fn get_resident() -> Option<usize> {\n+            let field = 1;\n+            let contents = fs::read(\"/proc/self/statm\").ok()?;\n+            let contents = String::from_utf8(contents).ok()?;\n+            let s = contents.split_whitespace().nth(field)?;\n+            let npages = s.parse::<usize>().ok()?;\n+            Some(npages * 4096)\n+        }\n+    } else {\n+        fn get_resident() -> Option<usize> {\n+            None\n         }\n     }\n }"}]}