{"sha": "050d0e6b29d19978584f6e389f53612497b7e41e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGQwZTZiMjlkMTk5Nzg1ODRmNmUzODlmNTM2MTI0OTdiN2U0MWU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T20:27:54Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-28T23:12:04Z"}, "message": "Add a depth counter to llvm::type_to_str to work around infinite llvm types.", "tree": {"sha": "4209258d6f1d88fbb82fd361ae1ca9c8b5cfdefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4209258d6f1d88fbb82fd361ae1ca9c8b5cfdefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050d0e6b29d19978584f6e389f53612497b7e41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050d0e6b29d19978584f6e389f53612497b7e41e", "html_url": "https://github.com/rust-lang/rust/commit/050d0e6b29d19978584f6e389f53612497b7e41e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050d0e6b29d19978584f6e389f53612497b7e41e/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47afb33981c7f20d33e04b938c4362f4da12529a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47afb33981c7f20d33e04b938c4362f4da12529a", "html_url": "https://github.com/rust-lang/rust/commit/47afb33981c7f20d33e04b938c4362f4da12529a"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "41349d9c085c42f63e1e9ef4b9ccd56af9dedeef", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/050d0e6b29d19978584f6e389f53612497b7e41e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050d0e6b29d19978584f6e389f53612497b7e41e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=050d0e6b29d19978584f6e389f53612497b7e41e", "patch": "@@ -2149,12 +2149,17 @@ impl TypeNames {\n         self.named_types.find_equiv(&s).map_consume(|x| Type::from_ref(*x))\n     }\n \n-    pub fn type_to_str(&self, ty: Type) -> ~str {\n+    // We have a depth count, because we seem to make infinite types.\n+    pub fn type_to_str_depth(&self, ty: Type, depth: int) -> ~str {\n         match self.find_name(&ty) {\n             option::Some(name) => return name.to_owned(),\n             None => ()\n         }\n \n+        if depth == 0 {\n+            return ~\"###\";\n+        }\n+\n         unsafe {\n             let kind = ty.kind();\n \n@@ -2176,31 +2181,36 @@ impl TypeNames {\n                 Function => {\n                     let out_ty = ty.return_type();\n                     let args = ty.func_params();\n-                    let args = args.map(|&ty| self.type_to_str(ty)).connect(\", \");\n-                    let out_ty = self.type_to_str(out_ty);\n+                    let args =\n+                        args.map(|&ty| self.type_to_str_depth(ty, depth-1)).connect(\", \");\n+                    let out_ty = self.type_to_str_depth(out_ty, depth-1);\n                     fmt!(\"fn(%s) -> %s\", args, out_ty)\n                 }\n                 Struct => {\n                     let tys = ty.field_types();\n-                    let tys = tys.map(|&ty| self.type_to_str(ty)).connect(\", \");\n+                    let tys = tys.map(|&ty| self.type_to_str_depth(ty, depth-1)).connect(\", \");\n                     fmt!(\"{%s}\", tys)\n                 }\n                 Array => {\n                     let el_ty = ty.element_type();\n-                    let el_ty = self.type_to_str(el_ty);\n+                    let el_ty = self.type_to_str_depth(el_ty, depth-1);\n                     let len = ty.array_length();\n                     fmt!(\"[%s x %u]\", el_ty, len)\n                 }\n                 Pointer => {\n                     let el_ty = ty.element_type();\n-                    let el_ty = self.type_to_str(el_ty);\n+                    let el_ty = self.type_to_str_depth(el_ty, depth-1);\n                     fmt!(\"*%s\", el_ty)\n                 }\n                 _ => fail!(\"Unknown Type Kind (%u)\", kind as uint)\n             }\n         }\n     }\n \n+    pub fn type_to_str(&self, ty: Type) -> ~str {\n+        self.type_to_str_depth(ty, 30)\n+    }\n+\n     pub fn val_to_str(&self, val: ValueRef) -> ~str {\n         unsafe {\n             let ty = Type::from_ref(llvm::LLVMTypeOf(val));"}]}