{"sha": "f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YjBhNjhmYmZiYWE1NDJiZWNjMjY5YjY0ZTk5ZWZiNWM5YWJhZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-12T14:00:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-12T14:00:10Z"}, "message": "Fix some warnings", "tree": {"sha": "3b2a9d029ae8b779d9d4968d594e77ecb4e41ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2a9d029ae8b779d9d4968d594e77ecb4e41ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "html_url": "https://github.com/rust-lang/rust/commit/f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314141392a6f97471ec6fc46a7a10053dacf59e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/314141392a6f97471ec6fc46a7a10053dacf59e9", "html_url": "https://github.com/rust-lang/rust/commit/314141392a6f97471ec6fc46a7a10053dacf59e9"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "10934cebcf1abc8830ba3d1b5c559b88f0e97fa2", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "patch": "@@ -9,7 +9,6 @@\n extern crate mini_core;\n \n use mini_core::*;\n-use mini_core::libc::*;\n \n macro_rules! assert_eq {\n     ($l:expr, $r: expr) => {"}, {"sha": "fc31daf596f02b4c2bd11a15e482d81048be96c6", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "patch": "@@ -430,6 +430,7 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n+#[allow(unions_with_drop_fields)]\n pub union MaybeUninit<T> {\n     pub uninit: (),\n     pub value: T,"}, {"sha": "47d046d0e1b56885f6c19d3c084a6247c81b420a", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "patch": "@@ -149,7 +149,7 @@ fn main() {\n \n         let world: Box<&str> = box \"World!\\0\";\n         puts(*world as *const str as *const u8);\n-        world as Box<SomeTrait>;\n+        world as Box<dyn SomeTrait>;\n \n         assert_eq!(intrinsics::bitreverse(0b10101000u8), 0b00010101u8);\n \n@@ -212,7 +212,7 @@ fn main() {\n     let _ = box NoisyDrop {\n         text: \"Boxed outer got dropped!\\0\",\n         inner: NoisyDropInner,\n-    } as Box<SomeTrait>;\n+    } as Box<dyn SomeTrait>;\n \n     const FUNC_REF: Option<fn()> = Some(main);\n     match FUNC_REF {\n@@ -249,5 +249,5 @@ fn main() {\n \n     unsafe { assert_eq!(ABC as usize, 0); }\n \n-    &mut (|| Some(0 as *const ())) as &mut FnMut() -> Option<*const ()>;\n+    &mut (|| Some(0 as *const ())) as &mut dyn FnMut() -> Option<*const ()>;\n }"}, {"sha": "7d1d8facdbe9ead8e1940848f4fbeba7a8e4055c", "filename": "example/std_example.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b0a68fbfbaa542becc269b64e99efb5c9abaec/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=f5b0a68fbfbaa542becc269b64e99efb5c9abaec", "patch": "@@ -2,12 +2,10 @@\n \n use std::arch::x86_64::*;\n use std::io::Write;\n-use std::intrinsics;\n-\n \n fn main() {\n     let mutex = std::sync::Mutex::new(());\n-    mutex.lock().unwrap();\n+    let _guard = mutex.lock().unwrap();\n \n     let _ = ::std::iter::repeat('a' as u8).take(10).collect::<Vec<_>>();\n     let stderr = ::std::io::stderr();\n@@ -19,10 +17,10 @@ fn main() {\n \n     println!(\"cargo:rustc-link-lib=z\");\n \n-    static ONCE: std::sync::Once = std::sync::ONCE_INIT;\n+    static ONCE: std::sync::Once = std::sync::Once::new();\n     ONCE.call_once(|| {});\n \n-    LoopState::Continue(()) == LoopState::Break(());\n+    let _eq = LoopState::Continue(()) == LoopState::Break(());\n \n     // Make sure ByValPair values with differently sized components are correctly passed\n     map(None::<(u8, Box<Instruction>)>);\n@@ -41,8 +39,8 @@ fn main() {\n     assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n     assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n \n-    0i128.checked_div(2i128);\n-    0u128.checked_div(2u128);\n+    let _d = 0i128.checked_div(2i128);\n+    let _d = 0u128.checked_div(2u128);\n     assert_eq!(1u128 + 2, 3);\n \n     assert_eq!(0b100010000000000000000000000000000u128 >> 10, 0b10001000000000000000000u128);\n@@ -165,7 +163,7 @@ unsafe fn test_mm_add_pd() {\n \n fn assert_eq_m128i(x: std::arch::x86_64::__m128i, y: std::arch::x86_64::__m128i) {\n     unsafe {\n-        assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(x));\n+        assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(y));\n     }\n }\n "}]}