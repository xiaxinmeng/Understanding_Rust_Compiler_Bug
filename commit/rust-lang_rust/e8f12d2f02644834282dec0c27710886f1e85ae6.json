{"sha": "e8f12d2f02644834282dec0c27710886f1e85ae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjEyZDJmMDI2NDQ4MzQyODJkZWMwYzI3NzEwODg2ZjFlODVhZTY=", "commit": {"author": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-22T21:53:50Z"}, "committer": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-10-22T21:56:49Z"}, "message": "Address review comments", "tree": {"sha": "4670cf2c0ba279ef657bbc607eafe94c461a4187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4670cf2c0ba279ef657bbc607eafe94c461a4187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f12d2f02644834282dec0c27710886f1e85ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f12d2f02644834282dec0c27710886f1e85ae6", "html_url": "https://github.com/rust-lang/rust/commit/e8f12d2f02644834282dec0c27710886f1e85ae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f12d2f02644834282dec0c27710886f1e85ae6/comments", "author": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee", "html_url": "https://github.com/rust-lang/rust/commit/bb0ce32423aefcb8b9eb587881973f56a6a6b0ee"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "f4bb648d15a48d30e7077bf66243ce5b986b7dab", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e8f12d2f02644834282dec0c27710886f1e85ae6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f12d2f02644834282dec0c27710886f1e85ae6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e8f12d2f02644834282dec0c27710886f1e85ae6", "patch": "@@ -3,7 +3,6 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n-use std::fmt::Display;\n \n use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n@@ -12,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n+    ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n     TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -1225,7 +1224,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts to the same type.\n+    /// **What it does:** Checks for casts to the same type, casts of int literals to integer types\n+    /// and casts of float literals to float types.\n     ///\n     /// **Why is this bad?** It's just unnecessary.\n     ///\n@@ -1234,6 +1234,7 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let _ = 2i32 as i32;\n+    /// let _ = 0.5 as f32;\n     /// ```\n     pub UNNECESSARY_CAST,\n     complexity,\n@@ -1599,7 +1600,9 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if let ExprKind::Cast(ref ex, _) = expr.kind {\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n-            if let ExprKind::Lit(ref lit) = ex.kind {\n+            if let Some(lit) = get_numeric_literal(ex) {\n+                let literal_str = snippet_opt(cx, lit.span).unwrap_or_default();\n+\n                 if_chain! {\n                     if let LitKind::Int(n, _) = lit.node;\n                     if let Some(src) = snippet_opt(cx, lit.span);\n@@ -1609,25 +1612,19 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     let to_nbits = fp_ty_mantissa_nbits(cast_to);\n                     if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits && num_lit.is_decimal();\n                     then {\n-                        show_unnecessary_cast(cx, expr, n , cast_from, cast_to);\n+                        show_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n                         return;\n                     }\n                 }\n \n                 match lit.node {\n-                    LitKind::Int(num, LitIntType::Unsuffixed) if cast_to.is_integral() => {\n-                        show_unnecessary_cast(cx, expr, num, cast_from, cast_to);\n-                        return;\n+                    LitKind::Int(_, LitIntType::Unsuffixed) if cast_to.is_integral() => {\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n                     },\n-                    LitKind::Float(num, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n-                        show_unnecessary_cast(cx, expr, num, cast_from, cast_to);\n-                        return;\n+                    LitKind::Float(_, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n                     },\n-                    _ => (),\n-                };\n-\n-                match lit.node {\n-                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n+                    LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => (),\n                     _ => {\n                         if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n                             span_lint(\n@@ -1652,21 +1649,29 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n     }\n }\n \n-fn show_unnecessary_cast<Num: Display>(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    num: Num,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n-) {\n+fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n+    match expr.kind {\n+        ExprKind::Lit(ref lit) => Some(lit),\n+        ExprKind::Unary(UnOp::UnNeg, e) => {\n+            if let ExprKind::Lit(ref lit) = e.kind {\n+                Some(lit)\n+            } else {\n+                None\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &str, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n     span_lint_and_sugg(\n         cx,\n         UNNECESSARY_CAST,\n         expr.span,\n         &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n         \"try\",\n-        format!(\"{}_{}\", num, cast_to),\n+        format!(\"{}_{}\", literal_str, cast_to),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "54853f4b8a2631d97c9e7b348b01161229a228d3", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=e8f12d2f02644834282dec0c27710886f1e85ae6", "patch": "@@ -20,8 +20,10 @@ fn main() {\n     0b11 as f64;\n \n     1_u32;\n-    16_i32;\n-    2_usize;\n+    0x10_i32;\n+    0b10_usize;\n+    0o73_u16;\n+    1_000_000_000_u32;\n \n     1.0_f64;\n     0.5_f32;"}, {"sha": "8da3d9477024b4c338c974be324ceae4eb4d97fa", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=e8f12d2f02644834282dec0c27710886f1e85ae6", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     1 as u32;\n     0x10 as i32;\n     0b10 as usize;\n+    0o73 as u16;\n+    1_000_000_000 as u32;\n \n     1.0 as f64;\n     0.5 as f32;"}, {"sha": "28fb9540afc06a6fefa9f34bf376e0e35811df8e", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8f12d2f02644834282dec0c27710886f1e85ae6/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=e8f12d2f02644834282dec0c27710886f1e85ae6", "patch": "@@ -28,25 +28,37 @@ error: casting integer literal to `i32` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:23:5\n    |\n LL |     0x10 as i32;\n-   |     ^^^^^^^^^^^ help: try: `16_i32`\n+   |     ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:24:5\n    |\n LL |     0b10 as usize;\n-   |     ^^^^^^^^^^^^^ help: try: `2_usize`\n+   |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n-error: casting float literal to `f64` is unnecessary\n+error: casting integer literal to `u16` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:25:5\n+   |\n+LL |     0o73 as u16;\n+   |     ^^^^^^^^^^^ help: try: `0o73_u16`\n+\n+error: casting integer literal to `u32` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:26:5\n    |\n+LL |     1_000_000_000 as u32;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+   |\n LL |     1.0 as f64;\n    |     ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+  --> $DIR/unnecessary_cast_fixable.rs:29:5\n    |\n LL |     0.5 as f32;\n    |     ^^^^^^^^^^ help: try: `0.5_f32`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}]}