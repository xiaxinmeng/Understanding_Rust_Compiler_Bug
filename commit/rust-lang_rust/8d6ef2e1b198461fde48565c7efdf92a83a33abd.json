{"sha": "8d6ef2e1b198461fde48565c7efdf92a83a33abd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNmVmMmUxYjE5ODQ2MWZkZTQ4NTY1YzdlZmRmOTJhODNhMzNhYmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-16T00:42:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "libsyntax: De-`@str` pathnames", "tree": {"sha": "de7e49dcfc507f2da3c9ec0da802e78c48e958aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7e49dcfc507f2da3c9ec0da802e78c48e958aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6ef2e1b198461fde48565c7efdf92a83a33abd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ef2e1b198461fde48565c7efdf92a83a33abd", "html_url": "https://github.com/rust-lang/rust/commit/8d6ef2e1b198461fde48565c7efdf92a83a33abd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ef2e1b198461fde48565c7efdf92a83a33abd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "html_url": "https://github.com/rust-lang/rust/commit/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd"}], "stats": {"total": 91, "additions": 43, "deletions": 48}, "files": [{"sha": "b808efb3d5b24442b1c4078fba24c3a944c427fb", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -61,12 +61,14 @@ pub enum PpMode {\n  * The name used for source code that doesn't originate in a file\n  * (e.g. source from stdin or a string)\n  */\n-pub fn anon_src() -> @str { @\"<anon>\" }\n+pub fn anon_src() -> ~str {\n+    \"<anon>\".to_str()\n+}\n \n-pub fn source_name(input: &Input) -> @str {\n+pub fn source_name(input: &Input) -> ~str {\n     match *input {\n       // FIXME (#9639): This needs to handle non-utf8 paths\n-      FileInput(ref ifile) => ifile.as_str().unwrap().to_managed(),\n+      FileInput(ref ifile) => ifile.as_str().unwrap().to_str(),\n       StrInput(_) => anon_src()\n     }\n }\n@@ -138,7 +140,7 @@ fn parse_cfgspecs(cfgspecs: ~[~str], demitter: @diagnostic::Emitter)\n                   -> ast::CrateConfig {\n     cfgspecs.move_iter().map(|s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n-        parse::parse_meta_from_source_str(@\"cfgspec\", s, ~[], sess)\n+        parse::parse_meta_from_source_str(\"cfgspec\".to_str(), s, ~[], sess)\n     }).collect::<ast::CrateConfig>()\n }\n \n@@ -484,13 +486,13 @@ fn write_out_deps(sess: Session, input: &Input, outputs: &OutputFilenames, crate\n \n     // Build a list of files used to compile the output and\n     // write Makefile-compatible dependency rules\n-    let files: ~[@str] = {\n+    let files: ~[~str] = {\n         let files = sess.codemap.files.borrow();\n         files.get()\n              .iter()\n              .filter_map(|fmap| {\n                  if fmap.is_real_file() {\n-                     Some(fmap.name)\n+                     Some(fmap.name.clone())\n                  } else {\n                      None\n                  }"}, {"sha": "030f38b17459a434002bde9750f4bac874cb97e0", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -931,7 +931,7 @@ fn declare_local(bcx: &Block,\n                  span: Span) {\n     let cx: &CrateContext = bcx.ccx();\n \n-    let filename = span_start(cx, span).file.name;\n+    let filename = span_start(cx, span).file.name.clone();\n     let file_metadata = file_metadata(cx, filename);\n \n     let name: &str = token::ident_to_str(&variable_ident);\n@@ -1165,7 +1165,7 @@ fn prepare_struct_metadata(cx: &CrateContext,\n \n     let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx, def_id, span);\n \n-    let file_name = span_start(cx, definition_span).file.name;\n+    let file_name = span_start(cx, definition_span).file.name.clone();\n     let file_metadata = file_metadata(cx, file_name);\n \n     let struct_metadata_stub = create_struct_stub(cx,\n@@ -2006,7 +2006,7 @@ fn trait_metadata(cx: &CrateContext,\n     let (containing_scope, definition_span) =\n         get_namespace_and_span_for_item(cx, def_id, usage_site_span);\n \n-    let file_name = span_start(cx, definition_span).file.name;\n+    let file_name = span_start(cx, definition_span).file.name.clone();\n     let file_metadata = file_metadata(cx, file_name);\n \n     let trait_llvm_type = type_of::type_of(cx, trait_type);"}, {"sha": "3002bc3d40ed18c15e5c21deaa8fdb9d6e5d1b92", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -183,7 +183,7 @@ pub struct ExpnInfo {\n     callee: NameAndSpan\n }\n \n-pub type FileName = @str;\n+pub type FileName = ~str;\n \n pub struct FileLines\n {\n@@ -301,7 +301,7 @@ impl CodeMap {\n     pub fn lookup_char_pos_adj(&self, pos: BytePos) -> LocWithOpt {\n         let loc = self.lookup_char_pos(pos);\n         LocWithOpt {\n-            filename: loc.file.name,\n+            filename: loc.file.name.to_str(),\n             line: loc.line,\n             col: loc.col,\n             file: Some(loc.file)\n@@ -324,7 +324,7 @@ impl CodeMap {\n \n     pub fn span_to_filename(&self, sp: Span) -> FileName {\n         let lo = self.lookup_char_pos(sp.lo);\n-        lo.file.name\n+        lo.file.name.to_str()\n     }\n \n     pub fn span_to_lines(&self, sp: Span) -> @FileLines {"}, {"sha": "bd1ac616f52d26fd7b42558518ea6b06e4313217", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -250,7 +250,7 @@ pub mod rt {\n \n         fn parse_item(&self, s: ~str) -> @ast::Item {\n             let res = parse::parse_item_from_source_str(\n-                @\"<quote expansion>\",\n+                \"<quote expansion>\".to_str(),\n                 s,\n                 self.cfg(),\n                 self.parse_sess());\n@@ -264,28 +264,25 @@ pub mod rt {\n         }\n \n         fn parse_stmt(&self, s: ~str) -> @ast::Stmt {\n-            parse::parse_stmt_from_source_str(\n-                @\"<quote expansion>\",\n-                s,\n-                self.cfg(),\n-                ~[],\n-                self.parse_sess())\n+            parse::parse_stmt_from_source_str(\"<quote expansion>\".to_str(),\n+                                              s,\n+                                              self.cfg(),\n+                                              ~[],\n+                                              self.parse_sess())\n         }\n \n         fn parse_expr(&self, s: ~str) -> @ast::Expr {\n-            parse::parse_expr_from_source_str(\n-                @\"<quote expansion>\",\n-                s,\n-                self.cfg(),\n-                self.parse_sess())\n+            parse::parse_expr_from_source_str(\"<quote expansion>\".to_str(),\n+                                              s,\n+                                              self.cfg(),\n+                                              self.parse_sess())\n         }\n \n         fn parse_tts(&self, s: ~str) -> ~[ast::TokenTree] {\n-            parse::parse_tts_from_source_str(\n-                @\"<quote expansion>\",\n-                s,\n-                self.cfg(),\n-                self.parse_sess())\n+            parse::parse_tts_from_source_str(\"<quote expansion>\".to_str(),\n+                                             s,\n+                                             self.cfg(),\n+                                             self.parse_sess())\n         }\n     }\n "}, {"sha": "a248cd84f71d1361243d640d3ff14d083a970074", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -114,7 +114,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         Some(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            let filename = file.display().to_str().to_managed();\n+            let filename = file.display().to_str();\n             let interned = token::intern_and_get_ident(src);\n             cx.parse_sess.cm.new_filemap(filename, src);\n "}, {"sha": "7165e7b404f1c8f0db8fbc34b5f5fa57d6779250", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -347,7 +347,7 @@ pub struct Literal {\n // probably not a good thing.\n pub fn gather_comments_and_literals(span_diagnostic:\n                                         @diagnostic::SpanHandler,\n-                                    path: @str,\n+                                    path: ~str,\n                                     srdr: &mut io::Reader)\n                                  -> (~[Comment], ~[Literal]) {\n     let src = str::from_utf8_owned(srdr.read_to_end()).unwrap();"}, {"sha": "76ccc53b846cb218830d4a7f61007c8ddb48c60c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -89,7 +89,7 @@ pub fn parse_crate_attrs_from_file(\n     return inner;\n }\n \n-pub fn parse_crate_from_source_str(name: @str,\n+pub fn parse_crate_from_source_str(name: ~str,\n                                    source: ~str,\n                                    cfg: ast::CrateConfig,\n                                    sess: @ParseSess)\n@@ -101,7 +101,7 @@ pub fn parse_crate_from_source_str(name: @str,\n     maybe_aborted(p.parse_crate_mod(),p)\n }\n \n-pub fn parse_crate_attrs_from_source_str(name: @str,\n+pub fn parse_crate_attrs_from_source_str(name: ~str,\n                                          source: ~str,\n                                          cfg: ast::CrateConfig,\n                                          sess: @ParseSess)\n@@ -114,7 +114,7 @@ pub fn parse_crate_attrs_from_source_str(name: @str,\n     return inner;\n }\n \n-pub fn parse_expr_from_source_str(name: @str,\n+pub fn parse_expr_from_source_str(name: ~str,\n                                   source: ~str,\n                                   cfg: ast::CrateConfig,\n                                   sess: @ParseSess)\n@@ -123,7 +123,7 @@ pub fn parse_expr_from_source_str(name: @str,\n     maybe_aborted(p.parse_expr(), p)\n }\n \n-pub fn parse_item_from_source_str(name: @str,\n+pub fn parse_item_from_source_str(name: ~str,\n                                   source: ~str,\n                                   cfg: ast::CrateConfig,\n                                   sess: @ParseSess)\n@@ -133,7 +133,7 @@ pub fn parse_item_from_source_str(name: @str,\n     maybe_aborted(p.parse_item(attrs),p)\n }\n \n-pub fn parse_meta_from_source_str(name: @str,\n+pub fn parse_meta_from_source_str(name: ~str,\n                                   source: ~str,\n                                   cfg: ast::CrateConfig,\n                                   sess: @ParseSess)\n@@ -142,7 +142,7 @@ pub fn parse_meta_from_source_str(name: @str,\n     maybe_aborted(p.parse_meta_item(),p)\n }\n \n-pub fn parse_stmt_from_source_str(name: @str,\n+pub fn parse_stmt_from_source_str(name: ~str,\n                                   source: ~str,\n                                   cfg: ast::CrateConfig,\n                                   attrs: ~[ast::Attribute],\n@@ -157,7 +157,7 @@ pub fn parse_stmt_from_source_str(name: @str,\n     maybe_aborted(p.parse_stmt(attrs),p)\n }\n \n-pub fn parse_tts_from_source_str(name: @str,\n+pub fn parse_tts_from_source_str(name: ~str,\n                                  source: ~str,\n                                  cfg: ast::CrateConfig,\n                                  sess: @ParseSess)\n@@ -176,7 +176,7 @@ pub fn parse_tts_from_source_str(name: @str,\n // Create a new parser from a source string\n pub fn new_parser_from_source_str(sess: @ParseSess,\n                                   cfg: ast::CrateConfig,\n-                                  name: @str,\n+                                  name: ~str,\n                                   source: ~str)\n                                   -> Parser {\n     filemap_to_parser(sess,string_to_filemap(sess,source,name),cfg)\n@@ -241,21 +241,17 @@ pub fn file_to_filemap(sess: @ParseSess, path: &Path, spanopt: Option<Span>)\n     };\n     match str::from_utf8_owned(bytes) {\n         Some(s) => {\n-            return string_to_filemap(sess,\n-                                     s,\n-                                     path.as_str().unwrap().to_managed());\n-        }\n-        None => {\n-            err(format!(\"{} is not UTF-8 encoded\", path.display()))\n+            return string_to_filemap(sess, s, path.as_str().unwrap().to_str())\n         }\n+        None => err(format!(\"{} is not UTF-8 encoded\", path.display())),\n     }\n     unreachable!()\n }\n \n // given a session and a string, add the string to\n // the session's codemap and return the new filemap\n-pub fn string_to_filemap(sess: @ParseSess, source: ~str, path: @str)\n-    -> @FileMap {\n+pub fn string_to_filemap(sess: @ParseSess, source: ~str, path: ~str)\n+                         -> @FileMap {\n     sess.cm.new_filemap(path, source)\n }\n "}, {"sha": "8bf439818a27ed443789eb384afe3ab54ac55454", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ef2e1b198461fde48565c7efdf92a83a33abd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8d6ef2e1b198461fde48565c7efdf92a83a33abd", "patch": "@@ -117,7 +117,7 @@ pub fn print_crate(cm: @CodeMap,\n                    intr: @IdentInterner,\n                    span_diagnostic: @diagnostic::SpanHandler,\n                    crate: &ast::Crate,\n-                   filename: @str,\n+                   filename: ~str,\n                    input: &mut io::Reader,\n                    out: ~io::Writer,\n                    ann: @PpAnn,"}]}