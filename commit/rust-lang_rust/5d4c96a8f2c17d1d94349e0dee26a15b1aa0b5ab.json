{"sha": "5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNGM5NmE4ZjJjMTdkMWQ5NDM0OWUwZGVlMjZhMTViMWFhMGI1YWI=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-01T23:21:52Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T17:24:03Z"}, "message": "Rename lint::Lint to lint::LintId", "tree": {"sha": "8280eff12e377668a01275a3440113f50c427db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8280eff12e377668a01275a3440113f50c427db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "html_url": "https://github.com/rust-lang/rust/commit/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3144614f0ba39ba9f2a8c14f09c23c488be244eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3144614f0ba39ba9f2a8c14f09c23c488be244eb", "html_url": "https://github.com/rust-lang/rust/commit/3144614f0ba39ba9f2a8c14f09c23c488be244eb"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "f56e512871204afce8e5ccef3ec33fe4cad43996", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "patch": "@@ -70,7 +70,7 @@ pub struct Options {\n     pub gc: bool,\n     pub optimize: OptLevel,\n     pub debuginfo: DebugInfoLevel,\n-    pub lint_opts: Vec<(lint::Lint, lint::Level)> ,\n+    pub lint_opts: Vec<(lint::LintId, lint::Level)> ,\n     pub output_types: Vec<back::link::OutputType> ,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use"}, {"sha": "e84c356b2d8d90a8e852964101482aaab2526427", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "patch": "@@ -43,7 +43,7 @@ pub struct Session {\n     // expected to be absolute. `None` means that there is no source file.\n     pub local_crate_source_file: Option<Path>,\n     pub working_dir: Path,\n-    pub lints: RefCell<NodeMap<Vec<(lint::Lint, codemap::Span, String)>>>,\n+    pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n     pub node_id: Cell<ast::NodeId>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub features: front::feature_gate::Features,\n@@ -106,7 +106,7 @@ impl Session {\n         self.diagnostic().handler().unimpl(msg)\n     }\n     pub fn add_lint(&self,\n-                    lint: lint::Lint,\n+                    lint: lint::LintId,\n                     id: ast::NodeId,\n                     sp: Span,\n                     msg: String) {"}, {"sha": "bd3b1bc7d00bb8874938e855dd579f17baf97d90", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "patch": "@@ -59,7 +59,7 @@ use syntax::{ast, ast_util, visit};\n mod builtin;\n \n #[deriving(Clone, Show, PartialEq, PartialOrd, Eq, Ord, Hash)]\n-pub enum Lint {\n+pub enum LintId {\n     CTypes,\n     UnusedImports,\n     UnnecessaryQualification,\n@@ -126,7 +126,7 @@ pub enum Level {\n #[deriving(Clone, PartialEq, PartialOrd, Eq, Ord)]\n pub struct LintSpec {\n     pub default: Level,\n-    pub lint: Lint,\n+    pub lint: LintId,\n     pub desc: &'static str,\n }\n \n@@ -449,7 +449,7 @@ struct Context<'a> {\n     /// When recursing into an attributed node of the ast which modifies lint\n     /// levels, this stack keeps track of the previous lint levels of whatever\n     /// was modified.\n-    lint_stack: Vec<(Lint, Level, LintSource)>,\n+    lint_stack: Vec<(LintId, Level, LintSource)>,\n \n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -459,7 +459,7 @@ struct Context<'a> {\n \n     /// Level of lints for certain NodeIds, stored here because the body of\n     /// the lint needs to run in trans.\n-    node_levels: HashMap<(ast::NodeId, Lint), (Level, LintSource)>,\n+    node_levels: HashMap<(ast::NodeId, LintId), (Level, LintSource)>,\n }\n \n pub fn emit_lint(level: Level, src: LintSource, msg: &str, span: Span,\n@@ -496,7 +496,7 @@ pub fn emit_lint(level: Level, src: LintSource, msg: &str, span: Span,\n     }\n }\n \n-pub fn lint_to_str(lint: Lint) -> &'static str {\n+pub fn lint_to_str(lint: LintId) -> &'static str {\n     for &(name, lspec) in lint_table.iter() {\n         if lspec.lint == lint {\n             return name;\n@@ -507,29 +507,29 @@ pub fn lint_to_str(lint: Lint) -> &'static str {\n }\n \n impl<'a> Context<'a> {\n-    fn get_level(&self, lint: Lint) -> Level {\n+    fn get_level(&self, lint: LintId) -> Level {\n         match self.cur.find(&(lint as uint)) {\n           Some(&(lvl, _)) => lvl,\n           None => Allow\n         }\n     }\n \n-    fn get_source(&self, lint: Lint) -> LintSource {\n+    fn get_source(&self, lint: LintId) -> LintSource {\n         match self.cur.find(&(lint as uint)) {\n           Some(&(_, src)) => src,\n           None => Default\n         }\n     }\n \n-    fn set_level(&mut self, lint: Lint, level: Level, src: LintSource) {\n+    fn set_level(&mut self, lint: LintId, level: Level, src: LintSource) {\n         if level == Allow {\n             self.cur.remove(&(lint as uint));\n         } else {\n             self.cur.insert(lint as uint, (level, src));\n         }\n     }\n \n-    fn lint_to_str(&self, lint: Lint) -> &'static str {\n+    fn lint_to_str(&self, lint: LintId) -> &'static str {\n         for (k, v) in self.dict.iter() {\n             if v.lint == lint {\n                 return *k;\n@@ -538,7 +538,7 @@ impl<'a> Context<'a> {\n         fail!(\"unregistered lint {}\", lint);\n     }\n \n-    fn span_lint(&self, lint: Lint, span: Span, msg: &str) {\n+    fn span_lint(&self, lint: LintId, span: Span, msg: &str) {\n         let (level, src) = match self.cur.find(&(lint as uint)) {\n             None => { return }\n             Some(&(Warn, src)) => (self.get_level(Warnings), src),"}, {"sha": "97a884ae11dea0c9d2797b355f6e5bf3fa11efc8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5d4c96a8f2c17d1d94349e0dee26a15b1aa0b5ab", "patch": "@@ -367,7 +367,7 @@ pub struct ctxt {\n \n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n \n-    pub node_lint_levels: RefCell<HashMap<(ast::NodeId, lint::Lint),\n+    pub node_lint_levels: RefCell<HashMap<(ast::NodeId, lint::LintId),\n                                           (lint::Level, lint::LintSource)>>,\n \n     /// The types that must be asserted to be the same size for `transmute`"}]}