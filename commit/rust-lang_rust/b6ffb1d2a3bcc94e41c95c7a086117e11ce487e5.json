{"sha": "b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZmZiMWQyYTNiY2M5NGU0MWM5NWM3YTA4NjExN2UxMWNlNDg3ZTU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T16:55:53Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T16:55:53Z"}, "message": "Merge #1239\n\n1239: Fix `$true` and `$false` as $var name error r=matklad a=edwin0cheng\n\nThis PR fixed a bug which cannot use `$true` and `$false` as `$var` name in mbe. \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "71841463e340082843d15adefbcd52c29dea73dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71841463e340082843d15adefbcd52c29dea73dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5", "html_url": "https://github.com/rust-lang/rust/commit/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e1ea2500fcc5e136fbe6a14c488f558e28519c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ea2500fcc5e136fbe6a14c488f558e28519c45", "html_url": "https://github.com/rust-lang/rust/commit/e1ea2500fcc5e136fbe6a14c488f558e28519c45"}, {"sha": "1a3800df60ca789f858dcf40edff4aee01b53188", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3800df60ca789f858dcf40edff4aee01b53188", "html_url": "https://github.com/rust-lang/rust/commit/1a3800df60ca789f858dcf40edff4aee01b53188"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "797c70bc74614c1c4f89df3996c289b6fcebb0de", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=b6ffb1d2a3bcc94e41c95c7a086117e11ce487e5", "patch": "@@ -28,14 +28,25 @@ fn parse_rule(p: &mut TtCursor) -> Result<crate::Rule, ParseError> {\n     Ok(crate::Rule { lhs, rhs })\n }\n \n+fn is_boolean_literal(lit: Option<&tt::TokenTree>) -> bool {\n+    if let Some(tt::TokenTree::Leaf(tt::Leaf::Literal(lit))) = lit {\n+        if lit.text == \"true\" || lit.text == \"false\" {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n fn parse_subtree(tt: &tt::Subtree, transcriber: bool) -> Result<crate::Subtree, ParseError> {\n     let mut token_trees = Vec::new();\n     let mut p = TtCursor::new(tt);\n     while let Some(tt) = p.eat() {\n         let child: crate::TokenTree = match tt {\n             tt::TokenTree::Leaf(leaf) => match leaf {\n                 tt::Leaf::Punct(tt::Punct { char: '$', spacing }) => {\n-                    if p.at_ident().is_some() {\n+                    // mbe var can be an ident or keyword, including `true` and `false`\n+                    if p.at_ident().is_some() || is_boolean_literal(p.current()) {\n                         crate::Leaf::from(parse_var(&mut p, transcriber)?).into()\n                     } else if let Some(tt::TokenTree::Subtree(_)) = p.current() {\n                         parse_repeat(&mut p, transcriber)?.into()\n@@ -60,8 +71,16 @@ fn parse_subtree(tt: &tt::Subtree, transcriber: bool) -> Result<crate::Subtree,\n }\n \n fn parse_var(p: &mut TtCursor, transcriber: bool) -> Result<crate::Var, ParseError> {\n-    let ident = p.eat_ident().unwrap();\n-    let text = ident.text.clone();\n+    let text = {\n+        if is_boolean_literal(p.current()) {\n+            let lit = p.eat_literal().unwrap();\n+            lit.text.clone()\n+        } else {\n+            let ident = p.eat_ident().unwrap();\n+            ident.text.clone()\n+        }\n+    };\n+\n     let kind = if !transcriber && p.at_char(':') {\n         p.bump();\n         if let Some(ident) = p.eat_ident() {\n@@ -125,6 +144,8 @@ mod tests {\n \n         is_valid(\"($i:ident) => ()\");\n         is_valid(\"($($i:ident)*) => ($_)\");\n+        is_valid(\"($($true:ident)*) => ($true)\");\n+        is_valid(\"($($false:ident)*) => ($false)\");\n \n         expect_err(\"$i:ident => ()\", \"subtree\");\n         expect_err(\"($i:ident) ()\", \"`=`\");"}]}