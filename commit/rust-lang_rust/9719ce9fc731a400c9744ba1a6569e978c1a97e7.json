{"sha": "9719ce9fc731a400c9744ba1a6569e978c1a97e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTljZTlmYzczMWE0MDBjOTc0NGJhMWE2NTY5ZTk3OGMxYTk3ZTc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:55:50Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:56:48Z"}, "message": "Use chalk_ir::FnDefId", "tree": {"sha": "a9c674c83723e2ed145793f72450c873da62a6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c674c83723e2ed145793f72450c873da62a6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9719ce9fc731a400c9744ba1a6569e978c1a97e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9719ce9fc731a400c9744ba1a6569e978c1a97e7", "html_url": "https://github.com/rust-lang/rust/commit/9719ce9fc731a400c9744ba1a6569e978c1a97e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9719ce9fc731a400c9744ba1a6569e978c1a97e7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19664e276aba21a42cad5351a2c91995d1ce5d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/19664e276aba21a42cad5351a2c91995d1ce5d52", "html_url": "https://github.com/rust-lang/rust/commit/19664e276aba21a42cad5351a2c91995d1ce5d52"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "7f8f936d3bc7d6d3b40bf53797f83c8cb4e1ef5b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -1715,10 +1715,7 @@ impl Type {\n     }\n \n     pub fn as_callable(&self, db: &dyn HirDatabase) -> Option<Callable> {\n-        let def = match self.ty.value.interned(&Interner) {\n-            &TyKind::FnDef(def, _) => Some(def),\n-            _ => None,\n-        };\n+        let def = self.ty.value.callable_def(db);\n \n         let sig = self.ty.value.callable_sig(db)?;\n         Some(Callable { ty: self.clone(), sig, def, is_bound_method: false })"}, {"sha": "a038674cf6a11ffc5afcaa989cbde4f16c308678", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -12,7 +12,7 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n+    Binders, CallableDefId, FnDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n     ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -100,10 +100,10 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n-    fn fn_def_datum(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> Arc<chalk::FnDefDatum>;\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk::FnDefDatum>;\n \n     #[salsa::invoke(crate::traits::chalk::fn_def_variance_query)]\n-    fn fn_def_variance(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> chalk::Variances;\n+    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk::Variances;\n \n     #[salsa::invoke(crate::traits::chalk::adt_variance_query)]\n     fn adt_variance(&self, krate: CrateId, adt_id: chalk::AdtId) -> chalk::Variances;"}, {"sha": "20bb6482796b1b76b07a48c1bd4669e8bca61843", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -85,7 +85,7 @@ fn walk_unsafe(\n     let expr = &body.exprs[current];\n     match expr {\n         &Expr::Call { callee, .. } => {\n-            if let Some(func) = infer[callee].as_fn_def() {\n+            if let Some(func) = infer[callee].as_fn_def(db) {\n                 if db.function_data(func).is_unsafe {\n                     unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }"}, {"sha": "b7e85e024db41d7f6563dc97fcd531932445620b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -12,8 +12,9 @@ use hir_expand::name::Name;\n \n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, primitive, to_assoc_type_id,\n-    utils::generics, AdtId, AliasTy, CallableDefId, CallableSig, GenericPredicate, Interner,\n-    Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n+    traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n+    GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar,\n+    Substs, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -363,7 +364,7 @@ impl HirDisplay for Ty {\n                 sig.hir_fmt(f)?;\n             }\n             TyKind::FnDef(def, parameters) => {\n-                let def = *def;\n+                let def = from_chalk(f.db, *def);\n                 let sig = f.db.callable_item_signature(def).subst(parameters);\n                 match def {\n                     CallableDefId::FunctionId(ff) => {\n@@ -431,7 +432,7 @@ impl HirDisplay for Ty {\n                         || f.omit_verbose_types()\n                     {\n                         match self\n-                            .as_generic_def()\n+                            .as_generic_def(f.db)\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {"}, {"sha": "153f22f25f8c580223264dbf2c7f57b8b6b903d8", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     method_resolution, op,\n     primitive::{self, UintTy},\n     to_assoc_type_id,\n-    traits::{FnTrait, InEnvironment},\n+    traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, OpaqueTyId, Rawness,\n     Scalar, Substs, TraitRef, Ty, TyKind,\n@@ -932,8 +932,9 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n-        if let TyKind::FnDef(def, parameters) = callable_ty.interned(&Interner) {\n-            let generic_predicates = self.db.generic_predicates((*def).into());\n+        if let TyKind::FnDef(fn_def, parameters) = callable_ty.interned(&Interner) {\n+            let def: CallableDefId = from_chalk(self.db, *fn_def);\n+            let generic_predicates = self.db.generic_predicates(def.into());\n             for predicate in generic_predicates.iter() {\n                 let predicate = predicate.clone().subst(parameters);\n                 if let Some(obligation) = Obligation::from_predicate(predicate) {"}, {"sha": "6b34852645da0204d2c3c77272cf3b7d721e63aa", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -53,6 +53,7 @@ pub use crate::traits::chalk::Interner;\n \n pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n@@ -182,7 +183,7 @@ pub enum TyKind {\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n     /// ```\n-    FnDef(CallableDefId, Substs),\n+    FnDef(FnDefId, Substs),\n \n     /// The pointee of a string slice. Written as `str`.\n     Str,\n@@ -703,10 +704,12 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_generic_def(&self) -> Option<GenericDefId> {\n+    pub fn as_generic_def(&self, db: &dyn HirDatabase) -> Option<GenericDefId> {\n         match *self.interned(&Interner) {\n             TyKind::Adt(AdtId(adt), ..) => Some(adt.into()),\n-            TyKind::FnDef(callable, ..) => Some(callable.into()),\n+            TyKind::FnDef(callable, ..) => {\n+                Some(db.lookup_intern_callable_def(callable.into()).into())\n+            }\n             TyKind::AssociatedType(type_alias, ..) => Some(from_assoc_type_id(type_alias).into()),\n             TyKind::ForeignType(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n             _ => None,\n@@ -775,18 +778,27 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_fn_def(&self) -> Option<FunctionId> {\n+    pub fn callable_def(&self, db: &dyn HirDatabase) -> Option<CallableDefId> {\n         match self.interned(&Interner) {\n-            &TyKind::FnDef(CallableDefId::FunctionId(func), ..) => Some(func),\n+            &TyKind::FnDef(def, ..) => Some(db.lookup_intern_callable_def(def.into())),\n             _ => None,\n         }\n     }\n \n+    pub fn as_fn_def(&self, db: &dyn HirDatabase) -> Option<FunctionId> {\n+        if let Some(CallableDefId::FunctionId(func)) = self.callable_def(db) {\n+            Some(func)\n+        } else {\n+            None\n+        }\n+    }\n+\n     pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<CallableSig> {\n         match self.interned(&Interner) {\n             TyKind::Function(fn_ptr) => Some(CallableSig::from_fn_ptr(fn_ptr)),\n             TyKind::FnDef(def, parameters) => {\n-                let sig = db.callable_item_signature(*def);\n+                let callable_def = db.lookup_intern_callable_def((*def).into());\n+                let sig = db.callable_item_signature(callable_def);\n                 Some(sig.subst(&parameters))\n             }\n             TyKind::Closure(.., substs) => {"}, {"sha": "b8b1400ebc5665bc2b1311d1d5e2b394605ca9c2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -1064,7 +1064,10 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n fn type_for_fn(db: &dyn HirDatabase, def: FunctionId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), def.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::FunctionId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n /// Build the declared type of a const.\n@@ -1107,7 +1110,10 @@ fn type_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> Binders<T\n     }\n     let generics = generics(db.upcast(), def.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::StructId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n fn fn_sig_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -> PolyFnSig {\n@@ -1132,7 +1138,10 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n     }\n     let generics = generics(db.upcast(), def.parent.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), TyKind::FnDef(def.into(), substs).intern(&Interner))\n+    Binders::new(\n+        substs.len(),\n+        TyKind::FnDef(CallableDefId::EnumVariantId(def).to_chalk(db), substs).intern(&Interner),\n+    )\n }\n \n fn type_for_adt(db: &dyn HirDatabase, adt: AdtId) -> Binders<Ty> {"}, {"sha": "bb92d8e2a77966d04ae85ea9e7e809bb12e5f3ba", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id,\n     utils::generics,\n-    BoundVar, CallableDefId, CallableSig, DebruijnIndex, GenericPredicate, ProjectionPredicate,\n-    ProjectionTy, Substs, TraitRef, Ty, TyKind,\n+    BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, GenericPredicate,\n+    ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TyKind,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,"}, {"sha": "1dc3f497d484eadfc14bc6e1b26b3c8bcbfb6bb6", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -20,7 +20,6 @@ pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n-pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;"}, {"sha": "23ef07d779a8527ffea7a124e49d2376b6febfa6", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9719ce9fc731a400c9744ba1a6569e978c1a97e7/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=9719ce9fc731a400c9744ba1a6569e978c1a97e7", "patch": "@@ -66,8 +66,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Slice(substs[0].clone().to_chalk(db)).intern(&Interner)\n             }\n             TyKind::Str => chalk_ir::TyKind::Str.intern(&Interner),\n-            TyKind::FnDef(callable_def, substs) => {\n-                let id = callable_def.to_chalk(db);\n+            TyKind::FnDef(id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::FnDef(id, substitution).intern(&Interner)\n             }\n@@ -201,7 +200,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Never => TyKind::Never,\n \n             chalk_ir::TyKind::FnDef(fn_def_id, subst) => {\n-                TyKind::FnDef(from_chalk(db, fn_def_id), from_chalk(db, subst))\n+                TyKind::FnDef(fn_def_id, from_chalk(db, subst))\n             }\n \n             chalk_ir::TyKind::Closure(id, subst) => {"}]}