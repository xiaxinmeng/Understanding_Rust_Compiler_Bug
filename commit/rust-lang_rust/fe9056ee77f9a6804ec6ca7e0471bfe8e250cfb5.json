{"sha": "fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTA1NmVlNzdmOWE2ODA0ZWM2Y2E3ZTA0NzFiZmU4ZTI1MGNmYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-11T15:13:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-11T15:13:50Z"}, "message": "Auto merge of #830 - RalfJung:check-place, r=RalfJung\n\nFix validation and reborrowing of integer pointers\n\nDepends on https://github.com/rust-lang/rust/pull/62441", "tree": {"sha": "64571dee65143d8902bc3b6e473c312be25b3a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64571dee65143d8902bc3b6e473c312be25b3a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "html_url": "https://github.com/rust-lang/rust/commit/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9434cebbb2d26785fe210bd35bd6429093c433", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9434cebbb2d26785fe210bd35bd6429093c433", "html_url": "https://github.com/rust-lang/rust/commit/0b9434cebbb2d26785fe210bd35bd6429093c433"}, {"sha": "7dd0dd35691e0528a6f46013e61c8da4c5013cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd0dd35691e0528a6f46013e61c8da4c5013cf5", "html_url": "https://github.com/rust-lang/rust/commit/7dd0dd35691e0528a6f46013e61c8da4c5013cf5"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "8650ea737fbee3fac09138d88cb0ebc282ba900f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -1 +1 @@\n-0b680cfce544ff9a59d720020e397c4bf3346650\n+97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3"}, {"sha": "dbc3282a306f8ca6a3ccc57e44d2f03b11a6631f", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -108,7 +108,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n     }\n \n-    // FIXME: extract main source file path.\n     // Third argument (`argv`): created from `config.args`.\n     let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n     // For Windows, construct a command string with all the aguments.\n@@ -136,7 +135,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         let place = ecx.mplace_field(argvs_place, idx as u64)?;\n         ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n     }\n-    ecx.memory_mut().mark_immutable(argvs_place.to_ptr()?.alloc_id)?;\n+    ecx.memory_mut().mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n     // Write a pointer to that place as the argument.\n     let argv = argvs_place.ptr;\n     ecx.write_scalar(argv, dest)?;"}, {"sha": "351a6e7e54a6f002ec05c9373ae8c28805e8f254", "filename": "src/helpers.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -116,36 +116,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .map(|(size, _)| size)\n             .unwrap_or_else(|| place.layout.size)\n         );\n-        assert!(size.bytes() > 0);\n         // Store how far we proceeded into the place so far. Everything to the left of\n         // this offset has already been handled, in the sense that the frozen parts\n         // have had `action` called on them.\n-        let mut end_ptr = place.ptr;\n+        let mut end_ptr = place.ptr.assert_ptr();\n         // Called when we detected an `UnsafeCell` at the given offset and size.\n         // Calls `action` and advances `end_ptr`.\n         let mut unsafe_cell_action = |unsafe_cell_ptr: Scalar<Tag>, unsafe_cell_size: Size| {\n-            if unsafe_cell_size != Size::ZERO {\n-                debug_assert_eq!(unsafe_cell_ptr.to_ptr().unwrap().alloc_id,\n-                    end_ptr.to_ptr().unwrap().alloc_id);\n-                debug_assert_eq!(unsafe_cell_ptr.to_ptr().unwrap().tag,\n-                    end_ptr.to_ptr().unwrap().tag);\n-            }\n+            let unsafe_cell_ptr = unsafe_cell_ptr.assert_ptr();\n+            debug_assert_eq!(unsafe_cell_ptr.alloc_id, end_ptr.alloc_id);\n+            debug_assert_eq!(unsafe_cell_ptr.tag, end_ptr.tag);\n             // We assume that we are given the fields in increasing offset order,\n             // and nothing else changes.\n-            let unsafe_cell_offset = unsafe_cell_ptr.get_ptr_offset(this);\n-            let end_offset = end_ptr.get_ptr_offset(this);\n+            let unsafe_cell_offset = unsafe_cell_ptr.offset;\n+            let end_offset = end_ptr.offset;\n             assert!(unsafe_cell_offset >= end_offset);\n             let frozen_size = unsafe_cell_offset - end_offset;\n             // Everything between the end_ptr and this `UnsafeCell` is frozen.\n             if frozen_size != Size::ZERO {\n-                action(end_ptr.to_ptr()?, frozen_size, /*frozen*/true)?;\n+                action(end_ptr, frozen_size, /*frozen*/true)?;\n             }\n             // This `UnsafeCell` is NOT frozen.\n             if unsafe_cell_size != Size::ZERO {\n-                action(unsafe_cell_ptr.to_ptr()?, unsafe_cell_size, /*frozen*/false)?;\n+                action(unsafe_cell_ptr, unsafe_cell_size, /*frozen*/false)?;\n             }\n             // Update end end_ptr.\n-            end_ptr = unsafe_cell_ptr.ptr_wrapping_offset(unsafe_cell_size, this);\n+            end_ptr = unsafe_cell_ptr.wrapping_offset(unsafe_cell_size, this);\n             // Done\n             Ok(())\n         };\n@@ -234,7 +230,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     layout::FieldPlacement::Arbitrary { .. } => {\n                         // Gather the subplaces and sort them before visiting.\n                         let mut places = fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n-                        places.sort_by_key(|place| place.ptr.get_ptr_offset(self.ecx()));\n+                        places.sort_by_key(|place| place.ptr.assert_ptr().offset);\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n                     layout::FieldPlacement::Union { .. } => {"}, {"sha": "fd46eaea9dab8843a74867621e61a07990aea227", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -842,13 +842,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             },\n             \"GetSystemInfo\" => {\n                 let system_info = this.deref_operand(args[0])?;\n-                let (system_info_ptr, align) = system_info.to_scalar_ptr_align();\n-                let system_info_ptr = this.memory()\n-                    .check_ptr_access(\n-                        system_info_ptr,\n-                        system_info.layout.size,\n-                        align,\n-                    )?\n+                let system_info_ptr = this.check_mplace_access(system_info, None)?\n                     .expect(\"cannot be a ZST\");\n                 // Initialize with `0`.\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?"}, {"sha": "6038950bad9f63e4922be71c2544de6f587332a9", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -166,17 +166,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let elem_size = elem_layout.size.bytes();\n                 let count = this.read_scalar(args[2])?.to_usize(this)?;\n                 let elem_align = elem_layout.align.abi;\n-                // erase tags: this is a raw ptr operation\n+\n+                let size = Size::from_bytes(count * elem_size);\n                 let src = this.read_scalar(args[0])?.not_undef()?;\n+                let src = this.memory().check_ptr_access(src, size, elem_align)?;\n                 let dest = this.read_scalar(args[1])?.not_undef()?;\n-                this.memory_mut().copy(\n-                    src,\n-                    elem_align,\n-                    dest,\n-                    elem_align,\n-                    Size::from_bytes(count * elem_size),\n-                    intrinsic_name.ends_with(\"_nonoverlapping\"),\n-                )?;\n+                let dest = this.memory().check_ptr_access(dest, size, elem_align)?;\n+\n+                if let (Some(src), Some(dest)) = (src, dest) {\n+                    this.memory_mut().copy(\n+                        src,\n+                        dest,\n+                        size,\n+                        intrinsic_name.ends_with(\"_nonoverlapping\"),\n+                    )?;\n+                }\n             }\n \n             \"discriminant_value\" => {"}, {"sha": "90656180150f18ea2d39ac5a1fafc16509be27b7", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -587,6 +587,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Nothing to do for ZSTs.\n             return Ok(*val);\n         }\n+        let place = this.force_mplace_ptr(place)?;\n \n         // Compute new borrow.\n         let new_tag = match kind {"}, {"sha": "73515c74e401030dd14a4169a984662121622ce2", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -52,9 +52,8 @@ def test_cargo_miri_run():\n     )\n \n def test_cargo_miri_test():\n-    # FIXME: enable validation again, once that no longer conflicts with intptrcast\n     test(\"cargo miri test\",\n-        cargo_miri(\"test\") + [\"--\", \"-Zmiri-seed=feed\", \"-Zmiri-disable-validation\"],\n+        cargo_miri(\"test\") + [\"--\", \"-Zmiri-seed=feed\"],\n         \"test.stdout.ref\", \"test.stderr.ref\"\n     )\n     test(\"cargo miri test (with filter)\","}, {"sha": "6e3c6e771ccb8a210ee382a316274e3b8bfe97bc", "filename": "tests/run-pass/mpsc.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fmpsc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fmpsc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmpsc.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -7,4 +7,9 @@ pub fn main() {\n     tx.send(box 100).unwrap();\n     let v = rx.recv().unwrap();\n     assert_eq!(v, box 100);\n+\n+    tx.send(box 101).unwrap();\n+    tx.send(box 102).unwrap();\n+    assert_eq!(rx.recv().unwrap(), box 101);\n+    assert_eq!(rx.recv().unwrap(), box 102);\n }", "previous_filename": "tests/run-pass/unique-send.rs"}, {"sha": "c279024f35eabd442390b329f48867f0f1b191d4", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -1,4 +1,3 @@\n-// FIXME move this to run-pass, it should work with intptrcast.\n use std::mem;\n use std::ptr;\n ", "previous_filename": "tests/run-pass-noseed/ptr_int_casts.rs"}, {"sha": "1c7f0eb717974b1b72d2390e38c7678440757578", "filename": "tests/run-pass/ptr_offset.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=fe9056ee77f9a6804ec6ca7e0471bfe8e250cfb5", "patch": "@@ -1,5 +1,3 @@\n-// FIXME move this to run-pass, it should work with intptrcast.\n-\n fn f() -> i32 { 42 }\n \n fn main() {", "previous_filename": "tests/run-pass-noseed/ptr_offset.rs"}]}