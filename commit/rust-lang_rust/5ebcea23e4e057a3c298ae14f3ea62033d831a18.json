{"sha": "5ebcea23e4e057a3c298ae14f3ea62033d831a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmNlYTIzZTRlMDU3YTNjMjk4YWUxNGYzZWE2MjAzM2Q4MzFhMTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-10T17:20:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-10T17:20:13Z"}, "message": "Extract codegen_intrinsic_call", "tree": {"sha": "5627a7bde5f9c9ec8c7cb8060b399b0661672baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5627a7bde5f9c9ec8c7cb8060b399b0661672baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebcea23e4e057a3c298ae14f3ea62033d831a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebcea23e4e057a3c298ae14f3ea62033d831a18", "html_url": "https://github.com/rust-lang/rust/commit/5ebcea23e4e057a3c298ae14f3ea62033d831a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebcea23e4e057a3c298ae14f3ea62033d831a18/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5629c423ffdf5315ee4e4140d86b6b025ba7cb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/5629c423ffdf5315ee4e4140d86b6b025ba7cb14", "html_url": "https://github.com/rust-lang/rust/commit/5629c423ffdf5315ee4e4140d86b6b025ba7cb14"}], "stats": {"total": 412, "additions": 212, "deletions": 200}, "files": [{"sha": "fb49478bcc47d63628e15b0d1e9fdfde757aba43", "filename": "src/abi.rs", "status": "modified", "additions": 210, "deletions": 198, "changes": 408, "blob_url": "https://github.com/rust-lang/rust/blob/5ebcea23e4e057a3c298ae14f3ea62033d831a18/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebcea23e4e057a3c298ae14f3ea62033d831a18/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=5ebcea23e4e057a3c298ae14f3ea62033d831a18", "patch": "@@ -351,10 +351,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             let intrinsic = fx.tcx.item_name(def_id).as_str();\n             let intrinsic = &intrinsic[..];\n \n-            let nil_ty = fx.tcx.mk_nil();\n-            let u64_layout = fx.layout_of(fx.tcx.types.u64);\n-            let usize_layout = fx.layout_of(fx.tcx.types.usize);\n-\n             let ret = match return_place {\n                 Some(ret) => ret,\n                 None => {\n@@ -375,200 +371,9 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                     return;\n                 }\n             };\n-            match intrinsic {\n-                \"assume\" => {\n-                    assert_eq!(args.len(), 1);\n-                }\n-                \"arith_offset\" => {\n-                    assert_eq!(args.len(), 2);\n-                    let base = args[0].load_value(fx);\n-                    let offset = args[1].load_value(fx);\n-                    let res = fx.bcx.ins().iadd(base, offset);\n-                    let res = CValue::ByVal(res, ret.layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"likely\" | \"unlikely\" => {\n-                    assert_eq!(args.len(), 1);\n-                    ret.write_cvalue(fx, args[0]);\n-                }\n-                \"copy\" | \"copy_nonoverlapping\" => {\n-                    let elem_ty = substs.type_at(0);\n-                    let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-                    let elem_size = fx.bcx.ins().iconst(types::I64, elem_size as i64);\n-                    assert_eq!(args.len(), 3);\n-                    let src = args[0];\n-                    let dst = args[1];\n-                    let count = args[2].load_value(fx);\n-                    let byte_amount = fx.bcx.ins().imul(count, elem_size);\n-                    fx.easy_call(\n-                        \"memmove\",\n-                        &[dst, src, CValue::ByVal(byte_amount, usize_layout)],\n-                        nil_ty,\n-                    );\n-                }\n-                \"discriminant_value\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n-                    ret.write_cvalue(fx, discr);\n-                }\n-                \"size_of\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n-                    let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n-                    ret.write_cvalue(fx, size_of);\n-                }\n-                \"type_id\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n-                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n-                    ret.write_cvalue(fx, type_id);\n-                }\n-                \"min_align_of\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n-                    let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n-                    ret.write_cvalue(fx, min_align);\n-                }\n-                _ if intrinsic.starts_with(\"unchecked_\") => {\n-                    assert_eq!(args.len(), 2);\n-                    let bin_op = match intrinsic {\n-                        \"unchecked_div\" => BinOp::Div,\n-                        \"unchecked_rem\" => BinOp::Rem,\n-                        \"unchecked_shl\" => BinOp::Shl,\n-                        \"unchecked_shr\" => BinOp::Shr,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match ret.layout().ty.sty {\n-                        TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                _ if intrinsic.ends_with(\"_with_overflow\") => {\n-                    assert_eq!(args.len(), 2);\n-                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-                    let bin_op = match intrinsic {\n-                        \"add_with_overflow\" => BinOp::Add,\n-                        \"sub_with_overflow\" => BinOp::Sub,\n-                        \"mul_with_overflow\" => BinOp::Mul,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match args[0].layout().ty.sty {\n-                        TypeVariants::TyUint(_) => crate::base::trans_checked_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        TypeVariants::TyInt(_) => crate::base::trans_checked_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                _ if intrinsic.starts_with(\"overflowing_\") => {\n-                    assert_eq!(args.len(), 2);\n-                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-                    let bin_op = match intrinsic {\n-                        \"overflowing_add\" => BinOp::Add,\n-                        \"overflowing_sub\" => BinOp::Sub,\n-                        \"overflowing_mul\" => BinOp::Mul,\n-                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-                    };\n-                    let res = match args[0].layout().ty.sty {\n-                        TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            false,\n-                        ),\n-                        TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n-                            fx,\n-                            bin_op,\n-                            args[0],\n-                            args[1],\n-                            ret.layout().ty,\n-                            true,\n-                        ),\n-                        _ => panic!(),\n-                    };\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"offset\" => {\n-                    assert_eq!(args.len(), 2);\n-                    let base = args[0].load_value(fx);\n-                    let offset = args[1].load_value(fx);\n-                    let res = fx.bcx.ins().iadd(base, offset);\n-                    ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n-                }\n-                \"transmute\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let src_ty = substs.type_at(0);\n-                    let dst_ty = substs.type_at(1);\n-                    assert_eq!(args[0].layout().ty, src_ty);\n-                    let addr = args[0].force_stack(fx);\n-                    let dst_layout = fx.layout_of(dst_ty);\n-                    ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n-                }\n-                \"uninit\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let ty = substs.type_at(0);\n-                    let layout = fx.layout_of(ty);\n-                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                        kind: StackSlotKind::ExplicitSlot,\n-                        size: layout.size.bytes() as u32,\n-                        offset: None,\n-                    });\n-\n-                    let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n-                    let uninit_val = uninit_place.to_cvalue(fx);\n-                    ret.write_cvalue(fx, uninit_val);\n-                }\n-                \"ctlz\" | \"ctlz_nonzero\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"cttz\" | \"cttz_nonzero\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                \"ctpop\" => {\n-                    assert_eq!(args.len(), 1);\n-                    let arg = args[0].load_value(fx);\n-                    let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n-                    ret.write_cvalue(fx, res);\n-                }\n-                _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n-            }\n+\n+            codegen_intrinsic_call(fx, intrinsic, substs, args, ret);\n+\n             if let Some((_, dest)) = *destination {\n                 let ret_ebb = fx.get_ebb(dest);\n                 fx.bcx.ins().jump(ret_ebb, &[]);\n@@ -614,3 +419,210 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n         fx.bcx.ins().trap(TrapCode::User(!0));\n     }\n }\n+\n+fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx>,\n+    intrinsic: &str,\n+    substs: &Substs<'tcx>,\n+    args: Vec<CValue<'tcx>>,\n+    ret: CPlace<'tcx>,\n+) {\n+    let nil_ty = fx.tcx.mk_nil();\n+    let u64_layout = fx.layout_of(fx.tcx.types.u64);\n+    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+\n+    match intrinsic {\n+        \"assume\" => {\n+            assert_eq!(args.len(), 1);\n+        }\n+        \"arith_offset\" => {\n+            assert_eq!(args.len(), 2);\n+            let base = args[0].load_value(fx);\n+            let offset = args[1].load_value(fx);\n+            let res = fx.bcx.ins().iadd(base, offset);\n+            let res = CValue::ByVal(res, ret.layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"likely\" | \"unlikely\" => {\n+            assert_eq!(args.len(), 1);\n+            ret.write_cvalue(fx, args[0]);\n+        }\n+        \"copy\" | \"copy_nonoverlapping\" => {\n+            let elem_ty = substs.type_at(0);\n+            let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n+            let elem_size = fx.bcx.ins().iconst(types::I64, elem_size as i64);\n+            assert_eq!(args.len(), 3);\n+            let src = args[0];\n+            let dst = args[1];\n+            let count = args[2].load_value(fx);\n+            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+            fx.easy_call(\n+                \"memmove\",\n+                &[dst, src, CValue::ByVal(byte_amount, usize_layout)],\n+                nil_ty,\n+            );\n+        }\n+        \"discriminant_value\" => {\n+            assert_eq!(args.len(), 1);\n+            let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n+            ret.write_cvalue(fx, discr);\n+        }\n+        \"size_of\" => {\n+            assert_eq!(args.len(), 0);\n+            let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n+            let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n+            ret.write_cvalue(fx, size_of);\n+        }\n+        \"type_id\" => {\n+            assert_eq!(args.len(), 0);\n+            let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n+            let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n+            ret.write_cvalue(fx, type_id);\n+        }\n+        \"min_align_of\" => {\n+            assert_eq!(args.len(), 0);\n+            let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n+            let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n+            ret.write_cvalue(fx, min_align);\n+        }\n+        _ if intrinsic.starts_with(\"unchecked_\") => {\n+            assert_eq!(args.len(), 2);\n+            let bin_op = match intrinsic {\n+                \"unchecked_div\" => BinOp::Div,\n+                \"unchecked_rem\" => BinOp::Rem,\n+                \"unchecked_shl\" => BinOp::Shl,\n+                \"unchecked_shr\" => BinOp::Shr,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match ret.layout().ty.sty {\n+                TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        _ if intrinsic.ends_with(\"_with_overflow\") => {\n+            assert_eq!(args.len(), 2);\n+            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+            let bin_op = match intrinsic {\n+                \"add_with_overflow\" => BinOp::Add,\n+                \"sub_with_overflow\" => BinOp::Sub,\n+                \"mul_with_overflow\" => BinOp::Mul,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match args[0].layout().ty.sty {\n+                TypeVariants::TyUint(_) => crate::base::trans_checked_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                TypeVariants::TyInt(_) => crate::base::trans_checked_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        _ if intrinsic.starts_with(\"overflowing_\") => {\n+            assert_eq!(args.len(), 2);\n+            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+            let bin_op = match intrinsic {\n+                \"overflowing_add\" => BinOp::Add,\n+                \"overflowing_sub\" => BinOp::Sub,\n+                \"overflowing_mul\" => BinOp::Mul,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match args[0].layout().ty.sty {\n+                TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    args[0],\n+                    args[1],\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"offset\" => {\n+            assert_eq!(args.len(), 2);\n+            let base = args[0].load_value(fx);\n+            let offset = args[1].load_value(fx);\n+            let res = fx.bcx.ins().iadd(base, offset);\n+            ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n+        }\n+        \"transmute\" => {\n+            assert_eq!(args.len(), 1);\n+            let src_ty = substs.type_at(0);\n+            let dst_ty = substs.type_at(1);\n+            assert_eq!(args[0].layout().ty, src_ty);\n+            let addr = args[0].force_stack(fx);\n+            let dst_layout = fx.layout_of(dst_ty);\n+            ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n+        }\n+        \"uninit\" => {\n+            assert_eq!(args.len(), 0);\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n+            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                kind: StackSlotKind::ExplicitSlot,\n+                size: layout.size.bytes() as u32,\n+                offset: None,\n+            });\n+\n+            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+            let uninit_val = uninit_place.to_cvalue(fx);\n+            ret.write_cvalue(fx, uninit_val);\n+        }\n+        \"ctlz\" | \"ctlz_nonzero\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"cttz\" | \"cttz_nonzero\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"ctpop\" => {\n+            assert_eq!(args.len(), 1);\n+            let arg = args[0].load_value(fx);\n+            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n+            ret.write_cvalue(fx, res);\n+        }\n+        _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n+    }\n+}"}, {"sha": "5ece23fc4db019178772941813e8642ef4382f79", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebcea23e4e057a3c298ae14f3ea62033d831a18/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebcea23e4e057a3c298ae14f3ea62033d831a18/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5ebcea23e4e057a3c298ae14f3ea62033d831a18", "patch": "@@ -839,11 +839,11 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n     match lhs.layout().ty.sty {\n-        TypeVariants::TyRawPtr(TypeAndMut { ty, mutbl: _}) => {\n+        TypeVariants::TyRawPtr(TypeAndMut { ty, mutbl: _ }) => {\n             if !ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n                 unimpl!(\"Unsized values are not yet implemented\");\n             }\n-        },\n+        }\n         _ => bug!(\"trans_ptr_binop on non ptr\"),\n     }\n     binop_match! {"}]}