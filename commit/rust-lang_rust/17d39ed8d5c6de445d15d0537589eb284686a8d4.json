{"sha": "17d39ed8d5c6de445d15d0537589eb284686a8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZDM5ZWQ4ZDVjNmRlNDQ1ZDE1ZDA1Mzc1ODllYjI4NDY4NmE4ZDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:25Z"}, "message": "Rollup merge of #49076 - bobdavelisafrank:filetype-metadata-docfix, r=bluss\n\nFix Issue #48345, is_file, is_dir, and is_symlink note mutual exclusion\n\nThe methods on the structures `fs::FileType` and `fs::Metadata` of (respectively) `is_file`, `is_dir`, and `is_symlink` had some ambiguity in documentation, where it was not noted whether files will pass those tests exclusively or not. It is now written that the tests are mutually exclusive.\n\nFixes #48345.", "tree": {"sha": "893a9c160bcf7ed4555d04d1393de665f21051e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/893a9c160bcf7ed4555d04d1393de665f21051e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d39ed8d5c6de445d15d0537589eb284686a8d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopBCRBK7hj4Ov3rIwAAdHIIAFWgTmrwiRBL9z0PsnkHz60c\n8Sn13qywtCblG/fJ5shhlfrAE3LDwEw3pMtVfQn/sBvJ8pPa41fCrPKfVS5jhn3f\nim2/drYIxuwmaBZXxHHTIbG7dWOif4U54dgLFGjAYssZbFRQJR1nNPzNmEPNLdoR\nxjMCYw8bu0yUlk9kN5EoGF3T09aaFkHOoOYQez+VEfJlMBPcHFOYjbA9TMGmj/tE\ngdzYd5fpAPVLPdx55gtiIvN2QFoEgredfEoUr/kUk+YDCrJ18VMyh2Aais+tSNuJ\nDfXnAc2RmKAOyswlkBFtBXQhyzb3NWFTWfj+j4/C2ANKQMfE6qdqVKMONBz0oow=\n=hI6x\n-----END PGP SIGNATURE-----\n", "payload": "tree 893a9c160bcf7ed4555d04d1393de665f21051e0\nparent 9c5f372a9aae3de4812ee5d3d092c46e7f1509b9\nparent aaac69f78e6a9f0ee52b41969d81f4bb79da6418\nauthor kennytm <kennytm@gmail.com> 1521912385 +0800\ncommitter GitHub <noreply@github.com> 1521912385 +0800\n\nRollup merge of #49076 - bobdavelisafrank:filetype-metadata-docfix, r=bluss\n\nFix Issue #48345, is_file, is_dir, and is_symlink note mutual exclusion\n\nThe methods on the structures `fs::FileType` and `fs::Metadata` of (respectively) `is_file`, `is_dir`, and `is_symlink` had some ambiguity in documentation, where it was not noted whether files will pass those tests exclusively or not. It is now written that the tests are mutually exclusive.\n\nFixes #48345.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d39ed8d5c6de445d15d0537589eb284686a8d4", "html_url": "https://github.com/rust-lang/rust/commit/17d39ed8d5c6de445d15d0537589eb284686a8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d39ed8d5c6de445d15d0537589eb284686a8d4/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5f372a9aae3de4812ee5d3d092c46e7f1509b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5f372a9aae3de4812ee5d3d092c46e7f1509b9", "html_url": "https://github.com/rust-lang/rust/commit/9c5f372a9aae3de4812ee5d3d092c46e7f1509b9"}, {"sha": "aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaac69f78e6a9f0ee52b41969d81f4bb79da6418", "html_url": "https://github.com/rust-lang/rust/commit/aaac69f78e6a9f0ee52b41969d81f4bb79da6418"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "5caa703ee97e39e39de31cebd90b6b3b6ebad7a8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/17d39ed8d5c6de445d15d0537589eb284686a8d4/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d39ed8d5c6de445d15d0537589eb284686a8d4/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=17d39ed8d5c6de445d15d0537589eb284686a8d4", "patch": "@@ -906,7 +906,13 @@ impl Metadata {\n         FileType(self.0.file_type())\n     }\n \n-    /// Returns whether this metadata is for a directory.\n+    /// Returns whether this metadata is for a directory. The\n+    /// result is mutually exclusive to the result of\n+    /// [`is_file`], and will be false for symlink metadata\n+    /// obtained from [`symlink_metadata`].\n+    ///\n+    /// [`is_file`]: struct.Metadata.html#method.is_file\n+    /// [`symlink_metadata`]: fn.symlink_metadata.html\n     ///\n     /// # Examples\n     ///\n@@ -923,7 +929,13 @@ impl Metadata {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool { self.file_type().is_dir() }\n \n-    /// Returns whether this metadata is for a regular file.\n+    /// Returns whether this metadata is for a regular file. The\n+    /// result is mutually exclusive to the result of\n+    /// [`is_dir`], and will be false for symlink metadata\n+    /// obtained from [`symlink_metadata`].\n+    ///\n+    /// [`is_dir`]: struct.Metadata.html#method.is_dir\n+    /// [`symlink_metadata`]: fn.symlink_metadata.html\n     ///\n     /// # Examples\n     ///\n@@ -1148,7 +1160,13 @@ impl Permissions {\n }\n \n impl FileType {\n-    /// Test whether this file type represents a directory.\n+    /// Test whether this file type represents a directory. The\n+    /// result is mutually exclusive to the results of\n+    /// [`is_file`] and [`is_symlink`]; only zero or one of these\n+    /// tests may pass.\n+    ///\n+    /// [`is_file`]: struct.FileType.html#method.is_file\n+    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1167,6 +1185,12 @@ impl FileType {\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n \n     /// Test whether this file type represents a regular file.\n+    /// The result is  mutually exclusive to the results of\n+    /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n+    /// tests may pass.\n+    ///\n+    /// [`is_dir`]: struct.FileType.html#method.is_dir\n+    /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples\n     ///\n@@ -1185,6 +1209,9 @@ impl FileType {\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n \n     /// Test whether this file type represents a symbolic link.\n+    /// The result is mutually exclusive to the results of\n+    /// [`is_dir`] and [`is_file`]; only zero or one of these\n+    /// tests may pass.\n     ///\n     /// The underlying [`Metadata`] struct needs to be retrieved\n     /// with the [`fs::symlink_metadata`] function and not the\n@@ -1195,6 +1222,8 @@ impl FileType {\n     /// [`Metadata`]: struct.Metadata.html\n     /// [`fs::metadata`]: fn.metadata.html\n     /// [`fs::symlink_metadata`]: fn.symlink_metadata.html\n+    /// [`is_dir`]: struct.FileType.html#method.is_dir\n+    /// [`is_file`]: struct.FileType.html#method.is_file\n     /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n     ///\n     /// # Examples"}]}