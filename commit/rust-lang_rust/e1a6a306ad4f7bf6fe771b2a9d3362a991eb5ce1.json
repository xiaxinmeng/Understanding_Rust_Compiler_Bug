{"sha": "e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTZhMzA2YWQ0ZjdiZjZmZTc3MWIyYTlkMzM2MmE5OTFlYjVjZTE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-18T21:07:41Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-18T23:09:06Z"}, "message": "Revert \"Fix missing libLLVM.so in stage0 sysroot.\"\n\nThis reverts commit 8b9c5396ca574fad9cc7b51d16c8c96e0ae74632.", "tree": {"sha": "cf2ff1705d2011d0f9ff30c2b440066ff4618a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2ff1705d2011d0f9ff30c2b440066ff4618a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "html_url": "https://github.com/rust-lang/rust/commit/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "html_url": "https://github.com/rust-lang/rust/commit/0536b8dcaafcfc0e51713a05eb0082a6e20725b1"}], "stats": {"total": 38, "additions": 0, "deletions": 38}, "files": [{"sha": "ad494b88b3af217d3369cda061da0aad182647ef", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e1a6a306ad4f7bf6fe771b2a9d3362a991eb5ce1", "patch": "@@ -451,44 +451,6 @@ impl Step for Rustc {\n             false,\n         );\n \n-        // We used to build librustc_codegen_llvm as a separate step,\n-        // which produced a dylib that the compiler would dlopen() at runtime.\n-        // This meant that we only needed to make sure that libLLVM.so was\n-        // installed by the time we went to run a tool using it - since\n-        // librustc_codegen_llvm was effectively a standalone artifact,\n-        // other crates were completely oblivious to its dependency\n-        // on `libLLVM.so` during build time.\n-        //\n-        // However, librustc_codegen_llvm is now built as an ordinary\n-        // crate during the same step as the rest of the compiler crates.\n-        // This means that any crates depending on it will see the fact\n-        // that it uses `libLLVM.so` as a native library, and will\n-        // cause us to pass `-llibLLVM.so` to the linker when we link\n-        // a binary.\n-        //\n-        // For `rustc` itself, this works out fine.\n-        // During the `Assemble` step, we call `dist::maybe_install_llvm_dylib`\n-        // to copy libLLVM.so into the `stage` directory. We then link\n-        // the compiler binary, which will find `libLLVM.so` in the correct place.\n-        //\n-        // However, this is insufficient for tools that are build against stage0\n-        // (e.g. stage1 rustdoc). Since `Assemble` for stage0 doesn't actually do anything,\n-        // we won't have `libLLVM.so` in the stage0 sysroot. In the past, this wasn't\n-        // a problem - we would copy the tool binary into its correct stage directory\n-        // (e.g. stage1 for a stage1 rustdoc built against a stage0 compiler).\n-        // Since libLLVM.so wasn't resolved until runtime, it was fine for it to\n-        // not exist while we were building it.\n-        //\n-        // To ensure that we can still build stage1 tools against a stage0 compiler,\n-        // we explicitly copy libLLVM.so into the stage0 sysroot when building\n-        // the stage0 compiler. This ensures that tools built against stage0\n-        // will see libLLVM.so at build time, making the linker happy.\n-        if compiler.stage == 0 {\n-            builder.info(&format!(\"Installing libLLVM.so to stage 0 ({})\", compiler.host));\n-            let sysroot = builder.sysroot(compiler);\n-            dist::maybe_install_llvm_dylib(builder, compiler.host, &sysroot);\n-        }\n-\n         builder.ensure(RustcLink {\n             compiler: builder.compiler(compiler.stage, builder.config.build),\n             target_compiler: compiler,"}]}