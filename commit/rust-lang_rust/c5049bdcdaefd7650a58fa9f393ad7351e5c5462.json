{"sha": "c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "node_id": "C_kwDOAAsO6NoAKGM1MDQ5YmRjZGFlZmQ3NjUwYTU4ZmE5ZjM5M2FkNzM1MWU1YzU0NjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-04T22:40:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T22:40:10Z"}, "message": "Merge #11190\n\n11190: fix(completions): improve fn_param r=dbofmmbt a=dbofmmbt\n\n- insert commas around when necessary\r\n- only suggest `self` completions when param list is empty\r\n- stop suggesting completions for identifiers which are already on the param list\r\n\r\nCloses #11085 \n\nCo-authored-by: Eduardo Canellas <eduardocanellas98@gmail.com>", "tree": {"sha": "67b6a8b504b1cc7ffeec156988cf651e375c18dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b6a8b504b1cc7ffeec156988cf651e375c18dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1MzKCRBK7hj4Ov3rIwAAgYUIAAnqxWknlF+YPXF8YSgnZg6y\nuTnXyv0YGmj4geXogAeEIyLOTk++U+EaN9Hpp2W0ld4ZbzTR/HVQlwsNEi4H/utM\nlvEVBz4OcPDFQbtu4CAAkCaGCKTjs6toA4ySG7fROPdFCvxyuZqAMvYuWmMN2fXU\nfyYN+85RqsEXii0MEeiNuOLHYhs+iRObA5IHGUdkcjvYRUv2uAlfotDhtvN0eQHN\nHHUAUx0jxS4mNa4ul0oSyZIm/dZdDq36fB/YZ0sQP6dumH+pZ/R+1tMjK7PrWc+7\n0jNNmY7xRN4JlgTQZ+c6B5EDHrk57rpswrozWmKqCJIdVLqLuP6FceO40xfFCA8=\n=2NHA\n-----END PGP SIGNATURE-----\n", "payload": "tree 67b6a8b504b1cc7ffeec156988cf651e375c18dc\nparent ac3ea3e81cb671088509ccb922d76faa1454566b\nparent a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641336010 +0000\ncommitter GitHub <noreply@github.com> 1641336010 +0000\n\nMerge #11190\n\n11190: fix(completions): improve fn_param r=dbofmmbt a=dbofmmbt\n\n- insert commas around when necessary\r\n- only suggest `self` completions when param list is empty\r\n- stop suggesting completions for identifiers which are already on the param list\r\n\r\nCloses #11085 \n\nCo-authored-by: Eduardo Canellas <eduardocanellas98@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "html_url": "https://github.com/rust-lang/rust/commit/c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5049bdcdaefd7650a58fa9f393ad7351e5c5462/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3ea3e81cb671088509ccb922d76faa1454566b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3ea3e81cb671088509ccb922d76faa1454566b", "html_url": "https://github.com/rust-lang/rust/commit/ac3ea3e81cb671088509ccb922d76faa1454566b"}, {"sha": "a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2", "html_url": "https://github.com/rust-lang/rust/commit/a973e5a9db4877e8d259ca17d0f0f208fbe9e5a2"}], "stats": {"total": 115, "additions": 91, "deletions": 24}, "files": [{"sha": "bb4ce0a24dc00d13b29b8f757cb8c3755ee55c92", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 77, "deletions": 18, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c5049bdcdaefd7650a58fa9f393ad7351e5c5462/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5049bdcdaefd7650a58fa9f393ad7351e5c5462/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "patch": "@@ -3,7 +3,7 @@\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{self, HasModuleItem},\n-    match_ast, AstNode,\n+    match_ast, AstNode, SyntaxKind,\n };\n \n use crate::{\n@@ -16,24 +16,22 @@ use crate::{\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n /// suggested.\n pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if !matches!(ctx.pattern_ctx, Some(PatternContext { is_param: Some(ParamKind::Function), .. }))\n-    {\n+    let param_of_fn =\n+        matches!(ctx.pattern_ctx, Some(PatternContext { is_param: Some(ParamKind::Function), .. }));\n+\n+    if !param_of_fn {\n         return None;\n     }\n \n-    let mut params = FxHashMap::default();\n+    let mut file_params = FxHashMap::default();\n \n-    let me = ctx.token.ancestors().find_map(ast::Fn::cast);\n-    let mut process_fn = |func: ast::Fn| {\n-        if Some(&func) == me.as_ref() {\n-            return;\n-        }\n-        func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n+    let mut extract_params = |f: ast::Fn| {\n+        f.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n             if let Some(pat) = param.pat() {\n                 // FIXME: We should be able to turn these into SmolStr without having to allocate a String\n-                let text = param.syntax().text().to_string();\n-                let lookup = pat.syntax().text().to_string();\n-                params.entry(text).or_insert(lookup);\n+                let whole_param = param.syntax().text().to_string();\n+                let binding = pat.syntax().text().to_string();\n+                file_params.entry(whole_param).or_insert(binding);\n             }\n         });\n     };\n@@ -44,32 +42,93 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n                 ast::SourceFile(it) => it.items().filter_map(|item| match item {\n                     ast::Item::Fn(it) => Some(it),\n                     _ => None,\n-                }).for_each(&mut process_fn),\n+                }).for_each(&mut extract_params),\n                 ast::ItemList(it) => it.items().filter_map(|item| match item {\n                     ast::Item::Fn(it) => Some(it),\n                     _ => None,\n-                }).for_each(&mut process_fn),\n+                }).for_each(&mut extract_params),\n                 ast::AssocItemList(it) => it.assoc_items().filter_map(|item| match item {\n                     ast::AssocItem::Fn(it) => Some(it),\n                     _ => None,\n-                }).for_each(&mut process_fn),\n+                }).for_each(&mut extract_params),\n                 _ => continue,\n             }\n         };\n     }\n \n+    let function = ctx.token.ancestors().find_map(ast::Fn::cast)?;\n+    let param_list = function.param_list()?;\n+\n+    remove_duplicated(&mut file_params, param_list.params());\n+\n     let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n-    if ctx.impl_def.is_some() && me?.param_list()?.params().next().is_none() {\n+    if should_add_self_completions(ctx, param_list) {\n         self_completion_items.into_iter().for_each(|self_item| {\n             add_new_item_to_acc(ctx, acc, self_item.to_string(), self_item.to_string())\n         });\n     }\n \n-    params.into_iter().for_each(|(label, lookup)| add_new_item_to_acc(ctx, acc, label, lookup));\n+    file_params.into_iter().try_for_each(|(whole_param, binding)| {\n+        Some(add_new_item_to_acc(ctx, acc, surround_with_commas(ctx, whole_param), binding))\n+    })?;\n \n     Some(())\n }\n \n+fn remove_duplicated(\n+    file_params: &mut FxHashMap<String, String>,\n+    fn_params: ast::AstChildren<ast::Param>,\n+) {\n+    fn_params.for_each(|param| {\n+        let whole_param = param.syntax().text().to_string();\n+        file_params.remove(&whole_param);\n+\n+        if let Some(pattern) = param.pat() {\n+            let binding = pattern.syntax().text().to_string();\n+            file_params.retain(|_, v| v != &binding);\n+        }\n+    })\n+}\n+\n+fn should_add_self_completions(ctx: &CompletionContext, param_list: ast::ParamList) -> bool {\n+    let inside_impl = ctx.impl_def.is_some();\n+    let no_params = param_list.params().next().is_none() && param_list.self_param().is_none();\n+\n+    inside_impl && no_params\n+}\n+\n+fn surround_with_commas(ctx: &CompletionContext, param: String) -> String {\n+    match fallible_surround_with_commas(ctx, &param) {\n+        Some(surrounded) => surrounded,\n+        // fallback to the original parameter\n+        None => param,\n+    }\n+}\n+\n+fn fallible_surround_with_commas(ctx: &CompletionContext, param: &str) -> Option<String> {\n+    let next_token = {\n+        let t = ctx.token.next_token()?;\n+        match t.kind() {\n+            SyntaxKind::WHITESPACE => t.next_token()?,\n+            _ => t,\n+        }\n+    };\n+\n+    let trailing_comma_missing = matches!(next_token.kind(), SyntaxKind::IDENT);\n+    let trailing = if trailing_comma_missing { \",\" } else { \"\" };\n+\n+    let previous_token = if matches!(ctx.token.kind(), SyntaxKind::IDENT | SyntaxKind::WHITESPACE) {\n+        ctx.previous_token.as_ref()?\n+    } else {\n+        &ctx.token\n+    };\n+\n+    let needs_leading = !matches!(previous_token.kind(), SyntaxKind::L_PAREN | SyntaxKind::COMMA);\n+    let leading = if needs_leading { \", \" } else { \"\" };\n+\n+    Some(format!(\"{}{}{}\", leading, param, trailing))\n+}\n+\n fn add_new_item_to_acc(\n     ctx: &CompletionContext,\n     acc: &mut Completions,"}, {"sha": "940cecf395d87a36e9c93b5f0b89f9b7c1ae17a6", "filename": "crates/ide_completion/src/tests/fn_param.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5049bdcdaefd7650a58fa9f393ad7351e5c5462/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5049bdcdaefd7650a58fa9f393ad7351e5c5462/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=c5049bdcdaefd7650a58fa9f393ad7351e5c5462", "patch": "@@ -46,7 +46,20 @@ fn bar(file_id: usize) {}\n fn baz(file$0 id: u32) {}\n \"#,\n         expect![[r#\"\n-            bn file_id: usize\n+            bn file_id: usize,\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn repeated_param_name() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: u32, $0) {}\n+\"#,\n+        expect![[r#\"\n             kw mut\n         \"#]],\n     );\n@@ -126,7 +139,6 @@ impl A {\n \n #[test]\n fn in_impl_after_self() {\n-    // FIXME: self completions should not be here\n     check(\n         r#\"\n struct A {}\n@@ -137,10 +149,6 @@ impl A {\n }\n \"#,\n         expect![[r#\"\n-            bn self\n-            bn &self\n-            bn mut self\n-            bn &mut self\n             bn file_id: usize\n             kw mut\n             sp Self"}]}