{"sha": "4cfdd2178e999960358e15b8c36e89c13b4f21c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZmRkMjE3OGU5OTk5NjAzNThlMTViOGMzNmU4OWMxM2I0ZjIxYzA=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-02T02:41:34Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:01:02Z"}, "message": "Emit `ConstEquate` obligation after checking/unifying for inference variables. This means\na inference variable can be unified with an unevaluated const.", "tree": {"sha": "30ed2124c5bae21ef9b01cc9348f922483e7e2f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ed2124c5bae21ef9b01cc9348f922483e7e2f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfdd2178e999960358e15b8c36e89c13b4f21c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfdd2178e999960358e15b8c36e89c13b4f21c0", "html_url": "https://github.com/rust-lang/rust/commit/4cfdd2178e999960358e15b8c36e89c13b4f21c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfdd2178e999960358e15b8c36e89c13b4f21c0/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b14b84933467d7037feef9c37cb968a5cc9b607", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b14b84933467d7037feef9c37cb968a5cc9b607", "html_url": "https://github.com/rust-lang/rust/commit/8b14b84933467d7037feef9c37cb968a5cc9b607"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "4d7461aa94e84c3f929497e8c5816d74080dd676", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -126,7 +126,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>\n     where\n-        R: TypeRelation<'tcx>,\n+        R: ConstEquateRelation<'tcx>,\n     {\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n@@ -164,6 +164,14 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n+            (ty::ConstKind::Unevaluated(..), _) => {\n+                relation.const_equate_obligation(a, b);\n+                return Ok(b);\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) => {\n+                relation.const_equate_obligation(a, b);\n+                return Ok(a);\n+            }\n             _ => {}\n         }\n \n@@ -656,6 +664,13 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     }\n }\n \n+pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n+    /// Register am obligation that both constants must be equal to each other.\n+    ///\n+    /// If they aren't equal then the relation doesn't hold.\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+}\n+\n pub trait RelateResultCompare<'tcx, T> {\n     fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T>\n     where"}, {"sha": "627580b0474d98e37889f3013df5d915e24a64e9", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -1,10 +1,10 @@\n-use super::combine::{CombineFields, RelationDir};\n+use super::combine::{CombineFields, RelationDir, ConstEquateRelation};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyVar;\n-use rustc_middle::ty::{self, ConstKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n \n@@ -119,17 +119,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        match (a.val, b.val) {\n-            (ConstKind::Unevaluated(..), _) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(b)\n-            }\n-            (_, ConstKind::Unevaluated(..)) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(a)\n-            }\n-            _ => self.fields.infcx.super_combine_consts(self, a, b),\n-        }\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(\n@@ -150,3 +140,9 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}, {"sha": "ec219a95b94414aa1ecf401aaacfb787ef08d109", "filename": "src/librustc_infer/infer/glb.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fglb.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -3,6 +3,7 @@ use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::ObligationCause;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -79,17 +80,7 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        match (a.val, b.val) {\n-            (ty::ConstKind::Unevaluated(..), _) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(b)\n-            }\n-            (_, ty::ConstKind::Unevaluated(..)) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(a)\n-            }\n-            _ => self.fields.infcx.super_combine_consts(self, a, b),\n-        }\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(\n@@ -126,3 +117,9 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n         Ok(())\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Glb<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}, {"sha": "a0453db2cb4994d7dc7182bb4a15f830c5284b7b", "filename": "src/librustc_infer/infer/lub.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flub.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -3,6 +3,7 @@ use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::ObligationCause;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -79,17 +80,7 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        match (a.val, b.val) {\n-            (ty::ConstKind::Unevaluated(..), _) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(b)\n-            }\n-            (_, ty::ConstKind::Unevaluated(..)) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(a)\n-            }\n-            _ => self.fields.infcx.super_combine_consts(self, a, b),\n-        }\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(\n@@ -110,6 +101,12 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     }\n }\n \n+impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}\n+\n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'tcx> {\n         self.fields.infcx"}, {"sha": "709aa6b1bb7ae1de6eca80430dae4918cddf1ad5", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -21,6 +21,7 @@\n //!   thing we relate in chalk are basically domain goals and their\n //!   constituents)\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use rustc_data_structures::fx::FxHashMap;\n@@ -595,14 +596,6 @@ where\n         }\n \n         match (a.val, b.val) {\n-            (ty::ConstKind::Unevaluated(..), _) => {\n-                self.delegate.const_equate(a, b);\n-                Ok(b)\n-            }\n-            (_, ty::ConstKind::Unevaluated(..)) => {\n-                self.delegate.const_equate(a, b);\n-                Ok(a)\n-            }\n             (_, ty::ConstKind::Infer(InferConst::Var(_))) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n@@ -725,6 +718,15 @@ where\n     }\n }\n \n+impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n+where\n+    D: TypeRelatingDelegate<'tcx>,\n+{\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.delegate.const_equate(a, b);\n+    }\n+}\n+\n /// When we encounter a binder like `for<..> fn(..)`, we actually have\n /// to walk the `fn` value to find all the values bound by the `for`\n /// (these are not explicitly present in the ty representation right"}, {"sha": "1ec67ef2efa9d2f129bcd73f99ba98381749e200", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfdd2178e999960358e15b8c36e89c13b4f21c0/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=4cfdd2178e999960358e15b8c36e89c13b4f21c0", "patch": "@@ -1,6 +1,7 @@\n use super::combine::{CombineFields, RelationDir};\n use super::SubregionOrigin;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::Obligation;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n@@ -155,17 +156,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        match (a.val, b.val) {\n-            (ty::ConstKind::Unevaluated(..), _) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(b)\n-            }\n-            (_, ty::ConstKind::Unevaluated(..)) => {\n-                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-                Ok(a)\n-            }\n-            _ => self.fields.infcx.super_combine_consts(self, a, b),\n-        }\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(\n@@ -179,3 +170,9 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         self.fields.higher_ranked_sub(a, b, self.a_is_expected)\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Sub<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}]}