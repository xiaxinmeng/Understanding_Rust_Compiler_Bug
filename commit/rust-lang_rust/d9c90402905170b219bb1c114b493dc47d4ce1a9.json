{"sha": "d9c90402905170b219bb1c114b493dc47d4ce1a9", "node_id": "C_kwDOAAsO6NoAKGQ5YzkwNDAyOTA1MTcwYjIxOWJiMWMxMTRiNDkzZGM0N2Q0Y2UxYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-18T12:26:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-18T12:26:46Z"}, "message": "Rollup merge of #108046 - oli-obk:no_evaluating_fed_queries, r=cjgillot\n\nDon't allow evaluating queries that were fed in a previous compiler run\n\nr? `@cjgillot`\n\nthis code was already unreachable. Also we removed the no_hash + feeding restriction in https://github.com/rust-lang/rust/pull/105220.", "tree": {"sha": "97b82019132d9e70f82c6d9483d08ca3769dd9e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b82019132d9e70f82c6d9483d08ca3769dd9e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c90402905170b219bb1c114b493dc47d4ce1a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8MQGCRBK7hj4Ov3rIwAAdNUIAEbNWO4/X8r0qPrOTiU2oOyS\n3jfMjCLb8jiosPPXL4LcLl2Eo/UmjHjdJXQQD7fD7pkh0Fcmu88DJL1vgo2LieHq\nOWASrG8vt6JnAzwG13Az0p1qFWTxYCfX7XEFV2vo+vi6Z4z6ZjxA/j5xIAfKldx3\nOVg/48tlAhjFqc3dXNQvlgngLNF5mXelAHHZM4PgEulbnnG8R7iiI2aNSy11X74q\nE1W6Y5QTiC+XUVbHEgYDGsnI1yQWjYXz8grHumTVtY1sdILDnLedhrm6eiOTo1lx\n817GcDeXc0pcdl1eI9bx9OxkIKWKQJ9o/3C6MvElPWnFkhS97wmxwyKFnOfJ2hs=\n=/sXy\n-----END PGP SIGNATURE-----\n", "payload": "tree 97b82019132d9e70f82c6d9483d08ca3769dd9e2\nparent 3035ccbcb972a7d762c8e3f64a6b200434677209\nparent b4182d240a7a6414ffeeb255471c4698ac317013\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676723206 +0100\ncommitter GitHub <noreply@github.com> 1676723206 +0100\n\nRollup merge of #108046 - oli-obk:no_evaluating_fed_queries, r=cjgillot\n\nDon't allow evaluating queries that were fed in a previous compiler run\n\nr? `@cjgillot`\n\nthis code was already unreachable. Also we removed the no_hash + feeding restriction in https://github.com/rust-lang/rust/pull/105220.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c90402905170b219bb1c114b493dc47d4ce1a9", "html_url": "https://github.com/rust-lang/rust/commit/d9c90402905170b219bb1c114b493dc47d4ce1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c90402905170b219bb1c114b493dc47d4ce1a9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3035ccbcb972a7d762c8e3f64a6b200434677209", "url": "https://api.github.com/repos/rust-lang/rust/commits/3035ccbcb972a7d762c8e3f64a6b200434677209", "html_url": "https://github.com/rust-lang/rust/commit/3035ccbcb972a7d762c8e3f64a6b200434677209"}, {"sha": "b4182d240a7a6414ffeeb255471c4698ac317013", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4182d240a7a6414ffeeb255471c4698ac317013", "html_url": "https://github.com/rust-lang/rust/commit/b4182d240a7a6414ffeeb255471c4698ac317013"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "53e04bcc132a07214f2d5403a5199598c476571a", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d9c90402905170b219bb1c114b493dc47d4ce1a9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c90402905170b219bb1c114b493dc47d4ce1a9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=d9c90402905170b219bb1c114b493dc47d4ce1a9", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::sync::Lock;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n-use std::borrow::Borrow;\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -364,25 +363,13 @@ where\n             let (result, dep_node_index) =\n                 execute_job::<Q, Qcx>(qcx, key.clone(), dep_node, job.id);\n             if Q::FEEDABLE {\n-                // We may have put a value inside the cache from inside the execution.\n-                // Verify that it has the same hash as what we have now, to ensure consistency.\n+                // We should not compute queries that also got a value via feeding.\n+                // This can't happen, as query feeding adds the very dependencies to the fed query\n+                // as its feeding query had. So if the fed query is red, so is its feeder, which will\n+                // get evaluated first, and re-feed the query.\n                 if let Some((cached_result, _)) = cache.lookup(&key) {\n-                    let hasher = Q::HASH_RESULT.expect(\"feedable forbids no_hash\");\n-\n-                    let old_hash = qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n-                        hasher(&mut hcx, cached_result.borrow())\n-                    });\n-                    let new_hash = qcx\n-                        .dep_context()\n-                        .with_stable_hashing_context(|mut hcx| hasher(&mut hcx, &result));\n-                    debug_assert_eq!(\n-                        old_hash,\n-                        new_hash,\n-                        \"Computed query value for {:?}({:?}) is inconsistent with fed value,\\ncomputed={:#?}\\nfed={:#?}\",\n-                        Q::DEP_KIND,\n-                        key,\n-                        result,\n-                        cached_result,\n+                    panic!(\n+                        \"fed query later has its value computed. The already cached value: {cached_result:?}\"\n                     );\n                 }\n             }"}]}