{"sha": "83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTMzZmJiZWFlOWNiZWM4YmVjODU1ZTkzMzhiN2NjZDA4YmQzYTA=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-09T16:23:30Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-09T16:23:30Z"}, "message": "Vscode wasn't running the linter automatically so ran `npm run fix` - wonder if it's related to `tslint` being deprecated.", "tree": {"sha": "7378bc3b85599264027eaab28ff017ed933fb984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7378bc3b85599264027eaab28ff017ed933fb984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "html_url": "https://github.com/rust-lang/rust/commit/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529b227d42951feabf64c8c964b00e726dd92d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/529b227d42951feabf64c8c964b00e726dd92d46", "html_url": "https://github.com/rust-lang/rust/commit/529b227d42951feabf64c8c964b00e726dd92d46"}], "stats": {"total": 216, "additions": 110, "deletions": 106}, "files": [{"sha": "5c5be34db8640deb01f4af1e092835c5c9f9d322", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -550,4 +550,4 @@\n             }\n         ]\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4cedbea46615576784d19bb8b8ec5a75840ebad8", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -46,14 +46,14 @@ export class Config {\n \n     public userConfigChanged() {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n-        \n+\n         Server.highlighter.removeHighlights();\n \n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n             if (this.highlightingOn) {\n                 scopes.load();\n-                scopesMapper.load();    \n+                scopesMapper.load();\n             }\n         }\n \n@@ -63,7 +63,6 @@ export class Config {\n             ) as boolean;\n         }\n \n-\n         if (config.has('enableEnhancedTyping')) {\n             this.enableEnhancedTyping = config.get(\n                 'enableEnhancedTyping'"}, {"sha": "c06928d122ba0c0129c10a551d529258ad645ed2", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -91,11 +91,11 @@ export function activate(context: vscode.ExtensionContext) {\n     const allNotifications: Iterable<\n         [string, lc.GenericNotificationHandler]\n     > = [\n-            [\n-                'rust-analyzer/publishDecorations',\n-                notifications.publishDecorations.handle\n-            ]\n-        ];\n+        [\n+            'rust-analyzer/publishDecorations',\n+            notifications.publishDecorations.handle\n+        ]\n+    ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode"}, {"sha": "14199dbeae698717f148beaf78ad4ea9dba7cc30", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 29, "deletions": 52, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -25,35 +25,15 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n-\n-function createDecorationFromTextmate(themeStyle: scopes.TextMateRuleSettings): vscode.TextEditorDecorationType {\n-    const options: vscode.DecorationRenderOptions = {};\n-    options.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n-    if (themeStyle.foreground) {\n-        options.color = themeStyle.foreground;\n-    }\n-    if (themeStyle.background) {\n-        options.backgroundColor = themeStyle.background;\n-    }\n-    if (themeStyle.fontStyle) {\n-        const parts: string[] = themeStyle.fontStyle.split(' ');\n-        parts.forEach((part) => {\n-            switch (part) {\n-                case 'italic':\n-                    options.fontStyle = 'italic';\n-                    break;\n-                case 'bold':\n-                    options.fontWeight = 'bold';\n-                    break;\n-                case 'underline':\n-                    options.textDecoration = 'underline';\n-                    break;\n-                default:\n-                    break;\n-            }\n-        })\n-    }\n-    return vscode.window.createTextEditorDecorationType(options);\n+function createDecorationFromTextmate(\n+    themeStyle: scopes.TextMateRuleSettings\n+): vscode.TextEditorDecorationType {\n+    const decorationOptions: vscode.DecorationRenderOptions = {};\n+    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n+    decorationOptions.color = themeStyle.foreground;\n+    decorationOptions.backgroundColor = themeStyle.background;\n+    decorationOptions.fontStyle = themeStyle.fontStyle;\n+    return vscode.window.createTextEditorDecorationType(decorationOptions);\n }\n \n export class Highlighter {\n@@ -65,14 +45,12 @@ export class Highlighter {\n             tag: string,\n             textDecoration?: string\n         ): [string, vscode.TextEditorDecorationType] => {\n-\n             const rule = scopesMapper.toRule(tag, scopes.find);\n \n             if (rule) {\n                 const decor = createDecorationFromTextmate(rule);\n                 return [tag, decor];\n-            }\n-            else {\n+            } else {\n                 const fallBackTag = 'ralsp.' + tag;\n                 // console.log(' ');\n                 // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n@@ -91,25 +69,25 @@ export class Highlighter {\n         const decorations: Iterable<\n             [string, vscode.TextEditorDecorationType]\n         > = [\n-                decoration('comment'),\n-                decoration('string'),\n-                decoration('keyword'),\n-                decoration('keyword.control'),\n-                decoration('keyword.unsafe'),\n-                decoration('function'),\n-                decoration('parameter'),\n-                decoration('constant'),\n-                decoration('type'),\n-                decoration('builtin'),\n-                decoration('text'),\n-                decoration('attribute'),\n-                decoration('literal'),\n-                decoration('macro'),\n-                decoration('variable'),\n-                decoration('variable.mut', 'underline'),\n-                decoration('field'),\n-                decoration('module')\n-            ];\n+            decoration('comment'),\n+            decoration('string'),\n+            decoration('keyword'),\n+            decoration('keyword.control'),\n+            decoration('keyword.unsafe'),\n+            decoration('function'),\n+            decoration('parameter'),\n+            decoration('constant'),\n+            decoration('type'),\n+            decoration('builtin'),\n+            decoration('text'),\n+            decoration('attribute'),\n+            decoration('literal'),\n+            decoration('macro'),\n+            decoration('variable'),\n+            decoration('variable.mut', 'underline'),\n+            decoration('field'),\n+            decoration('module')\n+        ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);\n     }\n@@ -138,7 +116,6 @@ export class Highlighter {\n         // Note: decoration objects need to be kept around so we can dispose them\n         // if the user disables syntax highlighting\n \n-\n         if (this.decorations == null) {\n             this.decorations = Highlighter.initDecorations();\n         }"}, {"sha": "98099872cc7ff0b68c49d8b4cb63bd803642aac2", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -2,8 +2,6 @@ import * as fs from 'fs';\n import * as path from 'path';\n import * as vscode from 'vscode';\n \n-\n-\n export interface TextMateRule {\n     scope: string | string[];\n     settings: TextMateRuleSettings;\n@@ -27,7 +25,9 @@ export function load() {\n     // Remove any previous theme\n     rules.clear();\n     // Find out current color theme\n-    const themeName = vscode.workspace.getConfiguration('workbench').get('colorTheme');\n+    const themeName = vscode.workspace\n+        .getConfiguration('workbench')\n+        .get('colorTheme');\n \n     if (typeof themeName !== 'string') {\n         // console.warn('workbench.colorTheme is', themeName)\n@@ -42,38 +42,43 @@ export function load() {\n }\n \n function filterThemeExtensions(extension: vscode.Extension<any>): boolean {\n-    return extension.extensionKind === vscode.ExtensionKind.UI &&\n+    return (\n+        extension.extensionKind === vscode.ExtensionKind.UI &&\n         extension.packageJSON.contributes &&\n-        extension.packageJSON.contributes.themes;\n+        extension.packageJSON.contributes.themes\n+    );\n }\n \n-\n-\n // Find current theme on disk\n function loadThemeNamed(themeName: string) {\n-\n     const themePaths = vscode.extensions.all\n         .filter(filterThemeExtensions)\n         .reduce((list, extension) => {\n             return extension.packageJSON.contributes.themes\n-                .filter((element: any) => (element.id || element.label) === themeName)\n-                .map((element: any) => path.join(extension.extensionPath, element.path))\n-                .concat(list)\n+                .filter(\n+                    (element: any) =>\n+                        (element.id || element.label) === themeName\n+                )\n+                .map((element: any) =>\n+                    path.join(extension.extensionPath, element.path)\n+                )\n+                .concat(list);\n         }, Array<string>());\n \n-\n     themePaths.forEach(loadThemeFile);\n \n-    const tokenColorCustomizations: [any] = [vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations')]\n+    const tokenColorCustomizations: [any] = [\n+        vscode.workspace\n+            .getConfiguration('editor')\n+            .get('tokenColorCustomizations')\n+    ];\n \n     tokenColorCustomizations\n         .filter(custom => custom && custom.textMateRules)\n         .map(custom => custom.textMateRules)\n         .forEach(loadColors);\n-\n }\n \n-\n function loadThemeFile(themePath: string) {\n     const themeContent = [themePath]\n         .filter(isFile)\n@@ -92,18 +97,26 @@ function loadThemeFile(themePath: string) {\n         .forEach(loadThemeFile);\n }\n \n-function mergeRuleSettings(defaultSetting: TextMateRuleSettings | undefined, override: TextMateRuleSettings): TextMateRuleSettings {\n-    if (defaultSetting === undefined) { return override; }\n+function mergeRuleSettings(\n+    defaultSetting: TextMateRuleSettings | undefined,\n+    override: TextMateRuleSettings\n+): TextMateRuleSettings {\n+    if (defaultSetting === undefined) {\n+        return override;\n+    }\n     const mergedRule = defaultSetting;\n \n     mergedRule.background = override.background || defaultSetting.background;\n     mergedRule.foreground = override.foreground || defaultSetting.foreground;\n     mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n \n-    return mergedRule\n+    return mergedRule;\n }\n \n-function updateRules(scope: string, updatedSettings: TextMateRuleSettings): void {\n+function updateRules(\n+    scope: string,\n+    updatedSettings: TextMateRuleSettings\n+): void {\n     [rules.get(scope)]\n         .map(settings => mergeRuleSettings(settings, updatedSettings))\n         .forEach(settings => rules.set(scope, settings));\n@@ -113,11 +126,10 @@ function loadColors(textMateRules: TextMateRule[]): void {\n     textMateRules.forEach(rule => {\n         if (typeof rule.scope === 'string') {\n             updateRules(rule.scope, rule.settings);\n-        }\n-        else if (rule.scope instanceof Array) {\n+        } else if (rule.scope instanceof Array) {\n             rule.scope.forEach(scope => updateRules(scope, rule.settings));\n         }\n-    })\n+    });\n }\n \n function isFile(filePath: string): boolean {\n@@ -128,7 +140,7 @@ function readFileText(filePath: string): string {\n     return fs.readFileSync(filePath, 'utf8');\n }\n \n-// Might need to replace with JSONC if a theme contains comments. \n+// Might need to replace with JSONC if a theme contains comments.\n function parseJSON(content: string): any {\n     return JSON.parse(content);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "85c791ff50908364aaad77bace00aba616fe8545", "filename": "editors/code/src/scopes_mapper.ts", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=83a33fbbeae9cbec8bec855e9338b7ccd08bd3a0", "patch": "@@ -1,17 +1,25 @@\n import * as vscode from 'vscode';\n import { TextMateRuleSettings } from './scopes';\n \n-\n-\n let mappings = new Map<string, string[]>();\n \n-\n const defaultMapping = new Map<string, string[]>([\n-    ['comment', ['comment', 'comment.block', 'comment.line', 'comment.block.documentation']],\n+    [\n+        'comment',\n+        [\n+            'comment',\n+            'comment.block',\n+            'comment.line',\n+            'comment.block.documentation'\n+        ]\n+    ],\n     ['string', ['string']],\n     ['keyword', ['keyword']],\n     ['keyword.control', ['keyword.control', 'keyword', 'keyword.other']],\n-    ['keyword.unsafe', ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword']],\n+    [\n+        'keyword.unsafe',\n+        ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword']\n+    ],\n     ['function', ['entity.name.function']],\n     ['parameter', ['variable.parameter']],\n     ['constant', ['constant', 'variable']],\n@@ -23,21 +31,32 @@ const defaultMapping = new Map<string, string[]>([\n     ['macro', ['support.other']],\n     ['variable', ['variable']],\n     ['variable.mut', ['variable', 'storage.modifier']],\n-    ['field', ['variable.object.property', 'meta.field.declaration', 'meta.definition.property', 'variable.other',]],\n+    [\n+        'field',\n+        [\n+            'variable.object.property',\n+            'meta.field.declaration',\n+            'meta.definition.property',\n+            'variable.other'\n+        ]\n+    ],\n     ['module', ['entity.name.section', 'entity.other']]\n-]\n-);\n+]);\n \n-// Temporary exported for debugging for now. \n+// Temporary exported for debugging for now.\n export function find(scope: string): string[] {\n     return mappings.get(scope) || [];\n }\n \n-export function toRule(scope: string, intoRule: (scope: string) => TextMateRuleSettings | undefined): TextMateRuleSettings | undefined {\n-    return find(scope).map(intoRule).filter(rule => rule !== undefined)[0];\n+export function toRule(\n+    scope: string,\n+    intoRule: (scope: string) => TextMateRuleSettings | undefined\n+): TextMateRuleSettings | undefined {\n+    return find(scope)\n+        .map(intoRule)\n+        .filter(rule => rule !== undefined)[0];\n }\n \n-\n function isString(value: any): value is string {\n     return typeof value === 'string';\n }\n@@ -46,18 +65,15 @@ function isArrayOfString(value: any): value is string[] {\n     return Array.isArray(value) && value.every(item => isString(item));\n }\n \n-\n export function load() {\n-    const rawConfig: { [key: string]: any } = vscode.workspace\n-        .getConfiguration('rust-analyzer')\n-        .get('scopeMappings')\n-        || {};\n+    const rawConfig: { [key: string]: any } =\n+        vscode.workspace\n+            .getConfiguration('rust-analyzer')\n+            .get('scopeMappings') || {};\n \n-    mappings = Object\n-        .entries(rawConfig)\n+    mappings = Object.entries(rawConfig)\n         .filter(([_, value]) => isString(value) || isArrayOfString(value))\n         .reduce((list, [key, value]: [string, string | string[]]) => {\n             return list.set(key, isString(value) ? [value] : value);\n         }, defaultMapping);\n-\n-}\n\\ No newline at end of file\n+}"}]}