{"sha": "f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "node_id": "C_kwDOAAsO6NoAKGY4ZGUyZjU2ZTg2MjhlYzgzMGQyYmZkNzdhMzBmNjgxZjI3YmI0NmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-13T17:15:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-13T17:15:15Z"}, "message": "Rollup merge of #91847 - BoxyUwU:generic_arg_infer_fixme, r=lcnr\n\nFix FIXME for `generic_arg_infer` in `create_substs_for_ast_path`\n\nFixes a FIXME, does some general refactoring of this fn, and also fixes a bug where we would use a const params defaults instead of an inference var ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=19456f65ea5dc3fcaa9b696f842ab380))\n(lot of stuff in one PR but it was all so close together...)\n\nr? `@lcnr`\n\nFixes #91614", "tree": {"sha": "590a05b8c7734423a48c6a33fdbd84696ca422e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590a05b8c7734423a48c6a33fdbd84696ca422e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJht3+jCRBK7hj4Ov3rIwAAkqcIABHv0xi7nw0zDyXFtmqmnnpz\nYDXVP/K6O+uCWlbiVBZuztenRlkgZBBP6J29uPp6aLgp6fdnZ8ddyQvR24UvqkBx\nuaM9tDWfQNRmDq62mRyQCLlkbIAHuxv6sl1du0otua+VPXNoaI7zyP6qedx/LYqx\nrrJqI2iC+MKRoQrp0lJQVOwTgU+o0aS1MJrzG72inPoomrjMbUyoOqryK/Da4a47\n/Znrn+n41N9IqconYjA3EGDMhvxaCFRt/gthWr+U8qaBdP8+DrAU/cwKoEdQSuFL\n/mG3CYeRdi8TMLpQnV3ag0dU2y09HegZOX5zlLlThPKSdI2lHqRqLp3FgLRf/D0=\n=j0zW\n-----END PGP SIGNATURE-----\n", "payload": "tree 590a05b8c7734423a48c6a33fdbd84696ca422e3\nparent dca8ddeade657e00236b2d0de2561f2fc175d6ae\nparent 6c795951346b846964fb031df07fba2d2cd8c7d0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639415715 +0100\ncommitter GitHub <noreply@github.com> 1639415715 +0100\n\nRollup merge of #91847 - BoxyUwU:generic_arg_infer_fixme, r=lcnr\n\nFix FIXME for `generic_arg_infer` in `create_substs_for_ast_path`\n\nFixes a FIXME, does some general refactoring of this fn, and also fixes a bug where we would use a const params defaults instead of an inference var ([playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=19456f65ea5dc3fcaa9b696f842ab380))\n(lot of stuff in one PR but it was all so close together...)\n\nr? `@lcnr`\n\nFixes #91614\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "html_url": "https://github.com/rust-lang/rust/commit/f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca8ddeade657e00236b2d0de2561f2fc175d6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca8ddeade657e00236b2d0de2561f2fc175d6ae", "html_url": "https://github.com/rust-lang/rust/commit/dca8ddeade657e00236b2d0de2561f2fc175d6ae"}, {"sha": "6c795951346b846964fb031df07fba2d2cd8c7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c795951346b846964fb031df07fba2d2cd8c7d0", "html_url": "https://github.com/rust-lang/rust/commit/6c795951346b846964fb031df07fba2d2cd8c7d0"}], "stats": {"total": 129, "additions": 74, "deletions": 55}, "files": [{"sha": "aad8dd2119f2fa933430755c8988c7a727bb7629", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 33, "deletions": 55, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "patch": "@@ -414,34 +414,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 arg: &GenericArg<'_>,\n             ) -> subst::GenericArg<'tcx> {\n                 let tcx = self.astconv.tcx();\n+\n+                let mut handle_ty_args = |has_default, ty: &hir::Ty<'_>| {\n+                    if has_default {\n+                        tcx.check_optional_stability(\n+                            param.def_id,\n+                            Some(arg.id()),\n+                            arg.span(),\n+                            None,\n+                            |_, _| {\n+                                // Default generic parameters may not be marked\n+                                // with stability attributes, i.e. when the\n+                                // default parameter was defined at the same time\n+                                // as the rest of the type. As such, we ignore missing\n+                                // stability attributes.\n+                            },\n+                        )\n+                    }\n+                    if let (hir::TyKind::Infer, false) = (&ty.kind, self.astconv.allow_ty_infer()) {\n+                        self.inferred_params.push(ty.span);\n+                        tcx.ty_error().into()\n+                    } else {\n+                        self.astconv.ast_ty_to_ty(ty).into()\n+                    }\n+                };\n+\n                 match (&param.kind, arg) {\n                     (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n                         self.astconv.ast_region_to_region(lt, Some(param)).into()\n                     }\n                     (&GenericParamDefKind::Type { has_default, .. }, GenericArg::Type(ty)) => {\n-                        if has_default {\n-                            tcx.check_optional_stability(\n-                                param.def_id,\n-                                Some(arg.id()),\n-                                arg.span(),\n-                                None,\n-                                |_, _| {\n-                                    // Default generic parameters may not be marked\n-                                    // with stability attributes, i.e. when the\n-                                    // default parameter was defined at the same time\n-                                    // as the rest of the type. As such, we ignore missing\n-                                    // stability attributes.\n-                                },\n-                            )\n-                        }\n-                        if let (hir::TyKind::Infer, false) =\n-                            (&ty.kind, self.astconv.allow_ty_infer())\n-                        {\n-                            self.inferred_params.push(ty.span);\n-                            tcx.ty_error().into()\n-                        } else {\n-                            self.astconv.ast_ty_to_ty(ty).into()\n-                        }\n+                        handle_ty_args(has_default, ty)\n+                    }\n+                    (&GenericParamDefKind::Type { has_default, .. }, GenericArg::Infer(inf)) => {\n+                        handle_ty_args(has_default, &inf.to_ty())\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         ty::Const::from_opt_const_arg_anon_const(\n@@ -453,41 +459,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         )\n                         .into()\n                     }\n-                    (&GenericParamDefKind::Const { has_default }, hir::GenericArg::Infer(inf)) => {\n-                        if has_default {\n-                            tcx.const_param_default(param.def_id).into()\n-                        } else if self.astconv.allow_ty_infer() {\n-                            // FIXME(const_generics): Actually infer parameter here?\n-                            todo!()\n-                        } else {\n-                            self.inferred_params.push(inf.span);\n-                            tcx.ty_error().into()\n-                        }\n-                    }\n-                    (\n-                        &GenericParamDefKind::Type { has_default, .. },\n-                        hir::GenericArg::Infer(inf),\n-                    ) => {\n-                        if has_default {\n-                            tcx.check_optional_stability(\n-                                param.def_id,\n-                                Some(arg.id()),\n-                                arg.span(),\n-                                None,\n-                                |_, _| {\n-                                    // Default generic parameters may not be marked\n-                                    // with stability attributes, i.e. when the\n-                                    // default parameter was defined at the same time\n-                                    // as the rest of the type. As such, we ignore missing\n-                                    // stability attributes.\n-                                },\n-                            );\n-                        }\n+                    (&GenericParamDefKind::Const { .. }, hir::GenericArg::Infer(inf)) => {\n+                        let ty = tcx.at(self.span).type_of(param.def_id);\n                         if self.astconv.allow_ty_infer() {\n-                            self.astconv.ast_ty_to_ty(&inf.to_ty()).into()\n+                            self.astconv.ct_infer(ty, Some(param), inf.span).into()\n                         } else {\n                             self.inferred_params.push(inf.span);\n-                            tcx.ty_error().into()\n+                            tcx.const_error(ty).into()\n                         }\n                     }\n                     _ => unreachable!(),"}, {"sha": "251160a0f5f290a50a85e97e5869442ce0b04bc4", "filename": "src/test/ui/const-generics/generic_arg_infer/dont-use-defaults.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fdont-use-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fdont-use-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fdont-use-defaults.rs?ref=f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+#![feature(generic_arg_infer)]\n+\n+// test that we dont use defaults to aide in type inference\n+\n+struct Foo<const N: usize = 2>;\n+impl<const N: usize> Foo<N> {\n+    fn make_arr() -> [(); N] {\n+        [(); N]\n+    }\n+}\n+\n+fn main() {\n+    let [(), (), ()] = Foo::<_>::make_arr();\n+}"}, {"sha": "413cc1539248a05e390bb2b578ca662e13ee1785", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs?ref=f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "patch": "@@ -0,0 +1,8 @@\n+#![feature(portable_simd)]\n+#![feature(generic_arg_infer)]\n+use std::simd::Mask;\n+\n+fn main() {\n+    let y = Mask::<_, _>::splat(false);\n+    //~^ error: type annotations needed for `Mask<_, {_: usize}>`\n+}"}, {"sha": "71a5ff79280fdd0f8196590ad8ec5f0c78c430c6", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8de2f56e8628ec830d2bfd77a30f681f27bb46a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=f8de2f56e8628ec830d2bfd77a30f681f27bb46a", "patch": "@@ -0,0 +1,18 @@\n+error[E0283]: type annotations needed for `Mask<_, {_: usize}>`\n+  --> $DIR/issue-91614.rs:6:13\n+   |\n+LL |     let y = Mask::<_, _>::splat(false);\n+   |         -   ^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+   |         |\n+   |         consider giving `y` the explicit type `Mask<_, LANES>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `_: MaskElement`\n+note: required by a bound in `Mask::<T, LANES>::splat`\n+  --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/masks.rs:LL:COL\n+   |\n+LL |     T: MaskElement,\n+   |        ^^^^^^^^^^^ required by this bound in `Mask::<T, LANES>::splat`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}