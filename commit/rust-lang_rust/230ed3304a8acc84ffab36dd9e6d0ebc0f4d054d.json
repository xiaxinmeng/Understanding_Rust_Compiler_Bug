{"sha": "230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMGVkMzMwNGE4YWNjODRmZmFiMzZkZDllNmQwZWJjMGY0ZDA1NGQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T08:51:35Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T08:51:35Z"}, "message": "Better releaseId naming", "tree": {"sha": "b1bde33a7189ec19422317e6972436bbdee53870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bde33a7189ec19422317e6972436bbdee53870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "html_url": "https://github.com/rust-lang/rust/commit/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3e997ddffbcfb6c75fce47c803c7abd50ef21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3e997ddffbcfb6c75fce47c803c7abd50ef21c", "html_url": "https://github.com/rust-lang/rust/commit/be3e997ddffbcfb6c75fce47c803c7abd50ef21c"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "6ed8b61462431aa1804e55005f44ba43c61223c8", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "patch": "@@ -157,7 +157,7 @@ async function bootstrap(config: Config, state: PersistentState): Promise<string\n     await fs.mkdir(config.globalStoragePath, { recursive: true });\n \n     if (config.package.releaseTag != NIGHTLY_TAG) {\n-        await state.removeReleaseId();\n+        await state.removeNightlyReleaseId();\n     }\n     await bootstrapExtension(config, state);\n     const path = await bootstrapServer(config, state);\n@@ -184,7 +184,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         const lastCheck = state.lastCheck;\n \n         const anHour = 60 * 60 * 1000;\n-        const shouldCheckForNewNightly = state.releaseId === undefined || (now - (lastCheck ?? 0)) > anHour;\n+        const shouldCheckForNewNightly = state.nightlyReleaseId === undefined || (now - (lastCheck ?? 0)) > anHour;\n \n         if (!shouldCheckForNewNightly) return;\n     }\n@@ -193,19 +193,18 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         return await fetchRelease(\"nightly\", state.githubToken, config.httpProxy);\n     }).catch(async (e) => {\n         log.error(e);\n-        if (state.releaseId === undefined) { // Show error only for the initial download\n+        if (state.nightlyReleaseId === undefined) { // Show error only for the initial download\n             await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly: ${e}`);\n         }\n         return;\n     });\n     if (release === undefined) {\n-        if (state.releaseId === undefined) { // Show error only for the initial download\n+        if (state.nightlyReleaseId === undefined) { // Show error only for the initial download\n             await vscode.window.showErrorMessage(\"Failed to download rust-analyzer nightly: empty release contents returned\");\n         }\n         return;\n     }\n-    // If currently used extension is nightly and its release id matches the downloaded release id, we're already on the latest nightly version\n-    if (config.package.releaseTag === NIGHTLY_TAG && release.id === state.releaseId) return;\n+    if (config.package.releaseTag === NIGHTLY_TAG && release.id === state.nightlyReleaseId) return;\n \n     const userResponse = await vscode.window.showInformationMessage(\n         \"New version of rust-analyzer (nightly) is available (requires reload).\",\n@@ -230,7 +229,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n     await fs.unlink(dest);\n \n-    await state.updateReleaseId(release.id);\n+    await state.updateNightlyReleaseId(release.id);\n     await state.updateLastCheck(now);\n     await vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n }"}, {"sha": "c02eb2ca30de50ef5a040bb6f9f1fb03772fe3ee", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=230ed3304a8acc84ffab36dd9e6d0ebc0f4d054d", "patch": "@@ -3,8 +3,8 @@ import { log } from './util';\n \n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n-        const { lastCheck, releaseId, serverVersion } = this;\n-        log.info(\"PersistentState:\", { lastCheck, releaseId, serverVersion });\n+        const { lastCheck, nightlyReleaseId, serverVersion } = this;\n+        log.info(\"PersistentState:\", { lastCheck, nightlyReleaseId, serverVersion });\n     }\n \n     /**\n@@ -21,13 +21,13 @@ export class PersistentState {\n      * Release id of the *nightly* extension.\n      * Used to check if we should update.\n      */\n-    get releaseId(): number | undefined {\n+    get nightlyReleaseId(): number | undefined {\n         return this.globalState.get(\"releaseId\");\n     }\n-    async updateReleaseId(value: number) {\n+    async updateNightlyReleaseId(value: number) {\n         await this.globalState.update(\"releaseId\", value);\n     }\n-    async removeReleaseId() {\n+    async removeNightlyReleaseId() {\n         await this.globalState.update(\"releaseId\", undefined);\n     }\n "}]}