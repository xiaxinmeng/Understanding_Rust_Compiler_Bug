{"sha": "f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "node_id": "C_kwDOAAsO6NoAKGYxYTAzYjZlNGFlNzJmNDJmNmU2ZTI4MDdhM2Q2M2Y3ZjUzYjU5ZmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-08T12:38:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-08T12:38:19Z"}, "message": "Rollup merge of #102785 - fee1-dead-contrib:rm_autoimpl_defid, r=compiler-errors\n\nRemove `DefId` from some `SelectionCandidate` variants\n\nThey are both from `obligation.predicate.def_id()`, which do not need to be on the `SelectionCandidate`.\n\ncc ````@lcnr```` ````@compiler-errors````", "tree": {"sha": "3a808fb984f850cfd285975a810953e1723343f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a808fb984f850cfd285975a810953e1723343f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQW87CRBK7hj4Ov3rIwAAmZAIAKE5J/Mu2GOCgiZ9Ovxts/AM\ntIIhMUUlJabldsh2MYmUX30iZCIyQQn2u25hcMDUiG9LQwqc1ur0gb4x6AL3bsD3\n6OmFgkVWJTytmT4/TcVfOMyqWfEz5IP//ysycM54ZsGzXeeBCeigwUbmskVxIHas\nwOoNnBZ16Mk278GDDKS99yR06LM7/c5yrAu9ZaKYiaBu18UX2aK2H+U9Yufmv8jk\nAKWv8FLpU7P870ZiMheowmTaretQ2yGC7Xw+NIPOnQh10g5+D6S1djobEayyRLkx\nIVp68my7phFXPRk6q4CP8+ZLSiwgbPSXjQqSAnrMCGGYAYu36X6FiIpu7d5w1MU=\n=8EXX\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a808fb984f850cfd285975a810953e1723343f9\nparent 2f2664923be3cb47b88dfa69054f20b87c2eb1e1\nparent e8a2aee50d4a18a65ae39968806707d05ecf1663\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665232699 +0200\ncommitter GitHub <noreply@github.com> 1665232699 +0200\n\nRollup merge of #102785 - fee1-dead-contrib:rm_autoimpl_defid, r=compiler-errors\n\nRemove `DefId` from some `SelectionCandidate` variants\n\nThey are both from `obligation.predicate.def_id()`, which do not need to be on the `SelectionCandidate`.\n\ncc ````@lcnr```` ````@compiler-errors````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "html_url": "https://github.com/rust-lang/rust/commit/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2664923be3cb47b88dfa69054f20b87c2eb1e1", "html_url": "https://github.com/rust-lang/rust/commit/2f2664923be3cb47b88dfa69054f20b87c2eb1e1"}, {"sha": "e8a2aee50d4a18a65ae39968806707d05ecf1663", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a2aee50d4a18a65ae39968806707d05ecf1663", "html_url": "https://github.com/rust-lang/rust/commit/e8a2aee50d4a18a65ae39968806707d05ecf1663"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "11758599cffa1ab98181eb2c4cbc6bda46d307eb", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "patch": "@@ -115,7 +115,7 @@ pub enum SelectionCandidate<'tcx> {\n \n     ParamCandidate(ty::PolyTraitPredicate<'tcx>),\n     ImplCandidate(DefId),\n-    AutoImplCandidate(DefId),\n+    AutoImplCandidate,\n \n     /// This is a trait matching with a projected type as `Self`, and we found\n     /// an applicable bound in the trait definition. The `usize` is an index\n@@ -143,7 +143,7 @@ pub enum SelectionCandidate<'tcx> {\n     /// Builtin implementation of `Pointee`.\n     PointeeCandidate,\n \n-    TraitAliasCandidate(DefId),\n+    TraitAliasCandidate,\n \n     /// Matching `dyn Trait` with a supertrait of `Trait`. The index is the\n     /// position in the iterator returned by"}, {"sha": "f6c0930eb5f3762c3094ddda026419f871121ca3", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "patch": "@@ -625,7 +625,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                _ => candidates.vec.push(AutoImplCandidate(def_id)),\n+                _ => candidates.vec.push(AutoImplCandidate),\n             }\n         }\n     }\n@@ -914,7 +914,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let def_id = obligation.predicate.def_id();\n \n         if self.tcx().is_trait_alias(def_id) {\n-            candidates.vec.push(TraitAliasCandidate(def_id));\n+            candidates.vec.push(TraitAliasCandidate);\n         }\n     }\n "}, {"sha": "98c99e9ad4fb6fe6773e56ade4dbb8cf17835abe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "patch": "@@ -64,8 +64,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::UserDefined(self.confirm_impl_candidate(obligation, impl_def_id))\n             }\n \n-            AutoImplCandidate(trait_def_id) => {\n-                let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n+            AutoImplCandidate => {\n+                let data = self.confirm_auto_impl_candidate(obligation);\n                 ImplSource::AutoImpl(data)\n             }\n \n@@ -100,8 +100,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             PointeeCandidate => ImplSource::Pointee(ImplSourcePointeeData),\n \n-            TraitAliasCandidate(alias_def_id) => {\n-                let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n+            TraitAliasCandidate => {\n+                let data = self.confirm_trait_alias_candidate(obligation);\n                 ImplSource::TraitAlias(data)\n             }\n \n@@ -317,13 +317,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_auto_impl_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        trait_def_id: DefId,\n     ) -> ImplSourceAutoImplData<PredicateObligation<'tcx>> {\n-        debug!(?obligation, ?trait_def_id, \"confirm_auto_impl_candidate\");\n+        debug!(?obligation, \"confirm_auto_impl_candidate\");\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.self_ty());\n         let types = self.constituent_types_for_ty(self_ty);\n-        self.vtable_auto_impl(obligation, trait_def_id, types)\n+        self.vtable_auto_impl(obligation, obligation.predicate.def_id(), types)\n     }\n \n     /// See `confirm_auto_impl_candidate`.\n@@ -658,10 +657,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_trait_alias_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        alias_def_id: DefId,\n     ) -> ImplSourceTraitAliasData<'tcx, PredicateObligation<'tcx>> {\n-        debug!(?obligation, ?alias_def_id, \"confirm_trait_alias_candidate\");\n+        debug!(?obligation, \"confirm_trait_alias_candidate\");\n \n+        let alias_def_id = obligation.predicate.def_id();\n         let predicate = self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);\n         let trait_ref = predicate.trait_ref;\n         let trait_def_id = trait_ref.def_id;"}, {"sha": "3799c9a491d1ab0da21a1b7d68f3f95732a56214", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f1a03b6e4ae72f42f6e6e2807a3d63f7f53b59fb", "patch": "@@ -1150,7 +1150,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // const projection\n                     ProjectionCandidate(_, ty::BoundConstness::ConstIfConst) => {}\n                     // auto trait impl\n-                    AutoImplCandidate(..) => {}\n+                    AutoImplCandidate => {}\n                     // generator, this will raise error in other places\n                     // or ignore error with const_async_blocks feature\n                     GeneratorCandidate => {}\n@@ -1568,7 +1568,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n         match (&other.candidate, &victim.candidate) {\n-            (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {\n+            (_, AutoImplCandidate) | (AutoImplCandidate, _) => {\n                 bug!(\n                     \"default implementations shouldn't be recorded \\\n                     when there are other valid candidates\"\n@@ -1638,7 +1638,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..)\n+                | TraitAliasCandidate\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(..),\n             ) => !is_global(cand),\n@@ -1656,7 +1656,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ParamCandidate(ref cand),\n             ) => {\n                 // Prefer these to a global where-clause bound\n@@ -1686,7 +1686,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n             ) => true,\n \n             (\n@@ -1698,7 +1698,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ObjectCandidate(_) | ProjectionCandidate(..),\n             ) => false,\n \n@@ -1779,7 +1779,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n@@ -1788,7 +1788,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { has_nested: true }\n-                | TraitAliasCandidate(..),\n+                | TraitAliasCandidate,\n             ) => false,\n         }\n     }"}]}