{"sha": "8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "node_id": "C_kwDOAAsO6NoAKDhhY2M0ZDJmMWUyNTVlMGU5N2U0OGI3YTI4NWE3ZDZkYjRhMDNiZDY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T15:17:38Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:54:55Z"}, "message": "Move `VecResizeToZero` into `Methods` lint pass", "tree": {"sha": "fe4841372a44097c8df7a64e8ca63e2a3b120ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe4841372a44097c8df7a64e8ca63e2a3b120ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "html_url": "https://github.com/rust-lang/rust/commit/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d4a135ea2bc460033c75d4a56d21ae977b9ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d4a135ea2bc460033c75d4a56d21ae977b9ae2", "html_url": "https://github.com/rust-lang/rust/commit/d8d4a135ea2bc460033c75d4a56d21ae977b9ae2"}], "stats": {"total": 166, "additions": 88, "deletions": 78}, "files": [{"sha": "4128096b43ae04eb6b0e883a03e21cb32aa0a628", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -217,6 +217,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::UNNECESSARY_TO_OWNED),\n     LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n     LintId::of(methods::USELESS_ASREF),\n+    LintId::of(methods::VEC_RESIZE_TO_ZERO),\n     LintId::of(methods::WRONG_SELF_CONVENTION),\n     LintId::of(methods::ZST_OFFSET),\n     LintId::of(minmax::MIN_MAX),\n@@ -344,7 +345,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(useless_conversion::USELESS_CONVERSION),\n     LintId::of(vec::USELESS_VEC),\n     LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n     LintId::of(write::POSITIONAL_NAMED_FORMAT_PARAMETERS),\n     LintId::of(write::PRINTLN_EMPTY_STRING),\n     LintId::of(write::PRINT_LITERAL),"}, {"sha": "bb94037ec2e7949ba52a2b25ba0bd89ae6794e89", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -43,6 +43,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n     LintId::of(methods::UNIT_HASH),\n+    LintId::of(methods::VEC_RESIZE_TO_ZERO),\n     LintId::of(methods::ZST_OFFSET),\n     LintId::of(minmax::MIN_MAX),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n@@ -74,5 +75,4 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n     LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n     LintId::of(unwrap::PANICKING_UNWRAP),\n-    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n ])"}, {"sha": "1b275516dfced231c9954c7ec702c43be7a3136e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -369,6 +369,7 @@ store.register_lints(&[\n     methods::UNWRAP_OR_ELSE_DEFAULT,\n     methods::UNWRAP_USED,\n     methods::USELESS_ASREF,\n+    methods::VEC_RESIZE_TO_ZERO,\n     methods::WRONG_SELF_CONVENTION,\n     methods::ZST_OFFSET,\n     minmax::MIN_MAX,\n@@ -584,7 +585,6 @@ store.register_lints(&[\n     useless_conversion::USELESS_CONVERSION,\n     vec::USELESS_VEC,\n     vec_init_then_push::VEC_INIT_THEN_PUSH,\n-    vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n     verbose_file_reads::VERBOSE_FILE_READS,\n     wildcard_imports::ENUM_GLOB_USE,\n     wildcard_imports::WILDCARD_IMPORTS,"}, {"sha": "ff68fbd196431e4c649266afc35bfdb860ed6575", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -391,7 +391,6 @@ mod use_self;\n mod useless_conversion;\n mod vec;\n mod vec_init_then_push;\n-mod vec_resize_to_zero;\n mod verbose_file_reads;\n mod wildcard_imports;\n mod write;\n@@ -803,7 +802,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n-    store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n     store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || {"}, {"sha": "1a225c9bc95191359f99f6d9da89aef529d0f8d4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -90,6 +90,7 @@ mod unwrap_or_else_default;\n mod unwrap_used;\n mod useless_asref;\n mod utils;\n+mod vec_resize_to_zero;\n mod wrong_self_convention;\n mod zst_offset;\n \n@@ -2907,6 +2908,28 @@ declare_clippy_lint! {\n     \"Use of `Vec::sort_by` when `Vec::sort_by_key` or `Vec::sort` would be clearer\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Finds occurrences of `Vec::resize(0, an_int)`\n+    ///\n+    /// ### Why is this bad?\n+    /// This is probably an argument inversion mistake.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// vec!(1, 2, 3, 4, 5).resize(0, 5)\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// vec!(1, 2, 3, 4, 5).clear()\n+    /// ```\n+    #[clippy::version = \"1.46.0\"]\n+    pub VEC_RESIZE_TO_ZERO,\n+    correctness,\n+    \"emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3026,6 +3049,7 @@ impl_lint_pass!(Methods => [\n     STABLE_SORT_PRIMITIVE,\n     UNIT_HASH,\n     UNNECESSARY_SORT_BY,\n+    VEC_RESIZE_TO_ZERO,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3420,6 +3444,9 @@ impl Methods {\n                 (\"repeat\", [arg]) => {\n                     repeat_once::check(cx, expr, recv, arg);\n                 },\n+                (\"resize\", [count_arg, default_arg]) => {\n+                    vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n+                },\n                 (\"sort\", []) => {\n                     stable_sort_primitive::check(cx, expr, recv);\n                 },"}, {"sha": "02d8364cb2959c17d1471a6c3479e6c26b7c7c4e", "filename": "clippy_lints/src/methods/vec_resize_to_zero.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -0,0 +1,45 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Spanned;\n+use rustc_span::{sym, Span};\n+\n+use super::VEC_RESIZE_TO_ZERO;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    count_arg: &'tcx Expr<'_>,\n+    default_arg: &'tcx Expr<'_>,\n+    name_span: Span,\n+) {\n+    if_chain! {\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Vec);\n+        if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = count_arg.kind;\n+        if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = default_arg.kind;\n+        then {\n+            let method_call_span = expr.span.with_lo(name_span.lo());\n+            span_lint_and_then(\n+                cx,\n+                VEC_RESIZE_TO_ZERO,\n+                expr.span,\n+                \"emptying a vector with `resize`\",\n+                |db| {\n+                    db.help(\"the arguments may be inverted...\");\n+                    db.span_suggestion(\n+                        method_call_span,\n+                        \"...or you can empty the vector with\",\n+                        \"clear()\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "0fee3e812d286db1a143c583455b8e12a8e00062", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d8d4a135ea2bc460033c75d4a56d21ae977b9ae2/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d4a135ea2bc460033c75d4a56d21ae977b9ae2/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=d8d4a135ea2bc460033c75d4a56d21ae977b9ae2", "patch": "@@ -1,64 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::{match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir as hir;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Finds occurrences of `Vec::resize(0, an_int)`\n-    ///\n-    /// ### Why is this bad?\n-    /// This is probably an argument inversion mistake.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// vec!(1, 2, 3, 4, 5).resize(0, 5)\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// vec!(1, 2, 3, 4, 5).clear()\n-    /// ```\n-    #[clippy::version = \"1.46.0\"]\n-    pub VEC_RESIZE_TO_ZERO,\n-    correctness,\n-    \"emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake\"\n-}\n-\n-declare_lint_pass!(VecResizeToZero => [VEC_RESIZE_TO_ZERO]);\n-\n-impl<'tcx> LateLintPass<'tcx> for VecResizeToZero {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::MethodCall(path_segment, args, _) = expr.kind;\n-            if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if match_def_path(cx, method_def_id, &paths::VEC_RESIZE) && args.len() == 3;\n-            if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = args[1].kind;\n-            if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = args[2].kind;\n-            then {\n-                let method_call_span = expr.span.with_lo(path_segment.ident.span.lo());\n-                span_lint_and_then(\n-                    cx,\n-                    VEC_RESIZE_TO_ZERO,\n-                    expr.span,\n-                    \"emptying a vector with `resize`\",\n-                    |db| {\n-                        db.help(\"the arguments may be inverted...\");\n-                        db.span_suggestion(\n-                            method_call_span,\n-                            \"...or you can empty the vector with\",\n-                            \"clear()\".to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    },\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "a8307e741cf17b0c8ff64fd53cf2096b22c7f068", "filename": "tests/ui/vec_resize_to_zero.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/tests%2Fui%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/tests%2Fui%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -1,15 +1,19 @@\n #![warn(clippy::vec_resize_to_zero)]\n \n fn main() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+\n     // applicable here\n-    vec![1, 2, 3, 4, 5].resize(0, 5);\n+    v.resize(0, 5);\n \n     // not applicable\n-    vec![1, 2, 3, 4, 5].resize(2, 5);\n+    v.resize(2, 5);\n+\n+    let mut v = vec![\"foo\", \"bar\", \"baz\"];\n \n     // applicable here, but only implemented for integer literals for now\n-    vec![\"foo\", \"bar\", \"baz\"].resize(0, \"bar\");\n+    v.resize(0, \"bar\");\n \n     // not applicable\n-    vec![\"foo\", \"bar\", \"baz\"].resize(2, \"bar\")\n+    v.resize(2, \"bar\")\n }"}, {"sha": "7428cf62d6c429554d8a54e37cc641dfb93f8536", "filename": "tests/ui/vec_resize_to_zero.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/tests%2Fui%2Fvec_resize_to_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/tests%2Fui%2Fvec_resize_to_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.stderr?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -1,10 +1,10 @@\n error: emptying a vector with `resize`\n-  --> $DIR/vec_resize_to_zero.rs:5:5\n+  --> $DIR/vec_resize_to_zero.rs:7:5\n    |\n-LL |     vec![1, 2, 3, 4, 5].resize(0, 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^------------\n-   |                         |\n-   |                         help: ...or you can empty the vector with: `clear()`\n+LL |     v.resize(0, 5);\n+   |     ^^------------\n+   |       |\n+   |       help: ...or you can empty the vector with: `clear()`\n    |\n    = note: `-D clippy::vec-resize-to-zero` implied by `-D warnings`\n    = help: the arguments may be inverted..."}]}