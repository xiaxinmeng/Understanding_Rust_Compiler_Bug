{"sha": "6a018a03dfcffef05feec0bf2e5fdba6b965ca1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDE4YTAzZGZjZmZlZjA1ZmVlYzBiZjJlNWZkYmE2Yjk2NWNhMWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-07T09:57:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-07T09:57:43Z"}, "message": "document mode possibilities for all RMW operations", "tree": {"sha": "0708be0614c2cd4f7030791220ea9e90be73e718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0708be0614c2cd4f7030791220ea9e90be73e718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b", "html_url": "https://github.com/rust-lang/rust/commit/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "html_url": "https://github.com/rust-lang/rust/commit/1733bd3cbd7e04ad1745a3372b969e23575f9ebc"}], "stats": {"total": 255, "additions": 226, "deletions": 29}, "files": [{"sha": "5bb713f5767411022c1c18a4f119512241f34aec", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 226, "deletions": 29, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a018a03dfcffef05feec0bf2e5fdba6b965ca1b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6a018a03dfcffef05feec0bf2e5fdba6b965ca1b", "patch": "@@ -397,9 +397,14 @@ impl AtomicBool {\n     /// Stores a value into the bool, returning the previous value.\n     ///\n     /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     ///\n     /// # Examples\n     ///\n@@ -426,8 +431,13 @@ impl AtomicBool {\n     /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n     /// ordering of this operation. Notice that even when using [`AcqRel`], the operation\n     /// might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n+    /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n+    /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     /// [`bool`]: ../../../std/primitive.bool.html\n     ///\n@@ -462,13 +472,18 @@ impl AtomicBool {\n     /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the\n     /// operation succeeds while the second describes the required ordering when the\n-    /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and must\n-    /// be equivalent to or weaker than the success ordering.\n+    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+    /// and must be equivalent to or weaker than the success ordering.\n+    ///\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`AcqRel`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -515,16 +530,20 @@ impl AtomicBool {\n     /// previous value.\n     ///\n     /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the operation\n-    /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n-    /// weaker than the success ordering.\n+    /// ordering of this operation. The first describes the required ordering if the\n+    /// operation succeeds while the second describes the required ordering when the\n+    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+    /// and must be equivalent to or weaker than the success ordering.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`AcqRel`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -565,6 +584,16 @@ impl AtomicBool {\n     ///\n     /// Returns the previous value.\n     ///\n+    /// `fetch_and` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -596,6 +625,16 @@ impl AtomicBool {\n     ///\n     /// Returns the previous value.\n     ///\n+    /// `fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -640,6 +679,16 @@ impl AtomicBool {\n     ///\n     /// Returns the previous value.\n     ///\n+    /// `fetch_or` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -671,6 +720,16 @@ impl AtomicBool {\n     ///\n     /// Returns the previous value.\n     ///\n+    /// `fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -824,9 +883,14 @@ impl<T> AtomicPtr<T> {\n     /// Stores a value into the pointer, returning the previous value.\n     ///\n     /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     ///\n     /// # Examples\n     ///\n@@ -855,8 +919,14 @@ impl<T> AtomicPtr<T> {\n     /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n     /// ordering of this operation. Notice that even when using [`AcqRel`], the operation\n     /// might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n+    /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n+    /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     ///\n     /// # Examples\n     ///\n@@ -887,14 +957,18 @@ impl<T> AtomicPtr<T> {\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n     /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if\n-    /// the operation succeeds while the second describes the required ordering when\n-    /// the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`]\n-    /// and must be equivalent or weaker than the success ordering.\n+    /// ordering of this operation. The first describes the required ordering if the\n+    /// operation succeeds while the second describes the required ordering when the\n+    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+    /// and must be equivalent to or weaker than the success ordering.\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -940,15 +1014,19 @@ impl<T> AtomicPtr<T> {\n     /// previous value.\n     ///\n     /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the operation\n-    /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n-    /// weaker than the success ordering.\n+    /// ordering of this operation. The first describes the required ordering if the\n+    /// operation succeeds while the second describes the required ordering when the\n+    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+    /// and must be equivalent to or weaker than the success ordering.\n     ///\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -1191,9 +1269,15 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n             doc_comment! {\n                 concat!(\"Stores a value into the atomic integer, returning the previous value.\n \n-`swap` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n+`swap` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n \n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n \n # Examples\n \n@@ -1222,8 +1306,14 @@ value was updated.\n `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n ordering of this operation. Notice that even when using [`AcqRel`], the operation\n might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n+Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n+happens, and using [`Release`] makes the load part [`Relaxed`].\n \n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n \n # Examples\n \n@@ -1264,14 +1354,18 @@ containing the previous value. On success this value is guaranteed to be equal t\n `current`.\n \n `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n-ordering of this operation. The first describes the required ordering if\n-the operation succeeds while the second describes the required ordering when\n-the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n-must be equivalent or weaker than the success ordering.\n+ordering of this operation. The first describes the required ordering if the\n+operation succeeds while the second describes the required ordering when the\n+operation fails. Using [`Acquire`] as success ordering makes the store part\n+of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+and must be equivalent to or weaker than the success ordering.\n \n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n # Examples\n \n@@ -1316,13 +1410,17 @@ written and containing the previous value.\n `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n ordering of this operation. The first describes the required ordering if the\n operation succeeds while the second describes the required ordering when the\n-operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n-must be equivalent or weaker than the success ordering.\n+operation fails. Using [`Acquire`] as success ordering makes the store part\n+of this operation [`Relaxed`], and using [`Release`] makes the successful load\n+[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+and must be equivalent to or weaker than the success ordering.\n \n [`compare_exchange`]: #method.compare_exchange\n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n # Examples\n \n@@ -1358,6 +1456,16 @@ loop {\n \n This operation wraps around on overflow.\n \n+`fetch_add` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1379,6 +1487,16 @@ assert_eq!(foo.load(Ordering::SeqCst), 10);\n \n This operation wraps around on overflow.\n \n+`fetch_sub` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1403,6 +1521,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_and` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1427,6 +1555,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1452,6 +1590,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_or` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1476,6 +1624,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1501,6 +1659,25 @@ Note: This may call the function multiple times if the value has been changed fr\n the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n but once to the stored value.\n \n+`fetch_update` takes two [`Ordering`] arguments to describe the memory\n+ordering of this operation. The first describes the required ordering for loads\n+and failed updates while the second describes the required ordering when the\n+operation finally succeeds. Beware that this is different from the two\n+modes in [`compare_exchange`]!\n+\n+Using [`Acquire`] as success ordering makes the store part\n+of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n+[`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n+and must be equivalent to or weaker than the success ordering.\n+\n+[`bool`]: ../../../std/primitive.bool.html\n+[`compare_exchange`]: #method.compare_exchange\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n+\n # Examples\n \n ```rust\n@@ -1541,6 +1718,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_max` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```\n@@ -1580,6 +1767,16 @@ sets the new value to the result.\n \n Returns the previous value.\n \n+`fetch_min` takes an [`Ordering`] argument which describes the memory ordering\n+of this operation. All ordering modes are possible. Note that using\n+[`Acquire`] makes the store part of this operation [`Relaxed`], and\n+using [`Release`] makes the load part [`Relaxed`].\n+\n+[`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+\n # Examples\n \n ```"}]}