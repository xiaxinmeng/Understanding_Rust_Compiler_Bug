{"sha": "1940c31c92d2a0e4def356a17d6445388779d781", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDBjMzFjOTJkMmEwZTRkZWYzNTZhMTdkNjQ0NTM4ODc3OWQ3ODE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-09T02:34:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-09T02:34:47Z"}, "message": "Rollup merge of #41520 - estebank:trace-macro, r=nikomatsakis\n\nUse diagnostics for trace_macro instead of println\n\nWhen using `trace_macro`, use `span_label`s instead of `println`:\n\n```rust\nnote: trace_macro\n  --> $DIR/trace-macro.rs:14:5\n   |\n14 |     println!(\"Hello, World!\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: expands to `println! { \"Hello, World!\" }`\n   = note: expands to `print! { concat ! ( \"Hello, World!\" , \"\\n\" ) }`\n```\n\nFix #22597.", "tree": {"sha": "071b6d4ebd26475f0486c72f992913bfe6d5a984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071b6d4ebd26475f0486c72f992913bfe6d5a984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1940c31c92d2a0e4def356a17d6445388779d781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1940c31c92d2a0e4def356a17d6445388779d781", "html_url": "https://github.com/rust-lang/rust/commit/1940c31c92d2a0e4def356a17d6445388779d781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1940c31c92d2a0e4def356a17d6445388779d781/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c104db48018ad01588153a59de6bdf9f177bf8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c104db48018ad01588153a59de6bdf9f177bf8f9", "html_url": "https://github.com/rust-lang/rust/commit/c104db48018ad01588153a59de6bdf9f177bf8f9"}, {"sha": "8c9ad8d72c5a3ad73af33e3ad9a409327645ac28", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9ad8d72c5a3ad73af33e3ad9a409327645ac28", "html_url": "https://github.com/rust-lang/rust/commit/8c9ad8d72c5a3ad73af33e3ad9a409327645ac28"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "db8c9ac306bba718ff4ff9c6a64050289bdda97b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -388,6 +388,14 @@ impl Handler {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n     }\n+    pub fn span_note_diag<'a>(&'a self,\n+                              sp: Span,\n+                              msg: &str)\n+                              -> DiagnosticBuilder<'a> {\n+        let mut db = DiagnosticBuilder::new(self, Note, msg);\n+        db.set_span(sp);\n+        db\n+    }\n     pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n     }"}, {"sha": "f731c5abdd6a1f7e0ad275f45460e047e1f5779f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -24,6 +24,7 @@ use ptr::P;\n use symbol::Symbol;\n use util::small_vector::SmallVector;\n \n+use std::collections::HashMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::default::Default;\n@@ -643,6 +644,7 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut Resolver,\n     pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n+    pub expansions: HashMap<Span, Vec<String>>,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -662,6 +664,7 @@ impl<'a> ExtCtxt<'a> {\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned,\n             },\n+            expansions: HashMap::new(),\n         }\n     }\n \n@@ -765,6 +768,15 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n+    pub fn trace_macros_diag(&self) {\n+        for (sp, notes) in self.expansions.iter() {\n+            let mut db = self.parse_sess.span_diagnostic.span_note_diag(*sp, &\"trace_macro\");\n+            for note in notes {\n+                db.note(&note);\n+            }\n+            db.emit();\n+        }\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.bug(msg);\n     }"}, {"sha": "a8aa103f80a8e4a7c0f150d59ebfd2a427cd7517", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             },\n             _ => unreachable!(),\n         };\n-\n+        self.cx.trace_macros_diag();\n         krate\n     }\n "}, {"sha": "f959ccc989e2e9e9d55643966f0fe4648b8bd17b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -27,8 +27,8 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n \n use std::cell::RefCell;\n-use std::collections::{HashMap};\n-use std::collections::hash_map::{Entry};\n+use std::collections::HashMap;\n+use std::collections::hash_map::Entry;\n use std::rc::Rc;\n \n pub struct ParserAnyMacro<'a> {\n@@ -85,15 +85,17 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n }\n \n /// Given `lhses` and `rhses`, this is the new macro we create\n-fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n+fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                           sp: Span,\n                           name: ast::Ident,\n                           arg: TokenStream,\n                           lhses: &[quoted::TokenTree],\n                           rhses: &[quoted::TokenTree])\n                           -> Box<MacResult+'cx> {\n     if cx.trace_macros() {\n-        println!(\"{}! {{ {} }}\", name, arg);\n+        let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n+        let mut values: &mut Vec<String> = cx.expansions.entry(sp).or_insert(vec![]);\n+        values.push(format!(\"expands to `{}! {{ {} }}`\", name, arg));\n     }\n \n     // Which arm's failure should we report? (the one furthest along)"}, {"sha": "3338e394e0ef9005687b3a785cb9b0c95077dfd8", "filename": "src/test/run-make/trace-macros-flag/Makefile", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c104db48018ad01588153a59de6bdf9f177bf8f9/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c104db48018ad01588153a59de6bdf9f177bf8f9/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile?ref=c104db48018ad01588153a59de6bdf9f177bf8f9", "patch": "@@ -1,9 +0,0 @@\n-# This test verifies that \"-Z trace-macros\"  works as it should. The traditional\n-# \"hello world\" program provides a small example of this as not only println! is\n-# listed, but also print! (since println! expands to this)\n-\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -Z trace-macros hello.rs > $(TMPDIR)/hello.out\n-\tdiff -u $(TMPDIR)/hello.out hello.trace"}, {"sha": "cf733339eadf63ace80afc5d60b768188bf265ed", "filename": "src/test/run-make/trace-macros-flag/hello.trace", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c104db48018ad01588153a59de6bdf9f177bf8f9/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "raw_url": "https://github.com/rust-lang/rust/raw/c104db48018ad01588153a59de6bdf9f177bf8f9/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace?ref=c104db48018ad01588153a59de6bdf9f177bf8f9", "patch": "@@ -1,2 +0,0 @@\n-println! { \"Hello, World!\" }\n-print! { concat ! ( \"Hello, World!\" , \"\\n\" ) }"}, {"sha": "34f674ae016a589b7f3eec6a00aafb11c032af0c", "filename": "src/test/ui/macros/trace-macro.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z trace-macros\n+\n fn main() {\n     println!(\"Hello, World!\");\n }", "previous_filename": "src/test/run-make/trace-macros-flag/hello.rs"}, {"sha": "09117a4ca740452e0870a1adbd7c369f545e1ec0", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1940c31c92d2a0e4def356a17d6445388779d781/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1940c31c92d2a0e4def356a17d6445388779d781/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=1940c31c92d2a0e4def356a17d6445388779d781", "patch": "@@ -0,0 +1,9 @@\n+note: trace_macro\n+  --> $DIR/trace-macro.rs:14:5\n+   |\n+14 |     println!(\"Hello, World!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expands to `println! { \"Hello, World!\" }`\n+   = note: expands to `print! { concat ! ( \"Hello, World!\" , \"/n\" ) }`\n+"}]}