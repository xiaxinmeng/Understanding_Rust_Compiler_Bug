{"sha": "c2b19c109e798b63a90b13cc7c68e36a18cc27af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjE5YzEwOWU3OThiNjNhOTBiMTNjYzdjNjhlMzZhMThjYzI3YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-16T22:21:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-16T22:21:51Z"}, "message": "Auto merge of #39108 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #38247, #39028, #39065, #39084, #39105, #39106\n- Failed merges:", "tree": {"sha": "cb6bdc3e7c56bc5ad6b5b91a2567384f67216bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6bdc3e7c56bc5ad6b5b91a2567384f67216bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b19c109e798b63a90b13cc7c68e36a18cc27af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b19c109e798b63a90b13cc7c68e36a18cc27af", "html_url": "https://github.com/rust-lang/rust/commit/c2b19c109e798b63a90b13cc7c68e36a18cc27af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b19c109e798b63a90b13cc7c68e36a18cc27af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b273af4a48e9625749286049326abe4fce064c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b273af4a48e9625749286049326abe4fce064c", "html_url": "https://github.com/rust-lang/rust/commit/45b273af4a48e9625749286049326abe4fce064c"}, {"sha": "04e74cefee50aa559d3003403f5c9c98cbb3d12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e74cefee50aa559d3003403f5c9c98cbb3d12d", "html_url": "https://github.com/rust-lang/rust/commit/04e74cefee50aa559d3003403f5c9c98cbb3d12d"}], "stats": {"total": 126, "additions": 111, "deletions": 15}, "files": [{"sha": "24f71608a5bf3ff8ae1b425803d89c74280d8f18", "filename": "src/doc/book/patterns.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Fdoc%2Fbook%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Fdoc%2Fbook%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fpatterns.md?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -23,6 +23,33 @@ match x {\n \n This prints `one`.\n \n+It's possible to create a binding for the value in the any case:\n+\n+```rust\n+let x = 1;\n+\n+match x {\n+    y => println!(\"x: {} y: {}\", x, y),\n+}\n+```\n+\n+This prints:\n+\n+```text\n+x: 1 y: 1\n+```\n+\n+Note it is an error to have both a catch-all `_` and a catch-all binding in the same match block:\n+\n+```rust\n+let x = 1;\n+\n+match x {\n+    y => println!(\"x: {} y: {}\", x, y),\n+    _ => println!(\"anything\"), // this causes an error as it is unreachable\n+}\n+```\n+\n There\u2019s one pitfall with patterns: like anything that introduces a new binding,\n they introduce shadowing. For example:\n "}, {"sha": "4755f8a4c55a43b3095acde1749916fc56215ccb", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -656,7 +656,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n@@ -748,7 +748,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n \n     /// Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive"}, {"sha": "f006ba95371611ecb402bbde92048c36217e4f77", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -208,7 +208,7 @@ impl<T> BTreeSet<T> {\n \n impl<T: Ord> BTreeSet<T> {\n     /// Constructs a double-ended iterator over a sub-range of elements in the set.\n-    /// The simplest way is to use the range synax `min..max`, thus `range(min..max)` will\n+    /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n     /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive"}, {"sha": "bc5392f6b88491466e6c44799d535ca46dcef228", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -45,7 +45,8 @@ macro_rules! panic {\n /// Other use-cases of `assert!` include [testing] and enforcing run-time\n /// invariants in safe code (whose violation cannot result in unsafety).\n ///\n-/// This macro has a second version, where a custom panic message can be provided.\n+/// This macro has a second version, where a custom panic message can\n+/// be provided with or without arguments for formatting.\n ///\n /// [testing]: ../book/testing.html\n ///\n@@ -87,12 +88,17 @@ macro_rules! assert {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n+/// Like `assert!()`, this macro has a second version, where a custom\n+/// panic message can be provided.\n+///\n /// # Examples\n ///\n /// ```\n /// let a = 3;\n /// let b = 1 + 2;\n /// assert_eq!(a, b);\n+///\n+/// assert_eq!(a, b, \"we are testing addition with {} and {}\", a, b);\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -125,12 +131,17 @@ macro_rules! assert_eq {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n+/// Like `assert!()`, this macro has a second version, where a custom\n+/// panic message can be provided.\n+///\n /// # Examples\n ///\n /// ```\n /// let a = 3;\n /// let b = 2;\n /// assert_ne!(a, b);\n+///\n+/// assert_ne!(a, b, \"we are testing that the values are not equal\");\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.12.0\")]"}, {"sha": "ae83312ec94925bcd4b1ae05eba9cdd4ab44c896", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -10,7 +10,7 @@\n \n //! Inspection and manipulation of the process's environment.\n //!\n-//! This module contains methods to inspect various aspects such as\n+//! This module contains functions to inspect various aspects such as\n //! environment variables, process arguments, the current directory, and various\n //! other important directories.\n \n@@ -68,15 +68,17 @@ pub fn set_current_dir<P: AsRef<Path>>(p: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This iterator is created through `std::env::vars()` and yields `(String,\n-/// String)` pairs.\n+/// This structure is created through the [`std::env::vars`] function.\n+///\n+/// [`std::env::vars`]: fn.vars.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars { inner: VarsOs }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This iterator is created through `std::env::vars_os()` and yields\n-/// `(OsString, OsString)` pairs.\n+/// This structure is created through the [`std::env::vars_os`] function.\n+///\n+/// [`std::env::vars_os`]: fn.vars_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs { inner: os_imp::Env }\n \n@@ -218,7 +220,9 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n     })\n }\n \n-/// Possible errors from the `env::var` method.\n+/// Possible errors from the [`env::var`] function.\n+///\n+/// [env::var]: fn.var.html\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -570,7 +574,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// An iterator over the arguments of a process, yielding a [`String`] value\n /// for each argument.\n ///\n-/// This structure is created through the [`std::env::args`] method.\n+/// This structure is created through the [`std::env::args`] function.\n ///\n /// [`String`]: ../string/struct.String.html\n /// [`std::env::args`]: ./fn.args.html\n@@ -580,7 +584,7 @@ pub struct Args { inner: ArgsOs }\n /// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This structure is created through the [`std::env::args_os`] method.\n+/// This structure is created through the [`std::env::args_os`] function.\n ///\n /// [`OsString`]: ../ffi/struct.OsString.html\n /// [`std::env::args_os`]: ./fn.args_os.html"}, {"sha": "fb9984ccbdda5f63444ead83602afbe6e3f384a3", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b19c109e798b63a90b13cc7c68e36a18cc27af/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=c2b19c109e798b63a90b13cc7c68e36a18cc27af", "patch": "@@ -20,11 +20,38 @@ use sys_common::{FromInner, IntoInner, AsInner};\n /// Unix-specific extensions to `OsString`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n-    /// Creates an `OsString` from a byte vector.\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let bytes = b\"foo\".to_vec();\n+    /// let os_string = OsString::from_vec(bytes);\n+    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_vec(vec: Vec<u8>) -> Self;\n \n-    /// Yields the underlying byte vector of this `OsString`.\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let mut os_string = OsString::new();\n+    /// os_string.push(\"foo\");\n+    /// let bytes = os_string.into_vec();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_vec(self) -> Vec<u8>;\n }\n@@ -43,9 +70,36 @@ impl OsStringExt for OsString {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let bytes = b\"foo\";\n+    /// let os_str = OsStr::from_bytes(bytes);\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n     fn from_bytes(slice: &[u8]) -> &Self;\n \n-    /// Gets the underlying byte view of the `OsStr` slice.\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let mut os_str = OsStr::new(\"foo\");\n+    /// let bytes = os_str.as_bytes();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_bytes(&self) -> &[u8];\n }"}]}