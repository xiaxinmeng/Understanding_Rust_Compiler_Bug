{"sha": "531c27d80554e3d0c12a3177d02a4f287e7fc22c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMWMyN2Q4MDU1NGUzZDBjMTJhMzE3N2QwMmE0ZjI4N2U3ZmMyMmM=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-25T15:27:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:48Z"}, "message": "Move common.rs functionality into TyCtxt", "tree": {"sha": "b9e0ce744607665b2ff84143ec7feb1ac1708800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e0ce744607665b2ff84143ec7feb1ac1708800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531c27d80554e3d0c12a3177d02a4f287e7fc22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531c27d80554e3d0c12a3177d02a4f287e7fc22c", "html_url": "https://github.com/rust-lang/rust/commit/531c27d80554e3d0c12a3177d02a4f287e7fc22c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531c27d80554e3d0c12a3177d02a4f287e7fc22c/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b9eba316025ecd2fb2a2c9716f21813848ff03", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b9eba316025ecd2fb2a2c9716f21813848ff03", "html_url": "https://github.com/rust-lang/rust/commit/98b9eba316025ecd2fb2a2c9716f21813848ff03"}], "stats": {"total": 117, "additions": 14, "deletions": 103}, "files": [{"sha": "1f505a07dab5f61dd9d9cae0226d825981f29d8f", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=531c27d80554e3d0c12a3177d02a4f287e7fc22c", "patch": "@@ -45,6 +45,15 @@ pub enum InstanceDef<'tcx> {\n     CloneShim(DefId, Ty<'tcx>),\n }\n \n+impl<'a, 'tcx> Instance<'tcx> {\n+    pub fn ty(&self,\n+              tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+              -> Ty<'tcx>\n+    {\n+        self.def.def_ty(tcx).subst(tcx, self.substs)\n+    }\n+}\n+\n impl<'tcx> InstanceDef<'tcx> {\n     #[inline]\n     pub fn def_id(&self) -> DefId {"}, {"sha": "220e1e971accd5362f019987f7993b9521e69f47", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=531c27d80554e3d0c12a3177d02a4f287e7fc22c", "patch": "@@ -2471,11 +2471,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n-    pub fn is_sized(self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n-    }\n-}\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn with_freevars<T, F>(self, fid: NodeId, f: F) -> T where\n         F: FnOnce(&[hir::Freevar]) -> T,"}, {"sha": "a12553740ab7c775ca617681b38602835c56c9c4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=531c27d80554e3d0c12a3177d02a4f287e7fc22c", "patch": "@@ -203,7 +203,6 @@ use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n use rustc::mir::visit::Visitor as MirVisitor;\n \n-use common::{def_ty, instance_ty, type_has_metadata};\n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n \n@@ -371,7 +370,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Sanity check whether this ended up being collected accidentally\n             debug_assert!(should_trans_locally(tcx, &instance));\n \n-            let ty = instance_ty(tcx, &instance);\n+            let ty = instance.ty(tcx);\n             visit_drop_use(tcx, ty, true, &mut neighbors);\n \n             recursion_depth_reset = None;\n@@ -916,7 +915,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                         debug!(\"RootCollector: ADT drop-glue for {}\",\n                                def_id_to_string(self.tcx, def_id));\n \n-                        let ty = def_ty(self.tcx, def_id, Substs::empty());\n+                        let ty = Instance::new(def_id, Substs::empty()).ty(self.tcx);\n                         visit_drop_use(self.tcx, ty, true, self.output);\n                     }\n                 }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/librustc_mir/monomorphize/common.rs", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_mir%2Fmonomorphize%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_mir%2Fmonomorphize%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcommon.rs?ref=98b9eba316025ecd2fb2a2c9716f21813848ff03"}, {"sha": "3b449d69e9cf14d7aedc97638669f5f247b377ed", "filename": "src/librustc_mir/monomorphize/mono_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs?ref=531c27d80554e3d0c12a3177d02a4f287e7fc22c", "patch": "@@ -14,7 +14,6 @@\n //! item-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use rustc_trans_utils::common;\n use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -98,7 +97,7 @@ pub trait TransItemExt<'a, 'tcx>: fmt::Debug {\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some() ||\n-                    !common::requests_inline(tcx, instance)\n+                    !tcx.requires_local_instance(instance)\n                 {\n                     return InstantiationMode::GloballyShared  { may_conflict: false }\n                 }"}, {"sha": "47968afd70d97112675ff0380155c434cef7e5e5", "filename": "src/librustc_trans_utils/common.rs", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_trans_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_trans_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcommon.rs?ref=98b9eba316025ecd2fb2a2c9716f21813848ff03", "patch": "@@ -1,92 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types, non_snake_case)]\n-\n-//! Code that is useful in various trans modules.\n-\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::map::DefPathData;\n-use rustc::traits;\n-use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Substs;\n-\n-use syntax::attr;\n-use syntax_pos::DUMMY_SP;\n-\n-pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_sized(tcx, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n-}\n-\n-pub fn type_has_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    if type_is_sized(tcx, ty) {\n-        return false;\n-    }\n-\n-    let tail = tcx.struct_tail(ty);\n-    match tail.sty {\n-        ty::TyForeign(..) => false,\n-        ty::TyStr | ty::TySlice(..) | ty::TyDynamic(..) => true,\n-        _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n-    }\n-}\n-\n-pub fn requests_inline<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: &ty::Instance<'tcx>\n-) -> bool {\n-    if is_inline_instance(tcx, instance) {\n-        return true\n-    }\n-    if let ty::InstanceDef::DropGlue(..) = instance.def {\n-        // Drop glue wants to be instantiated at every translation\n-        // unit, but without an #[inline] hint. We should make this\n-        // available to normal end-users.\n-        return true\n-    }\n-    attr::requests_inline(&instance.def.attrs(tcx)[..]) ||\n-        tcx.is_const_fn(instance.def.def_id())\n-}\n-\n-pub fn is_inline_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: &ty::Instance<'tcx>\n-) -> bool {\n-    let def_id = match instance.def {\n-        ty::InstanceDef::Item(def_id) => def_id,\n-        ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n-        _ => return true\n-    };\n-    match tcx.def_key(def_id).disambiguated_data.data {\n-        DefPathData::StructCtor |\n-        DefPathData::EnumVariant(..) |\n-        DefPathData::ClosureExpr => true,\n-        _ => false\n-    }\n-}\n-\n-/// Given a DefId and some Substs, produces the monomorphic item type.\n-pub fn def_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        def_id: DefId,\n-                        substs: &'tcx Substs<'tcx>)\n-                        -> Ty<'tcx>\n-{\n-    let ty = tcx.type_of(def_id);\n-    tcx.trans_apply_param_substs(substs, &ty)\n-}\n-\n-/// Return the substituted type of an instance.\n-pub fn instance_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             instance: &ty::Instance<'tcx>)\n-                             -> Ty<'tcx>\n-{\n-    let ty = instance.def.def_ty(tcx);\n-    tcx.trans_apply_param_substs(instance.substs, &ty)\n-}"}, {"sha": "9298547e3830c6a431d793b0ba2196b6fc4c193c", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531c27d80554e3d0c12a3177d02a4f287e7fc22c/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=531c27d80554e3d0c12a3177d02a4f287e7fc22c", "patch": "@@ -44,7 +44,8 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n use rustc::util::nodemap::NodeSet;\n \n-pub mod common;\n+use syntax::attr;\n+\n pub mod link;\n pub mod trans_crate;\n "}]}