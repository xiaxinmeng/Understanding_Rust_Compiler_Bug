{"sha": "adf168844791b213383b18d10515eaee88695f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjE2ODg0NDc5MWIyMTMzODNiMThkMTA1MTVlYWVlODg2OTVmN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T22:30:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T22:30:09Z"}, "message": "Auto merge of #86808 - fee1-dead:constify-1, r=oli-obk\n\nconstified implementations of `Default`", "tree": {"sha": "05d78b84df039e87a54818eaf5b28609b4d1f32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d78b84df039e87a54818eaf5b28609b4d1f32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf168844791b213383b18d10515eaee88695f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf168844791b213383b18d10515eaee88695f7d", "html_url": "https://github.com/rust-lang/rust/commit/adf168844791b213383b18d10515eaee88695f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf168844791b213383b18d10515eaee88695f7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a0a9b694cde95cbab863f7ef4d554f0f46b606", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a0a9b694cde95cbab863f7ef4d554f0f46b606", "html_url": "https://github.com/rust-lang/rust/commit/30a0a9b694cde95cbab863f7ef4d554f0f46b606"}, {"sha": "6bd2ecba726f06587d7d60ffca5605841ac39091", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd2ecba726f06587d7d60ffca5605841ac39091", "html_url": "https://github.com/rust-lang/rust/commit/6bd2ecba726f06587d7d60ffca5605841ac39091"}], "stats": {"total": 105, "additions": 77, "deletions": 28}, "files": [{"sha": "1a387f291ccf43b17b6a1f026c729ed7a9bd76ca", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -95,6 +95,7 @@\n #![feature(const_fn_trait_bound)]\n #![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n+#![feature(const_trait_impl)]\n #![feature(destructuring_assignment)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]"}, {"sha": "6568d9f9907b998156293c7357b19f3eee447c87", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -2105,7 +2105,8 @@ impl_eq! { Cow<'a, str>, &'b str }\n impl_eq! { Cow<'a, str>, String }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for String {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for String {\n     /// Creates an empty `String`.\n     #[inline]\n     fn default() -> String {"}, {"sha": "87a0d371815629dde7a5e6523e546e0aab61953e", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -2758,7 +2758,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Vec<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Vec<T> {\n     /// Creates an empty `Vec<T>`.\n     fn default() -> Vec<T> {\n         Vec::new()"}, {"sha": "da58ae92e112489516b49391f71bd1130f0b2f79", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,16 +1,8 @@\n-// Test several functions can be used for constants\n-// 1. Vec::new()\n-// 2. String::new()\n-// 3. BTreeMap::new()\n-// 4. BTreeSet::new()\n+// Test const functions in the library\n \n-#[allow(dead_code)]\n-pub const MY_VEC: Vec<usize> = Vec::new();\n-\n-#[allow(dead_code)]\n-pub const MY_STRING: String = String::new();\n+use core::cmp::Ordering;\n \n-// FIXME(fee1-dead) remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n+// FIXME remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n #[derive(PartialEq, Eq, PartialOrd)]\n pub struct MyType;\n \n@@ -32,7 +24,12 @@ impl const Ord for MyType {\n     }\n }\n \n-use core::cmp::Ordering;\n+pub const MY_VEC: Vec<usize> = Vec::new();\n+pub const MY_VEC2: Vec<usize> = Default::default();\n+\n+pub const MY_STRING: String = String::new();\n+pub const MY_STRING2: String = Default::default();\n+\n use std::collections::{BTreeMap, BTreeSet};\n \n pub const MY_BTREEMAP: BTreeMap<MyType, MyType> = BTreeMap::new();\n@@ -47,7 +44,10 @@ pub const SET_IS_EMPTY: bool = SET.is_empty();\n \n #[test]\n fn test_const() {\n+    assert_eq!(MY_VEC, MY_VEC2);\n+    assert_eq!(MY_STRING, MY_STRING2);\n+\n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);\n-    assert!(MAP_IS_EMPTY && SET_IS_EMPTY)\n+    assert!(MAP_IS_EMPTY && SET_IS_EMPTY);\n }"}, {"sha": "5767108d423c6c418a6f455ffb1d7a290cf68778", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -24,6 +24,7 @@\n #![feature(vec_spare_capacity)]\n #![feature(string_remove_matches)]\n #![feature(const_btree_new)]\n+#![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n \n use std::collections::hash_map::DefaultHasher;"}, {"sha": "3c638e655dc91dd525e42c9fc2c101c89a7ab682", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -280,7 +280,8 @@ macro_rules! array_impl_default {\n     };\n     {$n:expr,} => {\n         #[stable(since = \"1.4.0\", feature = \"array_default\")]\n-        impl<T> Default for [T; $n] {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl<T> const Default for [T; $n] {\n             fn default() -> [T; $n] { [] }\n         }\n     };"}, {"sha": "0ee8cd59ba4ff8c500356d7a407ae315f46c4d61", "filename": "library/core/src/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -171,7 +171,8 @@ pub macro Default($item:item) {\n macro_rules! default_impl {\n     ($t:ty, $v:expr, $doc:tt) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Default for $t {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl const Default for $t {\n             #[inline]\n             #[doc = $doc]\n             fn default() -> $t {"}, {"sha": "510e233b43110d7c60bb83944426cce98cdeddff", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -599,7 +599,8 @@ impl<H> Clone for BuildHasherDefault<H> {\n }\n \n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n-impl<H> Default for BuildHasherDefault<H> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<H> const Default for BuildHasherDefault<H> {\n     fn default() -> BuildHasherDefault<H> {\n         BuildHasherDefault(marker::PhantomData)\n     }"}, {"sha": "a7d4646f5c5973e63c291142191a519782b2eb38", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -85,7 +85,8 @@ impl<T> Clone for Empty<T> {\n // not #[derive] because that adds a Default bound on T,\n // which isn't necessary.\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-impl<T> Default for Empty<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Empty<T> {\n     fn default() -> Empty<T> {\n         Empty(marker::PhantomData)\n     }"}, {"sha": "4ab7cc24a0d42c7cd27d42646d27035c4aec4810", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -103,6 +103,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_unreachable_unchecked)]\n+#![feature(const_default_impls)]\n #![feature(duration_consts_2)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]"}, {"sha": "333f81ce4cfc4b52c967522d84b6690b29553f4e", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -528,7 +528,8 @@ macro_rules! impls {\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Default for $t<T> {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl<T: ?Sized> const Default for $t<T> {\n             fn default() -> Self {\n                 Self\n             }"}, {"sha": "78f5954532ff08e5161e7cd422106a93a9f1ffd5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1642,7 +1642,8 @@ impl<T: Clone> Clone for Option<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Option<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Option<T> {\n     /// Returns [`None`][Option::None].\n     ///\n     /// # Examples"}, {"sha": "361a9b03aebc7304d8ff1bab432c31ff3bf9fa78", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -3501,15 +3501,17 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for &[T] {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for &[T] {\n     /// Creates an empty slice.\n     fn default() -> Self {\n         &[]\n     }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n-impl<T> Default for &mut [T] {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for &mut [T] {\n     /// Creates a mutable empty slice.\n     fn default() -> Self {\n         &mut []"}, {"sha": "947afbdc68dfbcbfced52b632f15b42cf774f19c", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -2442,7 +2442,8 @@ impl AsRef<[u8]> for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for &str {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for &str {\n     /// Creates an empty str\n     #[inline]\n     fn default() -> Self {"}, {"sha": "d9de37e9c519797430a43b40829228bce2ef3335", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -138,7 +138,8 @@ pub struct AtomicBool {\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for AtomicBool {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for AtomicBool {\n     /// Creates an `AtomicBool` initialized to `false`.\n     #[inline]\n     fn default() -> Self {\n@@ -168,7 +169,8 @@ pub struct AtomicPtr<T> {\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for AtomicPtr<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for AtomicPtr<T> {\n     /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(crate::ptr::null_mut())\n@@ -1351,7 +1353,8 @@ macro_rules! atomic_int {\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n \n         #[$stable]\n-        impl Default for $atomic_type {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl const Default for $atomic_type {\n             #[inline]\n             fn default() -> Self {\n                 Self::new(Default::default())"}, {"sha": "5afdb799f0c74aadbff4b1ff167834a7c871acc9", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -86,7 +86,8 @@ impl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for SyncOnceCell<T> {}\n impl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T> Default for SyncOnceCell<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     ///\n     /// # Example"}, {"sha": "5e91a0cdbd6b54cf6b2b3636f503e641b55741a7", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -255,6 +255,7 @@\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_socketaddr)]\n+#![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]"}, {"sha": "c6975da7121f9a80765ff70dc5424ed094e63e9a", "filename": "src/test/ui/rfc-2632-const-trait-impl/std-impl-gate.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -0,0 +1,21 @@\n+// This tests feature gates for const impls in the standard library.\n+\n+// revisions: stock gated\n+//[gated] run-pass\n+\n+#![cfg_attr(gated, feature(const_trait_impl, const_default_impls))]\n+\n+fn non_const_context() -> Vec<usize> {\n+    Default::default()\n+}\n+\n+const fn const_context() -> Vec<usize> {\n+    Default::default()\n+    //[stock]~^ ERROR calls in constant functions are limited\n+}\n+\n+fn main() {\n+    const VAL: Vec<usize> = const_context();\n+\n+    assert_eq!(VAL, non_const_context());\n+}"}, {"sha": "55a0daaaec7bda40771f4457f9437eaa1a5e94d2", "filename": "src/test/ui/rfc-2632-const-trait-impl/std-impl-gate.stock.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/std-impl-gate.rs:13:5\n+   |\n+LL |     Default::default()\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}]}