{"sha": "cb7915b00c235e9b5861564f3be78dba330980ee", "node_id": "C_kwDOAAsO6NoAKGNiNzkxNWIwMGMyMzVlOWI1ODYxNTY0ZjNiZTc4ZGJhMzMwOTgwZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-28T16:42:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-28T16:42:31Z"}, "message": "Auto merge of #7733 - flip1995:rustup, r=flip1995\n\nRustup\n\nThis needs a review this time. Especially https://github.com/rust-lang/rust-clippy/commit/521bf8f0fa18c7f130505f0a902ab0e65a76cec2 cc `@camsteffen` I think this is necessary now, because `itertools` is no longer a dependency of `clippy_utils` and therefore this path can't be found :thinking:\n\n( I forgot about the sync last week. I should get to document this process better, so other people can do it when I'm not around )\n\nchangelog: none", "tree": {"sha": "f9601dcffa493fddf803ba62c3418f25d840328e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9601dcffa493fddf803ba62c3418f25d840328e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb7915b00c235e9b5861564f3be78dba330980ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7915b00c235e9b5861564f3be78dba330980ee", "html_url": "https://github.com/rust-lang/rust/commit/cb7915b00c235e9b5861564f3be78dba330980ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb7915b00c235e9b5861564f3be78dba330980ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08cead31a12e691b435a2f4eed6982dacb56333a", "url": "https://api.github.com/repos/rust-lang/rust/commits/08cead31a12e691b435a2f4eed6982dacb56333a", "html_url": "https://github.com/rust-lang/rust/commit/08cead31a12e691b435a2f4eed6982dacb56333a"}, {"sha": "c2b8882cef03ed7813ac4e3162c3c3e22869f618", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b8882cef03ed7813ac4e3162c3c3e22869f618", "html_url": "https://github.com/rust-lang/rust/commit/c2b8882cef03ed7813ac4e3162c3c3e22869f618"}], "stats": {"total": 296, "additions": 127, "deletions": 169}, "files": [{"sha": "ba3ed3053ac743466be07b2fdf04c97911dcc0f1", "filename": "Cargo.toml", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -21,37 +21,35 @@ name = \"clippy-driver\"\n path = \"src/driver.rs\"\n \n [dependencies]\n-# begin automatic update\n-clippy_lints = { version = \"0.1.50\", path = \"clippy_lints\" }\n-# end automatic update\n+clippy_lints = { version = \"0.1\", path = \"clippy_lints\" }\n semver = \"0.11\"\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n-tempfile = { version = \"3.1.0\", optional = true }\n+rustc_tools_util = { version = \"0.2\", path = \"rustc_tools_util\" }\n+tempfile = { version = \"3.2\", optional = true }\n \n [dev-dependencies]\n cargo_metadata = \"0.12\"\n-compiletest_rs = { version = \"0.6.0\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.7\", features = [\"tmp\"] }\n tester = \"0.9\"\n-regex = \"1.4\"\n+regex = \"1.5\"\n # This is used by the `collect-metadata` alias.\n filetime = \"0.2\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information.\n-rustc-workspace-hack = \"1.0.0\"\n+rustc-workspace-hack = \"1.0\"\n \n # UI test dependencies\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\"\n-itertools = \"0.10.1\"\n-quote = \"1\"\n+itertools = \"0.10\"\n+quote = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n-syn = { version = \"1\", features = [\"full\"] }\n+syn = { version = \"1.0\", features = [\"full\"] }\n \n [build-dependencies]\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n+rustc_tools_util = { version = \"0.2\", path = \"rustc_tools_util\" }\n \n [features]\n deny-warnings = [\"clippy_lints/deny-warnings\"]"}, {"sha": "4a13a4524097601ffda40ce63349ca71fef9563e", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -6,11 +6,11 @@ edition = \"2021\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n-itertools = \"0.9\"\n+itertools = \"0.10\"\n opener = \"0.5\"\n-regex = \"1\"\n+regex = \"1.5\"\n shell-escape = \"0.1\"\n-walkdir = \"2\"\n+walkdir = \"2.3\"\n \n [features]\n deny-warnings = []"}, {"sha": "c206a1eb07b500a28c114936e7a27af2879cd3a0", "filename": "clippy_dummy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_dummy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_dummy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dummy%2FCargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -13,4 +13,4 @@ keywords = [\"clippy\", \"lint\", \"plugin\"]\n categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n \n [build-dependencies]\n-term = \"0.6\"\n+term = \"0.7\""}, {"sha": "7900dc6d0414136a0ef27a74f787c7d97cd6fc05", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -11,21 +11,21 @@ edition = \"2021\"\n [dependencies]\n cargo_metadata = \"0.12\"\n clippy_utils = { path = \"../clippy_utils\" }\n-if_chain = \"1.0.0\"\n-itertools = \"0.9\"\n+if_chain = \"1.0\"\n+itertools = \"0.10\"\n pulldown-cmark = { version = \"0.8\", default-features = false }\n-quine-mc_cluskey = \"0.2.2\"\n+quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n-toml = \"0.5.3\"\n+toml = \"0.5\"\n unicode-normalization = \"0.1\"\n-unicode-script = { version = \"0.5.3\", default-features = false }\n+unicode-script = { version = \"0.5\", default-features = false }\n semver = \"0.11\"\n-rustc-semver = \"1.1.0\"\n+rustc-semver = \"1.1\"\n # NOTE: cargo requires serde feat in its url dep\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n-url = { version = \"2.1.0\", features = [\"serde\"] }\n+url = { version = \"2.2\", features = [\"serde\"] }\n \n [features]\n deny-warnings = [\"clippy_utils/deny-warnings\"]"}, {"sha": "2ef7dcc1775a6bfe9d6bf2d6784389c7839ff993", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -527,8 +527,8 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n                 return;\n             }\n \n-            let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt());\n-            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt());\n+            let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt(), item.span.parent());\n+            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt(), item.span.parent());\n \n             if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();"}, {"sha": "162911b77d6153b6f02fc7b8d6e5ada56fcfe2a1", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -1,7 +1,5 @@\n //! lint on missing cargo common metadata\n \n-use std::path::PathBuf;\n-\n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -69,12 +67,8 @@ fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, fiel\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n }\n \n-fn is_empty_str(value: &Option<String>) -> bool {\n-    value.as_ref().map_or(true, String::is_empty)\n-}\n-\n-fn is_empty_path(value: &Option<PathBuf>) -> bool {\n-    value.as_ref().and_then(|x| x.to_str()).map_or(true, str::is_empty)\n+fn is_empty_str<T: AsRef<std::ffi::OsStr>>(value: &Option<T>) -> bool {\n+    value.as_ref().map_or(true, |s| s.as_ref().is_empty())\n }\n \n fn is_empty_vec(value: &[String]) -> bool {\n@@ -98,15 +92,15 @@ impl LateLintPass<'_> for CargoCommonMetadata {\n                     missing_warning(cx, &package, \"package.description\");\n                 }\n \n-                if is_empty_str(&package.license) && is_empty_path(&package.license_file) {\n+                if is_empty_str(&package.license) && is_empty_str(&package.license_file) {\n                     missing_warning(cx, &package, \"either package.license or package.license_file\");\n                 }\n \n                 if is_empty_str(&package.repository) {\n                     missing_warning(cx, &package, \"package.repository\");\n                 }\n \n-                if is_empty_path(&package.readme) {\n+                if is_empty_str(&package.readme) {\n                     missing_warning(cx, &package, \"package.readme\");\n                 }\n "}, {"sha": "2203d1c39f1793e6c517b7db92f3baf19c6d691f", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -95,7 +95,7 @@ impl CognitiveComplexity {\n                     });\n \n                     if let Some((low, high)) = pos {\n-                        Span::new(low, high, header_span.ctxt())\n+                        Span::new(low, high, header_span.ctxt(), header_span.parent())\n                     } else {\n                         return;\n                     }"}, {"sha": "6ded2f233efea615f800800a41ffd3fda50a563a", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -472,7 +472,7 @@ fn emit_branches_sharing_code_lint(\n \n         let mut span = moved_start.to(span_end);\n         // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n-        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt());\n+        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt(), span.parent());\n         if snippet_opt(cx, test_span)\n             .map(|snip| snip == \"    \")\n             .unwrap_or_default()"}, {"sha": "0b61909ddd82d5f7df7a29342aad3eaeabf2a893", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -665,6 +665,7 @@ fn check_text(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, text: &str\n             span.lo() + BytePos::from_usize(offset),\n             span.lo() + BytePos::from_usize(offset + word.len()),\n             span.ctxt(),\n+            span.parent(),\n         );\n \n         check_word(cx, word, span);"}, {"sha": "090be73af3b7a9f073f6ced9cf7cb598d02f5c1b", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -91,8 +91,11 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                     if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n-                            trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n+                            trait_self_ty = Some(\n+                                TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id())\n+                                    .self_ty()\n+                                    .skip_binder(),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "f22f52b949e1a8609bb55be59bac866544a02758", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef<'_>]) {\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc_hir::{Expr, ExprKind, ImplItemKind, QPath};\n "}, {"sha": "2fe32fcf6651a8b67420a4fc798d8b2326f9aba4", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)));\n                         if let Some(pos) = pos {\n-                            Span::new(pos, pos, item.span.data().ctxt)\n+                            Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         } else {\n                             return;\n                         }\n@@ -173,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                                     Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n                                 })\n                                 .expect(\"failed to create span for type parameters\");\n-                            Span::new(pos, pos, item.span.data().ctxt)\n+                            Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         });\n \n                         let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);"}, {"sha": "fe6814e35d0ca1da4475f6428eb0c3fcd8186ec9", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -63,6 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n                     hi_pos - BytePos::from_usize(\"const\".len()),\n                     hi_pos,\n                     item.span.ctxt(),\n+                    item.span.parent(),\n                 );\n                 span_lint_and_then(\n                     cx,"}, {"sha": "897249174822cad0893287dcce17e81e74f1ddb0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -31,7 +31,7 @@ extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n+extern crate rustc_mir_dataflow;\n extern crate rustc_parse;\n extern crate rustc_parse_format;\n extern crate rustc_session;\n@@ -1961,7 +1961,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));\n     store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n-    store.register_late_pass(|| Box::new(regex::Regex::default()));\n+    store.register_late_pass(|| Box::new(regex::Regex));\n     store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n     store.register_late_pass(|| Box::new(copy_iterator::CopyIterator));\n     store.register_late_pass(|| Box::new(format::UselessFormat));"}, {"sha": "dd60e460d21fe3b9cfbac874120caa134f9f1c03", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -10,13 +10,7 @@ use rustc_middle::ty;\n use rustc_span::sym;\n \n /// Checks for the `FOR_KV_MAP` lint.\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    pat: &'tcx Pat<'_>,\n-    arg: &'tcx Expr<'_>,\n-    body: &'tcx Expr<'_>,\n-    expr: &'tcx Expr<'_>,\n-) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, arg: &'tcx Expr<'_>, body: &'tcx Expr<'_>) {\n     let pat_span = pat.span;\n \n     if let PatKind::Tuple(pat, _) = pat.kind {\n@@ -43,7 +37,7 @@ pub(super) fn check<'tcx>(\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,\n-                    expr.span,\n+                    arg_span,\n                     &format!(\"you seem to want to iterate on a map's {}s\", kind),\n                     |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");"}, {"sha": "e640c62ebdaceabc102d798869f804e7a1d203b0", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -5,12 +5,12 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, expr: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n             ITER_NEXT_LOOP,\n-            expr.span,\n+            arg.span,\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );"}, {"sha": "5df1b79640164302d2a8532175486208942569e4", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -616,15 +616,15 @@ fn check_for_loop<'tcx>(\n         needless_range_loop::check(cx, pat, arg, body, expr);\n         explicit_counter_loop::check(cx, pat, arg, body, expr);\n     }\n-    check_for_loop_arg(cx, pat, arg, expr);\n-    for_kv_map::check(cx, pat, arg, body, expr);\n+    check_for_loop_arg(cx, pat, arg);\n+    for_kv_map::check(cx, pat, arg, body);\n     mut_range_bound::check(cx, arg, body);\n     single_element_loop::check(cx, pat, arg, body, expr);\n     same_item_push::check(cx, pat, arg, body, expr);\n     manual_flatten::check(cx, pat, arg, body, span);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n+fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n@@ -637,7 +637,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg, expr);\n+                next_loop_linted = iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }"}, {"sha": "7157b80118558b889cc41556e071dd71891a903e", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -144,7 +144,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n@@ -170,7 +170,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg("}, {"sha": "b390476a664d9e54f4c4490df4763204cc9c3265", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -69,8 +69,6 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n struct IterExpr {\n     /// The span of the whole expression, not just the path and fields stored here.\n     span: Span,\n-    /// The HIR id of the whole expression, not just the path and fields stored here.\n-    hir_id: HirId,\n     /// The fields used, in order of child to parent.\n     fields: Vec<Symbol>,\n     /// The path being used.\n@@ -81,14 +79,12 @@ struct IterExpr {\n /// the expression might have side effects.\n fn try_parse_iter_expr(cx: &LateContext<'_>, mut e: &Expr<'_>) -> Option<IterExpr> {\n     let span = e.span;\n-    let hir_id = e.hir_id;\n     let mut fields = Vec::new();\n     loop {\n         match e.kind {\n             ExprKind::Path(ref path) => {\n                 break Some(IterExpr {\n                     span,\n-                    hir_id,\n                     fields,\n                     path: cx.qpath_res(path, e.hir_id),\n                 });"}, {"sha": "0e682c5cded80a338065b66dd92a26507f56b104", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -29,8 +29,6 @@ declare_clippy_lint! {\n     \"#[macro_use] is no longer needed\"\n }\n \n-const BRACKETS: &[char] = &['<', '>'];\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n struct PathAndSpan {\n     path: String,\n@@ -42,23 +40,11 @@ struct PathAndSpan {\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,\n-    path: String,\n }\n \n impl MacroRefData {\n-    pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let sm = cx.sess().source_map();\n-        let mut path = sm.filename_for_diagnostics(&sm.span_to_filename(callee)).to_string();\n-\n-        // std lib paths are <::std::module::file type>\n-        // so remove brackets, space and type.\n-        if path.contains('<') {\n-            path = path.replace(BRACKETS, \"\");\n-        }\n-        if path.contains(' ') {\n-            path = path.split(' ').next().unwrap().to_string();\n-        }\n-        Self { name, path }\n+    pub fn new(name: String) -> Self {\n+        Self { name }\n     }\n }\n \n@@ -78,29 +64,24 @@ impl MacroUseImports {\n     fn push_unique_macro(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n-            if !self.collected.contains(&call_site) {\n-                let name = if name.contains(\"::\") {\n-                    name.split(\"::\").last().unwrap().to_string()\n-                } else {\n-                    name.to_string()\n-                };\n+        if span.source_callee().is_some() && !self.collected.contains(&call_site) {\n+            let name = if name.contains(\"::\") {\n+                name.split(\"::\").last().unwrap().to_string()\n+            } else {\n+                name.to_string()\n+            };\n \n-                self.mac_refs.push(MacroRefData::new(name, callee.def_site, cx));\n-                self.collected.insert(call_site);\n-            }\n+            self.mac_refs.push(MacroRefData::new(name));\n+            self.collected.insert(call_site);\n         }\n     }\n \n     fn push_unique_macro_pat_ty(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n-            if !self.collected.contains(&call_site) {\n-                self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n-                self.collected.insert(call_site);\n-            }\n+        if span.source_callee().is_some() && !self.collected.contains(&call_site) {\n+            self.mac_refs.push(MacroRefData::new(name.to_string()));\n+            self.collected.insert(call_site);\n         }\n     }\n }"}, {"sha": "55688677e1d141d423d39ef222c1a0a964d006b8", "filename": "clippy_lints/src/methods/manual_split_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_split_once.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -180,7 +180,7 @@ fn parse_iter_usage(\n                 },\n                 _,\n             ) => {\n-                let parent_span = e.span.parent().unwrap();\n+                let parent_span = e.span.parent_callsite().unwrap();\n                 if parent_span.ctxt() == ctxt {\n                     (Some(UnwrapKind::QuestionMark), parent_span)\n                 } else {"}, {"sha": "2025056ac94c3365a398dfb22987be6513a47791", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -997,7 +997,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.iter().nth()` (and the related\n-    /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n+    /// `.iter_mut().nth()`) on standard library types with *O*(1) element access.\n     ///\n     /// ### Why is this bad?\n     /// `.get()` and `.get_mut()` are more efficient and more\n@@ -2063,7 +2063,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n@@ -2080,7 +2080,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n             if !contains_ty(cx.tcx, ret_ty, self_ty);\n \n             then {"}, {"sha": "f351d0098b7509cf6abdddfef53c21a29cc7a663", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -120,7 +120,7 @@ impl EarlyLintPass for ModStyle {\n                     correct.push(\"mod.rs\");\n                     cx.struct_span_lint(\n                         SELF_NAMED_MODULE_FILES,\n-                        Span::new(file.start_pos, file.start_pos, SyntaxContext::root()),\n+                        Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n                         |build| {\n                             let mut lint =\n                                 build.build(&format!(\"`mod.rs` files are required, found `{}`\", path.display()));\n@@ -167,7 +167,7 @@ fn check_self_named_mod_exists(cx: &EarlyContext<'_>, path: &Path, file: &Source\n \n         cx.struct_span_lint(\n             MOD_MODULE_FILES,\n-            Span::new(file.start_pos, file.start_pos, SyntaxContext::root()),\n+            Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n             |build| {\n                 let mut lint = build.build(&format!(\"`mod.rs` files are not allowed, found `{}`\", path.display()));\n                 lint.help(&format!(\"move `{}` to `{}`\", path.display(), mod_file.display(),));"}, {"sha": "7041e4f980ef435cdecbb8c77675c7b2a08fef1f", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::{\n     Mutability,\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n-use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n+use rustc_mir_dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;"}, {"sha": "5d08aee1e5f8880f63e1382bb74635e3d85c32d1", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -3,10 +3,9 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitKind, StrStyle};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, HirId};\n+use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;\n \n@@ -52,13 +51,7 @@ declare_clippy_lint! {\n     \"trivial regular expressions\"\n }\n \n-#[derive(Clone, Default)]\n-pub struct Regex {\n-    spans: FxHashSet<Span>,\n-    last: Option<HirId>,\n-}\n-\n-impl_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n+declare_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n \n impl<'tcx> LateLintPass<'tcx> for Regex {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -91,7 +84,7 @@ fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n     let end = base.lo() + BytePos(u32::try_from(c.end.offset).expect(\"offset too large\") + offset);\n     let start = base.lo() + BytePos(u32::try_from(c.start.offset).expect(\"offset too large\") + offset);\n     assert!(start <= end);\n-    Span::new(start, end, base.ctxt())\n+    Span::new(start, end, base.ctxt(), base.parent())\n }\n \n fn const_str<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> Option<String> {"}, {"sha": "4a67cabf323a6a1489f84d485bce350acc98a8cf", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -69,6 +69,7 @@ impl TabsInDocComments {\n                     attr.span.lo() + BytePos(3 + lo),\n                     attr.span.lo() + BytePos(3 + hi),\n                     attr.span.ctxt(),\n+                    attr.span.parent(),\n                 );\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "3e2a4e9748db6ae6079bae02204cbd69256cbf2e", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -892,7 +892,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n                 }).collect();\n             if !check_path(cx, &path[..]);\n             then {\n-                span_lint(cx, CLIPPY_LINTS_INTERNAL, item.span, \"invalid path\");\n+                span_lint(cx, INVALID_PATHS, item.span, \"invalid path\");\n             }\n         }\n     }\n@@ -1222,5 +1222,10 @@ fn if_chain_local_span(cx: &LateContext<'_>, local: &Local<'_>, if_chain_span: S\n     let sm = cx.sess().source_map();\n     let span = sm.span_extend_to_prev_str(span, \"let\", false);\n     let span = sm.span_extend_to_next_char(span, ';', false);\n-    Span::new(span.lo() - BytePos(3), span.hi() + BytePos(1), span.ctxt())\n+    Span::new(\n+        span.lo() - BytePos(3),\n+        span.hi() + BytePos(1),\n+        span.ctxt(),\n+        span.parent(),\n+    )\n }"}, {"sha": "0d27874b7affb88d7a4dc16f119469919cbf23ef", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -298,6 +298,7 @@ pub struct ClippyConfiguration {\n     default: String,\n     lints: Vec<String>,\n     doc: String,\n+    #[allow(dead_code)]\n     deprecation_reason: Option<&'static str>,\n }\n "}, {"sha": "e7fca3ae5d401b8b3f84c4c71c340145a95d27cb", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -5,8 +5,8 @@ edition = \"2021\"\n publish = false\n \n [dependencies]\n-if_chain = \"1.0.0\"\n-rustc-semver=\"1.1.0\"\n+if_chain = \"1.0\"\n+rustc-semver = \"1.1\"\n \n [features]\n deny-warnings = []"}, {"sha": "ba4d50bf74469307cbfedc51e1c979c532c74d4e", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -105,8 +105,7 @@ impl<'hir> IfLet<'hir> {\n             if_else,\n         ) = expr.kind\n         {\n-            let hir = cx.tcx.hir();\n-            let mut iter = hir.parent_iter(expr.hir_id);\n+            let mut iter = cx.tcx.hir().parent_iter(expr.hir_id);\n             if let Some((_, Node::Block(Block { stmts: [], .. }))) = iter.next() {\n                 if let Some((\n                     _,\n@@ -524,28 +523,12 @@ impl FormatArgsExpn<'tcx> {\n             if let ExpnKind::Macro(_, name) = expr.span.ctxt().outer_expn_data().kind;\n             let name = name.as_str();\n             if name.ends_with(\"format_args\") || name.ends_with(\"format_args_nl\");\n-\n-            if let ExprKind::Match(inner_match, [arm], _) = expr.kind;\n-\n-            // `match match`, if you will\n-            if let ExprKind::Match(args, [inner_arm], _) = inner_match.kind;\n-            if let ExprKind::Tup(value_args) = args.kind;\n-            if let Some(value_args) = value_args\n-                .iter()\n-                .map(|e| match e.kind {\n-                    ExprKind::AddrOf(_, _, e) => Some(e),\n-                    _ => None,\n-                })\n-                .collect();\n-            if let ExprKind::Array(args) = inner_arm.body.kind;\n-\n-            if let ExprKind::Block(Block { stmts: [], expr: Some(expr), .. }, _) = arm.body.kind;\n-            if let ExprKind::Call(_, call_args) = expr.kind;\n-            if let Some((strs_ref, fmt_expr)) = match call_args {\n+            if let ExprKind::Call(_, args) = expr.kind;\n+            if let Some((strs_ref, args, fmt_expr)) = match args {\n                 // Arguments::new_v1\n-                [strs_ref, _] => Some((strs_ref, None)),\n+                [strs_ref, args] => Some((strs_ref, args, None)),\n                 // Arguments::new_v1_formatted\n-                [strs_ref, _, fmt_expr] => Some((strs_ref, Some(fmt_expr))),\n+                [strs_ref, args, fmt_expr, _unsafe_arg] => Some((strs_ref, args, Some(fmt_expr))),\n                 _ => None,\n             };\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, strs_arr) = strs_ref.kind;\n@@ -561,6 +544,17 @@ impl FormatArgsExpn<'tcx> {\n                     None\n                 })\n                 .collect();\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args.kind;\n+            if let ExprKind::Match(args, [arm], _) = args.kind;\n+            if let ExprKind::Tup(value_args) = args.kind;\n+            if let Some(value_args) = value_args\n+                .iter()\n+                .map(|e| match e.kind {\n+                    ExprKind::AddrOf(_, _, e) => Some(e),\n+                    _ => None,\n+                })\n+                .collect();\n+            if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,"}, {"sha": "7f5a1bf9c0741707f0e4e34a66cb0fb6a6e199d7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -18,14 +18,14 @@\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n+extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n@@ -520,7 +520,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             }\n         };\n     }\n-    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export<HirId>> {\n+    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export> {\n         tcx.item_children(def_id)\n             .iter()\n             .find(|item| item.ident.name.as_str() == name)\n@@ -557,7 +557,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n                 None\n             }\n         });\n-    try_res!(last).res\n+    try_res!(last).res.expect_non_local()\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n@@ -833,12 +833,11 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n         ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n     ));\n \n-    let map = cx.tcx.hir();\n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;\n     let mut capture_expr_ty = e;\n \n-    for (parent_id, parent) in map.parent_iter(e.hir_id) {\n+    for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n         if let [Adjustment {\n             kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n             target,\n@@ -1224,8 +1223,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n \n /// Gets the loop or closure enclosing the given expression, if any.\n pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    let map = tcx.hir();\n-    for (_, node) in map.parent_iter(expr.hir_id) {\n+    for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n                 e\n@@ -1244,8 +1242,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n \n /// Gets the parent node if it's an impl block.\n pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n-    let map = tcx.hir();\n-    match map.parent_iter(id).next() {\n+    match tcx.hir().parent_iter(id).next() {\n         Some((\n             _,\n             Node::Item(Item {\n@@ -1259,8 +1256,7 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n \n /// Checks if the given expression is the else clause of either an `if` or `if let` expression.\n pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n-    let map = tcx.hir();\n-    let mut iter = map.parent_iter(expr.hir_id);\n+    let mut iter = tcx.hir().parent_iter(expr.hir_id);\n     match iter.next() {\n         Some((\n             _,\n@@ -1794,9 +1790,8 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n \n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n-    let map = tcx.hir();\n     let mut child_id = expr.hir_id;\n-    let mut iter = map.parent_iter(child_id);\n+    let mut iter = tcx.hir().parent_iter(child_id);\n     loop {\n         match iter.next() {\n             None => break None,"}, {"sha": "7a8208c12c0d1e3226923ddaffcd2bc128e9c3c5", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -68,6 +68,7 @@ pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n #[cfg(feature = \"internal-lints\")]\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n@@ -104,7 +105,7 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n-pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"os\", \"imp\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n+pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];"}, {"sha": "238728f090f56aba3b5500f3545ee8177f0570d6", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -192,7 +192,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n@@ -364,7 +364,7 @@ fn check_terminator(\n }\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n-    rustc_mir::const_eval::is_const_fn(tcx, def_id)\n+    rustc_const_eval::const_eval::is_const_fn(tcx, def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire"}, {"sha": "f33f1b65eabdba1a45c3859f9ea941c18cd7bf4e", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -11,15 +11,15 @@ publish = false\n \n [dependencies]\n clap = \"2.33\"\n-flate2 = {version = \"1.0.19\"}\n-fs_extra = {version = \"1.2.0\"}\n-rayon = {version = \"1.5.0\"}\n-serde = {version = \"1.0\", features = [\"derive\"]}\n-serde_json = {version = \"1.0\"}\n-tar = {version = \"0.4.30\"}\n-toml = {version = \"0.5\"}\n-ureq = {version = \"2.0.0-rc3\"}\n-walkdir = {version = \"2.3.2\"}\n+flate2 = \"1.0\"\n+fs_extra = \"1.2\"\n+rayon = \"1.5\"\n+serde = { version = \"1.0\", features = [\"derive\"] }\n+serde_json = \"1.0\"\n+tar = \"0.4\"\n+toml = \"0.5\"\n+ureq = \"2.2\"\n+walkdir = \"2.3\"\n \n [features]\n deny-warnings = []"}, {"sha": "660401ff28c5de4ac6f38defee3da72e3cc48575", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-09-08\"\n+channel = \"nightly-2021-09-28\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "20aa81b98a080c1b01478d2466910e4ceb5c9a5c", "filename": "tests/ui-internal/invalid_paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui-internal%2Finvalid_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui-internal%2Finvalid_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.stderr?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -4,7 +4,7 @@ error: invalid path\n LL |     pub const BAD_CRATE_PATH: [&str; 2] = [\"bad\", \"path\"];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::clippy-lints-internal` implied by `-D warnings`\n+   = note: `-D clippy::invalid-paths` implied by `-D warnings`\n \n error: invalid path\n   --> $DIR/invalid_paths.rs:20:5"}, {"sha": "9114d8754dcc8f4b0ad598aa2b0faaaeecd882fb", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}, {"sha": "8a5f0d6a74976665c8181638cde258c82ab50716", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7915b00c235e9b5861564f3be78dba330980ee/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=cb7915b00c235e9b5861564f3be78dba330980ee", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}]}