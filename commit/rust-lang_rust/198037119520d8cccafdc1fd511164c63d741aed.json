{"sha": "198037119520d8cccafdc1fd511164c63d741aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODAzNzExOTUyMGQ4Y2NjYWZkYzFmZDUxMTE2NGM2M2Q3NDFhZWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T10:17:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T10:19:26Z"}, "message": "Better use of env vars", "tree": {"sha": "d66840d67a35854e9e4316b90766e5503954dc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66840d67a35854e9e4316b90766e5503954dc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198037119520d8cccafdc1fd511164c63d741aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198037119520d8cccafdc1fd511164c63d741aed", "html_url": "https://github.com/rust-lang/rust/commit/198037119520d8cccafdc1fd511164c63d741aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198037119520d8cccafdc1fd511164c63d741aed/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2962a603c90f0e24bafc2213a3265ecc9f4f9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2962a603c90f0e24bafc2213a3265ecc9f4f9bc", "html_url": "https://github.com/rust-lang/rust/commit/c2962a603c90f0e24bafc2213a3265ecc9f4f9bc"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "27adb7d3e4825464b96e1ddf0715eb96f77fdd90", "filename": "Readme.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/198037119520d8cccafdc1fd511164c63d741aed/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/198037119520d8cccafdc1fd511164c63d741aed/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=198037119520d8cccafdc1fd511164c63d741aed", "patch": "@@ -18,7 +18,6 @@ $ ./test.sh --release\n ### Cargo\n \n ```bash\n-$ export CG_CLIF_INCR_CACHE=1 # Enable caching of object files in the incremental cache\n $ CHANNEL=\"release\" $cg_clif_dir/cargo.sh run\n ```\n \n@@ -27,10 +26,23 @@ If you compiled cg_clif in debug mode you should use `CHANNEL=\"debug\"` instead o\n ### Rustc\n \n ```bash\n-$ export CG_CLIF_INCR_CACHE=1 # Enable caching of object files in the incremental cache\n $ rustc -Cpanic=abort -Zcodegen-backend=$cg_clif_dir/target/release/librustc_codegen_cranelift.so --sysroot $cg_clif_dir/build_sysroot/sysroot my_crate.rs\n ```\n \n+## Env vars\n+\n+<dl>\n+    <dt>CG_CLIF_JIT</dt>\n+    <dd>Enable JIT mode to immediately run a program instead of writing an executable file.</dd>\n+    <dt>CG_CLIF_JIT_ARGS</dt>\n+    <dd>When JIT mode is enable pass these arguments to the program.</dd>\n+    <dt>CG_CLIF_INCR_CACHE_DISABLE</dt>\n+    <dd>Don't cache object files in the incremental cache. Useful during development of cg_clif\n+    to make it possible to use incremental mode for all analyses performed by rustc without caching\n+    object files when their content should have been changed by a change to cg_clif.</dd>\n+    <dt>CG_CLIF_DISPLAY_CG_TIME</dt>\n+    <dd>Display the time it took to perform codegen for a crate</dd>\n+</dl>\n \n ## Not yet supported\n "}, {"sha": "e2534da89e15258abd929d861061b247d7de9241", "filename": "config.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/198037119520d8cccafdc1fd511164c63d741aed/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/198037119520d8cccafdc1fd511164c63d741aed/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=198037119520d8cccafdc1fd511164c63d741aed", "patch": "@@ -24,3 +24,6 @@ export RUSTC_LOG=warn # display metadata load errors\n \n export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/$TARGET_TRIPLE/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n+\n+export CG_CLIF_DISPLAY_CG_TIME=1\n+export CG_CLIF_INCR_CACHE_DISABLED=1"}, {"sha": "83c1b164fc122d46e9a59046b09a3d18bd6ebd49", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198037119520d8cccafdc1fd511164c63d741aed/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198037119520d8cccafdc1fd511164c63d741aed/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=198037119520d8cccafdc1fd511164c63d741aed", "patch": "@@ -9,7 +9,7 @@ use crate::prelude::*;\n pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n-    if std::env::var(\"SHOULD_RUN\").is_ok () {\n+    if std::env::var(\"CG_CLIF_JIT\").is_ok () {\n         // When using JIT, dylibs won't find the __cg_clif_global_atomic_mutex data object defined here,\n         // so instead define it in the cg_clif dylib.\n "}, {"sha": "2fcd5e2932ca24a28e26ea554f4efbadc8627537", "filename": "src/driver.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/198037119520d8cccafdc1fd511164c63d741aed/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198037119520d8cccafdc1fd511164c63d741aed/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=198037119520d8cccafdc1fd511164c63d741aed", "patch": "@@ -21,7 +21,7 @@ pub fn codegen_crate(\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    if std::env::var(\"SHOULD_RUN\").is_ok()\n+    if std::env::var(\"CG_CLIF_JIT\").is_ok()\n         && tcx.sess.crate_types.get().contains(&CrateType::Executable)\n     {\n         #[cfg(not(target_arch = \"wasm32\"))]\n@@ -90,12 +90,12 @@ fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n-    println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because the CG_CLIF_JIT env var is set\");\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_main) };\n \n-    let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_| String::new());\n+    let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = args\n         .split(\" \")\n         .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n@@ -215,14 +215,14 @@ fn run_aot(\n             let obj = product.emit();\n             std::fs::write(&tmp_file, obj).unwrap();\n \n-            let work_product = if std::env::var(\"CG_CLIF_INCR_CACHE\").is_ok() {\n+            let work_product = if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() {\n+                None\n+            } else {\n                 rustc_incremental::copy_cgu_workproducts_to_incr_comp_cache_dir(\n                     tcx.sess,\n                     &name,\n                     &[(WorkProductFileKind::Object, tmp_file.clone())],\n                 )\n-            } else {\n-                None\n             };\n \n             ModuleCodegenResult(\n@@ -251,6 +251,7 @@ fn run_aot(\n             tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n \n             match cgu_reuse {\n+                _ if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() => {}\n                 CguReuse::No => {}\n                 CguReuse::PreLto => {\n                     let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();\n@@ -491,12 +492,16 @@ fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n }\n \n fn time<R>(sess: &Session, name: &'static str, f: impl FnOnce() -> R) -> R {\n-    println!(\"[{}] start\", name);\n-    let before = std::time::Instant::now();\n-    let res = sess.time(name, f);\n-    let after = std::time::Instant::now();\n-    println!(\"[{}] end time: {:?}\", name, after - before);\n-    res\n+    if std::env::var(\"CG_CLIF_DISPLAY_CG_TIME\").is_ok() {\n+        println!(\"[{}] start\", name);\n+        let before = std::time::Instant::now();\n+        let res = sess.time(name, f);\n+        let after = std::time::Instant::now();\n+        println!(\"[{}] end time: {:?}\", name, after - before);\n+        res\n+    } else {\n+        sess.time(name, f)\n+    }\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_codegen_ssa/base.rs#L922-L953"}, {"sha": "bc4c807cbf28631d63da52179ae48ceb50a41176", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198037119520d8cccafdc1fd511164c63d741aed/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/198037119520d8cccafdc1fd511164c63d741aed/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=198037119520d8cccafdc1fd511164c63d741aed", "patch": "@@ -22,7 +22,7 @@ echo \"[BUILD] example\"\n $RUSTC example/example.rs --crate-type lib\n \n echo \"[JIT] mini_core_hello_world\"\n-JIT_ARGS=\"abc bcd\" SHOULD_RUN=1 $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit\n+CG_CLIF_JIT=1 CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit\n \n echo \"[AOT] mini_core_hello_world\"\n $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g\n@@ -41,7 +41,7 @@ $RUSTC example/alloc_example.rs --crate-type bin\n ./target/out/alloc_example\n \n echo \"[JIT] std_example\"\n-SHOULD_RUN=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs\n+CG_CLIF_JIT=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs\n \n echo \"[AOT] dst_field_align\"\n # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed."}]}