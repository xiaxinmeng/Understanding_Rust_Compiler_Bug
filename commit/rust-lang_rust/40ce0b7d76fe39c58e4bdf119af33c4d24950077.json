{"sha": "40ce0b7d76fe39c58e4bdf119af33c4d24950077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2UwYjdkNzZmZTM5YzU4ZTRiZGYxMTlhZjMzYzRkMjQ5NTAwNzc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "message": "deque: Speed up deque growth by a lot\n\nFix some issues with the deque being very slow, keep the same vec around\ninstead of constructing a new. Move as few elements as possible, so the\nself.lo point is not moved after grow.\n\n   [o o o o o|o o o]\n       hi...^ ^.... lo\n\n   grows to\n\n   [. . . . .|o o o o o o o o|. . .]\n              ^.. lo        ^.. hi\n\nIf the deque is append-only, it will result in moving no elements on\ngrow. If the deque is prepend-only, all will be moved each time.\n\nThe bench tests added show big improvements:\n\nTimed using `rust build -O --test extra.rs && ./extra --bench deque`\n\nOld version:\n\ntest deque::tests::bench_add_back ... bench: 4976 ns/iter (+/- 9)\ntest deque::tests::bench_add_front ... bench: 4108 ns/iter (+/- 18)\ntest deque::tests::bench_grow ... bench: 416964 ns/iter (+/- 4197)\ntest deque::tests::bench_new ... bench: 408 ns/iter (+/- 12)\n\nWith this commit:\n\ntest deque::tests::bench_add_back ... bench: 12 ns/iter (+/- 0)\ntest deque::tests::bench_add_front ... bench: 16 ns/iter (+/- 0)\ntest deque::tests::bench_grow ... bench: 1515 ns/iter (+/- 30)\ntest deque::tests::bench_new ... bench: 419 ns/iter (+/- 3)", "tree": {"sha": "12af2feccbfcf1d06b6693d60538e49bc2d009fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12af2feccbfcf1d06b6693d60538e49bc2d009fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ce0b7d76fe39c58e4bdf119af33c4d24950077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce0b7d76fe39c58e4bdf119af33c4d24950077", "html_url": "https://github.com/rust-lang/rust/commit/40ce0b7d76fe39c58e4bdf119af33c4d24950077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ce0b7d76fe39c58e4bdf119af33c4d24950077/comments", "author": null, "committer": null, "parents": [{"sha": "81933edf92afda59ea41ec3692ab43759285b731", "url": "https://api.github.com/repos/rust-lang/rust/commits/81933edf92afda59ea41ec3692ab43759285b731", "html_url": "https://github.com/rust-lang/rust/commit/81933edf92afda59ea41ec3692ab43759285b731"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "02d3e81148f17dd3b14c9126b454420ee9e0e39e", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/40ce0b7d76fe39c58e4bdf119af33c4d24950077/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce0b7d76fe39c58e4bdf119af33c4d24950077/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=40ce0b7d76fe39c58e4bdf119af33c4d24950077", "patch": "@@ -11,7 +11,6 @@\n //! A double-ended queue implemented as a circular buffer\n \n use std::uint;\n-use std::util::replace;\n use std::vec;\n use std::cast::transmute;\n \n@@ -103,28 +102,28 @@ impl<T> Deque<T> {\n \n     /// Prepend an element to the deque\n     pub fn add_front(&mut self, t: T) {\n-        let oldlo = self.lo;\n+        if self.nelts == self.elts.len() {\n+            grow(self.nelts, self.lo, &mut self.elts);\n+            self.hi = self.lo + self.nelts;\n+        }\n         if self.lo == 0u {\n             self.lo = self.elts.len() - 1u;\n         } else { self.lo -= 1u; }\n-        if self.nelts == self.elts.len() {\n-            self.elts = grow(self.nelts, oldlo, self.elts);\n-            self.lo = self.elts.len() - 1u;\n-            self.hi = self.nelts;\n-        }\n         self.elts[self.lo] = Some(t);\n         self.nelts += 1u;\n     }\n \n     /// Append an element to the deque\n     pub fn add_back(&mut self, t: T) {\n         if self.lo == self.hi && self.nelts != 0u {\n-            self.elts = grow(self.nelts, self.lo, self.elts);\n-            self.lo = 0u;\n-            self.hi = self.nelts;\n+            grow(self.nelts, self.lo, &mut self.elts);\n+            self.hi = self.lo + self.nelts;\n         }\n         self.elts[self.hi] = Some(t);\n-        self.hi = (self.hi + 1u) % self.elts.len();\n+        self.hi += 1;\n+        if self.hi == self.elts.len() {\n+            self.hi = 0;\n+        }\n         self.nelts += 1u;\n     }\n \n@@ -235,15 +234,19 @@ iterator!{impl DequeMutRevIterator -> &'self mut T, -1}\n \n /// Grow is only called on full elts, so nelts is also len(elts), unlike\n /// elsewhere.\n-fn grow<T>(nelts: uint, lo: uint, elts: &mut [Option<T>]) -> ~[Option<T>] {\n+fn grow<T>(nelts: uint, lo: uint, elts: &mut ~[Option<T>]) {\n     assert_eq!(nelts, elts.len());\n-    let mut rv = ~[];\n+    let newlen = elts.capacity() * 2;\n+    elts.reserve(newlen);\n \n-    do rv.grow_fn(nelts + 1) |i| {\n-        replace(&mut elts[(lo + i) % nelts], None)\n+    /* fill with None */\n+    for uint::range(elts.len(), elts.capacity()) |_| {\n+        elts.push(None);\n+    }\n+    /* move the former wraparound to the new half */\n+    for uint::range(0, lo) |i| {\n+        elts.swap(i, nelts + i);\n     }\n-\n-    rv\n }\n \n fn get<'r, T>(elts: &'r [Option<T>], i: uint) -> &'r T {"}]}