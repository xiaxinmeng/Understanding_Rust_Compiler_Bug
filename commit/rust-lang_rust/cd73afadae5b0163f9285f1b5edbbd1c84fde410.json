{"sha": "cd73afadae5b0163f9285f1b5edbbd1c84fde410", "node_id": "C_kwDOAAsO6NoAKGNkNzNhZmFkYWU1YjAxNjNmOTI4NWYxYjVlZGJiZDFjODRmZGU0MTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T08:06:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T08:06:56Z"}, "message": "Auto merge of #96422 - tmccombs:mutex-unpoison, r=m-ou-se\n\nAdd functions to un-poison Mutex and RwLock\n\nSee discussion at https://internals.rust-lang.org/t/unpoisoning-a-mutex/16521/3", "tree": {"sha": "30c8e0091223a6c54e9623f38ef220430b03de7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30c8e0091223a6c54e9623f38ef220430b03de7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd73afadae5b0163f9285f1b5edbbd1c84fde410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd73afadae5b0163f9285f1b5edbbd1c84fde410", "html_url": "https://github.com/rust-lang/rust/commit/cd73afadae5b0163f9285f1b5edbbd1c84fde410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd73afadae5b0163f9285f1b5edbbd1c84fde410/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cc7795245347500ddf6dc959cf58a7abe2d935", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc7795245347500ddf6dc959cf58a7abe2d935", "html_url": "https://github.com/rust-lang/rust/commit/52cc7795245347500ddf6dc959cf58a7abe2d935"}, {"sha": "a65afd82d1020f15d347268c077d4b7220268abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65afd82d1020f15d347268c077d4b7220268abc", "html_url": "https://github.com/rust-lang/rust/commit/a65afd82d1020f15d347268c077d4b7220268abc"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "3d8281fe593899e86fe77db24dbe36eaf7667550", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=cd73afadae5b0163f9285f1b5edbbd1c84fde410", "patch": "@@ -364,6 +364,45 @@ impl<T: ?Sized> Mutex<T> {\n         self.poison.get()\n     }\n \n+    /// Clear the poisoned state from a mutex\n+    ///\n+    /// If the mutex is poisoned, it will remain poisoned until this function is called. This\n+    /// allows recovering from a poisoned state and marking that it has recovered. For example, if\n+    /// the value is overwritten by a known-good value, then the mutex can be marked as\n+    /// un-poisoned. Or possibly, the value could be inspected to determine if it is in a\n+    /// consistent state, and if so the poison is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(mutex_unpoison)]\n+    ///\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(0));\n+    /// let c_mutex = Arc::clone(&mutex);\n+    ///\n+    /// let _ = thread::spawn(move || {\n+    ///     let _lock = c_mutex.lock().unwrap();\n+    ///     panic!(); // the mutex gets poisoned\n+    /// }).join();\n+    ///\n+    /// assert_eq!(mutex.is_poisoned(), true);\n+    /// let x = mutex.lock().unwrap_or_else(|mut e| {\n+    ///     **e.get_mut() = 1;\n+    ///     mutex.clear_poison();\n+    ///     e.into_inner()\n+    /// });\n+    /// assert_eq!(mutex.is_poisoned(), false);\n+    /// assert_eq!(*x, 1);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"mutex_unpoison\", issue = \"96469\")]\n+    pub fn clear_poison(&self) {\n+        self.poison.clear();\n+    }\n+\n     /// Consumes this mutex, returning the underlying data.\n     ///\n     /// # Errors"}, {"sha": "ba91fb0499ff0287a577cee60ba0460107b52167", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=cd73afadae5b0163f9285f1b5edbbd1c84fde410", "patch": "@@ -40,6 +40,11 @@ impl Flag {\n     pub fn get(&self) -> bool {\n         self.failed.load(Ordering::Relaxed)\n     }\n+\n+    #[inline]\n+    pub fn clear(&self) {\n+        self.failed.store(false, Ordering::Relaxed)\n+    }\n }\n \n pub struct Guard {"}, {"sha": "4f1b4bedaab25c6758c47e60266c0fffd5fee3d8", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd73afadae5b0163f9285f1b5edbbd1c84fde410/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=cd73afadae5b0163f9285f1b5edbbd1c84fde410", "patch": "@@ -368,6 +368,45 @@ impl<T: ?Sized> RwLock<T> {\n         self.poison.get()\n     }\n \n+    /// Clear the poisoned state from a lock\n+    ///\n+    /// If the lock is poisoned, it will remain poisoned until this function is called. This allows\n+    /// recovering from a poisoned state and marking that it has recovered. For example, if the\n+    /// value is overwritten by a known-good value, then the mutex can be marked as un-poisoned. Or\n+    /// possibly, the value could be inspected to determine if it is in a consistent state, and if\n+    /// so the poison is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(mutex_unpoison)]\n+    ///\n+    /// use std::sync::{Arc, RwLock};\n+    /// use std::thread;\n+    ///\n+    /// let lock = Arc::new(RwLock::new(0));\n+    /// let c_lock = Arc::clone(&lock);\n+    ///\n+    /// let _ = thread::spawn(move || {\n+    ///     let _lock = c_lock.write().unwrap();\n+    ///     panic!(); // the mutex gets poisoned\n+    /// }).join();\n+    ///\n+    /// assert_eq!(lock.is_poisoned(), true);\n+    /// let guard = lock.write().unwrap_or_else(|mut e| {\n+    ///     **e.get_mut() = 1;\n+    ///     lock.clear_poison();\n+    ///     e.into_inner()\n+    /// });\n+    /// assert_eq!(lock.is_poisoned(), false);\n+    /// assert_eq!(*guard, 1);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"mutex_unpoison\", issue = \"96469\")]\n+    pub fn clear_poison(&self) {\n+        self.poison.clear();\n+    }\n+\n     /// Consumes this `RwLock`, returning the underlying data.\n     ///\n     /// # Errors"}]}