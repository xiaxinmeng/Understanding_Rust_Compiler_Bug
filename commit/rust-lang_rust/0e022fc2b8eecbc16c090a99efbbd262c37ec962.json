{"sha": "0e022fc2b8eecbc16c090a99efbbd262c37ec962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDIyZmMyYjhlZWNiYzE2YzA5MGE5OWVmYmJkMjYyYzM3ZWM5NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T09:07:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T09:07:35Z"}, "message": "Auto merge of #77580 - petrochenkov:norestarg, r=matthewjasper\n\nrustc_target: Refactor away `TargetResult`\n\nFollow-up to https://github.com/rust-lang/rust/pull/77202.\n\nConstruction of a built-in target is always infallible now, so `TargetResult` is no longer necessary.\n\nThe second commit contains some further cleanup based on built-in target construction being infallible.", "tree": {"sha": "391505974d54c0bcee080445d415c53c677b78e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391505974d54c0bcee080445d415c53c677b78e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "html_url": "https://github.com/rust-lang/rust/commit/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1661f77e7b38546547207158bff2488411dd6697", "url": "https://api.github.com/repos/rust-lang/rust/commits/1661f77e7b38546547207158bff2488411dd6697", "html_url": "https://github.com/rust-lang/rust/commit/1661f77e7b38546547207158bff2488411dd6697"}, {"sha": "1444ad7ba1c34685fecf7b0413403151aba51e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1444ad7ba1c34685fecf7b0413403151aba51e9d", "html_url": "https://github.com/rust-lang/rust/commit/1444ad7ba1c34685fecf7b0413403151aba51e9d"}], "stats": {"total": 1301, "additions": 633, "deletions": 668}, "files": [{"sha": "dd9643913ed8404113297adafe9c167390ec9e6f", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -671,7 +671,8 @@ impl RustcDefaultCalls {\n         for req in &sess.opts.prints {\n             match *req {\n                 TargetList => {\n-                    let mut targets = rustc_target::spec::get_targets().collect::<Vec<String>>();\n+                    let mut targets =\n+                        rustc_target::spec::TARGETS.iter().copied().collect::<Vec<_>>();\n                     targets.sort();\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 }"}, {"sha": "b24518beae2c06c173d7c51e787240f5f560d2bf", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"apple-a12\".to_string();\n     base.max_atomic_width = Some(128);\n@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let arch = \"aarch64\";\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n-    Ok(Target {\n+    Target {\n         llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "ab20ec041ab571456535be62bbb394881e9d0f3c", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::Arm64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -33,5 +33,5 @@ pub fn target() -> TargetResult {\n                 .to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "4619197fc6969d2f877b0ea05164c3b5e6801238", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::Arm64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n             forces_embed_bitcode: true,\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "beb2a0912e6dbb404ebc959633fb2f08f9c966df", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-fuchsia\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "519fd98d2007cb3bc3feda9f7d1167f414f51ae9", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,15 +1,15 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.max_atomic_width = Some(128);\n     // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "09df41d33604d47df37f396c967f45831a8106d9", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n     base.features = \"+neon,+fp-armv8\".to_string();\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"pc\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "cecf3860fa5d53d60ee1671795b068bcc7ec8cb4", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n     base.max_atomic_width = Some(128);\n     base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-cloudabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "78e9f990de2ee0012c30fce6514ab4fcf7c6f31a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "c0532925fb9a61eb67b3798849de36a78928dc0d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-hermit\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n-    })\n+    }\n }"}, {"sha": "67ee463c1780c23d66522b0b3c3975752ff9666a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "cb566c84ed7ab103de0fdc08564a1f4058fd8d5b", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "d6990f7430f8efa6728dcd7aa469821cac1cc98c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = Some(128);\n     base.unsupported_abis = super::arm_base::unsupported_abis();\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "fd45acb332a8c0601eb4b3971becc9569f40f9f6", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -8,7 +8,7 @@\n \n use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),\n@@ -21,7 +21,7 @@ pub fn target() -> Result<Target, String> {\n         unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-none\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -33,5 +33,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"aarch64\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "666f417036efc3e778d7223b3ac39fa65b3b1cad", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -8,7 +8,7 @@\n \n use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),\n@@ -21,7 +21,7 @@ pub fn target() -> Result<Target, String> {\n         unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-none\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -33,5 +33,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"aarch64\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "2b7dbc0ebdbcfab15c62e371412f30324b003ac8", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.max_atomic_width = Some(128);\n     base.unsupported_abis = super::arm_base::unsupported_abis();\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "5f151473e0f8b8d4e413eb15cf70dc6845f7b95d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_redox.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-redox\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "7dfcc1c065f76967b9441f172c3ba308e38064ae", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"uwp\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "fc2d192ef126325c370b7c816f28de3a25260f92", "filename": "compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "7ea008005623264e3f0939efd93027f9a9720e06", "filename": "compiler/rustc_target/src/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     // https://developer.android.com/ndk/guides/abis.html#armeabi\n     base.features = \"+strict-align,+v5te\".to_string();\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "0573cf5ba9ded4296ece4aed8a32f252ff0f0468", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "dbd68e366a1aa21ab8d7a1edca4ac77251f022a8", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "cd5c181ec61ccf8736b3f16add49a63c0faf7b84", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabi\n     // target.\n     base.features = \"+strict-align,+v6\".to_string();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "2b99cd01e59f732a9386aa4c3d037c3a9b31cbda", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n     // target.\n     base.features = \"+strict-align,+v6,+vfp2,-d32\".to_string();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and it\n         // doesn't support the \"musleabihf\" value.\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "c414810dab20dde4d4a81e7f8f927afe5710f908", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"armebv7r-unknown-none-eabi\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "608095db1971e565fcabb4fd2220fd8d1c5e2702", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"armebv7r-unknown-none-eabihf\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> TargetResult {\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "3ebf60f855e9b29bc11ae6f909a07d9a9bc3bcef", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv4t-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> TargetResult {\n             has_thumb_interworking: true,\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "ff7d7e6c0872af6992363cbda13479e5cdfd36a7", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> TargetResult {\n             has_thumb_interworking: true,\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "da9855bbe55caa2633db774b8aaf5f0373bfb70d", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_musl_base::opts();\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             has_thumb_interworking: true,\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "902dac30b51b1a0adc61b3f9716d190bc946dc44", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::freebsd_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv6-unknown-freebsd-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "7f611defe90cd6fbd7c8c2ca0b63606a39357127", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "ac24e872a9a7ad7cb5ff0378a81ab3dbe847fbd5", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::Armv7);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "ebaef615ac3905dbadef3e00c8f3207dfb99346a", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target if is for the baseline of the Android v7a ABI\n // in thumb mode. It's named armv7-* instead of thumbv7-*\n@@ -8,13 +8,13 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n // See https://developer.android.com/ndk/guides/abis.html#v7a\n // for target ABI requirements.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "5a1391ccedd08aaba25bac12f81aec1842d663ca", "filename": "compiler/rustc_target/src/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"cortex-a8\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n     base.unsupported_abis = super::arm_base::unsupported_abis();\n     base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "08d7d268148e86a1699aa1c15cf9e4a098e3f784", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::freebsd_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-freebsd-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "02abd02f3b2fb9c65db7f0aa172a36b29dcb980a", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 without thumb-mode, NEON or\n // hardfloat.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "d63c728fe4b074e1c6aa0add02373d8c31c82c8e", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 without NEON or\n // thumb-mode. See the thumbv7neon variant for enabling both.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "93a004fa002d9a511843379b8c74c5597b897fc6", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 without thumb-mode, NEON or\n // hardfloat.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_musl_base::opts();\n     // Most of these settings are copied from the armv7_unknown_linux_gnueabi\n     // target.\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n@@ -30,5 +30,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "93a87ff44ef74b1e1aa77cc59398af289e79b05a", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_musl_base::opts();\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n@@ -29,5 +29,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "c3a2324130cde78f8610f44f4e5c5820741d0344", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::netbsd_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"__mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "4d95a2792189eda4f57b3d2bae1e9df0094b5c98", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::vxworks_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "dfd60601f4d9f18622819c9aa53c515029ccb467", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -19,7 +19,7 @@\n \n use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n@@ -32,7 +32,7 @@ pub fn target() -> Result<Target, String> {\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7a-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -44,5 +44,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"arm\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "340d9788d23d7cbeeeb088403ecfb24bde6bc0dd", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -7,7 +7,7 @@\n \n use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n@@ -20,7 +20,7 @@ pub fn target() -> Result<Target, String> {\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7a-none-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -32,5 +32,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"arm\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "a3994e72490deb92c14e3f742ecb6706aeb121c3", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"armv7r-unknown-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "3248679dc45baab9bb3cedf9aae4e4af19a66c32", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"armv7r-unknown-none-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> TargetResult {\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "54f1b1a2ac29e0846e24c463ef4cc508f994c008", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::Armv7s);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "1c3f5c4f9e8fd170cd83a6717db6779fa46a1199", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n-pub fn target() -> Result<Target, String> {\n-    let mut target = wasm32_unknown_emscripten::target()?;\n+pub fn target() -> Target {\n+    let mut target = wasm32_unknown_emscripten::target();\n     target\n         .options\n         .post_link_args\n         .entry(LinkerFlavor::Em)\n         .or_default()\n         .extend(vec![\"-s\".to_string(), \"WASM=0\".to_string()]);\n-    Ok(target)\n+    target\n }"}, {"sha": "83a048b06ba502a1715611329e959fcd4c0cb1fd", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n /// A base target for AVR devices using the GNU toolchain.\n ///\n /// Requires GNU avr-gcc and avr-binutils on the host system.\n-pub fn target(target_cpu: String) -> TargetResult {\n-    Ok(Target {\n+pub fn target(target_cpu: String) -> Target {\n+    Target {\n         arch: \"avr\".to_string(),\n         data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n         llvm_target: \"avr-unknown-unknown\".to_string(),\n@@ -49,5 +49,5 @@ pub fn target(target_cpu: String) -> TargetResult {\n             atomic_cas: false,\n             ..TargetOptions::default()\n         },\n-    })\n+    }\n }"}, {"sha": "7e63ae9c5aa263f429364096dda699ac720449c5", "filename": "compiler/rustc_target/src/spec/avr_unknown_gnu_atmega328.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,5 +1,5 @@\n-use crate::spec::TargetResult;\n+use crate::spec::Target;\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     super::avr_gnu_base::target(\"atmega328\".to_owned())\n }"}, {"sha": "65b305aa84bd80b9a7fb2ffa9c67f7486c911153", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkArgs, LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"hexagonv60\".to_string();\n     base.max_atomic_width = Some(32);\n@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n     base.pre_link_args = LinkArgs::new();\n     base.post_link_args = LinkArgs::new();\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -35,5 +35,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "4f6b8b25842d89a6296df6a0d8d4f0355bd1f4ae", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::I386);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n-    })\n+    }\n }"}, {"sha": "664b9d5d515891bac88d4f476fc0bc5dd6c3ed20", "filename": "compiler/rustc_target/src/spec/i586_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::TargetResult;\n+use crate::spec::Target;\n \n-pub fn target() -> TargetResult {\n-    let mut base = super::i686_pc_windows_msvc::target()?;\n+pub fn target() -> Target {\n+    let mut base = super::i686_pc_windows_msvc::target();\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n-    Ok(base)\n+    base\n }"}, {"sha": "3276f1d0094f8286fa15f2f79d7b6e2d85562a35", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::TargetResult;\n+use crate::spec::Target;\n \n-pub fn target() -> TargetResult {\n-    let mut base = super::i686_unknown_linux_gnu::target()?;\n+pub fn target() -> Target {\n+    let mut base = super::i686_unknown_linux_gnu::target();\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n-    Ok(base)\n+    base\n }"}, {"sha": "5fbf048722691c89d5cd950f474307119412a4c4", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::TargetResult;\n+use crate::spec::Target;\n \n-pub fn target() -> TargetResult {\n-    let mut base = super::i686_unknown_linux_musl::target()?;\n+pub fn target() -> Target {\n+    let mut base = super::i686_unknown_linux_musl::target();\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-musl\".to_string();\n-    Ok(base)\n+    base\n }"}, {"sha": "62a0e415094c25123b128f69a01f0731a8577ace", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let arch = \"i686\";\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n-    Ok(Target {\n+    Target {\n         llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "529e0d392909ceb8c17bb77776ac19f0c272ff89", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n // for target ABI requirements.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n \n     base.max_atomic_width = Some(64);\n@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "64a975ee1bc5bc931390c851fee398385568389c", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.pre_link_args\n@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         .unwrap()\n         .push(\"-Wl,--large-address-aware\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -30,5 +30,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"pc\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "2de1f07844e4bcb459f214beb86ef314413ac10c", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -20,7 +20,7 @@ pub fn target() -> TargetResult {\n         .unwrap()\n         .extend(pre_link_args_msvc);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -34,5 +34,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"pc\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "6cd34f38c5774bbe39881dddb93bdba399891644", "filename": "compiler/rustc_target/src/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"i686-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-cloudabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "691820a301036069a05a2aff9c394dc3543c77d8", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n     pre_link_args.push(\"-Wl,-znotext\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "cfc3a74104bc844b1d761941c46bfe26b0d427d2", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "1e0efca8eed777b071ac57226930536174beee1e", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "6e4259176cf1f5247b8159314b66667daee2af5b", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n     // https://llvm.org/bugs/show_bug.cgi?id=30879\n     base.eliminate_frame_pointer = false;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -36,5 +36,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "7305578ab6aff9abc346ffc060478b098c55710c", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "f5b292685fa2d29ade5159176a21381ce7b3e438", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-fuse-ld=lld\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "bb3b0b70744ddcf6b4024ed91be257c2ef85be93", "filename": "compiler/rustc_target/src/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -5,9 +5,9 @@\n // The cdecl ABI is used. It differs from the stdcall or fastcall ABI.\n // \"i686-unknown-windows\" is used to get the minimal subset of windows-specific features.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -76,7 +76,7 @@ pub fn target() -> TargetResult {\n     // As a result, we choose -gnu for i686 version before those intrisics are implemented in\n     // compiler-builtins. After compiler-builtins implements all required intrinsics, we may\n     // remove -gnu and use the default one.\n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -91,5 +91,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n \n         options: base,\n-    })\n+    }\n }"}, {"sha": "100e0706bc11deb31a26521585c7afde2bc4d52e", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.pre_link_args\n@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n         .unwrap()\n         .push(\"-Wl,--large-address-aware\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"uwp\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "d4426a4eb9ea5559f51599d17406253612ad3231", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"uwp\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "8320beefb275d0347618b03535c861dce2fd3e48", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "f20d337931eff8a1f05b2df0699f5c50a1137243", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mips64-unknown-linux-gnuabi64\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "edddcd616bfc9f4ada2a5c403fb7dd4997fdb3e2", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"mips64r2\".to_string();\n     base.features = \"+mips64r2\".to_string();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n         llvm_target: \"mips64-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "031c5229f7e2baf3a6406abcadaf6dd5995ffd34", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mips64el-unknown-linux-gnuabi64\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "d76d0d3930b8913a8cbd4ec014b74ec51246481c", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"mips64r2\".to_string();\n     base.features = \"+mips64r2\".to_string();\n     base.max_atomic_width = Some(64);\n-    Ok(Target {\n+    Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n         llvm_target: \"mips64el-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "ebead1ce64f17bfeba4ba7055498d3571c3bab50", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "0042244569a05ec95ac05c63e69bf83bfc777e01", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"mips32r2\".to_string();\n     base.features = \"+mips32r2,+soft-float\".to_string();\n     base.max_atomic_width = Some(32);\n     base.crt_static_default = false;\n-    Ok(Target {\n+    Target {\n         llvm_target: \"mips-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "bdb9be4a027647e0c1138486e4ac9bf5f451a116", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mips-unknown-linux-uclibc\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "5d8ad510d60475fb55f53ad8540a4cad4d409830", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".to_string()]);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"mipsel-sony-psp\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -36,5 +36,5 @@ pub fn target() -> TargetResult {\n             link_script: Some(LINKER_SCRIPT.to_string()),\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "ef585a4bc371621d9017ba5aacffd75aacfd327c", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "3552abd0968e937ed34d9587639e52ffb5c343a5", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"mips32r2\".to_string();\n     base.features = \"+mips32r2,+soft-float\".to_string();\n     base.max_atomic_width = Some(32);\n     base.crt_static_default = false;\n-    Ok(Target {\n+    Target {\n         llvm_target: \"mipsel-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "b52ae5cc01629c557203e63deecd8ebe0cd195e5", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsel-unknown-linux-uclibc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "10ec589ef2069f46ff5777268bc485ea7fffde71", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsisa32r6-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "8157cac41701a368eaefa3399865ffe1f7193390", "filename": "compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsisa32r6el-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "e5d565f653c0b7114b36abd08b635b43568feedf", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsisa64r6-unknown-linux-gnuabi64\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "5f68c6484c0c20562387fcc045353573ed0c705f", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"mipsisa64r6el-unknown-linux-gnuabi64\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n \n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "0cb072f387fb4f135ca6702ff91d4e407b8c5f3d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -430,48 +430,23 @@ impl fmt::Display for LinkOutputKind {\n     }\n }\n \n-pub enum LoadTargetError {\n-    BuiltinTargetNotFound(String),\n-    Other(String),\n-}\n-\n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n-pub type TargetResult = Result<Target, String>;\n \n macro_rules! supported_targets {\n     ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n         $(mod $module;)+\n \n         /// List of supported targets\n-        const TARGETS: &[&str] = &[$($($triple),+),+];\n-\n-        fn load_specific(target: &str) -> Result<Target, LoadTargetError> {\n-            match target {\n-                $(\n-                    $($triple)|+ => {\n-                        let mut t = $module::target()\n-                            .map_err(LoadTargetError::Other)?;\n-                        t.options.is_builtin = true;\n-\n-                        // round-trip through the JSON parser to ensure at\n-                        // run-time that the parser works correctly\n-                        t = Target::from_json(t.to_json())\n-                            .map_err(LoadTargetError::Other)?;\n-                        debug!(\"got builtin target: {:?}\", t);\n-                        Ok(t)\n-                    },\n-                )+\n-                    _ => Err(LoadTargetError::BuiltinTargetNotFound(\n-                        format!(\"Unable to find target: {}\", target)))\n-            }\n-        }\n-\n-        pub fn get_targets() -> impl Iterator<Item = String> {\n-            TARGETS.iter().filter_map(|t| -> Option<String> {\n-                load_specific(t)\n-                    .and(Ok(t.to_string()))\n-                    .ok()\n-            })\n+        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+\n+        fn load_builtin(target: &str) -> Option<Target> {\n+            let mut t = match target {\n+                $( $($triple)|+ => $module::target(), )+\n+                _ => return None,\n+            };\n+            t.options.is_builtin = true;\n+            debug!(\"got builtin target: {:?}\", t);\n+            Some(t)\n         }\n \n         #[cfg(test)]\n@@ -1140,7 +1115,7 @@ impl Target {\n     }\n \n     /// Loads a target descriptor from a JSON object.\n-    pub fn from_json(obj: Json) -> TargetResult {\n+    pub fn from_json(obj: Json) -> Result<Target, String> {\n         // While ugly, this code must remain this way to retain\n         // compatibility with existing JSON fields and the internal\n         // expected naming of the Target and TargetOptions structs.\n@@ -1537,11 +1512,9 @@ impl Target {\n \n         match *target_triple {\n             TargetTriple::TargetTriple(ref target_triple) => {\n-                // check if triple is in list of supported targets\n-                match load_specific(target_triple) {\n-                    Ok(t) => return Ok(t),\n-                    Err(LoadTargetError::BuiltinTargetNotFound(_)) => (),\n-                    Err(LoadTargetError::Other(e)) => return Err(e),\n+                // check if triple is in list of built-in targets\n+                if let Some(t) = load_builtin(target_triple) {\n+                    return Ok(t);\n                 }\n \n                 // search for a file named `target_triple`.json in RUST_TARGET_PATH"}, {"sha": "9274d750c7c2ce895bd7605eb05736d3fdf5416f", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"msp430-none-elf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"16\".to_string(),\n@@ -60,5 +60,5 @@ pub fn target() -> TargetResult {\n \n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "e44534a288d7eda13d2e61f19a3eaf64c6f1ec32", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,8 @@\n use crate::spec::abi::Abi;\n-use crate::spec::{\n-    LinkerFlavor, MergeFunctions, PanicStrategy, Target, TargetOptions, TargetResult,\n-};\n+use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         arch: \"nvptx64\".to_string(),\n         data_layout: \"e-i64:64-i128:128-v16:16-v32:32-n16:32:64\".to_string(),\n         llvm_target: \"nvptx64-nvidia-cuda\".to_string(),\n@@ -71,5 +69,5 @@ pub fn target() -> TargetResult {\n \n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "ab889387e2b9696c0890fbe8646c1b130ffabdc0", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64-unknown-freebsd\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "84a19e8a0472f66cc1b2fcb9e838684582286fad", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n     // for now. https://github.com/rust-lang/rust/pull/43170#issuecomment-315411474\n     base.relro_level = RelroLevel::Partial;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "c320d10e6c1dff80cd89e9d2e9903dc424bd71ec", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "257a093208058916a6d3dc562e5a6e4ec436603a", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { ..base },\n-    })\n+    }\n }"}, {"sha": "5d501f840b63830322e8e293ffad61721c3a02d1", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "847e8abf2996638b476db5746f432c55d7be29b0", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "5f55a233fc4285d1ecf5591804be9b005f976645", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "b3c3a2fe2429ff888b91eba82b9cea3b3eec26a1", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "804f223ba6eab68ad0538f55a03cd0d11c127083", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "5be35dbdc8903b0530d0ab25fc8ed3f4fc06ed10", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-netbsd\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "44338c066e6471643db02e373f34bc618909c095", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { features: \"+secure-plt\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "e2dc7858d2cfcc64cf60db753c1eb42892abb28f", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n             features: \"+secure-plt,+msync\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "bce690662b8abd345058b97e32557dd8b090e0f5", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"riscv32-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "83e27c4d8385241f72bccf87fb6abadeed26aafc", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -28,5 +28,5 @@ pub fn target() -> TargetResult {\n             eh_frame_header: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "e2154f58494cbf460b1c8472b9e5e3bdd70234ef", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -28,5 +28,5 @@ pub fn target() -> TargetResult {\n             eh_frame_header: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "845a80a06c777eb62548fba08404822947ab38a8", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -28,5 +28,5 @@ pub fn target() -> TargetResult {\n             eh_frame_header: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "2cd3b95261827818d32c62033de397e8c555ed5a", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n-use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"riscv64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(64),\n             ..super::linux_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "1f857159f0ce512414c241ffb8f34dcc9cf3f8fa", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n+use crate::spec::{Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         llvm_target: \"riscv64\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> TargetResult {\n             eh_frame_header: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "c407fd9557d0b2e363c9bb442fa1454b28d1ff62", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,8 +1,8 @@\n-use crate::spec::{CodeModel, Target, TargetOptions, TargetResult};\n+use crate::spec::{CodeModel, Target, TargetOptions};\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         llvm_target: \"riscv64\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> TargetResult {\n             eh_frame_header: false,\n             ..Default::default()\n         },\n-    })\n+    }\n }"}, {"sha": "ed1c96f1d7bd0766d51756188ea83f6b02e03b20", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     // z10 is the oldest CPU supported by LLVM\n     base.cpu = \"z10\".to_string();\n@@ -11,7 +11,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "8b540a717ceda313eb84e86f787313e6f93fd642", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"sparc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "cfdc43547ffefdaf389379edf1a9b4fa5351b070", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"sparc64-unknown-netbsd\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "6f2eaeee32a2939def09c889c987681d8abebdf1", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"sparc64-unknown-openbsd\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "ea02db7e5bb2f761ccec227e2bcc6441f92b963b", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "747f70e65c55cc8715d821062c5e958607975b5e", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"sparcv9-sun-solaris\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "d06ab368e1caa2c8f39fff3fa84f4ec370539112", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,16 +1,9 @@\n use super::super::*;\n \n-pub(super) fn test_target(target: TargetResult) {\n-    // Grab the TargetResult struct. If we successfully retrieved\n-    // a Target, then the test JSON encoding/decoding can run for this\n-    // Target on this testing platform (i.e., checking the iOS targets\n-    // only on a Mac test platform).\n-    if let Ok(original) = target {\n-        original.check_consistency();\n-        let as_json = original.to_json();\n-        let parsed = Target::from_json(as_json).unwrap();\n-        assert_eq!(original, parsed);\n-    }\n+// Test target self-consistency and JSON encoding/decoding roundtrip.\n+pub(super) fn test_target(target: Target) {\n+    target.check_consistency();\n+    assert_eq!(Target::from_json(target.to_json()), Ok(target));\n }\n \n impl Target {"}, {"sha": "d1fd0fea60488e0fb36571885065a127abab8841", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -8,10 +8,10 @@\n //!\n //! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv4t-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -59,5 +59,5 @@ pub fn target() -> TargetResult {\n \n             ..super::thumb_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "bd1367ddb423041b590b19f0770a9fae291d095b", "filename": "compiler/rustc_target/src/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n // Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv6m-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -24,5 +24,5 @@ pub fn target() -> TargetResult {\n             atomic_cas: false,\n             ..super::thumb_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "01a3598572dc92e8388b8f39a7f5a1ccaa18c628", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n \n     // Prevent error LNK2013: BRANCH24(T) fixup overflow\n@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n     // implemented for windows/arm in LLVM\n     base.panic_strategy = PanicStrategy::Abort;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -40,5 +40,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "af4741c77ab15194f6e823e57bd1eb2af80015d3", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n     // implemented for windows/arm in LLVM\n     base.panic_strategy = PanicStrategy::Abort;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "10e1050fbf5ccf5a7d135cc7c1548c6a8667865c", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -9,10 +9,10 @@\n // To opt-in to hardware accelerated floating point operations, you can use, for example,\n // `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv7em-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n-    })\n+    }\n }"}, {"sha": "17a5b70bc0926020b38698e5e694ec0d22307839", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -8,10 +8,10 @@\n //\n // To opt into double precision hardware support, use the `-C target-feature=+fp64` flag.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv7em-none-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -37,5 +37,5 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "c21cb5d03d489b122c8e42b7768691165c75c4e1", "filename": "compiler/rustc_target/src/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n // Targets the Cortex-M3 processor (ARMv7-M)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv7m-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n-    })\n+    }\n }"}, {"sha": "8c4750d7731229f88d71b3be02bdad269dbbad66", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target if is for the Android v7a ABI in thumb mode with\n // NEON unconditionally enabled and, therefore, with 32 FPU registers\n@@ -8,13 +8,13 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n // See https://developer.android.com/ndk/guides/abis.html#v7a\n // for target ABI requirements.\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n-    })\n+    }\n }"}, {"sha": "85bdc16727b98710bd7c7d78c2b9f80feae1ebe2", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 with thumb mode enabled\n // (for consistency with Android and Debian-based distributions)\n // and with NEON unconditionally enabled and, therefore, with 32 FPU\n // registers enabled as well. See section A2.6.2 on page A2-56 in\n // https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_base::opts();\n-    Ok(Target {\n+    Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -28,5 +28,5 @@ pub fn target() -> TargetResult {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "b97b5270d4235e73946323ca7531e95b5da2e37b", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 with thumb mode enabled\n // (for consistency with Android and Debian-based distributions)\n // and with NEON unconditionally enabled and, therefore, with 32 FPU\n // registers enabled as well. See section A2.6.2 on page A2-56 in\n // https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = super::linux_musl_base::opts();\n-    Ok(Target {\n+    Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n@@ -33,5 +33,5 @@ pub fn target() -> TargetResult {\n             target_mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n-    })\n+    }\n }"}, {"sha": "9eb33f5ef66370e515ab791388a9fbe0142b9c9d", "filename": "compiler/rustc_target/src/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n // Targets the Cortex-M23 processor (Baseline ARMv8-M)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv8m.base-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "55b8b545e7979609ec2572a5ef3b11f7e94075c1", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n // without the Floating Point extension.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv8m.main-none-eabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -17,5 +17,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n-    })\n+    }\n }"}, {"sha": "f17d48e85239c8f870d884dec13ae601ed9deec5", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,10 +1,10 @@\n // Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n // with the Floating Point extension.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n-    Ok(Target {\n+pub fn target() -> Target {\n+    Target {\n         llvm_target: \"thumbv8m.main-none-eabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },\n-    })\n+    }\n }"}, {"sha": "4f99967f21bf7a32d0eeeee817013f15784f0663", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,7 +1,7 @@\n use super::wasm32_base;\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(\n         LinkerFlavor::Em,\n@@ -28,7 +28,7 @@ pub fn target() -> Result<Target, String> {\n         target_family: Some(\"unix\".to_string()),\n         ..wasm32_base::options()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -40,5 +40,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "f0b6979ce110e737634b819fd695c904c2037ba2", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -13,7 +13,7 @@\n use super::wasm32_base;\n use super::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n     let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n \n@@ -30,7 +30,7 @@ pub fn target() -> Result<Target, String> {\n         .unwrap()\n         .push(\"--no-entry\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"wasm32-unknown-unknown\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -42,5 +42,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n         options,\n-    })\n+    }\n }"}, {"sha": "f8fdbf44b19d56b23e1cd54f1c7c70778d978391", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -75,7 +75,7 @@\n use super::wasm32_base;\n use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n     options\n@@ -104,7 +104,7 @@ pub fn target() -> Result<Target, String> {\n     // `args::args()` makes the WASI API calls itself.\n     options.main_needs_argc_argv = false;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -116,5 +116,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n         options,\n-    })\n+    }\n }"}, {"sha": "45e8ddd6137cba29ba7e2e362d8f6f764dff322a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n@@ -18,7 +18,7 @@ pub fn target() -> TargetResult {\n     let arch = \"x86_64\";\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n-    Ok(Target {\n+    Target {\n         llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -31,5 +31,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "b4590f7aed25309fae4e6ab70480a280f94132d6", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::X86_64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n-    })\n+    }\n }"}, {"sha": "85cc4e6db6fe1ee9d1b850d4b25760798398b53a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::X86_64_macabi);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -16,5 +16,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n-    })\n+    }\n }"}, {"sha": "db46640056224eab089171bde08f3087ed8f0222", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let base = opts(Arch::X86_64);\n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -15,5 +15,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n-    })\n+    }\n }"}, {"sha": "cc27d88bff1d864648dedc4c530251d4832887ae", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -2,7 +2,7 @@ use std::iter;\n \n use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n-pub fn target() -> Result<Target, String> {\n+pub fn target() -> Target {\n     const PRE_LINK_ARGS: &[&str] = &[\n         \"--as-needed\",\n         \"-z\",\n@@ -74,7 +74,7 @@ pub fn target() -> Result<Target, String> {\n         relax_elf_relocations: true,\n         ..Default::default()\n     };\n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-elf\".into(),\n         target_endian: \"little\".into(),\n         target_pointer_width: \"64\".into(),\n@@ -87,5 +87,5 @@ pub fn target() -> Result<Target, String> {\n         arch: \"x86_64\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n-    })\n+    }\n }"}, {"sha": "887b3b67edd374c2130000308de995831105467f", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-fuchsia\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -19,5 +19,5 @@ pub fn target() -> TargetResult {\n         target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n-    })\n+    }\n }"}, {"sha": "44c869d1e3005ba461ef95dd54965d09334d103d", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     // https://developer.android.com/ndk/guides/abis.html#86-64\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "b9507ad9c8ec326206d062118cbb31a2ac289a13", "filename": "compiler/rustc_target/src/spec/x86_64_linux_kernel.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,9 +1,9 @@\n // This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n // generic Linux kernel options.\n \n-use crate::spec::{CodeModel, LinkerFlavor, Target, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_kernel_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n     base.code_model = Some(CodeModel::Kernel);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n-    Ok(Target {\n+    Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use \"Linux\"\n         llvm_target: \"x86_64-elf\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -28,5 +28,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: base,\n-    })\n+    }\n }"}, {"sha": "e93755d1aa4868df8da6ea73a164c74922f3a72b", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-gcc\".to_string());\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"pc\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "ffb0eb43bebcf0f522aa7ea9bc36f8ecd555db90", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -19,5 +19,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"pc\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "3d97f4315ec90343409b8e8e8ee17df22e3070aa", "filename": "compiler/rustc_target/src/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n     base.disable_redzone = true;\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-rumprun-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"rumprun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "5c6be285360ff423079d58d91655412bb8e1fab8", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "c002671552f7d12939a3b870ab8d8cecc556982b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-cloudabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "1390926ed3ff3be2eebf77a9a33497c5cb7aa3f1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "424f0343ec9131c835f58a063b54df5e66ac43f1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "2f9be167b9b6643bcf996714efbebcac8b116254", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-haiku\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "0da92f035a5faa37e300aa73f69bd554530c688e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+rdrnd,+rdseed\".to_string();\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n-    })\n+    }\n }"}, {"sha": "ea955e758bbf6c161072ecee4b294bea11194ac0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit_kernel.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::hermit_kernel_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n             .to_string();\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -22,5 +22,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n-    })\n+    }\n }"}, {"sha": "482748f5b3d57e50da2caa86670a2d6b23276bed", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::illumos_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string(), \"-std=c99\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         // LLVM does not currently have a separate illumos target,\n         // so we still pass Solaris to it\n         llvm_target: \"x86_64-pc-solaris\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "65e080d306682ecab9ac3939c5046f74295ab8bf", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -18,5 +18,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "66df76cad698286de4af94301e40cae7f1a57e9f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "81dae46b8a364f8f8508b9e1ceec3c40b2136842", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,6 +1,6 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -11,7 +11,7 @@ pub fn target() -> TargetResult {\n     // breaks code gen. See LLVM bug 36743\n     base.needs_plt = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-linux-gnux32\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "e513df790be78a02beeee3bff30c219f1a968902", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n     base.static_position_independent_executables = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "9c984f169a64642a57dc81086630bfbcef5af2d0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n-    })\n+    }\n }"}, {"sha": "d9110c882c1c0239191556ee704eaae6b0e120d6", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "42af9c799bd95fdd6295fa438cd61cee38ecbdca", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -20,5 +20,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "17d75a967136652f83e9e53466afed2d75c5188c", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -5,9 +5,9 @@\n // The win64 ABI is used. It differs from the sysv64 ABI, so we must use a windows target with\n // LLVM. \"x86_64-unknown-windows\" is used to get the minimal subset of windows-specific features.\n \n-use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n@@ -28,7 +28,7 @@ pub fn target() -> TargetResult {\n     // places no locality-restrictions, so it fits well here.\n     base.code_model = Some(CodeModel::Large);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -42,5 +42,5 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n \n         options: base,\n-    })\n+    }\n }"}, {"sha": "b288271406c142c53ecad4ac4a762c744350be6c", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.pre_link_args\n         .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pep\".to_string()]);\n     base.max_atomic_width = Some(64);\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"uwp\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "41beab915362ada151bb33f911bc626157f01b01", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -19,5 +19,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"uwp\".to_string(),\n         linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n-    })\n+    }\n }"}, {"sha": "96927660a3c57a73caee476511c4d0518c7a1f7c", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e022fc2b8eecbc16c090a99efbbd262c37ec962/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=0e022fc2b8eecbc16c090a99efbbd262c37ec962", "patch": "@@ -1,14 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target};\n \n-pub fn target() -> TargetResult {\n+pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n     base.disable_redzone = true;\n \n-    Ok(Target {\n+    Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -21,5 +21,5 @@ pub fn target() -> TargetResult {\n         target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n-    })\n+    }\n }"}]}