{"sha": "bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZGNhMmM4YWRlZDA0OTdjMjg5NTM2ZWU1ZWFkNjk0Y2EyZDhmYzA=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-08T20:42:46Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:57Z"}, "message": "Correctly collect defaults from type alises in astconv", "tree": {"sha": "27bdbe9e7c85b9d9983fbe14171dec8b1850a9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27bdbe9e7c85b9d9983fbe14171dec8b1850a9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "html_url": "https://github.com/rust-lang/rust/commit/bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91de8e6c281fafd257e52def26551b2b722aaddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/91de8e6c281fafd257e52def26551b2b722aaddb", "html_url": "https://github.com/rust-lang/rust/commit/91de8e6c281fafd257e52def26551b2b722aaddb"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "5ed1da2fedebc04dbcce600a3afc3032ead2efe7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "patch": "@@ -111,7 +111,7 @@ pub trait AstConv<'tcx> {\n     }\n \n     /// What type should we use when a type is omitted?\n-    fn ty_infer(&self, span: Span) -> Ty<'tcx>;\n+    fn ty_infer(&self, default: Option<Ty<'tcx>>, span: Span) -> Ty<'tcx>;\n \n     /// Projecting an associated type from a (potentially)\n     /// higher-ranked trait reference is more complicated, because of\n@@ -403,7 +403,7 @@ fn create_substs_for_ast_path<'tcx>(\n     // they were optional (e.g. paths inside expressions).\n     let mut type_substs = if param_mode == PathParamMode::Optional &&\n                              types_provided.is_empty() {\n-        (0..formal_ty_param_count).map(|_| this.ty_infer(span)).collect()\n+        ty_param_defs.iter().map(|p| this.ty_infer(p.default, span)).collect()\n     } else {\n         types_provided\n     };\n@@ -1661,7 +1661,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             // values in a ExprClosure, or as\n             // the type of local variables. Both of these cases are\n             // handled specially and will not descend into this routine.\n-            this.ty_infer(ast_ty.span)\n+            this.ty_infer(None, ast_ty.span)\n         }\n     };\n \n@@ -1677,7 +1677,7 @@ pub fn ty_of_arg<'tcx>(this: &AstConv<'tcx>,\n {\n     match a.ty.node {\n         ast::TyInfer if expected_ty.is_some() => expected_ty.unwrap(),\n-        ast::TyInfer => this.ty_infer(a.ty.span),\n+        ast::TyInfer => this.ty_infer(None, a.ty.span),\n         _ => ast_ty_to_ty(this, rscope, &*a.ty),\n     }\n }\n@@ -1796,7 +1796,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n \n     let output_ty = match decl.output {\n         ast::Return(ref output) if output.node == ast::TyInfer =>\n-            ty::FnConverging(this.ty_infer(output.span)),\n+            ty::FnConverging(this.ty_infer(None, output.span)),\n         ast::Return(ref output) =>\n             ty::FnConverging(convert_ty_with_lifetime_elision(this,\n                                                               implied_output_region,\n@@ -1936,7 +1936,7 @@ pub fn ty_of_closure<'tcx>(\n         _ if is_infer && expected_ret_ty.is_some() =>\n             expected_ret_ty.unwrap(),\n         _ if is_infer =>\n-            ty::FnConverging(this.ty_infer(decl.output.span())),\n+            ty::FnConverging(this.ty_infer(None, decl.output.span())),\n         ast::Return(ref output) =>\n             ty::FnConverging(ast_ty_to_ty(this, &rb, &**output)),\n         ast::DefaultReturn(..) => unreachable!(),"}, {"sha": "ae2b3448e01d383e6dfba29b2c01519a581ed6e8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "patch": "@@ -1138,8 +1138,13 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         trait_def.associated_type_names.contains(&assoc_name)\n     }\n \n-    fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n-        self.infcx().next_ty_var()\n+    fn ty_infer(&self, default: Option<Ty<'tcx>>, _span: Span) -> Ty<'tcx> {\n+        let ty_var = self.infcx().next_ty_var();\n+        match default {\n+            Some(default) => { self.infcx().defaults.borrow_mut().insert(ty_var, default); }\n+            None => {}\n+        }\n+        ty_var\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,"}, {"sha": "695991a97f06190f6690967ddce4136f64d45007", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n+    fn ty_infer(&self, _default: Option<Ty<'tcx>>, span: Span) -> Ty<'tcx> {\n         span_err!(self.tcx().sess, span, E0121,\n                   \"the type placeholder `_` is not allowed within types on item signatures\");\n         self.tcx().types.err"}, {"sha": "c3e44e55beeb21df379d1800c8a497f53fd0a27e", "filename": "src/test/run-pass/default_ty_param_type_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdca2c8aded0497c289536ee5ead694ca2d8fc0/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_type_alias.rs?ref=bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "previous_filename": "src/test/compile-fail/default_ty_param_type_alias.rs"}]}