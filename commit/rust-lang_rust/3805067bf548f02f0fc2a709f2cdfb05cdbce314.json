{"sha": "3805067bf548f02f0fc2a709f2cdfb05cdbce314", "node_id": "C_kwDOAAsO6NoAKDM4MDUwNjdiZjU0OGYwMmYwZmMyYTcwOWYyY2RmYjA1Y2RiY2UzMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:46:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:46:22Z"}, "message": "Auto merge of #12905 - HKalbasi:master, r=Veykril\n\nGenerate rust type from json\n\nfix #10118\n\nShould this be a diagnostic? I made it a diagnostic because of issue label.", "tree": {"sha": "9fe0ea7a60537f38ba8d5c403534380b5e398e5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe0ea7a60537f38ba8d5c403534380b5e398e5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3805067bf548f02f0fc2a709f2cdfb05cdbce314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3805067bf548f02f0fc2a709f2cdfb05cdbce314", "html_url": "https://github.com/rust-lang/rust/commit/3805067bf548f02f0fc2a709f2cdfb05cdbce314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3805067bf548f02f0fc2a709f2cdfb05cdbce314/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b481b59be5a1fd4e8a6aafd13255951b4411aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b481b59be5a1fd4e8a6aafd13255951b4411aa48", "html_url": "https://github.com/rust-lang/rust/commit/b481b59be5a1fd4e8a6aafd13255951b4411aa48"}, {"sha": "851f6db7f704587e4b5f0fb429a843d5f26f73c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/851f6db7f704587e4b5f0fb429a843d5f26f73c7", "html_url": "https://github.com/rust-lang/rust/commit/851f6db7f704587e4b5f0fb429a843d5f26f73c7"}], "stats": {"total": 703, "additions": 521, "deletions": 182}, "files": [{"sha": "7c6796d70bdc0e5c0a9f3077279707e8cbf182e3", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -710,6 +710,7 @@ dependencies = [\n  \"ide-db\",\n  \"itertools\",\n  \"profile\",\n+ \"serde_json\",\n  \"sourcegen\",\n  \"stdx\",\n  \"syntax\","}, {"sha": "50374f4b3fe47ebdd8e6907c26430a013b185687", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -14,6 +14,7 @@ use crate::{MacroKind, Type};\n \n macro_rules! diagnostics {\n     ($($diag:ident,)*) => {\n+        #[derive(Debug)]\n         pub enum AnyDiagnostic {$(\n             $diag(Box<$diag>),\n         )*}"}, {"sha": "8c7670e0cb71aecb545c41d827e4a3f39d0385c9", "filename": "crates/ide-assists/src/assist_context.rs", "status": "modified", "additions": 10, "deletions": 147, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fassist_context.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -1,28 +1,20 @@\n //! See [`AssistContext`].\n \n-use std::mem;\n-\n use hir::Semantics;\n-use ide_db::{\n-    base_db::{AnchoredPathBuf, FileId, FileRange},\n-    SnippetCap,\n-};\n-use ide_db::{\n-    label::Label,\n-    source_change::{FileSystemEdit, SourceChange},\n-    RootDatabase,\n-};\n+use ide_db::base_db::{FileId, FileRange};\n+use ide_db::{label::Label, RootDatabase};\n use syntax::{\n     algo::{self, find_node_at_offset, find_node_at_range},\n-    AstNode, AstToken, Direction, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n-    SyntaxToken, TextRange, TextSize, TokenAtOffset,\n+    AstNode, AstToken, Direction, SourceFile, SyntaxElement, SyntaxKind, SyntaxToken, TextRange,\n+    TextSize, TokenAtOffset,\n };\n-use text_edit::{TextEdit, TextEditBuilder};\n \n use crate::{\n     assist_config::AssistConfig, Assist, AssistId, AssistKind, AssistResolveStrategy, GroupLabel,\n };\n \n+pub(crate) use ide_db::source_change::{SourceChangeBuilder, TreeMutator};\n+\n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n /// Assists use a somewhat over-engineered approach, given the current needs.\n@@ -163,7 +155,7 @@ impl Assists {\n         id: AssistId,\n         label: impl Into<String>,\n         target: TextRange,\n-        f: impl FnOnce(&mut AssistBuilder),\n+        f: impl FnOnce(&mut SourceChangeBuilder),\n     ) -> Option<()> {\n         let mut f = Some(f);\n         self.add_impl(None, id, label.into(), target, &mut |it| f.take().unwrap()(it))\n@@ -175,7 +167,7 @@ impl Assists {\n         id: AssistId,\n         label: impl Into<String>,\n         target: TextRange,\n-        f: impl FnOnce(&mut AssistBuilder),\n+        f: impl FnOnce(&mut SourceChangeBuilder),\n     ) -> Option<()> {\n         let mut f = Some(f);\n         self.add_impl(Some(group), id, label.into(), target, &mut |it| f.take().unwrap()(it))\n@@ -187,15 +179,15 @@ impl Assists {\n         id: AssistId,\n         label: String,\n         target: TextRange,\n-        f: &mut dyn FnMut(&mut AssistBuilder),\n+        f: &mut dyn FnMut(&mut SourceChangeBuilder),\n     ) -> Option<()> {\n         if !self.is_allowed(&id) {\n             return None;\n         }\n \n         let mut trigger_signature_help = false;\n         let source_change = if self.resolve.should_resolve(&id) {\n-            let mut builder = AssistBuilder::new(self.file);\n+            let mut builder = SourceChangeBuilder::new(self.file);\n             f(&mut builder);\n             trigger_signature_help = builder.trigger_signature_help;\n             Some(builder.finish())\n@@ -216,132 +208,3 @@ impl Assists {\n         }\n     }\n }\n-\n-pub(crate) struct AssistBuilder {\n-    edit: TextEditBuilder,\n-    file_id: FileId,\n-    source_change: SourceChange,\n-    trigger_signature_help: bool,\n-\n-    /// Maps the original, immutable `SyntaxNode` to a `clone_for_update` twin.\n-    mutated_tree: Option<TreeMutator>,\n-}\n-\n-pub(crate) struct TreeMutator {\n-    immutable: SyntaxNode,\n-    mutable_clone: SyntaxNode,\n-}\n-\n-impl TreeMutator {\n-    pub(crate) fn new(immutable: &SyntaxNode) -> TreeMutator {\n-        let immutable = immutable.ancestors().last().unwrap();\n-        let mutable_clone = immutable.clone_for_update();\n-        TreeMutator { immutable, mutable_clone }\n-    }\n-\n-    pub(crate) fn make_mut<N: AstNode>(&self, node: &N) -> N {\n-        N::cast(self.make_syntax_mut(node.syntax())).unwrap()\n-    }\n-\n-    pub(crate) fn make_syntax_mut(&self, node: &SyntaxNode) -> SyntaxNode {\n-        let ptr = SyntaxNodePtr::new(node);\n-        ptr.to_node(&self.mutable_clone)\n-    }\n-}\n-\n-impl AssistBuilder {\n-    pub(crate) fn new(file_id: FileId) -> AssistBuilder {\n-        AssistBuilder {\n-            edit: TextEdit::builder(),\n-            file_id,\n-            source_change: SourceChange::default(),\n-            trigger_signature_help: false,\n-            mutated_tree: None,\n-        }\n-    }\n-\n-    pub(crate) fn edit_file(&mut self, file_id: FileId) {\n-        self.commit();\n-        self.file_id = file_id;\n-    }\n-\n-    fn commit(&mut self) {\n-        if let Some(tm) = self.mutated_tree.take() {\n-            algo::diff(&tm.immutable, &tm.mutable_clone).into_text_edit(&mut self.edit)\n-        }\n-\n-        let edit = mem::take(&mut self.edit).finish();\n-        if !edit.is_empty() {\n-            self.source_change.insert_source_edit(self.file_id, edit);\n-        }\n-    }\n-\n-    pub(crate) fn make_mut<N: AstNode>(&mut self, node: N) -> N {\n-        self.mutated_tree.get_or_insert_with(|| TreeMutator::new(node.syntax())).make_mut(&node)\n-    }\n-    /// Returns a copy of the `node`, suitable for mutation.\n-    ///\n-    /// Syntax trees in rust-analyzer are typically immutable, and mutating\n-    /// operations panic at runtime. However, it is possible to make a copy of\n-    /// the tree and mutate the copy freely. Mutation is based on interior\n-    /// mutability, and different nodes in the same tree see the same mutations.\n-    ///\n-    /// The typical pattern for an assist is to find specific nodes in the read\n-    /// phase, and then get their mutable couterparts using `make_mut` in the\n-    /// mutable state.\n-    pub(crate) fn make_syntax_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n-        self.mutated_tree.get_or_insert_with(|| TreeMutator::new(&node)).make_syntax_mut(&node)\n-    }\n-\n-    /// Remove specified `range` of text.\n-    pub(crate) fn delete(&mut self, range: TextRange) {\n-        self.edit.delete(range)\n-    }\n-    /// Append specified `text` at the given `offset`\n-    pub(crate) fn insert(&mut self, offset: TextSize, text: impl Into<String>) {\n-        self.edit.insert(offset, text.into())\n-    }\n-    /// Append specified `snippet` at the given `offset`\n-    pub(crate) fn insert_snippet(\n-        &mut self,\n-        _cap: SnippetCap,\n-        offset: TextSize,\n-        snippet: impl Into<String>,\n-    ) {\n-        self.source_change.is_snippet = true;\n-        self.insert(offset, snippet);\n-    }\n-    /// Replaces specified `range` of text with a given string.\n-    pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n-        self.edit.replace(range, replace_with.into())\n-    }\n-    /// Replaces specified `range` of text with a given `snippet`.\n-    pub(crate) fn replace_snippet(\n-        &mut self,\n-        _cap: SnippetCap,\n-        range: TextRange,\n-        snippet: impl Into<String>,\n-    ) {\n-        self.source_change.is_snippet = true;\n-        self.replace(range, snippet);\n-    }\n-    pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n-        algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n-    }\n-    pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n-        let file_system_edit = FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n-        self.source_change.push_file_system_edit(file_system_edit);\n-    }\n-    pub(crate) fn move_file(&mut self, src: FileId, dst: AnchoredPathBuf) {\n-        let file_system_edit = FileSystemEdit::MoveFile { src, dst };\n-        self.source_change.push_file_system_edit(file_system_edit);\n-    }\n-    pub(crate) fn trigger_signature_help(&mut self) {\n-        self.trigger_signature_help = true;\n-    }\n-\n-    fn finish(mut self) -> SourceChange {\n-        self.commit();\n-        mem::take(&mut self.source_change)\n-    }\n-}"}, {"sha": "d8f522708460e06622d63ae8b6bcb9d92775c7b5", "filename": "crates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     match_ast, SyntaxNode,\n };\n \n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: convert_tuple_struct_to_named_struct\n //\n@@ -80,7 +80,7 @@ pub(crate) fn convert_tuple_struct_to_named_struct(\n \n fn edit_struct_def(\n     ctx: &AssistContext<'_>,\n-    edit: &mut AssistBuilder,\n+    edit: &mut SourceChangeBuilder,\n     strukt: &Either<ast::Struct, ast::Variant>,\n     tuple_fields: ast::TupleFieldList,\n     names: Vec<ast::Name>,\n@@ -122,7 +122,7 @@ fn edit_struct_def(\n \n fn edit_struct_references(\n     ctx: &AssistContext<'_>,\n-    edit: &mut AssistBuilder,\n+    edit: &mut SourceChangeBuilder,\n     strukt: Either<hir::Struct, hir::Variant>,\n     names: &[ast::Name],\n ) {\n@@ -132,7 +132,7 @@ fn edit_struct_references(\n     };\n     let usages = strukt_def.usages(&ctx.sema).include_self_refs().all();\n \n-    let edit_node = |edit: &mut AssistBuilder, node: SyntaxNode| -> Option<()> {\n+    let edit_node = |edit: &mut SourceChangeBuilder, node: SyntaxNode| -> Option<()> {\n         match_ast! {\n             match node {\n                 ast::TupleStructPat(tuple_struct_pat) => {\n@@ -203,7 +203,7 @@ fn edit_struct_references(\n \n fn edit_field_references(\n     ctx: &AssistContext<'_>,\n-    edit: &mut AssistBuilder,\n+    edit: &mut SourceChangeBuilder,\n     fields: impl Iterator<Item = ast::TupleField>,\n     names: &[ast::Name],\n ) {"}, {"sha": "dc581ff3bd2c7a85adcfcd4451c8b8a0ed20af57", "filename": "crates/ide-assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     TextRange,\n };\n \n-use crate::assist_context::{AssistBuilder, AssistContext, Assists};\n+use crate::assist_context::{AssistContext, Assists, SourceChangeBuilder};\n \n // Assist: destructure_tuple_binding\n //\n@@ -151,7 +151,7 @@ struct TupleData {\n }\n fn edit_tuple_assignment(\n     ctx: &AssistContext<'_>,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     data: &TupleData,\n     in_sub_pattern: bool,\n ) {\n@@ -195,7 +195,7 @@ fn edit_tuple_assignment(\n \n fn edit_tuple_usages(\n     data: &TupleData,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     ctx: &AssistContext<'_>,\n     in_sub_pattern: bool,\n ) {\n@@ -211,7 +211,7 @@ fn edit_tuple_usages(\n }\n fn edit_tuple_usage(\n     ctx: &AssistContext<'_>,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     usage: &FileReference,\n     data: &TupleData,\n     in_sub_pattern: bool,\n@@ -239,7 +239,7 @@ fn edit_tuple_usage(\n \n fn edit_tuple_field_usage(\n     ctx: &AssistContext<'_>,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     data: &TupleData,\n     index: TupleIndex,\n ) {"}, {"sha": "dfb5652126467ee974ca77dc60820836d796f6f0", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -20,7 +20,7 @@ use syntax::{\n     SyntaxNode, T,\n };\n \n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -374,7 +374,7 @@ fn apply_references(\n \n fn process_references(\n     ctx: &AssistContext<'_>,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     visited_modules: &mut FxHashSet<Module>,\n     enum_module_def: &ModuleDef,\n     variant_hir_name: &Name,"}, {"sha": "b484635121eb230039fc12e8658d8f690170b0d9", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n };\n \n use crate::{\n-    assist_context::{AssistBuilder, AssistContext, Assists},\n+    assist_context::{AssistContext, Assists, SourceChangeBuilder},\n     utils::generate_trait_impl_text,\n     AssistId, AssistKind,\n };\n@@ -120,7 +120,7 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()\n }\n \n fn generate_edit(\n-    edit: &mut AssistBuilder,\n+    edit: &mut SourceChangeBuilder,\n     strukt: ast::Struct,\n     field_type_syntax: &SyntaxNode,\n     field_name: impl Display,"}, {"sha": "2fc754e3e50d1b81f1376fe2167aed17282218b4", "filename": "crates/ide-assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     AstNode, TextRange,\n };\n \n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n static ASSIST_NAME: &str = \"introduce_named_lifetime\";\n static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n@@ -140,7 +140,7 @@ enum NeedsLifetime {\n }\n \n impl NeedsLifetime {\n-    fn make_mut(self, builder: &mut AssistBuilder) -> Self {\n+    fn make_mut(self, builder: &mut SourceChangeBuilder) -> Self {\n         match self {\n             Self::SelfParam(it) => Self::SelfParam(builder.make_mut(it)),\n             Self::RefType(it) => Self::RefType(builder.make_mut(it)),"}, {"sha": "bd2e8fbe3896606f63a0b7eb8062c93c6d96aa33", "filename": "crates/ide-assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -8,7 +8,8 @@ use syntax::{\n use SyntaxKind::WHITESPACE;\n \n use crate::{\n-    assist_context::AssistBuilder, utils::next_prev, AssistContext, AssistId, AssistKind, Assists,\n+    assist_context::SourceChangeBuilder, utils::next_prev, AssistContext, AssistId, AssistKind,\n+    Assists,\n };\n \n // Assist: remove_unused_param\n@@ -88,7 +89,7 @@ pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n fn process_usages(\n     ctx: &AssistContext<'_>,\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     file_id: FileId,\n     references: Vec<FileReference>,\n     arg_to_remove: usize,"}, {"sha": "d139f78a6f36bc9ba5ab2b3941c7133e85b8e080", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n };\n \n use crate::{\n-    assist_context::{AssistBuilder, AssistContext, Assists},\n+    assist_context::{AssistContext, Assists, SourceChangeBuilder},\n     utils::{\n         add_trait_assoc_items_to_impl, filter_assoc_items, gen_trait_fn_body,\n         generate_trait_impl_text, render_snippet, Cursor, DefaultMethods,\n@@ -224,7 +224,7 @@ fn impl_def_from_trait(\n }\n \n fn update_attribute(\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     old_derives: &[ast::Path],\n     old_tree: &ast::TokenTree,\n     old_trait_path: &ast::Path,"}, {"sha": "103e3259fa2ef9f047d4cf7431b08a519e877b9e", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -20,7 +20,7 @@ use syntax::{\n     SyntaxNode, TextRange, TextSize, T,\n };\n \n-use crate::assist_context::{AssistBuilder, AssistContext};\n+use crate::assist_context::{AssistContext, SourceChangeBuilder};\n \n pub(crate) mod suggest_name;\n mod gen_trait_fn_body;\n@@ -484,7 +484,7 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n }\n \n pub(crate) fn add_method_to_adt(\n-    builder: &mut AssistBuilder,\n+    builder: &mut SourceChangeBuilder,\n     adt: &ast::Adt,\n     impl_def: Option<ast::Impl>,\n     method: &str,"}, {"sha": "21314ad74ef9387eee0e0b81d8d8bc3d4e5a10bf", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 134, "deletions": 2, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -3,12 +3,15 @@\n //!\n //! It can be viewed as a dual for `Change`.\n \n-use std::{collections::hash_map::Entry, iter};\n+use std::{collections::hash_map::Entry, iter, mem};\n \n use base_db::{AnchoredPathBuf, FileId};\n use rustc_hash::FxHashMap;\n use stdx::never;\n-use text_edit::TextEdit;\n+use syntax::{algo, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n+use text_edit::{TextEdit, TextEditBuilder};\n+\n+use crate::SnippetCap;\n \n #[derive(Default, Debug, Clone)]\n pub struct SourceChange {\n@@ -81,6 +84,135 @@ impl From<FxHashMap<FileId, TextEdit>> for SourceChange {\n     }\n }\n \n+pub struct SourceChangeBuilder {\n+    pub edit: TextEditBuilder,\n+    pub file_id: FileId,\n+    pub source_change: SourceChange,\n+    pub trigger_signature_help: bool,\n+\n+    /// Maps the original, immutable `SyntaxNode` to a `clone_for_update` twin.\n+    pub mutated_tree: Option<TreeMutator>,\n+}\n+\n+pub struct TreeMutator {\n+    immutable: SyntaxNode,\n+    mutable_clone: SyntaxNode,\n+}\n+\n+impl TreeMutator {\n+    pub fn new(immutable: &SyntaxNode) -> TreeMutator {\n+        let immutable = immutable.ancestors().last().unwrap();\n+        let mutable_clone = immutable.clone_for_update();\n+        TreeMutator { immutable, mutable_clone }\n+    }\n+\n+    pub fn make_mut<N: AstNode>(&self, node: &N) -> N {\n+        N::cast(self.make_syntax_mut(node.syntax())).unwrap()\n+    }\n+\n+    pub fn make_syntax_mut(&self, node: &SyntaxNode) -> SyntaxNode {\n+        let ptr = SyntaxNodePtr::new(node);\n+        ptr.to_node(&self.mutable_clone)\n+    }\n+}\n+\n+impl SourceChangeBuilder {\n+    pub fn new(file_id: FileId) -> SourceChangeBuilder {\n+        SourceChangeBuilder {\n+            edit: TextEdit::builder(),\n+            file_id,\n+            source_change: SourceChange::default(),\n+            trigger_signature_help: false,\n+            mutated_tree: None,\n+        }\n+    }\n+\n+    pub fn edit_file(&mut self, file_id: FileId) {\n+        self.commit();\n+        self.file_id = file_id;\n+    }\n+\n+    fn commit(&mut self) {\n+        if let Some(tm) = self.mutated_tree.take() {\n+            algo::diff(&tm.immutable, &tm.mutable_clone).into_text_edit(&mut self.edit)\n+        }\n+\n+        let edit = mem::take(&mut self.edit).finish();\n+        if !edit.is_empty() {\n+            self.source_change.insert_source_edit(self.file_id, edit);\n+        }\n+    }\n+\n+    pub fn make_mut<N: AstNode>(&mut self, node: N) -> N {\n+        self.mutated_tree.get_or_insert_with(|| TreeMutator::new(node.syntax())).make_mut(&node)\n+    }\n+    /// Returns a copy of the `node`, suitable for mutation.\n+    ///\n+    /// Syntax trees in rust-analyzer are typically immutable, and mutating\n+    /// operations panic at runtime. However, it is possible to make a copy of\n+    /// the tree and mutate the copy freely. Mutation is based on interior\n+    /// mutability, and different nodes in the same tree see the same mutations.\n+    ///\n+    /// The typical pattern for an assist is to find specific nodes in the read\n+    /// phase, and then get their mutable couterparts using `make_mut` in the\n+    /// mutable state.\n+    pub fn make_syntax_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n+        self.mutated_tree.get_or_insert_with(|| TreeMutator::new(&node)).make_syntax_mut(&node)\n+    }\n+\n+    /// Remove specified `range` of text.\n+    pub fn delete(&mut self, range: TextRange) {\n+        self.edit.delete(range)\n+    }\n+    /// Append specified `text` at the given `offset`\n+    pub fn insert(&mut self, offset: TextSize, text: impl Into<String>) {\n+        self.edit.insert(offset, text.into())\n+    }\n+    /// Append specified `snippet` at the given `offset`\n+    pub fn insert_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        offset: TextSize,\n+        snippet: impl Into<String>,\n+    ) {\n+        self.source_change.is_snippet = true;\n+        self.insert(offset, snippet);\n+    }\n+    /// Replaces specified `range` of text with a given string.\n+    pub fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n+        self.edit.replace(range, replace_with.into())\n+    }\n+    /// Replaces specified `range` of text with a given `snippet`.\n+    pub fn replace_snippet(\n+        &mut self,\n+        _cap: SnippetCap,\n+        range: TextRange,\n+        snippet: impl Into<String>,\n+    ) {\n+        self.source_change.is_snippet = true;\n+        self.replace(range, snippet);\n+    }\n+    pub fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n+        algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n+    }\n+    pub fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n+        let file_system_edit = FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n+        self.source_change.push_file_system_edit(file_system_edit);\n+    }\n+    pub fn move_file(&mut self, src: FileId, dst: AnchoredPathBuf) {\n+        let file_system_edit = FileSystemEdit::MoveFile { src, dst };\n+        self.source_change.push_file_system_edit(file_system_edit);\n+    }\n+    pub fn trigger_signature_help(&mut self) {\n+        self.trigger_signature_help = true;\n+    }\n+\n+    pub fn finish(mut self) -> SourceChange {\n+        self.commit();\n+        mem::take(&mut self.source_change)\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n     CreateFile { dst: AnchoredPathBuf, initial_contents: String },"}, {"sha": "9b9e21a4ddb592d3519a6e2778e9ac6da003e257", "filename": "crates/ide-diagnostics/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2FCargo.toml?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -15,6 +15,7 @@ itertools = \"0.10.3\"\n \n \n either = \"1.7.0\"\n+serde_json = \"1.0.82\"\n \n profile = { path = \"../profile\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "5694f33525e0114890f3ebd29e7fb16c4e65af81", "filename": "crates/ide-diagnostics/src/handlers/inactive_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -43,7 +43,7 @@ mod tests {\n     use crate::{tests::check_diagnostics_with_config, DiagnosticsConfig};\n \n     pub(crate) fn check(ra_fixture: &str) {\n-        let config = DiagnosticsConfig::default();\n+        let config = DiagnosticsConfig::test_sample();\n         check_diagnostics_with_config(config, ra_fixture)\n     }\n "}, {"sha": "a21db5b2cec9d448535f120a1bf244db8bb3301c", "filename": "crates/ide-diagnostics/src/handlers/json_is_not_rust.rs", "status": "added", "additions": 310, "deletions": 0, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -0,0 +1,310 @@\n+//! This diagnostic provides an assist for creating a struct definition from a JSON\n+//! example.\n+\n+use hir::{PathResolution, Semantics};\n+use ide_db::{\n+    base_db::FileId,\n+    helpers::mod_path_to_ast,\n+    imports::insert_use::{insert_use, ImportScope},\n+    source_change::SourceChangeBuilder,\n+    RootDatabase,\n+};\n+use itertools::Itertools;\n+use stdx::{format_to, never};\n+use syntax::{\n+    ast::{self, make},\n+    SyntaxKind, SyntaxNode,\n+};\n+use text_edit::TextEdit;\n+\n+use crate::{fix, Diagnostic, DiagnosticsConfig, Severity};\n+\n+#[derive(Default)]\n+struct State {\n+    result: String,\n+    struct_counts: usize,\n+    has_serialize: bool,\n+    has_deserialize: bool,\n+}\n+\n+impl State {\n+    fn generate_new_name(&mut self) -> ast::Name {\n+        self.struct_counts += 1;\n+        make::name(&format!(\"Struct{}\", self.struct_counts))\n+    }\n+\n+    fn serde_derive(&self) -> String {\n+        let mut v = vec![];\n+        if self.has_serialize {\n+            v.push(\"Serialize\");\n+        }\n+        if self.has_deserialize {\n+            v.push(\"Deserialize\");\n+        }\n+        match v.as_slice() {\n+            [] => \"\".to_string(),\n+            [x] => format!(\"#[derive({x})]\\n\"),\n+            [x, y] => format!(\"#[derive({x}, {y})]\\n\"),\n+            _ => {\n+                never!();\n+                \"\".to_string()\n+            }\n+        }\n+    }\n+\n+    fn build_struct(&mut self, value: &serde_json::Map<String, serde_json::Value>) -> ast::Type {\n+        let name = self.generate_new_name();\n+        let ty = make::ty(&name.to_string());\n+        let strukt = make::struct_(\n+            None,\n+            name,\n+            None,\n+            make::record_field_list(value.iter().sorted_unstable_by_key(|x| x.0).map(\n+                |(name, value)| make::record_field(None, make::name(name), self.type_of(value)),\n+            ))\n+            .into(),\n+        );\n+        format_to!(self.result, \"{}{}\\n\", self.serde_derive(), strukt);\n+        ty\n+    }\n+\n+    fn type_of(&mut self, value: &serde_json::Value) -> ast::Type {\n+        match value {\n+            serde_json::Value::Null => make::ty_unit(),\n+            serde_json::Value::Bool(_) => make::ty(\"bool\"),\n+            serde_json::Value::Number(it) => make::ty(if it.is_i64() { \"i64\" } else { \"f64\" }),\n+            serde_json::Value::String(_) => make::ty(\"String\"),\n+            serde_json::Value::Array(it) => {\n+                let ty = match it.iter().next() {\n+                    Some(x) => self.type_of(x),\n+                    None => make::ty_placeholder(),\n+                };\n+                make::ty(&format!(\"Vec<{ty}>\"))\n+            }\n+            serde_json::Value::Object(x) => self.build_struct(x),\n+        }\n+    }\n+}\n+\n+pub(crate) fn json_in_items(\n+    sema: &Semantics<'_, RootDatabase>,\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+    config: &DiagnosticsConfig,\n+) {\n+    (|| {\n+        if node.kind() == SyntaxKind::ERROR\n+            && node.first_token().map(|x| x.kind()) == Some(SyntaxKind::L_CURLY)\n+            && node.last_token().map(|x| x.kind()) == Some(SyntaxKind::R_CURLY)\n+        {\n+            let node_string = node.to_string();\n+            if let Ok(it) = serde_json::from_str(&node_string) {\n+                if let serde_json::Value::Object(it) = it {\n+                    let import_scope = ImportScope::find_insert_use_container(node, sema)?;\n+                    let range = node.text_range();\n+                    let mut edit = TextEdit::builder();\n+                    edit.delete(range);\n+                    let mut state = State::default();\n+                    let semantics_scope = sema.scope(node)?;\n+                    let scope_resolve =\n+                        |it| semantics_scope.speculative_resolve(&make::path_from_text(it));\n+                    let scope_has = |it| scope_resolve(it).is_some();\n+                    let deserialize_resolved = scope_resolve(\"::serde::Deserialize\");\n+                    let serialize_resolved = scope_resolve(\"::serde::Serialize\");\n+                    state.has_deserialize = deserialize_resolved.is_some();\n+                    state.has_serialize = serialize_resolved.is_some();\n+                    state.build_struct(&it);\n+                    edit.insert(range.start(), state.result);\n+                    acc.push(\n+                        Diagnostic::new(\n+                            \"json-is-not-rust\",\n+                            \"JSON syntax is not valid as a Rust item\",\n+                            range,\n+                        )\n+                        .severity(Severity::WeakWarning)\n+                        .with_fixes(Some(vec![{\n+                            let mut scb = SourceChangeBuilder::new(file_id);\n+                            let scope = match import_scope.clone() {\n+                                ImportScope::File(it) => ImportScope::File(scb.make_mut(it)),\n+                                ImportScope::Module(it) => ImportScope::Module(scb.make_mut(it)),\n+                                ImportScope::Block(it) => ImportScope::Block(scb.make_mut(it)),\n+                            };\n+                            let current_module = semantics_scope.module();\n+                            if !scope_has(\"Serialize\") {\n+                                if let Some(PathResolution::Def(it)) = serialize_resolved {\n+                                    if let Some(it) = current_module.find_use_path_prefixed(\n+                                        sema.db,\n+                                        it,\n+                                        config.insert_use.prefix_kind,\n+                                    ) {\n+                                        insert_use(\n+                                            &scope,\n+                                            mod_path_to_ast(&it),\n+                                            &config.insert_use,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                            if !scope_has(\"Deserialize\") {\n+                                if let Some(PathResolution::Def(it)) = deserialize_resolved {\n+                                    if let Some(it) = current_module.find_use_path_prefixed(\n+                                        sema.db,\n+                                        it,\n+                                        config.insert_use.prefix_kind,\n+                                    ) {\n+                                        insert_use(\n+                                            &scope,\n+                                            mod_path_to_ast(&it),\n+                                            &config.insert_use,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                            let mut sc = scb.finish();\n+                            sc.insert_source_edit(file_id, edit.finish());\n+                            fix(\"convert_json_to_struct\", \"Convert JSON to struct\", sc, range)\n+                        }])),\n+                    );\n+                }\n+            }\n+        }\n+        Some(())\n+    })();\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        tests::{check_diagnostics_with_config, check_fix, check_no_fix},\n+        DiagnosticsConfig,\n+    };\n+\n+    #[test]\n+    fn diagnostic_for_simple_case() {\n+        let mut config = DiagnosticsConfig::test_sample();\n+        config.disabled.insert(\"syntax-error\".to_string());\n+        check_diagnostics_with_config(\n+            config,\n+            r#\"\n+            { \"foo\": \"bar\" }\n+         // ^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: JSON syntax is not valid as a Rust item\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn types_of_primitives() {\n+        check_fix(\n+            r#\"\n+            //- /lib.rs crate:lib deps:serde\n+            use serde::Serialize;\n+\n+            fn some_garbage() {\n+\n+            }\n+\n+            {$0\n+                \"foo\": \"bar\",\n+                \"bar\": 2.3,\n+                \"baz\": null,\n+                \"bay\": 57,\n+                \"box\": true\n+            }\n+            //- /serde.rs crate:serde\n+\n+            pub trait Serialize {\n+                fn serialize() -> u8;\n+            }\n+            \"#,\n+            r#\"\n+            use serde::Serialize;\n+\n+            fn some_garbage() {\n+\n+            }\n+\n+            #[derive(Serialize)]\n+            struct Struct1{ bar: f64, bay: i64, baz: (), r#box: bool, foo: String }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_structs() {\n+        check_fix(\n+            r#\"\n+            {$0\n+                \"foo\": \"bar\",\n+                \"bar\": {\n+                    \"kind\": \"Object\",\n+                    \"value\": {}\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct Struct3{  }\n+            struct Struct2{ kind: String, value: Struct3 }\n+            struct Struct1{ bar: Struct2, foo: String }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn arrays() {\n+        check_fix(\n+            r#\"\n+            //- /lib.rs crate:lib deps:serde\n+            {\n+                \"of_string\": [\"foo\", \"2\", \"x\"], $0\n+                \"of_object\": [{\n+                    \"x\": 10,\n+                    \"y\": 20\n+                }, {\n+                    \"x\": 10,\n+                    \"y\": 20\n+                }],\n+                \"nested\": [[[2]]],\n+                \"empty\": []\n+            }\n+            //- /serde.rs crate:serde\n+\n+            pub trait Serialize {\n+                fn serialize() -> u8;\n+            }\n+            pub trait Deserialize {\n+                fn deserialize() -> u8;\n+            }\n+            \"#,\n+            r#\"\n+            use serde::Serialize;\n+            use serde::Deserialize;\n+\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct2{ x: i64, y: i64 }\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct1{ empty: Vec<_>, nested: Vec<Vec<Vec<i64>>>, of_object: Vec<Struct2>, of_string: Vec<String> }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_emit_outside_of_item_position() {\n+        check_no_fix(\n+            r#\"\n+            fn foo() {\n+                let json = {$0\n+                    \"foo\": \"bar\",\n+                    \"bar\": {\n+                        \"kind\": \"Object\",\n+                        \"value\": {}\n+                    }\n+                };\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "43ff4ed5a6c8637fc4f6af611e48338cf184ec33", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -79,7 +79,7 @@ pub macro panic {\n \n     #[test]\n     fn include_macro_should_allow_empty_content() {\n-        let mut config = DiagnosticsConfig::default();\n+        let mut config = DiagnosticsConfig::test_sample();\n \n         // FIXME: This is a false-positive, the file is actually linked in via\n         // `include!` macro"}, {"sha": "61e63ea7a93ca68b37f19e172d1a2db08ebe537c", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -50,6 +50,7 @@ mod handlers {\n     pub(crate) mod field_shorthand;\n     pub(crate) mod useless_braces;\n     pub(crate) mod unlinked_file;\n+    pub(crate) mod json_is_not_rust;\n }\n \n #[cfg(test)]\n@@ -59,6 +60,7 @@ use hir::{diagnostics::AnyDiagnostic, InFile, Semantics};\n use ide_db::{\n     assists::{Assist, AssistId, AssistKind, AssistResolveStrategy},\n     base_db::{FileId, FileRange, SourceDatabase},\n+    imports::insert_use::InsertUseConfig,\n     label::Label,\n     source_change::SourceChange,\n     FxHashSet, RootDatabase,\n@@ -139,13 +141,37 @@ impl Default for ExprFillDefaultMode {\n     }\n }\n \n-#[derive(Default, Debug, Clone)]\n+#[derive(Debug, Clone)]\n pub struct DiagnosticsConfig {\n     pub proc_macros_enabled: bool,\n     pub proc_attr_macros_enabled: bool,\n     pub disable_experimental: bool,\n     pub disabled: FxHashSet<String>,\n     pub expr_fill_default: ExprFillDefaultMode,\n+    // FIXME: We may want to include a whole `AssistConfig` here\n+    pub insert_use: InsertUseConfig,\n+}\n+\n+impl DiagnosticsConfig {\n+    pub fn test_sample() -> Self {\n+        use hir::PrefixKind;\n+        use ide_db::imports::insert_use::ImportGranularity;\n+\n+        Self {\n+            proc_macros_enabled: Default::default(),\n+            proc_attr_macros_enabled: Default::default(),\n+            disable_experimental: Default::default(),\n+            disabled: Default::default(),\n+            expr_fill_default: Default::default(),\n+            insert_use: InsertUseConfig {\n+                granularity: ImportGranularity::Preserve,\n+                enforce_granularity: false,\n+                prefix_kind: PrefixKind::Plain,\n+                group: false,\n+                skip_glob_imports: false,\n+            },\n+        }\n+    }\n }\n \n struct DiagnosticsContext<'a> {\n@@ -172,9 +198,12 @@ pub fn diagnostics(\n         }),\n     );\n \n-    for node in parse.tree().syntax().descendants() {\n+    let parse = sema.parse(file_id);\n+\n+    for node in parse.syntax().descendants() {\n         handlers::useless_braces::useless_braces(&mut res, file_id, &node);\n         handlers::field_shorthand::field_shorthand(&mut res, file_id, &node);\n+        handlers::json_is_not_rust::json_in_items(&sema, &mut res, file_id, &node, &config);\n     }\n \n     let module = sema.to_module_def(file_id);"}, {"sha": "729619cfde03f68ca15fbe666d26ce6e292f6da3", "filename": "crates/ide-diagnostics/src/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -37,7 +37,7 @@ fn check_nth_fix(nth: usize, ra_fixture_before: &str, ra_fixture_after: &str) {\n     let after = trim_indent(ra_fixture_after);\n \n     let (db, file_position) = RootDatabase::with_position(ra_fixture_before);\n-    let mut conf = DiagnosticsConfig::default();\n+    let mut conf = DiagnosticsConfig::test_sample();\n     conf.expr_fill_default = ExprFillDefaultMode::Default;\n     let diagnostic =\n         super::diagnostics(&db, &conf, &AssistResolveStrategy::All, file_position.file_id)\n@@ -69,7 +69,7 @@ pub(crate) fn check_no_fix(ra_fixture: &str) {\n     let (db, file_position) = RootDatabase::with_position(ra_fixture);\n     let diagnostic = super::diagnostics(\n         &db,\n-        &DiagnosticsConfig::default(),\n+        &DiagnosticsConfig::test_sample(),\n         &AssistResolveStrategy::All,\n         file_position.file_id,\n     )\n@@ -82,7 +82,7 @@ pub(crate) fn check_expect(ra_fixture: &str, expect: Expect) {\n     let (db, file_id) = RootDatabase::with_single_file(ra_fixture);\n     let diagnostics = super::diagnostics(\n         &db,\n-        &DiagnosticsConfig::default(),\n+        &DiagnosticsConfig::test_sample(),\n         &AssistResolveStrategy::All,\n         file_id,\n     );\n@@ -91,7 +91,7 @@ pub(crate) fn check_expect(ra_fixture: &str, expect: Expect) {\n \n #[track_caller]\n pub(crate) fn check_diagnostics(ra_fixture: &str) {\n-    let mut config = DiagnosticsConfig::default();\n+    let mut config = DiagnosticsConfig::test_sample();\n     config.disabled.insert(\"inactive-code\".to_string());\n     check_diagnostics_with_config(config, ra_fixture)\n }\n@@ -127,7 +127,7 @@ pub(crate) fn check_diagnostics_with_config(config: DiagnosticsConfig, ra_fixtur\n \n #[test]\n fn test_disabled_diagnostics() {\n-    let mut config = DiagnosticsConfig::default();\n+    let mut config = DiagnosticsConfig::test_sample();\n     config.disabled.insert(\"unresolved-module\".into());\n \n     let (db, file_id) = RootDatabase::with_single_file(r#\"mod foo;\"#);\n@@ -137,7 +137,7 @@ fn test_disabled_diagnostics() {\n \n     let diagnostics = super::diagnostics(\n         &db,\n-        &DiagnosticsConfig::default(),\n+        &DiagnosticsConfig::test_sample(),\n         &AssistResolveStrategy::All,\n         file_id,\n     );"}, {"sha": "247007db0a7883474caaf5b90e031abbd70f3a09", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -43,7 +43,7 @@ impl flags::Diagnostics {\n                 println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n                 for diagnostic in analysis\n                     .diagnostics(\n-                        &DiagnosticsConfig::default(),\n+                        &DiagnosticsConfig::test_sample(),\n                         AssistResolveStrategy::None,\n                         file_id,\n                     )"}, {"sha": "1629c1dd328a69348f06299449291b90f06a4c39", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805067bf548f02f0fc2a709f2cdfb05cdbce314/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3805067bf548f02f0fc2a709f2cdfb05cdbce314", "patch": "@@ -881,6 +881,7 @@ impl Config {\n                 ExprFillDefaultDef::Todo => ExprFillDefaultMode::Todo,\n                 ExprFillDefaultDef::Default => ExprFillDefaultMode::Default,\n             },\n+            insert_use: self.insert_use_config(),\n         }\n     }\n "}]}