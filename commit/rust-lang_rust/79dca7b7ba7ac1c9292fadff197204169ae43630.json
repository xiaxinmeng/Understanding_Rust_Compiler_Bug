{"sha": "79dca7b7ba7ac1c9292fadff197204169ae43630", "node_id": "C_kwDOAAsO6NoAKDc5ZGNhN2I3YmE3YWMxYzkyOTJmYWRmZjE5NzIwNDE2OWFlNDM2MzA", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-02-17T06:27:43Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T09:49:01Z"}, "message": "s/unification_table/unification_table_mut\n\nGive a more clear name.", "tree": {"sha": "52b8bba76108db6559a35e3e41ce71c783755de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b8bba76108db6559a35e3e41ce71c783755de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79dca7b7ba7ac1c9292fadff197204169ae43630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79dca7b7ba7ac1c9292fadff197204169ae43630", "html_url": "https://github.com/rust-lang/rust/commit/79dca7b7ba7ac1c9292fadff197204169ae43630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79dca7b7ba7ac1c9292fadff197204169ae43630/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "html_url": "https://github.com/rust-lang/rust/commit/f3dfa52fd18b0cd684ef44b409891d6cd16fe553"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "2723598ad6d7b99f8021088081cd25798df5bbbe", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79dca7b7ba7ac1c9292fadff197204169ae43630/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79dca7b7ba7ac1c9292fadff197204169ae43630/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=79dca7b7ba7ac1c9292fadff197204169ae43630", "patch": "@@ -420,7 +420,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // `RegionConstraintData` contains the relationship here.\n         if *any_unifications {\n             *any_unifications = false;\n-            self.unification_table().reset_unifications(|_| UnifiedRegion(None));\n+            self.unification_table_mut().reset_unifications(|_| UnifiedRegion(None));\n         }\n \n         data\n@@ -447,7 +447,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table().new_key(UnifiedRegion(None));\n+        let u_vid = self.unification_table_mut().new_key(UnifiedRegion(None));\n         assert_eq!(vid, u_vid.vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n@@ -516,13 +516,13 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             match (sub, sup) {\n                 (Region(Interned(ReVar(sub), _)), Region(Interned(ReVar(sup), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", sub, sup);\n-                    self.unification_table().union(*sub, *sup);\n+                    self.unification_table_mut().union(*sub, *sup);\n                     self.any_unifications = true;\n                 }\n                 (Region(Interned(ReVar(vid), _)), value)\n                 | (value, Region(Interned(ReVar(vid), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n-                    self.unification_table().union_value(*vid, UnifiedRegion(Some(value)));\n+                    self.unification_table_mut().union_value(*vid, UnifiedRegion(Some(value)));\n                     self.any_unifications = true;\n                 }\n                 (_, _) => {}\n@@ -640,8 +640,9 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         vid: ty::RegionVid,\n     ) -> ty::Region<'tcx> {\n-        let root_vid = self.unification_table().find(vid).vid;\n-        self.unification_table().probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid))\n+        let mut ut = self.unification_table_mut(); // FIXME(rust-lang/ena#42): unnecessary mut\n+        let root_vid = ut.find(vid).vid;\n+        ut.probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid))\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {\n@@ -719,7 +720,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     #[inline]\n-    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n+    fn unification_table_mut(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n         ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)\n     }\n }"}]}