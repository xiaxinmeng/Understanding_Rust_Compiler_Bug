{"sha": "46344122d12975d64f14fa18e2a2b263895c1176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzQ0MTIyZDEyOTc1ZDY0ZjE0ZmExOGUyYTJiMjYzODk1YzExNzY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-06-04T20:39:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-04T20:39:39Z"}, "message": "Rollup merge of #61500 - estebank:expregression, r=petrochenkov\n\nFix regression 61475\n\nAddresses #61475.", "tree": {"sha": "a2e20de896ec9930ce04e63acfb036f7c7f6cdf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e20de896ec9930ce04e63acfb036f7c7f6cdf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46344122d12975d64f14fa18e2a2b263895c1176", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9tcLCRBK7hj4Ov3rIwAAdHIIAExbZAJ3vPvJw0lxMMijhj7/\nnUSPhLrt0ThUXuHa3xUNtjAIwdh+tp7s9fCY6Qr9DDnU4PuwkrFKhpjk9xN9fsSA\n3rfSGxUH+13ThNPA7Csl8dO2JqO0U7zF+2NcyqeARuqJ5jnhTwcodLDs6UjLBpOA\nUKudJkYROa8PkbmNpSgUFApNFjRf3lhtet8atXXhv6HAZ+B+PyVY74eZIp7dfh6Q\nhYq7n1WS5Zd0ZkxiHx3mUeN5/IoWaX4Ri7xPyMLv0qmwyPNqmOH1vcaKDkOPmdNi\n931IrdjwtUovCrAgSZMwmMnkPrqT0iGkq+o5s0CEUAiouswzYz3YirJObRAAVBk=\n=PWAf\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e20de896ec9930ce04e63acfb036f7c7f6cdf6\nparent d5643be9b400e3a2966429840f5449e53d428ed4\nparent 5716e26232a2a3264272cb7d9f58dbdbccfa5a98\nauthor Pietro Albini <pietro@pietroalbini.org> 1559680779 +0200\ncommitter GitHub <noreply@github.com> 1559680779 +0200\n\nRollup merge of #61500 - estebank:expregression, r=petrochenkov\n\nFix regression 61475\n\nAddresses #61475.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46344122d12975d64f14fa18e2a2b263895c1176", "html_url": "https://github.com/rust-lang/rust/commit/46344122d12975d64f14fa18e2a2b263895c1176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46344122d12975d64f14fa18e2a2b263895c1176/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5643be9b400e3a2966429840f5449e53d428ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5643be9b400e3a2966429840f5449e53d428ed4", "html_url": "https://github.com/rust-lang/rust/commit/d5643be9b400e3a2966429840f5449e53d428ed4"}, {"sha": "5716e26232a2a3264272cb7d9f58dbdbccfa5a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/5716e26232a2a3264272cb7d9f58dbdbccfa5a98", "html_url": "https://github.com/rust-lang/rust/commit/5716e26232a2a3264272cb7d9f58dbdbccfa5a98"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "dafa4d5c3eccac77c22963d99995867620af4023", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46344122d12975d64f14fa18e2a2b263895c1176/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46344122d12975d64f14fa18e2a2b263895c1176/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46344122d12975d64f14fa18e2a2b263895c1176", "patch": "@@ -628,10 +628,10 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n-                        self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n-                    } else {\n-                        self.expected_ident_found()\n-                    })\n+                    self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n+                } else {\n+                    self.expected_ident_found()\n+                })\n             }\n         }\n     }\n@@ -1657,8 +1657,8 @@ impl<'a> Parser<'a> {\n             path = self.parse_path(PathStyle::Type)?;\n             path_span = path_lo.to(self.prev_span);\n         } else {\n-            path = ast::Path { segments: Vec::new(), span: DUMMY_SP };\n             path_span = self.span.to(self.span);\n+            path = ast::Path { segments: Vec::new(), span: path_span };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -2844,7 +2844,11 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::Add)) => { // `{ 42 } + 42\n+            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475)\n+            (true, Some(AssocOp::Add)) // `{ 42 } + 42\n+            // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n+            // `if x { a } else { b } && if y { c } else { d }`\n+            if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n                 // These cases are ambiguous and can't be identified in the parser alone\n                 let sp = self.sess.source_map().start_point(self.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n@@ -5298,7 +5302,7 @@ impl<'a> Parser<'a> {\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n-            span: DUMMY_SP,\n+            span: self.prev_span.to(self.prev_span),\n         };\n \n         if !self.eat_keyword(kw::Where) {"}, {"sha": "680449c9ef3e6599bef9ce69c3694ac3669f7f02", "filename": "src/test/ui/issues/issue-61475.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46344122d12975d64f14fa18e2a2b263895c1176/src%2Ftest%2Fui%2Fissues%2Fissue-61475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46344122d12975d64f14fa18e2a2b263895c1176/src%2Ftest%2Fui%2Fissues%2Fissue-61475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61475.rs?ref=46344122d12975d64f14fa18e2a2b263895c1176", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+#![allow(dead_code)]\n+\n+enum E {\n+    A, B\n+}\n+\n+fn main() {\n+    match &&E::A {\n+        &&E::A => {\n+        }\n+        &&E::B => {\n+        }\n+    };\n+}"}]}