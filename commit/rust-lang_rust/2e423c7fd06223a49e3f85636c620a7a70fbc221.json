{"sha": "2e423c7fd06223a49e3f85636c620a7a70fbc221", "node_id": "C_kwDOAAsO6NoAKDJlNDIzYzdmZDA2MjIzYTQ5ZTNmODU2MzZjNjIwYTdhNzBmYmMyMjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-30T05:30:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-31T00:48:35Z"}, "message": "Remove `MatcherPos::match_lo`.\n\nIt's redundant w.r.t. other fields.", "tree": {"sha": "1615782e322da91e64a18258941527df6b9b8d24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1615782e322da91e64a18258941527df6b9b8d24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e423c7fd06223a49e3f85636c620a7a70fbc221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e423c7fd06223a49e3f85636c620a7a70fbc221", "html_url": "https://github.com/rust-lang/rust/commit/2e423c7fd06223a49e3f85636c620a7a70fbc221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e423c7fd06223a49e3f85636c620a7a70fbc221/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21699c41af325786cbda1dba2379710f98613c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/21699c41af325786cbda1dba2379710f98613c68", "html_url": "https://github.com/rust-lang/rust/commit/21699c41af325786cbda1dba2379710f98613c68"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "fad13d5350e1e07fd2e208e9deba14e1b8f7575e", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e423c7fd06223a49e3f85636c620a7a70fbc221/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e423c7fd06223a49e3f85636c620a7a70fbc221/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=2e423c7fd06223a49e3f85636c620a7a70fbc221", "patch": "@@ -134,10 +134,6 @@ struct MatcherPos<'tt> {\n     /// The number of sequences this mp is within.\n     seq_depth: usize,\n \n-    /// The position in `matches` of the first metavar in this (sub)matcher. Zero if there are\n-    /// no metavars.\n-    match_lo: usize,\n-\n     /// The position in `matches` of the next metavar to be matched against the source token\n     /// stream. Should not be used if there are no metavars.\n     match_cur: usize,\n@@ -152,7 +148,7 @@ struct MatcherPos<'tt> {\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MatcherPos<'_>, 104);\n+rustc_data_structures::static_assert_size!(MatcherPos<'_>, 96);\n \n impl<'tt> MatcherPos<'tt> {\n     fn top_level(matcher: &'tt [TokenTree], empty_matches: Lrc<NamedMatchVec>) -> Self {\n@@ -161,7 +157,6 @@ impl<'tt> MatcherPos<'tt> {\n             idx: 0,\n             matches: empty_matches,\n             seq_depth: 0,\n-            match_lo: 0,\n             match_cur: 0,\n             stack: smallvec![],\n             sequence: None,\n@@ -178,14 +173,13 @@ impl<'tt> MatcherPos<'tt> {\n             idx: 0,\n             matches: parent.matches.clone(),\n             seq_depth: parent.seq_depth,\n-            match_lo: parent.match_cur,\n             match_cur: parent.match_cur,\n             sequence: Some(MatcherPosSequence { parent, seq }),\n             stack: smallvec![],\n         };\n         // Start with an empty vec for each metavar within the sequence. Note that `mp.seq_depth`\n         // must have the parent's depth at this point for these `push_match` calls to work.\n-        for idx in mp.match_lo..mp.match_lo + seq.num_captures {\n+        for idx in mp.match_cur..mp.match_cur + seq.num_captures {\n             mp.push_match(idx, MatchedSeq(empty_matches.clone()));\n         }\n         mp.seq_depth += 1;\n@@ -554,7 +548,7 @@ impl<'tt> TtParser<'tt> {\n                     // is finished.\n                     let mut new_mp = sequence.parent.clone();\n                     new_mp.matches = mp.matches.clone();\n-                    new_mp.match_cur = mp.match_lo + sequence.seq.num_captures;\n+                    new_mp.match_cur = mp.match_cur;\n                     new_mp.idx += 1;\n                     self.cur_mps.push(new_mp);\n                 }\n@@ -575,7 +569,7 @@ impl<'tt> TtParser<'tt> {\n                     // We don't need a separator. Move the \"dot\" back to the beginning of the\n                     // matcher and try to match again UNLESS we are only allowed to have _one_\n                     // repetition.\n-                    mp.match_cur = mp.match_lo;\n+                    mp.match_cur -= sequence.seq.num_captures;\n                     mp.idx = 0;\n                     self.cur_mps.push(mp);\n                 }"}]}