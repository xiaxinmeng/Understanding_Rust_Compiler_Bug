{"sha": "e870cbc23d78f5bc424983b1d9ef945888f9dc49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzBjYmMyM2Q3OGY1YmM0MjQ5ODNiMWQ5ZWY5NDU4ODhmOWRjNDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T16:46:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T16:46:26Z"}, "message": "Centralize client capabilities", "tree": {"sha": "6ada4ac34541dc811bb59a8c063138191812e630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ada4ac34541dc811bb59a8c063138191812e630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e870cbc23d78f5bc424983b1d9ef945888f9dc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e870cbc23d78f5bc424983b1d9ef945888f9dc49", "html_url": "https://github.com/rust-lang/rust/commit/e870cbc23d78f5bc424983b1d9ef945888f9dc49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e870cbc23d78f5bc424983b1d9ef945888f9dc49/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97e5eb85d1a8a2a07663abbd9beaae317fdb24d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97e5eb85d1a8a2a07663abbd9beaae317fdb24d", "html_url": "https://github.com/rust-lang/rust/commit/a97e5eb85d1a8a2a07663abbd9beaae317fdb24d"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "a3897b72808699afad0ec23d57b8432eebd1fa9f", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -5,7 +5,7 @@ mod args;\n \n use lsp_server::Connection;\n \n-use rust_analyzer::{cli, from_json, Config, Result};\n+use rust_analyzer::{cli, config::Config, from_json, Result};\n \n use crate::args::HelpPrinted;\n "}, {"sha": "e72017dcc6255b74579f8653d1597c859986a5da", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -15,11 +15,10 @@ use serde::Deserialize;\n \n #[derive(Debug, Clone)]\n pub struct Config {\n+    pub client_caps: ClientCapsConfig,\n     pub publish_decorations: bool,\n     pub publish_diagnostics: bool,\n     pub notifications: NotificationsConfig,\n-    pub supports_location_link: bool,\n-    pub line_folding_only: bool,\n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n     pub call_info_full: bool,\n@@ -58,6 +57,12 @@ impl Default for RustfmtConfig {\n     }\n }\n \n+#[derive(Debug, Clone, Default)]\n+pub struct ClientCapsConfig {\n+    pub location_link: bool,\n+    pub line_folding_only: bool,\n+}\n+\n impl Default for Config {\n     fn default() -> Self {\n         Config {\n@@ -67,8 +72,7 @@ impl Default for Config {\n                 workspace_loaded: true,\n                 cargo_toml_not_found: true,\n             },\n-            supports_location_link: false,\n-            line_folding_only: false,\n+            client_caps: ClientCapsConfig::default(),\n             inlay_hints: InlayHintsConfig {\n                 type_hints: true,\n                 parameter_hints: true,\n@@ -97,11 +101,9 @@ impl Default for Config {\n impl Config {\n     #[rustfmt::skip]\n     pub fn update(&mut self, value: &serde_json::Value) {\n-        let line_folding_only = self.line_folding_only;\n-        let supports_location_link = self.supports_location_link;\n+        let client_caps = self.client_caps.clone();\n         *self = Default::default();\n-        self.line_folding_only = line_folding_only;\n-        self.supports_location_link = supports_location_link;\n+        self.client_caps = client_caps;\n \n         set(value, \"publishDecorations\", &mut self.publish_decorations);\n         set(value, \"excludeGlobs\", &mut self.exclude_globs);\n@@ -157,10 +159,10 @@ impl Config {\n \n     pub fn update_caps(&mut self, caps: &TextDocumentClientCapabilities) {\n         if let Some(value) = caps.definition.as_ref().and_then(|it| it.link_support) {\n-            self.supports_location_link = value;\n+            self.client_caps.location_link = value;\n         }\n         if let Some(value) = caps.folding_range.as_ref().and_then(|it| it.line_folding_only) {\n-            self.line_folding_only = value\n+            self.client_caps.line_folding_only = value\n         }\n     }\n }"}, {"sha": "57c4c8ce55c87f9bdf21b56265ab073bbf1075da", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -579,7 +579,7 @@ impl TryConvWith<&WorldSnapshot> for (FileId, RangeInfo<Vec<NavigationTarget>>)\n             .into_iter()\n             .map(|nav| (file_id, RangeInfo::new(range, nav)))\n             .try_conv_with_to_vec(world)?;\n-        if world.config.supports_location_link {\n+        if world.config.client_caps.location_link {\n             Ok(links.into())\n         } else {\n             let locations: Vec<Location> = links"}, {"sha": "02953be303910c1798d392bdfdfcb5ad23f49639", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -33,7 +33,7 @@ mod conv;\n mod main_loop;\n mod markdown;\n pub mod req;\n-mod config;\n+pub mod config;\n mod world;\n mod diagnostics;\n mod semantic_tokens;\n@@ -42,7 +42,6 @@ use serde::de::DeserializeOwned;\n \n pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n pub use crate::{\n-    config::Config,\n     caps::server_capabilities,\n     main_loop::LspError,\n     main_loop::{main_loop, show_message},"}, {"sha": "23e48c089660f024171a40c9a44a6808d6717370", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -450,7 +450,7 @@ pub fn handle_folding_range(\n     let ctx = FoldConvCtx {\n         text: &text,\n         line_index: &line_index,\n-        line_folding_only: world.config.line_folding_only,\n+        line_folding_only: world.config.client_caps.line_folding_only,\n     };\n     let res = Some(folds.into_iter().map_conv_with(&ctx).collect());\n     Ok(res)"}, {"sha": "7eebedff7ad49f77679669def92219cbf032ec7a", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e870cbc23d78f5bc424983b1d9ef945888f9dc49/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=e870cbc23d78f5bc424983b1d9ef945888f9dc49", "patch": "@@ -19,7 +19,10 @@ use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n \n use req::{ProgressParams, ProgressParamsValue};\n-use rust_analyzer::{main_loop, req, Config};\n+use rust_analyzer::{\n+    config::{ClientCapsConfig, Config},\n+    main_loop, req,\n+};\n \n pub struct Project<'a> {\n     fixture: &'a str,\n@@ -78,7 +81,7 @@ impl<'a> Project<'a> {\n         let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n \n         let mut config = Config {\n-            supports_location_link: true,\n+            client_caps: ClientCapsConfig { location_link: true, ..Default::default() },\n             with_sysroot: self.with_sysroot,\n             ..Config::default()\n         };"}]}