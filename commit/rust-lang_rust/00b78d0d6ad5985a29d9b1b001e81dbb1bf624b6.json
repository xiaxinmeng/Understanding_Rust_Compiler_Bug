{"sha": "00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjc4ZDBkNmFkNTk4NWEyOWQ5YjFiMDAxZTgxZGJiMWJmNjI0YjY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-24T14:42:32Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-24T14:42:32Z"}, "message": "Back to single line between errors. Add header space to secondary files", "tree": {"sha": "e15634ee6226e64fdf423d529424e8e0504d9a37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15634ee6226e64fdf423d529424e8e0504d9a37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "html_url": "https://github.com/rust-lang/rust/commit/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/comments", "author": null, "committer": null, "parents": [{"sha": "9cc8debeb746826604858be86e2f6e5cce29026c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8debeb746826604858be86e2f6e5cce29026c", "html_url": "https://github.com/rust-lang/rust/commit/9cc8debeb746826604858be86e2f6e5cce29026c"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "6b15aa4f92c573dcf527dca2a7f7d5147226003e", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "patch": "@@ -238,7 +238,7 @@ impl EmitterWriter {\n                 self.first = false;\n             } else {\n                 if !self.old_school {\n-                    write!(self.dst, \"\\n\\n\")?;\n+                    write!(self.dst, \"\\n\")?;\n                 }\n             }\n         }\n@@ -682,6 +682,7 @@ mod test {\n         println!(\"r#\\\"\\n{}\\\"#\", str);\n         assert_eq!(str, &r#\"\n   --> dummy.txt:11:1\n+   |>\n 11 |>         e-l\u00e4-v\u00e4n\n    |> ^\n \"#[1..]);\n@@ -746,6 +747,7 @@ mod test {\n \n         let expect_start = &r#\"\n  --> dummy.txt:1:6\n+  |>\n 1 |> _____aaaaaa____bbbbbb__cccccdd_\n   |>      ^^^^^^    ^^^^^^  ^^^^^^^\n \"#[1..];\n@@ -818,6 +820,7 @@ mod test {\n \n         let expect0 = &r#\"\n    --> dummy.txt:5:1\n+    |>\n 5   |> ccccc\n     |> ^\n ...\n@@ -830,6 +833,7 @@ mod test {\n \n         let expect = &r#\"\n    --> dummy.txt:1:1\n+    |>\n 1   |> aaaaa\n     |> ^\n ..."}, {"sha": "2a43a14ddf873bebdb6fa53da50e57dc78502b77", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "patch": "@@ -494,6 +494,13 @@ impl FileInfo {\n                         }],\n                         kind: RenderedLineKind::OtherFileName,\n                     });\n+                    output.push(RenderedLine {\n+                        text: vec![StyledString {\n+                            text: \"\".to_string(),\n+                            style: Style::FileNameStyle,\n+                        }],\n+                        kind: RenderedLineKind::Annotations,\n+                    });\n                 }\n             }\n         }"}, {"sha": "51fe4572dbc633818459549e6add6167e8b656c4", "filename": "src/libsyntax/errors/snippet/test.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Ftest.rs?ref=00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "patch": "@@ -98,6 +98,7 @@ fn foo() {\n     let text = make_string(&lines);\n     assert_eq!(&text[..], &\"\n  --> foo.rs:3:2\n+  |>\n 3 |> \\tbar;\n   |> \\t^^^\n \"[1..]);\n@@ -130,6 +131,7 @@ fn foo() {\n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -199,12 +201,14 @@ fn bar() {\n     // Note that the `|>` remain aligned across both files:\n     assert_eq!(&text[..], &r#\"\n    --> foo.rs:3:14\n+    |>\n 3   |>     vec.push(vec.pop().unwrap());\n     |>     ---      ^^^                - c\n     |>     |        |\n     |>     |        b\n     |>     a\n    ::: bar.rs\n+    |>\n 17  |>     vec.push();\n     |>     ---       - f\n     |>     |\n@@ -249,6 +253,7 @@ fn foo() {\n     println!(\"text=\\n{}\", text);\n     assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n+    |>\n 3   |>     let name = find_id(&data, 22).unwrap();\n     |>                         ---- immutable borrow begins here\n ...\n@@ -288,6 +293,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     --------           ------ D\n   |>     ||\n@@ -324,6 +330,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     vec.push(vec.pop().unwrap());\n   |>     ---      ---                - previous borrow ends here\n   |>     |        |\n@@ -362,6 +369,7 @@ fn foo() {\n     println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n     assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n+    |>\n 4   |>     let mut vec2 = vec;\n     |>                    --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n ...\n@@ -398,6 +406,7 @@ fn foo() {\n     println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     let mut vec = vec![0, 1, 2];\n   |>             ---   ---\n 4 |>     let mut vec2 = vec;\n@@ -429,6 +438,7 @@ impl SomeTrait for () {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>     fn foo(x: u32) {\n   |>     -\n \"#[1..]);\n@@ -458,6 +468,7 @@ fn span_overlap_label() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -492,6 +503,7 @@ fn span_overlap_label2() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 2 |>     fn foo(x: u32) {\n   |>     --------------\n   |>     |      |\n@@ -537,6 +549,7 @@ fn span_overlap_label3() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n  ::: foo.rs\n+  |>\n 3 |>        let closure = || {\n   |>                      - foo\n 4 |>            inner\n@@ -577,6 +590,7 @@ fn main() {\n     println!(\"r#\\\"\\n{}\\\"\", text);\n     assert_eq!(text, &r#\"\n   --> foo.rs:11:2\n+   |>\n 11 |> }\n    |>  -\n \"#[1..]);"}, {"sha": "c00594a59c1150fc6f8dde664fcf3b440a736c4b", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "patch": "@@ -5,13 +5,11 @@ error: mismatched types [--explain E0308]\n    |>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n $DIR/issue-26480.rs:38:5: 38:19: note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n-\n error: non-scalar cast: `_` as `()`\n   --> $DIR/issue-26480.rs:33:19\n    |>\n 33 |>     ($x:expr) => ($x as ())\n    |>                   ^^^^^^^^\n $DIR/issue-26480.rs:39:5: 39:14: note: in this expansion of cast! (defined in $DIR/issue-26480.rs)\n \n-\n error: aborting due to 2 previous errors"}, {"sha": "1af332ee5bea7036b7f216bb554b6c3420a4f67e", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=00b78d0d6ad5985a29d9b1b001e81dbb1bf624b6", "patch": "@@ -6,5 +6,4 @@ error: mismatched types [--explain E0308]\n note: expected type `u32`\n note:    found type `()`\n \n-\n error: aborting due to previous error"}]}