{"sha": "ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTZhNjBhNGQ2YWQ5NDhmOGFkYTUzMmQyYzBiMDM5MTg5YTQ3ZTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T14:39:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-27T16:12:49Z"}, "message": "move const_eval out of rustc_mir::interpret\n\nto make sure that it does not access private implementation details", "tree": {"sha": "0b60dc4007812031b00af6e5c58c41815eb12060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b60dc4007812031b00af6e5c58c41815eb12060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "html_url": "https://github.com/rust-lang/rust/commit/ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035c69f6589c1bf77191157fc24b45db51066ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/035c69f6589c1bf77191157fc24b45db51066ca9", "html_url": "https://github.com/rust-lang/rust/commit/035c69f6589c1bf77191157fc24b45db51066ca9"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "7c1ce21d8f5a62d89a590d5c6ab0a72d7d30a0b8", "filename": "src/librustc_mir/const_eval.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Not in interpret to make sure we do not use private implementation details\n+\n use std::fmt;\n use std::error::Error;\n \n@@ -26,7 +28,7 @@ use rustc::mir::interpret::{\n     EvalResult, EvalError, EvalErrorKind, GlobalId,\n     Scalar, AllocId, Allocation, ConstValue, AllocType,\n };\n-use super::{\n+use interpret::{self,\n     Place, PlaceExtra, PlaceTy, MemPlace, OpTy, Operand, Value,\n     EvalContext, StackPopCleanup, MemoryKind, Memory,\n };\n@@ -41,7 +43,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     let param_env = tcx.param_env(instance.def_id());\n     let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeEvaluator, ());\n     // insert a stack frame so any queries have the correct substs\n-    ecx.stack.push(super::eval_context::Frame {\n+    ecx.stack.push(interpret::Frame {\n         block: mir::START_BLOCK,\n         locals: IndexVec::new(),\n         instance,\n@@ -228,14 +230,14 @@ impl Error for ConstEvalError {\n     }\n }\n \n-impl super::IsStatic for ! {\n+impl interpret::IsStatic for ! {\n     fn is_static(self) -> bool {\n         // unreachable\n         self\n     }\n }\n \n-impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n+impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     type MemoryData = ();\n     type MemoryKinds = !;\n ", "previous_filename": "src/librustc_mir/interpret/const_eval.rs"}, {"sha": "d0d1c5d6610d08ded9306981689927cc589863c6", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         }\n     }\n \n-    crate fn cast(\n+    pub fn cast(\n         &mut self,\n         src: OpTy<'tcx>,\n         kind: CastKind,"}, {"sha": "49027683d872754994a6b32754d19c87137fcd7a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -56,15 +56,15 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     pub(crate) stack: Vec<Frame<'mir, 'tcx>>,\n \n     /// The maximum number of stack frames allowed\n-    pub(crate) stack_limit: usize,\n+    pub(super) stack_limit: usize,\n \n     /// When this value is negative, it indicates the number of interpreter\n     /// steps *until* the loop detector is enabled. When it is positive, it is\n     /// the number of steps after the detector has been enabled modulo the loop\n     /// detector period.\n-    pub(crate) steps_since_detector_enabled: isize,\n+    pub(super) steps_since_detector_enabled: isize,\n \n-    pub(crate) loop_detector: InfiniteLoopDetector<'a, 'mir, 'tcx, M>,\n+    pub(super) loop_detector: InfiniteLoopDetector<'a, 'mir, 'tcx, M>,\n }\n \n /// A stack frame.\n@@ -201,7 +201,7 @@ impl<'tcx> LocalValue {\n type EvalSnapshot<'a, 'mir, 'tcx, M>\n     = (M, Vec<Frame<'mir, 'tcx>>, Memory<'a, 'mir, 'tcx, M>);\n \n-pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n+pub(super) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The set of all `EvalSnapshot` *hashes* observed by this detector.\n     ///\n     /// When a collision occurs in this table, we store the full snapshot in\n@@ -652,7 +652,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(())\n     }\n \n-    crate fn deallocate_local(&mut self, local: LocalValue) -> EvalResult<'tcx> {\n+    pub(super) fn deallocate_local(&mut self, local: LocalValue) -> EvalResult<'tcx> {\n         // FIXME: should we tell the user that there was a local which was never written to?\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             trace!(\"deallocating local\");"}, {"sha": "453099fed661d5006fa921e0081dcbd98f97fcd1", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -20,7 +20,6 @@ mod operator;\n mod step;\n mod terminator;\n mod traits;\n-mod const_eval;\n mod validity;\n mod intrinsics;\n \n@@ -32,7 +31,12 @@ pub use self::place::{Place, PlaceExtra, PlaceTy, MemPlace, MPlaceTy};\n \n pub use self::memory::{Memory, MemoryKind};\n \n-pub use self::const_eval::{\n+pub use self::machine::{Machine, IsStatic};\n+\n+pub use self::operand::{Value, ValTy, Operand, OpTy};\n+\n+// reexports for compatibility\n+pub use const_eval::{\n     eval_promoted,\n     mk_borrowck_eval_cx,\n     mk_eval_cx,\n@@ -43,7 +47,3 @@ pub use self::const_eval::{\n     const_variant_index,\n     op_to_const,\n };\n-\n-pub use self::machine::{Machine, IsStatic};\n-\n-pub use self::operand::{Value, ValTy, Operand, OpTy};"}, {"sha": "6f3fc106d26310843b1426cadb083e081cb1261b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in a `Value`, not on which data is stored there currently.\n-    pub(super) fn try_read_value(\n+    pub(crate) fn try_read_value(\n         &self,\n         src: OpTy<'tcx>,\n     ) -> EvalResult<'tcx, Result<Value, MemPlace>> {\n@@ -391,7 +391,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         Ok(OpTy { op: Operand::Immediate(value), layout: field_layout })\n     }\n \n-    pub(super) fn operand_downcast(\n+    pub fn operand_downcast(\n         &self,\n         op: OpTy<'tcx>,\n         variant: usize,\n@@ -497,7 +497,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     /// Evaluate a bunch of operands at once\n-    pub(crate) fn eval_operands(\n+    pub(super) fn eval_operands(\n         &self,\n         ops: &[mir::Operand<'tcx>],\n     ) -> EvalResult<'tcx, Vec<OpTy<'tcx>>> {"}, {"sha": "471245b3912158ff714d3cc5a7f8dcc8bbad907e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef96a60a4d6ad948f8ada532d2c0b039189a47e0/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=ef96a60a4d6ad948f8ada532d2c0b039189a47e0", "patch": "@@ -82,6 +82,7 @@ pub mod transform;\n pub mod util;\n pub mod interpret;\n pub mod monomorphize;\n+pub mod const_eval;\n \n pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::query::Providers;"}]}