{"sha": "3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmZkYjAxODJjN2I4YmJhY2U0YjVkOGQ0NDQ1YWFjNDI5MTM1MWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-23T08:44:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-23T08:44:11Z"}, "message": "use the correct span when dealing with inference variables", "tree": {"sha": "9918cdf89308773858344a3f77e9229b641bbcf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9918cdf89308773858344a3f77e9229b641bbcf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "html_url": "https://github.com/rust-lang/rust/commit/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0abb1abf04da1dd5a709614f443b57d973d438ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0abb1abf04da1dd5a709614f443b57d973d438ba", "html_url": "https://github.com/rust-lang/rust/commit/0abb1abf04da1dd5a709614f443b57d973d438ba"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "b7debba68b58eb226f7016012519c2a7e1bccc1a", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 (s, None, ty.prefix_string(), None, None)\n             }\n             GenericArgKind::Const(ct) => {\n-                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n+                let span = if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n                     let origin =\n                         self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n                     if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n@@ -308,15 +308,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             parent_descr,\n                         );\n                     }\n-                }\n+\n+                    Some(origin.span).filter(|s| !s.is_dummy())\n+                } else {\n+                    bug!(\"unexpect const: {:?}\", ct);\n+                };\n \n                 let mut s = String::new();\n-                let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+                let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n                 if let Some(highlight) = highlight {\n                     printer.region_highlight_mode = highlight;\n                 }\n                 let _ = ct.print(printer);\n-                (s, None, \"value\".into(), None, None)\n+                (s, span, \"the constant\".into(), None, None)\n             }\n             GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n         }\n@@ -705,7 +709,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 \"\".to_string()\n             };\n \n-            let preposition = if \"value\" == kind_str { \"of\" } else { \"for\" };\n+            let preposition = if \"the value\" == kind_str { \"of\" } else { \"for\" };\n             // For example: \"cannot infer type for type parameter `T`\"\n             format!(\n                 \"cannot infer {} {} {} `{}`{}\","}, {"sha": "b438ed3ad6508cb2100bc1ea060ba5f56368b264", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:12:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer the value for const parameter `X` declared on the function `foo`\n+   |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "b438ed3ad6508cb2100bc1ea060ba5f56368b264", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:12:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer the value for const parameter `X` declared on the function `foo`\n+   |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "9a1dd1a825895166d48281ebf29acf9d6e1c1637", "filename": "src/test/ui/const-generics/infer/issue-77092.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -0,0 +1,16 @@\n+#![feature(min_const_generics)]\n+\n+use std::convert::TryInto;\n+\n+fn take_array_from_mut<T, const N: usize>(data: &mut [T], start: usize) -> &mut [T; N] {\n+    (&mut data[start .. start + N]).try_into().unwrap()\n+}\n+\n+fn main() {\n+    let mut arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n+\n+    for i in 1 .. 4 {\n+        println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n+        //~^ ERROR type annotations needed\n+    }\n+}"}, {"sha": "e84ff8baeea53ef03f818aaacbe769f88e1de463", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-77092.rs:13:26\n+   |\n+LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n+   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of the constant `{_: usize}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "1fb0b23cf11574d7e997fea6e607e4ac12c00a83", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/method-chain.rs:21:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^ cannot infer the value for const parameter `N` declared on the associated function `baz`\n+   |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n \n error: aborting due to previous error\n "}, {"sha": "1fb0b23cf11574d7e997fea6e607e4ac12c00a83", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/method-chain.rs:21:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^ cannot infer the value for const parameter `N` declared on the associated function `baz`\n+   |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n \n error: aborting due to previous error\n "}, {"sha": "7a451903e9630581760706173e315db758c6dfce", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^ cannot infer the value for const parameter `N` declared on the associated function `foo`\n+   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "7a451903e9630581760706173e315db758c6dfce", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^ cannot infer the value for const parameter `N` declared on the associated function `foo`\n+   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n \n error: aborting due to previous error\n "}]}