{"sha": "089584db01c85c24cc98a532eb7d02f651a2c137", "node_id": "C_kwDOAAsO6NoAKDA4OTU4NGRiMDFjODVjMjRjYzk4YTUzMmViN2QwMmY2NTFhMmMxMzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T22:15:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T22:15:47Z"}, "message": "Auto merge of #101736 - GuillaumeGomez:rollup-f71kjdb, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #100185 (Fix `ReErased` leaking into typeck due to `typeof(...)` recovery)\n - #100291 (constify some `CStr` methods)\n - #101677 (Add test for #101211)\n - #101723 (Impove diagnostic for `.await`ing non-futures)\n - #101724 (Allow unauthenticated users to add the `const-hack` label)\n - #101731 (rustdoc: improve rustdoc HTML suggestions handling of nested generics)\n - #101732 (Feature gate the `rustdoc::missing_doc_code_examples` lint)\n - #101735 (rustdoc: fix treatment of backslash-escaped HTML)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1ec206b95fdbabfb2fd1f2f3428dbb2ee3a38df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec206b95fdbabfb2fd1f2f3428dbb2ee3a38df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089584db01c85c24cc98a532eb7d02f651a2c137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089584db01c85c24cc98a532eb7d02f651a2c137", "html_url": "https://github.com/rust-lang/rust/commit/089584db01c85c24cc98a532eb7d02f651a2c137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089584db01c85c24cc98a532eb7d02f651a2c137/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6ee9375242ae784dab1837dfc0b92f43e787ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ee9375242ae784dab1837dfc0b92f43e787ce", "html_url": "https://github.com/rust-lang/rust/commit/fa6ee9375242ae784dab1837dfc0b92f43e787ce"}, {"sha": "031a2f85a52e850758447c7aec879622aff87d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/031a2f85a52e850758447c7aec879622aff87d33", "html_url": "https://github.com/rust-lang/rust/commit/031a2f85a52e850758447c7aec879622aff87d33"}], "stats": {"total": 679, "additions": 592, "deletions": 87}, "files": [{"sha": "cd03e3fb4572d7f97149f602cf08e55ffb928b77", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -146,13 +146,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                     ),\n                 ExprKind::Await(ref expr) => {\n-                    let span = if expr.span.hi() < e.span.hi() {\n-                        expr.span.shrink_to_hi().with_hi(e.span.hi())\n+                    let dot_await_span = if expr.span.hi() < e.span.hi() {\n+                        let span_with_whitespace = self\n+                            .tcx\n+                            .sess\n+                            .source_map()\n+                            .span_extend_while(expr.span, char::is_whitespace)\n+                            .unwrap_or(expr.span);\n+                        span_with_whitespace.shrink_to_hi().with_hi(e.span.hi())\n                     } else {\n                         // this is a recovered `await expr`\n                         e.span\n                     };\n-                    self.lower_expr_await(span, expr)\n+                    self.lower_expr_await(dot_await_span, expr)\n                 }\n                 ExprKind::Closure(\n                     ref binder,"}, {"sha": "2cbf348f13a1b84cc63d65de03b55ac644ed8f69", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -221,6 +221,8 @@ declare_features! (\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n     /// Allows using internal rustdoc features like `doc(primitive)` or `doc(keyword)`.\n     (active, rustdoc_internals, \"1.58.0\", Some(90418), None),\n+    /// Allows using the `rustdoc::missing_doc_code_examples` lint\n+    (active, rustdoc_missing_doc_code_examples, \"1.31.0\", Some(101730), None),\n     /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n     /// Allows using `#[structural_match]` which indicates that a type is structurally matchable."}, {"sha": "1e16ac51e9e5de807f6178de339e694c8f2b006d", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -440,8 +440,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     sp,\n                                     reason,\n                                 );\n-                                for id in ids {\n-                                    self.insert_spec(*id, (level, src));\n+                                for &id in ids {\n+                                    if self.check_gated_lint(id, attr.span) {\n+                                        self.insert_spec(id, (level, src));\n+                                    }\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations.push(("}, {"sha": "11b2d057a07692fd1fbdee07b1b6bc01ac2e03dd", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -658,18 +658,21 @@ macro_rules! declare_lint {\n macro_rules! declare_tool_lint {\n     (\n         $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n+        $(, @feature_gate = $gate:expr;)?\n     ) => (\n-        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n+        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false $(, @feature_gate = $gate;)?}\n     );\n     (\n         $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n         report_in_external_macro: $rep:expr\n+        $(, @feature_gate = $gate:expr;)?\n     ) => (\n-         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n+         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep $(, @feature_gate = $gate;)?}\n     );\n     (\n         $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n         $external:expr\n+        $(, @feature_gate = $gate:expr;)?\n     ) => (\n         $(#[$attr])*\n         $vis static $NAME: &$crate::Lint = &$crate::Lint {\n@@ -680,8 +683,9 @@ macro_rules! declare_tool_lint {\n             report_in_external_macro: $external,\n             future_incompatible: None,\n             is_plugin: true,\n-            feature_gate: None,\n+            $(feature_gate: Some($gate),)?\n             crate_level_only: false,\n+            ..$crate::Lint::default_fields_for_macro()\n         };\n     );\n }"}, {"sha": "1779ff4bcf1dc2aa8c4a9ea3b492953de7863a54", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1292,6 +1292,7 @@ symbols! {\n         rustc_variance,\n         rustdoc,\n         rustdoc_internals,\n+        rustdoc_missing_doc_code_examples,\n         rustfmt,\n         rvalue_static_promotion,\n         s,"}, {"sha": "cb605cacc9c989b027fc2c8e31a52459c8fcda30", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1160,8 +1160,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // and if not maybe suggest doing something else? If we kept the expression around we\n                     // could also check if it is an fn call (very likely) and suggest changing *that*, if\n                     // it is from the local crate.\n-                    err.span_suggestion_verbose(\n-                        expr.span.shrink_to_hi().with_hi(span.hi()),\n+                    err.span_suggestion(\n+                        span,\n                         \"remove the `.await`\",\n                         \"\",\n                         Applicability::MachineApplicable,"}, {"sha": "95c7e3e39aa12fcffed79593b6120a09086db555", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -2672,7 +2672,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyKind::Typeof(ref e) => {\n-                let ty = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let ty_erased = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let ty = tcx.fold_regions(ty_erased, |r, _| {\n+                    if r.is_erased() { tcx.lifetimes.re_static } else { r }\n+                });\n                 let span = ast_ty.span;\n                 tcx.sess.emit_err(TypeofReservedKeywordUsed {\n                     span,"}, {"sha": "21f80ec025a8133057d232fdf04e94bb5dee2178", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -120,10 +120,10 @@ enum FromBytesWithNulErrorKind {\n }\n \n impl FromBytesWithNulError {\n-    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+    const fn interior_nul(pos: usize) -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::InteriorNul(pos) }\n     }\n-    fn not_nul_terminated() -> FromBytesWithNulError {\n+    const fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::NotNulTerminated }\n     }\n \n@@ -294,7 +294,8 @@ impl CStr {\n     /// ```\n     ///\n     #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-    pub fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n+    #[rustc_const_unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) => {\n@@ -343,7 +344,8 @@ impl CStr {\n     /// assert!(cstr.is_err());\n     /// ```\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) if nul_pos + 1 == bytes.len() => {\n@@ -493,7 +495,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         // SAFETY: to_bytes_with_nul returns slice with length at least 1\n         unsafe { bytes.get_unchecked(..bytes.len() - 1) }\n@@ -520,7 +523,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes_with_nul(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes_with_nul(&self) -> &[u8] {\n         // SAFETY: Transmuting a slice of `c_char`s to a slice of `u8`s\n         // is safe on all supported targets.\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -543,7 +547,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n-    pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // N.B., when `CStr` is changed to perform the length check in `.to_bytes()`\n         // instead of in `from_ptr()`, it may be worth considering if this should\n         // be rewritten to do the UTF-8 check inline with the length calculation"}, {"sha": "5621d15c1cd6f5d90674801fdc93aa40a63c8bf1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -159,6 +159,7 @@\n #![feature(const_slice_from_ref)]\n #![feature(const_slice_index)]\n #![feature(const_is_char_boundary)]\n+#![feature(const_cstr_methods)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "e0419f0ffdbaceb124a41b2c392fe6425d0d005b", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -2,6 +2,7 @@\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n use crate::cmp;\n+use crate::intrinsics;\n use crate::mem;\n \n const LO_USIZE: usize = usize::repeat_u8(0x01);\n@@ -35,13 +36,31 @@ fn repeat_byte(b: u8) -> usize {\n /// Returns the first index matching the byte `x` in `text`.\n #[must_use]\n #[inline]\n-pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n-    // Fast path for small slices\n-    if text.len() < 2 * USIZE_BYTES {\n-        return text.iter().position(|elt| *elt == x);\n+pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n+    #[inline]\n+    fn rt_impl(x: u8, text: &[u8]) -> Option<usize> {\n+        // Fast path for small slices\n+        if text.len() < 2 * USIZE_BYTES {\n+            return text.iter().position(|elt| *elt == x);\n+        }\n+\n+        memchr_general_case(x, text)\n+    }\n+\n+    const fn const_impl(x: u8, bytes: &[u8]) -> Option<usize> {\n+        let mut i = 0;\n+        while i < bytes.len() {\n+            if bytes[i] == x {\n+                return Some(i);\n+            }\n+            i += 1;\n+        }\n+\n+        None\n     }\n \n-    memchr_general_case(x, text)\n+    // SAFETY: The const and runtime versions have identical behavior\n+    unsafe { intrinsics::const_eval_select((x, text), const_impl, rt_impl) }\n }\n \n fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {"}, {"sha": "e76c19a61c541f077e9f68ffc320049c44db6ebf", "filename": "src/librustdoc/lint.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -64,9 +64,13 @@ where\n }\n \n macro_rules! declare_rustdoc_lint {\n-    ($(#[$attr:meta])* $name: ident, $level: ident, $descr: literal $(,)?) => {\n+    (\n+        $(#[$attr:meta])* $name: ident, $level: ident, $descr: literal $(,)?\n+        $(@feature_gate = $gate:expr;)?\n+    ) => {\n         declare_tool_lint! {\n             $(#[$attr])* pub rustdoc::$name, $level, $descr\n+            $(, @feature_gate = $gate;)?\n         }\n     }\n }\n@@ -123,7 +127,8 @@ declare_rustdoc_lint! {\n     /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n     MISSING_DOC_CODE_EXAMPLES,\n     Allow,\n-    \"detects publicly-exported items without code samples in their documentation\"\n+    \"detects publicly-exported items without code samples in their documentation\",\n+    @feature_gate = rustc_span::symbol::sym::rustdoc_missing_doc_code_examples;\n }\n \n declare_rustdoc_lint! {"}, {"sha": "55d5f303d345289eb84797d982f91f9356ba78af", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -117,7 +117,7 @@ pub(crate) fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item\n \n     find_testable_code(dox, &mut tests, ErrorCodes::No, false, None);\n \n-    if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n+    if tests.found_tests == 0 && cx.tcx.features().rustdoc_missing_doc_code_examples {\n         if should_have_doc_example(cx, item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = item.attr_span(cx.tcx);"}, {"sha": "885dadb32a8aa569f109a18b973b3885bce66bd7", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -94,6 +94,34 @@ fn extract_path_backwards(text: &str, end_pos: usize) -> Option<usize> {\n     if current_pos == end_pos { None } else { Some(current_pos) }\n }\n \n+fn extract_path_forward(text: &str, start_pos: usize) -> Option<usize> {\n+    use rustc_lexer::{is_id_continue, is_id_start};\n+    let mut current_pos = start_pos;\n+    loop {\n+        if current_pos < text.len() && text[current_pos..].starts_with(\"::\") {\n+            current_pos += 2;\n+        } else {\n+            break;\n+        }\n+        let mut chars = text[current_pos..].chars();\n+        if let Some(c) = chars.next() {\n+            if is_id_start(c) {\n+                current_pos += c.len_utf8();\n+            } else {\n+                break;\n+            }\n+        }\n+        while let Some(c) = chars.next() {\n+            if is_id_continue(c) {\n+                current_pos += c.len_utf8();\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+    if current_pos == start_pos { None } else { Some(current_pos) }\n+}\n+\n fn is_valid_for_html_tag_name(c: char, is_empty: bool) -> bool {\n     // https://spec.commonmark.org/0.30/#raw-html\n     //\n@@ -218,19 +246,68 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     // If a tag looks like `<this>`, it might actually be a generic.\n                     // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n-                    if let Some(Some(generics_start)) = (is_open_tag\n-                        && dox[..range.end].ends_with('>'))\n+                    let mut generics_end = range.end;\n+                    if let Some(Some(mut generics_start)) = (is_open_tag\n+                        && dox[..generics_end].ends_with('>'))\n                     .then(|| extract_path_backwards(&dox, range.start))\n                     {\n+                        while generics_start != 0\n+                            && generics_end < dox.len()\n+                            && dox.as_bytes()[generics_start - 1] == b'<'\n+                            && dox.as_bytes()[generics_end] == b'>'\n+                        {\n+                            generics_end += 1;\n+                            generics_start -= 1;\n+                            if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n+                                generics_start = new_start;\n+                            }\n+                            if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                                generics_end = new_end;\n+                            }\n+                        }\n+                        if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                            generics_end = new_end;\n+                        }\n                         let generics_sp = match super::source_span_for_markdown_range(\n                             tcx,\n                             &dox,\n-                            &(generics_start..range.end),\n+                            &(generics_start..generics_end),\n                             &item.attrs,\n                         ) {\n                             Some(sp) => sp,\n                             None => item.attr_span(tcx),\n                         };\n+                        // Sometimes, we only extract part of a path. For example, consider this:\n+                        //\n+                        //     <[u32] as IntoIter<u32>>::Item\n+                        //                       ^^^^^ unclosed HTML tag `u32`\n+                        //\n+                        // We don't have any code for parsing fully-qualified trait paths.\n+                        // In theory, we could add it, but doing it correctly would require\n+                        // parsing the entire path grammar, which is problematic because of\n+                        // overlap between the path grammar and Markdown.\n+                        //\n+                        // The example above shows that ambiguity. Is `[u32]` intended to be an\n+                        // intra-doc link to the u32 primitive, or is it intended to be a slice?\n+                        //\n+                        // If the below conditional were removed, we would suggest this, which is\n+                        // not what the user probably wants.\n+                        //\n+                        //     <[u32] as `IntoIter<u32>`>::Item\n+                        //\n+                        // We know that the user actually wants to wrap the whole thing in a code\n+                        // block, but the only reason we know that is because `u32` does not, in\n+                        // fact, implement IntoIter. If the example looks like this:\n+                        //\n+                        //     <[Vec<i32>] as IntoIter<i32>::Item\n+                        //\n+                        // The ideal fix would be significantly different.\n+                        if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n+                            || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n+                        {\n+                            diag.emit();\n+                            return;\n+                        }\n                         // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n                         diag.multipart_suggestion(\n                             \"try marking as source code\",\n@@ -278,7 +355,7 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n             for (event, range) in p {\n                 match event {\n                     Event::Start(Tag::CodeBlock(_)) => in_code_block = true,\n-                    Event::Html(text) | Event::Text(text) if !in_code_block => {\n+                    Event::Html(text) if !in_code_block => {\n                         extract_tags(&mut tags, &text, range, &mut is_in_comment, &report_diag)\n                     }\n                     Event::End(Tag::CodeBlock(_)) => in_code_block = false,"}, {"sha": "c5e1759ee2d1d18fd805114908639b31f9c8f7c1", "filename": "src/test/rustdoc-ui/check-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Z unstable-options --check\n \n+#![feature(rustdoc_missing_doc_code_examples)]\n #![deny(missing_docs)]\n #![deny(rustdoc::all)]\n "}, {"sha": "217b89d935bf95f17349cffe74c910d2b42f2690", "filename": "src/test/rustdoc-ui/check-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,30 +1,30 @@\n error: missing documentation for a function\n-  --> $DIR/check-fail.rs:11:1\n+  --> $DIR/check-fail.rs:12:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/check-fail.rs:3:9\n+  --> $DIR/check-fail.rs:4:9\n    |\n LL | #![deny(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/check-fail.rs:11:1\n+  --> $DIR/check-fail.rs:12:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/check-fail.rs:4:9\n+  --> $DIR/check-fail.rs:5:9\n    |\n LL | #![deny(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc::all)]`\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-fail.rs:6:1\n+  --> $DIR/check-fail.rs:7:1\n    |\n LL | / //! ```rust,testharness\n LL | |\n@@ -36,7 +36,7 @@ LL | | //! ```\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-fail.rs:15:1\n+  --> $DIR/check-fail.rs:16:1\n    |\n LL | / /// hello\n LL | |"}, {"sha": "f70b033615139da5f708d95cfc9685caf4e0febc", "filename": "src/test/rustdoc-ui/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -2,9 +2,11 @@\n // compile-flags: -Z unstable-options --check\n // normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n \n-#![warn(missing_docs)]\n+#![feature(rustdoc_missing_doc_code_examples)]\n //~^ WARN\n //~^^ WARN\n+\n+#![warn(missing_docs)]\n #![warn(rustdoc::all)]\n \n pub fn foo() {}"}, {"sha": "78ae65d313a700ebc4dc833bc3e196245a91bc98", "filename": "src/test/rustdoc-ui/check.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,30 +1,31 @@\n warning: missing documentation for the crate\n   --> $DIR/check.rs:5:1\n    |\n-LL | / #![warn(missing_docs)]\n+LL | / #![feature(rustdoc_missing_doc_code_examples)]\n LL | |\n LL | |\n-LL | | #![warn(rustdoc::all)]\n+LL | |\n+...  |\n LL | |\n LL | | pub fn foo() {}\n    | |_______________^\n    |\n note: the lint level is defined here\n-  --> $DIR/check.rs:5:9\n+  --> $DIR/check.rs:9:9\n    |\n LL | #![warn(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n warning: missing documentation for a function\n-  --> $DIR/check.rs:10:1\n+  --> $DIR/check.rs:12:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^\n \n warning: no documentation found for this crate's top-level module\n    |\n note: the lint level is defined here\n-  --> $DIR/check.rs:8:9\n+  --> $DIR/check.rs:10:9\n    |\n LL | #![warn(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n@@ -35,18 +36,19 @@ LL | #![warn(rustdoc::all)]\n warning: missing code example in this documentation\n   --> $DIR/check.rs:5:1\n    |\n-LL | / #![warn(missing_docs)]\n+LL | / #![feature(rustdoc_missing_doc_code_examples)]\n+LL | |\n LL | |\n LL | |\n-LL | | #![warn(rustdoc::all)]\n+...  |\n LL | |\n LL | | pub fn foo() {}\n    | |_______________^\n    |\n    = note: `#[warn(rustdoc::missing_doc_code_examples)]` implied by `#[warn(rustdoc::all)]`\n \n warning: missing code example in this documentation\n-  --> $DIR/check.rs:10:1\n+  --> $DIR/check.rs:12:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^^^^"}, {"sha": "86d7c83d335981541cdce90d1f7cc404eefae3cc", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,4 +1,5 @@\n-#![deny(rustdoc::missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n+#![feature(rustdoc_missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n+#![deny(rustdoc::missing_doc_code_examples)]\n \n /// Some docs.\n //~^ ERROR missing code example in this documentation"}, {"sha": "ebf2a2d54f75c154cb86fb939a8a1bb5c3bc7be0", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,35 +1,35 @@\n error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:1:1\n    |\n-LL | / #![deny(rustdoc::missing_doc_code_examples)]\n+LL | / #![feature(rustdoc_missing_doc_code_examples)]\n+LL | | #![deny(rustdoc::missing_doc_code_examples)]\n LL | |\n LL | | /// Some docs.\n-LL | |\n ...  |\n LL | |     }\n LL | | }\n    | |_^\n    |\n note: the lint level is defined here\n-  --> $DIR/doc-without-codeblock.rs:1:9\n+  --> $DIR/doc-without-codeblock.rs:2:9\n    |\n LL | #![deny(rustdoc::missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:7:1\n+  --> $DIR/doc-without-codeblock.rs:8:1\n    |\n LL | /// And then, the princess died.\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:10:5\n+  --> $DIR/doc-without-codeblock.rs:11:5\n    |\n LL |     /// Or maybe not because she saved herself!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:3:1\n+  --> $DIR/doc-without-codeblock.rs:4:1\n    |\n LL | /// Some docs.\n    | ^^^^^^^^^^^^^^"}, {"sha": "daba6986864084c0fdd38e6d8c573bf9cf52671b", "filename": "src/test/rustdoc-ui/feature-gate-rustdoc_missing_doc_code_examples.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,10 @@\n+#![deny(unknown_lints)]\n+//~^ NOTE defined here\n+\n+#![allow(rustdoc::missing_doc_code_examples)]\n+//~^ ERROR unknown lint\n+//~| ERROR unknown lint\n+//~| NOTE lint is unstable\n+//~| NOTE lint is unstable\n+//~| NOTE see issue\n+//~| NOTE see issue"}, {"sha": "517e08aa7c9748bf9d86c2edce370c29fd4f0083", "filename": "src/test/rustdoc-ui/feature-gate-rustdoc_missing_doc_code_examples.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,29 @@\n+error: unknown lint: `rustdoc::missing_doc_code_examples`\n+  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:4:1\n+   |\n+LL | #![allow(rustdoc::missing_doc_code_examples)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:1:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+   = note: the `rustdoc::missing_doc_code_examples` lint is unstable\n+   = note: see issue #101730 <https://github.com/rust-lang/rust/issues/101730> for more information\n+   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable\n+\n+error: unknown lint: `rustdoc::missing_doc_code_examples`\n+  --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:4:1\n+   |\n+LL | #![allow(rustdoc::missing_doc_code_examples)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `rustdoc::missing_doc_code_examples` lint is unstable\n+   = note: see issue #101730 <https://github.com/rust-lang/rust/issues/101730> for more information\n+   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "317f1fd1d46411a54c72db058aff165868ada5ad", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -114,3 +114,10 @@ pub fn k() {}\n /// Web Components style </unopened-tag>\n //~^ ERROR unopened HTML tag `unopened-tag`\n pub fn m() {}\n+\n+/// backslashed \\<a href=\"\">\n+pub fn no_error_1() {}\n+\n+/// backslashed \\<<a href=\"\">\n+//~^ ERROR unclosed HTML tag `a`\n+pub fn p() {}"}, {"sha": "9c2bfcf2c3dd71af45e36cc2265a68fc5f0684f4", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -94,5 +94,11 @@ error: unclosed HTML tag `dashed-tags`\n LL | /// Web Components style <dashed-tags>\n    |                          ^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: unclosed HTML tag `a`\n+  --> $DIR/invalid-html-tags.rs:121:19\n+   |\n+LL | /// backslashed \\<<a href=\"\">\n+   |                   ^^\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "09aca6d2b2742df0130bb92126b017ee6f4d2c74", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,3 +1,5 @@\n+#![feature(rustdoc_missing_doc_code_examples)]\n+\n //! Documenting the kinds of lints emitted by rustdoc.\n //!\n //! ```"}, {"sha": "5336c0445747a58d123cd660ab2c0dbf6e35df73", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,18 +1,18 @@\n error: missing code example in this documentation\n-  --> $DIR/lint-group.rs:16:1\n+  --> $DIR/lint-group.rs:18:1\n    |\n LL | /// wait, this doesn't have a doctest?\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-group.rs:7:9\n+  --> $DIR/lint-group.rs:9:9\n    |\n LL | #![deny(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc::all)]`\n \n error: documentation test in private item\n-  --> $DIR/lint-group.rs:19:1\n+  --> $DIR/lint-group.rs:21:1\n    |\n LL | / /// wait, this *does* have a doctest?\n LL | | ///\n@@ -24,13 +24,13 @@ LL | | /// ```\n    = note: `#[deny(rustdoc::private_doc_tests)]` implied by `#[deny(rustdoc::all)]`\n \n error: missing code example in this documentation\n-  --> $DIR/lint-group.rs:26:1\n+  --> $DIR/lint-group.rs:28:1\n    |\n LL | /// <unknown>\n    | ^^^^^^^^^^^^^\n \n error: unresolved link to `error`\n-  --> $DIR/lint-group.rs:9:29\n+  --> $DIR/lint-group.rs:11:29\n    |\n LL | /// what up, let's make an [error]\n    |                             ^^^^^ no item named `error` in scope\n@@ -39,7 +39,7 @@ LL | /// what up, let's make an [error]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unclosed HTML tag `unknown`\n-  --> $DIR/lint-group.rs:26:5\n+  --> $DIR/lint-group.rs:28:5\n    |\n LL | /// <unknown>\n    |     ^^^^^^^^^"}, {"sha": "40f35728d79b0ba2f8cc09db394258119f96d54d", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,3 +1,4 @@\n+#![feature(rustdoc_missing_doc_code_examples)]\n #![deny(missing_docs)]\n #![deny(rustdoc::missing_doc_code_examples)]\n "}, {"sha": "f9331250154d7923c4a422fadfe4a9a55d94463b", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,35 +1,35 @@\n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:19:1\n+  --> $DIR/lint-missing-doc-code-example.rs:20:1\n    |\n LL | pub mod module1 {\n    | ^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-missing-doc-code-example.rs:2:9\n+  --> $DIR/lint-missing-doc-code-example.rs:3:9\n    |\n LL | #![deny(rustdoc::missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:37:3\n+  --> $DIR/lint-missing-doc-code-example.rs:38:3\n    |\n LL |   /// doc\n    |   ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:49:1\n+  --> $DIR/lint-missing-doc-code-example.rs:50:1\n    |\n LL | /// Doc\n    | ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:56:1\n+  --> $DIR/lint-missing-doc-code-example.rs:57:1\n    |\n LL | /// Doc\n    | ^^^^^^^\n \n error: missing code example in this documentation\n-  --> $DIR/lint-missing-doc-code-example.rs:63:1\n+  --> $DIR/lint-missing-doc-code-example.rs:64:1\n    |\n LL | /// Doc\n    | ^^^^^^^"}, {"sha": "476e3b2d43e4aae4fa09c0a91c10825ac68b01cd", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -8,6 +8,48 @@ pub struct ConstGeneric;\n // HTML tags cannot contain commas, so no error.\n pub struct MultipleGenerics;\n \n+/// This <[u32] as Iterator<Item>> thing!\n+//~^ERROR unclosed HTML tag `Item`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+//\n+// The important part is that we don't produce any *wrong* suggestions.\n+// While several other examples below are added to make sure we don't\n+// produce suggestions when given complex paths, this example is the actual\n+// reason behind not just using the real path parser. It's ambiguous: there's\n+// no way to locally reason out whether that `[u32]` is intended to be a slice\n+// or an intra-doc link.\n+pub struct FullyQualifiedPathsDoNotCount;\n+\n+/// This <Vec as IntoIter>::Iter thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount1;\n+\n+/// This Vec<Vec as IntoIter>::Iter thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount2;\n+\n+/// This Vec<Vec as IntoIter> thing!\n+//~^ERROR unclosed HTML tag `Vec`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount3;\n+\n+/// This Vec<Vec<i32> as IntoIter> thing!\n+//~^ERROR unclosed HTML tag `i32`\n+// Some forms of fully-qualified path are simultaneously valid HTML tags\n+// with attributes. They produce an error, but no suggestion, because figuring\n+// out if this is valid would require parsing the entire path grammar.\n+pub struct FullyQualifiedPathsDoNotCount4;\n+\n /// This Vec<i32 class=\"test\"> thing!\n //~^ERROR unclosed HTML tag `i32`\n // HTML attributes shouldn't be treated as Rust syntax, so no suggestions."}, {"sha": "3856a251321b230455283eb1cfac965e449c7a57", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics-no-suggestions.stderr", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics-no-suggestions.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -1,38 +1,68 @@\n-error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:11:13\n+error: unclosed HTML tag `Item`\n+  --> $DIR/html-as-generics-no-suggestions.rs:11:28\n    |\n-LL | /// This Vec<i32 class=\"test\"> thing!\n-   |             ^^^^\n+LL | /// This <[u32] as Iterator<Item>> thing!\n+   |                            ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/html-as-generics-no-suggestions.rs:1:9\n    |\n LL | #![deny(rustdoc::invalid_html_tags)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:25:10\n+   |\n+LL | /// This <Vec as IntoIter>::Iter thing!\n+   |          ^^^^\n+\n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:32:13\n+   |\n+LL | /// This Vec<Vec as IntoIter>::Iter thing!\n+   |             ^^^^\n+\n+error: unclosed HTML tag `Vec`\n+  --> $DIR/html-as-generics-no-suggestions.rs:39:13\n+   |\n+LL | /// This Vec<Vec as IntoIter> thing!\n+   |             ^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:46:17\n+   |\n+LL | /// This Vec<Vec<i32> as IntoIter> thing!\n+   |                 ^^^^^\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics-no-suggestions.rs:53:13\n+   |\n+LL | /// This Vec<i32 class=\"test\"> thing!\n+   |             ^^^^\n+\n error: unopened HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:20:13\n+  --> $DIR/html-as-generics-no-suggestions.rs:62:13\n    |\n LL | /// This Vec</i32> thing!\n    |             ^^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:25:13\n+  --> $DIR/html-as-generics-no-suggestions.rs:67:13\n    |\n LL | /// This 123<i32> thing!\n    |             ^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:30:14\n+  --> $DIR/html-as-generics-no-suggestions.rs:72:14\n    |\n LL | /// This Vec:<i32> thing!\n    |              ^^^^^\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics-no-suggestions.rs:35:39\n+  --> $DIR/html-as-generics-no-suggestions.rs:77:39\n    |\n LL | /// This [link](https://rust-lang.org)<i32> thing!\n    |                                       ^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "07c8c9ff254bc4857618a96e100d4fcb4d69c48e", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.fixed", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -30,3 +30,43 @@ pub struct BareTurbofish;\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct Nested;\n+\n+/// Nested generics `Vec<Vec<u32>>`\n+//~^ ERROR unclosed HTML tag `u32`\n+//~|HELP try marking as source\n+pub struct NestedGenerics;\n+\n+/// Generics with path `Vec<i32>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericsWithPath;\n+\n+/// Generics with path `<Vec<i32>>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath;\n+\n+/// Generics with path `Vec<Vec<i32>>::Iter`\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath2;\n+\n+/// Generics with bump `<Vec<i32>>`s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump;\n+\n+/// Generics with bump `Vec<Vec<i32>>`s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump2;\n+\n+/// Generics with punct `<Vec<i32>>`!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct;\n+\n+/// Generics with punct `Vec<Vec<i32>>`!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct2;"}, {"sha": "cdd652f397ec4b81cc0d780ae27b3be26f8ea5e4", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -30,3 +30,43 @@ pub struct BareTurbofish;\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct Nested;\n+\n+/// Nested generics Vec<Vec<u32>>\n+//~^ ERROR unclosed HTML tag `u32`\n+//~|HELP try marking as source\n+pub struct NestedGenerics;\n+\n+/// Generics with path Vec<i32>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct GenericsWithPath;\n+\n+/// Generics with path <Vec<i32>>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath;\n+\n+/// Generics with path Vec<Vec<i32>>::Iter\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPath2;\n+\n+/// Generics with bump <Vec<i32>>s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump;\n+\n+/// Generics with bump Vec<Vec<i32>>s\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithBump2;\n+\n+/// Generics with punct <Vec<i32>>!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct;\n+\n+/// Generics with punct Vec<Vec<i32>>!\n+//~^ ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct NestedGenericsWithPunct2;"}, {"sha": "211dd4210d50ce319d083d48a6020a5ef7a02346", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.stderr", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -69,5 +69,93 @@ help: try marking as source code\n LL | /// This <span>`Vec::<i32>`</span> thing!\n    |                +          +\n \n-error: aborting due to 6 previous errors\n+error: unclosed HTML tag `u32`\n+  --> $DIR/html-as-generics.rs:34:28\n+   |\n+LL | /// Nested generics Vec<Vec<u32>>\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Nested generics `Vec<Vec<u32>>`\n+   |                     +             +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:39:27\n+   |\n+LL | /// Generics with path Vec<i32>::Iter\n+   |                           ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `Vec<i32>::Iter`\n+   |                        +              +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:44:28\n+   |\n+LL | /// Generics with path <Vec<i32>>::Iter\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `<Vec<i32>>::Iter`\n+   |                        +                +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:49:31\n+   |\n+LL | /// Generics with path Vec<Vec<i32>>::Iter\n+   |                               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with path `Vec<Vec<i32>>::Iter`\n+   |                        +                   +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:54:28\n+   |\n+LL | /// Generics with bump <Vec<i32>>s\n+   |                            ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with bump `<Vec<i32>>`s\n+   |                        +          +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:59:31\n+   |\n+LL | /// Generics with bump Vec<Vec<i32>>s\n+   |                               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with bump `Vec<Vec<i32>>`s\n+   |                        +             +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:64:29\n+   |\n+LL | /// Generics with punct <Vec<i32>>!\n+   |                             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with punct `<Vec<i32>>`!\n+   |                         +          +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:69:32\n+   |\n+LL | /// Generics with punct Vec<Vec<i32>>!\n+   |                                ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// Generics with punct `Vec<Vec<i32>>`!\n+   |                         +             +\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "1be5d02482e8438ad5a85972ade53ecd909e9b2b", "filename": "src/test/ui/async-await/issue-101715.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+struct S;\n+\n+impl S {\n+    fn very_long_method_name_the_longest_method_name_in_the_whole_universe(self) {}\n+}\n+\n+async fn foo() {\n+    S.very_long_method_name_the_longest_method_name_in_the_whole_universe()\n+        .await\n+        //~^ error: `()` is not a future\n+        //~| help: remove the `.await`\n+        //~| help: the trait `Future` is not implemented for `()`\n+}\n+\n+fn main() {}"}, {"sha": "a0e8d2a89437176e345b4fb1fefa974f554fd333", "filename": "src/test/ui/async-await/issue-101715.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-101715.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/issue-101715.rs:11:9\n+   |\n+LL |         .await\n+   |         ^^^^^^\n+   |         |\n+   |         `()` is not a future\n+   |         help: remove the `.await`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required for `()` to implement `IntoFuture`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d3cf57d3b14022ebcda425a9cb8a02398e4b907e", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -22,16 +22,14 @@ error[E0277]: `()` is not a future\n   --> $DIR/issue-70594.rs:4:11\n    |\n LL |     [1; ().await];\n-   |           ^^^^^^ `()` is not a future\n+   |           ^^^^^^\n+   |           |\n+   |           `()` is not a future\n+   |           help: remove the `.await`\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n    = note: required for `()` to implement `IntoFuture`\n-help: remove the `.await`\n-   |\n-LL -     [1; ().await];\n-LL +     [1; ()];\n-   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "222afb2c7b2bbc1e2f16a267d34f176fa2e994d3", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -28,16 +28,14 @@ error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n   --> $DIR/issue-62009-1.rs:12:15\n    |\n LL |     (|_| 2333).await;\n-   |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n+   |               ^^^^^^\n+   |               |\n+   |               `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n+   |               help: remove the `.await`\n    |\n    = help: the trait `Future` is not implemented for closure `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:6: 12:9] must be a future or must implement `IntoFuture` to be awaited\n    = note: required for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` to implement `IntoFuture`\n-help: remove the `.await`\n-   |\n-LL -     (|_| 2333).await;\n-LL +     (|_| 2333);\n-   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fc1acfd32d2fc40a1a0e31094c47aa96e50994a9", "filename": "src/test/ui/proc-macro/dollar-crate-issue-101211.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-101211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-101211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-101211.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// edition:2021\n+// aux-build:test-macros.rs\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! foo {\n+    ($($path:ident)::*) => (\n+        test_macros::recollect!(\n+            $($path)::*\n+        )\n+    )\n+}\n+\n+macro_rules! baz {\n+    () => (\n+        foo!($crate::BAR)\n+    )\n+}\n+\n+pub const BAR: u32 = 19;\n+\n+fn main(){\n+    std::println!(\"{}\", baz!());\n+}"}, {"sha": "13e9493eaa59b2d7ff37d189d43a25d42281206d", "filename": "src/test/ui/typeof/issue-100183.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.rs?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,6 @@\n+struct Struct {\n+    y: (typeof(\"hey\"),),\n+    //~^ ERROR `typeof` is a reserved keyword but unimplemented\n+}\n+\n+fn main() {}"}, {"sha": "01d3079b246d179683a5e9f0c490598168ad850f", "filename": "src/test/ui/typeof/issue-100183.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Fissue-100183.stderr?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -0,0 +1,14 @@\n+error[E0516]: `typeof` is a reserved keyword but unimplemented\n+  --> $DIR/issue-100183.rs:2:9\n+   |\n+LL |     y: (typeof(\"hey\"),),\n+   |         ^^^^^^^^^^^^^ reserved keyword\n+   |\n+help: consider replacing `typeof(...)` with an actual type\n+   |\n+LL |     y: (&'static str,),\n+   |         ~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0516`."}, {"sha": "4b2dcc246e4ee54758c1035bedcd38e94e168356", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/089584db01c85c24cc98a532eb7d02f651a2c137/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/089584db01c85c24cc98a532eb7d02f651a2c137/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=089584db01c85c24cc98a532eb7d02f651a2c137", "patch": "@@ -11,6 +11,7 @@ allow-unauthenticated = [\n     \"S-*\",\n     \"T-*\",\n     \"WG-*\",\n+    \"const-hack\",\n     \"needs-fcp\",\n     \"relnotes\",\n     \"requires-nightly\","}]}