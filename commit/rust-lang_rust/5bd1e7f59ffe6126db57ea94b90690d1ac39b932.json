{"sha": "5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDFlN2Y1OWZmZTYxMjZkYjU3ZWE5NGI5MDY5MGQxYWMzOWI5MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-17T12:38:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-17T12:38:08Z"}, "message": "Auto merge of #37793 - jseyfried:fix_proc_macro_def_ids, r=nrc\n\nFix proc macro def ids\n\nUpdate some `CStore` methods to also work correctly with proc macro def ids.\nFixes #37788.\nr? @nrc", "tree": {"sha": "2805ebb7d4a22282baacccac0eca709d6dbc8c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2805ebb7d4a22282baacccac0eca709d6dbc8c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "html_url": "https://github.com/rust-lang/rust/commit/5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29181b3f0c6b27bad24b78630a55b0d527b57068", "url": "https://api.github.com/repos/rust-lang/rust/commits/29181b3f0c6b27bad24b78630a55b0d527b57068", "html_url": "https://github.com/rust-lang/rust/commit/29181b3f0c6b27bad24b78630a55b0d527b57068"}, {"sha": "0172e463b0f0c720069d96602209f77c50380066", "url": "https://api.github.com/repos/rust-lang/rust/commits/0172e463b0f0c720069d96602209f77c50380066", "html_url": "https://github.com/rust-lang/rust/commit/0172e463b0f0c720069d96602209f77c50380066"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "2018d829597d43bb280799594efe1343a737f07e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn load_macro(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n-            return LoadedMacro::ProcMacro(proc_macros[id.index.as_usize()].1.clone());\n+            return LoadedMacro::ProcMacro(proc_macros[id.index.as_usize() - 1].1.clone());\n         }\n \n         let (name, def) = data.get_macro(id.index);"}, {"sha": "79c90a04b3738a43316162a86e6672d8bf9f9cd5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::intravisit::IdRange;\n \n use rustc::middle::cstore::{DepKind, InlinedItem, LinkagePreference};\n use rustc::hir::def::{self, Def, CtorKind};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n@@ -513,7 +513,14 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n-        self.entry(index).kind.to_def(self.local_def_id(index))\n+        if self.proc_macros.is_some() {\n+            Some(match index {\n+                CRATE_DEF_INDEX => Def::Mod(self.local_def_id(index)),\n+                _ => Def::Macro(self.local_def_id(index)),\n+            })\n+        } else {\n+            self.entry(index).kind.to_def(self.local_def_id(index))\n+        }\n     }\n \n     pub fn get_trait_def(&self,\n@@ -643,15 +650,24 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n-        self.entry(id).stability.map(|stab| stab.decode(self))\n+        match self.proc_macros {\n+            Some(_) if id != CRATE_DEF_INDEX => None,\n+            _ => self.entry(id).stability.map(|stab| stab.decode(self)),\n+        }\n     }\n \n     pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n-        self.entry(id).deprecation.map(|depr| depr.decode(self))\n+        match self.proc_macros {\n+            Some(_) if id != CRATE_DEF_INDEX => None,\n+            _ => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n+        }\n     }\n \n     pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n-        self.entry(id).visibility\n+        match self.proc_macros {\n+            Some(_) => ty::Visibility::Public,\n+            _ => self.entry(id).visibility,\n+        }\n     }\n \n     fn get_impl_data(&self, id: DefIndex) -> ImplData<'tcx> {\n@@ -692,11 +708,11 @@ impl<'a, 'tcx> CrateMetadata {\n         where F: FnMut(def::Export)\n     {\n         if let Some(ref proc_macros) = self.proc_macros {\n-            for (id, &(name, _)) in proc_macros.iter().enumerate() {\n-                callback(def::Export {\n-                    name: name,\n-                    def: Def::Macro(DefId { krate: self.cnum, index: DefIndex::new(id), }),\n-                })\n+            if id == CRATE_DEF_INDEX {\n+                for (id, &(name, _)) in proc_macros.iter().enumerate() {\n+                    let def = Def::Macro(DefId { krate: self.cnum, index: DefIndex::new(id + 1) });\n+                    callback(def::Export { name: name, def: def });\n+                }\n             }\n             return\n         }\n@@ -894,6 +910,9 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_item_attrs(&self, node_id: DefIndex) -> Vec<ast::Attribute> {\n+        if self.proc_macros.is_some() && node_id != CRATE_DEF_INDEX {\n+            return Vec::new();\n+        }\n         // The attributes for a tuple struct are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition"}, {"sha": "8a92ca74f376a027300d5cf72a36fe94acc05854", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-a-b.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs?ref=5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro, proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(A)]\n+pub fn derive_a(_: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}\n+\n+#[proc_macro_derive(B)]\n+pub fn derive_b(_: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}"}, {"sha": "6d1030026dba24c2e937bf015a75a43aa5f4d0e7", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-37788.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-37788.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1e7f59ffe6126db57ea94b90690d1ac39b932/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-37788.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-37788.rs?ref=5bd1e7f59ffe6126db57ea94b90690d1ac39b932", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:derive-a-b.rs\n+\n+#![feature(proc_macro)]\n+\n+#[macro_use]\n+extern crate derive_a_b;\n+\n+fn main() {\n+    // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`) does not ICE.\n+    std::cell::Cell::new(0) //~ ERROR mismatched types\n+}"}]}