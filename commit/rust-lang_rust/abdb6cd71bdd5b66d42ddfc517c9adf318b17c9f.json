{"sha": "abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZGI2Y2Q3MWJkZDViNjZkNDJkZGZjNTE3YzlhZGYzMThiMTdjOWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-20T23:05:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-20T23:21:27Z"}, "message": "Rewrite reap_dead_tasks to never grab the sched lock before a task lock\n\nDoing so contradicts the locking order used everywhere else and causes\ndeadlocks.\n\nUn-XFAIL task-perf-spawnalot\n\nCloses #854", "tree": {"sha": "7d7ec6dc9fe85e96d2b6f52d1ff75a4d0e841d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7ec6dc9fe85e96d2b6f52d1ff75a4d0e841d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "html_url": "https://github.com/rust-lang/rust/commit/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25416bfae190d68d706b80903e46748da3dfadc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/25416bfae190d68d706b80903e46748da3dfadc4", "html_url": "https://github.com/rust-lang/rust/commit/25416bfae190d68d706b80903e46748da3dfadc4"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "e285f18e682fbc51c4a6ee96dbcb68dbfa21308b", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "patch": "@@ -100,25 +100,66 @@ rust_scheduler::number_of_live_tasks() {\n void\n rust_scheduler::reap_dead_tasks(int id) {\n     I(this, lock.lock_held_by_current_thread());\n-    for (size_t i = 0; i < dead_tasks.length(); ) {\n+    if (dead_tasks.length() == 0) {\n+        return;\n+    }\n+\n+    // First make up copy of the dead_task list with the lock held\n+    size_t dead_tasks_len = dead_tasks.length();\n+    rust_task **dead_tasks_copy = (rust_task**)\n+        srv->malloc(sizeof(rust_task*) * dead_tasks_len);\n+    for (size_t i = 0; i < dead_tasks_len; ++i) {\n         rust_task *task = dead_tasks[i];\n+        dead_tasks_copy[i] = task;\n+    }\n+\n+    // Now drop the lock and futz with the tasks. This avoids establishing\n+    // a sched->lock then task->lock locking order, which would be devestating\n+    // to performance.\n+    lock.unlock();\n+\n+    for (size_t i = 0; i < dead_tasks_len; ++i) {\n+        rust_task *task = dead_tasks_copy[i];\n         task->lock.lock();\n         // Make sure this task isn't still running somewhere else...\n         if (task->can_schedule(id)) {\n             I(this, task->tasks_waiting_to_join.is_empty());\n-            dead_tasks.remove(task);\n             DLOG(this, task,\n                 \"deleting unreferenced dead task %s @0x%\" PRIxPTR,\n                 task->name, task);\n             task->lock.unlock();\n+        } else {\n+            task->lock.unlock();\n+            dead_tasks_copy[i] = NULL;\n+        }\n+    }\n+\n+    // Now grab the lock again and remove the tasks that were truly dead\n+    lock.lock();\n+\n+    for (size_t i = 0; i < dead_tasks_len; ++i) {\n+        rust_task *task = dead_tasks_copy[i];\n+        if (task) {\n+            dead_tasks.remove(task);\n+        }\n+    }\n+\n+    // Now unlock again because we have to actually free the dead tasks,\n+    // and that may end up wanting to do lock the task and sched locks\n+    // again (via target->send)\n+    lock.unlock();\n+\n+    for (size_t i = 0; i < dead_tasks_len; ++i) {\n+        rust_task *task = dead_tasks_copy[i];\n+        if (task) {\n             task->deref();\n             sync::decrement(kernel->live_tasks);\n             kernel->wakeup_schedulers();\n-            continue;\n         }\n-        task->lock.unlock();\n-        ++i;\n     }\n+    srv->free(dead_tasks_copy);\n+\n+    lock.lock();\n }\n \n /**"}, {"sha": "4ce6e44879b01f0e09ff282979fc53adcd96613e", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "patch": "@@ -90,6 +90,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n \n rust_task::~rust_task()\n {\n+    I(sched, !sched->lock.lock_held_by_current_thread());\n     DLOG(sched, task, \"~rust_task %s @0x%\" PRIxPTR \", refcnt=%d\",\n          name, (uintptr_t)this, ref_count);\n "}, {"sha": "6d0c90ab5dfba24116f3a1158c9105331ce91472", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=abdb6cd71bdd5b66d42ddfc517c9adf318b17c9f", "patch": "@@ -1,7 +1,3 @@\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n-\n use std;\n import std::vec;\n import std::task;"}]}