{"sha": "356dd3d909f20b5b1e1c44205d522b7b2ead0d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmRkM2Q5MDlmMjBiNWIxZTFjNDQyMDVkNTIyYjdiMmVhZDBkMGU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-25T23:09:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-25T23:09:31Z"}, "message": "Clean up ItemTree lowering now that it's 1:1", "tree": {"sha": "113bc5795ca3cd5118cb6754edbbe34fc150490d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/113bc5795ca3cd5118cb6754edbbe34fc150490d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e", "html_url": "https://github.com/rust-lang/rust/commit/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52df9187730abbcd9cbb132f7d184c74b9a3b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b52df9187730abbcd9cbb132f7d184c74b9a3b7f", "html_url": "https://github.com/rust-lang/rust/commit/b52df9187730abbcd9cbb132f7d184c74b9a3b7f"}], "stats": {"total": 79, "additions": 26, "deletions": 53}, "files": [{"sha": "798ab46dd7029df3c32b60bb1c39cf3ccdedab7b", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 26, "deletions": 53, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356dd3d909f20b5b1e1c44205d522b7b2ead0d0e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=356dd3d909f20b5b1e1c44205d522b7b2ead0d0e", "patch": "@@ -3,7 +3,6 @@\n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n-use smallvec::SmallVec;\n use syntax::{\n     ast::{self, ModuleItemOwner},\n     SyntaxNode, WalkEvent,\n@@ -20,17 +19,6 @@ fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n     FileItemTreeId { index, _p: PhantomData }\n }\n \n-struct ModItems(SmallVec<[ModItem; 1]>);\n-\n-impl<T> From<T> for ModItems\n-where\n-    T: Into<ModItem>,\n-{\n-    fn from(t: T) -> Self {\n-        ModItems(SmallVec::from_buf([t.into(); 1]))\n-    }\n-}\n-\n pub(super) struct Ctx<'a> {\n     db: &'a dyn DefDatabase,\n     tree: ItemTree,\n@@ -53,11 +41,8 @@ impl<'a> Ctx<'a> {\n     }\n \n     pub(super) fn lower_module_items(mut self, item_owner: &dyn ModuleItemOwner) -> ItemTree {\n-        self.tree.top_level = item_owner\n-            .items()\n-            .flat_map(|item| self.lower_mod_item(&item, false))\n-            .flat_map(|items| items.0)\n-            .collect();\n+        self.tree.top_level =\n+            item_owner.items().flat_map(|item| self.lower_mod_item(&item, false)).collect();\n         self.tree\n     }\n \n@@ -69,7 +54,6 @@ impl<'a> Ctx<'a> {\n                 _ => None,\n             })\n             .flat_map(|item| self.lower_mod_item(&item, false))\n-            .flat_map(|items| items.0)\n             .collect();\n \n         // Non-items need to have their inner items collected.\n@@ -96,7 +80,7 @@ impl<'a> Ctx<'a> {\n         self.tree.data_mut()\n     }\n \n-    fn lower_mod_item(&mut self, item: &ast::Item, inner: bool) -> Option<ModItems> {\n+    fn lower_mod_item(&mut self, item: &ast::Item, inner: bool) -> Option<ModItem> {\n         // Collect inner items for 1-to-1-lowered items.\n         match item {\n             ast::Item::Struct(_)\n@@ -127,34 +111,28 @@ impl<'a> Ctx<'a> {\n         };\n \n         let attrs = RawAttrs::new(self.db, item, &self.hygiene);\n-        let items = match item {\n-            ast::Item::Struct(ast) => self.lower_struct(ast).map(Into::into),\n-            ast::Item::Union(ast) => self.lower_union(ast).map(Into::into),\n-            ast::Item::Enum(ast) => self.lower_enum(ast).map(Into::into),\n-            ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n-            ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::Item::Static(ast) => self.lower_static(ast).map(Into::into),\n-            ast::Item::Const(ast) => Some(self.lower_const(ast).into()),\n-            ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n-            ast::Item::Trait(ast) => self.lower_trait(ast).map(Into::into),\n-            ast::Item::Impl(ast) => self.lower_impl(ast).map(Into::into),\n-            ast::Item::Use(ast) => Some(ModItems(\n-                self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n-            )),\n-            ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n-            ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n-            ast::Item::MacroRules(ast) => self.lower_macro_rules(ast).map(Into::into),\n-            ast::Item::MacroDef(ast) => self.lower_macro_def(ast).map(Into::into),\n-            ast::Item::ExternBlock(ast) => Some(self.lower_extern_block(ast).into()),\n+        let item: ModItem = match item {\n+            ast::Item::Struct(ast) => self.lower_struct(ast)?.into(),\n+            ast::Item::Union(ast) => self.lower_union(ast)?.into(),\n+            ast::Item::Enum(ast) => self.lower_enum(ast)?.into(),\n+            ast::Item::Fn(ast) => self.lower_function(ast)?.into(),\n+            ast::Item::TypeAlias(ast) => self.lower_type_alias(ast)?.into(),\n+            ast::Item::Static(ast) => self.lower_static(ast)?.into(),\n+            ast::Item::Const(ast) => self.lower_const(ast).into(),\n+            ast::Item::Module(ast) => self.lower_module(ast)?.into(),\n+            ast::Item::Trait(ast) => self.lower_trait(ast)?.into(),\n+            ast::Item::Impl(ast) => self.lower_impl(ast)?.into(),\n+            ast::Item::Use(ast) => self.lower_use(ast)?.into(),\n+            ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast)?.into(),\n+            ast::Item::MacroCall(ast) => self.lower_macro_call(ast)?.into(),\n+            ast::Item::MacroRules(ast) => self.lower_macro_rules(ast)?.into(),\n+            ast::Item::MacroDef(ast) => self.lower_macro_def(ast)?.into(),\n+            ast::Item::ExternBlock(ast) => self.lower_extern_block(ast).into(),\n         };\n \n-        if !attrs.is_empty() {\n-            for item in items.iter().flat_map(|items| &items.0) {\n-                self.add_attrs((*item).into(), attrs.clone());\n-            }\n-        }\n+        self.add_attrs(item.into(), attrs.clone());\n \n-        items\n+        Some(item)\n     }\n \n     fn add_attrs(&mut self, item: AttrOwner, attrs: RawAttrs) {\n@@ -188,12 +166,10 @@ impl<'a> Ctx<'a> {\n                             },\n                             ast::Item(item) => {\n                                 // FIXME: This triggers for macro calls in expression/pattern/type position\n-                                let mod_items = self.lower_mod_item(&item, true);\n+                                let mod_item = self.lower_mod_item(&item, true);\n                                 let current_block = block_stack.last();\n-                                if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n-                                    if !mod_items.0.is_empty() {\n-                                        self.data().inner_items.entry(*block).or_default().extend(mod_items.0.iter().copied());\n-                                    }\n+                                if let (Some(mod_item), Some(block)) = (mod_item, current_block) {\n+                                        self.data().inner_items.entry(*block).or_default().push(mod_item);\n                                 }\n                             },\n                             _ => {}\n@@ -478,10 +454,7 @@ impl<'a> Ctx<'a> {\n                 items: module\n                     .item_list()\n                     .map(|list| {\n-                        list.items()\n-                            .flat_map(|item| self.lower_mod_item(&item, false))\n-                            .flat_map(|items| items.0)\n-                            .collect()\n+                        list.items().flat_map(|item| self.lower_mod_item(&item, false)).collect()\n                     })\n                     .unwrap_or_else(|| {\n                         cov_mark::hit!(name_res_works_for_broken_modules);"}]}