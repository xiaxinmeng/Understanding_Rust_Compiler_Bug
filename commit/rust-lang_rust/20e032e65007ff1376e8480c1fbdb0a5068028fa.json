{"sha": "20e032e65007ff1376e8480c1fbdb0a5068028fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZTAzMmU2NTAwN2ZmMTM3NmU4NDgwYzFmYmRiMGE1MDY4MDI4ZmE=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-09-15T20:14:35Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-10-17T22:57:47Z"}, "message": "Make it more clear when complaining about async fn's return types", "tree": {"sha": "a8fed9b6416998176a07923c06c1a017c48cc238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8fed9b6416998176a07923c06c1a017c48cc238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20e032e65007ff1376e8480c1fbdb0a5068028fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20e032e65007ff1376e8480c1fbdb0a5068028fa", "html_url": "https://github.com/rust-lang/rust/commit/20e032e65007ff1376e8480c1fbdb0a5068028fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20e032e65007ff1376e8480c1fbdb0a5068028fa/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffeeb20398bb9a25c1f75599b942f57c85a2140d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffeeb20398bb9a25c1f75599b942f57c85a2140d", "html_url": "https://github.com/rust-lang/rust/commit/ffeeb20398bb9a25c1f75599b942f57c85a2140d"}], "stats": {"total": 464, "additions": 331, "deletions": 133}, "files": [{"sha": "59786059fae675d6001101bfc036b8ff8b3e999a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 79, "deletions": 33, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -102,43 +102,89 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             None => String::new(),\n         };\n \n-        let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n-            (None, None) => {\n-                let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n+        let (span_1, span_2, main_label, span_label, future_return_type) =\n+            match (sup_is_ret_type, sub_is_ret_type) {\n+                (None, None) => {\n+                    let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n+                        (\n+                            \"this type is declared with multiple lifetimes...\".to_owned(),\n+                            \"...but data with one lifetime flows into the other here\".to_owned(),\n+                        )\n+                    } else {\n+                        (\n+                            \"these two types are declared with different lifetimes...\".to_owned(),\n+                            format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n+                        )\n+                    };\n+                    (ty_sup.span, ty_sub.span, main_label_1, span_label_1, None)\n+                }\n+\n+                (Some(ret_span), _) => {\n+                    let sup_future = self.future_return_type(scope_def_id_sup);\n+                    let (return_type, action) = if let Some(_) = sup_future {\n+                        (\"returned future\", \"held across an await point\")\n+                    } else {\n+                        (\"return type\", \"returned\")\n+                    };\n+\n                     (\n-                        \"this type is declared with multiple lifetimes...\".to_owned(),\n-                        \"...but data with one lifetime flows into the other here\".to_owned(),\n+                        ty_sub.span,\n+                        ret_span,\n+                        format!(\n+                            \"this parameter and the {} are declared with different lifetimes...\",\n+                            return_type\n+                        ),\n+                        format!(\"...but data{} is {} here\", span_label_var1, action),\n+                        sup_future,\n                     )\n-                } else {\n+                }\n+                (_, Some(ret_span)) => {\n+                    let sub_future = self.future_return_type(scope_def_id_sub);\n+                    let (return_type, action) = if let Some(_) = sub_future {\n+                        (\"returned future\", \"held across an await point\")\n+                    } else {\n+                        (\"return type\", \"returned\")\n+                    };\n+\n                     (\n-                        \"these two types are declared with different lifetimes...\".to_owned(),\n-                        format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n+                        ty_sup.span,\n+                        ret_span,\n+                        format!(\n+                            \"this parameter and the {} are declared with different lifetimes...\",\n+                            return_type\n+                        ),\n+                        format!(\"...but data{} is {} here\", span_label_var1, action),\n+                        sub_future,\n                     )\n-                };\n-                (ty_sup.span, ty_sub.span, main_label_1, span_label_1)\n-            }\n-\n-            (Some(ret_span), _) => (\n-                ty_sub.span,\n-                ret_span,\n-                \"this parameter and the return type are declared with different lifetimes...\"\n-                    .to_owned(),\n-                format!(\"...but data{} is returned here\", span_label_var1),\n-            ),\n-            (_, Some(ret_span)) => (\n-                ty_sup.span,\n-                ret_span,\n-                \"this parameter and the return type are declared with different lifetimes...\"\n-                    .to_owned(),\n-                format!(\"...but data{} is returned here\", span_label_var1),\n-            ),\n-        };\n-\n-        struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\")\n-            .span_label(span_1, main_label)\n-            .span_label(span_2, String::new())\n-            .span_label(span, span_label)\n-            .emit();\n+                }\n+            };\n+\n+        let mut e = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n+\n+        e.span_label(span_1, main_label);\n+        e.span_label(span_2, String::new());\n+        e.span_label(span, span_label);\n+\n+        if let Some(t) = future_return_type {\n+            let snip = self\n+                .tcx()\n+                .sess\n+                .source_map()\n+                .span_to_snippet(t.span)\n+                .ok()\n+                .and_then(|s| match (&t.kind, s.as_str()) {\n+                    (rustc_hir::TyKind::Tup(&[]), \"\") => Some(\"()\".to_string()),\n+                    (_, \"\") => None,\n+                    _ => Some(s),\n+                })\n+                .unwrap_or(\"{unnamed_type}\".to_string());\n+\n+            e.span_label(\n+                t.span,\n+                &format!(\"this `async fn` implicitly returns an `impl Future<Output = {}>`\", snip),\n+            );\n+        }\n+        e.emit();\n         Some(ErrorReported)\n     }\n }"}, {"sha": "ca93b2777ab2aaf0931d068dd060e34098c4f931", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -85,6 +85,60 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         })\n     }\n \n+    pub(super) fn future_return_type(\n+        &self,\n+        local_def_id: LocalDefId,\n+    ) -> Option<&rustc_hir::Ty<'_>> {\n+        if let Some(hir::IsAsync::Async) = self.asyncness(local_def_id) {\n+            if let rustc_middle::ty::Opaque(def_id, _) =\n+                self.tcx().type_of(local_def_id).fn_sig(self.tcx()).output().skip_binder().kind()\n+            {\n+                match self.tcx().hir().get_if_local(*def_id) {\n+                    Some(hir::Node::Item(hir::Item {\n+                        kind:\n+                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                                bounds,\n+                                origin: hir::OpaqueTyOrigin::AsyncFn,\n+                                ..\n+                            }),\n+                        ..\n+                    })) => {\n+                        for b in bounds.iter() {\n+                            if let hir::GenericBound::LangItemTrait(\n+                                hir::LangItem::Future,\n+                                _span,\n+                                _hir_id,\n+                                generic_args,\n+                            ) = b\n+                            {\n+                                for type_binding in generic_args.bindings.iter() {\n+                                    if type_binding.ident.name == rustc_span::sym::Output {\n+                                        if let hir::TypeBindingKind::Equality { ty } =\n+                                            type_binding.kind\n+                                        {\n+                                            return Some(ty);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n+    pub(super) fn asyncness(&self, local_def_id: LocalDefId) -> Option<hir::IsAsync> {\n+        // similar to the asyncness fn in rustc_ty::ty\n+        let hir_id = self.tcx().hir().local_def_id_to_hir_id(local_def_id);\n+        let node = self.tcx().hir().get(hir_id);\n+        let fn_like = rustc_middle::hir::map::blocks::FnLikeNode::from_node(node)?;\n+\n+        Some(fn_like.asyncness())\n+    }\n+\n     // Here, we check for the case where the anonymous region\n     // is in the return type.\n     // FIXME(#42703) - Need to handle certain cases here."}, {"sha": "ac29cca9d3f602a8ac4c4f3da8320929823f481f", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -2,12 +2,14 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |         -------- this parameter and the return type are declared with different lifetimes...\n+   |         -------- this parameter and the returned future are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n    |          --------\n+   |          |\n+   |          this `async fn` implicitly returns an `impl Future<Output = &dyn Foo>`\n LL |     {\n LL |         foo\n-   |         ^^^ ...but data from `foo` is returned here\n+   |         ^^^ ...but data from `foo` is held across an await point here\n \n error: aborting due to previous error\n "}, {"sha": "5041b39a9e9d1c9bab43a2ecfd4bf37aa306dd2a", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -4,8 +4,9 @@ error[E0623]: lifetime mismatch\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |                                           ------                ^^^^^^^^^^^^^^\n    |                                           |                     |\n-   |                                           |                     ...but data from `b` is returned here\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                                           |                     ...but data from `b` is held across an await point here\n+   |                                           |                     this `async fn` implicitly returns an `impl Future<Output = impl Trait<'a>>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n \n error: aborting due to previous error\n "}, {"sha": "feec086764a34eadc80561c19a39790be614d2ad", "filename": "src/test/ui/issues/issue-76547.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -0,0 +1,38 @@\n+// Test for for diagnostic improvement issue #76547\n+// edition:2018\n+\n+use std::{\n+    future::Future,\n+    task::{Context, Poll}\n+};\n+use std::pin::Pin;\n+\n+pub struct ListFut<'a>(&'a mut [&'a mut [u8]]);\n+impl<'a> Future for ListFut<'a> {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn fut(bufs: &mut [&mut [u8]]) {\n+    ListFut(bufs).await\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+pub struct ListFut2<'a>(&'a mut [&'a mut [u8]]);\n+impl<'a> Future for ListFut2<'a> {\n+    type Output = i32;\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n+    ListFut2(bufs).await\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+fn main() {}"}, {"sha": "9bfb0f28028cb823a1e336e5c8ec61dfb71a558c", "filename": "src/test/ui/issues/issue-76547.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -0,0 +1,25 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-76547.rs:20:13\n+   |\n+LL | async fn fut(bufs: &mut [&mut [u8]]) {\n+   |                          ---------   -\n+   |                          |           |\n+   |                          |           this `async fn` implicitly returns an `impl Future<Output = ()>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n+LL |     ListFut(bufs).await\n+   |             ^^^^ ...but data from `bufs` is held across an await point here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-76547.rs:34:14\n+   |\n+LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n+   |                           ---------      ---\n+   |                           |              |\n+   |                           |              this `async fn` implicitly returns an `impl Future<Output = i32>`\n+   |                           this parameter and the returned future are declared with different lifetimes...\n+LL |     ListFut2(bufs).await\n+   |              ^^^^ ...but data from `bufs` is held across an await point here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "e6846fb40494faf3f33c08a05b95f5810fe1bb65", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -2,25 +2,28 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----               ----   ^ ...but data from `f` is returned here\n-   |                          |\n-   |                          this parameter and the return type are declared with different lifetimes...\n+   |                          ----               ----   ^ ...but data from `f` is held across an await point here\n+   |                          |                  |\n+   |                          |                  this `async fn` implicitly returns an `impl Future<Output = &Foo>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----                        -----------------          ^ ...but data from `f` is returned here\n-   |                          |\n-   |                          this parameter and the return type are declared with different lifetimes...\n+   |                          -----                        -----------------          ^ ...but data from `f` is held across an await point here\n+   |                          |                            |\n+   |                          |                            this `async fn` implicitly returns an `impl Future<Output = (Pin<&Foo>, &Foo)>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----                   ---   ^^^ ...but data from `arg` is returned here\n-   |                                  |\n-   |                                  this parameter and the return type are declared with different lifetimes...\n+   |                                  -----                   ---   ^^^ ...but data from `arg` is held across an await point here\n+   |                                  |                       |\n+   |                                  |                       this `async fn` implicitly returns an `impl Future<Output = &()>`\n+   |                                  this parameter and the returned future are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3221d27085096ed6add6e183d8f421de1b42abca", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -3,60 +3,66 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                  |\n+   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                  |\n+   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ----\n-   |                                         |\n-   |                                         this parameter and the return type are declared with different lifetimes...\n+   |                                         |                    |\n+   |                                         |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b6ca986923d2e8c5736a0b34f707972a954e0574", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -3,60 +3,66 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                      |\n+   |                       |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                      |\n+   |                             |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                       |\n+   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                       |\n+   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                        |\n+   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                        |\n+   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eda15d76390b66d2d9f2adcd9da9ff436d0d0e36", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -3,50 +3,55 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ----\n-   |                               |\n-   |                               this parameter and the return type are declared with different lifetimes...\n+   |                               |                        |\n+   |                               |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                         |\n+   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                         |\n+   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                          |\n+   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                          |\n+   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b42caa88c6fef26df3e5f617cac6e96c27568b35", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -3,70 +3,77 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                  |\n+   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                  |\n+   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ---\n-   |                                            |\n-   |                                            this parameter and the return type are declared with different lifetimes...\n+   |                                            |                        |\n+   |                                            |                        this `async fn` implicitly returns an `impl Future<Output = &u8>`\n+   |                                            this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "599becd308062631ee7bcca793c8217b6782ca29", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20e032e65007ff1376e8480c1fbdb0a5068028fa/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=20e032e65007ff1376e8480c1fbdb0a5068028fa", "patch": "@@ -3,50 +3,55 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ----\n-   |                               |\n-   |                               this parameter and the return type are declared with different lifetimes...\n+   |                               |                    |\n+   |                               |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                     |\n+   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                     |\n+   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                      |\n+   |                                               |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ----\n-   |                                           |\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                                           |                      |\n+   |                                           |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 5 previous errors\n "}]}