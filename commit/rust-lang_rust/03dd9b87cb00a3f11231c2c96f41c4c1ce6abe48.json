{"sha": "03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZGQ5Yjg3Y2IwMGEzZjExMjMxYzJjOTZmNDFjNGMxY2U2YWJlNDg=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-04-17T11:49:26Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-05-09T12:33:24Z"}, "message": "Add test to ensure that atomic types are lock-free", "tree": {"sha": "da2ca58a40db8e9e7ce318b4a9f84047ccf65b52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2ca58a40db8e9e7ce318b4a9f84047ccf65b52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "html_url": "https://github.com/rust-lang/rust/commit/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97216a6ce5f56a0bbff0d91dd5bd443f90bd76eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/97216a6ce5f56a0bbff0d91dd5bd443f90bd76eb", "html_url": "https://github.com/rust-lang/rust/commit/97216a6ce5f56a0bbff0d91dd5bd443f90bd76eb"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "78e7bb231372f89820c6b1ffe6dd9f3a0190e27d", "filename": "src/test/run-make/atomic-lock-free/Makefile", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile?ref=03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "patch": "@@ -0,0 +1,30 @@\n+-include ../tools.mk\n+\n+# This tests ensure that atomic types are never lowered into runtime library calls that are not\n+# guaranteed to be lock-free.\n+\n+all:\n+ifeq ($(UNAME),Linux)\n+\t$(RUSTC) --target=i686-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=x86_64-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=arm-unknown-linux-gnueabi atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=arm-unknown-linux-gnueabihf atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=armv7-unknown-linux-gnueabihf atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=aarch64-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=mips-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=mipsel-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=powerpc-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=powerpc64-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=powerpc64le-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+endif"}, {"sha": "8731cd960f33c133195f940f0e922f4e484d3154", "filename": "src/test/run-make/atomic-lock-free/atomic_lock_free.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=03dd9b87cb00a3f11231c2c96f41c4c1ce6abe48", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(cfg_target_has_atomic, no_core, intrinsics, lang_items)]\n+#![crate_type=\"rlib\"]\n+#![no_core]\n+\n+extern \"rust-intrinsic\" {\n+    fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[cfg(target_has_atomic = \"8\")]\n+pub unsafe fn atomic_u8(x: *mut u8) {\n+    atomic_xadd(x, 1);\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"8\")]\n+pub unsafe fn atomic_i8(x: *mut i8) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"16\")]\n+pub unsafe fn atomic_u16(x: *mut u16) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"16\")]\n+pub unsafe fn atomic_i16(x: *mut i16) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"32\")]\n+pub unsafe fn atomic_u32(x: *mut u32) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"32\")]\n+pub unsafe fn atomic_i32(x: *mut i32) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"64\")]\n+pub unsafe fn atomic_u64(x: *mut u64) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"64\")]\n+pub unsafe fn atomic_i64(x: *mut i64) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"ptr\")]\n+pub unsafe fn atomic_usize(x: *mut usize) {\n+    atomic_xadd(x, 1);\n+}\n+#[cfg(target_has_atomic = \"ptr\")]\n+pub unsafe fn atomic_isize(x: *mut isize) {\n+    atomic_xadd(x, 1);\n+}"}]}