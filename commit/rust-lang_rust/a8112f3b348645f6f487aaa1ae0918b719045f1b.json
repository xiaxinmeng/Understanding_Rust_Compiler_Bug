{"sha": "a8112f3b348645f6f487aaa1ae0918b719045f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTEyZjNiMzQ4NjQ1ZjZmNDg3YWFhMWFlMDkxOGI3MTkwNDVmMWI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-06T00:33:39Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-06T01:09:31Z"}, "message": "Allow soft failure of the macro parser.", "tree": {"sha": "ba0e8358bfc4e18eadeb0b13d6164f20ff102681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0e8358bfc4e18eadeb0b13d6164f20ff102681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8112f3b348645f6f487aaa1ae0918b719045f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8112f3b348645f6f487aaa1ae0918b719045f1b", "html_url": "https://github.com/rust-lang/rust/commit/a8112f3b348645f6f487aaa1ae0918b719045f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8112f3b348645f6f487aaa1ae0918b719045f1b/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9b1fbe350ee16008f16f13254420da3679f60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9b1fbe350ee16008f16f13254420da3679f60d", "html_url": "https://github.com/rust-lang/rust/commit/7f9b1fbe350ee16008f16f13254420da3679f60d"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "26db2842ef772f9000ecd4273b51acbc85198f4a", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8112f3b348645f6f487aaa1ae0918b719045f1b/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8112f3b348645f6f487aaa1ae0918b719045f1b/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=a8112f3b348645f6f487aaa1ae0918b719045f1b", "patch": "@@ -96,8 +96,13 @@ fn nameize(&&p_s: parse_sess, ms: ~[matcher], &&res: ~[@arb_depth])\n     ret ret_val;\n }\n \n+enum parse_result {\n+    success(hashmap<ident, @arb_depth>),\n+    failure(codemap::span, str)\n+}\n+\n fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n-    -> hashmap<ident,@arb_depth> {\n+    -> parse_result {\n     let mut cur_eis = ~[];\n     vec::push(cur_eis, new_matcher_pos(ms, none, rdr.peek().sp.lo));\n \n@@ -195,13 +200,14 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n \n         /* error messages here could be improved with links to orig. rules */\n         if tok == EOF {\n-            if eof_eis.len() == 1u { /* success */\n-                ret nameize(sess, ms,\n-                            vec::map(eof_eis[0u].matches, |dv| dv.pop()));\n+            if eof_eis.len() == 1u {\n+                ret success(\n+                    nameize(sess, ms,\n+                            vec::map(eof_eis[0u].matches, |dv| dv.pop())));\n             } else if eof_eis.len() > 1u {\n-                rdr.fatal(\"Ambiguity: multiple successful parses\");\n+                ret failure(sp, \"Ambiguity: multiple successful parses\");\n             } else {\n-                rdr.fatal(\"Unexpected end of macro invocation\");\n+                ret failure(sp, \"Unexpected end of macro invocation\");\n             }\n         } else {\n             if (bb_eis.len() > 0u && next_eis.len() > 0u)\n@@ -210,12 +216,13 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     alt ei.elts[ei.idx].node\n                         { mtc_bb(_,name,_) { *name } _ { fail; } }\n                 }), \" or \");\n-                rdr.fatal(#fmt[\"Local ambiguity: multiple parsing options: \\\n-                                built-in NTs %s or %u other options.\",\n-                              nts, next_eis.len()]);\n+                ret failure(sp, #fmt[\n+                    \"Local ambiguity: multiple parsing options: \\\n+                     built-in NTs %s or %u other options.\",\n+                    nts, next_eis.len()]);\n             } else if (bb_eis.len() == 0u && next_eis.len() == 0u) {\n-                rdr.fatal(\"No rules expected the token \"\n-                          + to_str(*rdr.interner(), tok));\n+                failure(sp, \"No rules expected the token \"\n+                        + to_str(*rdr.interner(), tok));\n             } else if (next_eis.len() > 0u) {\n                 /* Now process the next token */\n                 while(next_eis.len() > 0u) {"}, {"sha": "8bac3e0d751e734d0f9ce10af424e7ef5dac8578", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8112f3b348645f6f487aaa1ae0918b719045f1b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8112f3b348645f6f487aaa1ae0918b719045f1b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a8112f3b348645f6f487aaa1ae0918b719045f1b", "patch": "@@ -1210,7 +1210,7 @@ class parser {\n \n     /* temporary */\n     fn parse_tt_mac_demo() -> @expr {\n-\n+        import ext::tt::earley_parser::{parse,success,failure};\n         let name_idx = @mut 0u;\n         let ms = self.parse_seq(token::LBRACE, token::RBRACE,\n                                 common::seq_sep_none(),\n@@ -1225,8 +1225,10 @@ class parser {\n                                            self.reader.interner(), none, tts)\n                 as reader;\n \n-            let matches = ext::tt::earley_parser::parse\n-                (self.sess, self.cfg, rdr, ms);\n+            let matches = alt parse(self.sess, self.cfg, rdr, ms) {\n+                  success(m) { m }\n+                  failure(sp, msg) { self.span_fatal(sp,msg); }\n+                };\n \n             let transcriber = ext::tt::transcribe::new_tt_reader\n                 (self.reader.span_diag(), self.reader.interner(),"}]}