{"sha": "2091062bf685ec2a64cafdffb72ae8479ff41890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTEwNjJiZjY4NWVjMmE2NGNhZmRmZmI3MmFlODQ3OWZmNDE4OTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T13:56:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T03:33:34Z"}, "message": "parser: call .struct_span_err directly", "tree": {"sha": "37291c371ab32228e62b351b43f04fd13e8b474c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37291c371ab32228e62b351b43f04fd13e8b474c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2091062bf685ec2a64cafdffb72ae8479ff41890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2091062bf685ec2a64cafdffb72ae8479ff41890", "html_url": "https://github.com/rust-lang/rust/commit/2091062bf685ec2a64cafdffb72ae8479ff41890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2091062bf685ec2a64cafdffb72ae8479ff41890/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dd56ff9a08d74c53d5cc22d18f126a12749608", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd56ff9a08d74c53d5cc22d18f126a12749608", "html_url": "https://github.com/rust-lang/rust/commit/a9dd56ff9a08d74c53d5cc22d18f126a12749608"}], "stats": {"total": 124, "additions": 56, "deletions": 68}, "files": [{"sha": "d26677a6c32c0ea604bef6177f43bed7f71bbabb", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -133,7 +133,7 @@ impl<'a> Parser<'a> {\n                             \"previous outer attribute\"\n                         };\n \n-                        let mut diagnostic = self.diagnostic().struct_span_err(attr_sp, reason);\n+                        let mut diagnostic = self.struct_span_err(attr_sp, reason);\n \n                         if let Some(prev_attr_sp) = prev_attr_sp {\n                             diagnostic\n@@ -231,8 +231,7 @@ impl<'a> Parser<'a> {\n \n         if !lit.kind.is_unsuffixed() {\n             let msg = \"suffixed literals are not allowed in attributes\";\n-            self.diagnostic()\n-                .struct_span_err(lit.span, msg)\n+            self.struct_span_err(lit.span, msg)\n                 .help(\n                     \"instead of using a suffixed literal \\\n                                     (1u8, 1.0f32, etc.), use an unsuffixed version \\\n@@ -332,6 +331,6 @@ impl<'a> Parser<'a> {\n \n         let found = pprust::token_to_string(&self.token);\n         let msg = format!(\"expected unsuffixed literal or identifier, found `{}`\", found);\n-        Err(self.diagnostic().struct_span_err(self.token.span, &msg))\n+        Err(self.struct_span_err(self.token.span, &msg))\n     }\n }"}, {"sha": "d091cceb932fc2fc917da61df79f99a887c9ae88", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -502,18 +502,17 @@ impl<'a> Parser<'a> {\n             let span = lo.until(self.token.span);\n \n             let total_num_of_gt = number_of_gt + number_of_shr * 2;\n-            self.diagnostic()\n-                .struct_span_err(\n-                    span,\n-                    &format!(\"unmatched angle bracket{}\", pluralize!(total_num_of_gt)),\n-                )\n-                .span_suggestion(\n-                    span,\n-                    &format!(\"remove extra angle bracket{}\", pluralize!(total_num_of_gt)),\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+            self.struct_span_err(\n+                span,\n+                &format!(\"unmatched angle bracket{}\", pluralize!(total_num_of_gt)),\n+            )\n+            .span_suggestion(\n+                span,\n+                &format!(\"remove extra angle bracket{}\", pluralize!(total_num_of_gt)),\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n         }\n     }\n \n@@ -762,8 +761,7 @@ impl<'a> Parser<'a> {\n         path.span = ty_span.to(self.prev_span);\n \n         let ty_str = self.span_to_snippet(ty_span).unwrap_or_else(|_| pprust::ty_to_string(&ty));\n-        self.diagnostic()\n-            .struct_span_err(path.span, \"missing angle brackets in associated item path\")\n+        self.struct_span_err(path.span, \"missing angle brackets in associated item path\")\n             .span_suggestion(\n                 // This is a best-effort recovery.\n                 path.span,"}, {"sha": "5566407963a5bb2fa1832c02574cf640678cc712", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -1915,8 +1915,7 @@ impl<'a> Parser<'a> {\n             return;\n         }\n \n-        self.diagnostic()\n-            .struct_span_err(self.token.span, \"expected `:`, found `=`\")\n+        self.struct_span_err(self.token.span, \"expected `:`, found `=`\")\n             .span_suggestion(\n                 field_name.span.shrink_to_hi().to(self.token.span),\n                 \"replace equals symbol with a colon\","}, {"sha": "424483292b66ead1a52fe0e8f91f7bec1d500fa7", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -306,8 +306,7 @@ impl<'a> Parser<'a> {\n                 // possible public struct definition where `struct` was forgotten\n                 let ident = self.parse_ident().unwrap();\n                 let msg = format!(\"add `struct` here to parse `{}` as a public struct\", ident);\n-                let mut err =\n-                    self.diagnostic().struct_span_err(sp, \"missing `struct` for struct definition\");\n+                let mut err = self.struct_span_err(sp, \"missing `struct` for struct definition\");\n                 err.span_suggestion_short(\n                     sp,\n                     &msg,\n@@ -335,7 +334,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n-                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                let mut err = self.struct_span_err(sp, &msg);\n                 if !ambiguous {\n                     self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n                     let suggestion =\n@@ -375,7 +374,7 @@ impl<'a> Parser<'a> {\n                     (\"fn` or `struct\", \"function or struct\", true)\n                 };\n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n-                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                let mut err = self.struct_span_err(sp, &msg);\n                 if !ambiguous {\n                     err.span_suggestion_short(\n                         sp,\n@@ -466,7 +465,7 @@ impl<'a> Parser<'a> {\n             _ => \"expected item after attributes\",\n         };\n \n-        let mut err = self.diagnostic().struct_span_err(self.prev_span, message);\n+        let mut err = self.struct_span_err(self.prev_span, message);\n         if attrs.last().unwrap().is_doc_comment() {\n             err.span_label(self.prev_span, \"this doc comment doesn't document anything\");\n         }\n@@ -536,7 +535,6 @@ impl<'a> Parser<'a> {\n         //        ^^ `sp` below will point to this\n         let sp = prev_span.between(self.prev_span);\n         let mut err = self\n-            .diagnostic()\n             .struct_span_err(sp, &format!(\"{} for {}-item declaration\", expected_kinds, item_type));\n         err.span_label(sp, expected_kinds);\n         err\n@@ -1603,9 +1601,8 @@ impl<'a> Parser<'a> {\n             VisibilityKind::Inherited => {}\n             _ => {\n                 let mut err = if self.token.is_keyword(sym::macro_rules) {\n-                    let mut err = self\n-                        .diagnostic()\n-                        .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n+                    let mut err =\n+                        self.struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n                     err.span_suggestion(\n                         sp,\n                         \"try exporting the macro\",\n@@ -1614,9 +1611,8 @@ impl<'a> Parser<'a> {\n                     );\n                     err\n                 } else {\n-                    let mut err = self\n-                        .diagnostic()\n-                        .struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n+                    let mut err =\n+                        self.struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n                     err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n                     err\n                 };"}, {"sha": "7f5104d260d6aaeff96a13fcd1be84e678c4c4a5", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -129,7 +129,7 @@ impl<'a> Parser<'a> {\n             DirectoryOwnership::UnownedViaBlock => {\n                 let msg = \"Cannot declare a non-inline module inside a block \\\n                     unless it has a path attribute\";\n-                let mut err = self.diagnostic().struct_span_err(id_sp, msg);\n+                let mut err = self.struct_span_err(id_sp, msg);\n                 if paths.path_exists {\n                     let msg = format!(\n                         \"Maybe `use` the module `{}` instead of redeclaring it\",\n@@ -140,9 +140,8 @@ impl<'a> Parser<'a> {\n                 Err(err)\n             }\n             DirectoryOwnership::UnownedViaMod => {\n-                let mut err = self\n-                    .diagnostic()\n-                    .struct_span_err(id_sp, \"cannot declare a new module at this location\");\n+                let mut err =\n+                    self.struct_span_err(id_sp, \"cannot declare a new module at this location\");\n                 if !id_sp.is_dummy() {\n                     let src_path = self.sess.source_map().span_to_filename(id_sp);\n                     if let FileName::Real(src_path) = src_path {"}, {"sha": "6a98d29675e735980a220065a54d6c71ea3ef4a4", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -699,8 +699,7 @@ impl<'a> Parser<'a> {\n         let range_span = lo.to(end.span);\n         let begin = self.mk_expr(range_span, ExprKind::Err, AttrVec::new());\n \n-        self.diagnostic()\n-            .struct_span_err(range_span, &format!(\"`{}X` range patterns are not supported\", form))\n+        self.struct_span_err(range_span, &format!(\"`{}X` range patterns are not supported\", form))\n             .span_suggestion(\n                 range_span,\n                 \"try using the minimum value for the type\",\n@@ -722,18 +721,17 @@ impl<'a> Parser<'a> {\n             // Parsing e.g. `X..`.\n             let range_span = begin.span.to(self.prev_span);\n \n-            self.diagnostic()\n-                .struct_span_err(\n-                    range_span,\n-                    &format!(\"`X{}` range patterns are not supported\", form),\n-                )\n-                .span_suggestion(\n-                    range_span,\n-                    \"try using the maximum value for the type\",\n-                    format!(\"{}{}MAX\", pprust::expr_to_string(&begin), form),\n-                    Applicability::HasPlaceholders,\n-                )\n-                .emit();\n+            self.struct_span_err(\n+                range_span,\n+                &format!(\"`X{}` range patterns are not supported\", form),\n+            )\n+            .span_suggestion(\n+                range_span,\n+                \"try using the maximum value for the type\",\n+                format!(\"{}{}MAX\", pprust::expr_to_string(&begin), form),\n+                Applicability::HasPlaceholders,\n+            )\n+            .emit();\n \n             Ok(self.mk_expr(range_span, ExprKind::Err, AttrVec::new()))\n         }"}, {"sha": "ef22628a5e06da6d9ecf1581634a6f5a9924cf72", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2091062bf685ec2a64cafdffb72ae8479ff41890/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=2091062bf685ec2a64cafdffb72ae8479ff41890", "patch": "@@ -325,24 +325,23 @@ impl<'a> Parser<'a> {\n \n                 // Make a span over ${unmatched angle bracket count} characters.\n                 let span = lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n-                self.diagnostic()\n-                    .struct_span_err(\n-                        span,\n-                        &format!(\n-                            \"unmatched angle bracket{}\",\n-                            pluralize!(snapshot.unmatched_angle_bracket_count)\n-                        ),\n-                    )\n-                    .span_suggestion(\n-                        span,\n-                        &format!(\n-                            \"remove extra angle bracket{}\",\n-                            pluralize!(snapshot.unmatched_angle_bracket_count)\n-                        ),\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                self.struct_span_err(\n+                    span,\n+                    &format!(\n+                        \"unmatched angle bracket{}\",\n+                        pluralize!(snapshot.unmatched_angle_bracket_count)\n+                    ),\n+                )\n+                .span_suggestion(\n+                    span,\n+                    &format!(\n+                        \"remove extra angle bracket{}\",\n+                        pluralize!(snapshot.unmatched_angle_bracket_count)\n+                    ),\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n \n                 // Try again without unmatched angle bracket characters.\n                 self.parse_generic_args()"}]}