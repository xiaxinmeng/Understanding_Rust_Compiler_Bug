{"sha": "9d5d4474215de517a1ef576349a93c328240e84e", "node_id": "C_kwDOAAsO6NoAKDlkNWQ0NDc0MjE1ZGU1MTdhMWVmNTc2MzQ5YTkzYzMyODI0MGU4NGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-16T07:57:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-16T07:57:06Z"}, "message": "Rollup merge of #109151 - compiler-errors:debug-assert-alias, r=WaffleLapkin\n\nAssert def-kind is correct for alias types\n\nMake sure we're not constructing alias types for the wrong def-kind, at least for debug cases :sweat_smile:", "tree": {"sha": "9fed9aa7bd1e67f5d58a01ad41c059fc7ee9b102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fed9aa7bd1e67f5d58a01ad41c059fc7ee9b102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5d4474215de517a1ef576349a93c328240e84e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEsvSCRBK7hj4Ov3rIwAA7/UIAK9o6vJplWxaluWd7QFho9ik\nwEcgaIry5Pfn538JvbmyiV8lbCwgHITY1Es57LJHDLtYyXNaGiTVCFDqomcUKdhx\nPa4zowGewHANaZS+X+p5OumVKePZbwzTnskK8psgSo18DEZOoDVFKNf179DSI9TG\nJF0zhd9338ZXs436BqdZrcE76VzQkiF556OfnZXHcUIMRqBxbA3yMIVZq54FMKzF\nT8qDvCuEx9vdj4GAzBVdnH+w9/ScEYk82xc3KQhsGMlQBwXN1rIzKJDpnO2fm7bN\njrR1TIczFM04GdmUqO9y86bafM8pThnCgFr+AO88dCItHtZdXd+LWN4PTxlG7zs=\n=xhJ7\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fed9aa7bd1e67f5d58a01ad41c059fc7ee9b102\nparent 6cf2f470b0307fadc2edd7a02237915d8d7d12b0\nparent cf6424e88123b5e9ee251dddd260812b5f6b20cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678953426 +0100\ncommitter GitHub <noreply@github.com> 1678953426 +0100\n\nRollup merge of #109151 - compiler-errors:debug-assert-alias, r=WaffleLapkin\n\nAssert def-kind is correct for alias types\n\nMake sure we're not constructing alias types for the wrong def-kind, at least for debug cases :sweat_smile:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5d4474215de517a1ef576349a93c328240e84e", "html_url": "https://github.com/rust-lang/rust/commit/9d5d4474215de517a1ef576349a93c328240e84e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5d4474215de517a1ef576349a93c328240e84e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "html_url": "https://github.com/rust-lang/rust/commit/6cf2f470b0307fadc2edd7a02237915d8d7d12b0"}, {"sha": "cf6424e88123b5e9ee251dddd260812b5f6b20cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6424e88123b5e9ee251dddd260812b5f6b20cc", "html_url": "https://github.com/rust-lang/rust/commit/cf6424e88123b5e9ee251dddd260812b5f6b20cc"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "d1710f6cede95972091eb846fb6d381e85325b66", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=9d5d4474215de517a1ef576349a93c328240e84e", "patch": "@@ -84,7 +84,6 @@ impl<'tcx> InferCtxt<'tcx> {\n \n pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -233,7 +232,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        let trace = ToTrace::to_trace(self.infcx.tcx, self.cause, a_is_expected, a, b);\n+        let trace = ToTrace::to_trace(self.cause, a_is_expected, a, b);\n         Trace { at: self, trace, a_is_expected }\n     }\n }\n@@ -306,18 +305,17 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ImplSubject<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n         match (a, b) {\n             (ImplSubject::Trait(trait_ref_a), ImplSubject::Trait(trait_ref_b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, trait_ref_a, trait_ref_b)\n+                ToTrace::to_trace(cause, a_is_expected, trait_ref_a, trait_ref_b)\n             }\n             (ImplSubject::Inherent(ty_a), ImplSubject::Inherent(ty_b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, ty_a, ty_b)\n+                ToTrace::to_trace(cause, a_is_expected, ty_a, ty_b)\n             }\n             (ImplSubject::Trait(_), ImplSubject::Inherent(_))\n             | (ImplSubject::Inherent(_), ImplSubject::Trait(_)) => {\n@@ -329,7 +327,6 @@ impl<'tcx> ToTrace<'tcx> for ImplSubject<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -344,7 +341,6 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -356,7 +352,6 @@ impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for Const<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -371,7 +366,6 @@ impl<'tcx> ToTrace<'tcx> for Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::GenericArg<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -399,7 +393,6 @@ impl<'tcx> ToTrace<'tcx> for ty::GenericArg<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -411,7 +404,6 @@ impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -426,7 +418,6 @@ impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -441,24 +432,17 @@ impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::AliasTy<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        let a_ty = tcx.mk_projection(a.def_id, a.substs);\n-        let b_ty = tcx.mk_projection(b.def_id, b.substs);\n-        TypeTrace {\n-            cause: cause.clone(),\n-            values: Terms(ExpectedFound::new(a_is_expected, a_ty.into(), b_ty.into())),\n-        }\n+        TypeTrace { cause: cause.clone(), values: Aliases(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n }\n \n impl<'tcx> ToTrace<'tcx> for ty::FnSig<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,"}, {"sha": "ac4986a577c6db75933aa3464661303d313f766e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9d5d4474215de517a1ef576349a93c328240e84e", "patch": "@@ -1568,6 +1568,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n+                    ValuePairs::Aliases(infer::ExpectedFound { expected, .. }) => {\n+                        (false, Mismatch::Fixed(self.tcx.def_descr(expected.def_id)))\n+                    }\n                     ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n                 };\n                 let Some(vals) = self.values_str(values) else {\n@@ -2124,6 +2127,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         match values {\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n+            infer::Aliases(exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),"}, {"sha": "0b207e329f6e6347e9769fa54e5f5681c05347f2", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9d5d4474215de517a1ef576349a93c328240e84e", "patch": "@@ -338,6 +338,7 @@ pub struct InferCtxt<'tcx> {\n pub enum ValuePairs<'tcx> {\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n+    Aliases(ExpectedFound<ty::AliasTy<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n     Sigs(ExpectedFound<ty::FnSig<'tcx>>),"}, {"sha": "e4694809cd1a2c90ec60978c9b73a7b30248e205", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5d4474215de517a1ef576349a93c328240e84e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9d5d4474215de517a1ef576349a93c328240e84e", "patch": "@@ -71,6 +71,7 @@ use rustc_type_ir::WithCachedTypeInfo;\n use rustc_type_ir::{CollectAndApply, DynKind, Interner, TypeFlags};\n \n use std::any::Any;\n+use std::assert_matches::debug_assert_matches;\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n use std::fmt;\n@@ -2049,6 +2050,12 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_alias(self, kind: ty::AliasKind, alias_ty: ty::AliasTy<'tcx>) -> Ty<'tcx> {\n+        debug_assert_matches!(\n+            (kind, self.def_kind(alias_ty.def_id)),\n+            (ty::Opaque, DefKind::OpaqueTy)\n+                | (ty::Projection, DefKind::AssocTy)\n+                | (ty::Opaque | ty::Projection, DefKind::ImplTraitPlaceholder)\n+        );\n         self.mk_ty_from_kind(Alias(kind, alias_ty))\n     }\n "}]}