{"sha": "9c9c5c9054c2680a68c47f0bd9d80625b0906507", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOWM1YzkwNTRjMjY4MGE2OGM0N2YwYmQ5ZDgwNjI1YjA5MDY1MDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T01:26:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:44Z"}, "message": "Remove ast::identistr. Issue #855", "tree": {"sha": "6d82addfcdb2ec09ac6c6cecc6f104dc7ecaa971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d82addfcdb2ec09ac6c6cecc6f104dc7ecaa971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c9c5c9054c2680a68c47f0bd9d80625b0906507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9c5c9054c2680a68c47f0bd9d80625b0906507", "html_url": "https://github.com/rust-lang/rust/commit/9c9c5c9054c2680a68c47f0bd9d80625b0906507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c9c5c9054c2680a68c47f0bd9d80625b0906507/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03119fe269de56e737562a9ee8d1bc47a9013eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03119fe269de56e737562a9ee8d1bc47a9013eb4", "html_url": "https://github.com/rust-lang/rust/commit/03119fe269de56e737562a9ee8d1bc47a9013eb4"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "92ed4cfc196b0f2aac25bd681a4ff448e9f976d6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9c9c5c9054c2680a68c47f0bd9d80625b0906507", "patch": "@@ -102,7 +102,7 @@ tag mod_index_entry {\n     mie_tag_variant(/* tag item */@ast::item, /* variant index */uint);\n }\n \n-type mod_index = hashmap<identistr, list<mod_index_entry>>;\n+type mod_index = hashmap<ident, list<mod_index_entry>>;\n \n // A tuple of an imported def and the import stmt that brung it\n type glob_imp_def = {def: def, item: @ast::view_item};\n@@ -1078,7 +1078,7 @@ fn lookup_in_mie(e: &env, mie: &mod_index_entry, ns: namespace) ->\n \n \n // Module indexing\n-fn add_to_index(index: &hashmap<identistr, list<mod_index_entry>>,\n+fn add_to_index(index: &hashmap<ident, list<mod_index_entry>>,\n                 id: &ident, ent: &mod_index_entry) {\n     alt index.find(id) {\n       none. { index.insert(id,\n@@ -1195,7 +1195,7 @@ fn check_for_collisions(e: &@env, c: &ast::crate) {\n     // Module indices make checking those relatively simple -- just check each\n     // name for multiple entities in the same namespace.\n     for each m: @{key: ast::node_id, val: @indexed_mod} in e.mod_map.items() {\n-        for each name: @{key: identistr, val: list<mod_index_entry>} in\n+        for each name: @{key: ident, val: list<mod_index_entry>} in\n                  m.val.index.items() {\n             check_mod_name(*e, name.key, name.val);\n         }"}, {"sha": "66c331dbab0da6801425def089ae579374c7b4c8", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=9c9c5c9054c2680a68c47f0bd9d80625b0906507", "patch": "@@ -469,7 +469,7 @@ fn make_phi_bindings(bcx: &@block_ctxt, map: &[exit_node],\n                      ids: &ast_util::pat_id_map) -> bool {\n     let our_block = bcx.llbb as uint;\n     let success = true;\n-    for each item: @{key: ast::identistr, val: ast::node_id} in ids.items() {\n+    for each item: @{key: ast::ident, val: ast::node_id} in ids.items() {\n         let llbbs = [];\n         let vals = [];\n         for ex: exit_node in map {"}, {"sha": "edbc1f829fc672c331c90e978058686be5344e7f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=9c9c5c9054c2680a68c47f0bd9d80625b0906507", "patch": "@@ -8,7 +8,6 @@ import codemap::filename;\n type spanned<T> = {node: T, span: span};\n \n type ident = istr;\n-type identistr = istr;\n \n // Functions may or may not have names.\n type fn_ident = option::t<ident>;"}, {"sha": "55f54c3057cf8bbf41148eb5ed57f2e7ed0e65d8", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9c5c9054c2680a68c47f0bd9d80625b0906507/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=9c9c5c9054c2680a68c47f0bd9d80625b0906507", "patch": "@@ -19,7 +19,6 @@ import fold::*;\n import ast::node_id;\n import ast_util::respan;\n import ast::ident;\n-import ast::identistr;\n import ast::path;\n import ast::ty;\n import ast::blk;\n@@ -157,9 +156,9 @@ fn compose_sels(s1: selector, s2: selector) -> selector {\n \n \n type binders =\n-    {real_binders: hashmap<identistr, selector>,\n+    {real_binders: hashmap<ident, selector>,\n      mutable literal_ast_matchers: [selector]};\n-type bindings = hashmap<identistr, arb_depth<matchable>>;\n+type bindings = hashmap<ident, arb_depth<matchable>>;\n \n fn acumm_bindings(_cx: &ext_ctxt, _b_dest: &bindings, _b_src: &bindings) { }\n \n@@ -191,7 +190,7 @@ fn use_selectors_to_bind(b: &binders, e: @expr) -> option::t<bindings> {\n         alt sel(match_expr(e)) { none. { ret none; } _ { } }\n     }\n     let never_mind: bool = false;\n-    for each pair: @{key: identistr,\n+    for each pair: @{key: ident,\n                      val: selector} in b.real_binders.items() {\n         alt pair.val(match_expr(e)) {\n           none. { never_mind = true; }\n@@ -265,9 +264,9 @@ fn follow_for_trans(cx: &ext_ctxt, mmaybe: &option::t<arb_depth<matchable>>,\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n iter free_vars(b: &bindings, e: @expr) -> ident {\n-    let idents: hashmap<identistr, ()> = new_str_hash::<()>();\n+    let idents: hashmap<ident, ()> = new_str_hash::<()>();\n     fn mark_ident(i: &ident, _fld: ast_fold, b: &bindings,\n-                  idents: &hashmap<identistr, ()>) -> ident {\n+                  idents: &hashmap<ident, ()>) -> ident {\n         if b.contains_key(i) {\n             idents.insert(i, ());\n         }\n@@ -281,7 +280,7 @@ iter free_vars(b: &bindings, e: @expr) -> ident {\n     let f = make_fold(f_pre);\n     f.fold_expr(e); // ignore result\n     dummy_out(f);\n-    for each id: identistr in idents.keys() { put id; }\n+    for each id: ident in idents.keys() { put id; }\n }\n \n "}]}