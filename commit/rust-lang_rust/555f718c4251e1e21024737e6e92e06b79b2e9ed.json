{"sha": "555f718c4251e1e21024737e6e92e06b79b2e9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWY3MThjNDI1MWUxZTIxMDI0NzM3ZTZlOTJlMDZiNzliMmU5ZWQ=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-23T20:35:14Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-23T20:35:14Z"}, "message": "Fix failures after rebase", "tree": {"sha": "f57b3abd7cab1d56d6613255ef46913d35445ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57b3abd7cab1d56d6613255ef46913d35445ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555f718c4251e1e21024737e6e92e06b79b2e9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555f718c4251e1e21024737e6e92e06b79b2e9ed", "html_url": "https://github.com/rust-lang/rust/commit/555f718c4251e1e21024737e6e92e06b79b2e9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555f718c4251e1e21024737e6e92e06b79b2e9ed/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6935e57f145697845c2aa744c2a576df8982000", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6935e57f145697845c2aa744c2a576df8982000", "html_url": "https://github.com/rust-lang/rust/commit/c6935e57f145697845c2aa744c2a576df8982000"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "8042f968c876e095f2888b49cf630acec24f7bdc", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555f718c4251e1e21024737e6e92e06b79b2e9ed/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f718c4251e1e21024737e6e92e06b79b2e9ed/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=555f718c4251e1e21024737e6e92e06b79b2e9ed", "patch": "@@ -251,8 +251,6 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 let ty = match ty_kind {\n                     CanonicalTyVarKind::General => {\n                         self.next_ty_var(\n-                            // FIXME(#48696) this handling of universes is not right.\n-                            ty::UniverseIndex::ROOT,\n                             TypeVariableOrigin::MiscVariable(span),\n                         )\n                     }"}, {"sha": "806728877e1de36a8af9812b097fa4c27557d66b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/555f718c4251e1e21024737e6e92e06b79b2e9ed/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f718c4251e1e21024737e6e92e06b79b2e9ed/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=555f718c4251e1e21024737e6e92e06b79b2e9ed", "patch": "@@ -1380,7 +1380,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// Trait`) are left hidden, so this is suitable for ordinary\n     /// type-checking.\n     pub fn empty() -> Self {\n-        Self::new(ty::Slice::empty(), Reveal::UserFacing, ty::UniverseIndex::ROOT)\n+        Self::new(ty::Slice::empty(), Reveal::UserFacing)\n     }\n \n     /// Construct a trait environment with no where clauses in scope\n@@ -1391,15 +1391,14 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// NB. If you want to have predicates in scope, use `ParamEnv::new`,\n     /// or invoke `param_env.with_reveal_all()`.\n     pub fn reveal_all() -> Self {\n-        Self::new(ty::Slice::empty(), Reveal::All, ty::UniverseIndex::ROOT)\n+        Self::new(ty::Slice::empty(), Reveal::All)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>,\n-               reveal: Reveal,\n-               universe: ty::UniverseIndex)\n+               reveal: Reveal)\n                -> Self {\n-        ty::ParamEnv { caller_bounds, reveal, universe }\n+        ty::ParamEnv { caller_bounds, reveal }\n     }\n \n     /// Returns a new parameter environment with the same clauses, but"}]}