{"sha": "84bad09420858df1330b7da2a9cbc92468858bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YmFkMDk0MjA4NThkZjEzMzBiN2RhMmE5Y2JjOTI0Njg4NThiYWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-30T16:47:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-30T16:47:21Z"}, "message": "rustc_mir: use nicer path printing for #[rustc_regions] NLL tests.", "tree": {"sha": "944d09d8eab22c000a626f39d78edbfd9185e95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944d09d8eab22c000a626f39d78edbfd9185e95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bad09420858df1330b7da2a9cbc92468858bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bad09420858df1330b7da2a9cbc92468858bad", "html_url": "https://github.com/rust-lang/rust/commit/84bad09420858df1330b7da2a9cbc92468858bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bad09420858df1330b7da2a9cbc92468858bad/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1bbd69e13c9e04a4c2b75612bc0c31af972439", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1bbd69e13c9e04a4c2b75612bc0c31af972439", "html_url": "https://github.com/rust-lang/rust/commit/8f1bbd69e13c9e04a4c2b75612bc0c31af972439"}], "stats": {"total": 428, "additions": 109, "deletions": 319}, "files": [{"sha": "9ad15fca0017dc0c309d22a9a50365866b633e5c", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -312,9 +312,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n         match self.defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 err.note(&format!(\n-                    \"defining type: {:?} with closure substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n+                    \"defining type: {} with closure substs {:#?}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n+                    &substs[tcx.generics_of(def_id).parent_count..],\n                 ));\n \n                 // FIXME: It'd be nice to print the late-bound regions\n@@ -332,9 +332,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n             }\n             DefiningTy::Generator(def_id, substs, _) => {\n                 err.note(&format!(\n-                    \"defining type: {:?} with generator substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n+                    \"defining type: {} with generator substs {:#?}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n+                    &substs[tcx.generics_of(def_id).parent_count..],\n                 ));\n \n                 // FIXME: As above, we'd like to print out the region\n@@ -350,16 +350,14 @@ impl<'tcx> UniversalRegions<'tcx> {\n             }\n             DefiningTy::FnDef(def_id, substs) => {\n                 err.note(&format!(\n-                    \"defining type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n+                    \"defining type: {}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n             DefiningTy::Const(def_id, substs) => {\n                 err.note(&format!(\n-                    \"defining constant type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n+                    \"defining constant type: {}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n         }"}, {"sha": "a6619b9a8cbb2283f2a4571a51e393933f545857", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:4 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:3 ~ escape_argument_callee[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error: aborting due to previous error\n "}, {"sha": "31c7c325d1abde2f1723b52d5ea2f240e47554bd", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:4 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),\n            ]\n@@ -21,7 +21,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:3 ~ escape_argument[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:27:25"}, {"sha": "810c0286cf218bd2820342f29a0e8d769e9cb4be", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |             let mut closure1 = || p = &y;\n    |                                ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:5 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -23,7 +23,7 @@ LL | |             closure1();\n LL | |         };\n    | |_________^\n    |\n-   = note: defining type: DefId(0:4 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -44,7 +44,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-nested.rs:21:40"}, {"sha": "bf042769a00e2aae45b8b00499587888e32ed056", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:4 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -25,7 +25,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-ref.rs:23:35"}, {"sha": "eef77b0b2dccfc95ad6f62372dc7bb0263573f37", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:18 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:14 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error: aborting due to previous error\n "}, {"sha": "8b637b1f7257a9df4b1c6b673475ca24f97b5129", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-ref.rs:45:9"}, {"sha": "2cd21de419d90e93c1be4432569d3084d085b9db", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:9 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: case1::{{closure}}#0 with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -35,7 +35,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:8 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n+   = note: defining type: case1\n \n note: External requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n@@ -46,7 +46,7 @@ LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:11 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: case2::{{closure}}#0 with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -65,7 +65,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:10 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n+   = note: defining type: case2\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26"}, {"sha": "e61ab7d9b0d0c1db2b95b82eda0fccb12b7c8672", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5"}, {"sha": "836a25f7ac20d24a1529578893233731e5675810", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5"}, {"sha": "dfb1913113f8cbb5749c46c13cc7508bf467d0dd", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_approximated_val[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-val.rs:38:9"}, {"sha": "33c927e5660034c7155735a0ae0a6aacea7e2d3e", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:14 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -28,5 +28,5 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n "}, {"sha": "cadb0a177ae68f64fcd7bf46eaedda4b0eac1038", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error: aborting due to previous error\n "}, {"sha": "24ba0e8d79e0b8ebb11086319d33b4ec5927c577", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: supply\n \n error: aborting due to previous error\n "}, {"sha": "0dbb530e698bbf94bd544c0d0d7d60e5ac3bb819", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -11,9 +11,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:14 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: supply::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((T,)),\n            ]\n@@ -32,10 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:11 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: supply::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:32:36"}, {"sha": "f6ed5e3a205720eb19a96e5b8a2f6fb29cd56596", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                ^^^^^^^^\n    |\n-   = note: defining type: DefId(0:4 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32,\n            ]\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n+   = note: defining type: test\n \n error: aborting due to previous error\n "}, {"sha": "c825227cdad8eec8761762ec4eed5d0af0523077", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,9 +4,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n            ]\n@@ -25,10 +23,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:10 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: no_region::<'_#1r, T>\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:25:23\n@@ -44,9 +39,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:17 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n            ]\n@@ -64,21 +57,15 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:14 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: correct_region::<'_#1r, T>\n \n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n            ]\n@@ -97,11 +84,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:18 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: wrong_region::<'_#1r, '_#2r, T>\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:42:23\n@@ -117,10 +100,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n            ]\n@@ -139,11 +119,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7473305808d8912e2985ffb9bdaf8d27f677e3c4", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 34, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,9 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:19 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -27,10 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_late::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:29\n@@ -59,10 +54,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -82,11 +74,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n@@ -115,10 +103,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -137,22 +122,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:25 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -172,11 +150,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:30 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "655995c1b8029173129c86d961c190b9a1baa204", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,9 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -26,10 +24,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_late::<'_#1r, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:39\n@@ -50,10 +45,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -72,11 +64,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:39\n@@ -97,10 +85,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -119,22 +104,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -153,21 +131,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -186,10 +158,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: one_region::<'_#1r, T>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fb07b9279aa8779a8c9df6de76c1ecc9e305503", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,9 +4,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -23,21 +21,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_late::<'_#1r, T>\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -54,22 +46,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -86,22 +71,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -118,21 +96,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -149,8 +121,5 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "72c60eed66ebfbaa4d76cd9d6d1d3136ae729847", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 76, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,10 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:22 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -27,11 +24,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n@@ -47,11 +40,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n@@ -70,12 +59,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-           ]\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -91,11 +75,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n@@ -114,24 +94,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-           ]\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:40 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n+   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n@@ -150,24 +121,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:35 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-           ]\n+   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:46 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n+   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n@@ -186,22 +148,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:41 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               '_#3r,\n-               T,\n-           ]\n+   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:51 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: two_regions::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -221,10 +176,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:47 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: two_regions::<'_#1r, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n@@ -245,10 +197,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -267,21 +216,15 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:52 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -300,10 +243,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:57 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: one_region::<'_#1r, T>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6478e504345fe934d65488dab6ee16d72a9bda67", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,8 +4,7 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:11 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n-               T,\n+   = note: defining type: generic::<T>::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n            ]\n@@ -21,18 +20,15 @@ LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:9 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n-               T,\n-           ]\n+   = note: defining type: generic::<T>\n \n note: External requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:15 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n-               T,\n+   = note: defining type: generic_fail::<T>::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n            ]\n@@ -49,9 +45,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n-               T,\n-           ]\n+   = note: defining type: generic_fail::<T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24"}, {"sha": "0021d730f85a1c2e0ff6d6f809da67063459eff9", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -4,9 +4,7 @@ note: External requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n            ]\n@@ -25,10 +23,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:8 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: no_region::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23"}, {"sha": "4383ad4ed8512d20870267e0009cab32543ab4a3", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84bad09420858df1330b7da2a9cbc92468858bad/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=84bad09420858df1330b7da2a9cbc92468858bad", "patch": "@@ -11,8 +11,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:14 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n-               T,\n+   = note: defining type: no_region::<T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n            ]\n@@ -32,9 +31,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n-               T,\n-           ]\n+   = note: defining type: no_region::<T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n@@ -64,9 +61,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:18 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -85,10 +80,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:15 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: correct_region::<'_#1r, T>\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n@@ -101,9 +93,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               T,\n+   = note: defining type: wrong_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n@@ -123,10 +113,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n-               '_#1r,\n-               T,\n-           ]\n+   = note: defining type: wrong_region::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n@@ -151,10 +138,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n@@ -173,11 +157,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n-               '_#1r,\n-               '_#2r,\n-               T,\n-           ]\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n \n error: aborting due to 2 previous errors\n "}]}