{"sha": "24b6901b26f0bde00706a5cbc16ffc29296ea40d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YjY5MDFiMjZmMGJkZTAwNzA2YTVjYmMxNmZmYzI5Mjk2ZWE0MGQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-18T15:38:17Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T18:30:57Z"}, "message": "std: Implement Clone for VecIterator and iterators using it\n\nThe theory is simple, the immutable iterators simply hold state\nvariables (indicies or pointers) into frozen containers. We can freely\nclone these iterators, just like we can clone borrowed pointers.\n\nVecIterator needs a manual impl to handle the lifetime struct member.", "tree": {"sha": "f3eece8ac0576df1f1e57119a94a78944c2eedc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3eece8ac0576df1f1e57119a94a78944c2eedc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b6901b26f0bde00706a5cbc16ffc29296ea40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b6901b26f0bde00706a5cbc16ffc29296ea40d", "html_url": "https://github.com/rust-lang/rust/commit/24b6901b26f0bde00706a5cbc16ffc29296ea40d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b6901b26f0bde00706a5cbc16ffc29296ea40d/comments", "author": null, "committer": null, "parents": [{"sha": "ffe2623e47d9c5a5914865a9556cb1298ca00058", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe2623e47d9c5a5914865a9556cb1298ca00058", "html_url": "https://github.com/rust-lang/rust/commit/ffe2623e47d9c5a5914865a9556cb1298ca00058"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "56774560d1d113b6d607c14fea18e0f6ba56f443", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=24b6901b26f0bde00706a5cbc16ffc29296ea40d", "patch": "@@ -548,6 +548,7 @@ impl<K:Hash + Eq + Clone,V:Clone> Clone for HashMap<K,V> {\n }\n \n /// HashMap iterator\n+#[deriving(Clone)]\n pub struct HashMapIterator<'self, K, V> {\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, V>>>,\n }\n@@ -563,6 +564,7 @@ pub struct HashMapConsumeIterator<K, V> {\n }\n \n /// HashSet iterator\n+#[deriving(Clone)]\n pub struct HashSetIterator<'self, K> {\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, ()>>>,\n }"}, {"sha": "c74c1e18e6d2ee1bfd548494a8421f37c06adfee", "filename": "src/libstd/str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=24b6901b26f0bde00706a5cbc16ffc29296ea40d", "patch": "@@ -288,6 +288,7 @@ impl<'self, C: CharEq> CharEq for &'self [C] {\n \n \n /// An iterator over the substrings of a string, separated by `sep`.\n+#[deriving(Clone)]\n pub struct StrCharSplitIterator<'self,Sep> {\n     priv string: &'self str,\n     priv position: uint,\n@@ -355,6 +356,7 @@ impl<'self, Sep: CharEq> Iterator<&'self str> for StrCharSplitIterator<'self, Se\n \n /// An iterator over the start and end indicies of the matches of a\n /// substring within a larger string\n+#[deriving(Clone)]\n pub struct StrMatchesIndexIterator<'self> {\n     priv haystack: &'self str,\n     priv needle: &'self str,\n@@ -363,6 +365,7 @@ pub struct StrMatchesIndexIterator<'self> {\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n+#[deriving(Clone)]\n pub struct StrStrSplitIterator<'self> {\n     priv it: StrMatchesIndexIterator<'self>,\n     priv last_end: uint,\n@@ -2269,6 +2272,7 @@ impl Clone for @str {\n \n /// External iterator for a string's characters. Use with the `std::iterator`\n /// module.\n+#[deriving(Clone)]\n pub struct StrCharIterator<'self> {\n     priv index: uint,\n     priv string: &'self str,\n@@ -2288,6 +2292,7 @@ impl<'self> Iterator<char> for StrCharIterator<'self> {\n }\n /// External iterator for a string's characters in reverse order. Use\n /// with the `std::iterator` module.\n+#[deriving(Clone)]\n pub struct StrCharRevIterator<'self> {\n     priv index: uint,\n     priv string: &'self str,\n@@ -2308,6 +2313,7 @@ impl<'self> Iterator<char> for StrCharRevIterator<'self> {\n \n /// External iterator for a string's bytes. Use with the `std::iterator`\n /// module.\n+#[deriving(Clone)]\n pub struct StrBytesIterator<'self> {\n     priv it: vec::VecIterator<'self, u8>\n }\n@@ -2321,6 +2327,7 @@ impl<'self> Iterator<u8> for StrBytesIterator<'self> {\n \n /// External iterator for a string's bytes in reverse order. Use with\n /// the `std::iterator` module.\n+#[deriving(Clone)]\n pub struct StrBytesRevIterator<'self> {\n     priv it: vec::VecRevIterator<'self, u8>\n }"}, {"sha": "877ee65b4d67f88f893b7768728a75b91eb564a9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b6901b26f0bde00706a5cbc16ffc29296ea40d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=24b6901b26f0bde00706a5cbc16ffc29296ea40d", "patch": "@@ -2232,6 +2232,10 @@ iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n \n+impl<'self, T> Clone for VecIterator<'self, T> {\n+    fn clone(&self) -> VecIterator<'self, T> { *self }\n+}\n+\n //iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n /// An iterator for mutating the elements of a vector.\n pub struct VecMutIterator<'self, T> {\n@@ -2244,6 +2248,7 @@ double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n+#[deriving(Clone)]\n pub struct VecConsumeIterator<T> {\n     priv v: ~[T],\n     priv idx: uint,\n@@ -2270,6 +2275,7 @@ impl<T> Iterator<T> for VecConsumeIterator<T> {\n }\n \n /// An iterator that moves out of a vector in reverse order.\n+#[deriving(Clone)]\n pub struct VecConsumeRevIterator<T> {\n     priv v: ~[T]\n }\n@@ -3185,6 +3191,17 @@ mod tests {\n         assert_eq!(xs.mut_rev_iter().size_hint(), (5, Some(5)));\n     }\n \n+    #[test]\n+    fn test_iter_clone() {\n+        let xs = [1, 2, 5];\n+        let mut it = xs.iter();\n+        it.next();\n+        let mut jt = it.clone();\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next(), jt.next());\n+    }\n+\n     #[test]\n     fn test_mut_iterator() {\n         use iterator::*;"}]}