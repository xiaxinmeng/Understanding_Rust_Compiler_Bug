{"sha": "d3ec0674bbf031008a5b741d04edc9ebdc466264", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZWMwNjc0YmJmMDMxMDA4YTViNzQxZDA0ZWRjOWViZGM0NjYyNjQ=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-09-06T16:51:42Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-09-06T16:51:42Z"}, "message": "readdir: return error instead of failing on invalid UTF-16\nFixes #15279\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "e8ccb6bf56d87d32a931f7989aa17742fc6587ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ccb6bf56d87d32a931f7989aa17742fc6587ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ec0674bbf031008a5b741d04edc9ebdc466264", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ec0674bbf031008a5b741d04edc9ebdc466264", "html_url": "https://github.com/rust-lang/rust/commit/d3ec0674bbf031008a5b741d04edc9ebdc466264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ec0674bbf031008a5b741d04edc9ebdc466264/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82c052794d4234752f0154c150d0b40779240db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c052794d4234752f0154c150d0b40779240db4", "html_url": "https://github.com/rust-lang/rust/commit/82c052794d4234752f0154c150d0b40779240db4"}], "stats": {"total": 96, "additions": 39, "deletions": 57}, "files": [{"sha": "35b05a672b28dc8720e3e7d40e998665812d75c2", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=d3ec0674bbf031008a5b741d04edc9ebdc466264", "patch": "@@ -249,7 +249,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use types::os::arch::extra::{LARGE_INTEGER, LPVOID, LONG};\n #[cfg(windows)] pub use types::os::arch::extra::{time64_t, OVERLAPPED, LPCWSTR};\n #[cfg(windows)] pub use types::os::arch::extra::{LPOVERLAPPED, SIZE_T, LPDWORD};\n-#[cfg(windows)] pub use types::os::arch::extra::{SECURITY_ATTRIBUTES};\n+#[cfg(windows)] pub use types::os::arch::extra::{SECURITY_ATTRIBUTES, WIN32_FIND_DATAW};\n #[cfg(windows)] pub use funcs::c95::string::{wcslen};\n #[cfg(windows)] pub use funcs::posix88::stat_::{wstat, wutime, wchmod, wrmdir};\n #[cfg(windows)] pub use funcs::bsd43::{closesocket};\n@@ -1638,6 +1638,22 @@ pub mod types {\n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n \n                 pub type GROUP = c_uint;\n+\n+                #[repr(C)]\n+                pub struct WIN32_FIND_DATAW {\n+                    pub dwFileAttributes: DWORD,\n+                    pub ftCreationTime: FILETIME,\n+                    pub ftLastAccessTime: FILETIME,\n+                    pub ftLastWriteTime: FILETIME,\n+                    pub nFileSizeHigh: DWORD,\n+                    pub nFileSizeLow: DWORD,\n+                    pub dwReserved0: DWORD,\n+                    pub dwReserved1: DWORD,\n+                    pub cFileName: [wchar_t, ..260], // #define MAX_PATH 260\n+                    pub cAlternateFileName: [wchar_t, ..14],\n+                }\n+\n+                pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n             }\n         }\n     }\n@@ -4763,7 +4779,7 @@ pub mod funcs {\n                                                LPMEMORY_BASIC_INFORMATION,\n                                                LPSYSTEM_INFO, HANDLE, LPHANDLE,\n                                                LARGE_INTEGER, PLARGE_INTEGER,\n-                                               LPFILETIME};\n+                                               LPFILETIME, LPWIN32_FIND_DATAW};\n \n             extern \"system\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n@@ -4793,9 +4809,9 @@ pub mod funcs {\n                                             -> DWORD;\n                 pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n                 pub fn GetLastError() -> DWORD;\n-                pub fn FindFirstFileW(fileName: LPCWSTR, findFileData: HANDLE)\n+                pub fn FindFirstFileW(fileName: LPCWSTR, findFileData: LPWIN32_FIND_DATAW)\n                                       -> HANDLE;\n-                pub fn FindNextFileW(findFile: HANDLE, findFileData: HANDLE)\n+                pub fn FindNextFileW(findFile: HANDLE, findFileData: LPWIN32_FIND_DATAW)\n                                      -> BOOL;\n                 pub fn FindClose(findFile: HANDLE) -> BOOL;\n                 pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,"}, {"sha": "adc97c6bede70d5a1d0f23396ad7179218e97812", "filename": "src/libnative/io/file_windows.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Flibnative%2Fio%2Ffile_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Flibnative%2Fio%2Ffile_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_windows.rs?ref=d3ec0674bbf031008a5b741d04edc9ebdc466264", "patch": "@@ -11,16 +11,14 @@\n //! Blocking Windows-based file I/O\n \n use alloc::arc::Arc;\n-use libc::{c_int, c_void};\n-use libc;\n+use libc::{mod, c_int};\n use std::c_str::CString;\n use std::mem;\n use std::os::windows::fill_utf16_buf_and_decode;\n use std::ptr;\n use std::rt::rtio;\n use std::rt::rtio::{IoResult, IoError};\n use std::str;\n-use std::vec;\n \n pub type fd_t = libc::c_int;\n \n@@ -344,8 +342,6 @@ pub fn mkdir(p: &CString, _mode: uint) -> IoResult<()> {\n }\n \n pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n-    use std::rt::libc_heap::malloc_raw;\n-\n     fn prune(root: &CString, dirs: Vec<Path>) -> Vec<CString> {\n         let root = unsafe { CString::new(root.as_ptr(), false) };\n         let root = Path::new(root);\n@@ -355,38 +351,35 @@ pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n         }).map(|path| root.join(path).to_c_str()).collect()\n     }\n \n-    extern {\n-        fn rust_list_dir_wfd_size() -> libc::size_t;\n-        fn rust_list_dir_wfd_fp_buf(wfd: *mut libc::c_void) -> *const u16;\n-    }\n     let star = Path::new(unsafe {\n         CString::new(p.as_ptr(), false)\n     }).join(\"*\");\n     let path = try!(to_utf16(&star.to_c_str()));\n \n     unsafe {\n-        let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n-        let find_handle = libc::FindFirstFileW(path.as_ptr(),\n-                                               wfd_ptr as libc::HANDLE);\n+        let mut wfd = mem::zeroed();\n+        let find_handle = libc::FindFirstFileW(path.as_ptr(), &mut wfd);\n         if find_handle != libc::INVALID_HANDLE_VALUE {\n-            let mut paths = vec!();\n-            let mut more_files = 1 as libc::c_int;\n+            let mut paths = vec![];\n+            let mut more_files = 1 as libc::BOOL;\n             while more_files != 0 {\n-                let fp_buf = rust_list_dir_wfd_fp_buf(wfd_ptr as *mut c_void);\n-                if fp_buf as uint == 0 {\n-                    fail!(\"os::list_dir() failure: got null ptr from wfd\");\n-                } else {\n-                    let fp_vec = vec::raw::from_buf(fp_buf, libc::wcslen(fp_buf) as uint);\n-                    let fp_trimmed = str::truncate_utf16_at_nul(fp_vec.as_slice());\n-                    let fp_str = String::from_utf16(fp_trimmed)\n-                            .expect(\"rust_list_dir_wfd_fp_buf returned invalid UTF-16\");\n-                    paths.push(Path::new(fp_str));\n+                {\n+                    let filename = str::truncate_utf16_at_nul(wfd.cFileName);\n+                    match String::from_utf16(filename) {\n+                        Some(filename) => paths.push(Path::new(filename)),\n+                        None => {\n+                            assert!(libc::FindClose(find_handle) != 0);\n+                            return Err(IoError {\n+                                code: super::c::ERROR_ILLEGAL_CHARACTER as uint,\n+                                extra: 0,\n+                                detail: Some(format!(\"path was not valid UTF-16: {}\", filename)),\n+                            })\n+                        }, // FIXME #12056: Convert the UCS-2 to invalid utf-8 instead of erroring\n+                    }\n                 }\n-                more_files = libc::FindNextFileW(find_handle,\n-                                                 wfd_ptr as libc::HANDLE);\n+                more_files = libc::FindNextFileW(find_handle, &mut wfd);\n             }\n             assert!(libc::FindClose(find_handle) != 0);\n-            libc::free(wfd_ptr as *mut c_void);\n             Ok(prune(p, paths))\n         } else {\n             Err(super::last_error())"}, {"sha": "5dc07f859aed02817cd3457a6a62be973de6e9dd", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec0674bbf031008a5b741d04edc9ebdc466264/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=d3ec0674bbf031008a5b741d04edc9ebdc466264", "patch": "@@ -100,33 +100,6 @@ rust_list_dir_val(struct dirent* entry_ptr) {\n }\n #endif\n \n-size_t\n-#if defined(__WIN32__)\n-rust_list_dir_wfd_size() {\n-    return sizeof(WIN32_FIND_DATAW);\n-}\n-#else\n-rust_list_dir_wfd_size() {\n-    return 0;\n-}\n-#endif\n-\n-void*\n-#if defined(__WIN32__)\n-rust_list_dir_wfd_fp_buf(WIN32_FIND_DATAW* wfd) {\n-    if(wfd == NULL) {\n-        return 0;\n-    }\n-    else {\n-        return wfd->cFileName;\n-    }\n-}\n-#else\n-rust_list_dir_wfd_fp_buf(void* wfd) {\n-    return 0;\n-}\n-#endif\n-\n typedef struct {\n     int32_t tm_sec;\n     int32_t tm_min;"}]}