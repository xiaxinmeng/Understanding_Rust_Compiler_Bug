{"sha": "3a764e9396d24bdc840cf41efdab86c984b2d3b8", "node_id": "C_kwDOAAsO6NoAKDNhNzY0ZTkzOTZkMjRiZGM4NDBjZjQxZWZkYWI4NmM5ODRiMmQzYjg", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-30T23:47:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T23:47:15Z"}, "message": "Rollup merge of #100892 - sunfishcode:wasi-stdio-asfd, r=joshtriplett\n\nAdd `AsFd` implementations for stdio types on WASI.\n\nThis mirrors the implementations on Unix platforms, and also mirrors the\nexisting `AsRawFd` impls.", "tree": {"sha": "085acef60cddef011f534367c28c9ede5791d8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085acef60cddef011f534367c28c9ede5791d8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a764e9396d24bdc840cf41efdab86c984b2d3b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDqGDCRBK7hj4Ov3rIwAAC8sIABQj+TFJccnjzRz2t+4YQz52\nNlg1+vjVtfSwub7Xqt2YNxpaFDpfVIym/lgS7P2GL0tCKGl92nvnMJrYbpUckxAd\nLwjVPRaD1hms09fXpnifK/EvIKa52N5Moqfx5bgXMt9EsdNGvW2Im+n9GR98Jgln\n3aGLM0RMqaU/S1tMR6hj8qtQpx2XsbPiWmgwJenKwthMmUSoKU1/9E2cOfLDUpuT\n1cPP99AAvvfZkjHoAzMOJRHMKWazp4oAwBH3MwVkX10/bHczNKjxnxpPKT/vZP9m\n540GrZSjCF+kEq5pbyXvOncwFIF2k8kn9PJIoMyC6qRAF2DJqWolo109Cbngcec=\n=HvlX\n-----END PGP SIGNATURE-----\n", "payload": "tree 085acef60cddef011f534367c28c9ede5791d8d4\nparent 682644251dcba44bd5d66ec52e057e0ee29435f5\nparent 2efe6b0d3d1cca5b0b360ff760f08cb7d647878a\nauthor Yuki Okushi <jtitor@2k36.org> 1661903235 +0900\ncommitter GitHub <noreply@github.com> 1661903235 +0900\n\nRollup merge of #100892 - sunfishcode:wasi-stdio-asfd, r=joshtriplett\n\nAdd `AsFd` implementations for stdio types on WASI.\n\nThis mirrors the implementations on Unix platforms, and also mirrors the\nexisting `AsRawFd` impls.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a764e9396d24bdc840cf41efdab86c984b2d3b8", "html_url": "https://github.com/rust-lang/rust/commit/3a764e9396d24bdc840cf41efdab86c984b2d3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a764e9396d24bdc840cf41efdab86c984b2d3b8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682644251dcba44bd5d66ec52e057e0ee29435f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/682644251dcba44bd5d66ec52e057e0ee29435f5", "html_url": "https://github.com/rust-lang/rust/commit/682644251dcba44bd5d66ec52e057e0ee29435f5"}, {"sha": "2efe6b0d3d1cca5b0b360ff760f08cb7d647878a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efe6b0d3d1cca5b0b360ff760f08cb7d647878a", "html_url": "https://github.com/rust-lang/rust/commit/2efe6b0d3d1cca5b0b360ff760f08cb7d647878a"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "d2081771b6ec79d267a9dba2377dc014cfb35a07", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a764e9396d24bdc840cf41efdab86c984b2d3b8/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a764e9396d24bdc840cf41efdab86c984b2d3b8/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=3a764e9396d24bdc840cf41efdab86c984b2d3b8", "patch": "@@ -4,7 +4,7 @@ use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::os::raw;\n-use crate::os::wasi::io::{AsRawFd, FromRawFd};\n+use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd};\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -23,6 +23,13 @@ impl AsRawFd for Stdin {\n     }\n }\n \n+impl AsFd for Stdin {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(0) }\n+    }\n+}\n+\n impl io::Read for Stdin {\n     fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n@@ -51,6 +58,13 @@ impl AsRawFd for Stdout {\n     }\n }\n \n+impl AsFd for Stdout {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(1) }\n+    }\n+}\n+\n impl io::Write for Stdout {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])\n@@ -82,6 +96,13 @@ impl AsRawFd for Stderr {\n     }\n }\n \n+impl AsFd for Stderr {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(2) }\n+    }\n+}\n+\n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])"}]}