{"sha": "86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDllZDZjODJjNjc0NWZlYzQ2YjllY2YyZmE5MWJlNzkyNGRkMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-03T20:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-03T20:09:36Z"}, "message": "Auto merge of #39356 - krdln:format-with-capacity, r=aturon\n\nUse `String::with_capacity` in `format!`\n\nAdd an `Arguments::estimated_capacity` to estimate the length of formatted text and use it in `std::fmt::format` as the initial capacity of the buffer.\n\nThe capacity is calculated based on the literal parts of format string, see the details in the implementation.\n\nSome benches:\n```rust\nempty:       format!(\"{}\", black_box(\"\"))\nliteral:     format!(\"Literal\")\nlong:        format!(\"Hello Hello Hello Hello, {}!\", black_box(\"world\"))\nlong_rev:    format!(\"{}, hello hello hello hello!\", black_box(\"world\"))\nlong_rev_2:  format!(\"{}{}, hello hello hello hello!\", 1, black_box(\"world\"))\nshort:       format!(\"Hello, {}!\", black_box(\"world\"))\nshort_rev:   format!(\"{}, hello!\", black_box(\"world\"))\nshort_rev_2: format!(\"{}{}, hello!\", 1, black_box(\"world\"))\nsurround:    format!(\"aaaaa{}ccccc{}eeeee\", black_box(\"bbbbb\"), black_box(\"eeeee\"))\ntwo_spaced:  format!(\"{} {}\", black_box(\"bbbbb\"), black_box(\"eeeee\"))\nworst_case:  format!(\"{} a long piece...\", black_box(\"and even longer argument. not sure why it has to be so long\"))\n```\n```\n empty        25            28                      3   12.00%\n literal      35            29                     -6  -17.14%\n long         80            46                    -34  -42.50%\n long_rev     79            45                    -34  -43.04%\n long_rev_2   111           66                    -45  -40.54%\n short        73            46                    -27  -36.99%\n short_rev    74            76                      2    2.70%\n short_rev_2  107           108                     1    0.93%\n surround     142           65                    -77  -54.23%\n two_spaced   111           115                     4    3.60%\n worst_case   89            101                    12   13.48%\n```", "tree": {"sha": "00bac1c7b714a59f1e4f230a64cb5427de2b62eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00bac1c7b714a59f1e4f230a64cb5427de2b62eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "html_url": "https://github.com/rust-lang/rust/commit/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed6410a7b0f15dc68536e0735787436526ba395", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed6410a7b0f15dc68536e0735787436526ba395", "html_url": "https://github.com/rust-lang/rust/commit/aed6410a7b0f15dc68536e0735787436526ba395"}, {"sha": "0267529681e2fac6ef4560afe7d8d439d04e6303", "url": "https://api.github.com/repos/rust-lang/rust/commits/0267529681e2fac6ef4560afe7d8d439d04e6303", "html_url": "https://github.com/rust-lang/rust/commit/0267529681e2fac6ef4560afe7d8d439d04e6303"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "bd74848a01d8362f150b23701c6af47359f10f8f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -539,7 +539,8 @@ use string;\n /// [format!]: ../macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn format(args: Arguments) -> string::String {\n-    let mut output = string::String::new();\n+    let capacity = args.estimated_capacity();\n+    let mut output = string::String::with_capacity(capacity);\n     let _ = output.write_fmt(args);\n     output\n }"}, {"sha": "a989f914db616dbd6aedc179d37fa7cddca6c3b5", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -265,6 +265,32 @@ impl<'a> Arguments<'a> {\n             args: args\n         }\n     }\n+\n+    /// Estimates the length of the formatted text.\n+    ///\n+    /// This is intended to be used for setting initial `String` capacity\n+    /// when using `format!`. Note: this is neither the lower nor upper bound.\n+    #[doc(hidden)] #[inline]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n+    pub fn estimated_capacity(&self) -> usize {\n+        let pieces_length: usize = self.pieces.iter()\n+            .map(|x| x.len()).sum();\n+\n+        if self.args.is_empty() {\n+            pieces_length\n+        } else if self.pieces[0] == \"\" && pieces_length < 16 {\n+            // If the format string starts with an argument,\n+            // don't preallocate anything, unless length\n+            // of pieces is significant.\n+            0\n+        } else {\n+            // There are some arguments, so any additional push\n+            // will reallocate the string. To avoid that,\n+            // we're \"pre-doubling\" the capacity here.\n+            pieces_length.checked_mul(2).unwrap_or(0)\n+        }\n+    }\n }\n \n /// This structure represents a safely precompiled version of a format string"}, {"sha": "5d204c7d523d681a937b5f3d540c889cb7920948", "filename": "src/libcoretest/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcoretest%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcoretest%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fmod.rs?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -28,3 +28,13 @@ fn test_pointer_formats_data_pointer() {\n     assert_eq!(format!(\"{:p}\", s), format!(\"{:p}\", s.as_ptr()));\n     assert_eq!(format!(\"{:p}\", b), format!(\"{:p}\", b.as_ptr()));\n }\n+\n+#[test]\n+fn test_estimated_capacity() {\n+    assert_eq!(format_args!(\"\").estimated_capacity(), 0);\n+    assert_eq!(format_args!(\"{}\", \"\").estimated_capacity(), 0);\n+    assert_eq!(format_args!(\"Hello\").estimated_capacity(), 5);\n+    assert_eq!(format_args!(\"Hello, {}!\", \"\").estimated_capacity(), 16);\n+    assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 0);\n+    assert_eq!(format_args!(\"{}. 16-bytes piece\", \"World\").estimated_capacity(), 32);\n+}"}, {"sha": "e06b757691e5ac29462159f04ce7e57831676893", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -34,6 +34,7 @@\n #![feature(ordering_chaining)]\n #![feature(ptr_unaligned)]\n #![feature(move_cell)]\n+#![feature(fmt_internals)]\n \n extern crate core;\n extern crate test;"}]}