{"sha": "724500626bcc37db1e271a3c344550fcd4238148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNDUwMDYyNmJjYzM3ZGIxZTI3MWEzYzM0NDU1MGZjZDQyMzgxNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-12T06:11:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-12T06:11:33Z"}, "message": "Auto merge of #46598 - davidtwco:issue-46471, r=arielb1\n\nMIR borrowck: error message confuses locals and temporaries\n\nFixes #46471 and fixes #46472 (see [this Gitter comment](https://gitter.im/rust-impl-period/WG-compiler-nll?at=5a2d5cb53ae2aa6b3facf0c2)).\n\nr? @arielb1", "tree": {"sha": "ee57719a4879db24f4eabcfbc6efcab2604cad90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee57719a4879db24f4eabcfbc6efcab2604cad90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724500626bcc37db1e271a3c344550fcd4238148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724500626bcc37db1e271a3c344550fcd4238148", "html_url": "https://github.com/rust-lang/rust/commit/724500626bcc37db1e271a3c344550fcd4238148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724500626bcc37db1e271a3c344550fcd4238148/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0b65284686a5d984994708596d029267e7bf7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0b65284686a5d984994708596d029267e7bf7b", "html_url": "https://github.com/rust-lang/rust/commit/3a0b65284686a5d984994708596d029267e7bf7b"}, {"sha": "3dbc11bc6322a8d337ccdf79464e547abafe7f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbc11bc6322a8d337ccdf79464e547abafe7f00", "html_url": "https://github.com/rust-lang/rust/commit/3dbc11bc6322a8d337ccdf79464e547abafe7f00"}], "stats": {"total": 348, "additions": 297, "deletions": 51}, "files": [{"sha": "186598001da6a67f1cbd1dec4c6496a83078799c", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 90, "deletions": 4, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -9,11 +9,14 @@\n // except according to those terms.\n \n use syntax_pos::Span;\n+use rustc::middle::region::ScopeTree;\n use rustc::mir::{BorrowKind, Field, Local, Location, Operand};\n use rustc::mir::{Place, ProjectionElem, Rvalue, StatementKind};\n-use rustc::ty;\n+use rustc::ty::{self, RegionKind};\n use rustc_data_structures::indexed_vec::Idx;\n \n+use std::rc::Rc;\n+\n use super::{MirBorrowckCtxt, Context};\n use super::{InitializationRequiringAction, PrefixSet};\n use dataflow::{BorrowData, Borrows, FlowAtLocation, MovingOutStatements};\n@@ -324,6 +327,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         borrows: &Borrows<'cx, 'gcx, 'tcx>\n     ) {\n         let end_span = borrows.opt_region_end_span(&borrow.region);\n+        let scope_tree = borrows.scope_tree();\n         let root_place = self.prefixes(&borrow.place, PrefixSet::All).last().unwrap();\n \n         match root_place {\n@@ -347,21 +351,103 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 unreachable!(\"root_place is an unreachable???\")\n         };\n \n+        let borrow_span = self.mir.source_info(borrow.location).span;\n         let proper_span = match *root_place {\n             Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => drop_span,\n         };\n \n-        let mut err = self.tcx\n-            .path_does_not_live_long_enough(drop_span, \"borrowed value\", Origin::Mir);\n+        match (borrow.region, &self.describe_place(&borrow.place)) {\n+            (RegionKind::ReScope(_), Some(name)) => {\n+                self.report_scoped_local_value_does_not_live_long_enough(\n+                    name, &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReScope(_), None) => {\n+                self.report_scoped_temporary_value_does_not_live_long_enough(\n+                    &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReEarlyBound(_), Some(name)) |\n+            (RegionKind::ReFree(_), Some(name)) |\n+            (RegionKind::ReStatic, Some(name)) |\n+            (RegionKind::ReEmpty, Some(name)) |\n+            (RegionKind::ReVar(_), Some(name)) => {\n+                self.report_unscoped_local_value_does_not_live_long_enough(\n+                    name, &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReEarlyBound(_), None) |\n+            (RegionKind::ReFree(_), None) |\n+            (RegionKind::ReStatic, None) |\n+            (RegionKind::ReEmpty, None) |\n+            (RegionKind::ReVar(_), None) => {\n+                self.report_unscoped_temporary_value_does_not_live_long_enough(\n+                    &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);\n+            },\n+            (RegionKind::ReLateBound(_, _), _) |\n+            (RegionKind::ReSkolemized(_, _), _) |\n+            (RegionKind::ReErased, _) => {\n+                span_bug!(drop_span, \"region does not make sense in this context\");\n+            },\n+        }\n+    }\n+\n+    fn report_scoped_local_value_does_not_live_long_enough(\n+        &mut self, name: &String, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, _proper_span: Span, end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(drop_span,\n+                                                              &format!(\"`{}`\", name),\n+                                                              Origin::Mir);\n+        err.span_label(borrow_span, \"borrow occurs here\");\n+        err.span_label(drop_span, format!(\"`{}` dropped here while still borrowed\", name));\n+        if let Some(end) = end_span {\n+            err.span_label(end, \"borrowed value needs to live until here\");\n+        }\n+        err.emit();\n+    }\n+\n+    fn report_scoped_temporary_value_does_not_live_long_enough(\n+        &mut self, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, proper_span: Span, end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n+                                                              \"borrowed value\",\n+                                                              Origin::Mir);\n         err.span_label(proper_span, \"temporary value created here\");\n         err.span_label(drop_span, \"temporary value dropped here while still borrowed\");\n         err.note(\"consider using a `let` binding to increase its lifetime\");\n-\n         if let Some(end) = end_span {\n             err.span_label(end, \"temporary value needs to live until here\");\n         }\n+        err.emit();\n+    }\n+\n+    fn report_unscoped_local_value_does_not_live_long_enough(\n+        &mut self, name: &String, scope_tree: &Rc<ScopeTree>, borrow: &BorrowData<'tcx>,\n+        drop_span: Span, borrow_span: Span, _proper_span: Span, _end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n+                                                              &format!(\"`{}`\", name),\n+                                                              Origin::Mir);\n+        err.span_label(borrow_span, \"does not live long enough\");\n+        err.span_label(drop_span, \"borrowed value only lives until here\");\n+        self.tcx.note_and_explain_region(scope_tree, &mut err,\n+                                         \"borrowed value must be valid for \",\n+                                         borrow.region, \"...\");\n+        err.emit();\n+    }\n \n+    fn report_unscoped_temporary_value_does_not_live_long_enough(\n+        &mut self, scope_tree: &Rc<ScopeTree>, borrow: &BorrowData<'tcx>,\n+        drop_span: Span, _borrow_span: Span, proper_span: Span, _end_span: Option<Span>\n+    ) {\n+        let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n+                                                              \"borrowed value\",\n+                                                              Origin::Mir);\n+        err.span_label(proper_span, \"does not live long enough\");\n+        err.span_label(drop_span, \"temporary value only lives until here\");\n+        self.tcx.note_and_explain_region(scope_tree, &mut err,\n+                                         \"borrowed value must be valid for \",\n+                                         borrow.region, \"...\");\n         err.emit();\n     }\n "}, {"sha": "128052e58949dda1ae2758126a53160d01f01089", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -1800,7 +1800,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n }\n \n-\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     // FIXME (#16118): function intended to allow the borrow checker\n     // to be less precise in its handling of Box while still allowing"}, {"sha": "25bc702764a34b45cdbdbf3dbacc88452643f3fe", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -160,6 +160,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n \n     pub fn borrows(&self) -> &IndexVec<BorrowIndex, BorrowData<'tcx>> { &self.borrows }\n \n+    pub fn scope_tree(&self) -> &Rc<region::ScopeTree> { &self.scope_tree }\n+\n     pub fn location(&self, idx: BorrowIndex) -> &Location {\n         &self.borrows[idx].location\n     }"}, {"sha": "0d5feb6b9cc84b2489521f0d5ab999f8041a6030", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -12,8 +12,9 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n fn cplusplus_mode(x: isize) -> &'static isize {\n-    &x //[ast]~ ERROR `x` does not live long enough\n+    &x\n+    //[ast]~^ ERROR `x` does not live long enough [E0597]\n+    //[mir]~^^ ERROR `x` does not live long enough [E0597]\n }\n-//[mir]~^ ERROR borrowed value does not live long enough\n \n fn main() {}"}, {"sha": "2c9ace4825dfcae3434c3043a3079cd37ffbd8b6", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-with-panic-outlives-fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -13,10 +13,11 @@\n \n fn cplusplus_mode_exceptionally_unsafe(x: &mut Option<&'static mut isize>) {\n     let mut z = (0, 0);\n-    *x = Some(&mut z.1); //[ast]~ ERROR [E0597]\n+    *x = Some(&mut z.1);\n+    //[ast]~^ ERROR `z.1` does not live long enough [E0597]\n+    //[mir]~^^ ERROR `z.1` does not live long enough [E0597]\n     panic!(\"catch me for a dangling pointer!\")\n }\n-//[mir]~^ ERROR [E0597]\n \n fn main() {\n     cplusplus_mode_exceptionally_unsafe(&mut None);"}, {"sha": "4211057610bc7ebf60e5ae3f805b330209eda5c2", "filename": "src/test/compile-fail/issue-17954.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -18,12 +18,16 @@ static FOO: u8 = 3;\n \n fn main() {\n     let a = &FOO;\n-    //[ast]~^ ERROR borrowed value does not live long enough\n+    //[mir]~^ ERROR `FOO` does not live long enough [E0597]\n+    //[mir]~| does not live long enough\n+    //[mir]~| NOTE borrowed value must be valid for the static lifetime\n+    //[ast]~^^^^ ERROR borrowed value does not live long enough\n     //[ast]~| does not live long enough\n     //[ast]~| NOTE borrowed value must be valid for the static lifetime\n \n     std::thread::spawn(move || {\n         println!(\"{}\", a);\n     });\n-} //[ast]~ temporary value only lives until here\n-  //[mir]~^ ERROR borrowed value does not live long enough\n+}\n+//[mir]~^ borrowed value only lives until here\n+//[ast]~^^ temporary value only lives until here"}, {"sha": "2e2dfdb03d990796a9fa91b7d370d95156af3448", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-big.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -82,8 +82,8 @@ fn main() {\n             //[ast]~^ ERROR `x` does not live long enough\n             //[ast]~| ERROR `y` does not live long enough\n     });\n-    //[mir]~^ ERROR borrowed value does not live long enough\n-    //[mir]~| ERROR borrowed value does not live long enough\n+    //[mir]~^ ERROR `x` does not live long enough\n+    //[mir]~| ERROR `y` does not live long enough\n \n     w.handle(); // This works\n     // w.handle_ref(); // This doesn't"}, {"sha": "977ea785fe6d33c5be337107bb027c0bcb3033dd", "filename": "src/test/ui/issue-46471-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck=compare\n+\n+fn main() {\n+    let y = {\n+        let mut z = 0;\n+        &mut z\n+    };\n+    //~^ ERROR `z` does not live long enough (Ast) [E0597]\n+    //~| ERROR `z` does not live long enough (Mir) [E0597]\n+    println!(\"{}\", y);\n+}"}, {"sha": "c33b9a7ba7b51d37406776368f28664855f83eae", "filename": "src/test/ui/issue-46471-1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,24 @@\n+error[E0597]: `z` does not live long enough (Ast)\n+  --> $DIR/issue-46471-1.rs:17:5\n+   |\n+16 |         &mut z\n+   |              - borrow occurs here\n+17 |     };\n+   |     ^ `z` dropped here while still borrowed\n+...\n+21 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0597]: `z` does not live long enough (Mir)\n+  --> $DIR/issue-46471-1.rs:17:6\n+   |\n+16 |         &mut z\n+   |         ------ borrow occurs here\n+17 |     };\n+   |      ^ `z` dropped here while still borrowed\n+...\n+21 | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8faedb738429faa31ae95051c44b188e932fc531", "filename": "src/test/ui/issue-46471.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck=compare\n+\n+fn foo() -> &'static u32 {\n+    let x = 0;\n+    &x\n+    //~^ ERROR `x` does not live long enough (Ast) [E0597]\n+    //~| ERROR `x` does not live long enough (Mir) [E0597]\n+}\n+\n+fn main() { }"}, {"sha": "dd361841de1a219e9dd29b4e79fe497ecb5e0530", "filename": "src/test/ui/issue-46471.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,24 @@\n+error[E0597]: `x` does not live long enough (Ast)\n+  --> $DIR/issue-46471.rs:15:6\n+   |\n+15 |     &x\n+   |      ^ does not live long enough\n+...\n+18 | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough (Mir)\n+  --> $DIR/issue-46471.rs:15:5\n+   |\n+15 |     &x\n+   |     ^^ does not live long enough\n+...\n+18 | }\n+   |  - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02c4dd7cb21d8fe88bfbf1da903c2ac01c6537d6", "filename": "src/test/ui/issue-46472.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck=compare\n+\n+fn bar<'a>() -> &'a mut u32 {\n+    &mut 4\n+    //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n+    //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n+}\n+\n+fn main() { }"}, {"sha": "ab35874fbb9692da809ce261db66e6693b07393f", "filename": "src/test/ui/issue-46472.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -0,0 +1,40 @@\n+error[E0597]: borrowed value does not live long enough (Ast)\n+  --> $DIR/issue-46472.rs:14:10\n+   |\n+14 |     &mut 4\n+   |          ^ does not live long enough\n+...\n+17 | }\n+   | - temporary value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n+  --> $DIR/issue-46472.rs:13:1\n+   |\n+13 | / fn bar<'a>() -> &'a mut u32 {\n+14 | |     &mut 4\n+15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n+16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n+17 | | }\n+   | |_^\n+\n+error[E0597]: borrowed value does not live long enough (Mir)\n+  --> $DIR/issue-46472.rs:14:10\n+   |\n+14 |     &mut 4\n+   |          ^ does not live long enough\n+...\n+17 | }\n+   |  - temporary value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n+  --> $DIR/issue-46472.rs:13:1\n+   |\n+13 | / fn bar<'a>() -> &'a mut u32 {\n+14 | |     &mut 4\n+15 | |     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n+16 | |     //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n+17 | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5eae5d924712b70fb7465955734e40cc0e7a62ff", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -30,11 +30,11 @@ fn test() {\n         let closure = SomeStruct {\n             p: &mut p,\n             y: &y,\n+            //~^ ERROR `y` does not live long enough [E0597]\n         };\n \n         closure.invoke();\n     }\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n \n     deref(p);\n }"}, {"sha": "6b57f91987be5e810da3b556ebf025991107e8d0", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -1,13 +1,13 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:36:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/capture-ref-in-struct.rs:32:16\n    |\n-28 |         let y = 22;\n-   |             - temporary value created here\n+32 |             y: &y,\n+   |                ^^ does not live long enough\n ...\n-36 |     }\n-   |      ^ temporary value dropped here while still borrowed\n+37 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "7e918c6431de4450e874558b91bee2001218119e", "filename": "src/test/ui/nll/closure-requirements/escape-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -35,8 +35,8 @@ fn test() {\n         let y = 22;\n         let mut closure = expect_sig(|p, y| *p = y);\n         closure(&mut p, &y);\n+        //~^ ERROR `y` does not live long enough [E0597]\n     }\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n \n     deref(p);\n }"}, {"sha": "0ec671997e7afcf57e124607d5f0b8550327ff29", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -24,16 +24,16 @@ note: No external requirements\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_argument[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-argument.rs:38:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-argument.rs:37:25\n    |\n-35 |         let y = 22;\n-   |             - temporary value created here\n-...\n-38 |     }\n-   |      ^ temporary value dropped here while still borrowed\n+37 |         closure(&mut p, &y);\n+   |                         ^^ does not live long enough\n+38 |         //~^ ERROR `y` does not live long enough [E0597]\n+39 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#5r...\n \n error: aborting due to previous error\n "}, {"sha": "05700ae00ad4f72900ad96f2cdec06474a528f22", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -27,13 +27,13 @@ fn test() {\n     {\n         let y = 22;\n \n-        let mut closure = || {\n+        let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n             let mut closure1 = || p = &y;\n             closure1();\n         };\n \n         closure();\n-    } //~ ERROR borrowed value does not live long enough\n+    }\n \n     deref(p);\n }"}, {"sha": "6c70afa0c9c8ab53987db0d196b5a21ea5247dda", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -16,7 +16,7 @@ note: External requirements\n note: External requirements\n   --> $DIR/escape-upvar-nested.rs:30:27\n    |\n-30 |           let mut closure = || {\n+30 |           let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n    |  ___________________________^\n 31 | |             let mut closure1 = || p = &y;\n 32 | |             closure1();\n@@ -46,16 +46,20 @@ note: No external requirements\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-upvar-nested.rs:36:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-upvar-nested.rs:30:27\n    |\n-28 |         let y = 22;\n-   |             - temporary value created here\n+30 |           let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n+   |  ___________________________^\n+31 | |             let mut closure1 = || p = &y;\n+32 | |             closure1();\n+33 | |         };\n+   | |_________^ does not live long enough\n ...\n-36 |     } //~ ERROR borrowed value does not live long enough\n-   |      ^ temporary value dropped here while still borrowed\n+36 |       }\n+   |        - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#3r...\n \n error: aborting due to previous error\n "}, {"sha": "93d8bfafcbaa4ffed82d2b0be51f828a7d2b679b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -31,8 +31,9 @@ fn test() {\n     {\n         let y = 22;\n         let mut closure = || p = &y;\n+        //~^ ERROR `y` does not live long enough [E0597]\n         closure();\n-    } //~ ERROR borrowed value does not live long enough\n+    }\n \n     deref(p);\n }"}, {"sha": "0b982dd812b59a6a9f09ca42fc22a7c4008eedc2", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/724500626bcc37db1e271a3c344550fcd4238148/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=724500626bcc37db1e271a3c344550fcd4238148", "patch": "@@ -21,22 +21,22 @@ note: No external requirements\n 29 | |     let mut p = &x;\n 30 | |\n ...  |\n-37 | |     deref(p);\n-38 | | }\n+38 | |     deref(p);\n+39 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-upvar-ref.rs:35:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-upvar-ref.rs:33:27\n    |\n-32 |         let y = 22;\n-   |             - temporary value created here\n+33 |         let mut closure = || p = &y;\n+   |                           ^^^^^^^^^ does not live long enough\n ...\n-35 |     } //~ ERROR borrowed value does not live long enough\n-   |      ^ temporary value dropped here while still borrowed\n+36 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#3r...\n \n error: aborting due to previous error\n "}]}