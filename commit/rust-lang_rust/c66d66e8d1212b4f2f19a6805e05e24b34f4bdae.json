{"sha": "c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmQ2NmU4ZDEyMTJiNGYyZjE5YTY4MDVlMDVlMjRiMzRmNGJkYWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-22T01:20:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T01:20:28Z"}, "message": "Rollup merge of #82686 - CDirkx:unix-platform, r=m-ou-se\n\nMove `std::sys::unix::platform` to `std::sys::unix::ext`\n\nThis moves the operating system dependent alias `platform` (`std::os::{linux, android, ...}`) from `std::sys::unix` to `std::sys::unix::ext` (a.k.a. `std::os::unix`), removing the need for compatibility code in `unix_ext` when documenting on another platform.\n\nThis is also a step in making it possible to properly move `std::sys::unix::ext` to `std::os::unix`, as ideally `std::sys` should not depend on the rest of `std`.", "tree": {"sha": "b4b7c02b7ca33ce3cdf0a16fa2960b9e9bddea47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b7c02b7ca33ce3cdf0a16fa2960b9e9bddea47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgV/DdCRBK7hj4Ov3rIwAAdHIIAKSXEW486NchjwygiilLGDVX\n13NuetO4ZgyvIs/Nl50wkgaSXj9r+1vyOiiYj3ltrW009JpR8CIF4kLYMTeRpMRI\ndPdfOYFYc1k6Z+iJqP/cmJGb7i64Ep9zPcN5VLgXSPSLxng9gmjn2mK5eiPJyWB3\nHG3WZM0o0h9aW+XvR2CTTlgXKMZrvnP2MLIb7cR5bdcqcD8jHFOLFXr4sPE5vZYr\nZWEWKmKsZ9j2vuI1lSABhuFJAle/5xv8KVI0cmUqAPCfpO1YAOQgD+XDVsneYxPZ\nsgFqCjscNbLqXCim2FX4HNjdepWTyZtwf7IhGkKgsbkgMu1oHX4KNAKuK40x16s=\n=qcDK\n-----END PGP SIGNATURE-----\n", "payload": "tree b4b7c02b7ca33ce3cdf0a16fa2960b9e9bddea47\nparent da143d38e4e47f53c4745a037563f34d7f3ea6e3\nparent 7539626c4aea0ff036a8d200c587f8ae2743d9bc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616376028 +0100\ncommitter GitHub <noreply@github.com> 1616376028 +0100\n\nRollup merge of #82686 - CDirkx:unix-platform, r=m-ou-se\n\nMove `std::sys::unix::platform` to `std::sys::unix::ext`\n\nThis moves the operating system dependent alias `platform` (`std::os::{linux, android, ...}`) from `std::sys::unix` to `std::sys::unix::ext` (a.k.a. `std::os::unix`), removing the need for compatibility code in `unix_ext` when documenting on another platform.\n\nThis is also a step in making it possible to properly move `std::sys::unix::ext` to `std::os::unix`, as ideally `std::sys` should not depend on the rest of `std`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "html_url": "https://github.com/rust-lang/rust/commit/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da143d38e4e47f53c4745a037563f34d7f3ea6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da143d38e4e47f53c4745a037563f34d7f3ea6e3", "html_url": "https://github.com/rust-lang/rust/commit/da143d38e4e47f53c4745a037563f34d7f3ea6e3"}, {"sha": "7539626c4aea0ff036a8d200c587f8ae2743d9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7539626c4aea0ff036a8d200c587f8ae2743d9bc", "html_url": "https://github.com/rust-lang/rust/commit/7539626c4aea0ff036a8d200c587f8ae2743d9bc"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "9b359392cf0cde335f01e7b6f37b57b1c3c14df8", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "patch": "@@ -70,8 +70,6 @@ cfg_if::cfg_if! {\n         #[allow(missing_docs)]\n         pub mod unix_ext {}\n     } else {\n-        // On other platforms like Windows document the bare bones of unix\n-        use crate::os::linux as platform;\n         #[path = \"unix/ext/mod.rs\"]\n         pub mod unix_ext;\n     }"}, {"sha": "21bdfe29578bfb0b871b7ea0c935a10e7b617300", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "patch": "@@ -2,11 +2,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use super::platform::fs::MetadataExt as _;\n use crate::fs::{self, OpenOptions, Permissions};\n use crate::io;\n use crate::path::Path;\n use crate::sys;\n-use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n // Used for `File::read` on intra-doc links\n #[allow(unused_imports)]"}, {"sha": "e5048f7e545e0722d5a33877de597d4e16064f7b", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "patch": "@@ -29,6 +29,42 @@\n #![doc(cfg(unix))]\n #![allow(missing_docs)]\n \n+cfg_if::cfg_if! {\n+    if #[cfg(doc)] {\n+        // Use linux as the default platform when documenting on other platforms like Windows\n+        use crate::os::linux as platform;\n+    } else {\n+        #[cfg(target_os = \"android\")]\n+        use crate::os::android as platform;\n+        #[cfg(target_os = \"dragonfly\")]\n+        use crate::os::dragonfly as platform;\n+        #[cfg(target_os = \"emscripten\")]\n+        use crate::os::emscripten as platform;\n+        #[cfg(target_os = \"freebsd\")]\n+        use crate::os::freebsd as platform;\n+        #[cfg(target_os = \"fuchsia\")]\n+        use crate::os::fuchsia as platform;\n+        #[cfg(target_os = \"haiku\")]\n+        use crate::os::haiku as platform;\n+        #[cfg(target_os = \"illumos\")]\n+        use crate::os::illumos as platform;\n+        #[cfg(target_os = \"ios\")]\n+        use crate::os::ios as platform;\n+        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+        use crate::os::linux as platform;\n+        #[cfg(target_os = \"macos\")]\n+        use crate::os::macos as platform;\n+        #[cfg(target_os = \"netbsd\")]\n+        use crate::os::netbsd as platform;\n+        #[cfg(target_os = \"openbsd\")]\n+        use crate::os::openbsd as platform;\n+        #[cfg(target_os = \"redox\")]\n+        use crate::os::redox as platform;\n+        #[cfg(target_os = \"solaris\")]\n+        use crate::os::solaris as platform;\n+    }\n+}\n+\n pub mod ffi;\n pub mod fs;\n pub mod io;"}, {"sha": "c292955cb4eea40213a7b6b67840c876924adc02", "filename": "library/std/src/sys/unix/ext/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fraw.rs?ref=c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "patch": "@@ -24,10 +24,10 @@ pub type pid_t = i32;\n \n #[doc(inline)]\n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub use crate::sys::platform::raw::pthread_t;\n+pub use super::platform::raw::pthread_t;\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use crate::sys::platform::raw::{blkcnt_t, time_t};\n+pub use super::platform::raw::{blkcnt_t, time_t};\n #[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub use crate::sys::platform::raw::{blksize_t, dev_t, ino_t, mode_t, nlink_t, off_t};\n+pub use super::platform::raw::{blksize_t, dev_t, ino_t, mode_t, nlink_t, off_t};"}, {"sha": "44328ffc22e5b6713a91c307c9cb4abf114d3144", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66d66e8d1212b4f2f19a6805e05e24b34f4bdae/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=c66d66e8d1212b4f2f19a6805e05e24b34f4bdae", "patch": "@@ -2,38 +2,6 @@\n \n use crate::io::ErrorKind;\n \n-#[cfg(any(doc, target_os = \"linux\"))]\n-pub use crate::os::linux as platform;\n-\n-#[cfg(all(not(doc), target_os = \"android\"))]\n-pub use crate::os::android as platform;\n-#[cfg(all(not(doc), target_os = \"dragonfly\"))]\n-pub use crate::os::dragonfly as platform;\n-#[cfg(all(not(doc), target_os = \"emscripten\"))]\n-pub use crate::os::emscripten as platform;\n-#[cfg(all(not(doc), target_os = \"freebsd\"))]\n-pub use crate::os::freebsd as platform;\n-#[cfg(all(not(doc), target_os = \"fuchsia\"))]\n-pub use crate::os::fuchsia as platform;\n-#[cfg(all(not(doc), target_os = \"haiku\"))]\n-pub use crate::os::haiku as platform;\n-#[cfg(all(not(doc), target_os = \"illumos\"))]\n-pub use crate::os::illumos as platform;\n-#[cfg(all(not(doc), target_os = \"ios\"))]\n-pub use crate::os::ios as platform;\n-#[cfg(all(not(doc), target_os = \"l4re\"))]\n-pub use crate::os::linux as platform;\n-#[cfg(all(not(doc), target_os = \"macos\"))]\n-pub use crate::os::macos as platform;\n-#[cfg(all(not(doc), target_os = \"netbsd\"))]\n-pub use crate::os::netbsd as platform;\n-#[cfg(all(not(doc), target_os = \"openbsd\"))]\n-pub use crate::os::openbsd as platform;\n-#[cfg(all(not(doc), target_os = \"redox\"))]\n-pub use crate::os::redox as platform;\n-#[cfg(all(not(doc), target_os = \"solaris\"))]\n-pub use crate::os::solaris as platform;\n-\n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;\n "}]}