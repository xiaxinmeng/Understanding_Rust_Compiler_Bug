{"sha": "733153f2e550d46fe6f794c969df91368580e0b8", "node_id": "C_kwDOAAsO6NoAKDczMzE1M2YyZTU1MGQ0NmZlNmY3OTRjOTY5ZGY5MTM2ODU4MGUwYjg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-21T14:45:51Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-22T17:19:47Z"}, "message": "Move std::sys::{mutex, condvar, rwlock} to std::sys::locks.", "tree": {"sha": "0e0f103b6e9d7af878c744eb8cf057dfbec4e018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e0f103b6e9d7af878c744eb8cf057dfbec4e018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733153f2e550d46fe6f794c969df91368580e0b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733153f2e550d46fe6f794c969df91368580e0b8", "html_url": "https://github.com/rust-lang/rust/commit/733153f2e550d46fe6f794c969df91368580e0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733153f2e550d46fe6f794c969df91368580e0b8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6996345de2cc482cb164335336b9af1b03a320", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6996345de2cc482cb164335336b9af1b03a320", "html_url": "https://github.com/rust-lang/rust/commit/ac6996345de2cc482cb164335336b9af1b03a320"}], "stats": {"total": 104, "additions": 64, "deletions": 40}, "files": [{"sha": "f60835300059614db23aab9ef959584b2262e043", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::c_void;\n use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sys::hermit::abi;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n // The implementation is inspired by Andrew D. Birrell's paper"}, {"sha": "08eca4238020495dfa767aabf8115256965f829c", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -22,14 +22,12 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n #[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -40,14 +38,23 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n pub mod time;\n \n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::condvar::*;\n+    pub use super::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n use crate::io::ErrorKind;\n \n #[allow(unused_extern_crates)]"}, {"sha": "1cca809764c8cab2b5966c5b7e27c14d80420116", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::condvar::Condvar;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::{Condvar, Mutex};\n \n pub struct RWLock {\n     lock: Mutex,"}, {"sha": "ed26c52802748309f771d2c515d741ee6aa6d5fa", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,6 +1,6 @@\n //! POSIX conditional variable implementation based on user-space wait queues.\n use super::{abi, error::expect_success_aborting, spin::SpinMutex, task, time::with_tmos_strong};\n-use crate::{mem::replace, ptr::NonNull, sys::mutex::Mutex, time::Duration};\n+use crate::{mem::replace, ptr::NonNull, sys::locks::Mutex, time::Duration};\n \n // The implementation is inspired by the queue-based implementation shown in\n // Andrew D. Birrell's paper \"Implementing Condition Variables with Semaphores\""}, {"sha": "c9736880b0880819b1a3d0a624de48ef60526324", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n use super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};"}, {"sha": "1333edb9881a15acfc1e241058b689a30d57b1de", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -15,15 +15,13 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n #[path = \"../unsupported/fs.rs\"]\n pub mod fs;\n #[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -33,12 +31,21 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_key;\n pub mod time;\n \n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::condvar::*;\n+    pub use super::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {"}, {"sha": "492b1a55475a2abae3a73934b501e933e559c571", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -37,14 +37,21 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n-pub use self::itron::{condvar, mutex, thread};\n+pub use self::itron::thread;\n pub mod memchr;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n \n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::itron::condvar::*;\n+    pub use super::itron::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}"}, {"sha": "8dbe03bad9b0d8e09c2d0e093f7cb0572d022f27", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n pub struct Condvar {}", "previous_filename": "library/std/src/sys/unsupported/condvar.rs"}, {"sha": "5634f10633963234e1ed703b7bdb5a8af7ca418b", "filename": "library/std/src/sys/unsupported/locks/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -0,0 +1,6 @@\n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+pub use condvar::{Condvar, MovableCondvar};\n+pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n+pub use rwlock::{MovableRWLock, RWLock};"}, {"sha": "b3203c16c50022bb6f67e436899dd7a9879640ed", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "previous_filename": "library/std/src/sys/unsupported/mutex.rs"}, {"sha": "8438adeb5b533b6098daa9d8535effc57a62cd5b", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "previous_filename": "library/std/src/sys/unsupported/rwlock.rs"}, {"sha": "7bf6d40b76daa7746e676d85b9458362e6dcce14", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -4,11 +4,10 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fs;\n pub mod io;\n-pub mod mutex;\n+pub mod locks;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -17,7 +16,6 @@ pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n #[cfg(target_thread_local)]"}, {"sha": "683a07a34dcf9241c34edee980c37b042d6e2c9f", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -22,14 +22,12 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-#[path = \"../unsupported/condvar.rs\"]\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n pub mod io;\n-#[path = \"../unsupported/mutex.rs\"]\n-pub mod mutex;\n+#[path = \"../unsupported/locks/mod.rs\"]\n+pub mod locks;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -40,8 +38,6 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-#[path = \"../unsupported/rwlock.rs\"]\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n #[path = \"../unsupported/thread_local_dtor.rs\"]"}, {"sha": "f06c07c54093fc06a63de784d5d6d3d410ca3d8a", "filename": "library/std/src/sys/wasm/atomics/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -2,7 +2,7 @@ use crate::arch::wasm32;\n use crate::cmp;\n use crate::mem;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n pub struct Condvar {"}, {"sha": "1cca809764c8cab2b5966c5b7e27c14d80420116", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::condvar::Condvar;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::{Condvar, Mutex};\n \n pub struct RWLock {\n     lock: Mutex,"}, {"sha": "9f6700caf14bf9dbc7d7c40e9b981ec94dd931dc", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -50,22 +50,23 @@ pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(target_feature = \"atomics\")] {\n         #[path = \"atomics/condvar.rs\"]\n-        pub mod condvar;\n+        mod condvar;\n         #[path = \"atomics/mutex.rs\"]\n-        pub mod mutex;\n+        mod mutex;\n         #[path = \"atomics/rwlock.rs\"]\n-        pub mod rwlock;\n+        mod rwlock;\n+        pub mod locks {\n+            pub use super::condvar::*;\n+            pub use super::mutex::*;\n+            pub use super::rwlock::*;\n+        }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;\n         #[path = \"atomics/thread.rs\"]\n         pub mod thread;\n     } else {\n-        #[path = \"../unsupported/condvar.rs\"]\n-        pub mod condvar;\n-        #[path = \"../unsupported/mutex.rs\"]\n-        pub mod mutex;\n-        #[path = \"../unsupported/rwlock.rs\"]\n-        pub mod rwlock;\n+        #[path = \"../unsupported/locks/mod.rs\"]\n+        pub mod locks;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n     }"}, {"sha": "dfd8cfdceee75ab2efbf277e641617f5a49e31e8", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -1,6 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::sys::c;\n-use crate::sys::mutex::{self, Mutex};\n+use crate::sys::locks::{mutex, Mutex};\n use crate::sys::os;\n use crate::time::Duration;\n \n@@ -31,7 +31,7 @@ impl Condvar {\n         let r = c::SleepConditionVariableSRW(\n             self.inner.get(),\n             mutex::raw(mutex),\n-            super::dur2timeout(dur),\n+            crate::sys::windows::dur2timeout(dur),\n             0,\n         );\n         if r == 0 {", "previous_filename": "library/std/src/sys/windows/condvar.rs"}, {"sha": "5634f10633963234e1ed703b7bdb5a8af7ca418b", "filename": "library/std/src/sys/windows/locks/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -0,0 +1,6 @@\n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+pub use condvar::{Condvar, MovableCondvar};\n+pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n+pub use rwlock::{MovableRWLock, RWLock};"}, {"sha": "56f91ebe5828721777df75b3bf4372545a867748", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "previous_filename": "library/std/src/sys/windows/mutex.rs"}, {"sha": "b7a5b1e7accd0cb9b3188a58543ec0648d1649e1", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "previous_filename": "library/std/src/sys/windows/rwlock.rs"}, {"sha": "62814eaaa56679520e84a50411e3d5b5dd32608a", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733153f2e550d46fe6f794c969df91368580e0b8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=733153f2e550d46fe6f794c969df91368580e0b8", "patch": "@@ -16,21 +16,19 @@ pub mod alloc;\n pub mod args;\n pub mod c;\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fs;\n pub mod handle;\n pub mod io;\n+pub mod locks;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n-pub mod rwlock;\n pub mod thread;\n pub mod thread_local_dtor;\n pub mod thread_local_key;"}]}