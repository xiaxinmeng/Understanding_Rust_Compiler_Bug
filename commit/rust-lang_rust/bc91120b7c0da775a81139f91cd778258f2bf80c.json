{"sha": "bc91120b7c0da775a81139f91cd778258f2bf80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTExMjBiN2MwZGE3NzVhODExMzlmOTFjZDc3ODI1OGYyYmY4MGM=", "commit": {"author": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-02T16:21:40Z"}, "committer": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-02T16:26:02Z"}, "message": "Improve profiling output when duration filter is specified\n\nIn particular:\n\n  - Use strict inequality for comparisons, since that's what the filter\n    syntax supports.\n\n  - Convert to millis for comparisons, since that's the unit used both\n    for the filter and when printing.\n\nNow something like `RA_PROFILE='*>0'` will only print things that took\nat least 1ms (when rounded to millis).\n\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "487a4ff5f0ab228c44245b3ee6626b25d6f8d4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487a4ff5f0ab228c44245b3ee6626b25d6f8d4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc91120b7c0da775a81139f91cd778258f2bf80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc91120b7c0da775a81139f91cd778258f2bf80c", "html_url": "https://github.com/rust-lang/rust/commit/bc91120b7c0da775a81139f91cd778258f2bf80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc91120b7c0da775a81139f91cd778258f2bf80c/comments", "author": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4516c4c1447942a8f01b59a71dcf5abfa2c5e37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4516c4c1447942a8f01b59a71dcf5abfa2c5e37a", "html_url": "https://github.com/rust-lang/rust/commit/4516c4c1447942a8f01b59a71dcf5abfa2c5e37a"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "6dde304b1a594a8462bac9fe4645ef03f5d8513f", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc91120b7c0da775a81139f91cd778258f2bf80c/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc91120b7c0da775a81139f91cd778258f2bf80c/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=bc91120b7c0da775a81139f91cd778258f2bf80c", "patch": "@@ -197,7 +197,10 @@ impl Drop for Profiler {\n                     if level == 0 {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;\n-                        if duration >= longer_than {\n+                        // Convert to millis for comparison to avoid problems with rounding\n+                        // (otherwise we could print `0ms` despite user's `>0` filter when\n+                        // `duration` is just a few nanos).\n+                        if duration.as_millis() > longer_than.as_millis() {\n                             print(0, &stack.messages, &mut stdout.lock(), longer_than, None);\n                         }\n                         stack.messages.clear();\n@@ -226,7 +229,7 @@ fn print(\n             continue;\n         }\n         accounted_for += duration;\n-        if duration >= longer_than {\n+        if duration.as_millis() > longer_than.as_millis() {\n             writeln!(out, \"{}{:5}ms - {}\", indent, duration.as_millis(), msg)\n                 .expect(\"printing profiling info to stdout\");\n \n@@ -251,8 +254,9 @@ fn print(\n \n     if let Some(total) = total {\n         if let Some(unaccounted) = total.checked_sub(accounted_for) {\n-            if unaccounted >= longer_than && last > 0 {\n-                writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted.as_millis())\n+            let unaccounted_millis = unaccounted.as_millis();\n+            if unaccounted_millis > longer_than.as_millis() && unaccounted_millis > 0 && last > 0 {\n+                writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted_millis)\n                     .expect(\"printing profiling info to stdout\");\n             }\n         }\n@@ -356,4 +360,21 @@ mod tests {\n     fn profiling_function2() {\n         let _p = profile(\"profile2\");\n     }\n+\n+    #[test]\n+    fn test_longer_than() {\n+        let mut result = vec![];\n+        let msgs = vec![\n+            Message { level: 1, duration: Duration::from_nanos(3), message: \"bar\".to_owned() },\n+            Message { level: 1, duration: Duration::from_nanos(2), message: \"bar\".to_owned() },\n+            Message { level: 0, duration: Duration::from_millis(1), message: \"foo\".to_owned() },\n+        ];\n+        print(0, &msgs, &mut result, Duration::from_millis(0), Some(Duration::from_millis(1)));\n+        // The calls to `bar` are so short that they'll be rounded to 0ms and should get collapsed\n+        // when printing.\n+        assert_eq!(\n+            std::str::from_utf8(&result).unwrap(),\n+            \"    1ms - foo\\n        0ms - bar (2 calls)\\n\"\n+        );\n+    }\n }"}]}