{"sha": "fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjN2NiZTMxZjk2MzlhMWQzN2JhZjRhMzVkZjk3MTlhZDE1NWFhMmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-11T21:44:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-11T21:44:24Z"}, "message": "Switch rustboot from element-wise copying to take+drop+memcpy. Un-XFAIL size-and-align.rs for rustc.", "tree": {"sha": "f0c08ad3563d9f4527788193823b6d87feb4a7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0c08ad3563d9f4527788193823b6d87feb4a7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "html_url": "https://github.com/rust-lang/rust/commit/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef57287229218466f87ea99c20f9a16f889e1c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef57287229218466f87ea99c20f9a16f889e1c7", "html_url": "https://github.com/rust-lang/rust/commit/2ef57287229218466f87ea99c20f9a16f889e1c7"}], "stats": {"total": 179, "additions": 77, "deletions": 102}, "files": [{"sha": "b0e2e9c71895a992b70e295a8f7b390601203d16", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "patch": "@@ -475,7 +475,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         pred.rs \\\n                         preempt.rs \\\n                         rt-circular-buffer.rs \\\n-                        size-and-align.rs \\\n                         spawn-fn.rs \\\n                         spawn-module-qualified.rs \\\n                         spawn.rs \\"}, {"sha": "023e1e1df203bb81cb2188e4f406177ace00c59f", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "patch": "@@ -80,7 +80,7 @@ let general_code_alignment = 16;;\n let tydesc_field_first_param = 0;;\n let tydesc_field_size = 1;;\n let tydesc_field_align = 2;;\n-let tydesc_field_copy_glue = 3;;\n+let tydesc_field_take_glue = 3;;\n let tydesc_field_drop_glue = 4;;\n let tydesc_field_free_glue = 5;;\n let tydesc_field_sever_glue = 6;;"}, {"sha": "3419bb3469849eca02705807046933fd2af27a67", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "patch": "@@ -20,7 +20,7 @@ type glue =\n   | GLUE_yield\n   | GLUE_exit_main_task\n   | GLUE_exit_task\n-  | GLUE_copy of Ast.ty           (* One-level copy.                    *)\n+  | GLUE_take of Ast.ty           (* One-level refcounts++.             *)\n   | GLUE_drop of Ast.ty           (* De-initialize local memory.        *)\n   | GLUE_free of Ast.ty           (* Drop body + free() box ptr.        *)\n   | GLUE_sever of Ast.ty          (* Null all box state slots.          *)\n@@ -2776,7 +2776,7 @@ let glue_str (cx:ctxt) (g:glue) : string =\n     | GLUE_yield -> \"glue$yield\"\n     | GLUE_exit_main_task -> \"glue$exit_main_task\"\n     | GLUE_exit_task -> \"glue$exit_task\"\n-    | GLUE_copy ty -> \"glue$copy$\" ^ (ty_str cx ty)\n+    | GLUE_take ty -> \"glue$take$\" ^ (ty_str cx ty)\n     | GLUE_drop ty -> \"glue$drop$\" ^ (ty_str cx ty)\n     | GLUE_free ty -> \"glue$free$\" ^ (ty_str cx ty)\n     | GLUE_sever ty -> \"glue$sever$\" ^ (ty_str cx ty)"}, {"sha": "17dbe3ea263b3b594074a99def512494b674b1f6", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 74, "deletions": 98, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc7cbe31f9639a1d37baf4a35df9719ad155aa2c/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=fc7cbe31f9639a1d37baf4a35df9719ad155aa2c", "patch": "@@ -1355,7 +1355,7 @@ let trans_visitor\n                    Asm.WORD (word_ty_mach, Asm.IMM 0L);\n                    Asm.WORD (word_ty_mach, Asm.IMM sz);\n                    Asm.WORD (word_ty_mach, Asm.IMM align);\n-                   fix (get_copy_glue t);\n+                   fix (get_take_glue t);\n                    fix (get_drop_glue t);\n                    begin\n                      match ty_mem_ctrl cx t with\n@@ -2022,34 +2022,18 @@ let trans_visitor\n       get_typed_mem_glue g fty inner\n \n \n-  and get_copy_glue\n+  and get_take_glue\n       (ty:Ast.ty)\n       : fixup =\n     let ty = get_genericized_ty ty in\n     let arg_ty_params_alias = 0 in\n     let arg_src_alias = 1 in\n-    let arg_initflag = 2 in\n \n-    let g = GLUE_copy ty in\n-    let inner (out_ptr:Il.cell) (args:Il.cell) =\n-      let dst = deref out_ptr in\n+    let g = GLUE_take ty in\n+    let inner (_:Il.cell) (args:Il.cell) =\n       let ty_params = deref (get_element_ptr args arg_ty_params_alias) in\n       let src = deref (get_element_ptr args arg_src_alias) in\n-\n-      (* Translate copy code for the dst-initializing and\n-       * dst-non-initializing cases and branch accordingly. *)\n-      let initflag = get_element_ptr args arg_initflag in\n-      let jmps = trans_compare_simple Il.JNE (Il.Cell initflag) one in\n-\n-        trans_copy_ty_full true ty_params true dst ty src ty;\n-\n-        let skip_noninit_jmp = mark() in\n-          emit (Il.jmp Il.JMP Il.CodeNone);\n-          List.iter patch jmps;\n-\n-          trans_copy_ty_full true ty_params false dst ty src ty;\n-\n-          patch skip_noninit_jmp;\n+        trans_take_ty true ty_params src ty;\n     in\n     let ty_params_ptr = ty_params_covering ty in\n     let fty =\n@@ -2186,17 +2170,23 @@ let trans_visitor\n               get_tydesc_params ty_params_cell elt_td_ptr_cell\n             in\n \n-            let initflag = Il.Reg (force_to_reg one) in\n-\n+              (* Take all *)\n               copy_loop dst_buf src_buf (Il.Cell fill) (Il.Cell elt_sz)\n                 begin\n-                  fun dptr sptr ->\n+                  fun _ sptr ->\n                     trans_call_dynamic_glue\n                       elt_td_ptr_cell\n-                      Abi.tydesc_field_copy_glue\n-                      (Some (deref dptr))\n-                      [| ty_params_ptr; sptr; initflag |]\n+                      Abi.tydesc_field_take_glue\n                       None\n+                      [| ty_params_ptr; sptr |]\n+                      None;\n+                end;\n+\n+              (* Memcpy all *)\n+              copy_loop dst_buf src_buf (Il.Cell fill) one\n+                begin\n+                  fun dptr sptr ->\n+                    mov (deref dptr) (Il.Cell (deref sptr))\n                 end;\n \n               (* Set the new vec's fill to the original vec's fill *)\n@@ -3734,17 +3724,58 @@ let trans_visitor\n       end\n       tys\n \n-  and trans_copy_ty\n+  and trans_take_ty\n+      (force_inline:bool)\n       (ty_params:Il.cell)\n-      (initializing:bool)\n-      (dst:Il.cell) (dst_ty:Ast.ty)\n-      (src:Il.cell) (src_ty:Ast.ty)\n+      (v:Il.cell)\n+      (ty:Ast.ty)\n       : unit =\n-    trans_copy_ty_full\n-      false ty_params initializing dst dst_ty src src_ty\n+    let ty = strip_mutable_or_constrained_ty ty in\n+    match ty_mem_ctrl cx ty with\n+        MEM_rc_opaque | MEM_gc | MEM_rc_struct -> incr_refcount v\n+      | _ ->\n+          begin\n+            match ty with\n+                Ast.TY_fn _\n+              | Ast.TY_obj _ ->\n+                  let binding =\n+                    get_element_ptr v Abi.binding_field_bound_data\n+                  in\n+                  let null_jmp = null_check binding in\n+                    incr_refcount binding;\n+                    patch null_jmp\n \n-  and trans_copy_ty_full\n-      (force_inline:bool)\n+              | Ast.TY_param (i, _) ->\n+                  aliasing false v\n+                    begin\n+                      fun v ->\n+                        let td = get_ty_param ty_params i in\n+                        let ty_params_ptr = get_tydesc_params ty_params td in\n+                          trans_call_dynamic_glue\n+                            td Abi.tydesc_field_take_glue\n+                            None\n+                            [| ty_params_ptr; v; |]\n+                            None\n+                    end\n+\n+              | Ast.TY_rec _\n+              | Ast.TY_tag _\n+              | Ast.TY_tup _ ->\n+                  if force_inline\n+                  then\n+                    iter_ty_parts ty_params v ty\n+                      (trans_take_ty force_inline ty_params)\n+                  else\n+                    trans_call_static_glue\n+                      (code_fixup_to_ptr_operand (get_take_glue ty))\n+                      None\n+                      [| alias ty_params; alias v; |]\n+                      None\n+\n+              | _ -> ()\n+          end\n+\n+  and trans_copy_ty\n       (ty_params:Il.cell)\n       (initializing:bool)\n       (dst:Il.cell) (dst_ty:Ast.ty)\n@@ -3789,7 +3820,7 @@ let trans_visitor\n               | _ ->\n                   (* Heavyweight copy: duplicate 1 level of the referent. *)\n                   anno \"heavy\";\n-                  trans_copy_ty_heavy force_inline ty_params initializing\n+                  trans_copy_ty_heavy ty_params initializing\n                     dst dst_ty src src_ty\n         end\n \n@@ -3821,7 +3852,6 @@ let trans_visitor\n    *)\n \n   and trans_copy_ty_heavy\n-      (force_inline:bool)\n       (ty_params:Il.cell)\n       (initializing:bool)\n       (dst:Il.cell) (dst_ty:Ast.ty)\n@@ -3863,68 +3893,14 @@ let trans_visitor\n                       (ty_sz cx ty)));\n               mov dst (Il.Cell src)\n \n-          | Ast.TY_param (i, _) ->\n-              iflog\n-                (fun _ -> annotate\n-                   (Printf.sprintf \"copy_ty: parametric copy %#d\" i));\n-              let initflag = Il.Reg (force_to_reg one) in\n-              aliasing false src\n-                begin\n-                  fun src ->\n-                    let td = get_ty_param ty_params i in\n-                    let ty_params_ptr = get_tydesc_params ty_params td in\n-                      trans_call_dynamic_glue\n-                        td Abi.tydesc_field_copy_glue\n-                        (Some dst)\n-                        [| ty_params_ptr; src; initflag |]\n-                        None\n-                end\n-\n-          | Ast.TY_fn _\n-          | Ast.TY_obj _ ->\n-              begin\n-                let src_item =\n-                  get_element_ptr src Abi.binding_field_dispatch\n-                in\n-                let dst_item =\n-                  get_element_ptr dst Abi.binding_field_dispatch\n-                in\n-                let src_binding =\n-                  get_element_ptr src Abi.binding_field_bound_data\n-                in\n-                let dst_binding =\n-                  get_element_ptr dst Abi.binding_field_bound_data\n-                in\n-                  mov dst_item (Il.Cell src_item);\n-                  mov dst_binding zero;\n-                  let null_jmp = null_check src_binding in\n-                    (* Copy if we have a src binding. *)\n-                    (* FIXME (issue #58): this is completely wrong, call\n-                     * through to the binding's self-copy fptr. For now\n-                     * this only works by accident.\n-                     *)\n-                    trans_copy_ty ty_params true\n-                      dst_binding (Ast.TY_box Ast.TY_int)\n-                      src_binding (Ast.TY_box Ast.TY_int);\n-                    patch null_jmp\n-              end\n-\n           | _ ->\n-              if force_inline || should_inline_structure_helpers ty\n-              then\n-                iter_ty_parts_full ty_params dst src ty\n-                  (fun dst src ty ->\n-                     trans_copy_ty ty_params initializing\n-                       dst ty src ty)\n-              else\n-                let initflag = Il.Reg (force_to_reg one) in\n-                  trans_call_static_glue\n-                    (code_fixup_to_ptr_operand (get_copy_glue ty))\n-                    (Some dst)\n-                    [| alias ty_params;\n-                       alias src;\n-                       initflag |]\n-                    None\n+              trans_take_ty false ty_params src ty;\n+              if not initializing\n+              then drop_ty ty_params dst ty;\n+              let sz = ty_sz_with_ty_params ty_params ty in\n+                copy_loop dst src sz (imm 1L)\n+                  (fun dptr sptr ->\n+                     mov (deref dptr) (Il.Cell (deref sptr)))\n \n \n   and trans_copy"}]}