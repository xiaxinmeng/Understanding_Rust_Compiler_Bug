{"sha": "d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "node_id": "C_kwDOAAsO6NoAKGQ2Yjc1MGU0OGQ1ZWMwNGIyOWUzZjg4OTdjMjg4YWMwYjBmYjUyZmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T13:04:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T13:04:19Z"}, "message": "Auto merge of #2467 - RalfJung:home, r=RalfJung\n\nadd support for env::home_dir\n\nand a bit of cleanup", "tree": {"sha": "3eb6c4babcdc4a30a6022ac182755916953a824a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb6c4babcdc4a30a6022ac182755916953a824a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "html_url": "https://github.com/rust-lang/rust/commit/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42087647d6a44808a18d5fac2c750beb4c8a09c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/42087647d6a44808a18d5fac2c750beb4c8a09c8", "html_url": "https://github.com/rust-lang/rust/commit/42087647d6a44808a18d5fac2c750beb4c8a09c8"}, {"sha": "889c073aa66049d28d7bb243cd9d774cfa96f4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/889c073aa66049d28d7bb243cd9d774cfa96f4ae", "html_url": "https://github.com/rust-lang/rust/commit/889c073aa66049d28d7bb243cd9d774cfa96f4ae"}], "stats": {"total": 137, "additions": 101, "deletions": 36}, "files": [{"sha": "8b1c18a499f6ca2e8446bd37efb54c1fa705300d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -22,7 +22,8 @@\n     clippy::useless_format,\n     clippy::derive_partial_eq_without_eq,\n     clippy::derive_hash_xor_eq,\n-    clippy::too_many_arguments\n+    clippy::too_many_arguments,\n+    clippy::type_complexity\n )]\n #![warn(\n     rust_2018_idioms,"}, {"sha": "7dde2d7d2c19363b3d147f789a9c9b9bc1078f95", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -228,16 +228,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n \n-                let sysconfs = &[\n-                    (\"_SC_PAGESIZE\", Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_CONF\", Scalar::from_int(NUM_CPUS, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_ONLN\", Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                // FIXME: Which of these are POSIX, and which are GNU/Linux?\n+                // At least the names seem to all also exist on macOS.\n+                let sysconfs: &[(&str, fn(&MiriEvalContext<'_, '_>) -> Scalar<Provenance>)] = &[\n+                    (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                    // 512 seems to be a reasonable default. The value is not critical, in\n+                    // the sense that getpwuid_r takes and checks the buffer length.\n+                    (\"_SC_GETPW_R_SIZE_MAX\", |this| Scalar::from_int(512, this.pointer_size()))\n                 ];\n                 let mut result = None;\n                 for &(sysconf_name, value) in sysconfs {\n                     let sysconf_name = this.eval_libc_i32(sysconf_name)?;\n                     if sysconf_name == name {\n-                        result = Some(value);\n+                        result = Some(value(this));\n                         break;\n                     }\n                 }\n@@ -474,6 +479,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ret = if complete { 0 } else { this.eval_libc_i32(\"ERANGE\")? };\n                 this.write_int(ret, dest)?;\n             }\n+            \"getpid\" => {\n+                let [] = this.check_shim(abi, Abi::C { unwind: false}, link_name, args)?;\n+                let result = this.getpid()?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n@@ -500,9 +510,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            // Querying system information\n-            \"pthread_attr_getstack\" => {\n-                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here. Hence we can mostly ignore the input `attr_place`.\n+            \"pthread_attr_getstack\"\n+            if this.frame_in_std() => {\n+                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n+                // Hence we can mostly ignore the input `attr_place`.\n                 let [attr_place, addr_place, size_place] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let _attr_place = this.deref_operand(attr_place)?;\n@@ -535,10 +546,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            \"getpid\" => {\n-                let [] = this.check_shim(abi, Abi::C { unwind: false}, link_name, args)?;\n-                let result = this.getpid()?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            \"getuid\"\n+            if this.frame_in_std() => {\n+                let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                // FOr now, just pretend we always have this fixed UID.\n+                this.write_int(super::UID, dest)?;\n             }\n \n             // Platform-specific shims"}, {"sha": "3dccdd5e74f17610228f41e0a7591688d9551185", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -1091,31 +1091,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             ],\n             &statxbuf,\n         )?;\n-        this.write_int_fields(\n+        #[rustfmt::skip]\n+        this.write_int_fields_named(\n             &[\n-                access_sec.into(),  // stx_atime.tv_sec\n-                access_nsec.into(), // stx_atime.tv_nsec\n+                (\"tv_sec\", access_sec.into()),\n+                (\"tv_nsec\", access_nsec.into()),\n             ],\n             &this.mplace_field_named(&statxbuf, \"stx_atime\")?,\n         )?;\n-        this.write_int_fields(\n+        #[rustfmt::skip]\n+        this.write_int_fields_named(\n             &[\n-                created_sec.into(),  // stx_btime.tv_sec\n-                created_nsec.into(), // stx_btime.tv_nsec\n+                (\"tv_sec\", created_sec.into()),\n+                (\"tv_nsec\", created_nsec.into()),\n             ],\n             &this.mplace_field_named(&statxbuf, \"stx_btime\")?,\n         )?;\n-        this.write_int_fields(\n+        #[rustfmt::skip]\n+        this.write_int_fields_named(\n             &[\n-                0.into(), // stx_ctime.tv_sec\n-                0.into(), // stx_ctime.tv_nsec\n+                (\"tv_sec\", 0.into()),\n+                (\"tv_nsec\", 0.into()),\n             ],\n             &this.mplace_field_named(&statxbuf, \"stx_ctime\")?,\n         )?;\n-        this.write_int_fields(\n+        #[rustfmt::skip]\n+        this.write_int_fields_named(\n             &[\n-                modified_sec.into(),  // stx_mtime.tv_sec\n-                modified_nsec.into(), // stx_mtime.tv_nsec\n+                (\"tv_sec\", modified_sec.into()),\n+                (\"tv_nsec\", modified_nsec.into()),\n             ],\n             &this.mplace_field_named(&statxbuf, \"stx_mtime\")?,\n         )?;\n@@ -1302,12 +1306,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let file_type = this.file_type_to_d_type(dir_entry.file_type())?;\n \n-                this.write_int_fields(\n+                this.write_int_fields_named(\n                     &[\n-                        ino.into(),       // d_ino\n-                        0,                // d_off\n-                        size.into(),      // d_reclen\n-                        file_type.into(), // d_type\n+                        (\"d_ino\", ino.into()),\n+                        (\"d_off\", 0),\n+                        (\"d_reclen\", size.into()),\n+                        (\"d_type\", file_type.into()),\n                     ],\n                     &MPlaceTy::from_aligned_ptr(entry, dirent64_layout),\n                 )?;\n@@ -1398,13 +1402,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let file_type = this.file_type_to_d_type(dir_entry.file_type())?;\n \n-                this.write_int_fields(\n+                this.write_int_fields_named(\n                     &[\n-                        ino.into(),           // d_ino\n-                        0,                    // d_seekoff\n-                        0,                    // d_reclen\n-                        file_name_len.into(), // d_namlen\n-                        file_type.into(),     // d_type\n+                        (\"d_ino\", ino.into()),\n+                        (\"d_seekoff\", 0),\n+                        (\"d_reclen\", 0),\n+                        (\"d_namlen\", file_name_len.into()),\n+                        (\"d_type\", file_type.into()),\n                     ],\n                     &entry_place,\n                 )?;"}, {"sha": "61016c424954f4a14e729276f3c8c8f986c2aa79", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -155,6 +155,41 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            \"getpwuid_r\" if this.frame_in_std() => {\n+                let [uid, pwd, buf, buflen, result] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`getpwuid_r`\")?;\n+\n+                let uid = this.read_scalar(uid)?.to_u32()?;\n+                let pwd = this.deref_operand(pwd)?;\n+                let buf = this.read_pointer(buf)?;\n+                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n+                let result = this.deref_operand(result)?;\n+\n+                // Must be for \"us\".\n+                if uid != crate::shims::unix::UID {\n+                    throw_unsup_format!(\"`getpwuid_r` on other users is not supported\");\n+                }\n+\n+                // Reset all fields to `uninit` to make sure nobody reads them.\n+                this.write_uninit(&pwd.into())?;\n+\n+                // We only set the home_dir field.\n+                #[allow(deprecated)]\n+                let home_dir = std::env::home_dir().unwrap();\n+                let (written, _) = this.write_path_to_c_str(&home_dir, buf, buflen)?;\n+                let pw_dir = this.mplace_field_named(&pwd, \"pw_dir\")?;\n+                this.write_pointer(buf, &pw_dir.into())?;\n+\n+                if written {\n+                    this.write_pointer(pwd.ptr, &result.into())?;\n+                    this.write_null(dest)?;\n+                } else {\n+                    this.write_null(&result.into())?;\n+                    this.write_scalar(this.eval_libc(\"ERANGE\")?, dest)?;\n+                }\n+            }\n+\n             _ => return Ok(EmulateByNameResult::NotSupported),\n         };\n "}, {"sha": "35380fc06d79b4ceba5f30c336dbdddbc571de0a", "filename": "src/shims/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmod.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -10,3 +10,6 @@ mod linux;\n mod macos;\n \n pub use fs::{DirHandler, FileHandler};\n+\n+// Make up some constants.\n+const UID: u32 = 1000;"}, {"sha": "6520609b76f4ead62dafafbed51e0713019cbc97", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -110,6 +110,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"GetSystemInfo\" => {\n+                // Also called from `page_size` crate.\n                 let [system_info] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let system_info = this.deref_operand(system_info)?;"}, {"sha": "0fb69aad007707c271c35ca9ca2c2c81a7021695", "filename": "tests/pass/home.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/tests%2Fpass%2Fhome.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff/tests%2Fpass%2Fhome.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fhome.rs?ref=d6b750e48d5ec04b29e3f8897c288ac0b0fb52ff", "patch": "@@ -0,0 +1,9 @@\n+//@only-target-linux: home_dir is only supported on Linux\n+//@compile-flags: -Zmiri-disable-isolation\n+use std::env;\n+\n+fn main() {\n+    env::remove_var(\"HOME\"); // make sure we enter the interesting codepath\n+    #[allow(deprecated)]\n+    env::home_dir().unwrap();\n+}"}]}