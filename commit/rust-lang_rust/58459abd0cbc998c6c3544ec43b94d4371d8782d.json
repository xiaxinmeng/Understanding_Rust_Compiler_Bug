{"sha": "58459abd0cbc998c6c3544ec43b94d4371d8782d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDU5YWJkMGNiYzk5OGM2YzM1NDRlYzQzYjk0ZDQzNzFkODc4MmQ=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-07-23T08:33:47Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-07-23T08:44:40Z"}, "message": "Allow pass by reference if we return a reference\n\nCurrently this code will trigger `trivally_copy_pass_by_ref`:\n\n```\nstruct OuterStruct {\n    field: [u8; 8],\n}\n\nfn return_inner(outer: &OuterStruct) -> &[u8] {\n    &outer.field\n}\n```\n\nIf we change the `outer` to be pass-by-value it will not live long\nenough for us to return the reference. The above example is trivial but\nI've hit this in real code that either returns a reference to either the\nargument or in to `self`.\n\nThis suppresses the `trivally_copy_pass_by_ref` lint if we return a\nreference and it has the same lifetime as the argument. This will likely\nmiss complex cases with multiple lifetimes bounded by each other but it\nshould cover the majority of cases with little effort.", "tree": {"sha": "764cfd03fab777bb3d007cbbd37b5aad0d579fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764cfd03fab777bb3d007cbbd37b5aad0d579fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58459abd0cbc998c6c3544ec43b94d4371d8782d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58459abd0cbc998c6c3544ec43b94d4371d8782d", "html_url": "https://github.com/rust-lang/rust/commit/58459abd0cbc998c6c3544ec43b94d4371d8782d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58459abd0cbc998c6c3544ec43b94d4371d8782d/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f656173723dce4efc3fc90ff5763a2186ec9089", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f656173723dce4efc3fc90ff5763a2186ec9089", "html_url": "https://github.com/rust-lang/rust/commit/1f656173723dce4efc3fc90ff5763a2186ec9089"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "e0eb464596b50cb81bc3cde313567ba140846d21", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58459abd0cbc998c6c3544ec43b94d4371d8782d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58459abd0cbc998c6c3544ec43b94d4371d8782d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=58459abd0cbc998c6c3544ec43b94d4371d8782d", "patch": "@@ -115,14 +115,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n+        // Use lifetimes to determine if we're returning a reference to the argument. In that case\n+        // we can't switch to pass-by-value as the argument will not live long enough.\n+        let output_lt = if let TypeVariants::TyRef(output_lt, _, _) = fn_sig.output().sty {\n+            Some(output_lt)\n+        } else {\n+            None\n+        };\n+\n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;\n             }\n \n             if_chain! {\n-                if let TypeVariants::TyRef(_, ty, Mutability::MutImmutable) = ty.sty;\n+                if let TypeVariants::TyRef(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n+                if Some(input_lt) != output_lt;\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n                 if size <= self.limit;"}, {"sha": "c6773add244305186f2b8657174633e260464ffe", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58459abd0cbc998c6c3544ec43b94d4371d8782d/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58459abd0cbc998c6c3544ec43b94d4371d8782d/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=58459abd0cbc998c6c3544ec43b94d4371d8782d", "patch": "@@ -11,6 +11,15 @@ type Baz = u32;\n fn good(a: &mut u32, b: u32, c: &Bar) {\n }\n \n+fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {\n+    &foo.0\n+}\n+\n+#[allow(needless_lifetimes)]\n+fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n+    &foo.0\n+}\n+\n fn bad(x: &u32, y: &Foo, z: &Baz) {\n }\n \n@@ -46,6 +55,8 @@ fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);\n     good(&mut a, b, &c);\n+    good_return_implicit_lt_ref(&y);\n+    good_return_explicit_lt_ref(&y);\n     bad(&x, &y, &z);\n     foo.good(&mut a, b, &c);\n     foo.good2();"}, {"sha": "db25cc5a02011b2a278ef7e580948c88a9dad3ab", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/58459abd0cbc998c6c3544ec43b94d4371d8782d/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58459abd0cbc998c6c3544ec43b94d4371d8782d/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=58459abd0cbc998c6c3544ec43b94d4371d8782d", "patch": "@@ -1,81 +1,81 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:11\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:20\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:29\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:12\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:22\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:31\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:40\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:16\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:25\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:34\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:16\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:25\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:34\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: aborting due to 13 previous errors"}]}