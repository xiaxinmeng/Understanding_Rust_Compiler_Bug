{"sha": "d77b0221f82059fcef9e4952421754c1b900185a", "node_id": "C_kwDOAAsO6NoAKGQ3N2IwMjIxZjgyMDU5ZmNlZjllNDk1MjQyMTc1NGMxYjkwMDE4NWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-16T16:51:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T16:51:26Z"}, "message": "Rollup merge of #108115 - eggyal:unmet_trait_alias_bound, r=compiler-errors\n\nDo not ICE on unmet trait alias bounds\n\nRework of #108093 following feedback on that PR.\n\nFixes #108072\n\nr? `@compiler-errors`", "tree": {"sha": "d7ddd523d13106a1279e2831e742eec4bdd54430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ddd523d13106a1279e2831e742eec4bdd54430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77b0221f82059fcef9e4952421754c1b900185a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7l8OCRBK7hj4Ov3rIwAA9t8IAKs4qUzAPV5gzuZpdyN8EIv1\nL5xuBM//1THLAnesKus/XEuiwcLcoLT76H2ZFfOidyDoThStFeMi8tVk1w1R47I4\nvcICfynU+GDP0iMBiWl0Mo1IcFsyD3ldx2LdPi3P3MDpO9sWw7p+MSUgNjMz39y1\n7+e79kPLYgCgk5oHKuerzHKb9NAz61A+iQqUKT66fRwFHFadGdXrqoebgIWwuDPA\nCuL1PS4ubskqt2nBC9m+iMGJPzKxuK513XIjSk1K3a03ozu4z9v4NJnu9BjFs52g\nVSiR+/MwRYA4n3mff2+M7lkniOg+KtQ90oo0+Mjvspxs74QfGgX+lpTGt1q4ono=\n=pwX7\n-----END PGP SIGNATURE-----\n", "payload": "tree d7ddd523d13106a1279e2831e742eec4bdd54430\nparent 09a2267e1d8f4ee48941337bba9f8a6cb6756ac8\nparent 540bd986aac6f50363848f37ab1bb9e6eb408170\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676566286 +0100\ncommitter GitHub <noreply@github.com> 1676566286 +0100\n\nRollup merge of #108115 - eggyal:unmet_trait_alias_bound, r=compiler-errors\n\nDo not ICE on unmet trait alias bounds\n\nRework of #108093 following feedback on that PR.\n\nFixes #108072\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77b0221f82059fcef9e4952421754c1b900185a", "html_url": "https://github.com/rust-lang/rust/commit/d77b0221f82059fcef9e4952421754c1b900185a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77b0221f82059fcef9e4952421754c1b900185a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09a2267e1d8f4ee48941337bba9f8a6cb6756ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a2267e1d8f4ee48941337bba9f8a6cb6756ac8", "html_url": "https://github.com/rust-lang/rust/commit/09a2267e1d8f4ee48941337bba9f8a6cb6756ac8"}, {"sha": "540bd986aac6f50363848f37ab1bb9e6eb408170", "url": "https://api.github.com/repos/rust-lang/rust/commits/540bd986aac6f50363848f37ab1bb9e6eb408170", "html_url": "https://github.com/rust-lang/rust/commit/540bd986aac6f50363848f37ab1bb9e6eb408170"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "d13d8ff8270a9caade57d38768ffada85074ea0e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d77b0221f82059fcef9e4952421754c1b900185a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77b0221f82059fcef9e4952421754c1b900185a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=d77b0221f82059fcef9e4952421754c1b900185a", "patch": "@@ -477,12 +477,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is the \"trait\" (meaning, the predicate \"proved\" by this `impl`) which provides the `Self` type we care about.\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n-        let impl_trait_self_ref: Option<ty::TraitRef<'tcx>> =\n-            self.tcx.impl_trait_ref(obligation.impl_def_id).map(|impl_def| impl_def.skip_binder());\n-\n-        let Some(impl_trait_self_ref) = impl_trait_self_ref else {\n-            // It is possible that this is absent. In this case, we make no progress.\n-            return Err(expr);\n+        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_def_id) {\n+            self.tcx.mk_trait_ref(\n+                obligation.impl_def_id,\n+                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_def_id),\n+            )\n+        } else {\n+            self.tcx\n+                .impl_trait_ref(obligation.impl_def_id)\n+                .map(|impl_def| impl_def.skip_binder())\n+                // It is possible that this is absent. In this case, we make no progress.\n+                .ok_or(expr)?\n         };\n \n         // We only really care about the `Self` type itself, which we extract from the ref."}, {"sha": "d254c0ae3ef92ce070e54de23857ad294a6fabf0", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d77b0221f82059fcef9e4952421754c1b900185a/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77b0221f82059fcef9e4952421754c1b900185a/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs?ref=d77b0221f82059fcef9e4952421754c1b900185a", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #108072: do not ICE upon unmet trait alias constraint\n+\n+#![feature(trait_alias)]\n+\n+trait IteratorAlias = Iterator;\n+\n+fn f(_: impl IteratorAlias) {}\n+\n+fn main() {\n+    f(()) //~ `()` is not an iterator\n+}"}, {"sha": "39f974f962c2ba893e34408102e467402af6361f", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d77b0221f82059fcef9e4952421754c1b900185a/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d77b0221f82059fcef9e4952421754c1b900185a/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr?ref=d77b0221f82059fcef9e4952421754c1b900185a", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:10:7\n+   |\n+LL |     f(())\n+   |     - ^^ `()` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+   = note: required for `()` to implement `IteratorAlias`\n+note: required by a bound in `f`\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:7:14\n+   |\n+LL | fn f(_: impl IteratorAlias) {}\n+   |              ^^^^^^^^^^^^^ required by this bound in `f`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}