{"sha": "2ed42bfbd161044b381f0ca2aedcfd0dd29a5263", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDQyYmZiZDE2MTA0NGIzODFmMGNhMmFlZGNmZDBkZDI5YTUyNjM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-28T00:58:14Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T04:53:02Z"}, "message": "libtime: remove unnecessary `to_string()` calls", "tree": {"sha": "e2b25be4d70ae281bc76599e6159b58b11623314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b25be4d70ae281bc76599e6159b58b11623314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263", "html_url": "https://github.com/rust-lang/rust/commit/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263/comments", "author": null, "committer": null, "parents": [{"sha": "66f52f4c9b7b3f43f08a163d886cd10d34bc356b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f52f4c9b7b3f43f08a163d886cd10d34bc356b", "html_url": "https://github.com/rust-lang/rust/commit/66f52f4c9b7b3f43f08a163d886cd10d34bc356b"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "a0749407b26fffcd8ec8218b34f5aad0c2206089", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed42bfbd161044b381f0ca2aedcfd0dd29a5263/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=2ed42bfbd161044b381f0ca2aedcfd0dd29a5263", "patch": "@@ -1564,8 +1564,8 @@ mod tests {\n \n         debug!(\"test_ctime: {} {}\", utc.asctime(), local.asctime());\n \n-        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\".to_string());\n-        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n+        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\");\n+        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n     }\n \n     fn test_ctime() {\n@@ -1577,8 +1577,8 @@ mod tests {\n \n         debug!(\"test_ctime: {} {}\", utc.ctime(), local.ctime());\n \n-        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n-        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n+        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n+        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n     }\n \n     fn test_strftime() {\n@@ -1588,56 +1588,56 @@ mod tests {\n         let utc = at_utc(time);\n         let local = at(time);\n \n-        assert_eq!(local.strftime(\"\").unwrap().to_string(), \"\".to_string());\n-        assert_eq!(local.strftime(\"%A\").unwrap().to_string(), \"Friday\".to_string());\n-        assert_eq!(local.strftime(\"%a\").unwrap().to_string(), \"Fri\".to_string());\n-        assert_eq!(local.strftime(\"%B\").unwrap().to_string(), \"February\".to_string());\n-        assert_eq!(local.strftime(\"%b\").unwrap().to_string(), \"Feb\".to_string());\n-        assert_eq!(local.strftime(\"%C\").unwrap().to_string(), \"20\".to_string());\n+        assert_eq!(local.strftime(\"\").unwrap().to_string(), \"\");\n+        assert_eq!(local.strftime(\"%A\").unwrap().to_string(), \"Friday\");\n+        assert_eq!(local.strftime(\"%a\").unwrap().to_string(), \"Fri\");\n+        assert_eq!(local.strftime(\"%B\").unwrap().to_string(), \"February\");\n+        assert_eq!(local.strftime(\"%b\").unwrap().to_string(), \"Feb\");\n+        assert_eq!(local.strftime(\"%C\").unwrap().to_string(), \"20\");\n         assert_eq!(local.strftime(\"%c\").unwrap().to_string(),\n-                   \"Fri Feb 13 15:31:30 2009\".to_string());\n-        assert_eq!(local.strftime(\"%D\").unwrap().to_string(), \"02/13/09\".to_string());\n-        assert_eq!(local.strftime(\"%d\").unwrap().to_string(), \"13\".to_string());\n-        assert_eq!(local.strftime(\"%e\").unwrap().to_string(), \"13\".to_string());\n-        assert_eq!(local.strftime(\"%F\").unwrap().to_string(), \"2009-02-13\".to_string());\n-        assert_eq!(local.strftime(\"%f\").unwrap().to_string(), \"000054321\".to_string());\n-        assert_eq!(local.strftime(\"%G\").unwrap().to_string(), \"2009\".to_string());\n-        assert_eq!(local.strftime(\"%g\").unwrap().to_string(), \"09\".to_string());\n-        assert_eq!(local.strftime(\"%H\").unwrap().to_string(), \"15\".to_string());\n-        assert_eq!(local.strftime(\"%h\").unwrap().to_string(), \"Feb\".to_string());\n-        assert_eq!(local.strftime(\"%I\").unwrap().to_string(), \"03\".to_string());\n-        assert_eq!(local.strftime(\"%j\").unwrap().to_string(), \"044\".to_string());\n-        assert_eq!(local.strftime(\"%k\").unwrap().to_string(), \"15\".to_string());\n-        assert_eq!(local.strftime(\"%l\").unwrap().to_string(), \" 3\".to_string());\n-        assert_eq!(local.strftime(\"%M\").unwrap().to_string(), \"31\".to_string());\n-        assert_eq!(local.strftime(\"%m\").unwrap().to_string(), \"02\".to_string());\n-        assert_eq!(local.strftime(\"%n\").unwrap().to_string(), \"\\n\".to_string());\n-        assert_eq!(local.strftime(\"%P\").unwrap().to_string(), \"pm\".to_string());\n-        assert_eq!(local.strftime(\"%p\").unwrap().to_string(), \"PM\".to_string());\n-        assert_eq!(local.strftime(\"%R\").unwrap().to_string(), \"15:31\".to_string());\n-        assert_eq!(local.strftime(\"%r\").unwrap().to_string(), \"03:31:30 PM\".to_string());\n-        assert_eq!(local.strftime(\"%S\").unwrap().to_string(), \"30\".to_string());\n-        assert_eq!(local.strftime(\"%s\").unwrap().to_string(), \"1234567890\".to_string());\n-        assert_eq!(local.strftime(\"%T\").unwrap().to_string(), \"15:31:30\".to_string());\n-        assert_eq!(local.strftime(\"%t\").unwrap().to_string(), \"\\t\".to_string());\n-        assert_eq!(local.strftime(\"%U\").unwrap().to_string(), \"06\".to_string());\n-        assert_eq!(local.strftime(\"%u\").unwrap().to_string(), \"5\".to_string());\n-        assert_eq!(local.strftime(\"%V\").unwrap().to_string(), \"07\".to_string());\n-        assert_eq!(local.strftime(\"%v\").unwrap().to_string(), \"13-Feb-2009\".to_string());\n-        assert_eq!(local.strftime(\"%W\").unwrap().to_string(), \"06\".to_string());\n-        assert_eq!(local.strftime(\"%w\").unwrap().to_string(), \"5\".to_string());\n+                   \"Fri Feb 13 15:31:30 2009\");\n+        assert_eq!(local.strftime(\"%D\").unwrap().to_string(), \"02/13/09\");\n+        assert_eq!(local.strftime(\"%d\").unwrap().to_string(), \"13\");\n+        assert_eq!(local.strftime(\"%e\").unwrap().to_string(), \"13\");\n+        assert_eq!(local.strftime(\"%F\").unwrap().to_string(), \"2009-02-13\");\n+        assert_eq!(local.strftime(\"%f\").unwrap().to_string(), \"000054321\");\n+        assert_eq!(local.strftime(\"%G\").unwrap().to_string(), \"2009\");\n+        assert_eq!(local.strftime(\"%g\").unwrap().to_string(), \"09\");\n+        assert_eq!(local.strftime(\"%H\").unwrap().to_string(), \"15\");\n+        assert_eq!(local.strftime(\"%h\").unwrap().to_string(), \"Feb\");\n+        assert_eq!(local.strftime(\"%I\").unwrap().to_string(), \"03\");\n+        assert_eq!(local.strftime(\"%j\").unwrap().to_string(), \"044\");\n+        assert_eq!(local.strftime(\"%k\").unwrap().to_string(), \"15\");\n+        assert_eq!(local.strftime(\"%l\").unwrap().to_string(), \" 3\");\n+        assert_eq!(local.strftime(\"%M\").unwrap().to_string(), \"31\");\n+        assert_eq!(local.strftime(\"%m\").unwrap().to_string(), \"02\");\n+        assert_eq!(local.strftime(\"%n\").unwrap().to_string(), \"\\n\");\n+        assert_eq!(local.strftime(\"%P\").unwrap().to_string(), \"pm\");\n+        assert_eq!(local.strftime(\"%p\").unwrap().to_string(), \"PM\");\n+        assert_eq!(local.strftime(\"%R\").unwrap().to_string(), \"15:31\");\n+        assert_eq!(local.strftime(\"%r\").unwrap().to_string(), \"03:31:30 PM\");\n+        assert_eq!(local.strftime(\"%S\").unwrap().to_string(), \"30\");\n+        assert_eq!(local.strftime(\"%s\").unwrap().to_string(), \"1234567890\");\n+        assert_eq!(local.strftime(\"%T\").unwrap().to_string(), \"15:31:30\");\n+        assert_eq!(local.strftime(\"%t\").unwrap().to_string(), \"\\t\");\n+        assert_eq!(local.strftime(\"%U\").unwrap().to_string(), \"06\");\n+        assert_eq!(local.strftime(\"%u\").unwrap().to_string(), \"5\");\n+        assert_eq!(local.strftime(\"%V\").unwrap().to_string(), \"07\");\n+        assert_eq!(local.strftime(\"%v\").unwrap().to_string(), \"13-Feb-2009\");\n+        assert_eq!(local.strftime(\"%W\").unwrap().to_string(), \"06\");\n+        assert_eq!(local.strftime(\"%w\").unwrap().to_string(), \"5\");\n         // FIXME (#2350): support locale\n-        assert_eq!(local.strftime(\"%X\").unwrap().to_string(), \"15:31:30\".to_string());\n+        assert_eq!(local.strftime(\"%X\").unwrap().to_string(), \"15:31:30\");\n         // FIXME (#2350): support locale\n-        assert_eq!(local.strftime(\"%x\").unwrap().to_string(), \"02/13/09\".to_string());\n-        assert_eq!(local.strftime(\"%Y\").unwrap().to_string(), \"2009\".to_string());\n-        assert_eq!(local.strftime(\"%y\").unwrap().to_string(), \"09\".to_string());\n+        assert_eq!(local.strftime(\"%x\").unwrap().to_string(), \"02/13/09\");\n+        assert_eq!(local.strftime(\"%Y\").unwrap().to_string(), \"2009\");\n+        assert_eq!(local.strftime(\"%y\").unwrap().to_string(), \"09\");\n         // FIXME (#2350): support locale\n-        assert_eq!(local.strftime(\"%Z\").unwrap().to_string(), \"\".to_string());\n-        assert_eq!(local.strftime(\"%z\").unwrap().to_string(), \"-0800\".to_string());\n+        assert_eq!(local.strftime(\"%Z\").unwrap().to_string(), \"\");\n+        assert_eq!(local.strftime(\"%z\").unwrap().to_string(), \"-0800\");\n         assert_eq!(local.strftime(\"%+\").unwrap().to_string(),\n-                   \"2009-02-13T15:31:30-08:00\".to_string());\n-        assert_eq!(local.strftime(\"%%\").unwrap().to_string(), \"%\".to_string());\n+                   \"2009-02-13T15:31:30-08:00\");\n+        assert_eq!(local.strftime(\"%%\").unwrap().to_string(), \"%\");\n \n          let invalid_specifiers = [\"%E\", \"%J\", \"%K\", \"%L\", \"%N\", \"%O\", \"%o\", \"%Q\", \"%q\"];\n         for &sp in invalid_specifiers.iter() {\n@@ -1646,16 +1646,16 @@ mod tests {\n         assert_eq!(local.strftime(\"%\").unwrap_err(), MissingFormatConverter);\n         assert_eq!(local.strftime(\"%A %\").unwrap_err(), MissingFormatConverter);\n \n-        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n-        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n-        assert_eq!(local.rfc822z().to_string(), \"Fri, 13 Feb 2009 15:31:30 -0800\".to_string());\n-        assert_eq!(local.rfc3339().to_string(), \"2009-02-13T15:31:30-08:00\".to_string());\n+        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n+        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n+        assert_eq!(local.rfc822z().to_string(), \"Fri, 13 Feb 2009 15:31:30 -0800\");\n+        assert_eq!(local.rfc3339().to_string(), \"2009-02-13T15:31:30-08:00\");\n \n-        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\".to_string());\n-        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());\n-        assert_eq!(utc.rfc822().to_string(), \"Fri, 13 Feb 2009 23:31:30 GMT\".to_string());\n-        assert_eq!(utc.rfc822z().to_string(), \"Fri, 13 Feb 2009 23:31:30 -0000\".to_string());\n-        assert_eq!(utc.rfc3339().to_string(), \"2009-02-13T23:31:30Z\".to_string());\n+        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\");\n+        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\");\n+        assert_eq!(utc.rfc822().to_string(), \"Fri, 13 Feb 2009 23:31:30 GMT\");\n+        assert_eq!(utc.rfc822z().to_string(), \"Fri, 13 Feb 2009 23:31:30 -0000\");\n+        assert_eq!(utc.rfc3339().to_string(), \"2009-02-13T23:31:30Z\");\n     }\n \n     fn test_timespec_eq_ord() {"}]}