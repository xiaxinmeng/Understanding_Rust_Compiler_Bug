{"sha": "392d3c8d444721b726c3e593651737b989a8df02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MmQzYzhkNDQ0NzIxYjcyNmMzZTU5MzY1MTczN2I5ODlhOGRmMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-17T00:35:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T03:56:50Z"}, "message": "core: Add extension methods for str", "tree": {"sha": "5a8b3308168d622f9e7d52dcf35577c686f0de35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8b3308168d622f9e7d52dcf35577c686f0de35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392d3c8d444721b726c3e593651737b989a8df02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392d3c8d444721b726c3e593651737b989a8df02", "html_url": "https://github.com/rust-lang/rust/commit/392d3c8d444721b726c3e593651737b989a8df02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392d3c8d444721b726c3e593651737b989a8df02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "html_url": "https://github.com/rust-lang/rust/commit/35a3fa099930e2bb87bd4e4a911039be8fc19e2d"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "98c81d6d38f1d5aa7eedfd5c3e1ce84ceba2dd46", "filename": "src/libcore/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/392d3c8d444721b726c3e593651737b989a8df02/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d3c8d444721b726c3e593651737b989a8df02/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=392d3c8d444721b726c3e593651737b989a8df02", "patch": "@@ -6,7 +6,9 @@ import option::{some, none};\n import option = option::option;\n import path = path::path;\n import vec::vec_len;\n+import str::extensions;\n export path, option, some, none, vec_len, unreachable;\n+export extensions;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is"}, {"sha": "5d181930b932bdc2118aa199858b4bd3d95dd507", "filename": "src/libcore/str.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/392d3c8d444721b726c3e593651737b989a8df02/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392d3c8d444721b726c3e593651737b989a8df02/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=392d3c8d444721b726c3e593651737b989a8df02", "patch": "@@ -95,7 +95,8 @@ export\n    reserve_at_least,\n    capacity,\n \n-   unsafe;\n+   unsafe,\n+   extensions;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n@@ -1730,6 +1731,88 @@ mod unsafe {\n     }\n }\n \n+#[doc = \"Extension methods for strings\"]\n+impl extensions for str {\n+    #[doc = \"\n+    Return true if a predicate matches all characters or if the string\n+    contains no characters\n+    \"]\n+    #[inline]\n+    fn all(it: fn(char) -> bool) -> bool { all(self, it) }\n+    #[doc = \"\n+    Return true if a predicate matches any character (and false if it\n+    matches none or there are no characters)\n+    \"]\n+    #[inline]\n+    fn any(it: fn(char) -> bool) -> bool { any(self, it) }\n+    #[doc = \"Returns true if one string contains another\"]\n+    #[inline]\n+    fn contains(needle: str) -> bool { contains(self, needle) }\n+    #[doc = \"Returns true if one string ends with another\"]\n+    #[inline]\n+    fn ends_with(needle: str) -> bool { ends_with(self, needle) }\n+    #[doc = \"Returns true if the string has length 0\"]\n+    #[inline]\n+    fn is_empty() -> bool { is_empty(self) }\n+    #[doc = \"Returns true if the string has length greater than 0\"]\n+    #[inline]\n+    fn is_not_empty() -> bool { is_not_empty(self) }\n+    #[doc = \"\n+    Returns true if the string contains only whitespace\n+\n+    Whitespace characters are determined by `char::is_whitespace`\n+    \"]\n+    #[inline]\n+    fn is_whitespace() -> bool { is_whitespace(self) }\n+    #[doc = \"\n+    Returns a slice of the given string from the byte range [`begin`..`end`)\n+\n+    Fails when `begin` and `end` do not point to valid characters or\n+    beyond the last character of the string\n+    \"]\n+    #[inline]\n+    fn slice(begin: uint, end: uint) -> str { slice(self, begin, end) }\n+    #[doc = \"Splits a string into substrings using a character function\"]\n+    #[inline]\n+    fn split(sepfn: fn(char) -> bool) -> [str] { split(self, sepfn) }\n+    #[doc = \"\n+    Splits a string into substrings at each occurrence of a given character\n+    \"]\n+    #[inline]\n+    fn split_char(sep: char) -> [str] { split_char(self, sep) }\n+    #[doc = \"\n+    Splits a string into a vector of the substrings separated by a given\n+    string\n+    \"]\n+    #[inline]\n+    fn split_str(sep: str) -> [str] { split_str(self, sep) }\n+    #[doc = \"Returns true if one string starts with another\"]\n+    #[inline]\n+    fn starts_with(needle: str) -> bool { starts_with(self, needle) }\n+    #[doc = \"\n+    Take a substring of another.\n+\n+    Returns a string containing `n` characters starting at byte offset\n+    `begin`.\n+    \"]\n+    #[inline]\n+    fn substr(begin: uint, n: uint) -> str { substr(self, begin, n) }\n+    #[doc = \"Convert a string to lowercase\"]\n+    #[inline]\n+    fn to_lower() -> str { to_lower(self) }\n+    #[doc = \"Convert a string to uppercase\"]\n+    #[inline]\n+    fn to_upper() -> str { to_upper(self) }\n+    #[doc = \"Returns a string with leading and trailing whitespace removed\"]\n+    #[inline]\n+    fn trim() -> str { trim(self) }\n+    #[doc = \"Returns a string with leading whitespace removed\"]\n+    #[inline]\n+    fn trim_left() -> str { trim_left(self) }\n+    #[doc = \"Returns a string with trailing whitespace removed\"]\n+    #[inline]\n+    fn trim_right() -> str { trim_right(self) }\n+}\n \n #[cfg(test)]\n mod tests {"}]}