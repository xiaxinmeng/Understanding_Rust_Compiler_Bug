{"sha": "874a79fae30ec93bcd9847187741378c405bd9da", "node_id": "C_kwDOAAsO6NoAKDg3NGE3OWZhZTMwZWM5M2JjZDk4NDcxODc3NDEzNzhjNDA1YmQ5ZGE", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-19T21:17:14Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-22T12:24:14Z"}, "message": "migrate: `bad_attr` to `SessionDiagnostic`", "tree": {"sha": "8baa6b2f3a93d03c468281cc11417a141e4b72f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8baa6b2f3a93d03c468281cc11417a141e4b72f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874a79fae30ec93bcd9847187741378c405bd9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874a79fae30ec93bcd9847187741378c405bd9da", "html_url": "https://github.com/rust-lang/rust/commit/874a79fae30ec93bcd9847187741378c405bd9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874a79fae30ec93bcd9847187741378c405bd9da/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d197c1eb5bee2d4c2c27c895f5e496df935ccbd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d197c1eb5bee2d4c2c27c895f5e496df935ccbd0", "html_url": "https://github.com/rust-lang/rust/commit/d197c1eb5bee2d4c2c27c895f5e496df935ccbd0"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "4569ce82e3ef38c8fda832e0db1dce83dc38ff38", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=874a79fae30ec93bcd9847187741378c405bd9da", "patch": "@@ -394,5 +394,13 @@ lint_builtin_deref_nullptr = dereferencing a null pointer\n \n lint_builtin_asm_labels = avoid using named labels in inline assembly\n \n+lint_malformed_attribute = malformed lint attribute input\n+\n+lint_bad_attribute_argument = bad attribute argument\n+\n+lint_reason_must_be_string_literal = reason must be a string literal\n+\n+lint_reason_must_come_last = reason in lint attribute must come last\n+\n lint_unknown_tool = unknown tool name `{$tool_name}` found in scoped lint: `{$tool_name}::{$lint_name}`\n     .help = add `#![register_tool({$tool_name})]` to the crate root"}, {"sha": "679cfad4961eb918e65d9d143d8384f6340ac55a", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=874a79fae30ec93bcd9847187741378c405bd9da", "patch": "@@ -1,6 +1,25 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::Span;\n \n+#[derive(SessionDiagnostic)]\n+#[error(lint::malformed_attribute, code = \"E0452\")]\n+pub struct MalformedAttribute {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sub: MalformedAttributeSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum MalformedAttributeSub {\n+    #[label(lint::bad_attribute_argument)]\n+    BadAttributeArgument(#[primary_span] Span),\n+    #[label(lint::reason_must_be_string_literal)]\n+    ReasonMustBeStringLiteral(#[primary_span] Span),\n+    #[label(lint::reason_must_come_last)]\n+    ReasonMustComeLast(#[primary_span] Span),\n+}\n+\n #[derive(SessionDiagnostic)]\n #[error(lint::unknown_tool, code = \"E0710\")]\n pub struct UnknownTool {"}, {"sha": "2dd4d2b34cc210a2bcad7393809a6415a599c9a8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874a79fae30ec93bcd9847187741378c405bd9da/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=874a79fae30ec93bcd9847187741378c405bd9da", "patch": "@@ -26,7 +26,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use tracing::debug;\n \n-use crate::errors::UnknownTool;\n+use crate::errors::{MalformedAttribute, MalformedAttributeSub, UnknownTool};\n \n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n@@ -271,7 +271,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.cur = self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: prev });\n \n         let sess = self.sess;\n-        let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n+        // let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n             if attr.has_name(sym::automatically_derived) {\n                 self.current_specs_mut().insert(\n@@ -322,20 +322,27 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 reason = Some(rationale);\n                             } else {\n-                                bad_attr(name_value.span)\n-                                    .span_label(name_value.span, \"reason must be a string literal\")\n-                                    .emit();\n+                                sess.emit_err(MalformedAttribute {\n+                                    span: name_value.span,\n+                                    sub: MalformedAttributeSub::ReasonMustBeStringLiteral(\n+                                        name_value.span,\n+                                    ),\n+                                });\n                             }\n                             // found reason, reslice meta list to exclude it\n                             metas.pop().unwrap();\n                         } else {\n-                            bad_attr(item.span)\n-                                .span_label(item.span, \"bad attribute argument\")\n-                                .emit();\n+                            sess.emit_err(MalformedAttribute {\n+                                span: item.span,\n+                                sub: MalformedAttributeSub::BadAttributeArgument(item.span),\n+                            });\n                         }\n                     }\n                     ast::MetaItemKind::List(_) => {\n-                        bad_attr(item.span).span_label(item.span, \"bad attribute argument\").emit();\n+                        sess.emit_err(MalformedAttribute {\n+                            span: item.span,\n+                            sub: MalformedAttributeSub::BadAttributeArgument(item.span),\n+                        });\n                     }\n                 }\n             }\n@@ -353,20 +360,21 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let meta_item = match li {\n                     ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,\n                     _ => {\n-                        let mut err = bad_attr(sp);\n-                        let mut add_label = true;\n                         if let Some(item) = li.meta_item() {\n                             if let ast::MetaItemKind::NameValue(_) = item.kind {\n                                 if item.path == sym::reason {\n-                                    err.span_label(sp, \"reason in lint attribute must come last\");\n-                                    add_label = false;\n+                                    sess.emit_err(MalformedAttribute {\n+                                        span: sp,\n+                                        sub: MalformedAttributeSub::ReasonMustComeLast(sp),\n+                                    });\n+                                    continue;\n                                 }\n                             }\n                         }\n-                        if add_label {\n-                            err.span_label(sp, \"bad attribute argument\");\n-                        }\n-                        err.emit();\n+                        sess.emit_err(MalformedAttribute {\n+                            span: sp,\n+                            sub: MalformedAttributeSub::BadAttributeArgument(sp),\n+                        });\n                         continue;\n                     }\n                 };"}]}