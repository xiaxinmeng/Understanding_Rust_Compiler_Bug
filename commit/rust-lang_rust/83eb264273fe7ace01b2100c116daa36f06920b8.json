{"sha": "83eb264273fe7ace01b2100c116daa36f06920b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZWIyNjQyNzNmZTdhY2UwMWIyMTAwYzExNmRhYTM2ZjA2OTIwYjg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-29T17:30:44Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T12:17:30Z"}, "message": "borrowck: skip CFG construction when there is nothing to propagate\n\nCFG construction takes a large amount of time and memory, especially for\nlarge constants. If such a constant contains no actions on lvalues, it\ncan't have borrowck problems and can be ignored by it.\n\nThis removes the 4.9GB borrowck peak from #36799. It seems that HIR had\ngrown by 300MB and MIR had grown by 500MB from the last massif\ncollection and that remains to be investigated, but this at least shaves\nthe borrowck peak.", "tree": {"sha": "3f1e737e28b060271cd68025c55fdf38e9877c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1e737e28b060271cd68025c55fdf38e9877c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83eb264273fe7ace01b2100c116daa36f06920b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83eb264273fe7ace01b2100c116daa36f06920b8", "html_url": "https://github.com/rust-lang/rust/commit/83eb264273fe7ace01b2100c116daa36f06920b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83eb264273fe7ace01b2100c116daa36f06920b8/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "html_url": "https://github.com/rust-lang/rust/commit/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "16ecfce49d0d8856ad3d5a627ad1b6869547b268", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/83eb264273fe7ace01b2100c116daa36f06920b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83eb264273fe7ace01b2100c116daa36f06920b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=83eb264273fe7ace01b2100c116daa36f06920b8", "patch": "@@ -112,19 +112,28 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     // is not yet stolen.\n     tcx.mir_validated(owner_def_id).borrow();\n \n-    let cfg = cfg::CFG::new(bccx.tcx, &body);\n-    let AnalysisData { all_loans,\n-                       loans: loan_dfcx,\n-                       move_data: flowed_moves } =\n-        build_borrowck_dataflow_data(bccx, &cfg, body_id);\n-\n-    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n+    // option dance because you can't capture an uninitialized variable\n+    // by mut-ref.\n+    let mut cfg = None;\n+    if let Some(AnalysisData { all_loans,\n+                               loans: loan_dfcx,\n+                               move_data: flowed_moves }) =\n+        build_borrowck_dataflow_data(bccx, false, body_id,\n+                                     |bccx| {\n+                                         cfg = Some(cfg::CFG::new(bccx.tcx, &body));\n+                                         cfg.as_mut().unwrap()\n+                                     })\n+    {\n+        check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n+    }\n }\n \n-fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n-                                          cfg: &cfg::CFG,\n-                                          body_id: hir::BodyId)\n-                                          -> AnalysisData<'a, 'tcx>\n+fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tcx>,\n+                                                 force_analysis: bool,\n+                                                 body_id: hir::BodyId,\n+                                                 get_cfg: F)\n+                                                 -> Option<AnalysisData<'a, 'tcx>>\n+    where F: FnOnce(&mut BorrowckCtxt<'a, 'tcx>) -> &'c cfg::CFG\n {\n     // Check the body of fn items.\n     let tcx = this.tcx;\n@@ -137,6 +146,18 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n     let (all_loans, move_data) =\n         gather_loans::gather_loans_in_fn(this, body_id);\n \n+    if !force_analysis && move_data.is_empty() && all_loans.is_empty() {\n+        // large arrays of data inserted as constants can take a lot of\n+        // time and memory to borrow-check - see issue #36799. However,\n+        // they don't have lvalues, so no borrow-check is actually needed.\n+        // Recognize that case and skip borrow-checking.\n+        debug!(\"skipping loan propagation for {:?} because of no loans\", body_id);\n+        return None;\n+    } else {\n+        debug!(\"propagating loans in {:?}\", body_id);\n+    }\n+\n+    let cfg = get_cfg(this);\n     let mut loan_dfcx =\n         DataFlowContext::new(this.tcx,\n                              \"borrowck\",\n@@ -159,9 +180,9 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                                                       id_range,\n                                                       body);\n \n-    AnalysisData { all_loans: all_loans,\n-                   loans: loan_dfcx,\n-                   move_data:flowed_moves }\n+    Some(AnalysisData { all_loans: all_loans,\n+                        loans: loan_dfcx,\n+                        move_data:flowed_moves })\n }\n \n /// Accessor for introspective clients inspecting `AnalysisData` and\n@@ -178,8 +199,8 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     let region_maps = tcx.region_maps(owner_def_id);\n     let mut bccx = BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n \n-    let dataflow_data = build_borrowck_dataflow_data(&mut bccx, cfg, body_id);\n-    (bccx, dataflow_data)\n+    let dataflow_data = build_borrowck_dataflow_data(&mut bccx, true, body_id, |_| cfg);\n+    (bccx, dataflow_data.unwrap())\n }\n \n // ----------------------------------------------------------------------"}, {"sha": "fd80e8320d6a10853b3395d5758df7151524bbf0", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83eb264273fe7ace01b2100c116daa36f06920b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83eb264273fe7ace01b2100c116daa36f06920b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=83eb264273fe7ace01b2100c116daa36f06920b8", "patch": "@@ -220,6 +220,15 @@ impl<'a, 'tcx> MoveData<'tcx> {\n         }\n     }\n \n+    /// return true if there are no trackable assignments or moves\n+    /// in this move data - that means that there is nothing that\n+    /// could cause a borrow error.\n+    pub fn is_empty(&self) -> bool {\n+        self.moves.borrow().is_empty() &&\n+            self.path_assignments.borrow().is_empty() &&\n+            self.var_assignments.borrow().is_empty()\n+    }\n+\n     pub fn path_loan_path(&self, index: MovePathIndex) -> Rc<LoanPath<'tcx>> {\n         (*self.paths.borrow())[index.get()].loan_path.clone()\n     }"}]}