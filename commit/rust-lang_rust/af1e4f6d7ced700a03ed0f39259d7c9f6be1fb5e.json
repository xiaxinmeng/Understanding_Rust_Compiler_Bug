{"sha": "af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMWU0ZjZkN2NlZDcwMGEwM2VkMGYzOTI1OWQ3YzlmNmJlMWZiNWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-23T11:34:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-31T21:37:46Z"}, "message": "add missing docs for MetadataExt", "tree": {"sha": "c0b622d39a04e639e761f4cdc56cc852f71e7087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b622d39a04e639e761f4cdc56cc852f71e7087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e", "html_url": "https://github.com/rust-lang/rust/commit/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}], "stats": {"total": 246, "additions": 246, "deletions": 0}, "files": [{"sha": "d23cae40cfaff7317895bc5f2d8b7a05ef469051", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=af1e4f6d7ced700a03ed0f39259d7c9f6be1fb5e", "patch": "@@ -215,36 +215,282 @@ impl OpenOptionsExt for OpenOptions {\n // casts and rely on manual lowering to `stat` if the raw type is desired.\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n+    /// Returns the ID of the device containing the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let dev_id = meta.dev();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn dev(&self) -> u64;\n+    /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let inode = meta.ino();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> u64;\n+    /// Returns the rights applied to this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let mode = meta.mode();\n+    /// let user_has_write_access      = mode & 0o200;\n+    /// let user_has_read_write_access = mode & 0o600;\n+    /// let group_has_read_access      = mode & 0o040;\n+    /// let others_have_exec_access    = mode & 0o001;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n+    /// Returns the number of hard links pointing to this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nb_hard_links = meta.nlink();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn nlink(&self) -> u64;\n+    /// Returns the user ID of the owner of this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let user_id = meta.uid();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn uid(&self) -> u32;\n+    /// Returns the group ID of the owner of this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let group_id = meta.gid();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn gid(&self) -> u32;\n+    /// Returns the device ID of this file (if it is a special one).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let device_id = meta.rdev();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn rdev(&self) -> u64;\n+    /// Returns the total size of this file in bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let file_size = meta.size();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn size(&self) -> u64;\n+    /// Returns the time of the last access to the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_access_time = meta.atime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime(&self) -> i64;\n+    /// Returns the time of the last access to the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_access_time = meta.atime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime_nsec(&self) -> i64;\n+    /// Returns the time of the last modification of the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_modification_time = meta.mtime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime(&self) -> i64;\n+    /// Returns the time of the last modification of the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_modification_time = meta.mtime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime_nsec(&self) -> i64;\n+    /// Returns the time of the last status change of the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_status_change_time = meta.ctime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime(&self) -> i64;\n+    /// Returns the time of the last status change of the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_status_change_time = meta.ctime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime_nsec(&self) -> i64;\n+    /// Returns the blocksize for filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let blocksize = meta.blksize();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blksize(&self) -> u64;\n+    /// Returns the number of blocks allocated to the file, in 512-byte units.\n+    ///\n+    /// Please note that this may be smaller than `st_size / 512` when the file has holes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let blocks = meta.blocks();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blocks(&self) -> u64;\n }"}]}