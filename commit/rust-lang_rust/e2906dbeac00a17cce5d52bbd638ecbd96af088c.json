{"sha": "e2906dbeac00a17cce5d52bbd638ecbd96af088c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTA2ZGJlYWMwMGExN2NjZTVkNTJiYmQ2MzhlY2JkOTZhZjA4OGM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-30T21:18:26Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-30T21:18:26Z"}, "message": "Clean up formatting on std main page\n\nPart of #29330", "tree": {"sha": "e5516957f0323af98100649c503bbe797df9e6ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5516957f0323af98100649c503bbe797df9e6ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2906dbeac00a17cce5d52bbd638ecbd96af088c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2906dbeac00a17cce5d52bbd638ecbd96af088c", "html_url": "https://github.com/rust-lang/rust/commit/e2906dbeac00a17cce5d52bbd638ecbd96af088c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2906dbeac00a17cce5d52bbd638ecbd96af088c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa9f7d3916dcff36a5b8b4978981c056ceb8398", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9f7d3916dcff36a5b8b4978981c056ceb8398", "html_url": "https://github.com/rust-lang/rust/commit/2aa9f7d3916dcff36a5b8b4978981c056ceb8398"}], "stats": {"total": 274, "additions": 144, "deletions": 130}, "files": [{"sha": "aec84da3048494ad2aaae468ef310abf58ea2302", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 144, "deletions": 130, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/e2906dbeac00a17cce5d52bbd638ecbd96af088c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2906dbeac00a17cce5d52bbd638ecbd96af088c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e2906dbeac00a17cce5d52bbd638ecbd96af088c", "patch": "@@ -10,32 +10,24 @@\n \n //! # The Rust Standard Library\n //!\n-//! The Rust Standard Library is the foundation of portable Rust\n-//! software, a set of minimal and battle-tested shared abstractions\n-//! for the [broader Rust ecosystem](https://crates.io). It offers\n-//! core types, like [`Vec`](vec/index.html)\n-//! and [`Option`](option/index.html), library-defined [operations on\n-//! language primitives](#primitives), [standard macros](#macros),\n-//! [I/O](io/index.html) and [multithreading](thread/index.html), among\n-//! [many other\n-//! things](#what-is-in-the-standard-library-documentation).\n-//!\n-//! `std` is available to all Rust crates by default, just as if each\n-//! one contained an `extern crate std` import at the [crate\n-//! root][book-crate-root]. Therefore the standard library can be\n-//! accessed in [`use`][book-use] statements through the path `std`,\n-//! as in [`use std::env`](env/index.html), or in expressions\n-//! through the absolute path `::std`, as in\n-//! [`::std::env::args()`](env/fn.args.html).\n-//!\n-//! [book-crate-root]: ../book/crates-and-modules.html#basic-terminology:-crates-and-modules\n-//! [book-use]: ../book/crates-and-modules.html#importing-modules-with-use\n+//! The Rust Standard Library is the foundation of portable Rust software, a\n+//! set of minimal and battle-tested shared abstractions for the [broader Rust\n+//! ecosystem][crates.io]. It offers core types, like [`Vec<T>`] and\n+//! [`Option<T>`], library-defined [operations on language\n+//! primitives](#primitives), [standard macros](#macros), [I/O] and\n+//! [multithreading], among [many other things][other].\n+//!\n+//! `std` is available to all Rust crates by default, just as if each one\n+//! contained an `extern crate std;` import at the [crate root]. Therefore the\n+//! standard library can be accessed in [`use`] statements through the path\n+//! `std`, as in [`use std::env`], or in expressions through the absolute path\n+//! `::std`, as in [`::std::env::args()`].\n //!\n //! # How to read this documentation\n //!\n-//! If you already know the name of what you are looking for the\n-//! fastest way to find it is to use the <a href=\"#\"\n-//! onclick=\"focusSearchBar();\">search bar</a> at the top of the page.\n+//! If you already know the name of what you are looking for the fastest way to\n+//! find it is to use the <a href=\"#\" onclick=\"focusSearchBar();\">search\n+//! bar</a> at the top of the page.\n //!\n //! Otherwise, you may want to jump to one of these useful sections:\n //!\n@@ -44,145 +36,167 @@\n //! * [Standard macros](#macros)\n //! * [The Rust Prelude](prelude/index.html)\n //!\n-//! If this is your first time, the documentation for the standard\n-//! library is written to be casually perused. Clicking on interesting\n-//! things should generally lead you to interesting places. Still,\n-//! there are important bits you don't want to miss, so read on for a\n-//! tour of the standard library and its documentation!\n+//! If this is your first time, the documentation for the standard library is\n+//! written to be casually perused. Clicking on interesting things should\n+//! generally lead you to interesting places. Still, there are important bits\n+//! you don't want to miss, so read on for a tour of the standard library and\n+//! its documentation!\n //!\n-//! Once you are familiar with the contents of the standard library\n-//! you may begin to find the verbosity of the prose distracting. At\n-//! this stage in your development you may want to press the **[-]**\n-//! button near the top of the page to collapse it into a more\n-//! skimmable view.\n+//! Once you are familiar with the contents of the standard library you may\n+//! begin to find the verbosity of the prose distracting. At this stage in your\n+//! development you may want to press the **[-]** button near the top of the\n+//! page to collapse it into a more skimmable view.\n //!\n-//! While you are looking at that **[-]** button also notice the\n-//! **[src]** button. Rust's API documentation comes with the source\n-//! code and you are encouraged to read it. The standard library\n-//! source is generally high quality and a peek behind the curtains is\n-//! often enlightening.\n+//! While you are looking at that **[-]** button also notice the **[src]**\n+//! button. Rust's API documentation comes with the source code and you are\n+//! encouraged to read it. The standard library source is generally high\n+//! quality and a peek behind the curtains is often enlightening.\n //!\n //! # What is in the standard library documentation?\n //!\n-//! First of all, The Rust Standard Library is divided into a number\n-//! of focused modules, [all listed further down this page](#modules).\n-//! These modules are the bedrock upon which all of Rust is forged,\n-//! and they have mighty names like [`std::slice`](slice/index.html)\n-//! and [`std::cmp`](cmp/index.html). Modules' documentation typically\n-//! includes an overview of the module along with examples, and are\n-//! a smart place to start familiarizing yourself with the library.\n+//! First of all, The Rust Standard Library is divided into a number of focused\n+//! modules, [all listed further down this page](#modules). These modules are\n+//! the bedrock upon which all of Rust is forged, and they have mighty names\n+//! like [`std::slice`] and [`std::cmp`]. Modules' documentation typically\n+//! includes an overview of the module along with examples, and are a smart\n+//! place to start familiarizing yourself with the library.\n //!\n-//! Second, implicit methods on [primitive\n-//! types](../book/primitive-types.html) are documented here. This can\n+//! Second, implicit methods on [primitive types] are documented here. This can\n //! be a source of confusion for two reasons:\n //!\n-//! 1. While primitives are implemented by the compiler, the standard\n-//!    library implements methods directly on the primitive types (and\n-//!    it is the only library that does so), which are [documented in\n-//!    the section on primitives](#primitives).\n-//! 2. The standard library exports many modules *with the same name\n-//!    as primitive types*. These define additional items related\n-//!    to the primitive type, but not the all-important methods.\n+//! 1. While primitives are implemented by the compiler, the standard library\n+//!    implements methods directly on the primitive types (and it is the only\n+//!    library that does so), which are [documented in the section on\n+//!    primitives](#primitives).\n+//! 2. The standard library exports many modules *with the same name as\n+//!    primitive types*. These define additional items related to the primitive\n+//!    type, but not the all-important methods.\n //!\n //! So for example there is a [page for the primitive type\n-//! `i32`](primitive.i32.html) that lists all the methods that can be\n-//! called on 32-bit integers (very useful), and there is a [page for\n-//! the module `std::i32`](i32/index.html) that documents the constant\n-//! values `MIN` and `MAX` (rarely useful).\n-//!\n-//! Note the documentation for the primitives\n-//! [`str`](primitive.str.html) and [`[T]`](primitive.slice.html)\n-//! (also called 'slice'). Many method calls on\n-//! [`String`](string/struct.String.html) and\n-//! [`Vec`](vec/struct.Vec.html) are actually calls to methods on\n-//! `str` and `[T]` respectively, via [deref\n-//! coercions](../book/deref-coercions.html).\n-//!\n-//! Third, the standard library defines [The Rust\n-//! Prelude](prelude/index.html), a small collection of items - mostly\n-//! traits - that are imported into every module of every crate. The\n-//! traits in the prelude are pervasive, making the prelude\n+//! `i32`](primitive.i32.html) that lists all the methods that can be called on\n+//! 32-bit integers (very useful), and there is a [page for the module\n+//! `std::i32`](i32/index.html) that documents the constant values [`MIN`] and\n+//! [`MAX`] (rarely useful).\n+//!\n+//! Note the documentation for the primitives [`str`] and [`[T]`] (also called\n+//! 'slice'). Many method calls on [`String`] and [`Vec<T>`] are actually calls\n+//! to methods on [`str`] and [`[T]`] respectively, via [deref coercions].\n+//!\n+//! Third, the standard library defines [The Rust Prelude], a small collection\n+//! of items - mostly traits - that are imported into every module of every\n+//! crate. The traits in the prelude are pervasive, making the prelude\n //! documentation a good entry point to learning about the library.\n //!\n-//! And finally, the standard library exports a number of standard\n-//! macros, and [lists them on this page](#macros) (technically, not\n-//! all of the standard macros are defined by the standard library -\n-//! some are defined by the compiler - but they are documented here\n-//! the same). Like the prelude, the standard macros are imported by\n-//! default into all crates.\n+//! And finally, the standard library exports a number of standard macros, and\n+//! [lists them on this page](#macros) (technically, not all of the standard\n+//! macros are defined by the standard library - some are defined by the\n+//! compiler - but they are documented here the same). Like the prelude, the\n+//! standard macros are imported by default into all crates.\n //!\n //! # A Tour of The Rust Standard Library\n //!\n-//! The rest of this crate documentation is dedicated to pointing\n-//! out notable features of The Rust Standard Library.\n+//! The rest of this crate documentation is dedicated to pointing out notable\n+//! features of The Rust Standard Library.\n //!\n //! ## Containers and collections\n //!\n-//! The [`option`](option/index.html) and\n-//! [`result`](result/index.html) modules define optional and\n-//! error-handling types, `Option` and `Result`. The\n-//! [`iter`](iter/index.html) module defines Rust's iterator trait,\n-//! [`Iterator`](iter/trait.Iterator.html), which works with the `for`\n-//! loop to access collections.\n+//! The [`option`] and [`result`] modules define optional and error-handling\n+//! types, [`Option<T>`] and [`Result<T, E>`]. The [`iter`] module defines\n+//! Rust's iterator trait, [`Iterator`], which works with the [`for`] loop to\n+//! access collections.\n //!\n-//! The standard library exposes 3 common ways to deal with contiguous\n+//! The standard library exposes three common ways to deal with contiguous\n //! regions of memory:\n //!\n-//! * [`Vec<T>`](vec/index.html) - A heap-allocated *vector* that is\n-//! resizable at runtime.\n-//! * [`[T; n]`](primitive.array.html) - An inline *array* with a\n-//! fixed size at compile time.\n-//! * [`[T]`](primitive.slice.html) - A dynamically sized *slice* into\n-//! any other kind of contiguous storage, whether heap-allocated or\n-//! not.\n+//! * [`Vec<T>`] - A heap-allocated *vector* that is resizable at runtime.\n+//! * [`[T; n]`] - An inline *array* with a fixed size at compile time.\n+//! * [`[T]`] - A dynamically sized *slice* into any other kind of contiguous\n+//!   storage, whether heap-allocated or not.\n //!\n-//! Slices can only be handled through some kind of *pointer*, and as\n-//! such come in many flavors such as:\n+//! Slices can only be handled through some kind of *pointer*, and as such come\n+//! in many flavors such as:\n //!\n //! * `&[T]` - *shared slice*\n //! * `&mut [T]` - *mutable slice*\n-//! * [`Box<[T]>`](boxed/index.html) - *owned slice*\n+//! * [`Box<[T]>`] - *owned slice*\n //!\n-//! `str`, a UTF-8 string slice, is a primitive type, and the standard\n-//! library defines [many methods for it](primitive.str.html). Rust\n-//! `str`s are typically accessed as immutable references: `&str`. Use\n-//! the owned `String` type defined in [`string`](string/index.html)\n-//! for building and mutating strings.\n+//! [`str`], a UTF-8 string slice, is a primitive type, and the standard library\n+//! defines many methods for it. Rust [`str`]s are typically accessed as\n+//! immutable references: `&str`. Use the owned [`String`] for building and\n+//! mutating strings.\n //!\n-//! For converting to strings use the [`format!`](fmt/index.html)\n-//! macro, and for converting from strings use the\n-//! [`FromStr`](str/trait.FromStr.html) trait.\n+//! For converting to strings use the [`format!`] macro, and for converting from\n+//! strings use the [`FromStr`] trait.\n //!\n-//! Data may be shared by placing it in a reference-counted box or the\n-//! [`Rc`](rc/index.html) type, and if further contained in a [`Cell`\n-//! or `RefCell`](cell/index.html), may be mutated as well as shared.\n-//! Likewise, in a concurrent setting it is common to pair an\n-//! atomically-reference-counted box, [`Arc`](sync/struct.Arc.html),\n-//! with a [`Mutex`](sync/struct.Mutex.html) to get the same effect.\n+//! Data may be shared by placing it in a reference-counted box or the [`Rc`]\n+//! type, and if further contained in a [`Cell`] or [`RefCell`], may be mutated\n+//! as well as shared. Likewise, in a concurrent setting it is common to pair an\n+//! atomically-reference-counted box, [`Arc`], with a [`Mutex`] to get the same\n+//! effect.\n //!\n-//! The [`collections`](collections/index.html) module defines maps,\n-//! sets, linked lists and other typical collection types, including\n-//! the common [`HashMap`](collections/struct.HashMap.html).\n+//! The [`collections`] module defines maps, sets, linked lists and other\n+//! typical collection types, including the common [`HashMap<K, V>`].\n //!\n //! ## Platform abstractions and I/O\n //!\n-//! Besides basic data types, the standard library is largely concerned\n-//! with abstracting over differences in common platforms, most notably\n-//! Windows and Unix derivatives.\n-//!\n-//! Common types of I/O, including [files](fs/struct.File.html),\n-//! [TCP](net/struct.TcpStream.html),\n-//! [UDP](net/struct.UdpSocket.html), are defined in the\n-//! [`io`](io/index.html), [`fs`](fs/index.html), and\n-//! [`net`](net/index.html) modules.\n-//!\n-//! The [`thread`](thread/index.html) module contains Rust's threading\n-//! abstractions. [`sync`](sync/index.html) contains further\n-//! primitive shared memory types, including\n-//! [`atomic`](sync/atomic/index.html) and\n-//! [`mpsc`](sync/mpsc/index.html), which contains the channel types\n-//! for message passing.\n-//!\n+//! Besides basic data types, the standard library is largely concerned with\n+//! abstracting over differences in common platforms, most notably Windows and\n+//! Unix derivatives.\n+//!\n+//! Common types of I/O, including [files], [TCP], [UDP], are defined in the\n+//! [`io`], [`fs`], and [`net`] modules.\n+//!\n+//! The [`thread`] module contains Rust's threading abstractions. [`sync`]\n+//! contains further primitive shared memory types, including [`atomic`] and\n+//! [`mpsc`], which contains the channel types for message passing.\n+//!\n+//! [I/O]: io/index.html\n+//! [MIN]: i32/constant.MIN.html\n+//! [MAX]: i32/constant.MAX.html\n+//! [TCP]: net/struct.TcpStream.html\n+//! [The Rust Prelude]: prelude/index.html\n+//! [UDP]: net/struct.UdpSocket.html\n+//! [`::std::env::args()`]: env/fn.args.html\n+//! [`Arc`]: sync/struct.Arc.html\n+//! [`Box<[T]>`]: boxed/index.html\n+//! [`Cell`]: cell/struct.Cell.html\n+//! [`FromStr`]: str/trait.FromStr.html\n+//! [`HashMap<K, V>`]: collections/struct.HashMap.html\n+//! [`Iterator`]: iter/trait.Iterator.html\n+//! [`Mutex`]: sync/struct.Mutex.html\n+//! [`Option<T>`]: option/enum.Option.html\n+//! [`Rc`]: rc/index.html\n+//! [`RefCell`]: cell/struct.RefCell.html\n+//! [`Result<T, E>`]: result/enum.Result.html\n+//! [`String`]: string/struct.String.html\n+//! [`Vec<T>`]: vec/index.html\n+//! [`[T; n]`]: primitive.array.html\n+//! [`[T]`]: primitive.slice.html\n+//! [`atomic`]: sync/atomic/index.html\n+//! [`collections`]: collections/index.html\n+//! [`for`]: ../book/loops.html#for\n+//! [`format!`]: macro.format!.html\n+//! [`fs`]: fs/index.html\n+//! [`io`]: io/index.html\n+//! [`iter`]: iter/index.html\n+//! [`mpsc`]: sync/mpsc/index.html\n+//! [`net`]: net/index.html\n+//! [`option`]: option/index.html\n+//! [`result`]: result/index.html\n+//! [`std::cmp`]: cmp/index.html\n+//! [`std::slice`]: slice/index.html\n+//! [`str`]: primitive.str.html\n+//! [`sync`]: sync/index.html\n+//! [`thread`]: thread/index.html\n+//! [`use std::env`]: env/index.html\n+//! [`use`]: ../book/crates-and-modules.html#importing-modules-with-use\n+//! [crate root]: ../book/crates-and-modules.html#basic-terminology:-crates-and-modules\n+//! [crates.io]: https://crates.io\n+//! [deref coercions]: ../book/deref-coercions.html\n+//! [files]: fs/struct.File.html\n+//! [multithreading]: thread/index.html\n+//! [other]: #what-is-in-the-standard-library-documentation\n+//! [primitive types]: ../book/primitive-types.html\n \n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]"}]}