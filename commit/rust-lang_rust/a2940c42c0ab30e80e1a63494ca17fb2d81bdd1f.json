{"sha": "a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOTQwYzQyYzBhYjMwZTgwZTFhNjM0OTRjYTE3ZmIyZDgxYmRkMWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-27T16:34:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T16:34:46Z"}, "message": "Merge #9020\n\n9020: fix: Don't complete non-macro item paths in impls and modules r=Veykril a=Veykril\n\nPart of #8518\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "7d755c4edd86c0b031452eb45536eb42d802f65c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d755c4edd86c0b031452eb45536eb42d802f65c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgr8omCRBK7hj4Ov3rIwAAO5IIABnwfCGq8LAho6DfUZOwFe0R\n88VxT0hItpeQ8B1y8SXwrFjwGQSbwKTRNl0FFNf8FeU4FxJI++MoiPjpJKNA0hmP\niW0h5JuXpACI7jdgzf8NaEG1c5xxNlTJx7KeXlGX0TSA/RjuvlsclQEE0EIFr/Ni\n6L4HrCUhT9KifWH0hV5Bjyglj9Csqg9+wm1RPvZ4KFEUDUfgRxQ002pQ/MquEgWW\nL3CyN1HOmk80U6NVEPzR/SXdLWeVQ3ua5jr14jGNy5mtWd6izj1m6GQJuIK4qtI7\nKTVXYAGMSUhvjehVFB0yfaahyQRXyFwYVr4+yQJBhPkJSSRT9lPgD74K+QF1tlc=\n=3Nt1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d755c4edd86c0b031452eb45536eb42d802f65c\nparent cc5d8069219a0a52f9c98b6766d2421eaf4664d8\nparent 3a16950fd919f46fd879c36423810a40105b2c10\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622133286 +0000\ncommitter GitHub <noreply@github.com> 1622133286 +0000\n\nMerge #9020\n\n9020: fix: Don't complete non-macro item paths in impls and modules r=Veykril a=Veykril\n\nPart of #8518\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "html_url": "https://github.com/rust-lang/rust/commit/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc5d8069219a0a52f9c98b6766d2421eaf4664d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5d8069219a0a52f9c98b6766d2421eaf4664d8", "html_url": "https://github.com/rust-lang/rust/commit/cc5d8069219a0a52f9c98b6766d2421eaf4664d8"}, {"sha": "3a16950fd919f46fd879c36423810a40105b2c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a16950fd919f46fd879c36423810a40105b2c10", "html_url": "https://github.com/rust-lang/rust/commit/3a16950fd919f46fd879c36423810a40105b2c10"}], "stats": {"total": 332, "additions": 198, "deletions": 134}, "files": [{"sha": "df27e7a848a333e08ab431d38ff1a1e82f55eb25", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -110,7 +110,11 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if ctx.use_item_syntax.is_some() || ctx.is_path_disallowed() {\n+    if ctx.use_item_syntax.is_some()\n+        || ctx.is_path_disallowed()\n+        || ctx.expects_item()\n+        || ctx.expects_assoc_item()\n+    {\n         return None;\n     }\n     let potential_import_name = {"}, {"sha": "96447a603cb7f38d7b2946a15d484137faae3fa3", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -49,35 +49,35 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n \n-    let has_trait_or_impl_parent = ctx.has_impl_or_trait_parent();\n+    let expects_assoc_item = ctx.expects_assoc_item();\n     let has_block_expr_parent = ctx.has_block_expr_parent();\n-    let has_item_list_parent = ctx.has_item_list_parent();\n+    let expects_item = ctx.expects_item();\n     if ctx.has_impl_or_trait_prev_sibling() {\n         add_keyword(ctx, acc, \"where\", \"where \");\n         return;\n     }\n     if ctx.previous_token_is(T![unsafe]) {\n-        if has_item_list_parent || has_block_expr_parent {\n+        if expects_item || has_block_expr_parent {\n             add_keyword(ctx, acc, \"fn\", \"fn $1($2) {\\n    $0\\n}\")\n         }\n \n-        if has_item_list_parent || has_block_expr_parent {\n+        if expects_item || has_block_expr_parent {\n             add_keyword(ctx, acc, \"trait\", \"trait $1 {\\n    $0\\n}\");\n             add_keyword(ctx, acc, \"impl\", \"impl $1 {\\n    $0\\n}\");\n         }\n \n         return;\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent {\n+    if expects_item || expects_assoc_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"fn\", \"fn $1($2) {\\n    $0\\n}\");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"use\", \"use \");\n         add_keyword(ctx, acc, \"impl\", \"impl $1 {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"trait\", \"trait $1 {\\n    $0\\n}\");\n     }\n \n-    if has_item_list_parent {\n+    if expects_item {\n         add_keyword(ctx, acc, \"enum\", \"enum $1 {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"struct\", \"struct $0\");\n         add_keyword(ctx, acc, \"union\", \"union $1 {\\n    $0\\n}\");\n@@ -101,24 +101,23 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"else\", \"else {\\n    $0\\n}\");\n         add_keyword(ctx, acc, \"else if\", \"else if $1 {\\n    $0\\n}\");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"mod\", \"mod $0\");\n     }\n-    if ctx.has_ident_or_ref_pat_parent() {\n+    if ctx.expects_ident_pat_or_ref_expr() {\n         add_keyword(ctx, acc, \"mut\", \"mut \");\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent {\n+    if expects_item || expects_assoc_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"const\", \"const \");\n         add_keyword(ctx, acc, \"type\", \"type \");\n     }\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"static\", \"static \");\n     };\n-    if has_item_list_parent || has_block_expr_parent {\n+    if expects_item || has_block_expr_parent {\n         add_keyword(ctx, acc, \"extern\", \"extern \");\n     }\n-    if has_item_list_parent || has_trait_or_impl_parent || has_block_expr_parent || ctx.is_match_arm\n-    {\n+    if expects_item || expects_assoc_item || has_block_expr_parent || ctx.is_match_arm {\n         add_keyword(ctx, acc, \"unsafe\", \"unsafe \");\n     }\n     if ctx.in_loop_body {\n@@ -130,7 +129,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"break\", \"break\");\n         }\n     }\n-    if has_item_list_parent || ctx.has_impl_parent() || ctx.has_field_list_parent() {\n+    if expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_record_field() {\n         add_keyword(ctx, acc, \"pub(crate)\", \"pub(crate) \");\n         add_keyword(ctx, acc, \"pub\", \"pub \");\n     }"}, {"sha": "c16bb215f755317b7b84447d96e0621bc4192629", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -20,6 +20,17 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n     let context_module = ctx.scope.module();\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        if let PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n+            let module_scope = module.scope(ctx.db, context_module);\n+            for (name, def) in module_scope {\n+                if let ScopeDef::MacroDef(macro_def) = def {\n+                    acc.add_macro(ctx, Some(name.to_string()), macro_def);\n+                }\n+            }\n+        }\n+        return;\n+    }\n \n     // Add associated types on type parameters and `Self`.\n     resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {\n@@ -594,14 +605,33 @@ fn main() { T::$0; }\n macro_rules! foo { () => {} }\n \n fn main() { let _ = crate::$0 }\n-        \"#,\n+\"#,\n             expect![[r##\"\n                 fn main()  fn()\n                 ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n     }\n \n+    #[test]\n+    fn completes_qualified_macros_in_impl() {\n+        check(\n+            r#\"\n+#[macro_export]\n+macro_rules! foo { () => {} }\n+\n+struct MyStruct {}\n+\n+impl MyStruct {\n+    crate::$0\n+}\n+\"#,\n+            expect![[r##\"\n+                ma foo! #[macro_export] macro_rules! foo\n+            \"##]],\n+        );\n+    }\n+\n     #[test]\n     fn test_super_super_completion() {\n         check("}, {"sha": "cbac88240744e4fc5dbd7eec262694664b25b6e8", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -12,6 +12,14 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.is_path_disallowed() {\n         return;\n     }\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        ctx.scope.process_all_names(&mut |name, def| {\n+            if let ScopeDef::MacroDef(macro_def) = def {\n+                acc.add_macro(ctx, Some(name.to_string()), macro_def);\n+            }\n+        });\n+        return;\n+    }\n \n     if let Some(hir::Adt::Enum(e)) =\n         ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n@@ -647,7 +655,7 @@ fn f() {}\n     }\n \n     #[test]\n-    fn completes_type_or_trait_in_impl_block() {\n+    fn completes_target_type_or_trait_in_impl_block() {\n         check(\n             r#\"\n trait MyTrait {}\n@@ -662,4 +670,21 @@ impl My$0\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn only_completes_macros_in_assoc_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+\n+impl MyStruct {\n+    $0\n+}\n+\"#,\n+            expect![[r#\"\n+                ma foo! macro_rules! foo\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "fbef5440850bd393917115f8864acc7d4f602a1d", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 18, "deletions": 45, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -17,9 +17,8 @@ use text_edit::Indel;\n \n use crate::{\n     patterns::{\n-        for_is_prev2, has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n-        has_impl_parent, has_item_list_or_source_file_parent, has_prev_sibling, has_ref_parent,\n-        has_trait_parent, inside_impl_trait_block, is_in_loop_body, is_match_arm, previous_token,\n+        determine_location, for_is_prev2, has_prev_sibling, inside_impl_trait_block,\n+        is_in_loop_body, is_match_arm, previous_token, ImmediateLocation,\n     },\n     CompletionConfig,\n };\n@@ -30,18 +29,6 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n-/// Direct parent container of the cursor position\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub(crate) enum ImmediateLocation {\n-    Impl,\n-    Trait,\n-    RecordFieldList,\n-    RefPatOrExpr,\n-    IdentPat,\n-    BlockExpr,\n-    ItemList,\n-}\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum PrevSibling {\n     Trait,\n@@ -127,6 +114,7 @@ pub(crate) struct CompletionContext<'a> {\n \n     no_completion_required: bool,\n }\n+\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a RootDatabase,\n@@ -281,34 +269,34 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }\n \n-    pub(crate) fn has_impl_or_trait_parent(&self) -> bool {\n+    pub(crate) fn expects_assoc_item(&self) -> bool {\n         matches!(\n             self.completion_location,\n             Some(ImmediateLocation::Trait) | Some(ImmediateLocation::Impl)\n         )\n     }\n \n-    pub(crate) fn has_block_expr_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::BlockExpr))\n+    pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n     }\n \n-    pub(crate) fn has_item_list_parent(&self) -> bool {\n+    pub(crate) fn expects_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n     }\n \n-    pub(crate) fn has_ident_or_ref_pat_parent(&self) -> bool {\n+    pub(crate) fn has_block_expr_parent(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::BlockExpr))\n+    }\n+\n+    pub(crate) fn expects_ident_pat_or_ref_expr(&self) -> bool {\n         matches!(\n             self.completion_location,\n-            Some(ImmediateLocation::IdentPat) | Some(ImmediateLocation::RefPatOrExpr)\n+            Some(ImmediateLocation::IdentPat) | Some(ImmediateLocation::RefExpr)\n         )\n     }\n \n-    pub(crate) fn has_impl_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n-    }\n-\n-    pub(crate) fn has_field_list_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::RecordFieldList))\n+    pub(crate) fn expect_record_field(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::RecordField))\n     }\n \n     pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n@@ -320,12 +308,11 @@ impl<'a> CompletionContext<'a> {\n             || self.record_pat_syntax.is_some()\n             || self.attribute_under_caret.is_some()\n             || self.mod_declaration_under_caret.is_some()\n-            || self.has_impl_or_trait_parent()\n     }\n \n     fn fill_keyword_patterns(&mut self, file_with_fake_ident: &SyntaxNode, offset: TextSize) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n-        let syntax_element = NodeOrToken::Token(fake_ident_token);\n+        let syntax_element = NodeOrToken::Token(fake_ident_token.clone());\n         self.previous_token = previous_token(syntax_element.clone());\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.is_match_arm = is_match_arm(syntax_element.clone());\n@@ -335,22 +322,6 @@ impl<'a> CompletionContext<'a> {\n             self.prev_sibling = Some(PrevSibling::Trait)\n         }\n \n-        if has_block_expr_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::BlockExpr);\n-        } else if has_bind_pat_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::IdentPat);\n-        } else if has_ref_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::RefPatOrExpr);\n-        } else if has_impl_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::Impl);\n-        } else if has_field_list_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::RecordFieldList);\n-        } else if has_trait_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::Trait);\n-        } else if has_item_list_or_source_file_parent(syntax_element.clone()) {\n-            self.completion_location = Some(ImmediateLocation::ItemList);\n-        }\n-\n         self.mod_declaration_under_caret =\n             find_node_at_offset::<ast::Module>(&file_with_fake_ident, offset)\n                 .filter(|module| module.item_list().is_none());\n@@ -363,6 +334,8 @@ impl<'a> CompletionContext<'a> {\n         let fn_is_prev = self.previous_token_is(T![fn]);\n         let for_is_prev2 = for_is_prev2(syntax_element.clone());\n         self.no_completion_required = (fn_is_prev && !inside_impl_trait_block) || for_is_prev2;\n+\n+        self.completion_location = determine_location(fake_ident_token);\n     }\n \n     fn fill_impl_def(&mut self) {"}, {"sha": "ed289d561137b09f1d13821d6120bf5a3c680924", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 103, "deletions": 70, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -11,96 +11,133 @@ use syntax::{\n #[cfg(test)]\n use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n-pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n-        .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == TRAIT)\n-        .is_some()\n-}\n-#[test]\n-fn test_has_trait_parent() {\n-    check_pattern_is_applicable(r\"trait A { f$0 }\", has_trait_parent);\n+/// Direct parent container of the cursor position\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum ImmediateLocation {\n+    Impl,\n+    Trait,\n+    RecordField,\n+    RefExpr,\n+    IdentPat,\n+    BlockExpr,\n+    ItemList,\n+}\n+\n+pub(crate) fn determine_location(tok: SyntaxToken) -> Option<ImmediateLocation> {\n+    // First \"expand\" the element we are completing to its maximum so that we can check in what\n+    // context it immediately lies. This for example means if the token is a NameRef at the end of\n+    // a path, we want to look at where the path is in the tree.\n+    let node = match tok.parent().and_then(ast::NameLike::cast)? {\n+        ast::NameLike::NameRef(name_ref) => {\n+            if let Some(segment) = name_ref.syntax().parent().and_then(ast::PathSegment::cast) {\n+                let p = segment.parent_path();\n+                if p.parent_path().is_none() {\n+                    p.syntax()\n+                        .ancestors()\n+                        .take_while(|it| it.text_range() == p.syntax().text_range())\n+                        .last()?\n+                } else {\n+                    return None;\n+                }\n+            } else {\n+                return None;\n+            }\n+        }\n+        it @ ast::NameLike::Name(_) | it @ ast::NameLike::Lifetime(_) => it.syntax().clone(),\n+    };\n+    let parent = match node.parent() {\n+        Some(parent) => parent,\n+        // SourceFile\n+        None => {\n+            return match node.kind() {\n+                MACRO_ITEMS | SOURCE_FILE => Some(ImmediateLocation::ItemList),\n+                _ => None,\n+            }\n+        }\n+    };\n+    let res = match_ast! {\n+        match parent {\n+            ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n+            ast::BlockExpr(_it) => ImmediateLocation::BlockExpr,\n+            ast::SourceFile(_it) => ImmediateLocation::ItemList,\n+            ast::ItemList(_it) => ImmediateLocation::ItemList,\n+            ast::RefExpr(_it) => ImmediateLocation::RefExpr,\n+            ast::RefPat(_it) => ImmediateLocation::RefExpr,\n+            ast::RecordField(_it) => ImmediateLocation::RecordField,\n+            ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n+                Some(IMPL) => ImmediateLocation::Impl,\n+                Some(TRAIT) => ImmediateLocation::Trait,\n+                _ => return None,\n+            },\n+            _ => return None,\n+        }\n+    };\n+    Some(res)\n }\n \n-pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n-        .and_then(|it| it.parent())\n-        .filter(|it| it.kind() == IMPL)\n-        .is_some()\n-}\n-#[test]\n-fn test_has_impl_parent() {\n-    check_pattern_is_applicable(r\"impl A { f$0 }\", has_impl_parent);\n+#[cfg(test)]\n+fn check_location(code: &str, loc: ImmediateLocation) {\n+    check_pattern_is_applicable(code, |e| {\n+        assert_eq!(determine_location(e.into_token().expect(\"Expected a token\")), Some(loc));\n+        true\n+    });\n }\n \n-pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n-    // Here we search `impl` keyword up through the all ancestors, unlike in `has_impl_parent`,\n-    // where we only check the first parent with different text range.\n-    element\n-        .ancestors()\n-        .find(|it| it.kind() == IMPL)\n-        .map(|it| ast::Impl::cast(it).unwrap())\n-        .map(|it| it.trait_().is_some())\n-        .unwrap_or(false)\n-}\n #[test]\n-fn test_inside_impl_trait_block() {\n-    check_pattern_is_applicable(r\"impl Foo for Bar { f$0 }\", inside_impl_trait_block);\n-    check_pattern_is_applicable(r\"impl Foo for Bar { fn f$0 }\", inside_impl_trait_block);\n-    check_pattern_is_not_applicable(r\"impl A { f$0 }\", inside_impl_trait_block);\n-    check_pattern_is_not_applicable(r\"impl A { fn f$0 }\", inside_impl_trait_block);\n+fn test_has_trait_parent() {\n+    check_location(r\"trait A { f$0 }\", ImmediateLocation::Trait);\n }\n \n-pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element).filter(|it| it.kind() == RECORD_FIELD_LIST).is_some()\n+#[test]\n+fn test_has_impl_parent() {\n+    check_location(r\"impl A { f$0 }\", ImmediateLocation::Impl);\n }\n #[test]\n fn test_has_field_list_parent() {\n-    check_pattern_is_applicable(r\"struct Foo { f$0 }\", has_field_list_parent);\n-    check_pattern_is_applicable(r\"struct Foo { f$0 pub f: i32}\", has_field_list_parent);\n+    check_location(r\"struct Foo { f$0 }\", ImmediateLocation::RecordField);\n+    check_location(r\"struct Foo { f$0 pub f: i32}\", ImmediateLocation::RecordField);\n }\n \n-pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n-}\n #[test]\n fn test_has_block_expr_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f$0 }\", has_block_expr_parent);\n+    check_location(r\"fn my_fn() { let a = 2; f$0 }\", ImmediateLocation::BlockExpr);\n }\n \n-pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n-    element.ancestors().any(|it| it.kind() == IDENT_PAT)\n+#[test]\n+fn test_has_ident_pat_parent() {\n+    check_location(r\"fn my_fn(m$0) {}\", ImmediateLocation::IdentPat);\n+    check_location(r\"fn my_fn() { let m$0 }\", ImmediateLocation::IdentPat);\n+    check_location(r\"fn my_fn(&m$0) {}\", ImmediateLocation::IdentPat);\n+    check_location(r\"fn my_fn() { let &m$0 }\", ImmediateLocation::IdentPat);\n }\n \n #[test]\n-fn test_has_bind_pat_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn(m$0) {}\", has_bind_pat_parent);\n-    check_pattern_is_applicable(r\"fn my_fn() { let m$0 }\", has_bind_pat_parent);\n+fn test_has_ref_expr_parent() {\n+    check_location(r\"fn my_fn() { let x = &m$0 foo; }\", ImmediateLocation::RefExpr);\n }\n \n-pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == REF_PAT || it.kind() == REF_EXPR)\n-        .is_some()\n-}\n #[test]\n-fn test_has_ref_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn(&m$0) {}\", has_ref_parent);\n-    check_pattern_is_applicable(r\"fn my() { let &m$0 }\", has_ref_parent);\n+fn test_has_item_list_or_source_file_parent() {\n+    check_location(r\"i$0\", ImmediateLocation::ItemList);\n+    check_location(r\"mod foo { f$0 }\", ImmediateLocation::ItemList);\n }\n \n-pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> bool {\n-    match not_same_range_ancestor(element) {\n-        Some(it) => it.kind() == SOURCE_FILE || it.kind() == ITEM_LIST,\n-        None => true,\n-    }\n+pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n+    // Here we search `impl` keyword up through the all ancestors, unlike in `has_impl_parent`,\n+    // where we only check the first parent with different text range.\n+    element\n+        .ancestors()\n+        .find(|it| it.kind() == IMPL)\n+        .map(|it| ast::Impl::cast(it).unwrap())\n+        .map(|it| it.trait_().is_some())\n+        .unwrap_or(false)\n }\n #[test]\n-fn test_has_item_list_or_source_file_parent() {\n-    check_pattern_is_applicable(r\"i$0\", has_item_list_or_source_file_parent);\n-    check_pattern_is_applicable(r\"mod foo { f$0 }\", has_item_list_or_source_file_parent);\n+fn test_inside_impl_trait_block() {\n+    check_pattern_is_applicable(r\"impl Foo for Bar { f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_applicable(r\"impl Foo for Bar { fn f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { fn f$0 }\", inside_impl_trait_block);\n }\n \n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n@@ -160,12 +197,8 @@ pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n-fn not_same_range_ancestor(element: SyntaxElement) -> Option<SyntaxNode> {\n-    element\n-        .ancestors()\n-        .take_while(|it| it.text_range() == element.text_range())\n-        .last()\n-        .and_then(|it| it.parent())\n+pub(crate) fn not_same_range_ancestor(element: SyntaxElement) -> Option<SyntaxNode> {\n+    element.ancestors().skip_while(|it| it.text_range() == element.text_range()).next()\n }\n \n fn previous_non_trivia_token(token: SyntaxToken) -> Option<SyntaxToken> {"}, {"sha": "6656fd725bfb4195530ab9a899fe7329667980c8", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn check_edit_with_config(\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n \n-pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n+pub(crate) fn check_pattern_is_applicable(code: &str, check: impl FnOnce(SyntaxElement) -> bool) {\n     let (db, pos) = position(code);\n \n     let sema = Semantics::new(&db);"}]}