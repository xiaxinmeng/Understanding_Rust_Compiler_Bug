{"sha": "26c1ec300c233caf71e5ff35b52b149e5c98810f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YzFlYzMwMGMyMzNjYWY3MWU1ZmYzNWI1MmIxNDllNWM5ODgxMGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T08:55:29Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T10:49:32Z"}, "message": "Rollup merge of #47277 - tspiteri:log-correctness, r=frewsxcv\n\ndoc: show that `f32::log` and `f64::log` are not correctly rounded\n\nFixes #47273.\n\nOne thing I'm not sure about is whether the \"calculated as `self.ln() / base.ln()`\" bit is being too specific, maybe we do not want to make this such a strong commitment. I think it's fine, but we should not make commitments in the API documentation by accident.\n\nIn case that is removed, the added sentence \"`self.log2()` can ... base 10.\" still makes it amply clear that the `log` methods can be more inaccurate than other methods. If the above clause is removed, this second sentence can be moved to the first paragraph, kind of like the accuracy comment for the [`mul_add`](https://doc.rust-lang.org/std/primitive.f32.html#method.mul_add) method.", "tree": {"sha": "8151e437d55b69e6de4b263d24350eed1c9eba57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8151e437d55b69e6de4b263d24350eed1c9eba57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c1ec300c233caf71e5ff35b52b149e5c98810f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpchzwACgkQ/vbIBR0O\nATxqpw//TimjK3zm2msftWGeqxUeaew4ohgNJCCxEs/wiLVPHZoci0NUySDd3bda\nRNJ8WExROFhh88AUeNLmQ7XbjMlWf/+Vz1UzrTAtbMJC08tH3Y5GMSOSyo38Gk10\nyNb4PtUunkGBRv0sFmKJVt45keceN1YH2NZFhbdsWf/XeuUNLLCC9zz7u6P5k+N2\njaPz2bno/yG0kmHWJoSOvwfIiV0soYjeAuEHQgsTC2eT7VJrCiVePUo2rfW7kkt6\n9Ahv6q0nlZ2NG9A126thlT81rvLt7dbJKNz4Hm408t9tuNpcUGnlorQUXjcXC/Fp\njKfb52HcNEVnTPOsgAJ+NQIc481bKSqugq7XIu1NS2OspQKF3S+apk6cbm6QfCSE\nAey2wtT2DSURnBHkuWZg0xNovd4Ib4bvU1c3CkW2u6M+kOnjmeq2H+5DELL4/2fm\nvCReTJF6rGyvGjMOkNM1eFyg9u+euf48LnLNm3nVyE+miiaQSUifVymgx9tIOmL9\nua9Y+7caEsXBQCx7+jTXdkrLBgAn7Z0KzYeOnx76R3zRMCjb8FWEC3ewM5m3fBpu\nP1LsokPnBR2U0r7cnU8emxRJm/Y0BNA2HG36tCAgnZeMGklqTjrUm9DReRpJoboH\nktOECj+GbW1z5NbxsvdYN4qjLFZpVi1QP8FXqhqHCszoJBTtKxA=\n=Ov/4\n-----END PGP SIGNATURE-----", "payload": "tree 8151e437d55b69e6de4b263d24350eed1c9eba57\nparent 5d0474ad73f2d9268f387726723fff44b88df3f7\nparent 6d82e7814f1a387c0510ee525c6e0ac8fa890c40\nauthor kennytm <kennytm@gmail.com> 1516006529 +0800\ncommitter kennytm <kennytm@gmail.com> 1516013372 +0800\n\nRollup merge of #47277 - tspiteri:log-correctness, r=frewsxcv\n\ndoc: show that `f32::log` and `f64::log` are not correctly rounded\n\nFixes #47273.\n\nOne thing I'm not sure about is whether the \"calculated as `self.ln() / base.ln()`\" bit is being too specific, maybe we do not want to make this such a strong commitment. I think it's fine, but we should not make commitments in the API documentation by accident.\n\nIn case that is removed, the added sentence \"`self.log2()` can ... base 10.\" still makes it amply clear that the `log` methods can be more inaccurate than other methods. If the above clause is removed, this second sentence can be moved to the first paragraph, kind of like the accuracy comment for the [`mul_add`](https://doc.rust-lang.org/std/primitive.f32.html#method.mul_add) method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c1ec300c233caf71e5ff35b52b149e5c98810f", "html_url": "https://github.com/rust-lang/rust/commit/26c1ec300c233caf71e5ff35b52b149e5c98810f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c1ec300c233caf71e5ff35b52b149e5c98810f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d0474ad73f2d9268f387726723fff44b88df3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0474ad73f2d9268f387726723fff44b88df3f7", "html_url": "https://github.com/rust-lang/rust/commit/5d0474ad73f2d9268f387726723fff44b88df3f7"}, {"sha": "6d82e7814f1a387c0510ee525c6e0ac8fa890c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d82e7814f1a387c0510ee525c6e0ac8fa890c40", "html_url": "https://github.com/rust-lang/rust/commit/6d82e7814f1a387c0510ee525c6e0ac8fa890c40"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "5e5695f15ac3faa526ebb33d7fe924d8c9f8b6fe", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/26c1ec300c233caf71e5ff35b52b149e5c98810f/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c1ec300c233caf71e5ff35b52b149e5c98810f/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=26c1ec300c233caf71e5ff35b52b149e5c98810f", "patch": "@@ -472,20 +472,19 @@ impl f32 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n     ///\n+    /// The result may not be correctly rounded owing to implementation details;\n+    /// `self.log2()` can produce more accurate results for base 2, and\n+    /// `self.log10()` can produce more accurate results for base 10.\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let ten = 10.0f32;\n-    /// let two = 2.0f32;\n-    ///\n-    /// // log10(10) - 1 == 0\n-    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();\n+    /// let five = 5.0f32;\n     ///\n-    /// // log2(2) - 1 == 0\n-    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();\n+    /// // log5(5) - 1 == 0\n+    /// let abs_difference = (five.log(5.0) - 1.0).abs();\n     ///\n-    /// assert!(abs_difference_10 <= f32::EPSILON);\n-    /// assert!(abs_difference_2 <= f32::EPSILON);\n+    /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "e4eea745bb77c17bde809aceb03504427b57eca6", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/26c1ec300c233caf71e5ff35b52b149e5c98810f/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c1ec300c233caf71e5ff35b52b149e5c98810f/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=26c1ec300c233caf71e5ff35b52b149e5c98810f", "patch": "@@ -432,18 +432,17 @@ impl f64 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n     ///\n-    /// ```\n-    /// let ten = 10.0_f64;\n-    /// let two = 2.0_f64;\n+    /// The result may not be correctly rounded owing to implementation details;\n+    /// `self.log2()` can produce more accurate results for base 2, and\n+    /// `self.log10()` can produce more accurate results for base 10.\n     ///\n-    /// // log10(10) - 1 == 0\n-    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();\n+    /// ```\n+    /// let five = 5.0_f64;\n     ///\n-    /// // log2(2) - 1 == 0\n-    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();\n+    /// // log5(5) - 1 == 0\n+    /// let abs_difference = (five.log(5.0) - 1.0).abs();\n     ///\n-    /// assert!(abs_difference_10 < 1e-10);\n-    /// assert!(abs_difference_2 < 1e-10);\n+    /// assert!(abs_difference < 1e-10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}]}