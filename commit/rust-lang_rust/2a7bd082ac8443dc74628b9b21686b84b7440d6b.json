{"sha": "2a7bd082ac8443dc74628b9b21686b84b7440d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhN2JkMDgyYWM4NDQzZGM3NDYyOGI5YjIxNjg2Yjg0Yjc0NDBkNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-03T19:29:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-03T19:29:44Z"}, "message": "Auto merge of #29532 - Ryman:cow_path, r=alexcrichton", "tree": {"sha": "b92e07bf88f1267f0d482da72d114ba769f694ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b92e07bf88f1267f0d482da72d114ba769f694ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7bd082ac8443dc74628b9b21686b84b7440d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7bd082ac8443dc74628b9b21686b84b7440d6b", "html_url": "https://github.com/rust-lang/rust/commit/2a7bd082ac8443dc74628b9b21686b84b7440d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7bd082ac8443dc74628b9b21686b84b7440d6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de11d2aa835ff6bbb0a8b6fcef1ff0a1174418b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/de11d2aa835ff6bbb0a8b6fcef1ff0a1174418b3", "html_url": "https://github.com/rust-lang/rust/commit/de11d2aa835ff6bbb0a8b6fcef1ff0a1174418b3"}, {"sha": "f57621535efc5b68d883ef51dc3b324e9ab3d83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57621535efc5b68d883ef51dc3b324e9ab3d83f", "html_url": "https://github.com/rust-lang/rust/commit/f57621535efc5b68d883ef51dc3b324e9ab3d83f"}], "stats": {"total": 105, "additions": 87, "deletions": 18}, "files": [{"sha": "8d07e2b2018ad81ecde7db50a961ccd6a4e195da", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a7bd082ac8443dc74628b9b21686b84b7440d6b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7bd082ac8443dc74628b9b21686b84b7440d6b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=2a7bd082ac8443dc74628b9b21686b84b7440d6b", "patch": "@@ -963,15 +963,15 @@ impl PartialEq for String {\n macro_rules! impl_eq {\n     ($lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> PartialEq<$rhs> for $lhs {\n+        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool { PartialEq::eq(&self[..], &other[..]) }\n             #[inline]\n             fn ne(&self, other: &$rhs) -> bool { PartialEq::ne(&self[..], &other[..]) }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a> PartialEq<$lhs> for $rhs {\n+        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n             #[inline]\n             fn eq(&self, other: &$lhs) -> bool { PartialEq::eq(&self[..], &other[..]) }\n             #[inline]\n@@ -984,24 +984,9 @@ macro_rules! impl_eq {\n impl_eq! { String, str }\n impl_eq! { String, &'a str }\n impl_eq! { Cow<'a, str>, str }\n+impl_eq! { Cow<'a, str>, &'b str }\n impl_eq! { Cow<'a, str>, String }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> PartialEq<&'b str> for Cow<'a, str> {\n-    #[inline]\n-    fn eq(&self, other: &&'b str) -> bool { PartialEq::eq(&self[..], &other[..]) }\n-    #[inline]\n-    fn ne(&self, other: &&'b str) -> bool { PartialEq::ne(&self[..], &other[..]) }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> PartialEq<Cow<'a, str>> for &'b str {\n-    #[inline]\n-    fn eq(&self, other: &Cow<'a, str>) -> bool { PartialEq::eq(&self[..], &other[..]) }\n-    #[inline]\n-    fn ne(&self, other: &Cow<'a, str>) -> bool { PartialEq::ne(&self[..], &other[..]) }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for String {\n     #[inline]"}, {"sha": "9a5852663cb673a2d39cad1d8864e32174a0f4e8", "filename": "src/libstd/path.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2a7bd082ac8443dc74628b9b21686b84b7440d6b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7bd082ac8443dc74628b9b21686b84b7440d6b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=2a7bd082ac8443dc74628b9b21686b84b7440d6b", "patch": "@@ -1166,6 +1166,22 @@ impl<'a> IntoCow<'a, Path> for &'a Path {\n     }\n }\n \n+#[stable(feature = \"cow_from_path\", since = \"1.6.0\")]\n+impl<'a> From<&'a Path> for Cow<'a, Path> {\n+    #[inline]\n+    fn from(s: &'a Path) -> Cow<'a, Path> {\n+        Cow::Borrowed(s)\n+    }\n+}\n+\n+#[stable(feature = \"cow_from_path\", since = \"1.6.0\")]\n+impl<'a> From<PathBuf> for Cow<'a, Path> {\n+    #[inline]\n+    fn from(s: PathBuf) -> Cow<'a, Path> {\n+        Cow::Owned(s)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ToOwned for Path {\n     type Owned = PathBuf;\n@@ -1893,6 +1909,29 @@ impl<'a> IntoIterator for &'a Path {\n     fn into_iter(self) -> Iter<'a> { self.iter() }\n }\n \n+macro_rules! impl_eq {\n+    ($lhs:ty, $rhs: ty) => {\n+        #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n+        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+            #[inline]\n+            fn eq(&self, other: &$rhs) -> bool { <Path as PartialEq>::eq(self, other) }\n+        }\n+\n+        #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n+        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+            #[inline]\n+            fn eq(&self, other: &$lhs) -> bool { <Path as PartialEq>::eq(self, other) }\n+        }\n+\n+    }\n+}\n+\n+impl_eq!(PathBuf, Path);\n+impl_eq!(PathBuf, &'a Path);\n+impl_eq!(Cow<'a, Path>, Path);\n+impl_eq!(Cow<'a, Path>, &'b Path);\n+impl_eq!(Cow<'a, Path>, PathBuf);\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -2002,6 +2041,26 @@ mod tests {\n         assert_eq!(static_cow_path, owned_cow_path);\n     }\n \n+    #[test]\n+    fn into() {\n+        use borrow::Cow;\n+\n+        let static_path = Path::new(\"/home/foo\");\n+        let static_cow_path: Cow<'static, Path> = static_path.into();\n+        let pathbuf = PathBuf::from(\"/home/foo\");\n+\n+        {\n+            let path: &Path = &pathbuf;\n+            let borrowed_cow_path: Cow<Path> = path.into();\n+\n+            assert_eq!(static_cow_path, borrowed_cow_path);\n+        }\n+\n+        let owned_cow_path: Cow<'static, Path> = pathbuf.into();\n+\n+        assert_eq!(static_cow_path, owned_cow_path);\n+    }\n+\n     #[test]\n     #[cfg(unix)]\n     pub fn test_decompositions_unix() {\n@@ -3070,6 +3129,31 @@ mod tests {\n         tfe!(\"/\", \"foo\", \"/\", false);\n     }\n \n+    #[test]\n+    fn test_eq_recievers() {\n+        use borrow::Cow;\n+\n+        let borrowed: &Path = Path::new(\"foo/bar\");\n+        let mut owned: PathBuf = PathBuf::new();\n+        owned.push(\"foo\");\n+        owned.push(\"bar\");\n+        let borrowed_cow: Cow<Path> = borrowed.into();\n+        let owned_cow: Cow<Path> = owned.clone().into();\n+\n+        macro_rules! t {\n+            ($($current:expr),+) => {\n+                $(\n+                    assert_eq!($current, borrowed);\n+                    assert_eq!($current, owned);\n+                    assert_eq!($current, borrowed_cow);\n+                    assert_eq!($current, owned_cow);\n+                )+\n+            }\n+        }\n+\n+        t!(borrowed, owned, borrowed_cow, owned_cow);\n+    }\n+\n     #[test]\n     pub fn test_compare() {\n         use hash::{Hash, Hasher, SipHasher};"}]}