{"sha": "52442d4d8a04f24735f9de120579ba3d997b811b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDQyZDRkOGEwNGYyNDczNWY5ZGUxMjA1NzliYTNkOTk3YjgxMWI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-10T17:47:55Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-11T20:34:39Z"}, "message": "Fix error does not know about free/named lifetimes", "tree": {"sha": "6dd1d61f8f99056fc1bcc0bc06eb2fff10ba84fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd1d61f8f99056fc1bcc0bc06eb2fff10ba84fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52442d4d8a04f24735f9de120579ba3d997b811b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaLuvgAAoJEAF2C0+fU/FUt3UP/1yntTTRYRS+a3dlGbfUOQk3\n5E4qDCPLXDSR+lMfsp2LHpa3N7FhSxBmiXZrGDxaFYIfIF4CwUcD9ZFIlHcnP/mE\npkokxYE1chLiWaPHueui4EIZP9eAyIHmKSX2rm8KqfkKsWs3FnQoxvtiXFJvdMhx\nhpr8wgHVKKr5DBtnwdgHZcS2syN9zLblZwbM+vQVz5SMrhRsmDW/MTBWPI8CVsle\nq8AMyszX5GBg1FDCtWYzGizYZbbcRNJBSmq2ofk0xgLHwGridug1vaj4dmBTzbKI\ngOyy4GifD8tUg/h8PtueLObB5v3Q20lyFGWd27aWgsg1A9wIyp5+hAK/g6bsyfTu\nZBc2tt5kNKxtsbSKvLTjNahRMhY0wKZ/bgwtjelYtsi6cz3B1CoNd9UUfUFpVIaU\nEAYjwWaV8jkI1U4d+5QYyXmt/8I3sLKCWpLvZUvtMlW9aJG7xlcm/bAjYw0O/CQy\nt40D43N27rrfb/ui7DYDw9fE5uYS6FQ51svuDCMM3x8lOg5VTaBS5BlHH/R6HNtk\n8vhdRhEDBLMN2qRVY4qGPJhMzeUA0enWK0Ph0djFNdxFQQ03WHqd/dPvqL2AK0GA\nejkP2stu6zqS4E4aJ7KaBipSFG2RuBURanIo7IA6srGGMRW0r8ZroJ6vInn0T24K\nwpFafBAy2c8L+mpG35V4\n=UKS5\n-----END PGP SIGNATURE-----", "payload": "tree 6dd1d61f8f99056fc1bcc0bc06eb2fff10ba84fc\nparent 15b8fbdfb395315bb082eab793c4b02fa9534aee\nauthor David Wood <david@davidtw.co> 1512928075 +0000\ncommitter David Wood <david@davidtw.co> 1513024479 +0000\n\nFix error does not know about free/named lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52442d4d8a04f24735f9de120579ba3d997b811b", "html_url": "https://github.com/rust-lang/rust/commit/52442d4d8a04f24735f9de120579ba3d997b811b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52442d4d8a04f24735f9de120579ba3d997b811b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15b8fbdfb395315bb082eab793c4b02fa9534aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b8fbdfb395315bb082eab793c4b02fa9534aee", "html_url": "https://github.com/rust-lang/rust/commit/15b8fbdfb395315bb082eab793c4b02fa9534aee"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "33a6588c83b1f8d990e0a7d34820b30e6214f34b", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/52442d4d8a04f24735f9de120579ba3d997b811b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52442d4d8a04f24735f9de120579ba3d997b811b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=52442d4d8a04f24735f9de120579ba3d997b811b", "patch": "@@ -11,7 +11,7 @@\n use syntax_pos::Span;\n use rustc::mir::{BorrowKind, Field, Local, Location, Operand};\n use rustc::mir::{Place, ProjectionElem, Rvalue, StatementKind};\n-use rustc::ty;\n+use rustc::ty::{self, RegionKind};\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::{MirBorrowckCtxt, Context};\n@@ -366,17 +366,32 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 err.emit();\n             },\n             None => {\n-                let mut err = self.tcx\n-                    .path_does_not_live_long_enough(drop_span, \"borrowed value\", Origin::Mir);\n-                err.span_label(proper_span, \"temporary value created here\");\n-                err.span_label(drop_span, \"temporary value dropped here while still borrowed\");\n-                err.note(\"consider using a `let` binding to increase its lifetime\");\n-\n-                if let Some(end) = end_span {\n-                    err.span_label(end, \"temporary value needs to live until here\");\n+                match borrow.region {\n+                    RegionKind::ReEarlyBound(_) | RegionKind::ReFree(_) => {\n+                        let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n+                                                                              \"borrowed value\",\n+                                                                              Origin::Mir);\n+                        err.span_label(proper_span, \"does not live long enough\");\n+                        err.span_label(drop_span, \"temporary value only lives until here\");\n+                        self.tcx.note_and_explain_region(scope_tree, &mut err,\n+                                                         \"borrowed value must be valid for \",\n+                                                         borrow.region, \"...\");\n+                        err.emit();\n+                    },\n+                    _ => {\n+                        let mut err = self.tcx.path_does_not_live_long_enough(drop_span,\n+                                                                              \"borrowed value\",\n+                                                                              Origin::Mir);\n+                        err.span_label(proper_span, \"temporary value created here\");\n+                        err.span_label(drop_span,\n+                                       \"temporary value dropped here while still borrowed\");\n+                        err.note(\"consider using a `let` binding to increase its lifetime\");\n+                        if let Some(end) = end_span {\n+                            err.span_label(end, \"temporary value needs to live until here\");\n+                        }\n+                        err.emit();\n+                    },\n                 }\n-\n-                err.emit();\n             },\n         }\n     }"}]}