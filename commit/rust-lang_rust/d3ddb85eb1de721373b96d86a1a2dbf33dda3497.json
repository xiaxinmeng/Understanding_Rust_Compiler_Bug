{"sha": "d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGRiODVlYjFkZTcyMTM3M2I5NmQ4NmExYTJkYmYzM2RkYTM0OTc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-11-05T11:32:35Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-11-05T11:32:35Z"}, "message": "_match: correct max_slice_length logic\n\nThe logic used to be wildly wrong, but before the HAIR patch its\nwrongness was hidden by another bug.\n\nFixes #37598.", "tree": {"sha": "3eedba999aee942667ab2e81d6414cb3afbf912c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eedba999aee942667ab2e81d6414cb3afbf912c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "html_url": "https://github.com/rust-lang/rust/commit/d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f", "html_url": "https://github.com/rust-lang/rust/commit/81601cd3a393d1cb8ca82eb1b2270d24c5d7724f"}], "stats": {"total": 103, "additions": 95, "deletions": 8}, "files": [{"sha": "e7d3af87bdaa762d33c771a74e309decd665a328", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "patch": "@@ -39,7 +39,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use arena::TypedArena;\n \n-use std::cmp::Ordering;\n+use std::cmp::{self, Ordering};\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator, repeat};\n \n@@ -419,6 +419,52 @@ fn all_constructors(_cx: &mut MatchCheckCtxt, pcx: PatternContext) -> Vec<Constr\n     }\n }\n \n+fn max_slice_length<'a: 'b, 'b, 'tcx, I>(\n+    _cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    patterns: I) -> usize\n+    where I: Iterator<Item=&'b [&'a Pattern<'tcx>]>\n+{\n+    // The exhaustiveness-checking paper does not include any details on\n+    // checking variable-length slice patterns. However, they are matched\n+    // by an infinite collection of fixed-length array patterns.\n+    //\n+    // To check that infinite set, we notice that for every length\n+    // larger than the length of the maximum fixed-length pattern,\n+    // only variable-length patterns apply.\n+    //\n+    // For variable length patterns, all elements after the first\n+    // `prefix_len` but before the last `suffix_len` are matched by\n+    // the wildcard \"middle\" pattern, and therefore can be added/removed\n+    // without affecting the match result.\n+    //\n+    // This means that all patterns with length at least\n+    // `max(max_fixed+1,max_prefix+max_suffix)` are equivalent, so we\n+    // only need to check patterns from that length and below.\n+\n+    let mut max_prefix_len = 0;\n+    let mut max_suffix_len = 0;\n+    let mut max_fixed_len = 0;\n+\n+    for row in patterns {\n+        match *row[0].kind {\n+            PatternKind::Constant { value: ConstVal::ByteStr(ref data) } => {\n+                max_fixed_len = cmp::max(max_fixed_len, data.len());\n+            }\n+            PatternKind::Slice { ref prefix, slice: None, ref suffix } => {\n+                let fixed_len = prefix.len() + suffix.len();\n+                max_fixed_len = cmp::max(max_fixed_len, fixed_len);\n+            }\n+            PatternKind::Slice { ref prefix, slice: Some(_), ref suffix } => {\n+                max_prefix_len = cmp::max(max_prefix_len, prefix.len());\n+                max_suffix_len = cmp::max(max_suffix_len, suffix.len());\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    cmp::max(max_fixed_len + 1, max_prefix_len + max_suffix_len)\n+}\n+\n /// Algorithm from http://moscova.inria.fr/~maranget/papers/warn/index.html\n ///\n /// Whether a vector `v` of patterns is 'useful' in relation to a set of such\n@@ -453,16 +499,12 @@ pub fn is_useful<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n     let &Matrix(ref rows) = matrix;\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n+\n+\n     let pcx = PatternContext {\n         ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error())\n             .unwrap_or(v[0].ty),\n-        max_slice_length: rows.iter().filter_map(|row| match *row[0].kind {\n-            PatternKind::Slice { ref prefix, slice: _, ref suffix } =>\n-                Some(prefix.len() + suffix.len()),\n-            PatternKind::Constant { value: ConstVal::ByteStr(ref data) } =>\n-                Some(data.len()),\n-            _ => None\n-        }).max().map_or(0, |v| v + 1)\n+        max_slice_length: max_slice_length(cx, rows.iter().map(|r| &**r).chain(Some(v)))\n     };\n \n     debug!(\"is_useful_expand_first_col: pcx={:?}, expanding {:?}\", pcx, v[0]);"}, {"sha": "c0fc75f9713a878e8c80c9cd883098b8836c4ac2", "filename": "src/test/compile-fail/match-slice-patterns.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs?ref=d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(advanced_slice_patterns, slice_patterns)]\n+\n+fn check(list: &[Option<()>]) {\n+    match list {\n+    //~^ ERROR `&[None, Some(_), None, _]` and `&[Some(_), Some(_), None, _]` not covered\n+        &[] => {},\n+        &[_] => {},\n+        &[_, _] => {},\n+        &[_, None, ..] => {},\n+        &[.., Some(_), _] => {},\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d32d2fc295440ed12a65be3558fa0c41bb279a05", "filename": "src/test/run-pass/issue-37598.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Ftest%2Frun-pass%2Fissue-37598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ddb85eb1de721373b96d86a1a2dbf33dda3497/src%2Ftest%2Frun-pass%2Fissue-37598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-37598.rs?ref=d3ddb85eb1de721373b96d86a1a2dbf33dda3497", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(advanced_slice_patterns, slice_patterns)]\n+\n+fn check(list: &[u8]) {\n+    match list {\n+        &[] => {},\n+        &[_u1, _u2, ref _next..] => {},\n+        &[_u1] => {},\n+    }\n+}\n+\n+fn main() {}"}]}