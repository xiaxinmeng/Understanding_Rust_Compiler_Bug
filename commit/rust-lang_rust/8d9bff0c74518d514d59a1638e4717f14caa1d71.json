{"sha": "8d9bff0c74518d514d59a1638e4717f14caa1d71", "node_id": "C_kwDOAAsO6NoAKDhkOWJmZjBjNzQ1MThkNTE0ZDU5YTE2MzhlNDcxN2YxNGNhYTFkNzE", "commit": {"author": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-11T00:35:05Z"}, "committer": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-13T17:30:19Z"}, "message": "Add a workspace config-based approach to reloading discovered projects.", "tree": {"sha": "03af8d47e23c64e857a15784aeed2cd67975811f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03af8d47e23c64e857a15784aeed2cd67975811f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9bff0c74518d514d59a1638e4717f14caa1d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9bff0c74518d514d59a1638e4717f14caa1d71", "html_url": "https://github.com/rust-lang/rust/commit/8d9bff0c74518d514d59a1638e4717f14caa1d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9bff0c74518d514d59a1638e4717f14caa1d71/comments", "author": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91371494eec262d6e8966f905497ee2e3c384181", "url": "https://api.github.com/repos/rust-lang/rust/commits/91371494eec262d6e8966f905497ee2e3c384181", "html_url": "https://github.com/rust-lang/rust/commit/91371494eec262d6e8966f905497ee2e3c384181"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "9103ef2f8fd2c4f7d77eeb64ff806ea194f46c4c", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=8d9bff0c74518d514d59a1638e4717f14caa1d71", "patch": "@@ -3,10 +3,10 @@ import * as lc from \"vscode-languageclient/node\";\n import * as vscode from \"vscode\";\n import * as ra from \"../src/lsp_ext\";\n import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n-import { assert } from \"./util\";\n+import { assert, log } from \"./util\";\n import * as diagnostics from \"./diagnostics\";\n import { WorkspaceEdit } from \"vscode\";\n-import { Config, substituteVSCodeVariables } from \"./config\";\n+import { Config, prepareVSCodeConfig } from \"./config\";\n import { randomUUID } from \"crypto\";\n \n export interface Env {\n@@ -95,7 +95,9 @@ export async function createClient(\n                     const resp = await next(params, token);\n                     if (resp && Array.isArray(resp)) {\n                         return resp.map((val) => {\n-                            return substituteVSCodeVariables(val);\n+                            return prepareVSCodeConfig(val, (key, cfg) => {\n+                                cfg[key] = config.discoveredWorkspaces;\n+                            });\n                         });\n                     } else {\n                         return resp;"}, {"sha": "8a953577e99d368d8ead2bf5f03714a3447d6f93", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=8d9bff0c74518d514d59a1638e4717f14caa1d71", "patch": "@@ -758,14 +758,20 @@ export function addProject(ctx: CtxInit): Cmd {\n \n         const workspaces: JsonProject[] = await Promise.all(\n             vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n-                return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, {\n+                const rustDocuments = vscode.workspace.textDocuments.filter(isRustDocument);\n+                return discoverWorkspace(rustDocuments, discoverProjectCommand, {\n                     cwd: folder.uri.fsPath,\n                 });\n             })\n         );\n \n-        await ctx.client.sendRequest(ra.addProject, {\n-            project: workspaces,\n+        ctx.addToDiscoveredWorkspaces(workspaces);\n+\n+        // this is a workaround to avoid needing writing the `rust-project.json` into\n+        // a workspace-level VS Code-specific settings folder. We'd like to keep the\n+        // `rust-project.json` entirely in-memory.\n+        await ctx.client?.sendNotification(lc.DidChangeConfigurationNotification.type, {\n+            settings: \"\",\n         });\n     };\n }"}, {"sha": "754037254791f74bb293fa71989ccda625b51399", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=8d9bff0c74518d514d59a1638e4717f14caa1d71", "patch": "@@ -34,6 +34,7 @@ export class Config {\n \n     constructor(ctx: vscode.ExtensionContext) {\n         this.globalStorageUri = ctx.globalStorageUri;\n+        this.discoveredWorkspaces = [];\n         vscode.workspace.onDidChangeConfiguration(\n             this.onDidChangeConfiguration,\n             this,\n@@ -55,6 +56,8 @@ export class Config {\n         log.info(\"Using configuration\", Object.fromEntries(cfg));\n     }\n \n+    public discoveredWorkspaces: JsonProject[];\n+\n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n         this.refreshLogging();\n \n@@ -191,7 +194,7 @@ export class Config {\n      * So this getter handles this quirk by not requiring the caller to use postfix `!`\n      */\n     private get<T>(path: string): T | undefined {\n-        return substituteVSCodeVariables(this.cfg.get<T>(path));\n+        return prepareVSCodeConfig(this.cfg.get<T>(path));\n     }\n \n     get serverPath() {\n@@ -284,18 +287,24 @@ export class Config {\n     }\n }\n \n-export function substituteVSCodeVariables<T>(resp: T): T {\n+export function prepareVSCodeConfig<T>(\n+    resp: T,\n+    cb?: (key: Extract<keyof T, string>, res: { [key: string]: any }) => void\n+): T {\n     if (Is.string(resp)) {\n         return substituteVSCodeVariableInString(resp) as T;\n     } else if (resp && Is.array<any>(resp)) {\n         return resp.map((val) => {\n-            return substituteVSCodeVariables(val);\n+            return prepareVSCodeConfig(val);\n         }) as T;\n     } else if (resp && typeof resp === \"object\") {\n         const res: { [key: string]: any } = {};\n         for (const key in resp) {\n             const val = resp[key];\n-            res[key] = substituteVSCodeVariables(val);\n+            res[key] = prepareVSCodeConfig(val);\n+            if (cb) {\n+                cb(key, res);\n+            }\n         }\n         return res as T;\n     }"}, {"sha": "ca30d239c95d0eff7ea975e95583aaf7f095688c", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bff0c74518d514d59a1638e4717f14caa1d71/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8d9bff0c74518d514d59a1638e4717f14caa1d71", "patch": "@@ -2,7 +2,7 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n \n-import { Config, substituteVSCodeVariables } from \"./config\";\n+import { Config, prepareVSCodeConfig } from \"./config\";\n import { createClient } from \"./client\";\n import {\n     executeDiscoverProject,\n@@ -54,7 +54,7 @@ export async function discoverWorkspace(\n     command: string[],\n     options: ExecOptions\n ): Promise<JsonProject> {\n-    const paths = files.map((f) => f.uri.fsPath).join(\" \");\n+    const paths = files.map((f) => `\"${f.uri.fsPath}\"`).join(\" \");\n     const joinedCommand = command.join(\" \");\n     const data = await executeDiscoverProject(`${joinedCommand} ${paths}`, options);\n     return JSON.parse(data) as JsonProject;\n@@ -71,7 +71,7 @@ export type CtxInit = Ctx & {\n \n export class Ctx {\n     readonly statusBar: vscode.StatusBarItem;\n-    readonly config: Config;\n+    config: Config;\n     readonly workspace: Workspace;\n \n     private _client: lc.LanguageClient | undefined;\n@@ -82,7 +82,6 @@ export class Ctx {\n     private state: PersistentState;\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n-    private discoveredWorkspaces: JsonProject[] | undefined;\n \n     get client() {\n         return this._client;\n@@ -193,20 +192,24 @@ export class Ctx {\n             if (discoverProjectCommand) {\n                 const workspaces: JsonProject[] = await Promise.all(\n                     vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n-                        return discoverWorkspace(\n-                            vscode.workspace.textDocuments,\n-                            discoverProjectCommand,\n-                            { cwd: folder.uri.fsPath }\n-                        );\n+                        const rustDocuments = vscode.workspace.textDocuments.filter(isRustDocument);\n+                        return discoverWorkspace(rustDocuments, discoverProjectCommand, {\n+                            cwd: folder.uri.fsPath,\n+                        });\n                     })\n                 );\n \n-                this.discoveredWorkspaces = workspaces;\n+                this.addToDiscoveredWorkspaces(workspaces);\n             }\n \n-            const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n-            // this appears to be load-bearing, for better or worse.\n-            await initializationOptions.update(\"linkedProjects\", this.discoveredWorkspaces);\n+            const initializationOptions = prepareVSCodeConfig(\n+                rawInitializationOptions,\n+                (key, obj) => {\n+                    if (key === \"linkedProjects\") {\n+                        obj[\"linkedProjects\"] = this.config.discoveredWorkspaces;\n+                    }\n+                }\n+            );\n \n             this._client = await createClient(\n                 this.traceOutputChannel,\n@@ -288,6 +291,17 @@ export class Ctx {\n         return this._serverPath;\n     }\n \n+    addToDiscoveredWorkspaces(workspaces: JsonProject[]) {\n+        for (const workspace of workspaces) {\n+            const index = this.config.discoveredWorkspaces.indexOf(workspace);\n+            if (~index) {\n+                this.config.discoveredWorkspaces[index] = workspace;\n+            } else {\n+                this.config.discoveredWorkspaces.push(workspace);\n+            }\n+        }\n+    }\n+\n     private updateCommands(forceDisable?: \"disable\") {\n         this.commandDisposables.forEach((disposable) => disposable.dispose());\n         this.commandDisposables = [];"}]}