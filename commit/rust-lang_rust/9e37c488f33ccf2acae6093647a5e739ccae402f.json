{"sha": "9e37c488f33ccf2acae6093647a5e739ccae402f", "node_id": "C_kwDOAAsO6NoAKDllMzdjNDg4ZjMzY2NmMmFjYWU2MDkzNjQ3YTVlNzM5Y2NhZTQwMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T23:40:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T23:40:30Z"}, "message": "Auto merge of #2395 - RalfJung:upcast, r=RalfJung\n\nadd some dyn upcasting tests\n\nCopied from the rustc test suite.", "tree": {"sha": "e0fbd80991d23b799268aab54bac2a6c0b1445da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0fbd80991d23b799268aab54bac2a6c0b1445da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e37c488f33ccf2acae6093647a5e739ccae402f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e37c488f33ccf2acae6093647a5e739ccae402f", "html_url": "https://github.com/rust-lang/rust/commit/9e37c488f33ccf2acae6093647a5e739ccae402f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e37c488f33ccf2acae6093647a5e739ccae402f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "html_url": "https://github.com/rust-lang/rust/commit/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd"}, {"sha": "4d220c31a4aa1567d66263b368554ef160a9e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d220c31a4aa1567d66263b368554ef160a9e01e", "html_url": "https://github.com/rust-lang/rust/commit/4d220c31a4aa1567d66263b368554ef160a9e01e"}], "stats": {"total": 418, "additions": 418, "deletions": 0}, "files": [{"sha": "030c2a7cbf627899956f302c2c7299263fff949a", "filename": "tests/pass/upcast.rs", "status": "added", "additions": 418, "deletions": 0, "changes": 418, "blob_url": "https://github.com/rust-lang/rust/blob/9e37c488f33ccf2acae6093647a5e739ccae402f/tests%2Fpass%2Fupcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e37c488f33ccf2acae6093647a5e739ccae402f/tests%2Fpass%2Fupcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fupcast.rs?ref=9e37c488f33ccf2acae6093647a5e739ccae402f", "patch": "@@ -0,0 +1,418 @@\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    basic();\n+    diamond();\n+    struct_();\n+    replace_vptr();\n+}\n+\n+fn basic() {\n+    trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+        fn a(&self) -> i32 {\n+            10\n+        }\n+\n+        fn z(&self) -> i32 {\n+            11\n+        }\n+\n+        fn y(&self) -> i32 {\n+            12\n+        }\n+    }\n+\n+    trait Bar: Foo {\n+        fn b(&self) -> i32 {\n+            20\n+        }\n+\n+        fn w(&self) -> i32 {\n+            21\n+        }\n+    }\n+\n+    trait Baz: Bar {\n+        fn c(&self) -> i32 {\n+            30\n+        }\n+    }\n+\n+    impl Foo for i32 {\n+        fn a(&self) -> i32 {\n+            100\n+        }\n+    }\n+\n+    impl Bar for i32 {\n+        fn b(&self) -> i32 {\n+            200\n+        }\n+    }\n+\n+    impl Baz for i32 {\n+        fn c(&self) -> i32 {\n+            300\n+        }\n+    }\n+\n+    let baz: &dyn Baz = &1;\n+    let _: &dyn std::fmt::Debug = baz;\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+\n+    let bar: &dyn Bar = baz;\n+    let _: &dyn std::fmt::Debug = bar;\n+    assert_eq!(*bar, 1);\n+    assert_eq!(bar.a(), 100);\n+    assert_eq!(bar.b(), 200);\n+    assert_eq!(bar.z(), 11);\n+    assert_eq!(bar.y(), 12);\n+    assert_eq!(bar.w(), 21);\n+\n+    let foo: &dyn Foo = baz;\n+    let _: &dyn std::fmt::Debug = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+\n+    let foo: &dyn Foo = bar;\n+    let _: &dyn std::fmt::Debug = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+    assert_eq!(foo.z(), 11);\n+    assert_eq!(foo.y(), 12);\n+}\n+\n+fn diamond() {\n+    trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+        fn a(&self) -> i32 {\n+            10\n+        }\n+\n+        fn z(&self) -> i32 {\n+            11\n+        }\n+\n+        fn y(&self) -> i32 {\n+            12\n+        }\n+    }\n+\n+    trait Bar1: Foo {\n+        fn b(&self) -> i32 {\n+            20\n+        }\n+\n+        fn w(&self) -> i32 {\n+            21\n+        }\n+    }\n+\n+    trait Bar2: Foo {\n+        fn c(&self) -> i32 {\n+            30\n+        }\n+\n+        fn v(&self) -> i32 {\n+            31\n+        }\n+    }\n+\n+    trait Baz: Bar1 + Bar2 {\n+        fn d(&self) -> i32 {\n+            40\n+        }\n+    }\n+\n+    impl Foo for i32 {\n+        fn a(&self) -> i32 {\n+            100\n+        }\n+    }\n+\n+    impl Bar1 for i32 {\n+        fn b(&self) -> i32 {\n+            200\n+        }\n+    }\n+\n+    impl Bar2 for i32 {\n+        fn c(&self) -> i32 {\n+            300\n+        }\n+    }\n+\n+    impl Baz for i32 {\n+        fn d(&self) -> i32 {\n+            400\n+        }\n+    }\n+\n+    let baz: &dyn Baz = &1;\n+    let _: &dyn std::fmt::Debug = baz;\n+    assert_eq!(*baz, 1);\n+    assert_eq!(baz.a(), 100);\n+    assert_eq!(baz.b(), 200);\n+    assert_eq!(baz.c(), 300);\n+    assert_eq!(baz.d(), 400);\n+    assert_eq!(baz.z(), 11);\n+    assert_eq!(baz.y(), 12);\n+    assert_eq!(baz.w(), 21);\n+    assert_eq!(baz.v(), 31);\n+\n+    let bar1: &dyn Bar1 = baz;\n+    let _: &dyn std::fmt::Debug = bar1;\n+    assert_eq!(*bar1, 1);\n+    assert_eq!(bar1.a(), 100);\n+    assert_eq!(bar1.b(), 200);\n+    assert_eq!(bar1.z(), 11);\n+    assert_eq!(bar1.y(), 12);\n+    assert_eq!(bar1.w(), 21);\n+\n+    let bar2: &dyn Bar2 = baz;\n+    let _: &dyn std::fmt::Debug = bar2;\n+    assert_eq!(*bar2, 1);\n+    assert_eq!(bar2.a(), 100);\n+    assert_eq!(bar2.c(), 300);\n+    assert_eq!(bar2.z(), 11);\n+    assert_eq!(bar2.y(), 12);\n+    assert_eq!(bar2.v(), 31);\n+\n+    let foo: &dyn Foo = baz;\n+    let _: &dyn std::fmt::Debug = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+\n+    let foo: &dyn Foo = bar1;\n+    let _: &dyn std::fmt::Debug = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+\n+    let foo: &dyn Foo = bar2;\n+    let _: &dyn std::fmt::Debug = foo;\n+    assert_eq!(*foo, 1);\n+    assert_eq!(foo.a(), 100);\n+}\n+\n+fn struct_() {\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n+        fn a(&self) -> i32 {\n+            10\n+        }\n+\n+        fn z(&self) -> i32 {\n+            11\n+        }\n+\n+        fn y(&self) -> i32 {\n+            12\n+        }\n+    }\n+\n+    trait Bar: Foo {\n+        fn b(&self) -> i32 {\n+            20\n+        }\n+\n+        fn w(&self) -> i32 {\n+            21\n+        }\n+    }\n+\n+    trait Baz: Bar {\n+        fn c(&self) -> i32 {\n+            30\n+        }\n+    }\n+\n+    impl Foo for i32 {\n+        fn a(&self) -> i32 {\n+            100\n+        }\n+    }\n+\n+    impl Bar for i32 {\n+        fn b(&self) -> i32 {\n+            200\n+        }\n+    }\n+\n+    impl Baz for i32 {\n+        fn c(&self) -> i32 {\n+            300\n+        }\n+    }\n+\n+    fn test_box() {\n+        let v = Box::new(1);\n+\n+        let baz: Box<dyn Baz> = v.clone();\n+        assert_eq!(*baz, 1);\n+        assert_eq!(baz.a(), 100);\n+        assert_eq!(baz.b(), 200);\n+        assert_eq!(baz.c(), 300);\n+        assert_eq!(baz.z(), 11);\n+        assert_eq!(baz.y(), 12);\n+        assert_eq!(baz.w(), 21);\n+\n+        let baz: Box<dyn Baz> = v.clone();\n+        let bar: Box<dyn Bar> = baz;\n+        assert_eq!(*bar, 1);\n+        assert_eq!(bar.a(), 100);\n+        assert_eq!(bar.b(), 200);\n+        assert_eq!(bar.z(), 11);\n+        assert_eq!(bar.y(), 12);\n+        assert_eq!(bar.w(), 21);\n+\n+        let baz: Box<dyn Baz> = v.clone();\n+        let foo: Box<dyn Foo> = baz;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+\n+        let baz: Box<dyn Baz> = v.clone();\n+        let bar: Box<dyn Bar> = baz;\n+        let foo: Box<dyn Foo> = bar;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+    }\n+\n+    fn test_rc() {\n+        let v = Rc::new(1);\n+\n+        let baz: Rc<dyn Baz> = v.clone();\n+        assert_eq!(*baz, 1);\n+        assert_eq!(baz.a(), 100);\n+        assert_eq!(baz.b(), 200);\n+        assert_eq!(baz.c(), 300);\n+        assert_eq!(baz.z(), 11);\n+        assert_eq!(baz.y(), 12);\n+        assert_eq!(baz.w(), 21);\n+\n+        let baz: Rc<dyn Baz> = v.clone();\n+        let bar: Rc<dyn Bar> = baz;\n+        assert_eq!(*bar, 1);\n+        assert_eq!(bar.a(), 100);\n+        assert_eq!(bar.b(), 200);\n+        assert_eq!(bar.z(), 11);\n+        assert_eq!(bar.y(), 12);\n+        assert_eq!(bar.w(), 21);\n+\n+        let baz: Rc<dyn Baz> = v.clone();\n+        let foo: Rc<dyn Foo> = baz;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+\n+        let baz: Rc<dyn Baz> = v.clone();\n+        let bar: Rc<dyn Bar> = baz;\n+        let foo: Rc<dyn Foo> = bar;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+    }\n+\n+    fn test_arc() {\n+        let v = Arc::new(1);\n+\n+        let baz: Arc<dyn Baz> = v.clone();\n+        assert_eq!(*baz, 1);\n+        assert_eq!(baz.a(), 100);\n+        assert_eq!(baz.b(), 200);\n+        assert_eq!(baz.c(), 300);\n+        assert_eq!(baz.z(), 11);\n+        assert_eq!(baz.y(), 12);\n+        assert_eq!(baz.w(), 21);\n+\n+        let baz: Arc<dyn Baz> = v.clone();\n+        let bar: Arc<dyn Bar> = baz;\n+        assert_eq!(*bar, 1);\n+        assert_eq!(bar.a(), 100);\n+        assert_eq!(bar.b(), 200);\n+        assert_eq!(bar.z(), 11);\n+        assert_eq!(bar.y(), 12);\n+        assert_eq!(bar.w(), 21);\n+\n+        let baz: Arc<dyn Baz> = v.clone();\n+        let foo: Arc<dyn Foo> = baz;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+\n+        let baz: Arc<dyn Baz> = v.clone();\n+        let bar: Arc<dyn Bar> = baz;\n+        let foo: Arc<dyn Foo> = bar;\n+        assert_eq!(*foo, 1);\n+        assert_eq!(foo.a(), 100);\n+        assert_eq!(foo.z(), 11);\n+        assert_eq!(foo.y(), 12);\n+    }\n+\n+    test_box();\n+    test_rc();\n+    test_arc();\n+}\n+\n+fn replace_vptr() {\n+    trait A {\n+        fn foo_a(&self);\n+    }\n+\n+    trait B {\n+        fn foo_b(&self);\n+    }\n+\n+    trait C: A + B {\n+        fn foo_c(&self);\n+    }\n+\n+    struct S(i32);\n+\n+    impl A for S {\n+        fn foo_a(&self) {\n+            unreachable!();\n+        }\n+    }\n+\n+    impl B for S {\n+        fn foo_b(&self) {\n+            assert_eq!(42, self.0);\n+        }\n+    }\n+\n+    impl C for S {\n+        fn foo_c(&self) {\n+            unreachable!();\n+        }\n+    }\n+\n+    fn invoke_inner(b: &dyn B) {\n+        b.foo_b();\n+    }\n+\n+    fn invoke_outer(c: &dyn C) {\n+        invoke_inner(c);\n+    }\n+\n+    let s = S(42);\n+    invoke_outer(&s);\n+}"}]}