{"sha": "7fc689305cd38a0168ed5b139f4c118f81e2217e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzY4OTMwNWNkMzhhMDE2OGVkNWIxMzlmNGMxMThmODFlMjIxN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-07T04:31:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-07T04:31:08Z"}, "message": "auto merge of #10328 : alexcrichton/rust/snapshots, r=thestinger", "tree": {"sha": "e080c40d7bf2f36b2a0af310efea37efe2e5ff7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e080c40d7bf2f36b2a0af310efea37efe2e5ff7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc689305cd38a0168ed5b139f4c118f81e2217e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc689305cd38a0168ed5b139f4c118f81e2217e", "html_url": "https://github.com/rust-lang/rust/commit/7fc689305cd38a0168ed5b139f4c118f81e2217e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc689305cd38a0168ed5b139f4c118f81e2217e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22eb11c09ba8939ab06351eb5d14b355f632e197", "url": "https://api.github.com/repos/rust-lang/rust/commits/22eb11c09ba8939ab06351eb5d14b355f632e197", "html_url": "https://github.com/rust-lang/rust/commit/22eb11c09ba8939ab06351eb5d14b355f632e197"}, {"sha": "4b770446b419e06d020c04ceb6ac7b8a63d2844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b770446b419e06d020c04ceb6ac7b8a63d2844d", "html_url": "https://github.com/rust-lang/rust/commit/4b770446b419e06d020c04ceb6ac7b8a63d2844d"}], "stats": {"total": 188, "additions": 18, "deletions": 170}, "files": [{"sha": "06f66a014ddeea0989bee947337c551052d8fde1", "filename": "src/libstd/any.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -23,28 +23,13 @@ use util::Void;\n ///////////////////////////////////////////////////////////////////////////////\n \n /// `TypeId` represents a globally unique identifier for a type\n-#[cfg(stage0)]\n-pub struct TypeId {\n-    priv t: *intrinsics::TyDesc,\n-}\n-\n-/// `TypeId` represents a globally unique identifier for a type\n-#[cfg(not(stage0))]\n pub struct TypeId {\n     priv t: u64,\n }\n \n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n     #[inline]\n-    #[cfg(stage0)]\n-    pub fn of<T: 'static>() -> TypeId {\n-        TypeId{ t: unsafe { intrinsics::get_tydesc::<T>() } }\n-    }\n-\n-    /// Returns the `TypeId` of the type this generic function has been instantiated with\n-    #[inline]\n-    #[cfg(not(stage0))]\n     pub fn of<T: 'static>() -> TypeId {\n         TypeId{ t: unsafe { intrinsics::type_id::<T>() } }\n     }"}, {"sha": "29ae88272a456c6258aa6185613cd988f7104113", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -87,35 +87,6 @@ pub fn is_not_null<T,P:RawPtr<T>>(ptr: P) -> bool { ptr.is_not_null() }\n  * and destination may overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\", stage0)]\n-pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n-    intrinsics::memmove32(dst,\n-                          cast::transmute_immut_unsafe(src),\n-                          count as u32);\n-}\n-\n-/**\n- * Copies data from one location to another.\n- *\n- * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n- */\n-#[inline]\n-#[cfg(target_word_size = \"64\", stage0)]\n-pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n-    intrinsics::memmove64(dst,\n-                          cast::transmute_immut_unsafe(src),\n-                          count as u64);\n-}\n-\n-/**\n- * Copies data from one location to another.\n- *\n- * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n- */\n-#[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n     intrinsics::copy_memory(dst, cast::transmute_immut_unsafe(src), count)\n }\n@@ -127,39 +98,6 @@ pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n  * and destination may *not* overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\", stage0)]\n-pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n-                                                        src: P,\n-                                                        count: uint) {\n-    intrinsics::memcpy32(dst,\n-                         cast::transmute_immut_unsafe(src),\n-                         count as u32);\n-}\n-\n-/**\n- * Copies data from one location to another.\n- *\n- * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may *not* overlap.\n- */\n-#[inline]\n-#[cfg(target_word_size = \"64\", stage0)]\n-pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n-                                                        src: P,\n-                                                        count: uint) {\n-    intrinsics::memcpy64(dst,\n-                         cast::transmute_immut_unsafe(src),\n-                         count as u64);\n-}\n-\n-/**\n- * Copies data from one location to another.\n- *\n- * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may *not* overlap.\n- */\n-#[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n                                                         src: P,\n                                                         count: uint) {\n@@ -171,27 +109,6 @@ pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n  * bytes of memory starting at `dst` to `c`.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\", stage0)]\n-pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    intrinsics::memset32(dst, c, count as u32);\n-}\n-\n-/**\n- * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n- * bytes of memory starting at `dst` to `c`.\n- */\n-#[inline]\n-#[cfg(target_word_size = \"64\", stage0)]\n-pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    intrinsics::memset64(dst, c, count as u64);\n-}\n-\n-/**\n- * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n- * bytes of memory starting at `dst` to `c`.\n- */\n-#[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n     intrinsics::set_memory(dst, c, count)\n }"}, {"sha": "164dc75a5151d560bf26b94ea8cf6800daf29e8a", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -382,13 +382,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_fn_output(&mut self, retstyle: uint, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_fn_output(retstyle, inner) { return false; }\n-        true\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn visit_fn_output(&mut self, retstyle: uint, variadic: bool, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_fn_output(retstyle, variadic, inner) { return false; }\n         true"}, {"sha": "e939be64d739a433a627b3863da947fe9de25f8c", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -572,18 +572,6 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         true\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_fn_output(&mut self, _retstyle: uint, inner: *TyDesc) -> bool {\n-        self.writer.write(\")\".as_bytes());\n-        let name = unsafe { (*inner).name };\n-        if name != \"()\" {\n-            self.writer.write(\" -> \".as_bytes());\n-            self.writer.write(name.as_bytes());\n-        }\n-        true\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn visit_fn_output(&mut self, _retstyle: uint, variadic: bool, inner: *TyDesc) -> bool {\n         if variadic {\n             self.writer.write(\", ...\".as_bytes());"}, {"sha": "59d1740acc09d3b89b8ed7c440220a177ca2939e", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -160,9 +160,6 @@ pub trait TyVisitor {\n     fn visit_enter_fn(&mut self, purity: uint, proto: uint,\n                       n_inputs: uint, retstyle: uint) -> bool;\n     fn visit_fn_input(&mut self, i: uint, mode: uint, inner: *TyDesc) -> bool;\n-    #[cfg(stage0)]\n-    fn visit_fn_output(&mut self, retstyle: uint, inner: *TyDesc) -> bool;\n-    #[cfg(not(stage0))]\n     fn visit_fn_output(&mut self, retstyle: uint, variadic: bool, inner: *TyDesc) -> bool;\n     fn visit_leave_fn(&mut self, purity: uint, proto: uint,\n                       n_inputs: uint, retstyle: uint) -> bool;\n@@ -313,7 +310,6 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n-    #[cfg(not(stage0))]\n     pub fn type_id<T: 'static>() -> u64;\n \n     /// Create a value initialized to zero.\n@@ -337,11 +333,6 @@ extern \"rust-intrinsic\" {\n     pub fn needs_drop<T>() -> bool;\n \n     /// Returns `true` if a type is managed (will be allocated on the local heap)\n-    #[cfg(stage0)]\n-    pub fn contains_managed<T>() -> bool;\n-\n-    /// Returns `true` if a type is managed (will be allocated on the local heap)\n-    #[cfg(not(stage0))]\n     pub fn owns_managed<T>() -> bool;\n \n     pub fn visit_tydesc(td: *TyDesc, tv: &mut TyVisitor);\n@@ -357,40 +348,19 @@ extern \"rust-intrinsic\" {\n     /// integer, since the conversion would throw away aliasing information.\n     pub fn offset<T>(dst: *T, offset: int) -> *T;\n \n-    /// Equivalent to the `llvm.memcpy.p0i8.0i8.i32` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memcpy32<T>(dst: *mut T, src: *T, count: u32);\n-    /// Equivalent to the `llvm.memcpy.p0i8.0i8.i64` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memcpy64<T>(dst: *mut T, src: *T, count: u64);\n-\n-    /// Equivalent to the `llvm.memmove.p0i8.0i8.i32` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memmove32<T>(dst: *mut T, src: *T, count: u32);\n-    /// Equivalent to the `llvm.memmove.p0i8.0i8.i64` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memmove64<T>(dst: *mut T, src: *T, count: u64);\n-\n-    /// Equivalent to the `llvm.memset.p0i8.i32` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memset32<T>(dst: *mut T, val: u8, count: u32);\n-    /// Equivalent to the `llvm.memset.p0i8.i64` intrinsic, with a size of\n-    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n-    #[cfg(stage0)]\n-    pub fn memset64<T>(dst: *mut T, val: u8, count: u64);\n-\n-    #[cfg(not(stage0))]\n+    /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n+    /// a size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`\n     pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *T, count: uint);\n \n-    #[cfg(not(stage0))]\n+    /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n+    /// a size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`\n     pub fn copy_memory<T>(dst: *mut T, src: *T, count: uint);\n \n-    #[cfg(not(stage0))]\n+    /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n+    /// size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`\n     pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n \n     pub fn sqrtf32(x: f32) -> f32;"}, {"sha": "194a72bad6fd1f96ffce84bcab46ea3aad3a0169", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -121,19 +121,11 @@ use mem::size_of;\n use uint;\n use unstable::finally::Finally;\n use unstable::intrinsics;\n-use unstable::intrinsics::{get_tydesc};\n+use unstable::intrinsics::{get_tydesc, owns_managed};\n use unstable::raw::{Box, Repr, Slice, Vec};\n use vec;\n use util;\n \n-#[cfg(not(stage0))]\n-use unstable::intrinsics::owns_managed;\n-\n-#[cfg(stage0)]\n-unsafe fn owns_managed<T>() -> bool {\n-    intrinsics::contains_managed::<T>()\n-}\n-\n /**\n  * Creates and initializes an owned vector.\n  *\n@@ -2066,13 +2058,8 @@ pub mod raw {\n     use unstable::intrinsics;\n     use vec::{with_capacity, ImmutableVector, MutableVector};\n     use unstable::raw::{Box, Vec, Slice};\n-\n-    #[cfg(not(stage0))]\n     use unstable::intrinsics::owns_managed;\n \n-    #[cfg(stage0)]\n-    use vec::owns_managed;\n-\n     /**\n      * Sets the length of a vector\n      *"}, {"sha": "6031db7c155664a240b164aaf6026d8de1575cd4", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7fc689305cd38a0168ed5b139f4c118f81e2217e/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=7fc689305cd38a0168ed5b139f4c118f81e2217e", "patch": "@@ -1,3 +1,11 @@\n+S 2013-11-06 fdc830d\n+  freebsd-x86_64 ef38f3acf8d05eda3c9f21e75c2bbd2f90a614a3\n+  linux-i386 6ad20f6722c15a71fe7654d187dc431e26c1da6f\n+  linux-x86_64 699b4bef2eff078ae6cfaac093c580b322dc769c\n+  macos-i386 8c9d906116359bc665d8ad04ce117b9f5a8a9ae2\n+  macos-x86_64 1954f546017639f7ff4cc584120ba41c29c790d2\n+  winnt-i386 ce528f85f1470b3183c1e310452103c0c7f89751\n+\n S 2013-11-01 8ea2123\n   freebsd-x86_64 bc7dea1ca297cfb4bd6d8a32185c6a4fddca3e6b\n   linux-i386 4b33599d160d757f6021ff05d0213fba3097dde2"}]}