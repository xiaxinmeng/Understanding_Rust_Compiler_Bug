{"sha": "f14e746b2fb11c638904247ef6764f83448de641", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNGU3NDZiMmZiMTFjNjM4OTA0MjQ3ZWY2NzY0ZjgzNDQ4ZGU2NDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-23T15:36:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:08Z"}, "message": "Enable const prop to also evaluate constants, not just literals", "tree": {"sha": "d589a6de761d0c97e1d6d6a3e8426cb6e04e9e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d589a6de761d0c97e1d6d6a3e8426cb6e04e9e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14e746b2fb11c638904247ef6764f83448de641", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53AACgkQpp+NIls6\n19k/wQ/+LuEVuYqBvFWmhQDSKjeILpVfLm5QaN7+NnHULb6Hd+UGQmN4AeDJjzfu\ns/JBzo9/SmU6oRPypDeqtXUuPYvET7JzZaMTbwZEXWlgsYM5Mxe0dfMFt9M6AnG2\nL6Upvl34jmbJWopScK9g4oxFg+m4k9EDqHm4RLscfDyr9HAKcLkKVRi9ygEegHoF\nhk+gv34y+1c3pXxYsU93PsRcntNMq5WjdxVZS71jZdrjg3H1nDnF0MGc6tB3Cu/i\n/TvNZjiPLpueV3uthYUJEEXAgnVixOYs0dAAEpOJ03xOBE7POCmnwmLF0SmFjh/Z\nFOrcMEhxDUtelIr4R4agZ9t8xNgQMQrHZPww+QNRYlcqZDkWXblrMkH95UtRoDSy\nne671zL4LATWk9ceyLkL8Zep6wvVrtbHOmVX7ThgPx5DPjnQqkf7MtUWsX6yOGEu\nn4XysQzrPnNUsavOmNLdA6SBH+wPIPswkDjgbHODZ5ToK5rkH99WEmDUA/7HZr5d\nb58b+QErtoomKhvQYqZiDHD+TMGxl5CNsDIVTbVzzMeP/BunBjeMzs2IJI6BYYpx\nkdXYGlT0+IIYaHgp6IEubFyGh1Xd9jzpHawodWJN20ALajvNsVpofH6us6xku48G\nWjFLzAQsQ2Bw9kuxwDfdxb7kZ9fVKBxvg+oK1FNXlL7iTYsdYy0=\n=IDnT\n-----END PGP SIGNATURE-----", "payload": "tree d589a6de761d0c97e1d6d6a3e8426cb6e04e9e8c\nparent 4caf6a92f3a50b4d8061c20b6b013e5a3fb8dfe4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516721815 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494448 +0100\n\nEnable const prop to also evaluate constants, not just literals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14e746b2fb11c638904247ef6764f83448de641", "html_url": "https://github.com/rust-lang/rust/commit/f14e746b2fb11c638904247ef6764f83448de641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14e746b2fb11c638904247ef6764f83448de641/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4caf6a92f3a50b4d8061c20b6b013e5a3fb8dfe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4caf6a92f3a50b4d8061c20b6b013e5a3fb8dfe4", "html_url": "https://github.com/rust-lang/rust/commit/4caf6a92f3a50b4d8061c20b6b013e5a3fb8dfe4"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "25787608e39ca45afecdbba4ba6c0557038e5b04", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f14e746b2fb11c638904247ef6764f83448de641/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14e746b2fb11c638904247ef6764f83448de641/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=f14e746b2fb11c638904247ef6764f83448de641", "patch": "@@ -11,7 +11,7 @@\n //! Performs various peephole optimizations.\n \n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, ProjectionElem, Rvalue, Local};\n-use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock};\n+use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{SourceInfo, ARGUMENT_VISIBILITY_SCOPE, TerminatorKind};\n use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::middle::const_val::ConstVal;\n@@ -34,6 +34,7 @@ impl MirPass for InstCombine {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n+        trace!(\"InstCombine starting for {:?}\", source.def_id);\n \n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n@@ -46,6 +47,7 @@ impl MirPass for InstCombine {\n \n         // Then carry out those optimizations.\n         MutVisitor::visit_mir(&mut InstCombineVisitor { optimizations, tcx }, mir);\n+        trace!(\"InstCombine done for {:?}\", source.def_id);\n     }\n }\n \n@@ -199,7 +201,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                 ConstVal::Value(v) => Some((v, value.ty, c.span)),\n                 ConstVal::Unevaluated(did, substs) => {\n                     let param_env = self.tcx.param_env(self.source.def_id);\n-                    let span = self.tcx.def_span(did);\n                     let instance = Instance::resolve(\n                         self.tcx,\n                         param_env,\n@@ -211,7 +212,7 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                         promoted: None,\n                     };\n                     let (value, _, ty) = eval_body(self.tcx, cid, param_env)?;\n-                    let val = (value, ty, span);\n+                    let val = (value, ty, c.span);\n                     trace!(\"evaluated {:?} to {:?}\", c, val);\n                     self.optimizations.constants.insert(c.clone(), val);\n                     Some(val)\n@@ -269,7 +270,24 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n         span: Span,\n     ) -> Option<Const<'tcx>> {\n         match *rvalue {\n-            Rvalue::Use(ref op) => self.simplify_operand(op),\n+            // No need to overwrite an already evaluated constant\n+            Rvalue::Use(Operand::Constant(box Constant {\n+                literal: Literal::Value {\n+                    value: &ty::Const {\n+                        val: ConstVal::Value(_),\n+                        ..\n+                    },\n+                },\n+                ..\n+            })) => None,\n+            // This branch exists for the sanity type check\n+            Rvalue::Use(Operand::Constant(ref c)) => {\n+                assert_eq!(c.ty, place_ty);\n+                self.eval_constant(c)\n+            },\n+            Rvalue::Use(ref op) => {\n+                self.eval_operand(op)\n+            },\n             Rvalue::Repeat(..) |\n             Rvalue::Ref(..) |\n             Rvalue::Cast(..) |\n@@ -392,6 +410,17 @@ impl ConstPropVisitor {\n         cpv.visit_mir(mir);\n         cpv.can_const_prop\n     }\n+\n+    fn is_our_local(&mut self, mut place: &Place) -> bool {\n+        while let Place::Projection(ref proj) = place {\n+            place = &proj.base;\n+        }\n+        if let Place::Local(local) = *place {\n+            local == self.local\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for ConstPropVisitor {\n@@ -403,9 +432,9 @@ impl<'tcx> Visitor<'tcx> for ConstPropVisitor {\n     ) {\n         self.super_statement(block, statement, location);\n         match statement.kind {\n-            StatementKind::SetDiscriminant { place: Place::Local(local), .. } |\n-            StatementKind::Assign(Place::Local(local), _) => {\n-                if local == self.local {\n+            StatementKind::SetDiscriminant { ref place, .. } |\n+            StatementKind::Assign(ref place, _) => {\n+                if self.is_our_local(place) {\n                     if self.found_assignment {\n                         self.can_const_prop = false;\n                     } else {\n@@ -415,15 +444,13 @@ impl<'tcx> Visitor<'tcx> for ConstPropVisitor {\n             },\n             StatementKind::InlineAsm { ref outputs, .. } => {\n                 for place in outputs {\n-                    if let Place::Local(local) = *place {\n-                        if local == self.local {\n-                            if self.found_assignment {\n-                                self.can_const_prop = false;\n-                            } else {\n-                                self.found_assignment = true\n-                            }\n-                            return;\n+                    if self.is_our_local(place) {\n+                        if self.found_assignment {\n+                            self.can_const_prop = false;\n+                        } else {\n+                            self.found_assignment = true\n                         }\n+                        return;\n                     }\n                 }\n             }\n@@ -432,8 +459,8 @@ impl<'tcx> Visitor<'tcx> for ConstPropVisitor {\n     }\n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         self.super_rvalue(rvalue, location);\n-        if let Rvalue::Ref(_, _, Place::Local(local)) = *rvalue {\n-            if local == self.local {\n+        if let Rvalue::Ref(_, _, ref place) = *rvalue {\n+            if self.is_our_local(place) {\n                 self.can_const_prop = false;\n             }\n         }\n@@ -517,12 +544,13 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n             if let Some(value) = self.const_prop(rval, place_ty, span) {\n                 self.optimizations.const_prop.insert(location, value);\n                 if let Place::Local(local) = *place {\n-                    if !self.mir.local_decls[local].is_user_variable\n+                    if self.mir.local_kind(local) == LocalKind::Temp\n                         && ConstPropVisitor::check(local, self.mir) {\n                         trace!(\"storing {:?} to {:?}\", value, local);\n                         assert!(self.optimizations.places.insert(local, value).is_none());\n                     }\n                 }\n+                return;\n             }\n         }\n         self.super_statement(block, statement, location);"}]}