{"sha": "2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "node_id": "C_kwDOAAsO6NoAKDJlN2JjOTYzMjFiMjZmYWY4ZjRkY2Y2YTU0ZmE1OTBmN2I5NDAyZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T14:58:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T14:58:48Z"}, "message": "Auto merge of #91604 - nikic:section-flags, r=nagisa\n\nUse object crate for .rustc metadata generation\n\nWe already use the object crate for generating uncompressed .rmeta\nmetadata object files. This switches the generation of compressed\n.rustc object files to use the object crate as well. These have\nslightly different requirements in that .rmeta should be completely\nexcluded from any final compilation artifacts, while .rustc should\nbe part of shared objects, but not loaded into memory.\n\nThe primary motivation for this change is #90326: In LLVM 14, the\ncurrent way of setting section flags (and in particular, preventing\nthe setting of SHF_ALLOC) will no longer work. There are other ways\nwe could work around this, but switching to the object crate seems\nlike the most elegant, as we already use it for .rmeta, and as it\nmakes this independent of the codegen backend. In particular, we\ndon't need separate handling in codegen_llvm and codegen_gcc.\ncodegen_cranelift should be able to reuse the implementation as\nwell, though I have omitted that here, as it is not based on\ncodegen_ssa.\n\nThis change mostly extracts the existing code for .rmeta handling\nto allow using it for .rustc as well, and adjusts the codegen\ninfrastructure to handle the metadata object file separately: We\nno longer create a backend-specific module for it, and directly\nproduce the compiled module instead.\n\nThis does not `fix` #90326 by itself yet, as .llvmbc will need to be\nhandled separately.\n\nr? `@nagisa`", "tree": {"sha": "c83a98bc807b85de2226a1ee9cd233bbf4fb1c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83a98bc807b85de2226a1ee9cd233bbf4fb1c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "html_url": "https://github.com/rust-lang/rust/commit/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e68093d8c0ad3e58a97069ea85677b8982ea610", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e68093d8c0ad3e58a97069ea85677b8982ea610", "html_url": "https://github.com/rust-lang/rust/commit/4e68093d8c0ad3e58a97069ea85677b8982ea610"}, {"sha": "98afc30b95f087c869606aaba24dfa3bcca26e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/98afc30b95f087c869606aaba24dfa3bcca26e39", "html_url": "https://github.com/rust-lang/rust/commit/98afc30b95f087c869606aaba24dfa3bcca26e39"}], "stats": {"total": 44, "additions": 0, "deletions": 44}, "files": [{"sha": "dee70bf75369d6aa59bcce209cdc597731a068c8", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "patch": "@@ -7,14 +7,12 @@ use gccjit::{\n     GlobalKind,\n };\n use rustc_middle::dep_graph;\n-use rustc_middle::middle::exported_symbols;\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::mir::mono::Linkage;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::DebugInfoMethods;\n-use rustc_metadata::EncodedMetadata;\n use rustc_session::config::DebugInfo;\n use rustc_span::Symbol;\n \n@@ -132,40 +130,3 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (Modul\n \n     (module, cost)\n }\n-\n-pub fn write_compressed_metadata<'tcx>(tcx: TyCtxt<'tcx>, metadata: &EncodedMetadata, gcc_module: &mut GccContext) {\n-    use snap::write::FrameEncoder;\n-    use std::io::Write;\n-\n-    // Historical note:\n-    //\n-    // When using link.exe it was seen that the section name `.note.rustc`\n-    // was getting shortened to `.note.ru`, and according to the PE and COFF\n-    // specification:\n-    //\n-    // > Executable images do not use a string table and do not support\n-    // > section names longer than 8 characters\n-    //\n-    // https://docs.microsoft.com/en-us/windows/win32/debug/pe-format\n-    //\n-    // As a result, we choose a slightly shorter name! As to why\n-    // `.note.rustc` works on MinGW, see\n-    // https://github.com/llvm/llvm-project/blob/llvmorg-12.0.0/lld/COFF/Writer.cpp#L1190-L1197\n-    let section_name = if tcx.sess.target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" };\n-\n-    let context = &gcc_module.context;\n-    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data()).unwrap();\n-\n-    let name = exported_symbols::metadata_symbol_name(tcx);\n-    let typ = context.new_array_type(None, context.new_type::<u8>(), compressed.len() as i32);\n-    let global = context.new_global(None, GlobalKind::Exported, typ, name);\n-    global.global_set_initializer(&compressed);\n-    global.set_link_section(section_name);\n-\n-    // Also generate a .section directive to force no\n-    // flags, at least for ELF outputs, so that the\n-    // metadata doesn't get loaded into memory.\n-    let directive = format!(\".section {}\", section_name);\n-    context.add_top_level_asm(None, &directive);\n-}"}, {"sha": "a549bcbd931069fd1d06d6591043e0a2cc008396", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2e7bc96321b26faf8f4dcf6a54fa590f7b9402d1", "patch": "@@ -22,7 +22,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n-extern crate snap;\n \n // This prevents duplicating functions and statics that are already part of the host rustc process.\n #[allow(unused_extern_crates)]\n@@ -128,10 +127,6 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         }\n     }\n \n-    fn write_compressed_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>, metadata: &EncodedMetadata, gcc_module: &mut Self::Module) {\n-        base::write_compressed_metadata(tcx, metadata, gcc_module)\n-    }\n-\n     fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, mods: &mut Self::Module, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n         unsafe { allocator::codegen(tcx, mods, module_name, kind, has_alloc_error_handler) }\n     }"}]}