{"sha": "57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTc0ZWRhODgxMWJiMDRkYTJlMDgxZTMwMjlhZWVjMmYwYmRjZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-30T07:07:25Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-01T21:28:19Z"}, "message": "Accept ranges with only a maximum value: `..expr`", "tree": {"sha": "0298a926e462dddc7b82d96a9abd79be055c579c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0298a926e462dddc7b82d96a9abd79be055c579c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "html_url": "https://github.com/rust-lang/rust/commit/57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a74eda8811bb04da2e081e3029aeec2f0bdcf4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45b5d2ed9b43b3ad573482fb8820a382f20289e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45b5d2ed9b43b3ad573482fb8820a382f20289e", "html_url": "https://github.com/rust-lang/rust/commit/d45b5d2ed9b43b3ad573482fb8820a382f20289e"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "cce21bbef26c6aed729b7f22d7899c17483816df", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57a74eda8811bb04da2e081e3029aeec2f0bdcf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a74eda8811bb04da2e081e3029aeec2f0bdcf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "patch": "@@ -2146,14 +2146,14 @@ impl<'a> Parser<'a> {\n             (&None, &Some(ref e)) => (e.span.lo, e.span.hi),\n             (&None, &None) => (DUMMY_SP.lo, DUMMY_SP.hi),\n         };\n-        ExprIndex(expr, self.mk_expr(lo, hi, ExprRange(start, end)))\n+        ExprIndex(expr, self.mk_expr(lo, hi, self.mk_range(start, end)))\n     }\n \n     pub fn mk_range(&mut self,\n-                    start: P<Expr>,\n+                    start: Option<P<Expr>>,\n                     end: Option<P<Expr>>)\n                     -> ast::Expr_ {\n-        ExprRange(Some(start), end)\n+        ExprRange(start, end)\n     }\n \n     pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ {\n@@ -2676,7 +2676,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 let hi = self.span.hi;\n-                let range = self.mk_range(e, opt_end);\n+                let range = self.mk_range(Some(e), opt_end);\n                 return self.mk_expr(lo, hi, range);\n               }\n               _ => return e\n@@ -2889,6 +2889,13 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = self.mk_unary(UnUniq, e);\n           }\n+          token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n+            // A range, closed above: `..expr`.\n+            self.bump();\n+            let e = self.parse_prefix_expr();\n+            hi = e.span.hi;\n+            ex = self.mk_range(None, Some(e));\n+          }\n           token::Ident(_, _) => {\n             if !self.token.is_keyword(keywords::Box) {\n                 return self.parse_dot_or_call_expr();"}]}