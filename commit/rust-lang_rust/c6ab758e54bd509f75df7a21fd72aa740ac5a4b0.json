{"sha": "c6ab758e54bd509f75df7a21fd72aa740ac5a4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YWI3NThlNTRiZDUwOWY3NWRmN2EyMWZkNzJhYTc0MGFjNWE0YjA=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2020-10-24T13:44:57Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2020-10-24T16:58:38Z"}, "message": "Switch from tuple matching to match guards", "tree": {"sha": "9bb5056ae7453f5baa798e4c1cc064e99b3fec82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb5056ae7453f5baa798e4c1cc064e99b3fec82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0", "html_url": "https://github.com/rust-lang/rust/commit/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "html_url": "https://github.com/rust-lang/rust/commit/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "0d4aa08a873b4d3867640a0d28e9d6391004c060", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ab758e54bd509f75df7a21fd72aa740ac5a4b0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=c6ab758e54bd509f75df7a21fd72aa740ac5a4b0", "patch": "@@ -173,26 +173,24 @@ pub(super) fn emit_va_arg(\n     // is lacking in some instances, so we should only use it as a fallback.\n     let target = &bx.cx.tcx.sess.target;\n     let arch = &bx.cx.tcx.sess.target.arch;\n-    match (&**arch, target.options.is_like_windows) {\n+    match &**arch {\n         // Windows x86\n-        (\"x86\", true) => {\n+        \"x86\" if target.options.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), false)\n         }\n         // Generic x86\n-        (\"x86\", _) => {\n-            emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true)\n-        }\n+        \"x86\" => emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true),\n         // Windows AArch64\n-        (\"aarch64\", true) => {\n+        \"aarch64\" if target.options.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), false)\n         }\n         // iOS AArch64\n-        (\"aarch64\", _) if target.target_os == \"ios\" => {\n+        \"aarch64\" if target.target_os == \"ios\" => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n-        (\"aarch64\", _) => emit_aapcs_va_arg(bx, addr, target_ty),\n+        \"aarch64\" => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n-        (\"x86_64\", true) => {\n+        \"x86_64\" if target.options.is_like_windows => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n             emit_ptr_va_arg(bx, addr, target_ty, indirect, Align::from_bytes(8).unwrap(), false)"}]}