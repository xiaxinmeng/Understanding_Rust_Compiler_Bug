{"sha": "5b822891be160d11b4e53770c1174e68d8b091ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODIyODkxYmUxNjBkMTFiNGU1Mzc3MGMxMTc0ZTY4ZDhiMDkxY2E=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-26T22:36:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-27T23:27:50Z"}, "message": "Store dumper directly in Visitor", "tree": {"sha": "4c85f7410e515096b907303e53541a5e397a875b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c85f7410e515096b907303e53541a5e397a875b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b822891be160d11b4e53770c1174e68d8b091ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b822891be160d11b4e53770c1174e68d8b091ca", "html_url": "https://github.com/rust-lang/rust/commit/5b822891be160d11b4e53770c1174e68d8b091ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b822891be160d11b4e53770c1174e68d8b091ca/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa", "html_url": "https://github.com/rust-lang/rust/commit/a6d6eea4c8ac8b9bd97ecd466418ee739a9a97fa"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "9dfc48c1288c10c702515f9b8774406d864f585d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=5b822891be160d11b4e53770c1174e68d8b091ca", "patch": "@@ -75,10 +75,10 @@ macro_rules! access_from_vis {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx, 'll> {\n+pub struct DumpVisitor<'l, 'tcx> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    dumper: &'ll mut Dumper,\n+    dumper: Dumper,\n \n     span: SpanUtils<'l>,\n \n@@ -90,12 +90,12 @@ pub struct DumpVisitor<'l, 'tcx, 'll> {\n     // macro_calls: FxHashSet<Span>,\n }\n \n-impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n+impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     pub fn new(\n         save_ctxt: SaveContext<'l, 'tcx>,\n-        dumper: &'ll mut Dumper,\n-    ) -> DumpVisitor<'l, 'tcx, 'll> {\n+    ) -> DumpVisitor<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n+        let dumper = Dumper::new(save_ctxt.config.clone());\n         DumpVisitor {\n             tcx: save_ctxt.tcx,\n             save_ctxt,\n@@ -106,9 +106,13 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n         }\n     }\n \n+    pub fn into_analysis(self) -> rls_data::Analysis {\n+        self.dumper.into_analysis()\n+    }\n+\n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n+        F: FnOnce(&mut Self),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -1298,7 +1302,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n     }\n }\n \n-impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n+impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate."}, {"sha": "a0051c30c9775c02c2a9cd350a07e319a9506c36", "filename": "src/librustc_save_analysis/dumper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Fdumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Fdumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdumper.rs?ref=5b822891be160d11b4e53770c1174e68d8b091ca", "patch": "@@ -22,8 +22,8 @@ impl Dumper {\n         }\n     }\n \n-    pub fn to_output(self, f: impl FnOnce(&Analysis)) {\n-        f(&self.result)\n+    pub fn into_analysis(self) -> Analysis {\n+        self.result\n     }\n }\n "}, {"sha": "af69c79cae563ee470d763d08c5db9e605bdf407", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b822891be160d11b4e53770c1174e68d8b091ca/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5b822891be160d11b4e53770c1174e68d8b091ca", "patch": "@@ -39,7 +39,6 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{arg_to_string, ty_to_string};\n use syntax_pos::*;\n \n-use dumper::Dumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n@@ -1076,18 +1075,15 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n     ) {\n         let sess = &save_ctxt.tcx.sess;\n         let (output, file_name) = self.output_file(&save_ctxt);\n-        let mut dumper = Dumper::new(save_ctxt.config.clone());\n-        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+        let mut visitor = DumpVisitor::new(save_ctxt);\n \n         visitor.dump_crate_info(cratename, krate);\n         visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n \n-        dumper.to_output(|analysis| {\n-            if let Err(e) = serde_json::to_writer(output, analysis) {\n-                error!(\"Can't serialize save-analysis: {:?}\", e);\n-            }\n-        });\n+        if let Err(e) = serde_json::to_writer(output, &visitor.into_analysis()) {\n+            error!(\"Can't serialize save-analysis: {:?}\", e);\n+        }\n \n         if sess.opts.debugging_opts.emit_artifact_notifications {\n             sess.parse_sess.span_diagnostic\n@@ -1109,19 +1105,13 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         cratename: &str,\n         input: &'l Input,\n     ) {\n-        // We're using the Dumper here because it has the format of the\n-        // save-analysis results that we will pass to the callback. IOW, we are\n-        // using the Dumper to collect the save-analysis results, but not\n-        // actually to dump them to a file. This is all a bit convoluted and\n-        // there is certainly a simpler design here trying to get out (FIXME).\n-        let mut dumper = Dumper::new(save_ctxt.config.clone());\n-        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+        let mut visitor = DumpVisitor::new(save_ctxt);\n \n         visitor.dump_crate_info(cratename, krate);\n         visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n \n-        dumper.to_output(|a| (self.callback)(a))\n+        (self.callback)(&visitor.into_analysis())\n     }\n }\n "}]}