{"sha": "2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTI5OWQxYTUzMzU1YzliYjc4YjkwNjdiZDJkMThiZDRlYjk0ZTc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-02T22:52:25Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-02T23:02:30Z"}, "message": "Extend ast_map to know about method declarations in traits.", "tree": {"sha": "39464d3cdfd3f2d9f75a2fc4f49e72454b61e475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39464d3cdfd3f2d9f75a2fc4f49e72454b61e475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "html_url": "https://github.com/rust-lang/rust/commit/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97452c0ca16238a2de5503aca07db26ff9e8ba63", "url": "https://api.github.com/repos/rust-lang/rust/commits/97452c0ca16238a2de5503aca07db26ff9e8ba63", "html_url": "https://github.com/rust-lang/rust/commit/97452c0ca16238a2de5503aca07db26ff9e8ba63"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "5f62c2901f049a675a05cbec344f0f677c89c25f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -511,7 +511,7 @@ type ty_field = spanned<ty_field_>;\n #[auto_serialize]\n type ty_method = {ident: ident, attrs: ~[attribute],\n                   decl: fn_decl, tps: ~[ty_param], self_ty: self_ty,\n-                  span: span};\n+                  id: node_id, span: span};\n \n #[auto_serialize]\n // A trait method is either required (meaning it doesn't have an"}, {"sha": "acd209513282f57cd9fc801d9e1995034da238b7", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -35,6 +35,8 @@ fn path_to_str(p: path) -> ~str {\n enum ast_node {\n     node_item(@item, @path),\n     node_foreign_item(@foreign_item, foreign_abi, @path),\n+    node_trait_method(@trait_method, def_id /* trait did */,\n+                      @path /* path to the trait */),\n     node_method(@method, def_id /* impl did */, @path /* path to the impl */),\n     node_variant(variant, @item, @path),\n     node_expr(@expr),\n@@ -218,19 +220,24 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n           let (_, ms) = ast_util::split_class_items(items);\n           // Map trait refs to their parent classes. This is\n           // so we can find the self_ty\n-          do vec::iter(traits) |p| { cx.map.insert(p.ref_id,\n-                                  node_item(i, item_path));\n-                            // This is so we can look up the right things when\n-                            // encoding/decoding\n-                            cx.map.insert(p.impl_id,\n-                                          node_item(i, item_path));\n-\n-                           };\n+          for traits.each |p| {\n+              cx.map.insert(p.ref_id, node_item(i, item_path));\n+              // This is so we can look up the right things when\n+              // encoding/decoding\n+              cx.map.insert(p.impl_id, node_item(i, item_path));\n+          }\n           let d_id = ast_util::local_def(i.id);\n           let p = extend(cx, i.ident);\n            // only need to handle methods\n           do vec::iter(ms) |m| { map_method(d_id, p, m, cx); }\n       }\n+      item_trait(tps, methods) {\n+        for methods.each |tm| {\n+            let id = ast_util::trait_method_to_ty_method(tm).id;\n+            let d_id = ast_util::local_def(i.id);\n+            cx.map.insert(id, node_trait_method(@tm, d_id, item_path));\n+        }\n+      }\n       _ { }\n     }\n     alt i.node {\n@@ -283,6 +290,11 @@ fn node_id_to_str(map: map, id: node_id) -> ~str {\n         fmt!{\"method %s in %s (id=%?)\",\n              *m.ident, path_to_str(*path), id}\n       }\n+      some(node_trait_method(tm, impl_did, path)) {\n+        let m = ast_util::trait_method_to_ty_method(*tm);\n+        fmt!{\"method %s in %s (id=%?)\",\n+             *m.ident, path_to_str(*path), id}\n+      }\n       some(node_variant(variant, def_id, path)) {\n         fmt!{\"variant %s in %s (id=%?)\",\n              *variant.node.name, path_to_str(*path), id}"}, {"sha": "119f4465d9ee575d00dde5d45133f0432ab9407b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -316,6 +316,19 @@ fn split_class_items(cs: ~[@class_member]) -> (~[ivar], ~[@method]) {\n     (vs, ms)\n }\n \n+// extract a ty_method from a trait_method. if the trait_method is\n+// a default, pull out the useful fields to make a ty_method\n+fn trait_method_to_ty_method(method: trait_method) -> ty_method {\n+    alt method {\n+      required(m) { m }\n+      provided(m) {\n+        {ident: m.ident, attrs: m.attrs,\n+         decl: m.decl, tps: m.tps, self_ty: m.self_ty,\n+         id: m.id, span: m.span}\n+      }\n+    }\n+}\n+\n pure fn class_member_visibility(ci: @class_member) -> visibility {\n   alt ci.node {\n      instance_var(_, _, _, _, vis) { vis }"}, {"sha": "537e72f707f688db89c58d5a3427bc2bd62d4535", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -291,7 +291,7 @@ class parser {\n                 required({ident: ident, attrs: attrs,\n                           decl: {purity: pur with d}, tps: tps,\n                           self_ty: self_ty,\n-                          span: mk_sp(lo, hi)})\n+                          id: p.get_id(), span: mk_sp(lo, hi)})\n               }\n               token::LBRACE {\n                 debug!{\"parse_trait_methods(): parsing provided method\"};"}, {"sha": "6d1645ae766467c86c9414ea794043a41fe03784", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -2111,6 +2111,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       }\n       ast_map::node_ctor(nm, _, ct, _, pt) { (pt, nm, ct.span) }\n       ast_map::node_dtor(_, dtor, _, pt) {(pt, @~\"drop\", dtor.span)}\n+      ast_map::node_trait_method(*) {\n+        ccx.tcx.sess.bug(~\"Can't monomorphize a trait method\")\n+      }\n       ast_map::node_expr(*) {\n         ccx.tcx.sess.bug(~\"Can't monomorphize an expr\")\n       }\n@@ -2207,6 +2210,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       ast_map::node_expr(*) {\n         ccx.tcx.sess.bug(~\"Can't monomorphize an expr\")\n       }\n+      ast_map::node_trait_method(*) {\n+        ccx.tcx.sess.bug(~\"Can't monomorphize a trait method\")\n+      }\n       ast_map::node_export(*) {\n           ccx.tcx.sess.bug(~\"Can't monomorphize an export\")\n       }\n@@ -2418,7 +2424,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         return {val: slf, kind: lv_owned};\n       }\n       _ {\n-        cx.sess().unimpl(fmt!{\"unsupported def type in trans_local_def: %?\",\n+        cx.sess().unimpl(fmt!{\"unsupported def type in trans_local_var: %?\",\n                               def});\n       }\n     }"}, {"sha": "363b9ece7ad3c5cc6ba7f0c143174ea62a414fa2", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -185,6 +185,8 @@ fn resolve_vtables_in_fn_ctxt(fcx: fn_ctxt, vts: typeck::vtable_res)\n     @vec::map(*vts, |d| resolve_vtable_in_fn_ctxt(fcx, d))\n }\n \n+// Apply the typaram substitutions in the fn_ctxt to a vtable. This should\n+// eliminate any vtable_params.\n fn resolve_vtable_in_fn_ctxt(fcx: fn_ctxt, vt: typeck::vtable_origin)\n     -> typeck::vtable_origin {\n     alt vt {"}, {"sha": "afb18c605c4f6a388497d2f02022828f8122f1c2", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "patch": "@@ -2759,6 +2759,10 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           ast_map::node_method(method, _, path) {\n             vec::append_one(*path, ast_map::path_name(method.ident))\n           }\n+          ast_map::node_trait_method(trait_method, _, path) {\n+            let method = ast_util::trait_method_to_ty_method(*trait_method);\n+            vec::append_one(*path, ast_map::path_name(method.ident))\n+          }\n \n           ast_map::node_variant(variant, _, path) {\n             vec::append_one(vec::init(*path),"}]}