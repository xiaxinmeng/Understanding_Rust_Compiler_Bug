{"sha": "7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "node_id": "C_kwDOAAsO6NoAKDdhNzhjNGZmZDU2ZjExZDNhODRjOTlhMWNjNzM3Y2Y3YmRlMjY2MGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T01:14:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T01:14:36Z"}, "message": "Auto merge of #110160 - petrochenkov:notagain2, r=cjgillot\n\nresolve: Pre-compute non-reexport module children\n\nInstead of repeating the same logic by walking HIR during metadata encoding.\n\nThe only difference is that we are no longer encoding `macro_rules` items, but we never currently need them as a part of this list. They can be encoded separately if this need ever arises.\n\n`module_reexports` is also un-querified, because I don't see any reasons to make it a query, only overhead.", "tree": {"sha": "91ae1e168d367b180d9f49f33da4288ea7e99848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91ae1e168d367b180d9f49f33da4288ea7e99848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "html_url": "https://github.com/rust-lang/rust/commit/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367661b1fc58239fa5df5f472ad2047f97dc5465", "url": "https://api.github.com/repos/rust-lang/rust/commits/367661b1fc58239fa5df5f472ad2047f97dc5465", "html_url": "https://github.com/rust-lang/rust/commit/367661b1fc58239fa5df5f472ad2047f97dc5465"}, {"sha": "7c40a6fb34d29fce69a16b7b65871999ef3d1628", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c40a6fb34d29fce69a16b7b65871999ef3d1628", "html_url": "https://github.com/rust-lang/rust/commit/7c40a6fb34d29fce69a16b7b65871999ef3d1628"}], "stats": {"total": 171, "additions": 72, "deletions": 99}, "files": [{"sha": "2930ce75028b739a6cc4316467775833be320a99", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -1,6 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n use crate::creader::{CStore, CrateMetadataRef};\n+use crate::rmeta::table::IsDefault;\n use crate::rmeta::*;\n \n use rustc_ast as ast;\n@@ -995,17 +996,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_mod_child(self, id: DefIndex, sess: &Session) -> ModChild {\n         let ident = self.item_ident(id, sess);\n-        let kind = self.def_kind(id);\n-        let def_id = self.local_def_id(id);\n-        let res = Res::Def(kind, def_id);\n+        let res = Res::Def(self.def_kind(id), self.local_def_id(id));\n         let vis = self.get_visibility(id);\n         let span = self.get_span(id, sess);\n-        let macro_rules = match kind {\n-            DefKind::Macro(..) => self.root.tables.is_macro_rules.get(self, id),\n-            _ => false,\n-        };\n \n-        ModChild { ident, res, vis, span, macro_rules, reexport_chain: Default::default() }\n+        ModChild { ident, res, vis, span, reexport_chain: Default::default() }\n     }\n \n     /// Iterates over all named children of the given module,\n@@ -1029,12 +1024,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             } else {\n                 // Iterate over all children.\n                 for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n+                    // FIXME: Do not encode RPITITs as a part of this list.\n                     if self.root.tables.opt_rpitit_info.get(self, child_index).is_none() {\n                         yield self.get_mod_child(child_index, sess);\n                     }\n                 }\n \n-                if let Some(reexports) = self.root.tables.module_reexports.get(self, id) {\n+                let reexports = self.root.tables.module_children_reexports.get(self, id);\n+                if !reexports.is_default() {\n                     for reexport in reexports.decode((self, sess)) {\n                         yield reexport;\n                     }"}, {"sha": "657b903e0a8affa6112e56fbde7098464f5620c2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 47, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -43,7 +43,6 @@ use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::hash::Hash;\n use std::io::{Read, Seek, Write};\n-use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n \n@@ -456,7 +455,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_items(&mut self) {\n-        self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());\n+        self.encode_info_for_mod(CRATE_DEF_ID);\n \n         // Proc-macro crates only export proc-macro items, which are looked\n         // up using `proc_macro_data`\n@@ -1324,7 +1323,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.implied_predicates_of[def_id] <- self.tcx.implied_predicates_of(def_id));\n             }\n             if let DefKind::Enum | DefKind::Struct | DefKind::Union = def_kind {\n-                self.encode_info_for_adt(def_id);\n+                self.encode_info_for_adt(local_id);\n             }\n             if tcx.impl_method_has_trait_impl_trait_tys(def_id)\n                 && let Ok(table) = self.tcx.collect_return_position_impl_trait_in_trait_tys(def_id)\n@@ -1357,7 +1356,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n-    fn encode_info_for_adt(&mut self, def_id: DefId) {\n+    fn encode_info_for_adt(&mut self, local_def_id: LocalDefId) {\n+        let def_id = local_def_id.to_def_id();\n         let tcx = self.tcx;\n         let adt_def = tcx.adt_def(def_id);\n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n@@ -1366,15 +1366,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n \n         if adt_def.is_enum() {\n-            record_array!(self.tables.children[def_id] <- iter::from_generator(||\n-                for variant in tcx.adt_def(def_id).variants() {\n-                    yield variant.def_id.index;\n-                    // Encode constructors which take a separate slot in value namespace.\n-                    if let Some(ctor_def_id) = variant.ctor_def_id() {\n-                        yield ctor_def_id.index;\n-                    }\n-                }\n-            ));\n+            let module_children = tcx.module_children_non_reexports(local_def_id);\n+            record_array!(self.tables.children[def_id] <-\n+                module_children.iter().map(|def_id| def_id.local_def_index));\n         } else {\n             // For non-enum, there is only one variant, and its def_id is the adt's.\n             debug_assert_eq!(adt_def.variants().len(), 1);\n@@ -1406,7 +1400,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {\n+    fn encode_info_for_mod(&mut self, local_def_id: LocalDefId) {\n         let tcx = self.tcx;\n         let def_id = local_def_id.to_def_id();\n         debug!(\"EncodeContext::encode_info_for_mod({:?})\", def_id);\n@@ -1420,38 +1414,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            record_array!(self.tables.children[def_id] <- iter::from_generator(|| {\n-                for item_id in md.item_ids {\n-                    match tcx.hir().item(*item_id).kind {\n-                        // Foreign items are planted into their parent modules\n-                        // from name resolution point of view.\n-                        hir::ItemKind::ForeignMod { items, .. } => {\n-                            for foreign_item in items {\n-                                yield foreign_item.id.owner_id.def_id.local_def_index;\n-                            }\n-                        }\n-                        // Only encode named non-reexport children, reexports are encoded\n-                        // separately and unnamed items are not used by name resolution.\n-                        hir::ItemKind::ExternCrate(..) => continue,\n-                        hir::ItemKind::Struct(ref vdata, _) => {\n-                            yield item_id.owner_id.def_id.local_def_index;\n-                            // Encode constructors which take a separate slot in value namespace.\n-                            if let Some(ctor_def_id) = vdata.ctor_def_id() {\n-                                yield ctor_def_id.local_def_index;\n-                            }\n-                        }\n-                        _ if tcx.def_key(item_id.owner_id.to_def_id()).get_opt_name().is_some() => {\n-                            yield item_id.owner_id.def_id.local_def_index;\n-                        }\n-                        _ => continue,\n-                    }\n-                }\n-            }));\n+            let non_reexports = tcx.module_children_non_reexports(local_def_id);\n+            record_array!(self.tables.children[def_id] <-\n+                non_reexports.iter().map(|def_id| def_id.local_def_index));\n \n-            let reexports = tcx.module_reexports(local_def_id);\n-            if !reexports.is_empty() {\n-                record_array!(self.tables.module_reexports[def_id] <- reexports);\n-            }\n+            record_defaulted_array!(self.tables.module_children_reexports[def_id] <-\n+                tcx.module_children_reexports(local_def_id));\n         }\n     }\n \n@@ -1668,8 +1636,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.is_macro_rules.set(def_id.index, macro_def.macro_rules);\n                 record!(self.tables.macro_definition[def_id] <- &*macro_def.body);\n             }\n-            hir::ItemKind::Mod(ref m) => {\n-                self.encode_info_for_mod(item.owner_id.def_id, m);\n+            hir::ItemKind::Mod(..) => {\n+                self.encode_info_for_mod(item.owner_id.def_id);\n             }\n             hir::ItemKind::OpaqueTy(ref opaque) => {\n                 self.encode_explicit_item_bounds(def_id);"}, {"sha": "dc77a079b075d6a35f064d0447d44e4212cae2cd", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -357,6 +357,7 @@ define_tables! {\n     associated_types_for_impl_traits_in_associated_fn: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n     unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n+    module_children_reexports: Table<DefIndex, LazyArray<ModChild>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n@@ -414,7 +415,6 @@ define_tables! {\n     assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n     macro_definition: Table<DefIndex, LazyValue<ast::DelimArgs>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n-    module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n     deduced_param_attrs: Table<DefIndex, LazyArray<DeducedParamAttrs>>,\n     trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n     doc_link_resolutions: Table<DefIndex, LazyValue<DocLinkResMap>>,"}, {"sha": "f3170e0ec0e1c7187e27e10eae23d9f584bb5d1e", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -43,8 +43,6 @@ pub struct ModChild {\n     pub vis: ty::Visibility<DefId>,\n     /// Span of the item.\n     pub span: Span,\n-    /// A proper `macro_rules` item (not a reexport).\n-    pub macro_rules: bool,\n     /// Reexport chain linking this module child to its original reexported item.\n     /// Empty if the module child is a proper item.\n     pub reexport_chain: SmallVec<[Reexport; 2]>,"}, {"sha": "7a5a1603585b114cecebeeb1dab77e8dd50bd630", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -1516,10 +1516,6 @@ rustc_queries! {\n         desc { \"getting traits in scope at a block\" }\n     }\n \n-    query module_reexports(def_id: LocalDefId) -> &'tcx [ModChild] {\n-        desc { |tcx| \"looking up reexports of module `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n-    }\n-\n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }"}, {"sha": "63f7cc2ee7352ecd566a4ead2c21b204521020e5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -8,6 +8,7 @@ use crate::arena::Arena;\n use crate::dep_graph::{DepGraph, DepKindStruct};\n use crate::infer::canonical::CanonicalVarInfo;\n use crate::lint::struct_lint_level;\n+use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n@@ -2459,6 +2460,28 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.def_kind(def_id) == DefKind::ImplTraitPlaceholder\n         }\n     }\n+\n+    /// Named module children from all items except `use` and `extern crate` imports.\n+    ///\n+    /// In addition to regular items this list also includes struct or variant constructors, and\n+    /// items inside `extern {}` blocks because all of them introduce names into parent module.\n+    /// For non-reexported children every such name is associated with a separate `DefId`.\n+    ///\n+    /// Module here is understood in name resolution sense - it can be a `mod` item,\n+    /// or a crate root, or an enum, or a trait.\n+    pub fn module_children_non_reexports(self, def_id: LocalDefId) -> &'tcx [LocalDefId] {\n+        self.resolutions(()).module_children_non_reexports.get(&def_id).map_or(&[], |v| &v[..])\n+    }\n+\n+    /// Named module children from `use` and `extern crate` imports.\n+    ///\n+    /// Reexported names are not associated with individual `DefId`s,\n+    /// e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n+    /// That's why the list needs to contain `ModChild` structures describing all the names\n+    /// individually instead of `DefId`s.\n+    pub fn module_children_reexports(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n+        self.resolutions(()).module_children_reexports.get(&def_id).map_or(&[], |v| &v[..])\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {\n@@ -2501,8 +2524,6 @@ pub struct DeducedParamAttrs {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.module_reexports =\n-        |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map_or(&[], |v| &v[..]);\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {"}, {"sha": "2e516f291bc0d5315e18fe8d379014f360d8e27e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -166,7 +166,8 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n+    pub module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n+    pub module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,"}, {"sha": "dcebfca08facf89d76c12f791e1f1e4a3a4c0e88", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -515,7 +515,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n             self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n         }\n-        for export in self.tcx.module_reexports(module_def_id) {\n+        for export in self.tcx.module_children_reexports(module_def_id) {\n             if export.vis.is_accessible_from(defining_mod, self.tcx)\n                 && let Res::Def(def_kind, def_id) = export.res\n                 && let Some(def_id) = def_id.as_local() {"}, {"sha": "ff0f1f55975f37ffe17d982d13d8fbce62315c69", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let ModChild { ident, res, vis, span, macro_rules, .. } = child;\n+        let ModChild { ident, res, vis, span, .. } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n@@ -964,9 +964,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                 _,\n             ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {\n-                if !macro_rules {\n-                    self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n-                }\n+                self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n             }\n             Res::Def(\n                 DefKind::TyParam"}, {"sha": "3c22d51c3d47886686cee391c5654ee3315bc63b", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -1261,10 +1261,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         if let Some(def_id) = module.opt_def_id() {\n+            let mut non_reexports = Vec::new();\n             let mut reexports = Vec::new();\n \n             module.for_each_child(self, |this, ident, _, binding| {\n-                if let Some(res) = this.is_reexport(binding) {\n+                let res = binding.res().expect_non_local();\n+                if !binding.is_import() {\n+                    non_reexports.push(res.def_id().expect_local());\n+                } else if res != def::Res::Err && !binding.is_ambiguity() {\n                     let mut reexport_chain = SmallVec::new();\n                     let mut next_binding = binding;\n                     while let NameBindingKind::Import { binding, import, .. } = next_binding.kind {\n@@ -1277,16 +1281,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         res,\n                         vis: binding.vis,\n                         span: binding.span,\n-                        macro_rules: false,\n                         reexport_chain,\n                     });\n                 }\n             });\n \n+            // Should be fine because this code is only called for local modules.\n+            let def_id = def_id.expect_local();\n+            if !non_reexports.is_empty() {\n+                self.module_children_non_reexports.insert(def_id, non_reexports);\n+            }\n             if !reexports.is_empty() {\n-                // Call to `expect_local` should be fine because current\n-                // code is only called for local modules.\n-                self.reexport_map.insert(def_id.expect_local(), reexports);\n+                self.module_children_reexports.insert(def_id, reexports);\n             }\n         }\n     }"}, {"sha": "b820d56b8afb12bc1aa8cb376a803fffc17ab6d8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -909,7 +909,8 @@ pub struct Resolver<'a, 'tcx> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n+    module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n+    module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1259,7 +1260,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             lifetimes_res_map: Default::default(),\n             extra_lifetime_params_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            reexport_map: FxHashMap::default(),\n+            module_children_non_reexports: Default::default(),\n+            module_children_reexports: Default::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1386,7 +1388,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let visibilities = self.visibilities;\n         let has_pub_restricted = self.has_pub_restricted;\n         let extern_crate_map = self.extern_crate_map;\n-        let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let glob_map = self.glob_map;\n         let main_def = self.main_def;\n@@ -1398,7 +1399,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted,\n             effective_visibilities,\n             extern_crate_map,\n-            reexport_map,\n+            module_children_non_reexports: self.module_children_non_reexports,\n+            module_children_reexports: self.module_children_reexports,\n             glob_map,\n             maybe_unused_trait_imports,\n             main_def,\n@@ -1949,20 +1951,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n         self.main_def = Some(MainDefinition { res, is_import, span });\n     }\n-\n-    // Items that go to reexport table encoded to metadata and visible through it to other crates.\n-    fn is_reexport(&self, binding: &NameBinding<'a>) -> Option<def::Res<!>> {\n-        if binding.is_import() {\n-            let res = binding.res().expect_non_local();\n-            // Ambiguous imports are treated as errors at this point and are\n-            // not exposed to other crates (see #36837 for more details).\n-            if res != def::Res::Err && !binding.is_ambiguity() {\n-                return Some(res);\n-            }\n-        }\n-\n-        return None;\n-    }\n }\n \n fn names_to_string(names: &[Symbol]) -> String {"}, {"sha": "e4b29fa91c863fc540cb2babf93e1ab55c3c721d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -152,7 +152,7 @@ pub(crate) fn try_inline_glob(\n             // reexported by the glob, e.g. because they are shadowed by something else.\n             let reexports = cx\n                 .tcx\n-                .module_reexports(current_mod)\n+                .module_children_reexports(current_mod)\n                 .iter()\n                 .filter_map(|child| child.res.opt_def_id())\n                 .collect();"}, {"sha": "989e75cb8280b76e5b2f27c72339cf3055e297ac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -2062,7 +2062,7 @@ pub(crate) fn reexport_chain<'tcx>(\n     import_def_id: LocalDefId,\n     target_def_id: LocalDefId,\n ) -> &'tcx [Reexport] {\n-    for child in tcx.module_reexports(tcx.local_parent(import_def_id)) {\n+    for child in tcx.module_children_reexports(tcx.local_parent(import_def_id)) {\n         if child.res.opt_def_id() == Some(target_def_id.to_def_id())\n             && child.reexport_chain[0].id() == Some(import_def_id.to_def_id())\n         {"}, {"sha": "f54b70b417d77768db14c946af6acb532e58b6a6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID) {\n+        for export in self.cx.tcx.module_children_reexports(CRATE_DEF_ID) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n                 let Some(local_def_id) = def_id.as_local() &&\n                 self.cx.tcx.has_attr(def_id, sym::macro_export) &&"}, {"sha": "a395e4f5653f0ebc9fa169ac735f7c359b8456b8", "filename": "src/tools/clippy/tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -16,7 +16,7 @@ extern crate macro_use_helper as mac;\n extern crate proc_macro_derive as mini_mac;\n \n mod a {\n-    use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};\n+    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;"}, {"sha": "6fd338cef8688904d3b981fecfdf43806fdbd5d1", "filename": "src/tools/clippy/tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr?ref=7a78c4ffd56f11d3a84c99a1cc737cf7bde2660d", "patch": "@@ -22,7 +22,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n \n error: aborting due to 4 previous errors\n "}]}