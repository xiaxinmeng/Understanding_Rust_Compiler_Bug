{"sha": "b17847b2323167b557b84b088f0c865724829c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzg0N2IyMzIzMTY3YjU1N2I4NGIwODhmMGM4NjU3MjQ4MjljMzA=", "commit": {"author": {"name": "David Rajchenbach-Teller", "email": "dteller@mozilla.com", "date": "2011-11-05T10:12:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-05T20:04:34Z"}, "message": "[Docfixes + feature] lib/uint.rs: Applied review suggesions, took the opportunity to add function loop", "tree": {"sha": "aa22ab7f85b8ebe4f0b719176be1792a124f2dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa22ab7f85b8ebe4f0b719176be1792a124f2dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17847b2323167b557b84b088f0c865724829c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17847b2323167b557b84b088f0c865724829c30", "html_url": "https://github.com/rust-lang/rust/commit/b17847b2323167b557b84b088f0c865724829c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17847b2323167b557b84b088f0c865724829c30/comments", "author": {"login": "Yoric", "id": 10190, "node_id": "MDQ6VXNlcjEwMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/10190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoric", "html_url": "https://github.com/Yoric", "followers_url": "https://api.github.com/users/Yoric/followers", "following_url": "https://api.github.com/users/Yoric/following{/other_user}", "gists_url": "https://api.github.com/users/Yoric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoric/subscriptions", "organizations_url": "https://api.github.com/users/Yoric/orgs", "repos_url": "https://api.github.com/users/Yoric/repos", "events_url": "https://api.github.com/users/Yoric/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57425b575c08ad2fb53c7a08dc29c224f0f4502b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57425b575c08ad2fb53c7a08dc29c224f0f4502b", "html_url": "https://github.com/rust-lang/rust/commit/57425b575c08ad2fb53c7a08dc29c224f0f4502b"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "6d904d33d7a8f473f3e1261cdc3344d8fbe8216a", "filename": "src/lib/uint.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b17847b2323167b557b84b088f0c865724829c30/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17847b2323167b557b84b088f0c865724829c30/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=b17847b2323167b557b84b088f0c865724829c30", "patch": "@@ -34,27 +34,54 @@ pure fn mul(x: uint, y: uint) -> uint { ret x * y; }\n /* Function: div */\n pure fn div(x: uint, y: uint) -> uint { ret x / y; }\n \n-/**\n- * Divide two numbers, return the result, rounded up.\n- */\n+/* Function: div_ceil\n+\n+   Divide two numbers, return the result, rounded up.\n+\n+   Parameters:\n+   x - an integer\n+   y - an integer distinct from 0u\n+\n+   Return:\n+    The smallest integer `q` such that `x/y <= q`.\n+*/\n pure fn div_ceil(x: uint, y: uint) -> uint {\n     let div = div(x, y);\n     if x % y == 0u { ret div;}\n     else { ret div + 1u; }\n }\n \n-/**\n- * Divide two numbers, return the result, rounded to the closest integer.\n- */\n+/* Function: div_ceil\n+\n+   Divide two numbers, return the result, rounded to the closest integer.\n+\n+   Parameters:\n+   x - an integer\n+   y - an integer distinct from 0u\n+\n+   Return:\n+    The integer `q` closest to `x/y`.\n+*/\n pure fn div_round(x: uint, y: uint) -> uint {\n     let div = div(x, y);\n     if x % y * 2u  < y { ret div;}\n     else { ret div + 1u; }\n }\n \n-/**\n- * Divide two numbers, return the result, rounded down.\n- */\n+/* Function: div_ceil\n+\n+   Divide two numbers, return the result, rounded down.\n+\n+   Parameters:\n+   x - an integer\n+   y - an integer distinct from 0u\n+\n+   Note: This is the same function as `div`.\n+\n+   Return:\n+    The smallest integer `q` such that `x/y <= q`. This\n+   is either `x/y` or `x/y + 1`.\n+*/\n pure fn div_floor(x: uint, y: uint) -> uint { ret x / y; }\n \n /* Function: rem */\n@@ -88,6 +115,31 @@ fn range(lo: uint, hi: uint, it: block(uint)) {\n     while i < hi { it(i); i += 1u; }\n }\n \n+/*\n+Function: loop\n+\n+Iterate over the range [`lo`..`hi`), or stop when requested\n+\n+Parameters:\n+lo - The integer at which to start the loop (included)\n+hi - The integer at which to stop the loop (excluded)\n+it - A block to execute with each consecutive integer of the range.\n+Return `true` to continue, `false` to stop.\n+\n+Returns:\n+\n+`true` If execution proceeded correctly, `false` if it was interrupted,\n+that is if `it` returned `false` at any point.\n+*/\n+fn loop(lo: uint, hi: uint, it: block(uint) -> bool) -> bool {\n+    let i = lo;\n+    while i < hi {\n+        if (!it(i)) { ret false; }\n+        i += 1u;\n+    }\n+    ret true;\n+}\n+\n /*\n Function: next_power_of_two\n "}]}