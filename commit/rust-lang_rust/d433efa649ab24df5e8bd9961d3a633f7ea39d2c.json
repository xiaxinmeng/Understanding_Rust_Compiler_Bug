{"sha": "d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "node_id": "C_kwDOAAsO6NoAKGQ0MzNlZmE2NDlhYjI0ZGY1ZThiZDk5NjFkM2E2MzNmN2VhMzlkMmM", "commit": {"author": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-09-16T03:46:47Z"}, "committer": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-09-16T11:07:42Z"}, "message": "more simple formatting", "tree": {"sha": "a54c68b4adaa241d31b80e43a3ad0f010ddf1387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54c68b4adaa241d31b80e43a3ad0f010ddf1387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "html_url": "https://github.com/rust-lang/rust/commit/d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/comments", "author": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee5a1ac19133ecce34665c90257d4133e260fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee5a1ac19133ecce34665c90257d4133e260fdc", "html_url": "https://github.com/rust-lang/rust/commit/0ee5a1ac19133ecce34665c90257d4133e260fdc"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "6c514c75a500c55fa8af8a7facee320bd16c58c7", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "patch": "@@ -2088,15 +2088,15 @@ pub enum InlineAsmRegOrRegClass {\n bitflags::bitflags! {\n     #[derive(Encodable, Decodable, HashStable_Generic)]\n     pub struct InlineAsmOptions: u16 {\n-        const PURE = 1 << 0;\n-        const NOMEM = 1 << 1;\n-        const READONLY = 1 << 2;\n+        const PURE            = 1 << 0;\n+        const NOMEM           = 1 << 1;\n+        const READONLY        = 1 << 2;\n         const PRESERVES_FLAGS = 1 << 3;\n-        const NORETURN = 1 << 4;\n-        const NOSTACK = 1 << 5;\n-        const ATT_SYNTAX = 1 << 6;\n-        const RAW = 1 << 7;\n-        const MAY_UNWIND = 1 << 8;\n+        const NORETURN        = 1 << 4;\n+        const NOSTACK         = 1 << 5;\n+        const ATT_SYNTAX      = 1 << 6;\n+        const RAW             = 1 << 7;\n+        const MAY_UNWIND      = 1 << 8;\n     }\n }\n "}, {"sha": "b40ad6f700e82e8abda0d851f2f241f830c4d2ce", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "patch": "@@ -297,11 +297,11 @@ impl ExprPrecedence {\n         match self {\n             ExprPrecedence::Closure => PREC_CLOSURE,\n \n-            ExprPrecedence::Break |\n-            ExprPrecedence::Continue |\n-            ExprPrecedence::Ret |\n-            ExprPrecedence::Yield |\n-            ExprPrecedence::Yeet => PREC_JUMP,\n+            ExprPrecedence::Break\n+            | ExprPrecedence::Continue\n+            | ExprPrecedence::Ret\n+            | ExprPrecedence::Yield\n+            | ExprPrecedence::Yeet => PREC_JUMP,\n \n             // `Range` claims to have higher precedence than `Assign`, but `x .. x = x` fails to\n             // parse, instead of parsing as `(x .. x) = x`.  Giving `Range` a lower precedence\n@@ -318,43 +318,43 @@ impl ExprPrecedence {\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,\n \n             // Unary, prefix\n-            ExprPrecedence::Box |\n-            ExprPrecedence::AddrOf |\n+            ExprPrecedence::Box\n+            | ExprPrecedence::AddrOf\n             // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n             // However, this is not exactly right. When `let _ = a` is the LHS of a binop we\n             // need parens sometimes. E.g. we can print `(let _ = a) && b` as `let _ = a && b`\n             // but we need to print `(let _ = a) < b` as-is with parens.\n-            ExprPrecedence::Let |\n-            ExprPrecedence::Unary => PREC_PREFIX,\n+            | ExprPrecedence::Let\n+            | ExprPrecedence::Unary => PREC_PREFIX,\n \n             // Unary, postfix\n-            ExprPrecedence::Await |\n-            ExprPrecedence::Call |\n-            ExprPrecedence::MethodCall |\n-            ExprPrecedence::Field |\n-            ExprPrecedence::Index |\n-            ExprPrecedence::Try |\n-            ExprPrecedence::InlineAsm |\n-            ExprPrecedence::Mac => PREC_POSTFIX,\n+            ExprPrecedence::Await\n+            | ExprPrecedence::Call\n+            | ExprPrecedence::MethodCall\n+            | ExprPrecedence::Field\n+            | ExprPrecedence::Index\n+            | ExprPrecedence::Try\n+            | ExprPrecedence::InlineAsm\n+            | ExprPrecedence::Mac => PREC_POSTFIX,\n \n             // Never need parens\n-            ExprPrecedence::Array |\n-            ExprPrecedence::Repeat |\n-            ExprPrecedence::Tup |\n-            ExprPrecedence::Lit |\n-            ExprPrecedence::Path |\n-            ExprPrecedence::Paren |\n-            ExprPrecedence::If |\n-            ExprPrecedence::While |\n-            ExprPrecedence::ForLoop |\n-            ExprPrecedence::Loop |\n-            ExprPrecedence::Match |\n-            ExprPrecedence::ConstBlock |\n-            ExprPrecedence::Block |\n-            ExprPrecedence::TryBlock |\n-            ExprPrecedence::Async |\n-            ExprPrecedence::Struct |\n-            ExprPrecedence::Err => PREC_PAREN,\n+            ExprPrecedence::Array\n+            | ExprPrecedence::Repeat\n+            | ExprPrecedence::Tup\n+            | ExprPrecedence::Lit\n+            | ExprPrecedence::Path\n+            | ExprPrecedence::Paren\n+            | ExprPrecedence::If\n+            | ExprPrecedence::While\n+            | ExprPrecedence::ForLoop\n+            | ExprPrecedence::Loop\n+            | ExprPrecedence::Match\n+            | ExprPrecedence::ConstBlock\n+            | ExprPrecedence::Block\n+            | ExprPrecedence::TryBlock\n+            | ExprPrecedence::Async\n+            | ExprPrecedence::Struct\n+            | ExprPrecedence::Err => PREC_PAREN,\n         }\n     }\n }"}, {"sha": "a8436ea64f8d77702b4a4579a45c28ebc300e114", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "patch": "@@ -139,11 +139,10 @@ impl LifetimeName {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Infer => true,\n \n-            // It might seem surprising that `Fresh` counts as\n-            // *not* elided -- but this is because, as far as the code\n-            // in the compiler is concerned -- `Fresh` variants act\n-            // equivalently to \"some fresh name\". They correspond to\n-            // early-bound regions on an impl, in other words.\n+            // It might seem surprising that `Fresh` counts as not *elided*\n+            // -- but this is because, as far as the code in the compiler is\n+            // concerned -- `Fresh` variants act equivalently to \"some fresh name\".\n+            // They correspond to early-bound regions on an impl, in other words.\n             LifetimeName::Error | LifetimeName::Param(..) | LifetimeName::Static => false,\n         }\n     }"}, {"sha": "b3f15ba7cbf25609bf5f0d84bf927336fb955c02", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d433efa649ab24df5e8bd9961d3a633f7ea39d2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d433efa649ab24df5e8bd9961d3a633f7ea39d2c", "patch": "@@ -1666,7 +1666,8 @@ impl CheckAttrVisitor<'_> {\n                         E0552,\n                         \"unrecognized representation hint\"\n                     )\n-                    .help(\"valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\")\n+                    .help(\"valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, \\\n+                          `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\")\n                     .emit();\n \n                     continue;"}]}