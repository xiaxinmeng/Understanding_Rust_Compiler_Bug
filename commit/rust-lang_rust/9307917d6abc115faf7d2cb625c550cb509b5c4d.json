{"sha": "9307917d6abc115faf7d2cb625c550cb509b5c4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDc5MTdkNmFiYzExNWZhZjdkMmNiNjI1YzU1MGNiNTA5YjVjNGQ=", "commit": {"author": {"name": "Jonathan Strong", "email": "jstrong@legis.io", "date": "2017-12-07T01:30:57Z"}, "committer": {"name": "Jonathan Strong", "email": "jstrong@legis.io", "date": "2017-12-07T01:30:57Z"}, "message": "Adds language to the documentation for `Option` and `Result` suggesting\nthe use of lazily evaluated alternatives when appropriate. These\ncomments are intended to echo a clippy lint on the same topic (see\nhttps://rust-lang-nursery.github.io/rust-clippy/master/index.html#or_fun_call)", "tree": {"sha": "6ef393abc08b8eb501e71114ac41871f5c8a2732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef393abc08b8eb501e71114ac41871f5c8a2732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9307917d6abc115faf7d2cb625c550cb509b5c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9307917d6abc115faf7d2cb625c550cb509b5c4d", "html_url": "https://github.com/rust-lang/rust/commit/9307917d6abc115faf7d2cb625c550cb509b5c4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9307917d6abc115faf7d2cb625c550cb509b5c4d/comments", "author": null, "committer": null, "parents": [{"sha": "9f3b09116b742b2606dc5f36f9145e0c89e4010b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3b09116b742b2606dc5f36f9145e0c89e4010b", "html_url": "https://github.com/rust-lang/rust/commit/9f3b09116b742b2606dc5f36f9145e0c89e4010b"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "e354c7e16a13cd60044a33172b4f849566367e45", "filename": "src/libcore/option.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9307917d6abc115faf7d2cb625c550cb509b5c4d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9307917d6abc115faf7d2cb625c550cb509b5c4d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9307917d6abc115faf7d2cb625c550cb509b5c4d", "patch": "@@ -338,6 +338,10 @@ impl<T> Option<T> {\n \n     /// Returns the contained value or a default.\n     ///\n+    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing \n+    /// the result of a function call, it is recommended to use `unwrap_or_else`, \n+    /// which is lazily evaluated. \n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -451,6 +455,10 @@ impl<T> Option<T> {\n     /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n     /// [`Ok(v)`] and [`None`] to [`Err(err)`].\n     ///\n+    /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the\n+    /// result of a function call, it is recommended to use `ok_or_else`, which is\n+    /// lazily evaluated.\n+    ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`Err(err)`]: ../../std/result/enum.Result.html#variant.Err\n@@ -609,6 +617,10 @@ impl<T> Option<T> {\n \n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     ///\n+    /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n+    /// result of a function call, it is recommended to use `or_else`, which is\n+    /// lazily evaluated.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "438b3ed46a145e13fa80963ac45135ffafb5d07d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9307917d6abc115faf7d2cb625c550cb509b5c4d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9307917d6abc115faf7d2cb625c550cb509b5c4d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=9307917d6abc115faf7d2cb625c550cb509b5c4d", "patch": "@@ -625,6 +625,10 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n     ///\n+    /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n+    /// result of a function call, it is recommended to use `or_else`, which is\n+    /// lazily evaluated.\n+    ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n     ///\n@@ -690,6 +694,10 @@ impl<T, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     /// Else, it returns `optb`.\n     ///\n+    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing \n+    /// the result of a function call, it is recommended to use `unwrap_or_else`, \n+    /// which is lazily evaluated. \n+    ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n     ///"}]}