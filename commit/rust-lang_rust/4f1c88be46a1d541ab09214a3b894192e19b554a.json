{"sha": "4f1c88be46a1d541ab09214a3b894192e19b554a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMWM4OGJlNDZhMWQ1NDFhYjA5MjE0YTNiODk0MTkyZTE5YjU1NGE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-29T08:26:18Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:32:42Z"}, "message": "Use Arena inside hir::EnumDef.", "tree": {"sha": "42c2a1010a58bcb6cd69fb0dbc206b6b57549609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c2a1010a58bcb6cd69fb0dbc206b6b57549609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f1c88be46a1d541ab09214a3b894192e19b554a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1c88be46a1d541ab09214a3b894192e19b554a", "html_url": "https://github.com/rust-lang/rust/commit/4f1c88be46a1d541ab09214a3b894192e19b554a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f1c88be46a1d541ab09214a3b894192e19b554a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "html_url": "https://github.com/rust-lang/rust/commit/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712"}], "stats": {"total": 152, "additions": 78, "deletions": 74}, "files": [{"sha": "a892a7a25baedce74cbf91c8e7ef6340e19dbeb0", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -131,8 +131,10 @@ macro_rules! arena_types {\n             [] impl_item_ref: rustc::hir::ImplItemRef,\n             [] macro_def: rustc::hir::MacroDef<$tcx>,\n             [] path: rustc::hir::Path,\n+            [] struct_field: rustc::hir::StructField,\n             [] trait_item_ref: rustc::hir::TraitItemRef,\n             [] ty: rustc::hir::Ty,\n+            [] variant: rustc::hir::Variant<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "9e95cba7fcbfcbe0195ab8a174ee24f321ce770e", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -529,7 +529,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n fn is_c_like_enum(item: &Item<'_>) -> bool {\n     if let ItemKind::Enum(ref def, _) = item.kind {\n-        for variant in &def.variants {\n+        for variant in def.variants {\n             match variant.data {\n                 hir::VariantData::Unit(..) => { /* continue */ }\n                 _ => return false,"}, {"sha": "d4e89c5f047d2887845e937ac9314cc88b500354", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -340,7 +340,7 @@ impl CtorKind {\n         }\n     }\n \n-    pub fn from_hir(vdata: &hir::VariantData) -> CtorKind {\n+    pub fn from_hir(vdata: &hir::VariantData<'_>) -> CtorKind {\n         match *vdata {\n             hir::VariantData::Tuple(..) => CtorKind::Fn,\n             hir::VariantData::Unit(..) => CtorKind::Const,"}, {"sha": "094d390f82658ffaff776ed60ee6af9be43aed4a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -317,7 +317,7 @@ pub trait Visitor<'v>: Sized {\n         walk_poly_trait_ref(self, t, m)\n     }\n     fn visit_variant_data(&mut self,\n-                          s: &'v VariantData,\n+                          s: &'v VariantData<'v>,\n                           _: Name,\n                           _: &'v Generics,\n                           _parent_id: HirId,\n@@ -328,13 +328,13 @@ pub trait Visitor<'v>: Sized {\n         walk_struct_field(self, s)\n     }\n     fn visit_enum_def(&mut self,\n-                      enum_definition: &'v EnumDef,\n+                      enum_definition: &'v EnumDef<'v>,\n                       generics: &'v Generics,\n                       item_id: HirId,\n                       _: Span) {\n         walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: HirId) {\n+    fn visit_variant(&mut self, v: &'v Variant<'v>, g: &'v Generics, item_id: HirId) {\n         walk_variant(self, v, g, item_id)\n     }\n     fn visit_label(&mut self, label: &'v Label) {\n@@ -565,19 +565,19 @@ pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V,\n }\n \n pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                         enum_definition: &'v EnumDef,\n+                                         enum_definition: &'v EnumDef<'v>,\n                                          generics: &'v Generics,\n                                          item_id: HirId) {\n     visitor.visit_id(item_id);\n     walk_list!(visitor,\n                visit_variant,\n-               &enum_definition.variants,\n+               enum_definition.variants,\n                generics,\n                item_id);\n }\n \n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                        variant: &'v Variant,\n+                                        variant: &'v Variant<'v>,\n                                         generics: &'v Generics,\n                                         parent_item_id: HirId) {\n     visitor.visit_ident(variant.ident);\n@@ -588,7 +588,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                parent_item_id,\n                                variant.span);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n-    walk_list!(visitor, visit_attribute, &variant.attrs);\n+    walk_list!(visitor, visit_attribute, variant.attrs);\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n@@ -948,7 +948,7 @@ pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'\n     visitor.visit_defaultness(defaultness);\n }\n \n-pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n+pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData<'v>) {\n     if let Some(ctor_hir_id) = struct_definition.ctor_hir_id() {\n         visitor.visit_id(ctor_hir_id);\n     }"}, {"sha": "158957b4ada57f9dc975db92f7345a00cfce95ec", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -363,11 +363,12 @@ impl LoweringContext<'_, 'hir> {\n             ItemKind::Enum(ref enum_definition, ref generics) => {\n                 hir::ItemKind::Enum(\n                     hir::EnumDef {\n-                        variants: enum_definition\n+                        variants: self.arena.alloc_from_iter(\n+                            enum_definition\n                             .variants\n                             .iter()\n                             .map(|x| self.lower_variant(x))\n-                            .collect(),\n+                        ),\n                     },\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n@@ -756,9 +757,9 @@ impl LoweringContext<'_, 'hir> {\n         self.arena.alloc(hir::GlobalAsm { asm: ga.asm })\n     }\n \n-    fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n+    fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {\n         hir::Variant {\n-            attrs: self.lower_attrs(&v.attrs),\n+            attrs: self.lower_attrs_arena(&v.attrs),\n             data: self.lower_variant_data(&v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n             id: self.lower_node_id(v.id),\n@@ -767,19 +768,20 @@ impl LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData {\n+    fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData<'hir> {\n         match *vdata {\n             VariantData::Struct(ref fields, recovered) => hir::VariantData::Struct(\n-                fields.iter().enumerate().map(|f| self.lower_struct_field(f)).collect(),\n+                self.arena.alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_struct_field(f))),\n                 recovered,\n             ),\n             VariantData::Tuple(ref fields, id) => {\n                 hir::VariantData::Tuple(\n-                    fields\n+                    self.arena.alloc_from_iter(\n+                        fields\n                         .iter()\n                         .enumerate()\n                         .map(|f| self.lower_struct_field(f))\n-                        .collect(),\n+                    ),\n                     self.lower_node_id(id),\n                 )\n             },"}, {"sha": "00d61fb2fb084219b15e79ee4b965bf7a0703dca", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_variant(&mut self, v: &'hir Variant, g: &'hir Generics, item_id: HirId) {\n+    fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics, item_id: HirId) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {\n             // Register the constructor of this variant."}, {"sha": "8865157a3194d9557949a3d65f1eee2dc09466bb", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -980,7 +980,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData {\n+    pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData<'hir> {\n         match self.find(id) {\n             Some(Node::Item(i)) => {\n                 match i.kind {\n@@ -995,7 +995,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n+    pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {\n         match self.find(id) {\n             Some(Node::Variant(variant)) => variant,\n             _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n@@ -1250,7 +1250,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n \n impl Named for Item<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ForeignItem<'_> { fn name(&self) -> Name { self.ident.name } }\n-impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n+impl Named for Variant<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem<'_> { fn name(&self) -> Name { self.ident.name } }"}, {"sha": "813cbe503e22024bcb625d050cf0e2bec7fceb6c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -2263,21 +2263,21 @@ pub struct GlobalAsm {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct EnumDef {\n-    pub variants: HirVec<Variant>,\n+pub struct EnumDef<'hir> {\n+    pub variants: &'hir [Variant<'hir>],\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct Variant {\n+pub struct Variant<'hir> {\n     /// Name of the variant.\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n     /// Attributes of the variant.\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     /// Id of the variant (not the constructor, see `VariantData::ctor_hir_id()`).\n     pub id: HirId,\n     /// Fields and constructor id of the variant.\n-    pub data: VariantData,\n+    pub data: VariantData<'hir>,\n     /// Explicit discriminant (e.g., `Foo = 1`).\n     pub disr_expr: Option<AnonConst>,\n     /// Span\n@@ -2397,24 +2397,24 @@ impl StructField {\n \n /// Fields and constructor IDs of enum variants and structs.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum VariantData {\n+pub enum VariantData<'hir> {\n     /// A struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(HirVec<StructField>, /* recovered */ bool),\n+    Struct(&'hir [StructField], /* recovered */ bool),\n     /// A tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(HirVec<StructField>, HirId),\n+    Tuple(&'hir [StructField], HirId),\n     /// A unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n     Unit(HirId),\n }\n \n-impl VariantData {\n+impl VariantData<'hir> {\n     /// Return the fields of this variant.\n-    pub fn fields(&self) -> &[StructField] {\n+    pub fn fields(&self) -> &'hir [StructField] {\n         match *self {\n             VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => fields,\n             _ => &[],\n@@ -2499,11 +2499,11 @@ pub enum ItemKind<'hir> {\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     OpaqueTy(OpaqueTy),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`.\n-    Enum(EnumDef, Generics),\n+    Enum(EnumDef<'hir>, Generics),\n     /// A struct definition, e.g., `struct Foo<A> {x: A}`.\n-    Struct(VariantData, Generics),\n+    Struct(VariantData<'hir>, Generics),\n     /// A union definition, e.g., `union Foo<A, B> {x: A, y: B}`.\n-    Union(VariantData, Generics),\n+    Union(VariantData<'hir>, Generics),\n     /// A trait definition.\n     Trait(IsAuto, Unsafety, Generics, GenericBounds, &'hir [TraitItemRef]),\n     /// A trait alias.\n@@ -2791,7 +2791,7 @@ pub enum Node<'hir> {\n     ForeignItem(&'hir ForeignItem<'hir>),\n     TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem<'hir>),\n-    Variant(&'hir Variant),\n+    Variant(&'hir Variant<'hir>),\n     Field(&'hir StructField),\n     AnonConst(&'hir AnonConst),\n     Expr(&'hir Expr),\n@@ -2808,7 +2808,7 @@ pub enum Node<'hir> {\n \n     /// `Ctor` refers to the constructor of an enum variant or struct. Only tuple or unit variants\n     /// with synthesized constructors.\n-    Ctor(&'hir VariantData),\n+    Ctor(&'hir VariantData<'hir>),\n \n     Lifetime(&'hir Lifetime),\n     GenericParam(&'hir GenericParam),"}, {"sha": "63d8afc7ec999e0908512cc8cdf0a356d6cb28e7", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -708,7 +708,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_enum_def(&mut self,\n-                          enum_definition: &hir::EnumDef,\n+                          enum_definition: &hir::EnumDef<'_>,\n                           generics: &hir::Generics,\n                           name: ast::Name,\n                           span: syntax_pos::Span,\n@@ -723,7 +723,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variants(&mut self,\n-                          variants: &[hir::Variant],\n+                          variants: &[hir::Variant<'_>],\n                           span: syntax_pos::Span)\n                           {\n         self.bopen();\n@@ -770,7 +770,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_struct(&mut self,\n-                        struct_def: &hir::VariantData,\n+                        struct_def: &hir::VariantData<'_>,\n                         generics: &hir::Generics,\n                         name: ast::Name,\n                         span: syntax_pos::Span,\n@@ -819,7 +819,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_variant(&mut self, v: &hir::Variant) {\n+    pub fn print_variant(&mut self, v: &hir::Variant<'_>) {\n         self.head(\"\");\n         let generics = hir::Generics::empty();\n         self.print_struct(&v.data, &generics, v.ident.name, v.span, false);"}, {"sha": "6ca85f8da9003495468a3624ccf9644d05719669", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -990,7 +990,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n     }\n \n     fn visit_variant_data(&mut self,\n-                        s: &'tcx hir::VariantData,\n+                        s: &'tcx hir::VariantData<'tcx>,\n                         _: ast::Name,\n                         _: &'tcx hir::Generics,\n                         _: hir::HirId,\n@@ -1008,7 +1008,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n     }\n \n     fn visit_variant(&mut self,\n-                     v: &'tcx hir::Variant,\n+                     v: &'tcx hir::Variant<'tcx>,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {"}, {"sha": "fc05b0bd5a9d150f12ab3474da8857b12bad7f02", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -128,11 +128,11 @@ macro_rules! late_lint_methods {\n             fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n             fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n-            fn check_struct_def(a: &$hir hir::VariantData);\n-            fn check_struct_def_post(a: &$hir hir::VariantData);\n+            fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n+            fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n             fn check_struct_field(a: &$hir hir::StructField);\n-            fn check_variant(a: &$hir hir::Variant);\n-            fn check_variant_post(a: &$hir hir::Variant);\n+            fn check_variant(a: &$hir hir::Variant<$hir>);\n+            fn check_variant_post(a: &$hir hir::Variant<$hir>);\n             fn check_lifetime(a: &$hir hir::Lifetime);\n             fn check_path(a: &$hir hir::Path, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n@@ -629,7 +629,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_variant(&mut self,\n-                     v: &'tcx hir::Variant,\n+                     v: &'tcx hir::Variant<'tcx>,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n         self.with_lint_attrs(v.id, &v.attrs, |builder| {"}, {"sha": "8eb1ce14d1fc5ca045dcc7090b18fe2a75a51bc3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         });\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics, item_id: HirId) {\n         self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required,\n             |v| {\n                 if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n@@ -382,7 +382,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics, item_id: HirId) {\n         self.check_missing_stability(var.id, var.span, \"variant\");\n         intravisit::walk_variant(self, var, g, item_id);\n     }"}, {"sha": "156307e31bc7e19c262cad2baf14d5acc5c79bd6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant) {\n+    fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant<'_>) {\n         self.check_missing_docs_attrs(cx,\n                                       Some(v.id),\n                                       &v.attrs,"}, {"sha": "63a5f8681d6fe7a031ecfd97f23ba69be7c71926", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_struct_def(\n         &mut self,\n         cx: &LateContext<'_, '_>,\n-        s: &hir::VariantData,\n+        s: &hir::VariantData<'_>,\n     ) {\n         for sf in s.fields() {\n             self.check_snake_case(cx, \"structure field\", &sf.ident);"}, {"sha": "350df5750470ff21c932a03a6d34bb0a4d75a739", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -74,7 +74,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     }\n     impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n         fn visit_variant_data(&mut self,\n-                              v: &'tcx hir::VariantData,\n+                              v: &'tcx hir::VariantData<'tcx>,\n                               _: ast::Name,\n                               _: &'tcx hir::Generics,\n                               _: hir::HirId,"}, {"sha": "7c3cc80e5d26dd1780a7bee524963fe6857dc344", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         self.tables = old_tables;\n     }\n \n-    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,\n+    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData<'tcx>, _: ast::Name,\n                           _: &hir::Generics, _: hir::HirId, _: syntax_pos::Span) {\n         let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n@@ -375,7 +375,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     self.worklist.extend(enum_def.variants.iter().map(|variant| variant.id));\n                 }\n \n-                for variant in &enum_def.variants {\n+                for variant in enum_def.variants {\n                     if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n                         self.struct_constructors.insert(ctor_hir_id, variant.id);\n                     }\n@@ -503,7 +503,7 @@ impl DeadVisitor<'tcx> {\n             && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id, &field.attrs)\n     }\n \n-    fn should_warn_about_variant(&mut self, variant: &hir::Variant) -> bool {\n+    fn should_warn_about_variant(&mut self, variant: &hir::Variant<'_>) -> bool {\n         !self.symbol_is_live(variant.id)\n             && !has_allow_dead_code_or_lang_attr(self.tcx,\n                                                  variant.id,\n@@ -610,7 +610,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n \n     fn visit_variant(&mut self,\n-                     variant: &'tcx hir::Variant,\n+                     variant: &'tcx hir::Variant<'tcx>,\n                      g: &'tcx hir::Generics,\n                      id: hir::HirId) {\n         if self.should_warn_about_variant(&variant) {"}, {"sha": "0e80f93234c83aafcf2e7c75941851e268a3a2b0", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -209,7 +209,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_variant(&mut self,\n-                     v: &'v hir::Variant,\n+                     v: &'v hir::Variant<'v>,\n                      g: &'v hir::Generics,\n                      item_id: hir::HirId) {\n         self.record(\"Variant\", Id::None, v);"}, {"sha": "239c75b1f1b69f5c43c0ef628f070ed05d172489", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -675,7 +675,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         // Update levels of nested things.\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n-                for variant in &def.variants {\n+                for variant in def.variants {\n                     let variant_level = self.update(variant.id, item_level);\n                     if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n                         self.update(ctor_hir_id, item_level);\n@@ -798,7 +798,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 if item_level.is_some() {\n                     self.reach(item.hir_id, item_level).generics().predicates();\n                 }\n-                for variant in &def.variants {\n+                for variant in def.variants {\n                     let variant_level = self.get(variant.id);\n                     if variant_level.is_some() {\n                         for field in variant.data.fields() {\n@@ -1637,7 +1637,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self,\n-                     v: &'tcx hir::Variant,\n+                     v: &'tcx hir::Variant<'tcx>,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n         if self.access_levels.is_reachable(v.id) {\n@@ -1890,7 +1890,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemKind::Enum(ref def, _) => {\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n-                for variant in &def.variants {\n+                for variant in def.variants {\n                     for field in variant.data.fields() {\n                         self.check(field.hir_id, item_visibility).ty();\n                     }"}, {"sha": "1cc3f3690f9c2eaa9c4d332c424347ed680745e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -2435,7 +2435,7 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n }\n \n #[allow(trivial_numeric_casts)]\n-pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], id: hir::HirId) {\n+pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant<'tcx>], id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -2472,12 +2472,12 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n \n     if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n         let is_unit =\n-            |var: &hir::Variant| match var.data {\n+            |var: &hir::Variant<'_>| match var.data {\n                 hir::VariantData::Unit(..) => true,\n                 _ => false\n             };\n \n-        let has_disr = |var: &hir::Variant| var.disr_expr.is_some();\n+        let has_disr = |var: &hir::Variant<'_>| var.disr_expr.is_some();\n         let has_non_units = vs.iter().any(|var| !is_unit(var));\n         let disr_units = vs.iter().any(|var| is_unit(&var) && has_disr(&var));\n         let disr_non_unit = vs.iter().any(|var| !is_unit(&var) && has_disr(&var));"}, {"sha": "e974b070dbd5bfc111ef1e00b5fb0214c1e90a9a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -1113,7 +1113,7 @@ struct AdtField<'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    fn non_enum_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n+    fn non_enum_variant(&self, struct_def: &hir::VariantData<'_>) -> AdtVariant<'tcx> {\n         let fields = struct_def.fields().iter().map(|field| {\n             let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n             let field_ty = self.normalize_associated_types_in(field.span,\n@@ -1126,7 +1126,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         AdtVariant { fields }\n     }\n \n-    fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {\n+    fn enum_variants(&self, enum_def: &hir::EnumDef<'_>) -> Vec<AdtVariant<'tcx>> {\n         enum_def.variants.iter()\n             .map(|variant| self.non_enum_variant(&variant.data))\n             .collect()"}, {"sha": "224ec145520eb9951f25198a0cd3aa8b6d24749c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -529,7 +529,7 @@ fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n fn convert_enum_variant_types(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-    variants: &[hir::Variant]\n+    variants: &[hir::Variant<'_>]\n ) {\n     let def = tcx.adt_def(def_id);\n     let repr_type = def.repr.discr_type();\n@@ -584,7 +584,7 @@ fn convert_variant(\n     ctor_did: Option<DefId>,\n     ident: Ident,\n     discr: ty::VariantDiscr,\n-    def: &hir::VariantData,\n+    def: &hir::VariantData<'_>,\n     adt_kind: ty::AdtKind,\n     parent_did: DefId,\n ) -> ty::VariantDef {"}, {"sha": "64357cb4a3d058e312ed39329c81ddea47199360", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             hir::ItemKind::Enum(ref enum_def, _) => {\n                 self.visit_node_helper(item.hir_id);\n \n-                for variant in &enum_def.variants {\n+                for variant in enum_def.variants {\n                     if let hir::VariantData::Tuple(..) = variant.data {\n                         self.visit_node_helper(variant.data.ctor_hir_id().unwrap());\n                     }"}, {"sha": "95f361763e86de03ecbdb1127e6e0187aa3b3e02", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             hir::ItemKind::Enum(ref enum_def, _) => {\n                 self.add_inferreds_for_item(item.hir_id);\n \n-                for variant in &enum_def.variants {\n+                for variant in enum_def.variants {\n                     if let hir::VariantData::Tuple(..) = variant.data {\n                         self.add_inferreds_for_item(variant.data.ctor_hir_id().unwrap());\n                     }"}, {"sha": "d882a362266300b94da52bfd559b04919e38ae00", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -1836,7 +1836,7 @@ impl Clean<Item> for doctree::Union<'_> {\n     }\n }\n \n-impl Clean<VariantStruct> for ::rustc::hir::VariantData {\n+impl Clean<VariantStruct> for ::rustc::hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n@@ -1923,7 +1923,7 @@ impl Clean<Item> for ty::VariantDef {\n     }\n }\n \n-impl Clean<VariantKind> for hir::VariantData {\n+impl Clean<VariantKind> for hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantKind {\n         match self {\n             hir::VariantData::Struct(..) => VariantKind::Struct(self.clean(cx)),"}, {"sha": "852cc0fb3267f2c8bdd7b516f65f23e9f6d6e1ac", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1c88be46a1d541ab09214a3b894192e19b554a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4f1c88be46a1d541ab09214a3b894192e19b554a", "patch": "@@ -118,7 +118,7 @@ pub struct Variant<'hir> {\n     pub name: Name,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub def: &'hir hir::VariantData,\n+    pub def: &'hir hir::VariantData<'hir>,\n     pub whence: Span,\n }\n "}]}