{"sha": "ac254fbe7961dc78575fe8144a7049d280f06126", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjU0ZmJlNzk2MWRjNzg1NzVmZTgxNDRhNzA0OWQyODBmMDYxMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-15T08:42:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-15T08:42:10Z"}, "message": "Auto merge of #41859 - froydnj:align-float-parts, r=sfackler\n\nfix confusion about parts required for float formatting\n\nThe documentation for flt2dec doesn't match up with the actual\nimplementation, so fix the documentation to align with reality.\nPresumably due to the mismatch, the formatting code for floats in\nstd::fmt can use correspondingly shorter arrays in some places, so fix\nthose places up as well.\n\nFixes #41304.", "tree": {"sha": "0a6fccd62444dba358cfb514017fdfb9f9ca3208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6fccd62444dba358cfb514017fdfb9f9ca3208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac254fbe7961dc78575fe8144a7049d280f06126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac254fbe7961dc78575fe8144a7049d280f06126", "html_url": "https://github.com/rust-lang/rust/commit/ac254fbe7961dc78575fe8144a7049d280f06126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac254fbe7961dc78575fe8144a7049d280f06126/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386b0b9d39274701f30d31ee6ce31c363c6036ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/386b0b9d39274701f30d31ee6ce31c363c6036ea", "html_url": "https://github.com/rust-lang/rust/commit/386b0b9d39274701f30d31ee6ce31c363c6036ea"}, {"sha": "b1858447d36943f96fd4fb940e878b9db7bf3d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1858447d36943f96fd4fb940e878b9db7bf3d22", "html_url": "https://github.com/rust-lang/rust/commit/b1858447d36943f96fd4fb940e878b9db7bf3d22"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "4825c2aa132640abc14c27cc5e2f7ce040ed3928", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac254fbe7961dc78575fe8144a7049d280f06126/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac254fbe7961dc78575fe8144a7049d280f06126/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=ac254fbe7961dc78575fe8144a7049d280f06126", "patch": "@@ -21,7 +21,7 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, &mut buf, &mut parts);\n@@ -39,7 +39,7 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n     unsafe {\n         // enough for f32 and f64\n         let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n                                                  *num, sign, 0, false, &mut buf, &mut parts);\n         fmt.pad_formatted_parts(&formatted)\n@@ -75,7 +75,7 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n                                                   upper, &mut buf, &mut parts);\n@@ -94,7 +94,7 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n     unsafe {\n         // enough for f32 and f64\n         let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n                                                      &mut buf, &mut parts);"}, {"sha": "74b9e7bf37d5110a754d51a532d2eef5e9ea8d00", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac254fbe7961dc78575fe8144a7049d280f06126/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac254fbe7961dc78575fe8144a7049d280f06126/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=ac254fbe7961dc78575fe8144a7049d280f06126", "patch": "@@ -410,8 +410,8 @@ fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static\n /// it will only print given digits and nothing else.\n ///\n /// The byte buffer should be at least `MAX_SIG_DIGITS` bytes long.\n-/// There should be at least 5 parts available, due to the worst case like\n-/// `[+][0.][0000][45][0000]` with `frac_digits = 10`.\n+/// There should be at least 4 parts available, due to the worst case like\n+/// `[+][0.][0000][2][0000]` with `frac_digits = 10`.\n pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n                                  sign: Sign, frac_digits: usize, _upper: bool,\n                                  buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -465,8 +465,8 @@ pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n /// cannot be in this range, avoiding any confusion.\n ///\n /// The byte buffer should be at least `MAX_SIG_DIGITS` bytes long.\n-/// There should be at least 7 parts available, due to the worst case like\n-/// `[+][1][.][2345][e][-][67]`.\n+/// There should be at least 6 parts available, due to the worst case like\n+/// `[+][1][.][2345][e][-][6]`.\n pub fn to_shortest_exp_str<'a, T, F>(mut format_shortest: F, v: T,\n                                      sign: Sign, dec_bounds: (i16, i16), upper: bool,\n                                      buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -544,8 +544,8 @@ fn estimate_max_buf_len(exp: i16) -> usize {\n /// The byte buffer should be at least `ndigits` bytes long unless `ndigits` is\n /// so large that only the fixed number of digits will be ever written.\n /// (The tipping point for `f64` is about 800, so 1000 bytes should be enough.)\n-/// There should be at least 7 parts available, due to the worst case like\n-/// `[+][1][.][2345][e][-][67]`.\n+/// There should be at least 6 parts available, due to the worst case like\n+/// `[+][1][.][2345][e][-][6]`.\n pub fn to_exact_exp_str<'a, T, F>(mut format_exact: F, v: T,\n                                   sign: Sign, ndigits: usize, upper: bool,\n                                   buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>\n@@ -600,8 +600,8 @@ pub fn to_exact_exp_str<'a, T, F>(mut format_exact: F, v: T,\n /// The byte buffer should be enough for the output unless `frac_digits` is\n /// so large that only the fixed number of digits will be ever written.\n /// (The tipping point for `f64` is about 800, and 1000 bytes should be enough.)\n-/// There should be at least 5 parts available, due to the worst case like\n-/// `[+][0.][0000][45][0000]` with `frac_digits = 10`.\n+/// There should be at least 4 parts available, due to the worst case like\n+/// `[+][0.][0000][2][0000]` with `frac_digits = 10`.\n pub fn to_exact_fixed_str<'a, T, F>(mut format_exact: F, v: T,\n                                     sign: Sign, frac_digits: usize, _upper: bool,\n                                     buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>"}]}