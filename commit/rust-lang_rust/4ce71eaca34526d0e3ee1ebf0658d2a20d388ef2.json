{"sha": "4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTcxZWFjYTM0NTI2ZDBlM2VlMWViZjA2NThkMmEyMGQzODhlZjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-17T19:13:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:57Z"}, "message": "Migrate the last typedefs to ~Trait in rtio\n\nThere are no longer any remnants of typedefs, and everything is now built on\ntrue trait objects.", "tree": {"sha": "440d109c6f23dd446573195828c1ebbf2d261994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440d109c6f23dd446573195828c1ebbf2d261994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "html_url": "https://github.com/rust-lang/rust/commit/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d45b8fe793d369ddf600cce0f212f9b6165a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d45b8fe793d369ddf600cce0f212f9b6165a30", "html_url": "https://github.com/rust-lang/rust/commit/59d45b8fe793d369ddf600cce0f212f9b6165a30"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "21f98c272968f135a9ff2b826b89578bbdda1651", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "patch": "@@ -13,7 +13,7 @@ use result::{Ok, Err};\n use rt::io::net::ip::SocketAddr;\n use rt::io::{Reader, Writer, Listener, Acceptor};\n use rt::io::{io_error, read_error, EndOfFile};\n-use rt::rtio::{IoFactory, RtioTcpListenerObject, with_local_io,\n+use rt::rtio::{IoFactory, with_local_io,\n                RtioSocket, RtioTcpListener, RtioTcpAcceptor, RtioTcpStream};\n \n pub struct TcpStream {\n@@ -89,7 +89,7 @@ impl Writer for TcpStream {\n }\n \n pub struct TcpListener {\n-    priv obj: ~RtioTcpListenerObject\n+    priv obj: ~RtioTcpListener\n }\n \n impl TcpListener {"}, {"sha": "fc7839d545fa9a53a37b0c51d345fd2c9ee370fc", "filename": "src/libstd/rt/io/net/unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs?ref=4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "patch": "@@ -26,7 +26,7 @@ use prelude::*;\n \n use c_str::ToCStr;\n use rt::rtio::{IoFactory, RtioUnixListener, with_local_io};\n-use rt::rtio::{RtioUnixAcceptor, RtioPipe, RtioUnixListenerObject};\n+use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n use rt::io::pipe::PipeStream;\n use rt::io::{io_error, Listener, Acceptor, Reader, Writer};\n \n@@ -82,7 +82,7 @@ impl Writer for UnixStream {\n }\n \n pub struct UnixListener {\n-    priv obj: ~RtioUnixListenerObject,\n+    priv obj: ~RtioUnixListener,\n }\n \n impl UnixListener {"}, {"sha": "c779be0104662b56e9c1403307b54ab43a40da75", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "patch": "@@ -18,15 +18,10 @@ use ai = rt::io::net::addrinfo;\n use rt::io::IoError;\n use super::io::process::ProcessConfig;\n use super::io::net::ip::{IpAddr, SocketAddr};\n-use rt::uv::uvio;\n use path::Path;\n use super::io::{SeekStyle};\n use super::io::{FileMode, FileAccess, FileStat};\n \n-// FIXME(#9893) cannot call by-value self method on a trait object\n-pub type RtioTcpListenerObject = uvio::UvTcpListener;\n-pub type RtioUnixListenerObject = uvio::UvUnixListener;\n-\n pub trait EventLoop {\n     fn run(&mut self);\n     fn callback(&mut self, ~fn());\n@@ -82,7 +77,7 @@ pub fn with_local_io<T>(f: &fn(&mut IoFactory) -> Option<T>) -> Option<T> {\n \n pub trait IoFactory {\n     fn tcp_connect(&mut self, addr: SocketAddr) -> Result<~RtioTcpStream, IoError>;\n-    fn tcp_bind(&mut self, addr: SocketAddr) -> Result<~RtioTcpListenerObject, IoError>;\n+    fn tcp_bind(&mut self, addr: SocketAddr) -> Result<~RtioTcpListener, IoError>;\n     fn udp_bind(&mut self, addr: SocketAddr) -> Result<~RtioUdpSocket, IoError>;\n     fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n                           hint: Option<ai::Hint>) -> Result<~[ai::Info], IoError>;\n@@ -100,14 +95,14 @@ pub trait IoFactory {\n             -> Result<(~RtioProcess, ~[Option<~RtioPipe>]), IoError>;\n \n     fn unix_bind(&mut self, path: &CString) ->\n-        Result<~RtioUnixListenerObject, IoError>;\n+        Result<~RtioUnixListener, IoError>;\n     fn unix_connect(&mut self, path: &CString) -> Result<~RtioPipe, IoError>;\n     fn tty_open(&mut self, fd: c_int, readable: bool, close_on_drop: bool)\n             -> Result<~RtioTTY, IoError>;\n }\n \n pub trait RtioTcpListener : RtioSocket {\n-    fn listen(self) -> Result<~RtioTcpAcceptor, IoError>;\n+    fn listen(~self) -> Result<~RtioTcpAcceptor, IoError>;\n }\n \n pub trait RtioTcpAcceptor : RtioSocket {\n@@ -173,7 +168,7 @@ pub trait RtioPipe {\n }\n \n pub trait RtioUnixListener {\n-    fn listen(self) -> Result<~RtioUnixAcceptor, IoError>;\n+    fn listen(~self) -> Result<~RtioUnixAcceptor, IoError>;\n }\n \n pub trait RtioUnixAcceptor {"}, {"sha": "322588973ae776302b9a74118950bde3a6a72e61", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=4ce71eaca34526d0e3ee1ebf0658d2a20d388ef2", "patch": "@@ -493,12 +493,12 @@ impl IoFactory for UvIoFactory {\n         return result_cell.take();\n     }\n \n-    fn tcp_bind(&mut self, addr: SocketAddr) -> Result<~RtioTcpListenerObject, IoError> {\n+    fn tcp_bind(&mut self, addr: SocketAddr) -> Result<~RtioTcpListener, IoError> {\n         let mut watcher = TcpWatcher::new(self.uv_loop());\n         match watcher.bind(addr) {\n             Ok(_) => {\n                 let home = get_handle_to_current_scheduler!();\n-                Ok(~UvTcpListener::new(watcher, home))\n+                Ok(~UvTcpListener::new(watcher, home) as ~RtioTcpListener)\n             }\n             Err(uverr) => {\n                 do task::unkillable { // FIXME(#8674)\n@@ -804,13 +804,13 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn unix_bind(&mut self, path: &CString) ->\n-        Result<~RtioUnixListenerObject, IoError> {\n+        Result<~RtioUnixListener, IoError> {\n         let mut pipe = Pipe::new(self.uv_loop(), false);\n         match pipe.bind(path) {\n             Ok(()) => {\n                 let handle = get_handle_to_current_scheduler!();\n                 let pipe = UvUnboundPipe::new(pipe, handle);\n-                Ok(~UvUnixListener::new(pipe))\n+                Ok(~UvUnixListener::new(pipe) as ~RtioUnixListener)\n             }\n             Err(e) => {\n                 let scheduler: ~Scheduler = Local::take();\n@@ -919,7 +919,7 @@ impl RtioSocket for UvTcpListener {\n }\n \n impl RtioTcpListener for UvTcpListener {\n-    fn listen(self) -> Result<~RtioTcpAcceptor, IoError> {\n+    fn listen(~self) -> Result<~RtioTcpAcceptor, IoError> {\n         do self.home_for_io_consume |self_| {\n             let acceptor = ~UvTcpAcceptor::new(self_);\n             let incoming = Cell::new(acceptor.incoming.clone());\n@@ -1717,7 +1717,7 @@ impl UvUnixListener {\n }\n \n impl RtioUnixListener for UvUnixListener {\n-    fn listen(self) -> Result<~RtioUnixAcceptor, IoError> {\n+    fn listen(~self) -> Result<~RtioUnixAcceptor, IoError> {\n         do self.home_for_io_consume |self_| {\n             let acceptor = ~UvUnixAcceptor::new(self_);\n             let incoming = Cell::new(acceptor.incoming.clone());"}]}