{"sha": "ee42979eeb4b13bfb71116f330c735bc48fb38bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDI5NzllZWI0YjEzYmZiNzExMTZmMzMwYzczNWJjNDhmYjM4YmM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-14T00:44:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T13:15:57Z"}, "message": "rustc_metadata: use a separate TableBuilder type to build a Table.", "tree": {"sha": "b93dfa4a40dea1b054cbe345108a1ad3e98d954e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93dfa4a40dea1b054cbe345108a1ad3e98d954e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee42979eeb4b13bfb71116f330c735bc48fb38bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee42979eeb4b13bfb71116f330c735bc48fb38bc", "html_url": "https://github.com/rust-lang/rust/commit/ee42979eeb4b13bfb71116f330c735bc48fb38bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee42979eeb4b13bfb71116f330c735bc48fb38bc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67421bdfdf278f3737595c27a77d90bacd4215f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/67421bdfdf278f3737595c27a77d90bacd4215f3", "html_url": "https://github.com/rust-lang/rust/commit/67421bdfdf278f3737595c27a77d90bacd4215f3"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "e47047ae83dd956572e4163220b8f5f4007db5d5", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ee42979eeb4b13bfb71116f330c735bc48fb38bc/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee42979eeb4b13bfb71116f330c735bc48fb38bc/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=ee42979eeb4b13bfb71116f330c735bc48fb38bc", "patch": "@@ -1,5 +1,5 @@\n use crate::rmeta::*;\n-use crate::rmeta::table::{FixedSizeEncoding, Table};\n+use crate::rmeta::table::{FixedSizeEncoding, TableBuilder};\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -47,7 +47,7 @@ struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,\n \n-    per_def: PerDefTables<'tcx>,\n+    per_def: PerDefTableBuilders<'tcx>,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -61,27 +61,27 @@ struct EncodeContext<'tcx> {\n }\n \n #[derive(Default)]\n-struct PerDefTables<'tcx> {\n-    kind: Table<DefIndex, Lazy<EntryKind<'tcx>>>,\n-    visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n-    span: Table<DefIndex, Lazy<Span>>,\n-    attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n-    children: Table<DefIndex, Lazy<[DefIndex]>>,\n-    stability: Table<DefIndex, Lazy<attr::Stability>>,\n-    deprecation: Table<DefIndex, Lazy<attr::Deprecation>>,\n-\n-    ty: Table<DefIndex, Lazy<Ty<'tcx>>>,\n-    fn_sig: Table<DefIndex, Lazy<ty::PolyFnSig<'tcx>>>,\n-    impl_trait_ref: Table<DefIndex, Lazy<ty::TraitRef<'tcx>>>,\n-    inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n-    variances: Table<DefIndex, Lazy<[ty::Variance]>>,\n-    generics: Table<DefIndex, Lazy<ty::Generics>>,\n-    explicit_predicates: Table<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n-    inferred_outlives: Table<DefIndex, Lazy<&'tcx [(ty::Predicate<'tcx>, Span)]>>,\n-    super_predicates: Table<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n-\n-    mir: Table<DefIndex, Lazy<mir::Body<'tcx>>>,\n-    promoted_mir: Table<DefIndex, Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n+struct PerDefTableBuilders<'tcx> {\n+    kind: TableBuilder<DefIndex, Lazy<EntryKind<'tcx>>>,\n+    visibility: TableBuilder<DefIndex, Lazy<ty::Visibility>>,\n+    span: TableBuilder<DefIndex, Lazy<Span>>,\n+    attributes: TableBuilder<DefIndex, Lazy<[ast::Attribute]>>,\n+    children: TableBuilder<DefIndex, Lazy<[DefIndex]>>,\n+    stability: TableBuilder<DefIndex, Lazy<attr::Stability>>,\n+    deprecation: TableBuilder<DefIndex, Lazy<attr::Deprecation>>,\n+\n+    ty: TableBuilder<DefIndex, Lazy<Ty<'tcx>>>,\n+    fn_sig: TableBuilder<DefIndex, Lazy<ty::PolyFnSig<'tcx>>>,\n+    impl_trait_ref: TableBuilder<DefIndex, Lazy<ty::TraitRef<'tcx>>>,\n+    inherent_impls: TableBuilder<DefIndex, Lazy<[DefIndex]>>,\n+    variances: TableBuilder<DefIndex, Lazy<[ty::Variance]>>,\n+    generics: TableBuilder<DefIndex, Lazy<ty::Generics>>,\n+    explicit_predicates: TableBuilder<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n+    inferred_outlives: TableBuilder<DefIndex, Lazy<&'tcx [(ty::Predicate<'tcx>, Span)]>>,\n+    super_predicates: TableBuilder<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n+\n+    mir: TableBuilder<DefIndex, Lazy<mir::Body<'tcx>>>,\n+    promoted_mir: TableBuilder<DefIndex, Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n }\n \n macro_rules! encoder_methods {"}, {"sha": "10122fbba1fd47f79f5b7ac56cc28d910c9603cb", "filename": "src/librustc_metadata/rmeta/table.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee42979eeb4b13bfb71116f330c735bc48fb38bc/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee42979eeb4b13bfb71116f330c735bc48fb38bc/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs?ref=ee42979eeb4b13bfb71116f330c735bc48fb38bc", "patch": "@@ -117,33 +117,39 @@ impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n     }\n }\n \n-/// Random-access table (i.e. offeringconstant-time `get`/`set`), similar to\n+/// Random-access table (i.e. offering constant-time `get`/`set`), similar to\n /// `Vec<Option<T>>`, but without requiring encoding or decoding all the values\n /// eagerly and in-order.\n /// A total of `(max_idx + 1) * <Option<T> as FixedSizeEncoding>::BYTE_LEN` bytes\n-/// are used for a table, where `max_idx` is the largest index passed to `set`.\n-// FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n-// when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n-// (not sure if that is possible given that the `Vec` is being resized now)\n+/// are used for a table, where `max_idx` is the largest index passed to\n+/// `TableBuilder::set`.\n pub(super) struct Table<I: Idx, T> where Option<T>: FixedSizeEncoding {\n+    _marker: PhantomData<(fn(&I), T)>,\n+    // NOTE(eddyb) this makes `Table` not implement `Sized`, but no\n+    // value of `Table` is ever created (it's always behind `Lazy`).\n+    _bytes: [u8],\n+}\n+\n+/// Helper for constructing a table's serialization (also see `Table`).\n+pub(super) struct TableBuilder<I: Idx, T> where Option<T>: FixedSizeEncoding {\n     // FIXME(eddyb) use `IndexVec<I, [u8; <Option<T>>::BYTE_LEN]>` instead of\n     // `Vec<u8>`, once that starts working (i.e. lazy normalization).\n-    // Then again, that has the downside of not allowing `Table::encode` to\n+    // Then again, that has the downside of not allowing `TableBuilder::encode` to\n     // obtain a `&[u8]` entirely in safe code, for writing the bytes out.\n     bytes: Vec<u8>,\n     _marker: PhantomData<(fn(&I), T)>,\n }\n \n-impl<I: Idx, T> Default for Table<I, T> where Option<T>: FixedSizeEncoding {\n+impl<I: Idx, T> Default for TableBuilder<I, T> where Option<T>: FixedSizeEncoding {\n     fn default() -> Self {\n-        Table {\n+        TableBuilder {\n             bytes: vec![],\n             _marker: PhantomData,\n         }\n     }\n }\n \n-impl<I: Idx, T> Table<I, T> where Option<T>: FixedSizeEncoding {\n+impl<I: Idx, T> TableBuilder<I, T> where Option<T>: FixedSizeEncoding {\n     pub(super) fn set(&mut self, i: I, value: T) {\n         // FIXME(eddyb) investigate more compact encodings for sparse tables.\n         // On the PR @michaelwoerister mentioned:\n@@ -159,7 +165,7 @@ impl<I: Idx, T> Table<I, T> where Option<T>: FixedSizeEncoding {\n         Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n-    pub(super) fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n+    pub(super) fn encode(&self, buf: &mut Encoder) -> Lazy<Table<I, T>> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.bytes);\n         Lazy::from_position_and_meta("}]}