{"sha": "ce28b4d408d260dab1bbcef4851506bb3089f4bc", "node_id": "C_kwDOAAsO6NoAKGNlMjhiNGQ0MDhkMjYwZGFiMWJiY2VmNDg1MTUwNmJiMzA4OWY0YmM", "commit": {"author": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2023-01-01T18:47:11Z"}, "committer": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2023-01-01T18:48:18Z"}, "message": "Deallocate ThinBox even if the value unwinds on drop", "tree": {"sha": "941bff084f1ad771d1b5edd3f23e7587a255709e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941bff084f1ad771d1b5edd3f23e7587a255709e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce28b4d408d260dab1bbcef4851506bb3089f4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce28b4d408d260dab1bbcef4851506bb3089f4bc", "html_url": "https://github.com/rust-lang/rust/commit/ce28b4d408d260dab1bbcef4851506bb3089f4bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce28b4d408d260dab1bbcef4851506bb3089f4bc/comments", "author": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e76df06dcbdb96e634eb28a49f161d70ab844", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e76df06dcbdb96e634eb28a49f161d70ab844", "html_url": "https://github.com/rust-lang/rust/commit/bb6e76df06dcbdb96e634eb28a49f161d70ab844"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "c1a82e452f6c361d9c1d2cd900fd85bb2e5cb697", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ce28b4d408d260dab1bbcef4851506bb3089f4bc/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce28b4d408d260dab1bbcef4851506bb3089f4bc/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=ce28b4d408d260dab1bbcef4851506bb3089f4bc", "patch": "@@ -226,24 +226,45 @@ impl<H> WithHeader<H> {\n     // - Assumes that either `value` can be dereferenced, or is the\n     //   `NonNull::dangling()` we use when both `T` and `H` are ZSTs.\n     unsafe fn drop<T: ?Sized>(&self, value: *mut T) {\n+        struct DropGuard<H> {\n+            ptr: NonNull<u8>,\n+            value_layout: Layout,\n+            _marker: PhantomData<H>,\n+        }\n+\n+        impl<H> Drop for DropGuard<H> {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    // SAFETY: Layout must have been computable if we're in drop\n+                    let (layout, value_offset) =\n+                        WithHeader::<H>::alloc_layout(self.value_layout).unwrap_unchecked();\n+\n+                    // Note: Don't deallocate if the layout size is zero, because the pointer\n+                    // didn't come from the allocator.\n+                    if layout.size() != 0 {\n+                        alloc::dealloc(self.ptr.as_ptr().sub(value_offset), layout);\n+                    } else {\n+                        debug_assert!(\n+                            value_offset == 0\n+                                && mem::size_of::<H>() == 0\n+                                && self.value_layout.size() == 0\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+\n         unsafe {\n-            let value_layout = Layout::for_value_raw(value);\n-            // SAFETY: Layout must have been computable if we're in drop\n-            let (layout, value_offset) = Self::alloc_layout(value_layout).unwrap_unchecked();\n+            // `_guard` will deallocate the memory when dropped, even if `drop_in_place` unwinds.\n+            let _guard = DropGuard {\n+                ptr: self.0,\n+                value_layout: Layout::for_value_raw(value),\n+                _marker: PhantomData::<H>,\n+            };\n \n             // We only drop the value because the Pointee trait requires that the metadata is copy\n             // aka trivially droppable.\n             ptr::drop_in_place::<T>(value);\n-\n-            // Note: Don't deallocate if the layout size is zero, because the pointer\n-            // didn't come from the allocator.\n-            if layout.size() != 0 {\n-                alloc::dealloc(self.0.as_ptr().sub(value_offset), layout);\n-            } else {\n-                debug_assert!(\n-                    value_offset == 0 && mem::size_of::<H>() == 0 && value_layout.size() == 0\n-                );\n-            }\n         }\n     }\n "}]}