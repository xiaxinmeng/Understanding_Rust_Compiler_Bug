{"sha": "bc4c3df1bf98443411f96112b4ced136e1abcdf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGMzZGYxYmY5ODQ0MzQxMWY5NjExMmI0Y2VkMTM2ZTFhYmNkZjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-13T21:07:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-13T21:39:30Z"}, "message": "Don't allow the value of generic bare functions to be taken\n\nIssue #1038", "tree": {"sha": "dcf4ed1596492bbf13d8524b3c9378a5cb2b9ab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcf4ed1596492bbf13d8524b3c9378a5cb2b9ab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4c3df1bf98443411f96112b4ced136e1abcdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c3df1bf98443411f96112b4ced136e1abcdf1", "html_url": "https://github.com/rust-lang/rust/commit/bc4c3df1bf98443411f96112b4ced136e1abcdf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c3df1bf98443411f96112b4ced136e1abcdf1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89466ffd745547ee8b9c75a12a998dd16ef3bf2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89466ffd745547ee8b9c75a12a998dd16ef3bf2a", "html_url": "https://github.com/rust-lang/rust/commit/89466ffd745547ee8b9c75a12a998dd16ef3bf2a"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "035d611fbdc61ce2c28ca6db8af563e9fd6dc5eb", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=bc4c3df1bf98443411f96112b4ced136e1abcdf1", "patch": "@@ -7,7 +7,8 @@ export check_crate_fn_usage;\n \n type fn_usage_ctx = {\n     tcx: ty::ctxt,\n-    unsafe_fn_legal: bool\n+    unsafe_fn_legal: bool,\n+    generic_bare_fn_legal: bool\n };\n \n fn fn_usage_view_item(_vi: @ast::view_item,\n@@ -34,18 +35,44 @@ fn fn_usage_expr(expr: @ast::expr,\n               _ {}\n             }\n         }\n+        if !ctx.generic_bare_fn_legal\n+            && ty::expr_has_ty_params(ctx.tcx, expr) {\n+            alt ty::struct(ctx.tcx, ty::expr_ty(ctx.tcx, expr)) {\n+              ty::ty_fn(ast::proto_bare., _, _, _, _) {\n+                ctx.tcx.sess.span_fatal(\n+                    expr.span,\n+                    \"generic bare functions can only be called or bound\");\n+              }\n+              _ { }\n+            }\n+        }\n       }\n \n       ast::expr_call(f, args) {\n-        let f_ctx = {unsafe_fn_legal: true with ctx};\n+        let f_ctx = {unsafe_fn_legal: true,\n+                     generic_bare_fn_legal: true with ctx};\n         visit::visit_expr(f, f_ctx, v);\n \n-        let args_ctx = {unsafe_fn_legal: false with ctx};\n+        let args_ctx = {unsafe_fn_legal: false,\n+                        generic_bare_fn_legal: false with ctx};\n         visit::visit_exprs(args, args_ctx, v);\n       }\n \n+      ast::expr_bind(f, args) {\n+        let f_ctx = {unsafe_fn_legal: false,\n+                     generic_bare_fn_legal: true with ctx};\n+        v.visit_expr(f, f_ctx, v);\n+\n+        let args_ctx = {unsafe_fn_legal: false,\n+                        generic_bare_fn_legal: false with ctx};\n+        for arg in args {\n+            visit::visit_expr_opt(arg, args_ctx, v);\n+        }\n+      }\n+\n       _ {\n-        let subctx = {unsafe_fn_legal: false with ctx};\n+        let subctx = {unsafe_fn_legal: false,\n+                      generic_bare_fn_legal: false with ctx};\n         visit::visit_expr(expr, subctx, v);\n       }\n     }\n@@ -57,7 +84,11 @@ fn check_crate_fn_usage(tcx: ty::ctxt, crate: @ast::crate) {\n             @{visit_expr: fn_usage_expr,\n               visit_view_item: fn_usage_view_item\n                   with *visit::default_visitor()});\n-    let ctx = {tcx: tcx, unsafe_fn_legal: false};\n+    let ctx = {\n+        tcx: tcx,\n+        unsafe_fn_legal: false,\n+        generic_bare_fn_legal: false\n+    };\n     visit::visit_crate(*crate, ctx, visit);\n }\n "}, {"sha": "094bec2720916b966e9a024ed8dc4677b17e361d", "filename": "src/test/compile-fail/fn-bare-generic-instantiate1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs?ref=bc4c3df1bf98443411f96112b4ced136e1abcdf1", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern: generic bare functions can only be called or bound\n+// Issue #1038\n+\n+fn main() {\n+    fn# foo<T>() { }\n+\n+    // This wants to build a closure over type int,\n+    // but there's no way to do that while still being a bare function\n+    let f: fn#() = foo::<int>;\n+}\n\\ No newline at end of file"}, {"sha": "2b82ec57e60b94731951f7694068ee2afeac56e8", "filename": "src/test/compile-fail/fn-bare-generic-instantiate2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c3df1bf98443411f96112b4ced136e1abcdf1/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs?ref=bc4c3df1bf98443411f96112b4ced136e1abcdf1", "patch": "@@ -0,0 +1,13 @@\n+// error-pattern: generic bare functions can only be called or bound\n+// Issue #1038\n+\n+fn main() {\n+    fn# foo<T>(i: T) { }\n+\n+    // This wants to build a closure over type int,\n+    // but there's no way to do that while still being a bare function\n+    f(foo);\n+}\n+\n+fn f(i: fn#(&&int)) {\n+}\n\\ No newline at end of file"}]}