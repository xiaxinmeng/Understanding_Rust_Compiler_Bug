{"sha": "464ed58861e154f0ed462a3a1fc4c55a17823a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NGVkNTg4NjFlMTU0ZjBlZDQ2MmEzYTFmYzRjNTVhMTc4MjNhNmI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-03-06T05:00:05Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-03-06T05:00:05Z"}, "message": "Ensure `expect_fun_call` bad suggestion is fixed\n\nCloses #3839", "tree": {"sha": "0f8e5270400b8a9b73f9afac9807ba2554d83e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8e5270400b8a9b73f9afac9807ba2554d83e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464ed58861e154f0ed462a3a1fc4c55a17823a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464ed58861e154f0ed462a3a1fc4c55a17823a6b", "html_url": "https://github.com/rust-lang/rust/commit/464ed58861e154f0ed462a3a1fc4c55a17823a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464ed58861e154f0ed462a3a1fc4c55a17823a6b/comments", "author": null, "committer": null, "parents": [{"sha": "a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "html_url": "https://github.com/rust-lang/rust/commit/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "e111ee3dfeda50b4723c6d02630f1e7237c0dc68", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=464ed58861e154f0ed462a3a1fc4c55a17823a6b", "patch": "@@ -81,4 +81,7 @@ fn main() {\n         Some(\"foo\").unwrap_or_else(|| { panic!(get_static_str()) });\n         Some(\"foo\").unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) });\n     }\n+\n+    //Issue #3839\n+    Some(true).unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2));\n }"}, {"sha": "891ec883120c1f4a5a535629991ef2f9806e415b", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=464ed58861e154f0ed462a3a1fc4c55a17823a6b", "patch": "@@ -81,4 +81,7 @@ fn main() {\n         Some(\"foo\").expect(get_static_str());\n         Some(\"foo\").expect(get_non_static_str(&0));\n     }\n+\n+    //Issue #3839\n+    Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n }"}, {"sha": "bb16fabd973bafc48d7583f92883758a6e48c94e", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464ed58861e154f0ed462a3a1fc4c55a17823a6b/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=464ed58861e154f0ed462a3a1fc4c55a17823a6b", "patch": "@@ -60,5 +60,11 @@ error: use of `expect` followed by a function call\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n \n-error: aborting due to 10 previous errors\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:86:16\n+   |\n+LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`\n+\n+error: aborting due to 11 previous errors\n "}]}