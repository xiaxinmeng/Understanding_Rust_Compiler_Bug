{"sha": "2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjA2MmU4M2IzZjQxZTNhOTE3OWJjZDk2ZjU2NzViY2NhZDhjOWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T19:01:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-09T19:01:48Z"}, "message": "Rollup merge of #62417 - alexreg:fix-self-in-type-alias, r=pnkfelix\n\nFix ICEs when `Self` is used in type aliases\n\nI think it is right just to disallow this at resolution stage rather than let typeck produce a cyclic error. This is in line with previous behaviour. There was probably no need at all for the change that introduced this bug in #57428, so I've simply reversed it.\n\nFixes #62263, #62364, #62305.\n\nr? @eddyb", "tree": {"sha": "896daa305c000c7f6033df1f3a9d6da4463fe903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896daa305c000c7f6033df1f3a9d6da4463fe903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJOScCRBK7hj4Ov3rIwAAdHIIAD6NHrZNVsjCJizLXL1Ug9zU\nvRzO3OjQjcYnHp/bHhNygC8ibOk2AULdaD7e/VV7fQcC2BCHAzzOn6SwveKL3FYF\nh9Cl+XaEeBowS0PDL/18icoQCsFsadOmvDxa1dDqSFFiQwJd+yhD+j9AKFm3F5B0\nzPFIaCQUB1W2BPJkv8K47KQFdPRdof98YoJ3Ro7sbGCHxSv+7nbi4FRpMam0sBtr\nzBXICObQVY4JmOvQJYtbNbDVCP+fZEMOsyR+y9mVxVLaHRtsvh8yfO29Hl8Aw8yx\noVxxQfGfhNbwn6H+MSKjljDnlXYaC/kMAQk614wcAdjzzWFLGiW+daC037v5A4E=\n=b36V\n-----END PGP SIGNATURE-----\n", "payload": "tree 896daa305c000c7f6033df1f3a9d6da4463fe903\nparent b8ec4c4d11ede0fba333a0474ed473dbe82aacf1\nparent f035630089a4d7b037183cd9ded8b275e37601d6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562698908 +0200\ncommitter GitHub <noreply@github.com> 1562698908 +0200\n\nRollup merge of #62417 - alexreg:fix-self-in-type-alias, r=pnkfelix\n\nFix ICEs when `Self` is used in type aliases\n\nI think it is right just to disallow this at resolution stage rather than let typeck produce a cyclic error. This is in line with previous behaviour. There was probably no need at all for the change that introduced this bug in #57428, so I've simply reversed it.\n\nFixes #62263, #62364, #62305.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "html_url": "https://github.com/rust-lang/rust/commit/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "html_url": "https://github.com/rust-lang/rust/commit/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1"}, {"sha": "f035630089a4d7b037183cd9ded8b275e37601d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f035630089a4d7b037183cd9ded8b275e37601d6", "html_url": "https://github.com/rust-lang/rust/commit/f035630089a4d7b037183cd9ded8b275e37601d6"}], "stats": {"total": 85, "additions": 61, "deletions": 24}, "files": [{"sha": "4d297fa918a11d1bd2d32eb15abbcd7832da238f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -197,11 +197,11 @@ pub struct Compiler {\n \n #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n pub enum DocTests {\n-    // Default, run normal tests and doc tests.\n+    /// Run normal tests and doc tests (default).\n     Yes,\n-    // Do not run any doc tests.\n+    /// Do not run any doc tests.\n     No,\n-    // Only run doc tests.\n+    /// Only run doc tests.\n     Only,\n }\n \n@@ -221,10 +221,10 @@ pub enum GitRepo {\n /// methods specifically on this structure itself (to make it easier to\n /// organize).\n pub struct Build {\n-    // User-specified configuration via config.toml\n+    /// User-specified configuration from `config.toml`.\n     config: Config,\n \n-    // Derived properties from the above two configurations\n+    // Properties derived from the above configuration\n     src: PathBuf,\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n@@ -240,12 +240,12 @@ pub struct Build {\n     doc_tests: DocTests,\n     verbosity: usize,\n \n-    // Targets for which to build.\n+    // Targets for which to build\n     build: Interned<String>,\n     hosts: Vec<Interned<String>>,\n     targets: Vec<Interned<String>>,\n \n-    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents.\n+    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n \n@@ -255,7 +255,7 @@ pub struct Build {\n     cxx: HashMap<Interned<String>, cc::Tool>,\n     ar: HashMap<Interned<String>, PathBuf>,\n     ranlib: HashMap<Interned<String>, PathBuf>,\n-    // Misc\n+    // Miscellaneous\n     crates: HashMap<Interned<String>, Crate>,\n     is_sudo: bool,\n     ci_env: CiEnv,"}, {"sha": "207b0b3754ac67502b5f4ae41048cd58837633c0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -2523,17 +2523,7 @@ impl<'a> Resolver<'a> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.node);\n \n         match item.node {\n-            ItemKind::Ty(_, ref generics) => {\n-                self.with_current_self_item(item, |this| {\n-                    this.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n-                        let item_def_id = this.definitions.local_def_id(item.id);\n-                        this.with_self_rib(Res::SelfTy(Some(item_def_id), None), |this| {\n-                            visit::walk_item(this, item)\n-                        })\n-                    })\n-                });\n-            }\n-\n+            ItemKind::Ty(_, ref generics) |\n             ItemKind::Existential(_, ref generics) |\n             ItemKind::Fn(_, _, ref generics, _) => {\n                 self.with_generic_param_rib("}, {"sha": "d8c73b2be8258d7416ebd0aea69facb56cede685", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -4457,7 +4457,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n         return;\n     }\n \n-    // Make a vector of booleans initially false, set to true when used.\n+    // Make a vector of booleans initially `false`; set to `true` when used.\n     let mut types_used = vec![false; own_counts.types];\n \n     for leaf_ty in ty.walk() {\n@@ -4466,7 +4466,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n             types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n-            // an error for not using a type Parameter.\n+            // an error for not using a type parameter.\n             assert!(tcx.sess.has_errors());\n             return;\n         }"}, {"sha": "9634ed56f7b723149d93903a91dc287886a2f2cd", "filename": "src/test/ui/cast-char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Fcast-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Fcast-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-char.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "previous_filename": "src/test/ui/cast_char.rs"}, {"sha": "1729e5cbf0931571a36b791a7d5c8384af070b71", "filename": "src/test/ui/cast-char.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Fcast-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Fcast-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-char.stderr?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -1,17 +1,17 @@\n error: only `u8` can be cast into `char`\n-  --> $DIR/cast_char.rs:4:23\n+  --> $DIR/cast-char.rs:4:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n    |                       ^^^^^^^^^^^^^^^ help: use a `char` literal instead: `'\\u{1F888}'`\n    |\n note: lint level defined here\n-  --> $DIR/cast_char.rs:1:9\n+  --> $DIR/cast-char.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: only `u8` can be cast into `char`\n-  --> $DIR/cast_char.rs:6:22\n+  --> $DIR/cast-char.rs:6:22\n    |\n LL |     const XY: char = 129160 as char;\n    |                      ^^^^^^^^^^^^^^ help: use a `char` literal instead: `'\\u{1F888}'`", "previous_filename": "src/test/ui/cast_char.stderr"}, {"sha": "5e812db4d23622420767226fa55c71349e169586", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,8 @@\n+pub trait Trait {\n+    type A;\n+}\n+\n+pub type Alias = dyn Trait<A = Self::A>;\n+//~^ ERROR failed to resolve: use of undeclared type or module `Self` [E0433]\n+\n+fn main() {}"}, {"sha": "a642d029f93b5a899d0029d937a9a3dd65fd287e", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `Self`\n+  --> $DIR/issue-62263-self-in-atb.rs:5:32\n+   |\n+LL | pub type Alias = dyn Trait<A = Self::A>;\n+   |                                ^^^^ use of undeclared type or module `Self`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "0b95ddeb19e789a061d7121b50151bc9189b390d", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,4 @@\n+type Alias = Self::Target;\n+//~^ ERROR failed to resolve: use of undeclared type or module `Self` [E0433]\n+\n+fn main() {}"}, {"sha": "6eb445e9dbcfe055288adff45f72711f0dae9072", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `Self`\n+  --> $DIR/issue-62305-self-assoc-ty.rs:1:14\n+   |\n+LL | type Alias = Self::Target;\n+   |              ^^^^ use of undeclared type or module `Self`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "bebb4a9021aab4795cd32311c3c53c85059e97f9", "filename": "src/test/ui/type-alias/issue-62364-self-ty-arg.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.rs?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,8 @@\n+struct Struct<P1> {\n+    field: P1,\n+}\n+\n+type Alias<'a> = Struct<&'a Self>;\n+//~^ ERROR cannot find type `Self` in this scope [E0411]\n+\n+fn main() {}"}, {"sha": "5ed27760a82ddec8a59dd34ac389b1c2f50c85ef", "filename": "src/test/ui/type-alias/issue-62364-self-ty-arg.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2062e83b3f41e3a9179bcd96f5675bccad8c9a/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr?ref=2c2062e83b3f41e3a9179bcd96f5675bccad8c9a", "patch": "@@ -0,0 +1,9 @@\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-62364-self-ty-arg.rs:5:29\n+   |\n+LL | type Alias<'a> = Struct<&'a Self>;\n+   |                             ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0411`."}]}