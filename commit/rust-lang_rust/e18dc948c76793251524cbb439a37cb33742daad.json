{"sha": "e18dc948c76793251524cbb439a37cb33742daad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOGRjOTQ4Yzc2NzkzMjUxNTI0Y2JiNDM5YTM3Y2IzMzc0MmRhYWQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-05-31T20:07:03Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-31T21:30:49Z"}, "message": "another one. Somehow I failed to correctly commit", "tree": {"sha": "c6ec5e54b88859ab0948a4a096d29823d8d92e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6ec5e54b88859ab0948a4a096d29823d8d92e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e18dc948c76793251524cbb439a37cb33742daad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e18dc948c76793251524cbb439a37cb33742daad", "html_url": "https://github.com/rust-lang/rust/commit/e18dc948c76793251524cbb439a37cb33742daad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e18dc948c76793251524cbb439a37cb33742daad/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b112f96b8efe4ca0a0cf062fddc973c9845f810", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b112f96b8efe4ca0a0cf062fddc973c9845f810", "html_url": "https://github.com/rust-lang/rust/commit/1b112f96b8efe4ca0a0cf062fddc973c9845f810"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "1eb2f756cbf9169715458abe417d73f0eb4b7886", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18dc948c76793251524cbb439a37cb33742daad/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18dc948c76793251524cbb439a37cb33742daad/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=e18dc948c76793251524cbb439a37cb33742daad", "patch": "@@ -65,7 +65,7 @@ impl LateLintPass for LetIfSeq {\n                 let Some(expr) = it.peek(),\n                 let hir::StmtDecl(ref decl, _) = stmt.node,\n                 let hir::DeclLocal(ref decl) = decl.node,\n-                let hir::PatKind::Ident(mode, ref name, None) = decl.pat.node,\n+                let hir::PatKind::Binding(mode, ref name, None) = decl.pat.node,\n                 let Some(def) = cx.tcx.def_map.borrow().get(&decl.pat.id),\n                 let hir::StmtExpr(ref if_, _) = expr.node,\n                 let hir::ExprIf(ref cond, ref then, ref else_) = if_.node,"}]}