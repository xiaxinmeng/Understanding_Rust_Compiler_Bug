{"sha": "a3081a67742a67680f7ddef503094e62e2e68c55", "node_id": "C_kwDOAAsO6NoAKGEzMDgxYTY3NzQyYTY3NjgwZjdkZGVmNTAzMDk0ZTYyZTJlNjhjNTU", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-08T16:07:25Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:59:31Z"}, "message": "Adding crate_root_path to crate_graph", "tree": {"sha": "6fa8454e8c603deb2c714ccd2bb13706cd5e673d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa8454e8c603deb2c714ccd2bb13706cd5e673d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3081a67742a67680f7ddef503094e62e2e68c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3081a67742a67680f7ddef503094e62e2e68c55", "html_url": "https://github.com/rust-lang/rust/commit/a3081a67742a67680f7ddef503094e62e2e68c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3081a67742a67680f7ddef503094e62e2e68c55/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "html_url": "https://github.com/rust-lang/rust/commit/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "cf3be9d07fdc69c8645013a4db8cbd24aeb48ec4", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -165,6 +165,7 @@ impl ChangeFixture {\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n                     version,\n+                    None,\n                     meta.cfg,\n                     Default::default(),\n                     meta.env,\n@@ -205,6 +206,7 @@ impl ChangeFixture {\n                 Edition::CURRENT,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n                 None,\n+                None,\n                 default_cfg,\n                 Default::default(),\n                 Env::default(),\n@@ -249,6 +251,7 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"core\".to_string())),\n                 None,\n+                None,\n                 Default::default(),\n                 Default::default(),\n                 Env::default(),\n@@ -288,6 +291,7 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"proc_macros\".to_string())),\n                 None,\n+                None,\n                 Default::default(),\n                 Default::default(),\n                 Env::default(),"}, {"sha": "466e2eab56019c9c300cf148c6cd0c01ea81302c", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -304,6 +304,7 @@ pub struct CrateData {\n     /// For purposes of analysis, crates are anonymous (only names in\n     /// `Dependency` matters), this name should only be used for UI.\n     pub display_name: Option<CrateDisplayName>,\n+    pub crate_root_path: Option<AbsPathBuf>,\n     pub cfg_options: CfgOptions,\n     /// The cfg options that could be used by the crate\n     pub potential_cfg_options: Option<CfgOptions>,\n@@ -361,6 +362,7 @@ impl CrateGraph {\n         edition: Edition,\n         display_name: Option<CrateDisplayName>,\n         version: Option<String>,\n+        crate_root_path: Option<AbsPathBuf>,\n         cfg_options: CfgOptions,\n         potential_cfg_options: Option<CfgOptions>,\n         env: Env,\n@@ -374,6 +376,7 @@ impl CrateGraph {\n             edition,\n             version,\n             display_name,\n+            crate_root_path,\n             cfg_options,\n             potential_cfg_options,\n             env,\n@@ -740,6 +743,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -753,6 +757,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -766,6 +771,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -793,6 +799,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -806,6 +813,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -830,6 +838,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -843,6 +852,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -856,6 +866,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -880,6 +891,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -893,6 +905,7 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n+            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),"}, {"sha": "916c26855a2e931942b78abc91797b3c5ea5eba1", "filename": "crates/ide/src/fetch_crates.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffetch_crates.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -1,5 +1,5 @@\n use ide_db::{\n-    base_db::{CrateOrigin, SourceDatabase, SourceDatabaseExt},\n+    base_db::{CrateOrigin, SourceDatabase},\n     FxIndexSet, RootDatabase,\n };\n \n@@ -22,13 +22,13 @@ pub(crate) fn fetch_crates(db: &RootDatabase) -> FxIndexSet<CrateInfo> {\n         .iter()\n         .map(|crate_id| &crate_graph[crate_id])\n         .filter(|&data| !matches!(data.origin, CrateOrigin::Local { .. }))\n-        .filter_map(|data| crate_info(data, db))\n+        .filter_map(|data| crate_info(data))\n         .collect()\n }\n \n-fn crate_info(data: &ide_db::base_db::CrateData, db: &RootDatabase) -> Option<CrateInfo> {\n+fn crate_info(data: &ide_db::base_db::CrateData) -> Option<CrateInfo> {\n     let crate_name = crate_name(data);\n-    let crate_path = crate_path(db, data, &crate_name);\n+    let crate_path = data.crate_root_path.as_ref().map(|p| p.display().to_string());\n     if let Some(crate_path) = crate_path {\n         let version = data.version.clone().unwrap_or_else(|| \"\".to_owned());\n         Some(CrateInfo { name: crate_name, version, path: crate_path })\n@@ -43,29 +43,3 @@ fn crate_name(data: &ide_db::base_db::CrateData) -> String {\n         .map(|it| it.canonical_name().to_owned())\n         .unwrap_or(\"unknown\".to_string())\n }\n-\n-fn crate_path(\n-    db: &RootDatabase,\n-    data: &ide_db::base_db::CrateData,\n-    crate_name: &str,\n-) -> Option<String> {\n-    let source_root_id = db.file_source_root(data.root_file_id);\n-    let source_root = db.source_root(source_root_id);\n-    let source_root_path = source_root.path_for_file(&data.root_file_id);\n-    source_root_path.cloned().and_then(|mut root_path| {\n-        let mut crate_path = None;\n-        while let Some(vfs_path) = root_path.parent() {\n-            match vfs_path.name_and_extension() {\n-                Some((name, _)) => {\n-                    if name.starts_with(crate_name) {\n-                        crate_path = Some(vfs_path.to_string());\n-                        break;\n-                    }\n-                }\n-                None => break,\n-            }\n-            root_path = vfs_path;\n-        }\n-        crate_path\n-    })\n-}"}, {"sha": "131c781beee93aa6f51be25c7e6fcdafac4bc362", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -239,6 +239,7 @@ impl Analysis {\n             Edition::CURRENT,\n             None,\n             None,\n+            None,\n             cfg_options.clone(),\n             None,\n             Env::default(),"}, {"sha": "51ecc4001f6d69a4641992923a80c8aa8d9f9061", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -34,6 +34,7 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.edition,\n             data.display_name.clone(),\n             data.version.clone(),\n+            data.crate_root_path.clone(),\n             data.cfg_options.clone(),\n             data.potential_cfg_options.clone(),\n             data.env.clone(),"}, {"sha": "6a3c685016dca029d5f748260805c8d9f8ffe552", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -213,6 +213,13 @@ impl AbsPath {\n     pub fn exists(&self) -> bool {\n         self.0.exists()\n     }\n+\n+    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+        Some((\n+            self.file_stem()?.to_str()?,\n+            self.extension().and_then(|extension| extension.to_str()),\n+        ))\n+    }\n     // endregion:delegate-methods\n }\n "}, {"sha": "ca28d742d5c413abe05f322fc4005c2a06d369db", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -102,6 +102,11 @@ fn replace_root(s: &mut String, direction: bool) {\n     }\n }\n \n+fn replace_fake_sys_root(s: &mut String) {\n+    let root = get_test_path(\"fake-sysroot\");\n+    *s = s.replace(root.to_str().expect(\"expected str\"), \"$FAKESYSROOT$\")\n+}\n+\n fn get_test_path(file: &str) -> PathBuf {\n     let base = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     base.join(\"test_data\").join(file)\n@@ -140,6 +145,7 @@ fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacro\n fn check_crate_graph(crate_graph: CrateGraph, expect: ExpectFile) {\n     let mut crate_graph = format!(\"{crate_graph:#?}\");\n     replace_root(&mut crate_graph, false);\n+    replace_fake_sys_root(&mut crate_graph);\n     expect.assert_eq(&crate_graph);\n }\n "}, {"sha": "ba5a1c4e35436d800a4ac1fb5eef7c48f1550eec", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -766,6 +766,7 @@ fn project_json_to_crate_graph(\n                     proc_macro_dylib_path,\n                     is_proc_macro,\n                     repository,\n+                    root_module,\n                     ..\n                 },\n                 file_id,\n@@ -784,6 +785,7 @@ fn project_json_to_crate_graph(\n                     *edition,\n                     display_name.clone(),\n                     version.clone(),\n+                    crate_path(display_name.as_ref(), root_module),\n                     target_cfgs.iter().chain(cfg.iter()).cloned().collect(),\n                     None,\n                     env,\n@@ -832,6 +834,30 @@ fn project_json_to_crate_graph(\n     res\n }\n \n+//Thats a best effort to try and find the crate path for a project configured using JsonProject model\n+fn crate_path(\n+    crate_name: Option<&CrateDisplayName>,\n+    root_module_path: &AbsPathBuf,\n+) -> Option<AbsPathBuf> {\n+    crate_name.and_then(|crate_name| {\n+        let mut crate_path = None;\n+        let mut root_path = root_module_path.as_path();\n+        while let Some(path) = root_path.parent() {\n+            match path.name_and_extension() {\n+                Some((name, _)) => {\n+                    if name.starts_with(crate_name.canonical_name()) {\n+                        crate_path = Some(path.to_path_buf());\n+                        break;\n+                    }\n+                }\n+                None => break,\n+            }\n+            root_path = path;\n+        }\n+        crate_path\n+    })\n+}\n+\n fn cargo_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     rustc: Option<&(CargoWorkspace, WorkspaceBuildScripts)>,\n@@ -1053,6 +1079,7 @@ fn detached_files_to_crate_graph(\n             Edition::CURRENT,\n             display_name.clone(),\n             None,\n+            None,\n             cfg_options.clone(),\n             None,\n             Env::default(),\n@@ -1249,6 +1276,7 @@ fn add_target_crate_root(\n         edition,\n         Some(display_name),\n         Some(pkg.version.to_string()),\n+        Some(pkg.manifest.parent().to_owned()),\n         cfg_options,\n         potential_cfg_options,\n         env,\n@@ -1320,11 +1348,13 @@ fn sysroot_to_crate_graph(\n                 let env = Env::default();\n                 let display_name =\n                     CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n-                let crate_id = crate_graph.add_crate_root(\n+                let crate_root_path = sysroot.src_root().join(display_name.canonical_name());\n+            let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     Edition::CURRENT,\n                     Some(display_name),\n                     None,\n+                Some(crate_root_path),\n                     cfg_options.clone(),\n                     None,\n                     env,"}, {"sha": "d327f2edf14441e04ecefa6d9204324d5e808060", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -107,10 +107,7 @@ impl VfsPath {\n     /// Returns `self`'s base name and file extension.\n     pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         match &self.0 {\n-            VfsPathRepr::PathBuf(p) => Some((\n-                p.file_stem()?.to_str()?,\n-                p.extension().and_then(|extension| extension.to_str()),\n-            )),\n+            VfsPathRepr::PathBuf(p) => p.name_and_extension(),\n             VfsPathRepr::VirtualPath(p) => p.name_and_extension(),\n         }\n     }"}, {"sha": "aff5102e01f05b2598c2c71b047a6416f6537e03", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3081a67742a67680f7ddef503094e62e2e68c55/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a3081a67742a67680f7ddef503094e62e2e68c55/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=a3081a67742a67680f7ddef503094e62e2e68c55", "patch": "@@ -110,9 +110,13 @@ export class Dependency extends vscode.TreeItem {\n     ) {\n         super(label, collapsibleState);\n         this.id = this.dependencyPath.toLowerCase();\n-        this.tooltip = `${this.label}-${this.version}`;\n         this.description = this.version;\n         this.resourceUri = vscode.Uri.file(dependencyPath);\n+        if (this.version) {\n+            this.tooltip = `${this.label}-${this.version}`;\n+        } else {\n+            this.tooltip = this.label;\n+        }\n     }\n }\n \n@@ -124,8 +128,8 @@ export class DependencyFile extends vscode.TreeItem {\n         public readonly collapsibleState: vscode.TreeItemCollapsibleState\n     ) {\n         super(vscode.Uri.file(dependencyPath), collapsibleState);\n-        const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n         this.id = this.dependencyPath.toLowerCase();\n+        const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n         if (!isDir) {\n             this.command = { command: \"vscode.open\",\n                 title: \"Open File\","}]}