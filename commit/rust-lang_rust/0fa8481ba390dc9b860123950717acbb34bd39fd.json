{"sha": "0fa8481ba390dc9b860123950717acbb34bd39fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTg0ODFiYTM5MGRjOWI4NjAxMjM5NTA3MTdhY2JiMzRiZDM5ZmQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T16:48:30Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T16:48:41Z"}, "message": "Put tests in tests folder", "tree": {"sha": "d69800c80d0fbe52605973066fd30c228a035950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69800c80d0fbe52605973066fd30c228a035950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa8481ba390dc9b860123950717acbb34bd39fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa8481ba390dc9b860123950717acbb34bd39fd", "html_url": "https://github.com/rust-lang/rust/commit/0fa8481ba390dc9b860123950717acbb34bd39fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa8481ba390dc9b860123950717acbb34bd39fd/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01987a40bea852260f5d1442bb0631c0a893ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01987a40bea852260f5d1442bb0631c0a893ec0", "html_url": "https://github.com/rust-lang/rust/commit/d01987a40bea852260f5d1442bb0631c0a893ec0"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "e4172b40932fad65850e233785b9a2559fd5be57", "filename": "src/matches.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fa8481ba390dc9b860123950717acbb34bd39fd/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa8481ba390dc9b860123950717acbb34bd39fd/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=0fa8481ba390dc9b860123950717acbb34bd39fd", "patch": "@@ -254,9 +254,9 @@ fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n }\n \n #[derive(Debug, Eq, PartialEq)]\n-struct SpannedRange<T> {\n-    span: Span,\n-    node: (T, T),\n+pub struct SpannedRange<T> {\n+    pub span: Span,\n+    pub node: (T, T),\n }\n \n #[derive(Debug)]\n@@ -339,7 +339,7 @@ fn match_template(cx: &LateContext,\n     }\n }\n \n-fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &SpannedRange<T>)>\n+pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &SpannedRange<T>)>\n     where T: Copy + Ord {\n     #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n     enum Kind<'a, T: 'a> {\n@@ -392,17 +392,3 @@ fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &Span\n \n     None\n }\n-\n-#[test]\n-fn test_overlapping() {\n-    use syntax::codemap::DUMMY_SP;\n-\n-    let sp = |s, e| SpannedRange { span: DUMMY_SP, node: (s, e) };\n-\n-    assert_eq!(None, overlapping::<u8>(&[]));\n-    assert_eq!(None, overlapping(&[sp(1, 4)]));\n-    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6)]));\n-    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6), sp(10, 11)]));\n-    assert_eq!(Some((&sp(1, 4), &sp(3, 6))), overlapping(&[sp(1, 4), sp(3, 6)]));\n-    assert_eq!(Some((&sp(5, 6), &sp(6, 11))), overlapping(&[sp(1, 4), sp(5, 6), sp(6, 11)]));\n-}"}, {"sha": "03cc52817417eabc6610de6636ee7f5334f26e57", "filename": "tests/matches.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0fa8481ba390dc9b860123950717acbb34bd39fd/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa8481ba390dc9b860123950717acbb34bd39fd/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=0fa8481ba390dc9b860123950717acbb34bd39fd", "patch": "@@ -0,0 +1,20 @@\n+#![allow(plugin_as_library)]\n+#![feature(rustc_private)]\n+\n+extern crate clippy;\n+extern crate syntax;\n+\n+#[test]\n+fn test_overlapping() {\n+    use clippy::matches::overlapping;\n+    use syntax::codemap::DUMMY_SP;\n+\n+    let sp = |s, e| clippy::matches::SpannedRange { span: DUMMY_SP, node: (s, e) };\n+\n+    assert_eq!(None, overlapping::<u8>(&[]));\n+    assert_eq!(None, overlapping(&[sp(1, 4)]));\n+    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6)]));\n+    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6), sp(10, 11)]));\n+    assert_eq!(Some((&sp(1, 4), &sp(3, 6))), overlapping(&[sp(1, 4), sp(3, 6)]));\n+    assert_eq!(Some((&sp(5, 6), &sp(6, 11))), overlapping(&[sp(1, 4), sp(5, 6), sp(6, 11)]));\n+}"}]}