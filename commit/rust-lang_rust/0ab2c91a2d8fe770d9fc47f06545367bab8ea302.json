{"sha": "0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "node_id": "C_kwDOAAsO6NoAKDBhYjJjOTFhMmQ4ZmU3NzBkOWZjNDdmMDY1NDUzNjdiYWI4ZWEzMDI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-17T11:43:59Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-27T13:55:42Z"}, "message": "attributes: Add #[rustc_safe_intrinsic] builtin", "tree": {"sha": "e489a82eaf2676d5d7dd699d5fb61c9142feed23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e489a82eaf2676d5d7dd699d5fb61c9142feed23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "html_url": "https://github.com/rust-lang/rust/commit/0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 75, "additions": 24, "deletions": 51}, "files": [{"sha": "5ee6c9f23877097c60ec90f77276b4b1af75ef37", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -499,6 +499,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(rustc_safe_intrinsic, Normal, template!(Word), DuplicatesOk),\n     ungated!(\n         rustc_default_body_unstable, Normal,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk"}, {"sha": "b43d492eb7aad3de3ee03a63d985b38060516cd6", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 48, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -7,6 +7,7 @@ use crate::errors::{\n };\n use crate::require_same_types;\n \n+use hir::def_id::DefId;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n@@ -61,59 +62,19 @@ fn equate_intrinsic_type<'tcx>(\n }\n \n /// Returns the unsafety of the given intrinsic.\n-pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n-    match intrinsic {\n-        // When adding a new intrinsic to this list,\n-        // it's usually worth updating that intrinsic's documentation\n-        // to note that it's safe to call, since\n-        // safe extern fns are otherwise unprecedented.\n-        sym::abort\n-        | sym::assert_inhabited\n-        | sym::assert_zero_valid\n-        | sym::assert_uninit_valid\n-        | sym::size_of\n-        | sym::min_align_of\n-        | sym::needs_drop\n-        | sym::caller_location\n-        | sym::add_with_overflow\n-        | sym::sub_with_overflow\n-        | sym::mul_with_overflow\n-        | sym::wrapping_add\n-        | sym::wrapping_sub\n-        | sym::wrapping_mul\n-        | sym::saturating_add\n-        | sym::saturating_sub\n-        | sym::rotate_left\n-        | sym::rotate_right\n-        | sym::ctpop\n-        | sym::ctlz\n-        | sym::cttz\n-        | sym::bswap\n-        | sym::bitreverse\n-        | sym::discriminant_value\n-        | sym::type_id\n-        | sym::likely\n-        | sym::unlikely\n-        | sym::ptr_guaranteed_cmp\n-        | sym::minnumf32\n-        | sym::minnumf64\n-        | sym::maxnumf32\n-        | sym::rustc_peek\n-        | sym::maxnumf64\n-        | sym::type_name\n-        | sym::forget\n-        | sym::black_box\n-        | sym::variant_count\n-        | sym::ptr_mask => hir::Unsafety::Normal,\n-        _ => hir::Unsafety::Unsafe,\n+pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir::Unsafety {\n+    match tcx.has_attr(intrinsic_id, sym::rustc_safe_intrinsic) {\n+        true => hir::Unsafety::Normal,\n+        false => hir::Unsafety::Unsafe,\n     }\n }\n \n /// Remember to add all intrinsics here, in `compiler/rustc_codegen_llvm/src/intrinsic.rs`,\n /// and in `library/core/src/intrinsics.rs`.\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n-    let intrinsic_name = tcx.item_name(it.def_id.to_def_id());\n+    let intrinsic_id = it.def_id.to_def_id();\n+    let intrinsic_name = tcx.item_name(intrinsic_id);\n     let name_str = intrinsic_name.as_str();\n \n     let bound_vars = tcx.mk_bound_variable_kinds(\n@@ -160,7 +121,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         };\n         (n_tps, 0, inputs, output, hir::Unsafety::Unsafe)\n     } else {\n-        let unsafety = intrinsic_operation_unsafety(intrinsic_name);\n+        let unsafety = intrinsic_operation_unsafety(tcx, intrinsic_id);\n         let (n_tps, inputs, output) = match intrinsic_name {\n             sym::abort => (0, Vec::new(), tcx.types.never),\n             sym::unreachable => (0, Vec::new(), tcx.types.never),\n@@ -351,7 +312,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (\n                     1,\n                     vec![\n-                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0)),\n+                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0))\n                     ],\n                     tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n                 )"}, {"sha": "315a2763c760bad57fe12a781c169a75720d4fb5", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -2544,7 +2544,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrinsic_operation_unsafety(tcx.item_name(def_id))\n+        intrinsic_operation_unsafety(tcx, def_id)\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "c6eff27b9885e4a7cdf8a0c94c989038923779fd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -1282,6 +1282,7 @@ symbols! {\n         rustc_reallocator,\n         rustc_regions,\n         rustc_reservation_impl,\n+        rustc_safe_intrinsic,\n         rustc_serialize,\n         rustc_skip_array_during_method_dispatch,\n         rustc_specialization_trait,"}, {"sha": "80bf2f2fd9042d8158c85a50053b2c5cbd211d5a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -689,7 +689,7 @@ impl Item {\n                 let abi = tcx.fn_sig(self.item_id.as_def_id().unwrap()).abi();\n                 hir::FnHeader {\n                     unsafety: if abi == Abi::RustIntrinsic {\n-                        intrinsic_operation_unsafety(self.name.unwrap())\n+                        intrinsic_operation_unsafety(tcx, self.item_id.as_def_id().unwrap())\n                     } else {\n                         hir::Unsafety::Unsafe\n                     },"}, {"sha": "d08abdaeb1411f45e4cb90fb654e23de1f447362", "filename": "src/test/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -1,12 +1,14 @@\n #![feature(intrinsics)]\n #![feature(no_core)]\n+#![feature(rustc_attrs)]\n \n #![no_core]\n #![crate_name = \"foo\"]\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n     // @has - '//pre[@class=\"rust fn\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n     // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'"}, {"sha": "dd9e0b284eaa23ee59816dc2d9efe000f8321a21", "filename": "src/test/ui/error-codes/E0308.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -1,6 +1,8 @@\n #![feature(intrinsics)]\n+#![feature(rustc_attrs)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T>(); //~ ERROR E0308\n }\n "}, {"sha": "187b775f92dc0a5719d7a7477cb315f4add9679a", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: intrinsic has wrong type\n-  --> $DIR/E0308.rs:4:5\n+  --> $DIR/E0308.rs:6:5\n    |\n LL |     fn size_of<T>();\n    |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`"}, {"sha": "88bf42b685f4d071915670b89b925cebb872e8b1", "filename": "src/test/ui/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab2c91a2d8fe770d9fc47f06545367bab8ea302/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs?ref=0ab2c91a2d8fe770d9fc47f06545367bab8ea302", "patch": "@@ -1,15 +1,21 @@\n // run-pass\n \n #![feature(intrinsics)]\n+#![feature(rustc_attrs)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n+        #[rustc_safe_intrinsic]\n         pub fn ctpop<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn ctlz<T>(x: T) -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn cttz<T>(x: T) -> T;\n         pub fn cttz_nonzero<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn bswap<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn bitreverse<T>(x: T) -> T;\n     }\n }"}]}