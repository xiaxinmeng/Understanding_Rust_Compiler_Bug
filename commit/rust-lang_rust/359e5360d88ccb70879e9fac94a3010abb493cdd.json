{"sha": "359e5360d88ccb70879e9fac94a3010abb493cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWU1MzYwZDg4Y2NiNzA4NzllOWZhYzk0YTMwMTBhYmI0OTNjZGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T03:50:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:22:11Z"}, "message": "we have to permit deallocation memory for which we hold a read lock (67)", "tree": {"sha": "2a9c9e953c2b8bc15ed1174b8175065deb980349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9c9e953c2b8bc15ed1174b8175065deb980349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359e5360d88ccb70879e9fac94a3010abb493cdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/7MACgkQpp+NIls6\n19l3jg//UuHs8xeRcmYFEaiYqqdbYgiqxqCAV7ObjKpBup21fiBl1W+JQHYRyMQO\n5OFWTAAhrNtaieEBjvveQj6q0D8AFPZbJ4/S1bOPhHTBKDC/OuQ/l9nOC47jCLje\nB8QsohbR0/+gg2S3iDcALNpdvIwENqReYfB+JtFcRVCyPt5/jiZLARdFkBBHSfcs\nghwmwNgXUvzZQwLUCSkIX7WMt3AyNX8IQImpWqZZLb0V2+nJ+w0Y22Nwo8RloC6D\nH2bH2lALB32FXCkvB1T8B5+DIkwBuj7FsvNfNB9/Zvvq+cSPvJBRctzhuSQh2DjV\n9hngAUaj635kxOoH5B5awq96oxMTBmmScl1lXL1lH/bFPELLpyXRJphPlsHkr/jH\nDfF2ogi1kwnTGba0QcsB/wJAJOdzpIy0ZPENIOsJgrm5ISJC+kmkcWROuzl0UwFC\nnD0Pk97+cN42UccLPVeCOfCKopHpawyUx0Yo3kxPgruLcsbFlWLnN3sovyt6TvTX\nEpyjDiO+P22+7z9glGprgs4f/cOICU8HqmFQThtXuf1XSJWNFJJ4koTP6h/Q3GJ2\nNUR4SMlNWhV/7KnSZQBWdGnGuPZSzq6VYlJ8n0aeRZ9Ie2uPh5qdxVOZ8YES3sxd\n0jp5yaL0FwAARjtGt3TwsSTwkjO2/spJsKKaVP+z274Pm4OWKMQ=\n=FHKh\n-----END PGP SIGNATURE-----", "payload": "tree 2a9c9e953c2b8bc15ed1174b8175065deb980349\nparent ee209ccd74eb9d1266046782645974694bc9fa1a\nauthor Ralf Jung <post@ralfj.de> 1500004216 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970931 +0200\n\nwe have to permit deallocation memory for which we hold a read lock (67)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359e5360d88ccb70879e9fac94a3010abb493cdd", "html_url": "https://github.com/rust-lang/rust/commit/359e5360d88ccb70879e9fac94a3010abb493cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359e5360d88ccb70879e9fac94a3010abb493cdd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee209ccd74eb9d1266046782645974694bc9fa1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee209ccd74eb9d1266046782645974694bc9fa1a", "html_url": "https://github.com/rust-lang/rust/commit/ee209ccd74eb9d1266046782645974694bc9fa1a"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "19d6c3ed66d00d83112514e50930aa672c3be455", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/359e5360d88ccb70879e9fac94a3010abb493cdd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e5360d88ccb70879e9fac94a3010abb493cdd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=359e5360d88ccb70879e9fac94a3010abb493cdd", "patch": "@@ -393,11 +393,13 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(alloc) => alloc,\n             None => return Err(EvalError::DoubleFree),\n         };\n-        \n+\n         // It is okay for us to still holds locks on deallocation -- for example, we could store data we own\n         // in a local, and the local could be deallocated (from StorageDead) before the function returns.\n-        // However, we must have write access to the entire allocation.\n-        alloc.check_locks(self.cur_frame, 0, alloc.bytes.len() as u64, AccessKind::Write)\n+        // However, we should check *something*.  For now, we make sure that there is no conflicting write\n+        // lock by another frame.  We *have* to permit deallocation if we hold a read lock.\n+        // TODO: Figure out the exact rules here.\n+        alloc.check_locks(self.cur_frame, 0, alloc.bytes.len() as u64, AccessKind::Read)\n             .map_err(|lock| EvalError::DeallocatedLockedMemory { ptr, lock })?;\n \n         if alloc.kind != kind {"}]}