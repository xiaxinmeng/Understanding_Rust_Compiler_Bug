{"sha": "7bbdca6182ca6ab562fe7644015b30b171c5748e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYmRjYTYxODJjYTZhYjU2MmZlNzY0NDAxNWIzMGIxNzFjNTc0OGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-12T14:46:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T14:46:42Z"}, "message": "Merge #3564\n\n3564: Better handling of a few kinds of cargo/clippy diagnostics r=matklad a=kiljacken\n\nThis was initially supposed to just be a fix for #3433, but I caught a few things that ended up being useful as well.\r\n\r\nThis PR primarily makes us handle multi-edit fix suggestions properly. Instead of just applying the first fix we apply all the parts of the fix in a single action.\r\n\r\nSecond up, this PR handles diagnostics with multiple primary spans, f.x. the unused import diagnostic from rustc:\r\n![image](https://user-images.githubusercontent.com/209321/76531793-03269480-6476-11ea-9180-41c0ea705553.png)\r\n\r\nThe LSP doesn't handle this too well, as it only support a single complete range for each diagnostic, so we get duplicate messages in the problem panel of VSCode:\r\n![image](https://user-images.githubusercontent.com/209321/76531901-29e4cb00-6476-11ea-9746-cd57f8974b85.png)\r\n\r\nHowever, I feel like the improved visual aspect in-editor outweighs the duplication in the problem panel. I'm open to not including the second commit if anybody really doesn't like the idea of duplicate diagnostics in the problem pane.\r\n\r\nFixes #3433\r\nFixes #3257\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "07104eb5418d633e4ec14251596dbeb9b0a15b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07104eb5418d633e4ec14251596dbeb9b0a15b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bbdca6182ca6ab562fe7644015b30b171c5748e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaktSCRBK7hj4Ov3rIwAAdHIIAHmn+iBPYrWbfGOQ0cmZr59r\nsQ1c1ZsIsC96mWTVr06+abY+BX8ZOuqmu9MncL38V1YIZ7g8yF9DUJQ8VB8z/nJd\nrPH77rrX0Bjq970ClvHRVjXo5/Xg3ymXgWusuI6ynfvq9oiXeJIVboaDa0PlqK3Y\nD3zONIKk2WQnao8Ec+PXH/6R9AwjtiZGpJg/20epOrA9dTdoGwmnxw7iH3RkjvS/\nVewveauvYltgnk9bMmgsu4NutJ800kShatnbC/Y0pJ69RXcXGbt6XQ6QWCgSuAmI\nIn51T7LMAOMUL7gqgLL/geRXRPweZ/33xDT1IIaHgj2C1DqCmW97e0dG0jIJ0/8=\n=CKk/\n-----END PGP SIGNATURE-----\n", "payload": "tree 07104eb5418d633e4ec14251596dbeb9b0a15b91\nparent afd64ef4f75844ff61bc5967406f40ec90047348\nparent 98e8ad5e608b739d1d28a43c8c69358e77c1c1f0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584024402 +0000\ncommitter GitHub <noreply@github.com> 1584024402 +0000\n\nMerge #3564\n\n3564: Better handling of a few kinds of cargo/clippy diagnostics r=matklad a=kiljacken\n\nThis was initially supposed to just be a fix for #3433, but I caught a few things that ended up being useful as well.\r\n\r\nThis PR primarily makes us handle multi-edit fix suggestions properly. Instead of just applying the first fix we apply all the parts of the fix in a single action.\r\n\r\nSecond up, this PR handles diagnostics with multiple primary spans, f.x. the unused import diagnostic from rustc:\r\n![image](https://user-images.githubusercontent.com/209321/76531793-03269480-6476-11ea-9180-41c0ea705553.png)\r\n\r\nThe LSP doesn't handle this too well, as it only support a single complete range for each diagnostic, so we get duplicate messages in the problem panel of VSCode:\r\n![image](https://user-images.githubusercontent.com/209321/76531901-29e4cb00-6476-11ea-9746-cd57f8974b85.png)\r\n\r\nHowever, I feel like the improved visual aspect in-editor outweighs the duplication in the problem panel. I'm open to not including the second commit if anybody really doesn't like the idea of duplicate diagnostics in the problem pane.\r\n\r\nFixes #3433\r\nFixes #3257\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbdca6182ca6ab562fe7644015b30b171c5748e", "html_url": "https://github.com/rust-lang/rust/commit/7bbdca6182ca6ab562fe7644015b30b171c5748e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bbdca6182ca6ab562fe7644015b30b171c5748e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd64ef4f75844ff61bc5967406f40ec90047348", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd64ef4f75844ff61bc5967406f40ec90047348", "html_url": "https://github.com/rust-lang/rust/commit/afd64ef4f75844ff61bc5967406f40ec90047348"}, {"sha": "98e8ad5e608b739d1d28a43c8c69358e77c1c1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e8ad5e608b739d1d28a43c8c69358e77c1c1f0", "html_url": "https://github.com/rust-lang/rust/commit/98e8ad5e608b739d1d28a43c8c69358e77c1c1f0"}], "stats": {"total": 1180, "additions": 722, "deletions": 458}, "files": [{"sha": "c6f8ca3295fbccf8b7a4e3ad5c02e25678f53b80", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 65, "deletions": 63, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -8,6 +8,7 @@ use lsp_types::{\n     Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n };\n use std::{\n+    collections::HashMap,\n     fmt::Write,\n     path::{Component, Path, PathBuf, Prefix},\n     str::FromStr,\n@@ -126,44 +127,34 @@ fn map_rust_child_diagnostic(\n     rd: &RustDiagnostic,\n     workspace_root: &PathBuf,\n ) -> MappedRustChildDiagnostic {\n-    let span: &DiagnosticSpan = match rd.spans.iter().find(|s| s.is_primary) {\n-        Some(span) => span,\n-        None => {\n-            // `rustc` uses these spanless children as a way to print multi-line\n-            // messages\n-            return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n+    let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n+    if spans.is_empty() {\n+        // `rustc` uses these spanless children as a way to print multi-line\n+        // messages\n+        return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n+    }\n+\n+    let mut edit_map: HashMap<Url, Vec<TextEdit>> = HashMap::new();\n+    for &span in &spans {\n+        if let Some(suggested_replacement) = &span.suggested_replacement {\n+            let location = map_span_to_location(span, workspace_root);\n+            let edit = TextEdit::new(location.range, suggested_replacement.clone());\n+            edit_map.entry(location.uri).or_default().push(edit);\n         }\n-    };\n-\n-    // If we have a primary span use its location, otherwise use the parent\n-    let location = map_span_to_location(&span, workspace_root);\n-\n-    if let Some(suggested_replacement) = &span.suggested_replacement {\n-        // Include our replacement in the title unless it's empty\n-        let title = if !suggested_replacement.is_empty() {\n-            format!(\"{}: '{}'\", rd.message, suggested_replacement)\n-        } else {\n-            rd.message.clone()\n-        };\n-\n-        let edit = {\n-            let edits = vec![TextEdit::new(location.range, suggested_replacement.clone())];\n-            let mut edit_map = std::collections::HashMap::new();\n-            edit_map.insert(location.uri, edits);\n-            WorkspaceEdit::new(edit_map)\n-        };\n+    }\n \n+    if !edit_map.is_empty() {\n         MappedRustChildDiagnostic::SuggestedFix(CodeAction {\n-            title,\n+            title: rd.message.clone(),\n             kind: Some(\"quickfix\".to_string()),\n             diagnostics: None,\n-            edit: Some(edit),\n+            edit: Some(WorkspaceEdit::new(edit_map)),\n             command: None,\n             is_preferred: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n-            location,\n+            location: map_span_to_location(spans[0], workspace_root),\n             message: rd.message.clone(),\n         })\n     }\n@@ -189,13 +180,13 @@ pub(crate) struct MappedRustDiagnostic {\n pub(crate) fn map_rust_diagnostic_to_lsp(\n     rd: &RustDiagnostic,\n     workspace_root: &PathBuf,\n-) -> Option<MappedRustDiagnostic> {\n-    let primary_span = rd.spans.iter().find(|s| s.is_primary)?;\n-\n-    let location = map_span_to_location(&primary_span, workspace_root);\n+) -> Vec<MappedRustDiagnostic> {\n+    let primary_spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n+    if primary_spans.is_empty() {\n+        return vec![];\n+    }\n \n     let severity = map_level_to_severity(rd.level);\n-    let mut primary_span_label = primary_span.label.as_ref();\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());\n@@ -208,19 +199,10 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         }\n     }\n \n+    let mut needs_primary_span_label = true;\n     let mut related_information = vec![];\n     let mut tags = vec![];\n \n-    // If error occurs from macro expansion, add related info pointing to\n-    // where the error originated\n-    if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-        let def_loc = map_span_to_location_naive(&primary_span, workspace_root);\n-        related_information.push(DiagnosticRelatedInformation {\n-            location: def_loc,\n-            message: \"Error originated from macro here\".to_string(),\n-        });\n-    }\n-\n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n         let related = map_secondary_span_to_related(secondary_span, workspace_root);\n         if let Some(related) = related {\n@@ -240,15 +222,11 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n                 // These secondary messages usually duplicate the content of the\n                 // primary span label.\n-                primary_span_label = None;\n+                needs_primary_span_label = false;\n             }\n         }\n     }\n \n-    if let Some(primary_span_label) = primary_span_label {\n-        write!(&mut message, \"\\n{}\", primary_span_label).unwrap();\n-    }\n-\n     if is_unused_or_unnecessary(rd) {\n         tags.push(DiagnosticTag::Unnecessary);\n     }\n@@ -257,21 +235,45 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         tags.push(DiagnosticTag::Deprecated);\n     }\n \n-    let diagnostic = Diagnostic {\n-        range: location.range,\n-        severity,\n-        code: code.map(NumberOrString::String),\n-        source: Some(source),\n-        message,\n-        related_information: if !related_information.is_empty() {\n-            Some(related_information)\n-        } else {\n-            None\n-        },\n-        tags: if !tags.is_empty() { Some(tags) } else { None },\n-    };\n-\n-    Some(MappedRustDiagnostic { location, diagnostic, fixes })\n+    primary_spans\n+        .iter()\n+        .map(|primary_span| {\n+            let location = map_span_to_location(&primary_span, workspace_root);\n+\n+            let mut message = message.clone();\n+            if needs_primary_span_label {\n+                if let Some(primary_span_label) = &primary_span.label {\n+                    write!(&mut message, \"\\n{}\", primary_span_label).unwrap();\n+                }\n+            }\n+\n+            // If error occurs from macro expansion, add related info pointing to\n+            // where the error originated\n+            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n+                let def_loc = map_span_to_location_naive(&primary_span, workspace_root);\n+                related_information.push(DiagnosticRelatedInformation {\n+                    location: def_loc,\n+                    message: \"Error originated from macro here\".to_string(),\n+                });\n+            }\n+\n+            let diagnostic = Diagnostic {\n+                range: location.range,\n+                severity,\n+                code: code.clone().map(NumberOrString::String),\n+                source: Some(source.clone()),\n+                message,\n+                related_information: if !related_information.is_empty() {\n+                    Some(related_information.clone())\n+                } else {\n+                    None\n+                },\n+                tags: if !tags.is_empty() { Some(tags.clone()) } else { None },\n+            };\n+\n+            MappedRustDiagnostic { location, diagnostic, fixes: fixes.clone() }\n+        })\n+        .collect()\n }\n \n /// Returns a `Url` object from a given path, will lowercase drive letters if present."}, {"sha": "9e8f4eff43356ca92ce3fd3928eff3b63dd447bd", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "status": "modified", "additions": 87, "deletions": 85, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,98 +2,100 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/compiler/mir/tagset.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 41,\n-                character: 23,\n-            },\n-            end: Position {\n-                line: 41,\n-                character: 28,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/compiler/mir/tagset.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 41,\n+                    character: 23,\n+                },\n+                end: Position {\n+                    line: 41,\n+                    character: 28,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 41,\n-                character: 23,\n-            },\n-            end: Position {\n-                line: 41,\n-                character: 28,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 41,\n+                    character: 23,\n+                },\n+                end: Position {\n+                    line: 41,\n+                    character: 28,\n+                },\n             },\n-        },\n-        severity: Some(\n-            Warning,\n-        ),\n-        code: Some(\n-            String(\n-                \"trivially_copy_pass_by_ref\",\n+            severity: Some(\n+                Warning,\n             ),\n-        ),\n-        source: Some(\n-            \"clippy\",\n-        ),\n-        message: \"this argument is passed by reference, but would be more efficient if passed by value\\n#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\nfor further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n-        related_information: Some(\n-            [\n-                DiagnosticRelatedInformation {\n-                    location: Location {\n-                        uri: \"file:///test/compiler/lib.rs\",\n-                        range: Range {\n-                            start: Position {\n-                                line: 0,\n-                                character: 8,\n-                            },\n-                            end: Position {\n-                                line: 0,\n-                                character: 19,\n+            code: Some(\n+                String(\n+                    \"trivially_copy_pass_by_ref\",\n+                ),\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"this argument is passed by reference, but would be more efficient if passed by value\\n#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\nfor further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: \"file:///test/compiler/lib.rs\",\n+                            range: Range {\n+                                start: Position {\n+                                    line: 0,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 0,\n+                                    character: 19,\n+                                },\n                             },\n                         },\n+                        message: \"lint level defined here\",\n                     },\n-                    message: \"lint level defined here\",\n-                },\n-            ],\n-        ),\n-        tags: None,\n-    },\n-    fixes: [\n-        CodeAction {\n-            title: \"consider passing by value instead: \\'self\\'\",\n-            kind: Some(\n-                \"quickfix\",\n+                ],\n             ),\n-            diagnostics: None,\n-            edit: Some(\n-                WorkspaceEdit {\n-                    changes: Some(\n-                        {\n-                            \"file:///test/compiler/mir/tagset.rs\": [\n-                                TextEdit {\n-                                    range: Range {\n-                                        start: Position {\n-                                            line: 41,\n-                                            character: 23,\n-                                        },\n-                                        end: Position {\n-                                            line: 41,\n-                                            character: 28,\n+            tags: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider passing by value instead\",\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                diagnostics: None,\n+                edit: Some(\n+                    WorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/compiler/mir/tagset.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 41,\n+                                                character: 23,\n+                                            },\n+                                            end: Position {\n+                                                line: 41,\n+                                                character: 28,\n+                                            },\n                                         },\n+                                        new_text: \"self\",\n                                     },\n-                                    new_text: \"self\",\n-                                },\n-                            ],\n-                        },\n-                    ),\n-                    document_changes: None,\n-                },\n-            ),\n-            command: None,\n-            is_preferred: None,\n-        },\n-    ],\n-}\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                command: None,\n+                is_preferred: None,\n+            },\n+        ],\n+    },\n+]"}, {"sha": "61ae0c9aee7e3ef00325b70d118940c8304af34c", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_handles_macro_location.snap", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_handles_macro_location.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_handles_macro_location.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_handles_macro_location.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,45 +2,47 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/src/main.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 1,\n-                character: 4,\n-            },\n-            end: Position {\n-                line: 1,\n-                character: 26,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/src/main.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 1,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 1,\n+                    character: 26,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 1,\n-                character: 4,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 1,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 1,\n+                    character: 26,\n+                },\n             },\n-            end: Position {\n-                line: 1,\n-                character: 26,\n-            },\n-        },\n-        severity: Some(\n-            Error,\n-        ),\n-        code: Some(\n-            String(\n-                \"E0277\",\n+            severity: Some(\n+                Error,\n             ),\n-        ),\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n-        related_information: None,\n-        tags: None,\n+            code: Some(\n+                String(\n+                    \"E0277\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            related_information: None,\n+            tags: None,\n+        },\n+        fixes: [],\n     },\n-    fixes: [],\n-}\n+]"}, {"sha": "641da1a588b1bea6cc659eba756bac4fdff0c9a6", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_macro_compiler_error.snap", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_macro_compiler_error.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_macro_compiler_error.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_macro_compiler_error.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,60 +2,62 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/crates/ra_hir_def/src/data.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 79,\n-                character: 15,\n-            },\n-            end: Position {\n-                line: 79,\n-                character: 41,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/crates/ra_hir_def/src/data.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 79,\n+                    character: 15,\n+                },\n+                end: Position {\n+                    line: 79,\n+                    character: 41,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 79,\n-                character: 15,\n-            },\n-            end: Position {\n-                line: 79,\n-                character: 41,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 79,\n+                    character: 15,\n+                },\n+                end: Position {\n+                    line: 79,\n+                    character: 41,\n+                },\n             },\n-        },\n-        severity: Some(\n-            Error,\n-        ),\n-        code: None,\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"Please register your known path in the path module\",\n-        related_information: Some(\n-            [\n-                DiagnosticRelatedInformation {\n-                    location: Location {\n-                        uri: \"file:///test/crates/ra_hir_def/src/path.rs\",\n-                        range: Range {\n-                            start: Position {\n-                                line: 264,\n-                                character: 8,\n-                            },\n-                            end: Position {\n-                                line: 264,\n-                                character: 76,\n+            severity: Some(\n+                Error,\n+            ),\n+            code: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"Please register your known path in the path module\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: \"file:///test/crates/ra_hir_def/src/path.rs\",\n+                            range: Range {\n+                                start: Position {\n+                                    line: 264,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 264,\n+                                    character: 76,\n+                                },\n                             },\n                         },\n+                        message: \"Error originated from macro here\",\n                     },\n-                    message: \"Error originated from macro here\",\n-                },\n-            ],\n-        ),\n-        tags: None,\n+                ],\n+            ),\n+            tags: None,\n+        },\n+        fixes: [],\n     },\n-    fixes: [],\n-}\n+]"}, {"sha": "0557a2e79ebd607764b99bffeaea624ca9f3d0cf", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_multi_line_fix.snap", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -0,0 +1,114 @@\n+---\n+source: crates/ra_cargo_watch/src/conv/test.rs\n+expression: diag\n+---\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/src/main.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 3,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 3,\n+                    character: 5,\n+                },\n+            },\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 3,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 3,\n+                    character: 5,\n+                },\n+            },\n+            severity: Some(\n+                Warning,\n+            ),\n+            code: Some(\n+                String(\n+                    \"let_and_return\",\n+                ),\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"returning the result of a let binding from a block\\n`#[warn(clippy::let_and_return)]` on by default\\nfor further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: \"file:///test/src/main.rs\",\n+                            range: Range {\n+                                start: Position {\n+                                    line: 2,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 2,\n+                                    character: 30,\n+                                },\n+                            },\n+                        },\n+                        message: \"unnecessary let binding\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"return the expression directly\",\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                diagnostics: None,\n+                edit: Some(\n+                    WorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/src/main.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 2,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 2,\n+                                                character: 30,\n+                                            },\n+                                        },\n+                                        new_text: \"\",\n+                                    },\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 3,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 3,\n+                                                character: 5,\n+                                            },\n+                                        },\n+                                        new_text: \"(0..10).collect()\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                command: None,\n+                is_preferred: None,\n+            },\n+        ],\n+    },\n+]"}, {"sha": "754bc33a46efbdd73b2b7df2cfaac4bb847f8a64", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_rustc_incompatible_type_for_trait.snap", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_incompatible_type_for_trait.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_incompatible_type_for_trait.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_incompatible_type_for_trait.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,45 +2,47 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/compiler/ty/list_iter.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 51,\n-                character: 4,\n-            },\n-            end: Position {\n-                line: 51,\n-                character: 47,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/compiler/ty/list_iter.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 51,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 51,\n+                    character: 47,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 51,\n-                character: 4,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 51,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 51,\n+                    character: 47,\n+                },\n             },\n-            end: Position {\n-                line: 51,\n-                character: 47,\n-            },\n-        },\n-        severity: Some(\n-            Error,\n-        ),\n-        code: Some(\n-            String(\n-                \"E0053\",\n+            severity: Some(\n+                Error,\n             ),\n-        ),\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"method `next` has an incompatible type for trait\\nexpected type `fn(&mut ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&\\'list ty::Ref<M>>`\",\n-        related_information: None,\n-        tags: None,\n+            code: Some(\n+                String(\n+                    \"E0053\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"method `next` has an incompatible type for trait\\nexpected type `fn(&mut ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&\\'list ty::Ref<M>>`\",\n+            related_information: None,\n+            tags: None,\n+        },\n+        fixes: [],\n     },\n-    fixes: [],\n-}\n+]"}, {"sha": "78b7f7cc835c2464a603468fdd03314135ec7497", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_rustc_mismatched_type.snap", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_mismatched_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_mismatched_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_mismatched_type.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,45 +2,47 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/runtime/compiler_support.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 47,\n-                character: 64,\n-            },\n-            end: Position {\n-                line: 47,\n-                character: 69,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/runtime/compiler_support.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 47,\n+                    character: 64,\n+                },\n+                end: Position {\n+                    line: 47,\n+                    character: 69,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 47,\n-                character: 64,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 47,\n+                    character: 64,\n+                },\n+                end: Position {\n+                    line: 47,\n+                    character: 69,\n+                },\n             },\n-            end: Position {\n-                line: 47,\n-                character: 69,\n-            },\n-        },\n-        severity: Some(\n-            Error,\n-        ),\n-        code: Some(\n-            String(\n-                \"E0308\",\n+            severity: Some(\n+                Error,\n             ),\n-        ),\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"mismatched types\\nexpected usize, found u32\",\n-        related_information: None,\n-        tags: None,\n+            code: Some(\n+                String(\n+                    \"E0308\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"mismatched types\\nexpected usize, found u32\",\n+            related_information: None,\n+            tags: None,\n+        },\n+        fixes: [],\n     },\n-    fixes: [],\n-}\n+]"}, {"sha": "5989ed2026cfa56bf26085d0c2e618378115b678", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "status": "modified", "additions": 75, "deletions": 73, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,83 +2,85 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/driver/subcommand/repl.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 290,\n-                character: 8,\n-            },\n-            end: Position {\n-                line: 290,\n-                character: 11,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/driver/subcommand/repl.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 290,\n-                character: 8,\n-            },\n-            end: Position {\n-                line: 290,\n-                character: 11,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n             },\n-        },\n-        severity: Some(\n-            Warning,\n-        ),\n-        code: Some(\n-            String(\n-                \"unused_variables\",\n+            severity: Some(\n+                Warning,\n             ),\n-        ),\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n-        related_information: None,\n-        tags: Some(\n-            [\n-                Unnecessary,\n-            ],\n-        ),\n-    },\n-    fixes: [\n-        CodeAction {\n-            title: \"consider prefixing with an underscore: \\'_foo\\'\",\n-            kind: Some(\n-                \"quickfix\",\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n             ),\n-            diagnostics: None,\n-            edit: Some(\n-                WorkspaceEdit {\n-                    changes: Some(\n-                        {\n-                            \"file:///test/driver/subcommand/repl.rs\": [\n-                                TextEdit {\n-                                    range: Range {\n-                                        start: Position {\n-                                            line: 290,\n-                                            character: 8,\n-                                        },\n-                                        end: Position {\n-                                            line: 290,\n-                                            character: 11,\n-                                        },\n-                                    },\n-                                    new_text: \"_foo\",\n-                                },\n-                            ],\n-                        },\n-                    ),\n-                    document_changes: None,\n-                },\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+            related_information: None,\n+            tags: Some(\n+                [\n+                    Unnecessary,\n+                ],\n             ),\n-            command: None,\n-            is_preferred: None,\n         },\n-    ],\n-}\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                diagnostics: None,\n+                edit: Some(\n+                    WorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/driver/subcommand/repl.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                command: None,\n+                is_preferred: None,\n+            },\n+        ],\n+    },\n+]"}, {"sha": "e34b546dc1fd899f0a4f923597a1b8b024955a33", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_rustc_wrong_number_of_parameters.snap", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_wrong_number_of_parameters.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_wrong_number_of_parameters.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_wrong_number_of_parameters.snap?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -2,64 +2,66 @@\n source: crates/ra_cargo_watch/src/conv/test.rs\n expression: diag\n ---\n-MappedRustDiagnostic {\n-    location: Location {\n-        uri: \"file:///test/compiler/ty/select.rs\",\n-        range: Range {\n-            start: Position {\n-                line: 103,\n-                character: 17,\n-            },\n-            end: Position {\n-                line: 103,\n-                character: 29,\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/compiler/ty/select.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 103,\n+                    character: 17,\n+                },\n+                end: Position {\n+                    line: 103,\n+                    character: 29,\n+                },\n             },\n         },\n-    },\n-    diagnostic: Diagnostic {\n-        range: Range {\n-            start: Position {\n-                line: 103,\n-                character: 17,\n-            },\n-            end: Position {\n-                line: 103,\n-                character: 29,\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 103,\n+                    character: 17,\n+                },\n+                end: Position {\n+                    line: 103,\n+                    character: 29,\n+                },\n             },\n-        },\n-        severity: Some(\n-            Error,\n-        ),\n-        code: Some(\n-            String(\n-                \"E0061\",\n+            severity: Some(\n+                Error,\n             ),\n-        ),\n-        source: Some(\n-            \"rustc\",\n-        ),\n-        message: \"this function takes 2 parameters but 3 parameters were supplied\\nexpected 2 parameters\",\n-        related_information: Some(\n-            [\n-                DiagnosticRelatedInformation {\n-                    location: Location {\n-                        uri: \"file:///test/compiler/ty/select.rs\",\n-                        range: Range {\n-                            start: Position {\n-                                line: 218,\n-                                character: 4,\n-                            },\n-                            end: Position {\n-                                line: 230,\n-                                character: 5,\n+            code: Some(\n+                String(\n+                    \"E0061\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"this function takes 2 parameters but 3 parameters were supplied\\nexpected 2 parameters\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: \"file:///test/compiler/ty/select.rs\",\n+                            range: Range {\n+                                start: Position {\n+                                    line: 218,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 230,\n+                                    character: 5,\n+                                },\n                             },\n                         },\n+                        message: \"defined here\",\n                     },\n-                    message: \"defined here\",\n-                },\n-            ],\n-        ),\n-        tags: None,\n+                ],\n+            ),\n+            tags: None,\n+        },\n+        fixes: [],\n     },\n-    fixes: [],\n-}\n+]"}, {"sha": "4e81455ca177b5f9165540dad4b085fd26be72b9", "filename": "crates/ra_cargo_watch/src/conv/test.rs", "status": "modified", "additions": 141, "deletions": 7, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -58,7 +58,7 @@ fn snap_rustc_incompatible_type_for_trait() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -141,7 +141,7 @@ fn snap_rustc_unused_variable() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -266,7 +266,7 @@ fn snap_rustc_wrong_number_of_parameters() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -387,7 +387,7 @@ fn snap_clippy_pass_by_ref() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -431,7 +431,7 @@ fn snap_rustc_mismatched_type() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -703,7 +703,7 @@ fn snap_handles_macro_location() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }\n \n@@ -933,6 +933,140 @@ fn snap_macro_compiler_error() {\n     );\n \n     let workspace_root = PathBuf::from(\"/test/\");\n-    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+    insta::assert_debug_snapshot!(diag);\n+}\n+\n+#[test]\n+#[cfg(not(windows))]\n+fn snap_multi_line_fix() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+            \"rendered\": \"warning: returning the result of a let binding from a block\\n --> src/main.rs:4:5\\n  |\\n3 |     let a = (0..10).collect();\\n  |     -------------------------- unnecessary let binding\\n4 |     a\\n  |     ^\\n  |\\n  = note: `#[warn(clippy::let_and_return)]` on by default\\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\\nhelp: return the expression directly\\n  |\\n3 |     \\n4 |     (0..10).collect()\\n  |\\n\\n\",\n+            \"children\": [\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"note\",\n+                \"message\": \"`#[warn(clippy::let_and_return)]` on by default\",\n+                \"rendered\": null,\n+                \"spans\": []\n+                },\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"help\",\n+                \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\",\n+                \"rendered\": null,\n+                \"spans\": []\n+                },\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"help\",\n+                \"message\": \"return the expression directly\",\n+                \"rendered\": null,\n+                \"spans\": [\n+                    {\n+                    \"byte_end\": 55,\n+                    \"byte_start\": 29,\n+                    \"column_end\": 31,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": true,\n+                    \"label\": null,\n+                    \"line_end\": 3,\n+                    \"line_start\": 3,\n+                    \"suggested_replacement\": \"\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"text\": [\n+                        {\n+                        \"highlight_end\": 31,\n+                        \"highlight_start\": 5,\n+                        \"text\": \"    let a = (0..10).collect();\"\n+                        }\n+                    ]\n+                    },\n+                    {\n+                    \"byte_end\": 61,\n+                    \"byte_start\": 60,\n+                    \"column_end\": 6,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": true,\n+                    \"label\": null,\n+                    \"line_end\": 4,\n+                    \"line_start\": 4,\n+                    \"suggested_replacement\": \"(0..10).collect()\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"text\": [\n+                        {\n+                        \"highlight_end\": 6,\n+                        \"highlight_start\": 5,\n+                        \"text\": \"    a\"\n+                        }\n+                    ]\n+                    }\n+                ]\n+                }\n+            ],\n+            \"code\": {\n+                \"code\": \"clippy::let_and_return\",\n+                \"explanation\": null\n+            },\n+            \"level\": \"warning\",\n+            \"message\": \"returning the result of a let binding from a block\",\n+            \"spans\": [\n+                {\n+                \"byte_end\": 55,\n+                \"byte_start\": 29,\n+                \"column_end\": 31,\n+                \"column_start\": 5,\n+                \"expansion\": null,\n+                \"file_name\": \"src/main.rs\",\n+                \"is_primary\": false,\n+                \"label\": \"unnecessary let binding\",\n+                \"line_end\": 3,\n+                \"line_start\": 3,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                    \"highlight_end\": 31,\n+                    \"highlight_start\": 5,\n+                    \"text\": \"    let a = (0..10).collect();\"\n+                    }\n+                ]\n+                },\n+                {\n+                \"byte_end\": 61,\n+                \"byte_start\": 60,\n+                \"column_end\": 6,\n+                \"column_start\": 5,\n+                \"expansion\": null,\n+                \"file_name\": \"src/main.rs\",\n+                \"is_primary\": true,\n+                \"label\": null,\n+                \"line_end\": 4,\n+                \"line_start\": 4,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                    \"highlight_end\": 6,\n+                    \"highlight_start\": 5,\n+                    \"text\": \"    a\"\n+                    }\n+                ]\n+                }\n+            ]\n+        }\n+        \"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n     insta::assert_debug_snapshot!(diag);\n }"}, {"sha": "94b9c03d0c1381550c4a90cf781c59db4ef79df6", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bbdca6182ca6ab562fe7644015b30b171c5748e/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=7bbdca6182ca6ab562fe7644015b30b171c5748e", "patch": "@@ -197,23 +197,23 @@ impl CheckWatcherThread {\n             }\n \n             CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n-                let map_result =\n-                    match map_rust_diagnostic_to_lsp(&msg.message, &self.workspace_root) {\n-                        Some(map_result) => map_result,\n-                        None => return,\n-                    };\n-\n-                let MappedRustDiagnostic { location, diagnostic, fixes } = map_result;\n-                let fixes = fixes\n-                    .into_iter()\n-                    .map(|fix| {\n-                        CodeAction { diagnostics: Some(vec![diagnostic.clone()]), ..fix }.into()\n-                    })\n-                    .collect();\n+                let map_result = map_rust_diagnostic_to_lsp(&msg.message, &self.workspace_root);\n+                if map_result.is_empty() {\n+                    return;\n+                }\n \n-                task_send\n-                    .send(CheckTask::AddDiagnostic { url: location.uri, diagnostic, fixes })\n-                    .unwrap();\n+                for MappedRustDiagnostic { location, diagnostic, fixes } in map_result {\n+                    let fixes = fixes\n+                        .into_iter()\n+                        .map(|fix| {\n+                            CodeAction { diagnostics: Some(vec![diagnostic.clone()]), ..fix }.into()\n+                        })\n+                        .collect();\n+\n+                    task_send\n+                        .send(CheckTask::AddDiagnostic { url: location.uri, diagnostic, fixes })\n+                        .unwrap();\n+                }\n             }\n \n             CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}"}]}