{"sha": "cde5bcafe89658a43b7cf865f58057db29f4d531", "node_id": "C_kwDOAAsO6NoAKGNkZTViY2FmZTg5NjU4YTQzYjdjZjg2NWY1ODA1N2RiMjlmNGQ1MzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T23:38:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-23T18:09:30Z"}, "message": "Don't create projection ty for const projection", "tree": {"sha": "1950a3d3b8132228aa98576e5fd77e0a93744f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1950a3d3b8132228aa98576e5fd77e0a93744f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde5bcafe89658a43b7cf865f58057db29f4d531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde5bcafe89658a43b7cf865f58057db29f4d531", "html_url": "https://github.com/rust-lang/rust/commit/cde5bcafe89658a43b7cf865f58057db29f4d531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde5bcafe89658a43b7cf865f58057db29f4d531/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915aa06700af4a2363639bae70201cd7387470ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/915aa06700af4a2363639bae70201cd7387470ad", "html_url": "https://github.com/rust-lang/rust/commit/915aa06700af4a2363639bae70201cd7387470ad"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "ea45412e47f1199487b517f7f3921064dcf74fcc", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cde5bcafe89658a43b7cf865f58057db29f4d531/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde5bcafe89658a43b7cf865f58057db29f4d531/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cde5bcafe89658a43b7cf865f58057db29f4d531", "patch": "@@ -1272,14 +1272,29 @@ fn project<'cx, 'tcx>(\n         ProjectionCandidateSet::Single(candidate) => {\n             Ok(Projected::Progress(confirm_candidate(selcx, obligation, candidate)))\n         }\n-        ProjectionCandidateSet::None => Ok(Projected::NoProgress(\n-            // FIXME(associated_const_generics): this may need to change in the future?\n-            // need to investigate whether or not this is fine.\n-            selcx\n-                .tcx()\n-                .mk_projection(obligation.predicate.def_id, obligation.predicate.substs)\n-                .into(),\n-        )),\n+        ProjectionCandidateSet::None => {\n+            let tcx = selcx.tcx();\n+            let term = match tcx.def_kind(obligation.predicate.def_id) {\n+                DefKind::AssocTy | DefKind::ImplTraitPlaceholder => tcx\n+                    .mk_projection(obligation.predicate.def_id, obligation.predicate.substs)\n+                    .into(),\n+                DefKind::AssocConst => tcx\n+                    .mk_const(\n+                        ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(\n+                            obligation.predicate.def_id,\n+                            obligation.predicate.substs,\n+                        )),\n+                        tcx.type_of(obligation.predicate.def_id)\n+                            .subst(tcx, obligation.predicate.substs),\n+                    )\n+                    .into(),\n+                kind => {\n+                    bug!(\"unknown projection def-id: {}\", kind.descr(obligation.predicate.def_id))\n+                }\n+            };\n+\n+            Ok(Projected::NoProgress(term))\n+        }\n         // Error occurred while trying to processing impls.\n         ProjectionCandidateSet::Error(e) => Err(ProjectionError::TraitSelectionError(e)),\n         // Inherent ambiguity that prevents us from even enumerating the"}, {"sha": "b1a0f39962b617b951a54d295c2c890212997d62", "filename": "tests/ui/associated-consts/projection-unspecified-but-bounded.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cde5bcafe89658a43b7cf865f58057db29f4d531/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde5bcafe89658a43b7cf865f58057db29f4d531/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.rs?ref=cde5bcafe89658a43b7cf865f58057db29f4d531", "patch": "@@ -0,0 +1,16 @@\n+#![feature(associated_const_equality)]\n+\n+// Issue 110549\n+\n+pub trait TraitWAssocConst {\n+    const A: usize;\n+}\n+\n+fn foo<T: TraitWAssocConst<A = 32>>() {}\n+\n+fn bar<T: TraitWAssocConst>() {\n+    foo::<T>();\n+    //~^ ERROR type mismatch resolving `<T as TraitWAssocConst>::A == 32`\n+}\n+\n+fn main() {}"}, {"sha": "8175e510a093f1e0017ce1a94c569c203c2b1003", "filename": "tests/ui/associated-consts/projection-unspecified-but-bounded.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cde5bcafe89658a43b7cf865f58057db29f4d531/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cde5bcafe89658a43b7cf865f58057db29f4d531/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fprojection-unspecified-but-bounded.stderr?ref=cde5bcafe89658a43b7cf865f58057db29f4d531", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `<T as TraitWAssocConst>::A == 32`\n+  --> $DIR/projection-unspecified-but-bounded.rs:12:11\n+   |\n+LL |     foo::<T>();\n+   |           ^ expected `32`, found `<T as TraitWAssocConst>::A`\n+   |\n+   = note: expected constant `32`\n+              found constant `<T as TraitWAssocConst>::A`\n+note: required by a bound in `foo`\n+  --> $DIR/projection-unspecified-but-bounded.rs:9:28\n+   |\n+LL | fn foo<T: TraitWAssocConst<A = 32>>() {}\n+   |                            ^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}