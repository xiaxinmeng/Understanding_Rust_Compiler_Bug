{"sha": "cf636c233dfeef5abf0de8fb35e23c0a161810d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNjM2YzIzM2RmZWVmNWFiZjBkZThmYjM1ZTIzYzBhMTYxODEwZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-13T07:44:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-13T07:44:41Z"}, "message": "Auto merge of #22093 - petrochenkov:builtin, r=pnkfelix\n\nNames of structs, enums, traits, type aliases and type parameters (i.e. all identifiers that can be used as full paths in type position) are not allowed to match the names of primitive types.\r\nSee #20427 for more information.\r\n\r\nThis is a minor [breaking-change]", "tree": {"sha": "bb8395a62f97d34f1bfb8fd228e17a44692eef86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8395a62f97d34f1bfb8fd228e17a44692eef86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "html_url": "https://github.com/rust-lang/rust/commit/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "html_url": "https://github.com/rust-lang/rust/commit/ba2efe96aeada34c1e2dc267a1a35948bdda91f8"}, {"sha": "8ed58d8cccf61a23d9c97024c41d2fbf4a0f8ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed58d8cccf61a23d9c97024c41d2fbf4a0f8ecd", "html_url": "https://github.com/rust-lang/rust/commit/8ed58d8cccf61a23d9c97024c41d2fbf4a0f8ecd"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "124aa39243529178149313bbc03b7744e55fe7c7", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=cf636c233dfeef5abf0de8fb35e23c0a161810d2", "patch": "@@ -23,7 +23,8 @@ register_diagnostics! {\n     E0257, // inherent implementations are only allowed on types defined in the current module\n     E0258, // import conflicts with existing submodule\n     E0259, // an extern crate has already been imported into this module\n-    E0260 // name conflicts with an external crate that has been imported into this module\n+    E0260, // name conflicts with an external crate that has been imported into this module\n+    E0317 // user-defined types or type parameters cannot shadow the primitive types\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "848c3557b1bdb8f06c6ca47f099413bc670bd9eb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cf636c233dfeef5abf0de8fb35e23c0a161810d2", "patch": "@@ -2788,6 +2788,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         visit::walk_crate(self, krate);\n     }\n \n+    fn check_if_primitive_type_name(&self, name: Name, span: Span) {\n+        if let Some(_) = self.primitive_type_table.primitive_types.get(&name) {\n+            span_err!(self.session, span, E0317,\n+                \"user-defined types or type parameters cannot shadow the primitive types\");\n+        }\n+    }\n+\n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n \n@@ -2799,6 +2806,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             // enum item: resolve all the variants' discrs,\n             // then resolve the ty params\n             ItemEnum(ref enum_def, ref generics) => {\n+                self.check_if_primitive_type_name(name, item.span);\n+\n                 for variant in &(*enum_def).variants {\n                     if let Some(ref dis_expr) = variant.node.disr_expr {\n                         // resolve the discriminator expr\n@@ -2824,6 +2833,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ItemTy(_, ref generics) => {\n+                self.check_if_primitive_type_name(name, item.span);\n+\n                 self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                                TypeSpace,\n                                                                item.id,\n@@ -2847,6 +2858,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ItemTrait(_, ref generics, ref bounds, ref trait_items) => {\n+                self.check_if_primitive_type_name(name, item.span);\n+\n                 // Create a new rib for the self type.\n                 let mut self_type_rib = Rib::new(ItemRibKind);\n \n@@ -2919,6 +2932,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ItemStruct(ref struct_def, ref generics) => {\n+                self.check_if_primitive_type_name(name, item.span);\n+\n                 self.resolve_struct(item.id,\n                                     generics,\n                                     &struct_def.fields[]);\n@@ -2972,7 +2987,19 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 });\n             }\n \n-            ItemExternCrate(_) | ItemUse(_) | ItemMac(..) => {\n+            ItemUse(ref view_path) => {\n+                // check for imports shadowing primitive types\n+                if let ast::ViewPathSimple(ident, _) = view_path.node {\n+                    match self.def_map.borrow().get(&item.id) {\n+                        Some(&DefTy(..)) | Some(&DefStruct(..)) | Some(&DefTrait(..)) | None => {\n+                            self.check_if_primitive_type_name(ident.name, item.span);\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+\n+            ItemExternCrate(_) | ItemMac(..) => {\n                 // do nothing, these are just around to be encoded\n             }\n         }\n@@ -3114,6 +3141,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_type_parameter(&mut self,\n                               type_parameter: &TyParam) {\n+        self.check_if_primitive_type_name(type_parameter.ident.name, type_parameter.span);\n         for bound in &*type_parameter.bounds {\n             self.resolve_type_parameter_bound(type_parameter.id, bound,\n                                               TraitBoundingTypeParameter);"}, {"sha": "44e62b99a96d151ec9de6145e1cf96f8f6134033", "filename": "src/test/auxiliary/i8.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Ftest%2Fauxiliary%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Ftest%2Fauxiliary%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fi8.rs?ref=cf636c233dfeef5abf0de8fb35e23c0a161810d2", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A crate named after a built-in type.\n+\n+pub struct Test;"}, {"sha": "96d4fae8b036d0c05b3df7d23fc83fb1b366dce9", "filename": "src/test/compile-fail/issue-20427.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf636c233dfeef5abf0de8fb35e23c0a161810d2/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs?ref=cf636c233dfeef5abf0de8fb35e23c0a161810d2", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:i8.rs\n+extern crate i8;\n+use std::string as i16;\n+static i32: i32 = 0;\n+const i64: i64 = 0;\n+fn u8(f32: f32) {}\n+fn f<f64>(f64: f64) {}\n+//~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n+type u16 = u16; //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+enum u32 {} //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+struct u64; //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+trait bool {} //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+\n+mod char {\n+    extern crate i8;\n+    static i32_: i32 = 0;\n+    const i64_: i64 = 0;\n+    fn u8_(f32: f32) {}\n+    fn f_<f64_>(f64: f64_) {}\n+    type u16_ = u16;\n+    enum u32_ {}\n+    struct u64_;\n+    trait bool_ {}\n+    mod char_ {}\n+\n+    mod str {\n+        use super::i8 as i8;\n+        use super::i32_ as i32;\n+        use super::i64_ as i64;\n+        use super::u8_ as u8;\n+        use super::f_ as f64;\n+        use super::u16_ as u16;\n+        //~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n+        use super::u32_ as u32;\n+        //~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n+        use super::u64_ as u64;\n+        //~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n+        use super::bool_ as bool;\n+        //~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n+        use super::char_ as char;\n+    }\n+}\n+\n+trait isize_ {\n+    type isize; //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+}\n+\n+fn usize<'usize>(usize: &'usize usize) -> &'usize usize { usize }\n+\n+fn main() {\n+    let bool = true;\n+    match bool {\n+        str @ true => if str { i32 as i64 } else { 0 },\n+        false => i64,\n+    }\n+}"}]}