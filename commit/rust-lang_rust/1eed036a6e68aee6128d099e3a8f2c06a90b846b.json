{"sha": "1eed036a6e68aee6128d099e3a8f2c06a90b846b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZWQwMzZhNmU2OGFlZTYxMjhkMDk5ZTNhOGYyYzA2YTkwYjg0NmI=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-08-17T11:56:27Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-08-17T11:56:27Z"}, "message": "Fix StatusNotification", "tree": {"sha": "0df6d2d6cee256c4dcab1ba1e1a7d3bdafe2d663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df6d2d6cee256c4dcab1ba1e1a7d3bdafe2d663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eed036a6e68aee6128d099e3a8f2c06a90b846b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eed036a6e68aee6128d099e3a8f2c06a90b846b", "html_url": "https://github.com/rust-lang/rust/commit/1eed036a6e68aee6128d099e3a8f2c06a90b846b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eed036a6e68aee6128d099e3a8f2c06a90b846b/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b050937c1071e68a4ade69375f1f17b703cafb02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b050937c1071e68a4ade69375f1f17b703cafb02", "html_url": "https://github.com/rust-lang/rust/commit/b050937c1071e68a4ade69375f1f17b703cafb02"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "e1a28b1b4bade2dd7e18721dad9eab7060378045", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1eed036a6e68aee6128d099e3a8f2c06a90b846b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eed036a6e68aee6128d099e3a8f2c06a90b846b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=1eed036a6e68aee6128d099e3a8f2c06a90b846b", "patch": "@@ -237,8 +237,13 @@ pub enum Status {\n     Invalid,\n }\n \n+#[derive(Deserialize, Serialize)]\n+pub struct StatusParams {\n+    pub status: Status,\n+}\n+\n impl Notification for StatusNotification {\n-    type Params = Status;\n+    type Params = StatusParams;\n     const METHOD: &'static str = \"rust-analyzer/status\";\n }\n "}, {"sha": "b70efcb4d2ae7dce6913db46d1b400ecee4a5dfd", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eed036a6e68aee6128d099e3a8f2c06a90b846b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eed036a6e68aee6128d099e3a8f2c06a90b846b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=1eed036a6e68aee6128d099e3a8f2c06a90b846b", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     lsp_ext,\n     main_loop::Task,\n };\n+use lsp_ext::StatusParams;\n \n impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n@@ -86,7 +87,9 @@ impl GlobalState {\n                 Status::Invalid => lsp_ext::Status::Invalid,\n                 Status::NeedsReload => lsp_ext::Status::NeedsReload,\n             };\n-            self.send_notification::<lsp_ext::StatusNotification>(lsp_status);\n+            self.send_notification::<lsp_ext::StatusNotification>(StatusParams {\n+                status: lsp_status,\n+            });\n         }\n     }\n     pub(crate) fn fetch_workspaces(&mut self) {"}, {"sha": "2e3133449fb44fbe3e60291d285db19ec15a5a44", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eed036a6e68aee6128d099e3a8f2c06a90b846b/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/1eed036a6e68aee6128d099e3a8f2c06a90b846b/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=1eed036a6e68aee6128d099e3a8f2c06a90b846b", "patch": "@@ -412,7 +412,13 @@ Reloads project information (that is, re-executes `cargo metadata`).\n \n **Method:** `rust-analyzer/status`\n \n-**Notification:** `\"loading\" | \"ready\" | \"invalid\" | \"needsReload\"`\n+**Notification:**\n+\n+```typescript\n+interface StatusParams {\n+    status: \"loading\" | \"ready\" | \"invalid\" | \"needsReload\",\n+}\n+```\n \n This notification is sent from server to client.\n The client can use it to display persistent status to the user (in modline)."}, {"sha": "543f7e02e389b0840fb874b6c4a62899d35873e0", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eed036a6e68aee6128d099e3a8f2c06a90b846b/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1eed036a6e68aee6128d099e3a8f2c06a90b846b/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=1eed036a6e68aee6128d099e3a8f2c06a90b846b", "patch": "@@ -36,7 +36,7 @@ export class Ctx {\n \n         res.pushCleanup(client.start());\n         await client.onReady();\n-        client.onNotification(ra.status, (status) => res.setStatus(status));\n+        client.onNotification(ra.status, (params) => res.setStatus(params.status));\n         return res;\n     }\n "}, {"sha": "8663737a6849ca38ad261c3f5777a7c534b937aa", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eed036a6e68aee6128d099e3a8f2c06a90b846b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1eed036a6e68aee6128d099e3a8f2c06a90b846b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=1eed036a6e68aee6128d099e3a8f2c06a90b846b", "patch": "@@ -8,7 +8,10 @@ export const analyzerStatus = new lc.RequestType<null, string, void>(\"rust-analy\n export const memoryUsage = new lc.RequestType<null, string, void>(\"rust-analyzer/memoryUsage\");\n \n export type Status = \"loading\" | \"ready\" | \"invalid\" | \"needsReload\";\n-export const status = new lc.NotificationType<Status>(\"rust-analyzer/status\");\n+export interface StatusParams {\n+    status: Status;\n+}\n+export const status = new lc.NotificationType<StatusParams>(\"rust-analyzer/status\");\n \n export const reloadWorkspace = new lc.RequestType<null, null, void>(\"rust-analyzer/reloadWorkspace\");\n "}]}