{"sha": "4d9d889dbfcccf324aba268eb6f8069514ed18e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOWQ4ODlkYmZjY2NmMzI0YWJhMjY4ZWI2ZjgwNjk1MTRlZDE4ZTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-17T22:41:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-17T23:35:33Z"}, "message": "Don't allow assignment to mutable-wha?", "tree": {"sha": "e310c670a134782a3000a42d54a57a754f5a8aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e310c670a134782a3000a42d54a57a754f5a8aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d9d889dbfcccf324aba268eb6f8069514ed18e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9d889dbfcccf324aba268eb6f8069514ed18e7", "html_url": "https://github.com/rust-lang/rust/commit/4d9d889dbfcccf324aba268eb6f8069514ed18e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d9d889dbfcccf324aba268eb6f8069514ed18e7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454333368c11a64183cace2456fded9a2cba7749", "url": "https://api.github.com/repos/rust-lang/rust/commits/454333368c11a64183cace2456fded9a2cba7749", "html_url": "https://github.com/rust-lang/rust/commit/454333368c11a64183cace2456fded9a2cba7749"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "7ba13f3e7c20aa48f23c460edc5d73f0b7ff3de4", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -49,19 +49,19 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n         alt copy ex.node {\n           expr_field(base, ident) {\n             let auto_unbox = maybe_auto_unbox(tcx, ty::expr_ty(tcx, base));\n-            let mut = false;\n+            let is_mut = false;\n             alt ty::struct(tcx, auto_unbox.t) {\n               ty::ty_rec(fields) {\n                 for fld: ty::field in fields {\n                     if str::eq(ident, fld.ident) {\n-                        mut = fld.mt.mut != imm;\n+                        is_mut = fld.mt.mut == mut;\n                         break;\n                     }\n                 }\n               }\n               ty::ty_obj(_) { }\n             }\n-            ds += [@{mut: mut, kind: field, outer_t: auto_unbox.t}];\n+            ds += [@{mut: is_mut, kind: field, outer_t: auto_unbox.t}];\n             ds += auto_unbox.ds;\n             ex = base;\n           }\n@@ -70,7 +70,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n             alt ty::struct(tcx, auto_unbox.t) {\n               ty::ty_vec(mt) {\n                 ds +=\n-                    [@{mut: mt.mut != imm,\n+                    [@{mut: mt.mut == mut,\n                        kind: index,\n                        outer_t: auto_unbox.t}];\n               }\n@@ -84,15 +84,15 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n           expr_unary(op, base) {\n             if op == deref {\n                 let base_t = ty::expr_ty(tcx, base);\n-                let mut = false;\n+                let is_mut = false;\n                 alt ty::struct(tcx, base_t) {\n-                  ty::ty_box(mt) { mut = mt.mut != imm; }\n-                  ty::ty_uniq(mt) { mut = mt.mut != imm; }\n+                  ty::ty_box(mt) { is_mut = mt.mut == mut; }\n+                  ty::ty_uniq(mt) { is_mut = mt.mut == mut; }\n                   ty::ty_res(_, _, _) { }\n                   ty::ty_tag(_, _) { }\n-                  ty::ty_ptr(mt) { mut = mt.mut != imm; }\n+                  ty::ty_ptr(mt) { is_mut = mt.mut == mut; }\n                 }\n-                ds += [@{mut: mut, kind: unbox, outer_t: base_t}];\n+                ds += [@{mut: is_mut, kind: unbox, outer_t: base_t}];\n                 ex = base;\n             } else { break; }\n           }"}, {"sha": "9a3b35a47c68b14c10de946748ffedd1564099cd", "filename": "src/test/compile-fail/mutable-huh-box-assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: assigning to immutable box\n+\n+fn main() {\n+    fn f(&&v: @mutable? int) {\n+        // This shouldn't be possible\n+        *v = 1\n+    }\n+\n+    let v = @0;\n+\n+    f(v);\n+}"}, {"sha": "e6535c43f017dda959f704d37f87042e04d33cab", "filename": "src/test/compile-fail/mutable-huh-field-assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: assigning to immutable field\n+\n+fn main() {\n+    fn f(&&v: {mutable? field: int}) {\n+        // This shouldn't be possible\n+        v.field = 1\n+    }\n+\n+    let v = {field: 0};\n+\n+    f(v);\n+}"}, {"sha": "964a57a19db5f72f40969a355c9ce44eff694aa5", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: assigning to immutable box\n+\n+use std;\n+\n+fn main() {\n+    unsafe fn f(&&v: *mutable? int) {\n+        // This shouldn't be possible\n+        *v = 1\n+    }\n+\n+    unsafe {\n+        let a = 0;\n+        let v = std::ptr::addr_of(a);\n+        f(v);\n+    }\n+}"}, {"sha": "deb6adfb06c6c2e6536dfec47ccd6aa16cce4724", "filename": "src/test/compile-fail/mutable-huh-unique-assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: assigning to immutable box\n+\n+fn main() {\n+    fn f(&&v: ~mutable? int) {\n+        // This shouldn't be possible\n+        *v = 1\n+    }\n+\n+    let v = ~0;\n+\n+    f(v);\n+}"}, {"sha": "1f273d376f14d074eb6188e05337b6cfdbfcdc7c", "filename": "src/test/compile-fail/mutable-huh-vec-assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9d889dbfcccf324aba268eb6f8069514ed18e7/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs?ref=4d9d889dbfcccf324aba268eb6f8069514ed18e7", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: assigning to immutable vec content\n+\n+fn main() {\n+    fn f(&&v: [mutable? int]) {\n+        // This shouldn't be possible\n+        v[0] = 1\n+    }\n+\n+    let v = [0];\n+\n+    f(v);\n+}"}]}