{"sha": "59291dc788d4b14f5c154ab30ccf87d85a472978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjkxZGM3ODhkNGIxNGY1YzE1NGFiMzBjY2Y4N2Q4NWE0NzI5Nzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-28T18:50:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-28T18:50:05Z"}, "message": "rustbuild: Assert extended builds don't dist too much\n\nThis extends a test in the previous commit to assert that we don't build\nextra rustc compilers even when the \"extended\" option is set to true.\nThis involved some internal refactoring to have more judicious usage of\n`compiler_for`, added in the previous commit, as well.\n\nVarious `dist::*` targets were refactored to be parameterized with a\n`Compiler` instead of a `stage`/`host`, and then the various parameters\nwithin the `Extended` target were tweaked to ensure that we don't ever\naccidentally ask for a stage2 build compiler when we're distributing\nsomething.", "tree": {"sha": "b81a7422945a611813781bc03d99bcce9dd63891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81a7422945a611813781bc03d99bcce9dd63891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59291dc788d4b14f5c154ab30ccf87d85a472978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59291dc788d4b14f5c154ab30ccf87d85a472978", "html_url": "https://github.com/rust-lang/rust/commit/59291dc788d4b14f5c154ab30ccf87d85a472978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59291dc788d4b14f5c154ab30ccf87d85a472978/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "html_url": "https://github.com/rust-lang/rust/commit/f7cc467b59474dcbe9dcaf3c22dab3e663937de5"}], "stats": {"total": 239, "additions": 126, "deletions": 113}, "files": [{"sha": "56fba94d4c910416171620a7b672bdbf0ab89f9a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=59291dc788d4b14f5c154ab30ccf87d85a472978", "patch": "@@ -1371,7 +1371,7 @@ mod __test {\n \n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n-            &[dist::Docs { stage: 2, host: a },]\n+            &[dist::Docs { host: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<dist::Mingw>()),\n@@ -1405,8 +1405,8 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n             &[\n-                dist::Docs { stage: 2, host: a },\n-                dist::Docs { stage: 2, host: b },\n+                dist::Docs { host: a },\n+                dist::Docs { host: b },\n             ]\n         );\n         assert_eq!(\n@@ -1447,8 +1447,8 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n             &[\n-                dist::Docs { stage: 2, host: a },\n-                dist::Docs { stage: 2, host: b },\n+                dist::Docs { host: a },\n+                dist::Docs { host: b },\n             ]\n         );\n         assert_eq!(\n@@ -1488,6 +1488,7 @@ mod __test {\n         let b = INTERNER.intern_str(\"B\");\n         let mut build = Build::new(configure(&[\"B\"], &[]));\n         build.config.docs = false;\n+        build.config.extended = true;\n         build.hosts = vec![b];\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n@@ -1528,9 +1529,9 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n             &[\n-                dist::Docs { stage: 2, host: a },\n-                dist::Docs { stage: 2, host: b },\n-                dist::Docs { stage: 2, host: c },\n+                dist::Docs { host: a },\n+                dist::Docs { host: b },\n+                dist::Docs { host: c },\n             ]\n         );\n         assert_eq!(\n@@ -1587,9 +1588,9 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n             &[\n-                dist::Docs { stage: 2, host: a },\n-                dist::Docs { stage: 2, host: b },\n-                dist::Docs { stage: 2, host: c },\n+                dist::Docs { host: a },\n+                dist::Docs { host: b },\n+                dist::Docs { host: c },\n             ]\n         );\n         assert_eq!(\n@@ -1633,8 +1634,8 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Docs>()),\n             &[\n-                dist::Docs { stage: 2, host: a },\n-                dist::Docs { stage: 2, host: b },\n+                dist::Docs { host: a },\n+                dist::Docs { host: b },\n             ]\n         );\n         assert_eq!("}, {"sha": "274961916183afff56f22f5a704553dcb770fa49", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 83, "deletions": 67, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=59291dc788d4b14f5c154ab30ccf87d85a472978", "patch": "@@ -68,7 +68,6 @@ fn missing_tool(tool_name: &str, skip: bool) {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Docs {\n-    pub stage: u32,\n     pub host: Interned<String>,\n }\n \n@@ -82,7 +81,6 @@ impl Step for Docs {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Docs {\n-            stage: run.builder.top_stage,\n             host: run.target,\n         });\n     }\n@@ -130,7 +128,6 @@ impl Step for Docs {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustcDocs {\n-    pub stage: u32,\n     pub host: Interned<String>,\n }\n \n@@ -144,7 +141,6 @@ impl Step for RustcDocs {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(RustcDocs {\n-            stage: run.builder.top_stage,\n             host: run.target,\n         });\n     }\n@@ -741,7 +737,14 @@ impl Step for Analysis {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Analysis {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+            // Find the actual compiler (handling the full bootstrap option) which\n+            // produced the save-analysis data because that data isn't copied\n+            // through the sysroot uplifting.\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n@@ -761,11 +764,6 @@ impl Step for Analysis {\n \n         builder.ensure(Std { compiler, target });\n \n-        // Find the actual compiler (handling the full bootstrap option) which\n-        // produced the save-analysis data because that data isn't copied\n-        // through the sysroot uplifting.\n-        let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n-\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n \n         let src = builder.stage_out(compiler, Mode::Std)\n@@ -1067,7 +1065,7 @@ pub fn sanitize_sh(path: &Path) -> String {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1081,16 +1079,20 @@ impl Step for Cargo {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Cargo {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist cargo stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/cargo\");\n         let etc = src.join(\"src/etc\");\n         let release_num = builder.release_num(\"cargo\");\n@@ -1105,10 +1107,7 @@ impl Step for Cargo {\n         // Prepare the image directory\n         builder.create_dir(&image.join(\"share/zsh/site-functions\"));\n         builder.create_dir(&image.join(\"etc/bash_completion.d\"));\n-        let cargo = builder.ensure(tool::Cargo {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target\n-        });\n+        let cargo = builder.ensure(tool::Cargo { compiler, target });\n         builder.install(&cargo, &image.join(\"bin\"), 0o755);\n         for man in t!(etc.join(\"man\").read_dir()) {\n             let man = t!(man);\n@@ -1153,7 +1152,7 @@ impl Step for Cargo {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rls {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1167,17 +1166,21 @@ impl Step for Rls {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rls {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist RLS stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rls\");\n         let release_num = builder.release_num(\"rls\");\n         let name = pkgname(builder, \"rls\");\n@@ -1192,8 +1195,9 @@ impl Step for Rls {\n         // We expect RLS to build, because we've exited this step above if tool\n         // state for RLS isn't testing.\n         let rls = builder.ensure(tool::Rls {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new(),\n         }).or_else(|| { missing_tool(\"RLS\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&rls, &image.join(\"bin\"), 0o755);\n@@ -1232,7 +1236,7 @@ impl Step for Rls {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Clippy {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1246,17 +1250,21 @@ impl Step for Clippy {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Clippy {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist clippy stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/clippy\");\n         let release_num = builder.release_num(\"clippy\");\n         let name = pkgname(builder, \"clippy\");\n@@ -1271,11 +1279,12 @@ impl Step for Clippy {\n         // We expect clippy to build, because we've exited this step above if tool\n         // state for clippy isn't testing.\n         let clippy = builder.ensure(tool::Clippy {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new(),\n         }).or_else(|| { missing_tool(\"clippy\", builder.build.config.missing_tools); None })?;\n         let cargoclippy = builder.ensure(tool::CargoClippy {\n-            compiler: builder.compiler(stage, builder.config.build),\n+            compiler,\n             target, extra_features: Vec::new()\n         }).or_else(|| { missing_tool(\"cargo clippy\", builder.build.config.missing_tools); None })?;\n \n@@ -1316,7 +1325,7 @@ impl Step for Clippy {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Miri {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1330,17 +1339,21 @@ impl Step for Miri {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Miri {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist miri stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/miri\");\n         let release_num = builder.release_num(\"miri\");\n         let name = pkgname(builder, \"miri\");\n@@ -1355,12 +1368,14 @@ impl Step for Miri {\n         // We expect miri to build, because we've exited this step above if tool\n         // state for miri isn't testing.\n         let miri = builder.ensure(tool::Miri {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new(),\n         }).or_else(|| { missing_tool(\"miri\", builder.build.config.missing_tools); None })?;\n         let cargomiri = builder.ensure(tool::CargoMiri {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new()\n         }).or_else(|| { missing_tool(\"cargo miri\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&miri, &image.join(\"bin\"), 0o755);\n@@ -1400,7 +1415,7 @@ impl Step for Miri {\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustfmt {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1414,16 +1429,20 @@ impl Step for Rustfmt {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustfmt {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rustfmt\");\n         let release_num = builder.release_num(\"rustfmt\");\n         let name = pkgname(builder, \"rustfmt\");\n@@ -1436,12 +1455,14 @@ impl Step for Rustfmt {\n \n         // Prepare the image directory\n         let rustfmt = builder.ensure(tool::Rustfmt {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new(),\n         }).or_else(|| { missing_tool(\"Rustfmt\", builder.build.config.missing_tools); None })?;\n         let cargofmt = builder.ensure(tool::Cargofmt {\n-            compiler: builder.compiler(stage, builder.config.build),\n-            target, extra_features: Vec::new()\n+            compiler,\n+            target,\n+            extra_features: Vec::new(),\n         }).or_else(|| { missing_tool(\"Cargofmt\", builder.build.config.missing_tools); None })?;\n \n         builder.install(&rustfmt, &image.join(\"bin\"), 0o755);\n@@ -1506,30 +1527,28 @@ impl Step for Extended {\n \n     /// Creates a combined installer for the specified target in the provided stage.\n     fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n         let target = self.target;\n+        let stage = self.stage;\n+        let compiler = builder.compiler_for(self.stage, self.host, self.target);\n \n-        builder.info(&format!(\"Dist extended stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist extended stage{} ({})\", compiler.stage, target));\n \n         let rustc_installer = builder.ensure(Rustc {\n             compiler: builder.compiler(stage, target),\n         });\n-        let cargo_installer = builder.ensure(Cargo { stage, target });\n-        let rustfmt_installer = builder.ensure(Rustfmt { stage, target });\n-        let rls_installer = builder.ensure(Rls { stage, target });\n-        let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n-        let clippy_installer = builder.ensure(Clippy { stage, target });\n-        let miri_installer = builder.ensure(Miri { stage, target });\n+        let cargo_installer = builder.ensure(Cargo { compiler, target });\n+        let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n+        let rls_installer = builder.ensure(Rls { compiler, target });\n+        let llvm_tools_installer = builder.ensure(LlvmTools { target });\n+        let clippy_installer = builder.ensure(Clippy { compiler, target });\n+        let miri_installer = builder.ensure(Miri { compiler, target });\n         let lldb_installer = builder.ensure(Lldb { target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n-        let analysis_installer = builder.ensure(Analysis {\n-            compiler: builder.compiler(stage, self.host),\n-            target\n-        });\n+        let analysis_installer = builder.ensure(Analysis { compiler, target });\n \n-        let docs_installer = builder.ensure(Docs { stage, host: target, });\n+        let docs_installer = builder.ensure(Docs { host: target, });\n         let std_installer = builder.ensure(Std {\n-            compiler: builder.compiler(stage, self.host),\n+            compiler: builder.compiler(stage, target),\n             target,\n         });\n \n@@ -2077,7 +2096,6 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n \n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n pub struct LlvmTools {\n-    pub stage: u32,\n     pub target: Interned<String>,\n }\n \n@@ -2091,26 +2109,24 @@ impl Step for LlvmTools {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(LlvmTools {\n-            stage: run.builder.top_stage,\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        let stage = self.stage;\n         let target = self.target;\n         assert!(builder.config.extended);\n \n         /* run only if llvm-config isn't used */\n         if let Some(config) = builder.config.target_config.get(&target) {\n             if let Some(ref _s) = config.llvm_config {\n-                builder.info(&format!(\"Skipping LlvmTools stage{} ({}): external LLVM\",\n-                    stage, target));\n+                builder.info(&format!(\"Skipping LlvmTools ({}): external LLVM\",\n+                    target));\n                 return None;\n             }\n         }\n \n-        builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, target));\n+        builder.info(&format!(\"Dist LlvmTools ({})\", target));\n         let src = builder.src.join(\"src/llvm-project/llvm\");\n         let name = pkgname(builder, \"llvm-tools\");\n "}, {"sha": "f4da02c007f31c47305928a6744e5301abe5d4f6", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59291dc788d4b14f5c154ab30ccf87d85a472978/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=59291dc788d4b14f5c154ab30ccf87d85a472978", "patch": "@@ -5,12 +5,13 @@\n \n use std::env;\n use std::fs;\n-use std::path::{Path, PathBuf, Component};\n+use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n \n use build_helper::t;\n \n use crate::dist::{self, pkgname, sanitize_sh, tmpdir};\n+use crate::Compiler;\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n@@ -58,7 +59,7 @@ fn install_sh(\n     package: &str,\n     name: &str,\n     stage: u32,\n-    host: Option<Interned<String>>\n+    host: Option<Interned<String>>,\n ) {\n     builder.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n \n@@ -144,9 +145,8 @@ macro_rules! install {\n         $(\n             #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $name {\n-            pub stage: u32,\n+            pub compiler: Compiler,\n             pub target: Interned<String>,\n-            pub host: Interned<String>,\n         }\n \n         impl $name {\n@@ -175,9 +175,8 @@ macro_rules! install {\n \n             fn make_run(run: RunConfig<'_>) {\n                 run.builder.ensure($name {\n-                    stage: run.builder.top_stage,\n+                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n                     target: run.target,\n-                    host: run.builder.config.build,\n                 });\n             }\n \n@@ -190,67 +189,67 @@ macro_rules! install {\n \n install!((self, builder, _config),\n     Docs, \"src/doc\", _config.docs, only_hosts: false, {\n-        builder.ensure(dist::Docs { stage: self.stage, host: self.target });\n-        install_docs(builder, self.stage, self.target);\n+        builder.ensure(dist::Docs { host: self.target });\n+        install_docs(builder, self.compiler.stage, self.target);\n     };\n     Std, \"src/libstd\", true, only_hosts: true, {\n         for target in &builder.targets {\n             builder.ensure(dist::Std {\n-                compiler: builder.compiler(self.stage, self.host),\n+                compiler: self.compiler,\n                 target: *target\n             });\n-            install_std(builder, self.stage, *target);\n+            install_std(builder, self.compiler.stage, *target);\n         }\n     };\n     Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n-        builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n-        install_cargo(builder, self.stage, self.target);\n+        builder.ensure(dist::Cargo { compiler: self.compiler, target: self.target });\n+        install_cargo(builder, self.compiler.stage, self.target);\n     };\n     Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() ||\n+        if builder.ensure(dist::Rls { compiler: self.compiler, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n-            install_rls(builder, self.stage, self.target);\n+            install_rls(builder, self.compiler.stage, self.target);\n         } else {\n-            builder.info(&format!(\"skipping Install RLS stage{} ({})\", self.stage, self.target));\n+            builder.info(&format!(\"skipping Install RLS stage{} ({})\", self.compiler.stage, self.target));\n         }\n     };\n     Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Clippy { stage: self.stage, target: self.target }).is_some() ||\n+        if builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n-            install_clippy(builder, self.stage, self.target);\n+            install_clippy(builder, self.compiler.stage, self.target);\n         } else {\n-            builder.info(&format!(\"skipping Install clippy stage{} ({})\", self.stage, self.target));\n+            builder.info(&format!(\"skipping Install clippy stage{} ({})\", self.compiler.stage, self.target));\n         }\n     };\n     Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Miri { stage: self.stage, target: self.target }).is_some() ||\n+        if builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n-            install_miri(builder, self.stage, self.target);\n+            install_miri(builder, self.compiler.stage, self.target);\n         } else {\n-            builder.info(&format!(\"skipping Install miri stage{} ({})\", self.stage, self.target));\n+            builder.info(&format!(\"skipping Install miri stage{} ({})\", self.compiler.stage, self.target));\n         }\n     };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n+        if builder.ensure(dist::Rustfmt { compiler: self.compiler, target: self.target }).is_some() ||\n             Self::should_install(builder) {\n-            install_rustfmt(builder, self.stage, self.target);\n+            install_rustfmt(builder, self.compiler.stage, self.target);\n         } else {\n             builder.info(\n-                &format!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target));\n+                &format!(\"skipping Install Rustfmt stage{} ({})\", self.compiler.stage, self.target));\n         }\n     };\n     Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n         builder.ensure(dist::Analysis {\n-            compiler: builder.compiler(self.stage, self.host),\n+            compiler: self.compiler,\n             target: self.target\n         });\n-        install_analysis(builder, self.stage, self.target);\n+        install_analysis(builder, self.compiler.stage, self.target);\n     };\n     Rustc, \"src/librustc\", true, only_hosts: true, {\n         builder.ensure(dist::Rustc {\n-            compiler: builder.compiler(self.stage, self.target),\n+            compiler: self.compiler,\n         });\n-        install_rustc(builder, self.stage, self.target);\n+        install_rustc(builder, self.compiler.stage, self.target);\n     };\n );\n \n@@ -266,15 +265,12 @@ impl Step for Src {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let config = &run.builder.config;\n-        let cond = config.extended &&\n-            config.tools.as_ref().map_or(true, |t| t.contains(\"src\"));\n+        let cond = config.extended && config.tools.as_ref().map_or(true, |t| t.contains(\"src\"));\n         run.path(\"src\").default_condition(cond)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Src {\n-            stage: run.builder.top_stage,\n-        });\n+        run.builder.ensure(Src { stage: run.builder.top_stage });\n     }\n \n     fn run(self, builder: &Builder<'_>) {"}]}