{"sha": "bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzQ0YmNhOTA2M2NkOTE0NWZjZWVkNGJhN2VmMTRjYWIwZWNkZDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-09T22:54:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:44Z"}, "message": "Suggest associated bound restrictions in `impl`s", "tree": {"sha": "f1d4115c2884417e23b667ddeed976e4942000ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d4115c2884417e23b667ddeed976e4942000ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "html_url": "https://github.com/rust-lang/rust/commit/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc99eed04005108797fbba82eaf8ef7918051db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc99eed04005108797fbba82eaf8ef7918051db", "html_url": "https://github.com/rust-lang/rust/commit/5cc99eed04005108797fbba82eaf8ef7918051db"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "fa0f620530de1d45edd4da423007d0baa3309330", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "patch": "@@ -669,6 +669,12 @@ impl WhereClause {\n             Some(self.span)\n         }\n     }\n+\n+    /// The `WhereClause` under normal circumstances points at either the predicates or the empty\n+    /// space where the `where` clause should be. Only of use for diagnostic suggestions.\n+    pub fn span_for_predicates_or_empty_place(&self) -> Span {\n+        self.span\n+    }\n }\n \n /// A single predicate in a where-clause."}, {"sha": "91106d35a7ee11797dc6f419f5154f5ed50d86d8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "patch": "@@ -1044,6 +1044,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                     return;\n                 }\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(_, _, _, generics, ..), ..\n+                }) if projection.is_some() => {\n+                    err.span_suggestion(\n+                        generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi(),\n+                        \"consider further restricting the associated type\",\n+                        format!(\n+                            \"{} {}\", if generics.where_clause.predicates.is_empty() {\n+                                \" where\"\n+                            } else {\n+                                \" ,\"\n+                            },\n+                            trait_ref.to_predicate(),\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    return;\n+                }\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(_, generics), span, .. }) |"}, {"sha": "3e2af7c44e4a27198ceaa3e45769fcdb9182d65a", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `<Col as Expression>::SqlType: NotNull` is not sat\n   --> $DIR/issue-38821.rs:23:17\n    |\n LL | #[derive(Debug, Copy, Clone)]\n-   |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n+   |                 ^^^^- help: consider further restricting the associated type: `, <Col as Expression>::SqlType: NotNull`\n+   |                 |\n+   |                 the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n-   = help: consider adding a `where <Col as Expression>::SqlType: NotNull` bound\n    = note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n \n error: aborting due to previous error"}, {"sha": "265ccb3125ca3b015d2c9e7009e5932f72c0d6cb", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs?ref=bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "patch": "@@ -0,0 +1,25 @@\n+// Running rustfix would cause the same suggestion to be applied multiple times, which results in\n+// invalid code.\n+\n+trait Parent {\n+    type Ty;\n+    type Assoc: Child<Self::Ty>;\n+}\n+\n+trait Child<T> {}\n+\n+struct ChildWrapper<T>(T);\n+\n+impl<A, T> Child<A> for ChildWrapper<T> where T: Child<A> {}\n+\n+struct ParentWrapper<T>(T);\n+\n+impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+    //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+    //~| ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+    type Ty = A;\n+    type Assoc = ChildWrapper<T::Assoc>;\n+    //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "bdea8ab97e5b52f163171b8d9377ebce10c624b7", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc744bca9063cd9145fceed4ba7ef14cab0ecdd6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=bc744bca9063cd9145fceed4ba7ef14cab0ecdd6", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:1\n+   |\n+LL |   trait Parent {\n+   |   ------------ required by `Parent`\n+...\n+LL |   impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |   ^                                                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |  _|\n+   | |\n+LL | |\n+LL | |\n+LL | |     type Ty = A;\n+LL | |     type Assoc = ChildWrapper<T::Assoc>;\n+LL | |\n+LL | | }\n+   | |_^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:28\n+   |\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                            ^^^^^^                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |                            |\n+   |                            the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |\n+   = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n+\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:21:5\n+   |\n+LL | trait Parent {\n+   | ------------ required by `Parent`\n+...\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+...\n+LL |     type Assoc = ChildWrapper<T::Assoc>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}