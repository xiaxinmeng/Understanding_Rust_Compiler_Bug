{"sha": "8492eed137ab9435d76c7ff2bdad491dff5756e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTJlZWQxMzdhYjk0MzVkNzZjN2ZmMmJkYWQ0OTFkZmY1NzU2ZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T18:44:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T20:53:30Z"}, "message": "Move uniq trans code to trans_uniq module\n\nIssue #409", "tree": {"sha": "eb957adb422e2d996f588afb3858aa663d02123c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb957adb422e2d996f588afb3858aa663d02123c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8492eed137ab9435d76c7ff2bdad491dff5756e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8492eed137ab9435d76c7ff2bdad491dff5756e2", "html_url": "https://github.com/rust-lang/rust/commit/8492eed137ab9435d76c7ff2bdad491dff5756e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8492eed137ab9435d76c7ff2bdad491dff5756e2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f0ba33d82f441257d013623b94288d366706edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0ba33d82f441257d013623b94288d366706edf", "html_url": "https://github.com/rust-lang/rust/commit/0f0ba33d82f441257d013623b94288d366706edf"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "583e29786e9880169dedf56a8ab93b60c1afb33e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8492eed137ab9435d76c7ff2bdad491dff5756e2", "patch": "@@ -1317,19 +1317,7 @@ fn make_free_glue(bcx: @block_ctxt, v0: ValueRef, t: ty::t) {\n             } else { bcx }\n           }\n           ty::ty_uniq(content_mt) {\n-            let free_cx = new_sub_block_ctxt(bcx, \"uniq_free\");\n-            let next_cx = new_sub_block_ctxt(bcx, \"uniq_free_next\");\n-            let vptr = Load(bcx, v0);\n-            let null_test = IsNull(bcx, vptr);\n-            CondBr(bcx, null_test, next_cx.llbb, free_cx.llbb);\n-\n-            let bcx = free_cx;\n-            let bcx = drop_ty(bcx, vptr, content_mt.ty);\n-            let bcx = trans_shared_free(bcx, vptr);\n-            Store(bcx, C_null(val_ty(vptr)), v0);\n-            Br(bcx, next_cx.llbb);\n-\n-            next_cx\n+            trans_uniq::make_free_glue(bcx, v0, t)\n           }\n           ty::ty_obj(_) {\n             // Call through the obj's own fields-drop glue first.\n@@ -2198,7 +2186,7 @@ fn trans_unary(cx: @block_ctxt, op: ast::unop, e: @ast::expr,\n         ret rslt(bcx, sub.box);\n       }\n       ast::uniq(_) {\n-        ret trans_uniq(cx, e, id);\n+        ret trans_uniq::trans_uniq(cx, e, id);\n       }\n       ast::deref. {\n         bcx_ccx(cx).sess.bug(\"deref expressions should have been \\\n@@ -4511,46 +4499,6 @@ fn trans_put(in_cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n     ret rslt(next_cx, C_nil());\n }\n \n-fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n-              node_id: ast::node_id) -> result {\n-    let bcx = cx;\n-\n-    let lv = trans_lval(bcx, contents);\n-    bcx = lv.bcx;\n-\n-    let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n-    let {bcx, val: llptr} = alloc_uniq(bcx, uniq_ty);\n-\n-    bcx = move_val_if_temp(bcx, INIT, llptr, lv,\n-                           ty_uniq_contents(bcx, uniq_ty));\n-\n-    ret rslt(bcx, llptr);\n-}\n-\n-fn ty_uniq_contents(cx: @block_ctxt, uniq_ty: ty::t) -> ty::t {\n-    alt ty::struct(bcx_tcx(cx), uniq_ty) {\n-      ty::ty_uniq({ty: ct, _}) { ct }\n-    }\n-}\n-\n-fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n-    let bcx = cx;\n-    let contents_ty = ty_uniq_contents(cx, uniq_ty);\n-    let r = size_of(bcx, contents_ty);\n-    bcx = r.bcx;\n-    let llsz = r.val;\n-\n-    let llptrty = T_ptr(type_of_or_i8(bcx, contents_ty));\n-\n-    r = trans_shared_malloc(bcx, llptrty, llsz);\n-    bcx = r.bcx;\n-    let llptr = r.val;\n-\n-    add_clean_temp(bcx, llptr, uniq_ty);\n-\n-    ret rslt(bcx, llptr);\n-}\n-\n fn trans_break_cont(sp: span, cx: @block_ctxt, to_end: bool) -> result {\n     let bcx = cx;\n     // Locate closest loop block, outputting cleanup as we go."}, {"sha": "fecf42fc7027bf989bed99d71479db20709a8e49", "filename": "src/comp/middle/trans_uniq.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=8492eed137ab9435d76c7ff2bdad491dff5756e2", "patch": "@@ -0,0 +1,74 @@\n+import syntax::ast;\n+import lib::llvm::llvm::ValueRef;\n+import trans_common::*;\n+import trans_build::*;\n+import trans::{\n+    trans_shared_malloc,\n+    type_of_or_i8,\n+    size_of,\n+    move_val_if_temp,\n+    node_id_type,\n+    trans_lval,\n+    INIT,\n+    trans_shared_free,\n+    drop_ty,\n+    new_sub_block_ctxt\n+};\n+\n+export trans_uniq, make_free_glue;\n+\n+fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n+              node_id: ast::node_id) -> result {\n+    let bcx = cx;\n+\n+    let lv = trans_lval(bcx, contents);\n+    bcx = lv.bcx;\n+\n+    let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n+    let {bcx, val: llptr} = alloc_uniq(bcx, uniq_ty);\n+\n+    bcx = move_val_if_temp(bcx, INIT, llptr, lv,\n+                           content_ty(bcx, uniq_ty));\n+\n+    ret rslt(bcx, llptr);\n+}\n+\n+fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n+    let bcx = cx;\n+    let contents_ty = content_ty(bcx, uniq_ty);\n+    let r = size_of(bcx, contents_ty);\n+    bcx = r.bcx;\n+    let llsz = r.val;\n+\n+    let llptrty = T_ptr(type_of_or_i8(bcx, contents_ty));\n+\n+    r = trans_shared_malloc(bcx, llptrty, llsz);\n+    bcx = r.bcx;\n+    let llptr = r.val;\n+\n+    add_clean_temp(bcx, llptr, uniq_ty);\n+\n+    ret rslt(bcx, llptr);\n+}\n+\n+fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n+    let free_cx = new_sub_block_ctxt(bcx, \"uniq_free\");\n+    let next_cx = new_sub_block_ctxt(bcx, \"uniq_free_next\");\n+    let vptr = Load(bcx, v);\n+    let null_test = IsNull(bcx, vptr);\n+    CondBr(bcx, null_test, next_cx.llbb, free_cx.llbb);\n+\n+    let bcx = free_cx;\n+    let bcx = drop_ty(bcx, vptr, content_ty(bcx, t));\n+    let bcx = trans_shared_free(bcx, vptr);\n+    Store(bcx, C_null(val_ty(vptr)), v);\n+    Br(bcx, next_cx.llbb);\n+\n+    next_cx\n+}\n+\n+fn content_ty(bcx: @block_ctxt, t: ty::t) -> ty::t {\n+    alt ty::struct(bcx_tcx(bcx), t) {\n+      ty::ty_uniq({ty: ct, _}) { ct }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "5399e6e4e44c3d720af4b0a2dcfbbea9577b4c87", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8492eed137ab9435d76c7ff2bdad491dff5756e2/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=8492eed137ab9435d76c7ff2bdad491dff5756e2", "patch": "@@ -19,6 +19,7 @@ mod middle {\n     mod trans;\n     mod trans_alt;\n     mod trans_objects;\n+    mod trans_uniq;\n     mod trans_vec;\n     mod ty;\n     mod ast_map;"}]}