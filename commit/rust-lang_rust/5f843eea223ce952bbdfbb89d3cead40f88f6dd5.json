{"sha": "5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODQzZWVhMjIzY2U5NTJiYmRmYmI4OWQzY2VhZDQwZjg4ZjZkZDU=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-16T14:17:41Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-16T14:17:57Z"}, "message": "Examples for Integer trait methods.", "tree": {"sha": "bf1aae4ba88a05e21fa01dd632a424048f007891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1aae4ba88a05e21fa01dd632a424048f007891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "html_url": "https://github.com/rust-lang/rust/commit/5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f843eea223ce952bbdfbb89d3cead40f88f6dd5/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058242141b54bf9e9b82caf02a39c4b9083023c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/058242141b54bf9e9b82caf02a39c4b9083023c1", "html_url": "https://github.com/rust-lang/rust/commit/058242141b54bf9e9b82caf02a39c4b9083023c1"}], "stats": {"total": 108, "additions": 90, "deletions": 18}, "files": [{"sha": "bcaebbd136809e36368fc6fa95b8280b89cecf42", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 90, "deletions": 18, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5f843eea223ce952bbdfbb89d3cead40f88f6dd5/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f843eea223ce952bbdfbb89d3cead40f88f6dd5/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "patch": "@@ -8,18 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Integer trait and functions\n+//! Integer trait and functions.\n \n pub trait Integer: Num + PartialOrd\n                  + Div<Self, Self>\n                  + Rem<Self, Self> {\n-    /// Simultaneous truncated integer division and modulus\n-    #[inline]\n-    fn div_rem(&self, other: &Self) -> (Self, Self) {\n-        (*self / *other, *self % *other)\n-    }\n-\n-    /// Floored integer division\n+    /// Floored integer division.\n     ///\n     /// # Examples\n     ///\n@@ -61,25 +55,103 @@ pub trait Integer: Num + PartialOrd\n     /// ~~~\n     fn mod_floor(&self, other: &Self) -> Self;\n \n-    /// Simultaneous floored integer division and modulus\n-    fn div_mod_floor(&self, other: &Self) -> (Self, Self) {\n-        (self.div_floor(other), self.mod_floor(other))\n-    }\n-\n-    /// Greatest Common Divisor (GCD)\n+    /// Greatest Common Divisor (GCD).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(6i.gcd(&8), 2);\n+    /// assert_eq!(7i.gcd(&3), 1);\n+    /// ~~~\n     fn gcd(&self, other: &Self) -> Self;\n \n-    /// Lowest Common Multiple (LCM)\n+    /// Lowest Common Multiple (LCM).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(7i.lcm(&3), 21);\n+    /// assert_eq!(2i.lcm(&4), 4);\n+    /// ~~~\n     fn lcm(&self, other: &Self) -> Self;\n \n-    /// Returns `true` if `other` divides evenly into `self`\n+    /// Returns `true` if `other` divides evenly into `self`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(9i.divides(&3), true);\n+    /// assert_eq!(3i.divides(&9), false);\n+    /// ~~~\n     fn divides(&self, other: &Self) -> bool;\n \n-    /// Returns `true` if the number is even\n+    /// Returns `true` if the number is even.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(3i.is_even(), false);\n+    /// assert_eq!(4i.is_even(), true);\n+    /// ~~~\n     fn is_even(&self) -> bool;\n \n-    /// Returns `true` if the number is odd\n+    /// Returns `true` if the number is odd.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(3i.is_odd(), true);\n+    /// assert_eq!(4i.is_odd(), false);\n+    /// ~~~\n     fn is_odd(&self) -> bool;\n+\n+    /// Simultaneous truncated integer division and modulus.\n+    /// Returns `(quotient, remainder)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(( 8i).div_rem( &3), ( 2,  2));\n+    /// assert_eq!(( 8i).div_rem(&-3), (-2,  2));\n+    /// assert_eq!((-8i).div_rem( &3), (-2, -2));\n+    /// assert_eq!((-8i).div_rem(&-3), ( 2, -2));\n+    ///\n+    /// assert_eq!(( 1i).div_rem( &2), ( 0,  1));\n+    /// assert_eq!(( 1i).div_rem(&-2), ( 0,  1));\n+    /// assert_eq!((-1i).div_rem( &2), ( 0, -1));\n+    /// assert_eq!((-1i).div_rem(&-2), ( 0, -1));\n+    /// ~~~\n+    #[inline]\n+    fn div_rem(&self, other: &Self) -> (Self, Self) {\n+        (*self / *other, *self % *other)\n+    }\n+\n+    /// Simultaneous floored integer division and modulus.\n+    /// Returns `(quotient, remainder)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(( 8i).div_mod_floor( &3), ( 2,  2));\n+    /// assert_eq!(( 8i).div_mod_floor(&-3), (-3, -1));\n+    /// assert_eq!((-8i).div_mod_floor( &3), (-3,  1));\n+    /// assert_eq!((-8i).div_mod_floor(&-3), ( 2, -2));\n+    ///\n+    /// assert_eq!(( 1i).div_mod_floor( &2), ( 0,  1));\n+    /// assert_eq!(( 1i).div_mod_floor(&-2), (-1, -1));\n+    /// assert_eq!((-1i).div_mod_floor( &2), (-1,  1));\n+    /// assert_eq!((-1i).div_mod_floor(&-2), ( 0, -1));\n+    /// ~~~\n+    fn div_mod_floor(&self, other: &Self) -> (Self, Self) {\n+        (self.div_floor(other), self.mod_floor(other))\n+    }\n }\n \n /// Simultaneous integer division and modulus"}]}