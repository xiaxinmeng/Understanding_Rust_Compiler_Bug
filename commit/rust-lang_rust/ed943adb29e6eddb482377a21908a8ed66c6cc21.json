{"sha": "ed943adb29e6eddb482377a21908a8ed66c6cc21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOTQzYWRiMjllNmVkZGI0ODIzNzdhMjE5MDhhOGVkNjZjNmNjMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T17:57:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T17:57:36Z"}, "message": "re-enable chalk", "tree": {"sha": "5922c706e49579074a4c339c512c5bb5f8f7326e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5922c706e49579074a4c339c512c5bb5f8f7326e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed943adb29e6eddb482377a21908a8ed66c6cc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed943adb29e6eddb482377a21908a8ed66c6cc21", "html_url": "https://github.com/rust-lang/rust/commit/ed943adb29e6eddb482377a21908a8ed66c6cc21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed943adb29e6eddb482377a21908a8ed66c6cc21/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26463f189ff75e92990375ee5ae08d3903d39e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/26463f189ff75e92990375ee5ae08d3903d39e66", "html_url": "https://github.com/rust-lang/rust/commit/26463f189ff75e92990375ee5ae08d3903d39e66"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f39749cab52625904f6e120fb970b9d429d32373", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed943adb29e6eddb482377a21908a8ed66c6cc21/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed943adb29e6eddb482377a21908a8ed66c6cc21/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=ed943adb29e6eddb482377a21908a8ed66c6cc21", "patch": "@@ -78,24 +78,23 @@ pub enum Obligation {\n \n /// Check using Chalk whether trait is implemented for given parameters including `Self` type.\n pub(crate) fn implements_query(\n-    _db: &impl HirDatabase,\n-    _krate: Crate,\n-    _trait_ref: Canonical<TraitRef>,\n+    db: &impl HirDatabase,\n+    krate: Crate,\n+    trait_ref: Canonical<TraitRef>,\n ) -> Option<Solution> {\n-    return None;\n-    // let _p = profile(\"implements_query\");\n-    // let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n-    // debug!(\"goal: {:?}\", goal);\n-    // let env = chalk_ir::Environment::new();\n-    // let in_env = chalk_ir::InEnvironment::new(&env, goal);\n-    // let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n-    // let canonical =\n-    //     chalk_ir::Canonical { value: in_env, binders: vec![parameter; trait_ref.num_vars] };\n-    // // We currently don't deal with universes (I think / hope they're not yet\n-    // // relevant for our use cases?)\n-    // let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n-    // let solution = solve(db, krate, &u_canonical);\n-    // solution.map(|solution| solution_from_chalk(db, solution))\n+    let _p = profile(\"implements_query\");\n+    let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n+    debug!(\"goal: {:?}\", goal);\n+    let env = chalk_ir::Environment::new();\n+    let in_env = chalk_ir::InEnvironment::new(&env, goal);\n+    let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n+    let canonical =\n+        chalk_ir::Canonical { value: in_env, binders: vec![parameter; trait_ref.num_vars] };\n+    // We currently don't deal with universes (I think / hope they're not yet\n+    // relevant for our use cases?)\n+    let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n+    let solution = solve(db, krate, &u_canonical);\n+    solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -> Solution {"}]}