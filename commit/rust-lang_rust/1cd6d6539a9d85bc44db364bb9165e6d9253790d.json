{"sha": "1cd6d6539a9d85bc44db364bb9165e6d9253790d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDZkNjUzOWE5ZDg1YmM0NGRiMzY0YmI5MTY1ZTZkOTI1Mzc5MGQ=", "commit": {"author": {"name": "Josh Robson Chase", "email": "josh@robsonchase.com", "date": "2019-01-23T17:15:47Z"}, "committer": {"name": "Josh Robson Chase", "email": "josh@robsonchase.com", "date": "2019-01-23T18:17:41Z"}, "message": "Add raw idents to lexer and parser", "tree": {"sha": "9700b48ecbf34496d45c5e08e27c113698fb1452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9700b48ecbf34496d45c5e08e27c113698fb1452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd6d6539a9d85bc44db364bb9165e6d9253790d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd6d6539a9d85bc44db364bb9165e6d9253790d", "html_url": "https://github.com/rust-lang/rust/commit/1cd6d6539a9d85bc44db364bb9165e6d9253790d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd6d6539a9d85bc44db364bb9165e6d9253790d/comments", "author": {"login": "jrobsonchase", "id": 1553581, "node_id": "MDQ6VXNlcjE1NTM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1553581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrobsonchase", "html_url": "https://github.com/jrobsonchase", "followers_url": "https://api.github.com/users/jrobsonchase/followers", "following_url": "https://api.github.com/users/jrobsonchase/following{/other_user}", "gists_url": "https://api.github.com/users/jrobsonchase/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrobsonchase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrobsonchase/subscriptions", "organizations_url": "https://api.github.com/users/jrobsonchase/orgs", "repos_url": "https://api.github.com/users/jrobsonchase/repos", "events_url": "https://api.github.com/users/jrobsonchase/events{/privacy}", "received_events_url": "https://api.github.com/users/jrobsonchase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrobsonchase", "id": 1553581, "node_id": "MDQ6VXNlcjE1NTM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/1553581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrobsonchase", "html_url": "https://github.com/jrobsonchase", "followers_url": "https://api.github.com/users/jrobsonchase/followers", "following_url": "https://api.github.com/users/jrobsonchase/following{/other_user}", "gists_url": "https://api.github.com/users/jrobsonchase/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrobsonchase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrobsonchase/subscriptions", "organizations_url": "https://api.github.com/users/jrobsonchase/orgs", "repos_url": "https://api.github.com/users/jrobsonchase/repos", "events_url": "https://api.github.com/users/jrobsonchase/events{/privacy}", "received_events_url": "https://api.github.com/users/jrobsonchase/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b942cbcb071811a811aa35feaa80950c2415075", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b942cbcb071811a811aa35feaa80950c2415075", "html_url": "https://github.com/rust-lang/rust/commit/0b942cbcb071811a811aa35feaa80950c2415075"}], "stats": {"total": 164, "additions": 124, "deletions": 40}, "files": [{"sha": "4d8412d46a147425de67b4806c2641d5f39b2376", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -142,7 +142,7 @@ impl Attr {\n     pub fn as_atom(&self) -> Option<SmolStr> {\n         let tt = self.value()?;\n         let (_bra, attr, _ket) = tt.syntax().children().collect_tuple()?;\n-        if attr.kind() == IDENT {\n+        if attr.kind().is_ident() {\n             Some(attr.leaf_text().unwrap().clone())\n         } else {\n             None\n@@ -153,7 +153,7 @@ impl Attr {\n         let tt = self.value()?;\n         let (_bra, attr, args, _ket) = tt.syntax().children().collect_tuple()?;\n         let args = TokenTree::cast(args)?;\n-        if attr.kind() == IDENT {\n+        if attr.kind().is_ident() {\n             Some((attr.leaf_text().unwrap().clone(), args))\n         } else {\n             None"}, {"sha": "64beb82528cad446fb46489cf4dafb49869a99c0", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -102,6 +102,7 @@ Grammar(\n     tokens: [\n         \"ERROR\",\n         \"IDENT\",\n+        \"RAW_IDENT\",\n         \"UNDERSCORE\",\n         \"WHITESPACE\",\n         \"INT_NUMBER\",\n@@ -116,6 +117,10 @@ Grammar(\n         \"COMMENT\",\n         \"SHEBANG\",\n     ],\n+    ident_tokens: [\n+        \"IDENT\",\n+        \"RAW_IDENT\",\n+    ],\n     nodes: [\n         \"SOURCE_FILE\",\n "}, {"sha": "531d0458f1f3cf59093ca9aa7d44f896e36a3320", "filename": "crates/ra_syntax/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -140,7 +140,7 @@ fn opt_fn_ret_type(p: &mut Parser) -> bool {\n }\n \n fn name_r(p: &mut Parser, recovery: TokenSet) {\n-    if p.at(IDENT) {\n+    if p.current().is_ident() {\n         let m = p.start();\n         p.bump();\n         m.complete(p, NAME);\n@@ -154,7 +154,7 @@ fn name(p: &mut Parser) {\n }\n \n fn name_ref(p: &mut Parser) {\n-    if p.at(IDENT) {\n+    if p.current().is_ident() {\n         let m = p.start();\n         p.bump();\n         m.complete(p, NAME_REF);"}, {"sha": "107b7cda4afc1c6dd1eefee32c44c94ae561b015", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -281,7 +281,7 @@ fn postfix_expr(\n             // }\n             L_PAREN if allow_calls => call_expr(p, lhs),\n             L_BRACK if allow_calls => index_expr(p, lhs),\n-            DOT if p.nth(1) == IDENT && (p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON) => {\n+            DOT if p.nth(1).is_ident() && (p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON) => {\n                 method_call_expr(p, lhs)\n             }\n             DOT => field_expr(p, lhs),\n@@ -332,7 +332,7 @@ fn index_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n //     y.bar::<T>(1, 2,);\n // }\n fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n-    assert!(p.at(DOT) && p.nth(1) == IDENT && (p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON));\n+    assert!(p.at(DOT) && p.nth(1).is_ident() && (p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON));\n     let m = lhs.precede(p);\n     p.bump();\n     name_ref(p);\n@@ -352,7 +352,7 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(DOT));\n     let m = lhs.precede(p);\n     p.bump();\n-    if p.at(IDENT) {\n+    if p.current().is_ident() {\n         name_ref(p)\n     } else if p.at(INT_NUMBER) {\n         p.bump()\n@@ -443,7 +443,7 @@ pub(crate) fn named_field_list(p: &mut Parser) {\n     p.bump();\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n-            IDENT => {\n+            IDENT | RAW_IDENT => {\n                 let m = p.start();\n                 name_ref(p);\n                 if p.eat(COLON) {"}, {"sha": "3fbe22856779cca6a0e797720cfcfb2b84422bff", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -48,6 +48,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet = LITERAL_FIRST.union(token_set![\n     UNSAFE_KW,\n     RETURN_KW,\n     IDENT,\n+    RAW_IDENT,\n     SELF_KW,\n     SUPER_KW,\n     CRATE_KW,"}, {"sha": "c49798444daed6a237f013b5286ab3bbf236241b", "filename": "crates/ra_syntax/src/grammar/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -99,11 +99,11 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n         has_mods = true;\n         abi(p);\n     }\n-    if p.at(IDENT) && p.at_contextual_kw(\"auto\") && p.nth(1) == TRAIT_KW {\n+    if p.current().is_ident() && p.at_contextual_kw(\"auto\") && p.nth(1) == TRAIT_KW {\n         p.bump_remap(AUTO_KW);\n         has_mods = true;\n     }\n-    if p.at(IDENT) && p.at_contextual_kw(\"default\") && p.nth(1) == IMPL_KW {\n+    if p.current().is_ident() && p.at_contextual_kw(\"default\") && p.nth(1) == IMPL_KW {\n         p.bump_remap(DEFAULT_KW);\n         has_mods = true;\n     }\n@@ -202,7 +202,7 @@ fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n             }\n             STRUCT_DEF\n         }\n-        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n+        IDENT | RAW_IDENT if p.at_contextual_kw(\"union\") && p.nth(1).is_ident() => {\n             // test union_items\n             // union Foo {}\n             // union Foo {\n@@ -220,7 +220,7 @@ fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n             use_item::use_item(p);\n             USE_ITEM\n         }\n-        CONST_KW if (la == IDENT || la == MUT_KW) => {\n+        CONST_KW if (la.is_ident() || la == MUT_KW) => {\n             consts::const_def(p);\n             CONST_DEF\n         }\n@@ -351,7 +351,7 @@ fn macro_call(p: &mut Parser) -> BlockLike {\n \n pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     p.expect(EXCL);\n-    p.eat(IDENT);\n+    p.eat_one(&[IDENT, RAW_IDENT]);\n     match p.current() {\n         L_CURLY => {\n             token_tree(p);"}, {"sha": "8973068838572533a639cbb55858969a94a0da61", "filename": "crates/ra_syntax/src/grammar/items/nominal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fnominal.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n         }\n         let var = p.start();\n         attributes::outer_attributes(p);\n-        if p.at(IDENT) {\n+        if p.current().is_ident() {\n             name(p);\n             match p.current() {\n                 L_CURLY => named_field_def_list(p),\n@@ -120,7 +120,7 @@ pub(crate) fn named_field_def_list(p: &mut Parser) {\n         // }\n         attributes::outer_attributes(p);\n         opt_visibility(p);\n-        if p.at(IDENT) {\n+        if p.current().is_ident() {\n             name(p);\n             p.expect(COLON);\n             types::type_(p);"}, {"sha": "a78bbba2bc1e74adb33ef63269d11965a4237add", "filename": "crates/ra_syntax/src/grammar/items/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -112,7 +112,7 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     if p.nth(1) == POUND || p.nth(1) == R_ANGLE {\n         return true;\n     }\n-    (p.nth(1) == LIFETIME || p.nth(1) == IDENT)\n+    (p.nth(1) == LIFETIME || p.nth(1).is_ident())\n         && (p.nth(2) == R_ANGLE || p.nth(2) == COMMA || p.nth(2) == COLON || p.nth(2) == EQ)\n }\n "}, {"sha": "ada07c17e79e853c52375cf57b69fa4506c3f8f2", "filename": "crates/ra_syntax/src/grammar/params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -84,9 +84,9 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n             // trait Foo {\n             //     fn bar(_: u64);\n             // }\n-            if (la0 == IDENT || la0 == UNDERSCORE) && la1 == COLON\n-                || la0 == AMP && la1 == IDENT && la2 == COLON\n-                || la0 == AMP && la1 == MUT_KW && la2 == IDENT && la3 == COLON\n+            if (la0.is_ident() || la0 == UNDERSCORE) && la1 == COLON\n+                || la0 == AMP && la1.is_ident() && la2 == COLON\n+                || la0 == AMP && la1 == MUT_KW && la2.is_ident() && la3 == COLON\n             {\n                 patterns::pattern(p);\n                 types::ascription(p);"}, {"sha": "0e1c1d334fa3a702e694abb76485b1c4738b7754", "filename": "crates/ra_syntax/src/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpaths.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -1,11 +1,11 @@\n use super::*;\n \n pub(super) const PATH_FIRST: TokenSet =\n-    token_set![IDENT, SELF_KW, SUPER_KW, CRATE_KW, COLONCOLON, L_ANGLE];\n+    token_set![IDENT, RAW_IDENT, SELF_KW, SUPER_KW, CRATE_KW, COLONCOLON, L_ANGLE];\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n     match p.current() {\n-        IDENT | SELF_KW | SUPER_KW | CRATE_KW | COLONCOLON => true,\n+        IDENT | RAW_IDENT | SELF_KW | SUPER_KW | CRATE_KW | COLONCOLON => true,\n         _ => false,\n     }\n }\n@@ -70,7 +70,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n             p.eat(COLONCOLON);\n         }\n         match p.current() {\n-            IDENT => {\n+            IDENT | RAW_IDENT => {\n                 name_ref(p);\n                 opt_path_type_args(p, mode);\n             }"}, {"sha": "925eabe1b65618362359721c4960501277e65125", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -37,7 +37,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     let la1 = p.nth(1);\n     if la0 == REF_KW\n         || la0 == MUT_KW\n-        || (la0 == IDENT && !(la1 == COLONCOLON || la1 == L_PAREN || la1 == L_CURLY))\n+        || (la0.is_ident() && !(la1 == COLONCOLON || la1 == L_PAREN || la1 == L_CURLY))\n     {\n         return Some(bind_pat(p, true));\n     }\n@@ -128,7 +128,7 @@ fn field_pat_list(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n             DOTDOT => p.bump(),\n-            IDENT if p.nth(1) == COLON => field_pat(p),\n+            IDENT | RAW_IDENT if p.nth(1) == COLON => field_pat(p),\n             L_CURLY => error_block(p, \"expected ident\"),\n             _ => {\n                 bind_pat(p, false);\n@@ -143,7 +143,7 @@ fn field_pat_list(p: &mut Parser) {\n }\n \n fn field_pat(p: &mut Parser) {\n-    assert!(p.at(IDENT));\n+    assert!(p.current().is_ident());\n     assert!(p.nth(1) == COLON);\n \n     let m = p.start();"}, {"sha": "469595d71ce2582d253d54b1300b57720c61d1a6", "filename": "crates/ra_syntax/src/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -34,7 +34,7 @@ fn type_arg(p: &mut Parser) {\n             p.bump();\n             m.complete(p, LIFETIME_ARG);\n         }\n-        IDENT if p.nth(1) == EQ => {\n+        IDENT | RAW_IDENT if p.nth(1) == EQ => {\n             name_ref(p);\n             p.bump();\n             types::type_(p);"}, {"sha": "3cebd06753376e5878c765daef63bde085b102c7", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -15,7 +15,7 @@ fn type_param_list(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(R_ANGLE) {\n         match p.current() {\n             LIFETIME => lifetime_param(p),\n-            IDENT => type_param(p),\n+            IDENT | RAW_IDENT => type_param(p),\n             _ => p.err_and_bump(\"expected type parameter\"),\n         }\n         if !p.at(R_ANGLE) && !p.expect(COMMA) {\n@@ -37,7 +37,7 @@ fn lifetime_param(p: &mut Parser) {\n }\n \n fn type_param(p: &mut Parser) {\n-    assert!(p.at(IDENT));\n+    assert!(p.current().is_ident());\n     let m = p.start();\n     name(p);\n     if p.at(COLON) {"}, {"sha": "fab184a2d8c7a644643e6d7bf93e2b90ae6d969a", "filename": "crates/ra_syntax/src/lexer.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flexer.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -190,19 +190,24 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n }\n \n fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n-    let is_single_letter = match ptr.current() {\n-        None => true,\n-        Some(c) if !is_ident_continue(c) => true,\n+    let is_raw = match (c, ptr.current()) {\n+        ('r', Some('#')) => {\n+            ptr.bump();\n+            true\n+        }\n+        ('_', Some(c)) if !is_ident_continue(c) => return UNDERSCORE,\n         _ => false,\n     };\n-    if is_single_letter {\n-        return if c == '_' { UNDERSCORE } else { IDENT };\n-    }\n+\n     ptr.bump_while(is_ident_continue);\n-    if let Some(kind) = SyntaxKind::from_keyword(ptr.current_token_text()) {\n+\n+    if is_raw {\n+        RAW_IDENT\n+    } else if let Some(kind) = SyntaxKind::from_keyword(ptr.current_token_text()) {\n         return kind;\n+    } else {\n+        IDENT\n     }\n-    IDENT\n }\n \n fn scan_literal_suffix(ptr: &mut Ptr) {"}, {"sha": "5c1cf3e9c05c7cbf12c3cdf79ef253d0b77d2444", "filename": "crates/ra_syntax/src/lexer/strings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Flexer%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Flexer%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flexer%2Fstrings.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -5,7 +5,8 @@ use crate::lexer::ptr::Ptr;\n pub(crate) fn is_string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {\n         ('r', Some('\"'), _)\n-        | ('r', Some('#'), _)\n+        | ('r', Some('#'), Some('\"'))\n+        | ('r', Some('#'), Some('#'))\n         | ('b', Some('\"'), _)\n         | ('b', Some('\\''), _)\n         | ('b', Some('r'), Some('\"'))"}, {"sha": "d795cbaf1a921873ac864035e87f6bfd07cd4b5a", "filename": "crates/ra_syntax/src/parser_api.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -100,6 +100,14 @@ impl<'t> Parser<'t> {\n         true\n     }\n \n+    /// Consume the next token matching one of the `kinds`\n+    pub(crate) fn eat_one<'k, K>(&mut self, kinds: K) -> bool\n+    where\n+        K: IntoIterator<Item = &'k SyntaxKind> + 'k,\n+    {\n+        kinds.into_iter().map(|k| self.eat(*k)).any(|eaten| eaten)\n+    }\n+\n     /// Consume the next token if it is `kind` or emit an error\n     /// otherwise.\n     pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {"}, {"sha": "b38985bc814959b5b6393f6f04b662840ceff963", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -25,15 +25,15 @@ fn reparse_leaf<'node>(\n ) -> Option<(&'node SyntaxNode, GreenNode, Vec<SyntaxError>)> {\n     let node = algo::find_covering_node(node, edit.delete);\n     match node.kind() {\n-        WHITESPACE | COMMENT | IDENT | STRING | RAW_STRING => {\n+        WHITESPACE | COMMENT | IDENT | RAW_IDENT | STRING | RAW_STRING => {\n             let text = get_text_after_edit(node, &edit);\n             let tokens = tokenize(&text);\n             let token = match tokens[..] {\n                 [token] if token.kind == node.kind() => token,\n                 _ => return None,\n             };\n \n-            if token.kind == IDENT && is_contextual_kw(&text) {\n+            if token.kind.is_ident() && is_contextual_kw(&text) {\n                 return None;\n             }\n "}, {"sha": "aa1ab3326a70264d1fc9db51f6628e38d8ea16e4", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -105,6 +105,7 @@ pub enum SyntaxKind {\n     UNION_KW,\n     ERROR,\n     IDENT,\n+    RAW_IDENT,\n     UNDERSCORE,\n     WHITESPACE,\n     INT_NUMBER,\n@@ -368,6 +369,7 @@ impl SyntaxKind {\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n             ERROR => &SyntaxInfo { name: \"ERROR\" },\n             IDENT => &SyntaxInfo { name: \"IDENT\" },\n+            RAW_IDENT => &SyntaxInfo { name: \"RAW_IDENT\" },\n             UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n             WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n             INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n@@ -563,4 +565,12 @@ impl SyntaxKind {\n         };\n         Some(tok)\n     }\n+\n+    pub(crate) fn is_ident(&self) -> bool {\n+        match self {\n+            | IDENT\n+            | RAW_IDENT => true,\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "83787f82059d475f328ba7e31714568df9d063a2", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -74,4 +74,13 @@ impl SyntaxKind {\n         };\n         Some(tok)\n     }\n+\n+    pub(crate) fn is_ident(&self) -> bool {\n+        match self {\n+{%- for kind in ident_tokens %}\n+            | {{kind}}\n+{%- endfor %} => true,\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "48f01128b0a9ce732667b01f55f5a198f51a9eb2", "filename": "crates/ra_syntax/src/yellow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -207,7 +207,7 @@ impl<'a> Iterator for SyntaxNodeChildren<'a> {\n fn has_short_text(kind: SyntaxKind) -> bool {\n     use crate::SyntaxKind::*;\n     match kind {\n-        IDENT | LIFETIME | INT_NUMBER | FLOAT_NUMBER => true,\n+        IDENT | RAW_IDENT | LIFETIME | INT_NUMBER | FLOAT_NUMBER => true,\n         _ => false,\n     }\n }"}, {"sha": "b40a1b6a248d316220d367b92fa33362a34dbd08", "filename": "crates/ra_syntax/tests/data/lexer/0016_raw_ident.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1 @@\n+r#raw_ident"}, {"sha": "28b9b208a90acadeb9b5b65a7d12dd19f8af96e0", "filename": "crates/ra_syntax/tests/data/lexer/0016_raw_ident.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0016_raw_ident.txt?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1,2 @@\n+RAW_IDENT 11 \"r#raw_ident\"\n+WHITESPACE 1 \"\\n\""}, {"sha": "8380d1e79bcf7bda1365723dfd3c4ff9edd8376e", "filename": "crates/ra_syntax/tests/data/parser/ok/0039_raw_fn_item.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1,2 @@\n+fn r#foo() {\n+}"}, {"sha": "865a680f23065213d2a0717797a11e7fea471e20", "filename": "crates/ra_syntax/tests/data/parser/ok/0039_raw_fn_item.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0039_raw_fn_item.txt?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1,15 @@\n+SOURCE_FILE@[0; 15)\n+  FN_DEF@[0; 14)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 8)\n+      RAW_IDENT@[3; 8) \"r#foo\"\n+    PARAM_LIST@[8; 10)\n+      L_PAREN@[8; 9)\n+      R_PAREN@[9; 10)\n+    WHITESPACE@[10; 11)\n+    BLOCK@[11; 14)\n+      L_CURLY@[11; 12)\n+      WHITESPACE@[12; 13)\n+      R_CURLY@[13; 14)\n+  WHITESPACE@[14; 15)"}, {"sha": "098a60a72bfbb078bd829cc02d6a544ccfdd6b40", "filename": "crates/ra_syntax/tests/data/parser/ok/0040_raw_struct_item_field.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.rs?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1,3 @@\n+struct S {\n+    r#foo: u32\n+}\n\\ No newline at end of file"}, {"sha": "4e244cbc55c93d15e33f5839e40a161801e371fa", "filename": "crates/ra_syntax/tests/data/parser/ok/0040_raw_struct_item_field.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1cd6d6539a9d85bc44db364bb9165e6d9253790d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0040_raw_struct_item_field.txt?ref=1cd6d6539a9d85bc44db364bb9165e6d9253790d", "patch": "@@ -0,0 +1,22 @@\n+SOURCE_FILE@[0; 27)\n+  STRUCT_DEF@[0; 27)\n+    STRUCT_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    NAME@[7; 8)\n+      IDENT@[7; 8) \"S\"\n+    WHITESPACE@[8; 9)\n+    NAMED_FIELD_DEF_LIST@[9; 27)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      NAMED_FIELD_DEF@[15; 25)\n+        NAME@[15; 20)\n+          RAW_IDENT@[15; 20) \"r#foo\"\n+        COLON@[20; 21)\n+        WHITESPACE@[21; 22)\n+        PATH_TYPE@[22; 25)\n+          PATH@[22; 25)\n+            PATH_SEGMENT@[22; 25)\n+              NAME_REF@[22; 25)\n+                IDENT@[22; 25) \"u32\"\n+      WHITESPACE@[25; 26)\n+      R_CURLY@[26; 27)"}]}