{"sha": "e7c4fb692bc0daf519da1d84132cda151d0fb4b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YzRmYjY5MmJjMGRhZjUxOWRhMWQ4NDEzMmNkYTE1MWQwZmI0YjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T18:51:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T19:03:13Z"}, "message": "rand: Fix a bug acquiring a context on windows\n\nThe details can be found in the comment I wrote on the block in question, but\nthe gist of it is that our usage of the TIB for a stack limit was causing\nCryptAcquireContext to fail, so we temporarily get around it by setting the\nstack limit to 0.", "tree": {"sha": "bb92aae7617f02339262d68437525693c1ce2002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb92aae7617f02339262d68437525693c1ce2002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c4fb692bc0daf519da1d84132cda151d0fb4b1", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c4fb692bc0daf519da1d84132cda151d0fb4b1", "html_url": "https://github.com/rust-lang/rust/commit/e7c4fb692bc0daf519da1d84132cda151d0fb4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c4fb692bc0daf519da1d84132cda151d0fb4b1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e99a0b33c25dee2c1b3c113b5c67bfed1bff1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e99a0b33c25dee2c1b3c113b5c67bfed1bff1d", "html_url": "https://github.com/rust-lang/rust/commit/d2e99a0b33c25dee2c1b3c113b5c67bfed1bff1d"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "0f4169bfe28cdfced418e35f8b01810134270700", "filename": "src/librand/os.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7c4fb692bc0daf519da1d84132cda151d0fb4b1/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c4fb692bc0daf519da1d84132cda151d0fb4b1/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=e7c4fb692bc0daf519da1d84132cda151d0fb4b1", "patch": "@@ -63,6 +63,7 @@ mod imp {\n     use std::cast;\n     use std::libc::{c_ulong, DWORD, BYTE, LPCSTR, BOOL};\n     use std::os;\n+    use std::rt::stack;\n \n     type HCRYPTPROV = c_ulong;\n \n@@ -82,6 +83,7 @@ mod imp {\n     static PROV_RSA_FULL: DWORD = 1;\n     static CRYPT_SILENT: DWORD = 64;\n     static CRYPT_VERIFYCONTEXT: DWORD = 0xF0000000;\n+    static NTE_BAD_SIGNATURE: DWORD = 0x80090006;\n \n     extern \"system\" {\n         fn CryptAcquireContextA(phProv: *mut HCRYPTPROV,\n@@ -99,11 +101,47 @@ mod imp {\n         /// Create a new `OSRng`.\n         pub fn new() -> OSRng {\n             let mut hcp = 0;\n-            let ret = unsafe {\n+            let mut ret = unsafe {\n                 CryptAcquireContextA(&mut hcp, 0 as LPCSTR, 0 as LPCSTR,\n                                      PROV_RSA_FULL,\n                                      CRYPT_VERIFYCONTEXT | CRYPT_SILENT)\n             };\n+\n+            // It turns out that if we can't acquire a context with the\n+            // NTE_BAD_SIGNATURE error code, the documentation states:\n+            //\n+            //     The provider DLL signature could not be verified. Either the\n+            //     DLL or the digital signature has been tampered with.\n+            //\n+            // Sounds fishy, no? As it turns out, our signature can be bad\n+            // because our Thread Information Block (TIB) isn't exactly what it\n+            // expects. As to why, I have no idea. The only data we store in the\n+            // TIB is the stack limit for each thread, but apparently that's\n+            // enough to make the signature valid.\n+            //\n+            // Furthermore, this error only happens the *first* time we call\n+            // CryptAcquireContext, so we don't have to worry about future\n+            // calls.\n+            //\n+            // Anyway, the fix employed here is that if we see this error, we\n+            // pray that we're not close to the end of the stack, temporarily\n+            // set the stack limit to 0 (what the TIB originally was), acquire a\n+            // context, and then reset the stack limit.\n+            //\n+            // Again, I'm not sure why this is the fix, nor why we're getting\n+            // this error. All I can say is that this seems to allow libnative\n+            // to progress where it otherwise would be hindered. Who knew?\n+            if ret == 0 && os::errno() as DWORD == NTE_BAD_SIGNATURE {\n+                unsafe {\n+                    let limit = stack::get_sp_limit();\n+                    stack::record_sp_limit(0);\n+                    ret = CryptAcquireContextA(&mut hcp, 0 as LPCSTR, 0 as LPCSTR,\n+                                               PROV_RSA_FULL,\n+                                               CRYPT_VERIFYCONTEXT | CRYPT_SILENT);\n+                    stack::record_sp_limit(limit);\n+                }\n+            }\n+\n             if ret == 0 {\n                 fail!(\"couldn't create context: {}\", os::last_os_error());\n             }"}]}