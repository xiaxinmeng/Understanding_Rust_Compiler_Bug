{"sha": "59152a45af3688b53e677ea2362339643499c1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MTUyYTQ1YWYzNjg4YjUzZTY3N2VhMjM2MjMzOTY0MzQ5OWMxYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-28T14:48:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-28T14:48:56Z"}, "message": "Auto merge of #34525 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 13 pull requests\n\n- Successful merges: #34080, #34287, #34328, #34406, #34415, #34442, #34462, #34471, #34475, #34479, #34517, #34518, #34524\n- Failed merges: #33951", "tree": {"sha": "451a1988dffa6bfa09c0a2d7b84f78ef44125f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451a1988dffa6bfa09c0a2d7b84f78ef44125f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59152a45af3688b53e677ea2362339643499c1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59152a45af3688b53e677ea2362339643499c1a4", "html_url": "https://github.com/rust-lang/rust/commit/59152a45af3688b53e677ea2362339643499c1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59152a45af3688b53e677ea2362339643499c1a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0dc9297283daff6486807f43e190b4eb561412", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0dc9297283daff6486807f43e190b4eb561412", "html_url": "https://github.com/rust-lang/rust/commit/ea0dc9297283daff6486807f43e190b4eb561412"}, {"sha": "dd56a6ad0845b76509c4f8967e8ca476471ab7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd56a6ad0845b76509c4f8967e8ca476471ab7e0", "html_url": "https://github.com/rust-lang/rust/commit/dd56a6ad0845b76509c4f8967e8ca476471ab7e0"}], "stats": {"total": 216, "additions": 141, "deletions": 75}, "files": [{"sha": "a6b4e9492181c790fe5a3c040ca6e02397824d8f", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -322,7 +322,7 @@ to our closure when we pass it to `call_with_one`, so we use `&||`.\n A quick note about closures that use explicit lifetimes. Sometimes you might have a closure\n that takes a reference like so:\n \n-```\n+```rust\n fn call_with_ref<F>(some_closure:F) -> i32\n     where F: Fn(&i32) -> i32 {\n \n@@ -334,8 +334,8 @@ fn call_with_ref<F>(some_closure:F) -> i32\n Normally you can specify the lifetime of the parameter to our closure. We\n could annotate it on the function declaration:\n \n-```ignore\n-fn call_with_ref<'a, F>(some_closure:F) -> i32 \n+```rust,ignore\n+fn call_with_ref<'a, F>(some_closure:F) -> i32\n     where F: Fn(&'a 32) -> i32 {\n ```\n \n@@ -353,11 +353,11 @@ fn call_with_ref<F>(some_closure:F) -> i32\n     where F: for<'a> Fn(&'a 32) -> i32 {\n ```\n \n-This lets the Rust compiler find the minimum lifetime to invoke our closure and \n+This lets the Rust compiler find the minimum lifetime to invoke our closure and\n satisfy the borrow checker's rules. Our function then compiles and excutes as we\n expect.\n \n-```\n+```rust\n fn call_with_ref<F>(some_closure:F) -> i32\n     where F: for<'a> Fn(&'a i32) -> i32 {\n "}, {"sha": "67fe8ba2c11a48e0d5bde95d9a769caeef0a4541", "filename": "src/doc/book/crates-and-modules.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcrates-and-modules.md?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -22,12 +22,10 @@ As an example, let\u2019s make a *phrases* crate, which will give us various phrase\n in different languages. To keep things simple, we\u2019ll stick to \u2018greetings\u2019 and\n \u2018farewells\u2019 as two kinds of phrases, and use English and Japanese (\u65e5\u672c\u8a9e) as\n two languages for those phrases to be in. We\u2019ll use this module layout:\n-\n ```text\n                                     +-----------+\n                                 +---| greetings |\n-                                |   +-----------+\n-                  +---------+   |\n+                  +---------+   |   +-----------+\n               +---| english |---+\n               |   +---------+   |   +-----------+\n               |                 +---| farewells |\n@@ -37,8 +35,7 @@ two languages for those phrases to be in. We\u2019ll use this module layout:\n               |                 +---| greetings |\n               |   +----------+  |   +-----------+\n               +---| japanese |--+\n-                  +----------+  |\n-                                |   +-----------+\n+                  +----------+  |   +-----------+\n                                 +---| farewells |\n                                     +-----------+\n ```"}, {"sha": "c3e32e56c42666581f597ad0398f9c8f983d6115", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -67,7 +67,7 @@ Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will ha\n \n [arrays]: primitive-types.html#arrays\n [vectors]: vectors.html\n-[heap]: the-stack-and-the-heap.html\n+[heap]: the-stack-and-the-heap.html#the-heap\n [stack]: the-stack-and-the-heap.html#the-stack\n [bindings]: variable-bindings.html\n [generics]: generics.html\n@@ -136,6 +136,8 @@ Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n pattern representing the value of 10 to the allocated memory and binds the\n variable name x to this memory region for future reference.\n \n+[i32]: primitive-types.html#numeric-types\n+\n Now consider the following code fragment:\n \n ```rust"}, {"sha": "e685cb129b939669a235ec14ddb2091c9d06f086", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -397,10 +397,10 @@ fn normal<T: ConvertTo<i64>>(x: &T) -> i64 {\n }\n \n // can be called with T == i64\n-fn inverse<T>() -> T\n+fn inverse<T>(x: i32) -> T\n         // this is using ConvertTo as if it were \"ConvertTo<i64>\"\n         where i32: ConvertTo<T> {\n-    42.convert()\n+    x.convert()\n }\n ```\n "}, {"sha": "59dbffd6e28e7e705f679cb59bd9454015c8c339", "filename": "src/doc/reference.md", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -114,12 +114,20 @@ Non-doc comments are interpreted as a form of whitespace.\n \n ## Whitespace\n \n-Whitespace is any non-empty string containing only the following characters:\n-\n+Whitespace is any non-empty string containing only characters that have the\n+`Pattern_White_Space` Unicode property, namely:\n+\n+- `U+0009` (horizontal tab, `'\\t'`)\n+- `U+000A` (line feed, `'\\n'`)\n+- `U+000B` (vertical tab)\n+- `U+000C` (form feed)\n+- `U+000D` (carriage return, `'\\r'`)\n - `U+0020` (space, `' '`)\n-- `U+0009` (tab, `'\\t'`)\n-- `U+000A` (LF, `'\\n'`)\n-- `U+000D` (CR, `'\\r'`)\n+- `U+0085` (next line)\n+- `U+200E` (left-to-right mark)\n+- `U+200F` (right-to-left mark)\n+- `U+2028` (line separator)\n+- `U+2029` (paragraph separator)\n \n Rust is a \"free-form\" language, meaning that all forms of whitespace serve only\n to separate _tokens_ in the grammar, and have no semantic significance."}, {"sha": "15de0dd802d99f0a067c6df18d086e1cdb3465b8", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -28,6 +28,7 @@\n //! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\n //! format!(\"{value}\", value=4);      // => \"4\"\n //! format!(\"{} {}\", 1, 2);           // => \"1 2\"\n+//! format!(\"{:04}\", 42);             // => \"0042\" with leading zeros\n //! ```\n //!\n //! From these, you can see that the first argument is a format string. It is"}, {"sha": "9040e4bf8db5f23661174bb68a27822e63aa5d88", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -673,45 +673,35 @@ extern \"C\" {\n \"##,\n \n E0269: r##\"\n-Functions must eventually return a value of their return type. For example, in\n-the following function:\n+A returned value was expected but not all control paths return one.\n+\n+Erroneous code example:\n \n ```compile_fail,E0269\n fn abracada_FAIL() -> String {\n     \"this won't work\".to_string();\n+    // error: not all control paths return a value\n }\n ```\n \n-If the condition is true, the value `x` is returned, but if the condition is\n-false, control exits the `if` block and reaches a place where nothing is being\n-returned. All possible control paths must eventually return a `u8`, which is not\n-happening here.\n-\n-An easy fix for this in a complicated function is to specify a default return\n-value, if possible:\n+In the previous code, the function is supposed to return a `String`, however,\n+the code returns nothing (because of the ';'). Another erroneous code would be:\n \n-```ignore\n-fn foo(x: u8) -> u8 {\n-    if x > 0 {\n-        x // alternatively, `return x`\n+```compile_fail\n+fn abracada_FAIL(b: bool) -> u32 {\n+    if b {\n+        0\n+    } else {\n+        \"a\" // It fails because an `u32` was expected and something else is\n+            // returned.\n     }\n-    // lots of other if branches\n-    0 // return 0 if all else fails\n }\n ```\n \n It is advisable to find out what the unhandled cases are and check for them,\n returning an appropriate value or panicking if necessary. Check if you need\n-to remove a semicolon from the last expression, like in this case:\n-\n-```ignore\n-fn foo(x: u8) -> u8 {\n-    inner(2*x + 1);\n-}\n-```\n-\n-The semicolon discards the return value of `inner`, instead of returning\n-it from `foo`.\n+to remove a semicolon from the last expression, like in the first erroneous\n+code example.\n \"##,\n \n E0270: r##\""}, {"sha": "0334c5ef5c4f4397120d1408d1f8aa6227c8e5f8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -189,8 +189,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             }\n             hir::ViewPathList(p, paths) => {\n                 let mine = paths.into_iter().filter(|path| {\n-                    !self.maybe_inline_local(path.node.id(), None, false, om,\n-                                     please_inline)\n+                    !self.maybe_inline_local(path.node.id(), path.node.rename(),\n+                                             false, om, please_inline)\n                 }).collect::<hir::HirVec<hir::PathListItem>>();\n \n                 if mine.is_empty() {"}, {"sha": "07f43f72ff55ab1d987b60c70c37b909695f27a3", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -78,14 +78,11 @@ pub struct Empty { _priv: () }\n /// A slightly sad example of not reading anything into a buffer:\n ///\n /// ```\n-/// use std::io;\n-/// use std::io::Read;\n+/// use std::io::{self, Read};\n ///\n-/// # fn foo() -> io::Result<String> {\n /// let mut buffer = String::new();\n-/// try!(io::empty().read_to_string(&mut buffer));\n-/// # Ok(buffer)\n-/// # }\n+/// io::empty().read_to_string(&mut buffer).unwrap();\n+/// assert!(buffer.is_empty());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn empty() -> Empty { Empty { _priv: () } }\n@@ -113,6 +110,16 @@ pub struct Repeat { byte: u8 }\n ///\n /// All reads from this reader will succeed by filling the specified buffer with\n /// the given byte.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::io::{self, Read};\n+///\n+/// let mut buffer = [0; 3];\n+/// io::repeat(0b101).read_exact(&mut buffer).unwrap();\n+/// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn repeat(byte: u8) -> Repeat { Repeat { byte: byte } }\n \n@@ -139,6 +146,16 @@ pub struct Sink { _priv: () }\n ///\n /// All calls to `write` on the returned instance will return `Ok(buf.len())`\n /// and the contents of the buffer will not be inspected.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::io::{self, Write};\n+///\n+/// let mut buffer = vec![1, 2, 3, 5, 8];\n+/// let num_bytes = io::sink().write(&mut buffer).unwrap();\n+/// assert_eq!(num_bytes, 5);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn sink() -> Sink { Sink { _priv: () } }\n "}, {"sha": "17d412411c0481fe47813bfca8f0270cdfdaf707", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -217,7 +217,7 @@ impl f32 {\n     /// // Values between `0` and `min` are Subnormal.\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n-    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number\n+    /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_normal(self) -> bool { num::Float::is_normal(self) }\n@@ -923,12 +923,12 @@ impl f32 {\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n-    /// use std::f64;\n+    /// use std::f32;\n     ///\n-    /// let x = f64::consts::PI/4.0;\n+    /// let x = f32::consts::PI / 4.0;\n     /// let abs_difference = (x.tan() - 1.0).abs();\n     ///\n-    /// assert!(abs_difference < 1e-10);\n+    /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1052,12 +1052,14 @@ impl f32 {\n     /// number is close to zero.\n     ///\n     /// ```\n-    /// let x = 7.0f64;\n+    /// use std::f32;\n     ///\n-    /// // e^(ln(7)) - 1\n-    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();\n+    /// let x = 6.0f32;\n     ///\n-    /// assert!(abs_difference < 1e-10);\n+    /// // e^(ln(6)) - 1\n+    /// let abs_difference = (x.ln().exp_m1() - 5.0).abs();\n+    ///\n+    /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "70b7706535ca17784f4ebf81f95aac4b93110b5d", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -147,23 +147,23 @@ impl f64 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n+    /// use std::f64;\n     ///\n-    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f64\n-    /// let max = f32::MAX;\n-    /// let lower_than_min = 1.0e-40_f32;\n-    /// let zero = 0.0f32;\n+    /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308f64\n+    /// let max = f64::MAX;\n+    /// let lower_than_min = 1.0e-308_f64;\n+    /// let zero = 0.0f64;\n     ///\n     /// assert!(min.is_normal());\n     /// assert!(max.is_normal());\n     ///\n     /// assert!(!zero.is_normal());\n-    /// assert!(!f32::NAN.is_normal());\n-    /// assert!(!f32::INFINITY.is_normal());\n+    /// assert!(!f64::NAN.is_normal());\n+    /// assert!(!f64::INFINITY.is_normal());\n     /// // Values between `0` and `min` are Subnormal.\n     /// assert!(!lower_than_min.is_normal());\n     /// ```\n-    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number\n+    /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_normal(self) -> bool { num::Float::is_normal(self) }\n@@ -655,9 +655,9 @@ impl f64 {\n     /// ```\n     /// #![feature(float_extras)]\n     ///\n-    /// let x = 1.0f32;\n+    /// let x = 1.0f64;\n     ///\n-    /// let abs_diff = (x.next_after(2.0) - 1.00000011920928955078125_f32).abs();\n+    /// let abs_diff = (x.next_after(2.0) - 1.0000000000000002220446049250313_f64).abs();\n     ///\n     /// assert!(abs_diff < 1e-10);\n     /// ```"}, {"sha": "c103ff7f4b025345a260fd586f01eb01829b643e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -525,6 +525,26 @@ impl<'a> Hash for PrefixComponent<'a> {\n ///\n /// See the module documentation for an in-depth explanation of components and\n /// their role in the API.\n+///\n+/// This `enum` is created from iterating over the [`path::Components`]\n+/// `struct`.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::path::{Component, Path};\n+///\n+/// let path = Path::new(\"/tmp/foo/bar.txt\");\n+/// let components = path.components().collect::<Vec<_>>();\n+/// assert_eq!(&components, &[\n+///     Component::RootDir,\n+///     Component::Normal(\"tmp\".as_ref()),\n+///     Component::Normal(\"foo\".as_ref()),\n+///     Component::Normal(\"bar.txt\".as_ref()),\n+/// ]);\n+/// ```\n+///\n+/// [`path::Components`]: struct.Components.html\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Component<'a> {"}, {"sha": "be9cd6a688858ff2fc6b8da382babd1d0c496892", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -490,9 +490,6 @@ mod prim_tuple { }\n ///\n /// *[See also the `std::f32` module](f32/index.html).*\n ///\n-/// However, please note that examples are shared between the `f64` and `f32`\n-/// primitive types. So it's normal if you see usage of `f64` in there.\n-///\n mod prim_f32 { }\n \n #[doc(primitive = \"f64\")]\n@@ -501,9 +498,6 @@ mod prim_f32 { }\n ///\n /// *[See also the `std::f64` module](f64/index.html).*\n ///\n-/// However, please note that examples are shared between the `f64` and `f32`\n-/// primitive types. So it's normal if you see usage of `f32` in there.\n-///\n mod prim_f64 { }\n \n #[doc(primitive = \"i8\")]"}, {"sha": "e9736fea7b37f43955f04d7137cefa517cfaaa9b", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -394,6 +394,19 @@ pub fn sleep_ms(ms: u32) {\n /// signal being received or a spurious wakeup. Platforms which do not support\n /// nanosecond precision for sleeping will have `dur` rounded up to the nearest\n /// granularity of time they can sleep for.\n+///\n+/// # Examples\n+///\n+/// ```rust,no_run\n+/// use std::{thread, time};\n+///\n+/// let ten_millis = time::Duration::from_millis(10);\n+/// let now = time::Instant::now();\n+///\n+/// thread::sleep(ten_millis);\n+///\n+/// assert!(now.elapsed() >= ten_millis);\n+/// ```\n #[stable(feature = \"thread_sleep\", since = \"1.4.0\")]\n pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)"}, {"sha": "a6de638854f65b082b6b3b1adf7a36bb70f54a3c", "filename": "src/test/rustdoc/issue-34473.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/59152a45af3688b53e677ea2362339643499c1a4/src%2Ftest%2Frustdoc%2Fissue-34473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59152a45af3688b53e677ea2362339643499c1a4/src%2Ftest%2Frustdoc%2Fissue-34473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34473.rs?ref=59152a45af3688b53e677ea2362339643499c1a4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+mod second {\n+    pub struct SomeTypeWithLongName;\n+}\n+\n+// @has foo/index.html\n+// @!has - SomeTypeWithLongName\n+// @has foo/struct.SomeType.html\n+// @!has - SomeTypeWithLongName\n+// @!has foo/struct.SomeTypeWithLongName.html\n+pub use second::{SomeTypeWithLongName as SomeType};"}]}