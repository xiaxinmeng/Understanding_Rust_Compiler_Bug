{"sha": "bc14f500a0b0e1349d0f795b85dde5946da113bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTRmNTAwYTBiMGUxMzQ5ZDBmNzk1Yjg1ZGRlNTk0NmRhMTEzYmQ=", "commit": {"author": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T17:34:42Z"}, "committer": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T17:34:42Z"}, "message": "Extract common parts of match arms in convert_to_guarded_return assist.", "tree": {"sha": "4bdd1539b21d7545df8fa7dd3ae55c625e24abc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bdd1539b21d7545df8fa7dd3ae55c625e24abc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc14f500a0b0e1349d0f795b85dde5946da113bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc14f500a0b0e1349d0f795b85dde5946da113bd", "html_url": "https://github.com/rust-lang/rust/commit/bc14f500a0b0e1349d0f795b85dde5946da113bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc14f500a0b0e1349d0f795b85dde5946da113bd/comments", "author": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ab3f876020872f1f692577792569b7b6c8239d", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ab3f876020872f1f692577792569b7b6c8239d", "html_url": "https://github.com/rust-lang/rust/commit/91ab3f876020872f1f692577792569b7b6c8239d"}], "stats": {"total": 87, "additions": 37, "deletions": 50}, "files": [{"sha": "570a07a20c56620b83d4e3e7898d529ca758fa2c", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 37, "deletions": 50, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bc14f500a0b0e1349d0f795b85dde5946da113bd/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc14f500a0b0e1349d0f795b85dde5946da113bd/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=bc14f500a0b0e1349d0f795b85dde5946da113bd", "patch": "@@ -3,9 +3,10 @@ use std::ops::RangeInclusive;\n use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::replace_children,\n-    ast::{self, edit::IndentLevel, make, Pat::TupleStructPat},\n+    ast::{self, edit::IndentLevel, make, Block, Pat::TupleStructPat},\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n+    SyntaxNode,\n };\n \n use crate::{\n@@ -97,68 +98,54 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n             None => {\n                 // If.\n                 let early_expression = &(early_expression.to_owned() + \";\");\n-                let new_if_expr =\n+                let new_expr =\n                     if_indent_level.increase_indent(make::if_expression(&expr, early_expression));\n-                let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n-                let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n-                let end_of_then =\n-                    if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n-                        end_of_then.prev_sibling_or_token().unwrap()\n-                    } else {\n-                        end_of_then\n-                    };\n-                let mut new_if_and_then_statements =\n-                    new_if_expr.syntax().children_with_tokens().chain(\n-                        then_block_items\n-                            .syntax()\n-                            .children_with_tokens()\n-                            .skip(1)\n-                            .take_while(|i| *i != end_of_then),\n-                    );\n-                replace_children(\n-                    &parent_block.syntax(),\n-                    RangeInclusive::new(\n-                        if_expr.clone().syntax().clone().into(),\n-                        if_expr.syntax().clone().into(),\n-                    ),\n-                    &mut new_if_and_then_statements,\n-                )\n+                replace(new_expr, &then_block, &parent_block, &if_expr)\n             }\n             Some(if_let_ident) => {\n                 // If-let.\n-                let new_match_expr = if_indent_level.increase_indent(make::let_match_early(\n+                let new_expr = if_indent_level.increase_indent(make::let_match_early(\n                     expr,\n                     &if_let_ident,\n                     early_expression,\n                 ));\n-                let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n-                let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n-                let end_of_then =\n-                    if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n-                        end_of_then.prev_sibling_or_token().unwrap()\n-                    } else {\n-                        end_of_then\n-                    };\n-                let mut then_statements = new_match_expr.syntax().children_with_tokens().chain(\n-                    then_block_items\n-                        .syntax()\n-                        .children_with_tokens()\n-                        .skip(1)\n-                        .take_while(|i| *i != end_of_then),\n-                );\n-                replace_children(\n-                    &parent_block.syntax(),\n-                    RangeInclusive::new(\n-                        if_expr.clone().syntax().clone().into(),\n-                        if_expr.syntax().clone().into(),\n-                    ),\n-                    &mut then_statements,\n-                )\n+                replace(new_expr, &then_block, &parent_block, &if_expr)\n             }\n         };\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n+\n+        fn replace(\n+            new_expr: impl AstNode,\n+            then_block: &Block,\n+            parent_block: &Block,\n+            if_expr: &ast::IfExpr,\n+        ) -> SyntaxNode {\n+            let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n+            let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n+            let end_of_then =\n+                if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n+                    end_of_then.prev_sibling_or_token().unwrap()\n+                } else {\n+                    end_of_then\n+                };\n+            let mut then_statements = new_expr.syntax().children_with_tokens().chain(\n+                then_block_items\n+                    .syntax()\n+                    .children_with_tokens()\n+                    .skip(1)\n+                    .take_while(|i| *i != end_of_then),\n+            );\n+            replace_children(\n+                &parent_block.syntax(),\n+                RangeInclusive::new(\n+                    if_expr.clone().syntax().clone().into(),\n+                    if_expr.syntax().clone().into(),\n+                ),\n+                &mut then_statements,\n+            )\n+        }\n     })\n }\n "}]}