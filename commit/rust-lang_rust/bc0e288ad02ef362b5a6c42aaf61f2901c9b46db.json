{"sha": "bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMGUyODhhZDAyZWYzNjJiNWE2YzQyYWFmNjFmMjkwMWM5YjQ2ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T19:20:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T19:20:54Z"}, "message": "Auto merge of #65933 - crgl:vec-deque-truncate, r=alexcrichton\n\nUse ptr::drop_in_place for VecDeque::truncate and VecDeque::clear\n\nThis commit allows `VecDeque::truncate` to take advantage of its (largely) contiguous memory layout and is consistent with the change in #64432 for `Vec`. As with the change to `Vec::truncate`, this changes both:\n\n- the drop order, from back-to-front to front-to-back\n- the behavior when dropping an element panics\n\nFor consistency, it also changes the behavior when dropping an element panics for `VecDeque::clear`.\n\nThese changes in behavior can be observed. This example ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d0b1f2edc123437a2f704cbe8d93d828))\n```rust\nuse std::collections::VecDeque;\n\nfn main() {\n    struct Bomb(usize);\n    impl Drop for Bomb {\n        fn drop(&mut self) {\n            panic!(format!(\"{}\", self.0));\n        }\n    }\n    let mut v = VecDeque::from(vec![Bomb(0), Bomb(1)]);\n    std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {\n        v.truncate(0);\n    }));\n    std::mem::forget(v);\n}\n```\npanics printing `1` today and succeeds. `v.clear()` panics printing `0` today and succeeds. With the change, `v.clear()`, `v.truncate(0)`, and dropping the `VecDeque` all panic printing `0` first and then abort with a double-panic printing `1`.\n\nThe motivation for this was making `VecDeque::truncate` more efficient since it was used in the implementation of `VecDeque::clone_from` (#65069), but it also makes behavior more consistent within the `VecDeque` and with `Vec` if that change is accepted (this probably doesn't make sense to merge if not).\n\nThis might need a crater run and an FCP as well.", "tree": {"sha": "517fef0f33192847e5c3d5826e691c4a0247648f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517fef0f33192847e5c3d5826e691c4a0247648f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "html_url": "https://github.com/rust-lang/rust/commit/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56237d75b4271a8a2e0f47d86ea76ebf6d966152", "url": "https://api.github.com/repos/rust-lang/rust/commits/56237d75b4271a8a2e0f47d86ea76ebf6d966152", "html_url": "https://github.com/rust-lang/rust/commit/56237d75b4271a8a2e0f47d86ea76ebf6d966152"}, {"sha": "27e0ab578cc0fc4c72da54bbeb42c0c44d848207", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e0ab578cc0fc4c72da54bbeb42c0c44d848207", "html_url": "https://github.com/rust-lang/rust/commit/27e0ab578cc0fc4c72da54bbeb42c0c44d848207"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "7795083e0580cc2d8f2fbff8081a60cd4b85c897", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "patch": "@@ -835,7 +835,8 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Shortens the `VecDeque`, dropping excess elements from the back.\n+    /// Shortens the `VecDeque`, keeping the first `len` elements and dropping\n+    /// the rest.\n     ///\n     /// If `len` is greater than the `VecDeque`'s current length, this has no\n     /// effect.\n@@ -855,8 +856,31 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n     pub fn truncate(&mut self, len: usize) {\n-        for _ in len..self.len() {\n-            self.pop_back();\n+        // Safe because:\n+        //\n+        // * Any slice passed to `drop_in_place` is valid; the second case has\n+        //   `len <= front.len()` and returning on `len > self.len()` ensures\n+        //   `begin <= back.len()` in the first case\n+        // * The head of the VecDeque is moved before calling `drop_in_place`,\n+        //   so no value is dropped twice if `drop_in_place` panics\n+        unsafe {\n+            if len > self.len() {\n+                return;\n+            }\n+            let num_dropped = self.len() - len;\n+            let (front, back) = self.as_mut_slices();\n+            if len > front.len() {\n+                let begin = len - front.len();\n+                let drop_back = back.get_unchecked_mut(begin..) as *mut _;\n+                self.head = self.wrap_sub(self.head, num_dropped);\n+                ptr::drop_in_place(drop_back);\n+            } else {\n+                let drop_back = back as *mut _;\n+                let drop_front = front.get_unchecked_mut(len..) as *mut _;\n+                self.head = self.wrap_sub(self.head, num_dropped);\n+                ptr::drop_in_place(drop_front);\n+                ptr::drop_in_place(drop_back);\n+            }\n         }\n     }\n \n@@ -1117,7 +1141,7 @@ impl<T> VecDeque<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn clear(&mut self) {\n-        self.drain(..);\n+        self.truncate(0);\n     }\n \n     /// Returns `true` if the `VecDeque` contains an element equal to the"}, {"sha": "09009ff516ac8b5ba59678a9da1439ba5ccb7771", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0e288ad02ef362b5a6c42aaf61f2901c9b46db/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=bc0e288ad02ef362b5a6c42aaf61f2901c9b46db", "patch": "@@ -384,6 +384,41 @@ fn test_clone_from() {\n     }\n }\n \n+#[test]\n+fn test_vec_deque_truncate_drop() {\n+    static mut DROPS: u32 = 0;\n+    #[derive(Clone)]\n+    struct Elem(i32);\n+    impl Drop for Elem {\n+        fn drop(&mut self) {\n+            unsafe {\n+                DROPS += 1;\n+            }\n+        }\n+    }\n+\n+    let v = vec![Elem(1), Elem(2), Elem(3), Elem(4), Elem(5)];\n+    for push_front in 0..=v.len() {\n+        let v = v.clone();\n+        let mut tester = VecDeque::with_capacity(5);\n+        for (index, elem) in v.into_iter().enumerate() {\n+            if index < push_front {\n+                tester.push_front(elem);\n+            } else {\n+                tester.push_back(elem);\n+            }\n+        }\n+        assert_eq!(unsafe { DROPS }, 0);\n+        tester.truncate(3);\n+        assert_eq!(unsafe { DROPS }, 2);\n+        tester.truncate(0);\n+        assert_eq!(unsafe { DROPS }, 5);\n+        unsafe {\n+            DROPS = 0;\n+        }\n+    }\n+}\n+\n #[test]\n fn issue_53529() {\n     use crate::boxed::Box;"}]}