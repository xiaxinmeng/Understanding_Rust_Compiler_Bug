{"sha": "8820d4485b7b598a5e683ae3f67812d5b5c8c521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjBkNDQ4NWI3YjU5OGE1ZTY4M2FlM2Y2NzgxMmQ1YjVjOGM1MjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-03T05:49:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-06T00:47:52Z"}, "message": "print type arguments when pretty-printing all nominal types", "tree": {"sha": "9954ee0adabe5c7806a1d031a4384e386ebe3fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9954ee0adabe5c7806a1d031a4384e386ebe3fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8820d4485b7b598a5e683ae3f67812d5b5c8c521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8820d4485b7b598a5e683ae3f67812d5b5c8c521", "html_url": "https://github.com/rust-lang/rust/commit/8820d4485b7b598a5e683ae3f67812d5b5c8c521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8820d4485b7b598a5e683ae3f67812d5b5c8c521/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3269a4043ce3ece87708fc447b37b330661a5ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3269a4043ce3ece87708fc447b37b330661a5ed0", "html_url": "https://github.com/rust-lang/rust/commit/3269a4043ce3ece87708fc447b37b330661a5ed0"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "20134993047d722f522809ded7c726557c856a6c", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8820d4485b7b598a5e683ae3f67812d5b5c8c521/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8820d4485b7b598a5e683ae3f67812d5b5c8c521/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=8820d4485b7b598a5e683ae3f67812d5b5c8c521", "patch": "@@ -74,7 +74,10 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       some(def_id) {\n         let cs = ast_map::path_to_str(ty::item_path(cx, def_id));\n         ret alt ty::get(typ).struct {\n-          ty_enum(_, tps) | ty_res(_, _, tps) { parameterized(cx, cs, tps) }\n+          ty_enum(_, tps) | ty_res(_, _, tps) | ty_iface(_, tps) |\n+          ty_class(_, tps) {\n+            parameterized(cx, cs, tps)\n+          }\n           _ { cs }\n         };\n       }\n@@ -94,6 +97,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_float(ast::ty_f) { \"float\" }\n       ty_float(t) { ast_util::float_ty_to_str(t) }\n       ty_str { \"str\" }\n+      ty_self(ts) { parameterized(cx, \"self\", ts) }\n       ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n       ty_uniq(tm) { \"~\" + mt_to_str(cx, tm) }\n       ty_ptr(tm) { \"*\" + mt_to_str(cx, tm) }\n@@ -117,7 +121,8 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_param(id, _) {\n         \"'\" + str::from_bytes([('a' as u8) + (id as u8)])\n       }\n-      ty_enum(did, tps) | ty_res(did, _, tps) | ty_class(did, tps) {\n+      ty_enum(did, tps) | ty_res(did, _, tps) | ty_iface(did, tps) |\n+      ty_class(did, tps) {\n         // Not sure why, but under some circumstances enum or resource types\n         // do not have an associated id.  I didn't investigate enough to know\n         // if there is a good reason for this. - Niko, 2012-02-10"}, {"sha": "f0c8bdf7b52cad148a4f1e8c8ceaac3e15db5d48", "filename": "src/test/compile-fail/map-types.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8820d4485b7b598a5e683ae3f67812d5b5c8c521/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8820d4485b7b598a5e683ae3f67812d5b5c8c521/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=8820d4485b7b598a5e683ae3f67812d5b5c8c521", "patch": "@@ -0,0 +1,10 @@\n+use std;\n+import std::map;\n+import std::map::map;\n+\n+// Test that iface types printed in error msgs include the type arguments.\n+\n+fn main() {\n+    let x: map<uint,str> = map::new_str_hash::<str>();\n+    //!^ ERROR mismatched types: expected `std::map::map<uint,str>`\n+}\n\\ No newline at end of file"}]}