{"sha": "506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjI5M2NhNDNmNGNhZTc1MjBjOWUxNGI2YjM2YjQyYjFhZjRjZTE=", "commit": {"author": {"name": "Matt Hall", "email": "matthew@quickbeam.me.uk", "date": "2021-02-21T17:36:37Z"}, "committer": {"name": "Matt Hall", "email": "matthew@quickbeam.me.uk", "date": "2021-02-23T18:10:01Z"}, "message": "Add convert_for_to_iter_for_each assist", "tree": {"sha": "d6ebc6de8bd64ac602df3489260a6d892f48c810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ebc6de8bd64ac602df3489260a6d892f48c810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "html_url": "https://github.com/rust-lang/rust/commit/506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0892ccd0901f7db5d61ad4789337f12b389b0308", "url": "https://api.github.com/repos/rust-lang/rust/commits/0892ccd0901f7db5d61ad4789337f12b389b0308", "html_url": "https://github.com/rust-lang/rust/commit/0892ccd0901f7db5d61ad4789337f12b389b0308"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "d858474c69df85e3a159bad322bdd3a2051eb5a3", "filename": "crates/ide_assists/src/handlers/convert_for_to_iter_for_each.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs?ref=506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "patch": "@@ -0,0 +1,225 @@\n+use ast::LoopBodyOwner;\n+use ide_db::helpers::FamousDefs;\n+use stdx::format_to;\n+use syntax::{ast, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: convert_for_to_iter_for_each\n+//\n+// Converts a for loop into a for_each loop on the Iterator.\n+//\n+// ```\n+// fn main() {\n+//     let x = vec![1, 2, 3];\n+//     for $0v in x {\n+//         let y = v * 2;\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let x = vec![1, 2, 3];\n+//     x.into_iter().for_each(|v| {\n+//         let y = v * 2;\n+//     });\n+// }\n+// ```\n+pub(crate) fn convert_for_to_iter_for_each(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let for_loop = ctx.find_node_at_offset::<ast::ForExpr>()?;\n+    let iterable = for_loop.iterable()?;\n+    let pat = for_loop.pat()?;\n+    let body = for_loop.loop_body()?;\n+\n+    let mut buf = String::new();\n+\n+    if impls_core_iter(&ctx.sema, &iterable) {\n+        buf += &iterable.to_string();\n+    } else {\n+        match iterable {\n+            ast::Expr::RefExpr(r) => {\n+                if r.mut_token().is_some() {\n+                    format_to!(buf, \"{}.iter_mut()\", r.expr()?);\n+                } else {\n+                    format_to!(buf, \"{}.iter()\", r.expr()?);\n+                }\n+            }\n+            _ => format_to!(buf, \"{}.into_iter()\", iterable),\n+        }\n+    }\n+\n+    format_to!(buf, \".for_each(|{}| {});\", pat, body);\n+\n+    acc.add(\n+        AssistId(\"convert_for_to_iter_for_each\", AssistKind::RefactorRewrite),\n+        \"Convert a for loop into an Iterator::for_each\",\n+        for_loop.syntax().text_range(),\n+        |builder| builder.replace(for_loop.syntax().text_range(), buf),\n+    )\n+}\n+\n+fn impls_core_iter(sema: &hir::Semantics<ide_db::RootDatabase>, iterable: &ast::Expr) -> bool {\n+    let it_typ = if let Some(i) = sema.type_of_expr(iterable) {\n+        i\n+    } else {\n+        return false;\n+    };\n+    let module = if let Some(m) = sema.scope(iterable.syntax()).module() {\n+        m\n+    } else {\n+        return false;\n+    };\n+    let krate = module.krate();\n+    if let Some(iter_trait) = FamousDefs(sema, Some(krate)).core_iter_Iterator() {\n+        return it_typ.impls_trait(sema.db, iter_trait, &[]);\n+    }\n+    false\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    const EMPTY_ITER_FIXTURE: &'static str = r\"\n+//- /lib.rs deps:core crate:empty_iter\n+pub struct EmptyIter;\n+impl Iterator for EmptyIter {\n+    type Item = usize;\n+    fn next(&mut self) -> Option<Self::Item> { None }\n+}\n+\n+pub struct Empty;\n+impl Empty {\n+    pub fn iter(&self) -> EmptyIter { EmptyIter }\n+}\n+\";\n+\n+    #[test]\n+    fn test_not_for() {\n+        check_assist_not_applicable(\n+            convert_for_to_iter_for_each,\n+            r\"\n+let mut x = vec![1, 2, 3];\n+x.iter_mut().$0for_each(|v| *v *= 2);\n+        \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_simple_for() {\n+        check_assist(\n+            convert_for_to_iter_for_each,\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for $0v in x {\n+        v *= 2;\n+    }\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.into_iter().for_each(|v| {\n+        v *= 2;\n+    });\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_borrowed() {\n+        check_assist(\n+            convert_for_to_iter_for_each,\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for $0v in &x {\n+        let a = v * 2;\n+    }\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.iter().for_each(|v| {\n+        let a = v * 2;\n+    });\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_borrowed_mut() {\n+        check_assist(\n+            convert_for_to_iter_for_each,\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for $0v in &mut x {\n+        *v *= 2;\n+    }\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.iter_mut().for_each(|v| {\n+        *v *= 2;\n+    });\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_borrowed_mut_behind_var() {\n+        check_assist(\n+            convert_for_to_iter_for_each,\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    let y = &mut x;\n+    for $0v in y {\n+        *v *= 2;\n+    }\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    let y = &mut x;\n+    y.into_iter().for_each(|v| {\n+        *v *= 2;\n+    });\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_take() {\n+        let before = r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    for$0 a in x.iter().take(1) {\n+        println!(\"{}\", a);\n+    }\n+}\n+\"#;\n+        let after = r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    x.iter().take(1).for_each(|a| {\n+        println!(\"{}\", a);\n+    });\n+}\n+\"#;\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n+            before,\n+            FamousDefs::FIXTURE,\n+            EMPTY_ITER_FIXTURE\n+        );\n+        check_assist(convert_for_to_iter_for_each, before, after);\n+    }\n+}"}, {"sha": "f4c7e6fbf7c1226e5b1c2fedfd32b820caa2bea4", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "patch": "@@ -114,6 +114,7 @@ mod handlers {\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_visibility;\n+    mod convert_for_to_iter_for_each;\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n@@ -175,6 +176,7 @@ mod handlers {\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,\n+            convert_for_to_iter_for_each::convert_for_to_iter_for_each,\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,"}, {"sha": "100c3b7fe0d1b851e5ac499cd794d08f38077e6a", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506293ca43f4cae7520c9e14b6b36b42b1af4ce1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=506293ca43f4cae7520c9e14b6b36b42b1af4ce1", "patch": "@@ -192,6 +192,29 @@ pub(crate) fn frobnicate() {}\n     )\n }\n \n+#[test]\n+fn doctest_convert_for_to_iter_for_each() {\n+    check_doc_test(\n+        \"convert_for_to_iter_for_each\",\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for $0v in x {\n+        let y = v * 2;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.into_iter().for_each(|v| {\n+        let y = v * 2;\n+    });\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_integer_literal() {\n     check_doc_test("}]}