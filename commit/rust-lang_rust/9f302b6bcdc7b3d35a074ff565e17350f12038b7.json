{"sha": "9f302b6bcdc7b3d35a074ff565e17350f12038b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzAyYjZiY2RjN2IzZDM1YTA3NGZmNTY1ZTE3MzUwZjEyMDM4Yjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-04T17:58:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-05T04:42:22Z"}, "message": "Add long diagnostics for E0414", "tree": {"sha": "d72cce56a7cc2fd811616d04d7cb487e29d6e7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72cce56a7cc2fd811616d04d7cb487e29d6e7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f302b6bcdc7b3d35a074ff565e17350f12038b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXKs8vAAoJEDu/TT4u95+YbAsP/3hNscYY7UVcKyBRaCA+NDUp\nJ6TmIbr8XZo5vDYWr9uvaVg6dXXjPIRPnqot3dcyBss9HAQAwzXke2SEjdSJQCnG\nbIy0knJjxe2xeJ64S7M+CIukHwLL9X8iC1r57AtHSd8sfnBnobzBHRWFZ+rKLnMO\neDdyTeO6LvXtDxr1K2knPpwclfwPSvjsnynDHAClRJkSFzT1h6hx2sn9zCLavm+2\n1vcN835yA9Q5ZoxvsB2zCUg7VJJmJaZd3cgjqOumdJf1IQAM8x9S6n6jTe8jEC5h\nb4M9dDdQZ/tWmdETneh4JUsP5hqxkiTefGY3+ZL6SiiUyxeajcpVekbfIYTDVX+I\nD2mz/eE9XpYanhNEzq9fqzLUz8KVheZcCTOv3pTo3O0yOSP2Ywk7zDXmQCdkSw11\nIo7jkswTB6v82TNZ//7GTG8THcaZderc0OYj17xaus8RaOR97Hd/4QVOQn2AjgiD\nvcAvJvxHo/eCHre9mo9FYdjeezENWR6OsArvXIgaj4NQ9bx6iOtpzoqbP5IT+Upp\nYKduf9RWhb04s1GYXVj9/hBWM6kGKybvgXYI0Hnzgg6X56uYaDyrZLbnzBfLCipH\nS/ByJk+333qKQj496Gs7zDf6Gp5PmYM13vMqcM1Ho3/usWjCBCyrrk+b6aFR5G/t\nAy7d7Us4TYgwmfpgtToL\n=hRyv\n-----END PGP SIGNATURE-----", "payload": "tree d72cce56a7cc2fd811616d04d7cb487e29d6e7cb\nparent 5f9e30431021f1c8eae7f4cfa6db9b1d39a8e216\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462384730 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462423342 +0530\n\nAdd long diagnostics for E0414\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f302b6bcdc7b3d35a074ff565e17350f12038b7", "html_url": "https://github.com/rust-lang/rust/commit/9f302b6bcdc7b3d35a074ff565e17350f12038b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f302b6bcdc7b3d35a074ff565e17350f12038b7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9e30431021f1c8eae7f4cfa6db9b1d39a8e216", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9e30431021f1c8eae7f4cfa6db9b1d39a8e216", "html_url": "https://github.com/rust-lang/rust/commit/5f9e30431021f1c8eae7f4cfa6db9b1d39a8e216"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "fda7c7aeb33069695bc27aea53e73ec9c88115dc", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9f302b6bcdc7b3d35a074ff565e17350f12038b7/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f302b6bcdc7b3d35a074ff565e17350f12038b7/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=9f302b6bcdc7b3d35a074ff565e17350f12038b7", "patch": "@@ -623,6 +623,69 @@ let Foo = 12i32; // ok!\n The goal here is to avoid a conflict of names.\n \"##,\n \n+E0414: r##\"\n+A variable binding in an irrefutable pattern is shadowing the name of a\n+constant. Example of erroneous code:\n+\n+```compile_fail\n+const FOO: u8 = 7;\n+\n+let FOO = 5; // error: variable bindings cannot shadow constants\n+\n+// or\n+\n+fn bar(FOO: u8) { // error: variable bindings cannot shadow constants\n+\n+}\n+\n+// or\n+\n+for FOO in bar {\n+\n+}\n+```\n+\n+Introducing a new variable in Rust is done through a pattern. Thus you can have\n+`let` bindings like `let (a, b) = ...`. However, patterns also allow constants\n+in them, e.g. if you want to match over a constant:\n+\n+```ignore\n+const FOO: u8 = 1;\n+\n+match (x,y) {\n+ (3, 4) => { .. }, // it is (3,4)\n+ (FOO, 1) => { .. }, // it is (1,1)\n+ (foo, 1) => { .. }, // it is (anything, 1)\n+                     // call the value in the first slot \"foo\"\n+ _ => { .. } // it is anything\n+}\n+```\n+\n+Here, the second arm matches the value of `x` against the constant `FOO`,\n+whereas the third arm will accept any value of `x` and call it `foo`.\n+\n+This works for `match`, however in cases where an irrefutable pattern is\n+required, constants can't be used. An irrefutable pattern is one which always\n+matches, whose purpose is only to bind variable names to values. These are\n+required by let, for, and function argument patterns.\n+\n+Refutable patterns in such a situation do not make sense, for example:\n+\n+```ignore\n+let Some(x) = foo; // what if foo is None, instead?\n+\n+let (1, x) = foo; // what if foo.0 is not 1?\n+\n+let (SOME_CONST, x) = foo; // what if foo.0 is not SOME_CONST?\n+\n+let SOME_CONST = foo; // what if foo is not SOME_CONST?\n+```\n+\n+Thus, an irrefutable variable binding can't contain a constant.\n+\n+To fix this error, just give the marked variable a different name.\n+\"##,\n+\n E0415: r##\"\n More than one function parameter have the same name. Example of erroneous code:\n \n@@ -1086,7 +1149,6 @@ register_diagnostics! {\n     E0409, // variable is bound with different mode in pattern # than in\n            // pattern #1\n     E0410, // variable from pattern is not bound in pattern 1\n-    E0414, // only irrefutable patterns allowed here\n     E0418, // is not an enum variant, struct or const\n     E0420, // is not an associated const\n     E0421, // unresolved associated const"}]}