{"sha": "eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "node_id": "C_kwDOAAsO6NoAKGViN2E3NDM0MjE1ZGQ5ZDRiN2NjMTg3NDZhZDFkMGU1MzFjMjUzMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T17:56:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T17:56:17Z"}, "message": "Auto merge of #111210 - matthiaskrgr:rollup-doquh2n, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108865 (Add a `sysroot` crate to represent the standard library crates)\n - #110651 (libtest: include test output in junit xml reports)\n - #110826 (Make PlaceMention a non-mutating use.)\n - #110982 (Do not recurse into const generic args when resolving self lifetime elision.)\n - #111009 (Add `ascii::Char` (ACP#179))\n - #111100 (check array type of repeat exprs is wf)\n - #111186 (Add `is_positive` method for signed non-zero integers.)\n - #111201 (bootstrap: add .gitmodules to the sources)\n\nFailed merges:\n\n - #110954 (Reject borrows of projections in ConstProp.)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0287e377a5dbb3e130b3eb2265703697cfd50ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0287e377a5dbb3e130b3eb2265703697cfd50ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "html_url": "https://github.com/rust-lang/rust/commit/eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac35583d2ffb5ed9e564dee0822c9a244058ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac35583d2ffb5ed9e564dee0822c9a244058ee0", "html_url": "https://github.com/rust-lang/rust/commit/eac35583d2ffb5ed9e564dee0822c9a244058ee0"}, {"sha": "75e8f87673905d58618773bec92eff6446c0d579", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e8f87673905d58618773bec92eff6446c0d579", "html_url": "https://github.com/rust-lang/rust/commit/75e8f87673905d58618773bec92eff6446c0d579"}], "stats": {"total": 1134, "additions": 1084, "deletions": 50}, "files": [{"sha": "e69b36cb98346aadc1537821acb3747a908797f0", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -4739,6 +4739,15 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"sysroot\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"proc_macro\",\n+ \"std\",\n+ \"test\",\n+]\n+\n [[package]]\n name = \"tar\"\n version = \"0.4.38\"\n@@ -4823,7 +4832,6 @@ dependencies = [\n  \"getopts\",\n  \"panic_abort\",\n  \"panic_unwind\",\n- \"proc_macro\",\n  \"std\",\n ]\n "}, {"sha": "7aaa34a68e66f96ba1c216e987699e5f82ab2369", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -2,7 +2,7 @@\n members = [\n   \"compiler/rustc\",\n   \"library/std\",\n-  \"library/test\",\n+  \"library/sysroot\",\n   \"src/rustdoc-json-types\",\n   \"src/tools/build_helper\",\n   \"src/tools/cargotest\","}, {"sha": "74e6ce37e971aa5ad4c767004060debe28a31604", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -54,7 +54,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n         // contain dangling references.\n-        PlaceContext::NonUse(NonUseContext::PlaceMention) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention) |\n         PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n \n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |"}, {"sha": "4389d2b60bc5573ffbc62ae92527d575e805747f", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -108,6 +108,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for RegionRenumberer<'a, 'tcx> {\n         debug!(?region);\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n+    fn visit_ty_const(&mut self, ct: &mut ty::Const<'tcx>, location: Location) {\n+        let old_ct = *ct;\n+        *ct = self.renumber_regions(old_ct, || RegionCtxt::Location(location));\n+\n+        debug!(?ct);\n+    }\n+\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         let literal = constant.literal;"}, {"sha": "dcabeb792be3e223eb3ed332f144174fb7f424e2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -772,12 +772,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         match context {\n             PlaceContext::MutatingUse(_) => ty::Invariant,\n-            PlaceContext::NonUse(StorageDead | StorageLive | PlaceMention | VarDebugInfo) => {\n-                ty::Invariant\n-            }\n+            PlaceContext::NonUse(StorageDead | StorageLive | VarDebugInfo) => ty::Invariant,\n             PlaceContext::NonMutatingUse(\n-                Inspect | Copy | Move | SharedBorrow | ShallowBorrow | UniqueBorrow | AddressOf\n-                | Projection,\n+                Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | UniqueBorrow\n+                | AddressOf | Projection,\n             ) => ty::Covariant,\n             PlaceContext::NonUse(AscribeUserTy) => ty::Covariant,\n         }\n@@ -1803,6 +1801,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::Repeat(operand, len) => {\n                 self.check_operand(operand, location);\n \n+                let array_ty = rvalue.ty(body.local_decls(), tcx);\n+                self.prove_predicate(\n+                    ty::PredicateKind::WellFormed(array_ty.into()),\n+                    Locations::Single(location),\n+                    ConstraintCategory::Boring,\n+                );\n+\n                 // If the length cannot be evaluated we must assume that the length can be larger\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the"}, {"sha": "569599faa362bb8bda84c59a365600473df78025", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -203,7 +203,9 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                 self.assign(local, DefLocation::Body(location));\n             }\n \n-            PlaceContext::NonUse(_) | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n+            PlaceContext::NonUse(_)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention)\n+            | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n \n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::Copy | NonMutatingUseContext::Move,"}, {"sha": "bba049c3819343d97f24d82b7fa785c719dba5ea", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -1426,6 +1426,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n \n+        self.register_wf_obligation(\n+            tcx.mk_array_with_const_len(t, count).into(),\n+            expr.span,\n+            traits::WellFormed(None),\n+        );\n+\n         tcx.mk_array_with_const_len(t, count)\n     }\n "}, {"sha": "6718605ed0bc46de7d222de4cf933459eedb79e1", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -192,6 +192,14 @@ macro_rules! make_mir_visitor {\n                 self.super_constant(constant, location);\n             }\n \n+            fn visit_ty_const(\n+                &mut self,\n+                ct: $( & $mutability)? ty::Const<'tcx>,\n+                location: Location,\n+            ) {\n+                self.super_ty_const(ct, location);\n+            }\n+\n             fn visit_span(\n                 &mut self,\n                 span: $(& $mutability)? Span,\n@@ -410,7 +418,7 @@ macro_rules! make_mir_visitor {\n                     StatementKind::PlaceMention(place) => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::NonUse(NonUseContext::PlaceMention),\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention),\n                             location\n                         );\n                     }\n@@ -625,8 +633,9 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(operand, location);\n                     }\n \n-                    Rvalue::Repeat(value, _) => {\n+                    Rvalue::Repeat(value, ct) => {\n                         self.visit_operand(value, location);\n+                        self.visit_ty_const($(&$mutability)? *ct, location);\n                     }\n \n                     Rvalue::ThreadLocalRef(_) => {}\n@@ -878,12 +887,20 @@ macro_rules! make_mir_visitor {\n                 self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(_) => {}\n+                    ConstantKind::Ty(ct) => self.visit_ty_const($(&$mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                     ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n+            fn super_ty_const(\n+                &mut self,\n+                _ct: $(& $mutability)? ty::Const<'tcx>,\n+                _location: Location,\n+            ) {\n+\n+            }\n+\n             fn super_span(&mut self, _span: $(& $mutability)? Span) {\n             }\n \n@@ -1251,6 +1268,11 @@ pub enum NonMutatingUseContext {\n     UniqueBorrow,\n     /// AddressOf for *const pointer.\n     AddressOf,\n+    /// PlaceMention statement.\n+    ///\n+    /// This statement is executed as a check that the `Place` is live without reading from it,\n+    /// so it must be considered as a non-mutating use.\n+    PlaceMention,\n     /// Used as base for another place, e.g., `x` in `x.y`. Will not mutate the place.\n     /// For example, the projection `x.y` is not marked as a mutation in these cases:\n     /// ```ignore (illustrative)\n@@ -1301,8 +1323,6 @@ pub enum NonUseContext {\n     AscribeUserTy,\n     /// The data of a user variable, for debug info.\n     VarDebugInfo,\n-    /// PlaceMention statement.\n-    PlaceMention,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "aeca0073304eab9ddd7533a07ac97be6a678f618", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -197,6 +197,7 @@ impl DefUse {\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n+                | NonMutatingUseContext::PlaceMention\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,"}, {"sha": "b3a3a25ebe863f23e9badd8ba887df91c4ba233c", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -752,6 +752,7 @@ impl Visitor<'_> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::PlaceMention)\n             | NonUse(_) => {}\n \n             // These could be propagated with a smarter analysis or just some careful thinking about"}, {"sha": "6f5d54bcf87e418a90e66764dce883bbf4e67c2a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -2070,6 +2070,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 }\n                 visit::walk_ty(self, ty)\n             }\n+\n+            // A type may have an expression as a const generic argument.\n+            // We do not want to recurse into those.\n+            fn visit_expr(&mut self, _: &'a Expr) {}\n         }\n \n         let impl_self = self"}, {"sha": "18f25aec5feee85515806213714d6389b2487b4d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -101,6 +101,7 @@\n #![feature(array_into_iter_constructors)]\n #![feature(array_methods)]\n #![feature(array_windows)]\n+#![feature(ascii_char)]\n #![feature(assert_matches)]\n #![feature(async_iterator)]\n #![feature(coerce_unsized)]"}, {"sha": "b9ef76c109abf8656b9c1315f174f8640f0cdb81", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -2526,6 +2526,15 @@ impl<T: fmt::Display + ?Sized> ToString for T {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+impl ToString for core::ascii::Char {\n+    #[inline]\n+    fn to_string(&self) -> String {\n+        self.as_str().to_owned()\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"char_to_string_specialization\", since = \"1.46.0\")]\n impl ToString for char {"}, {"sha": "6750d7c071144f7616236bd4905dc75ce1820d12", "filename": "library/core/src/array/ascii.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Farray%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Farray%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fascii.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,34 @@\n+use crate::ascii;\n+\n+#[cfg(not(test))]\n+impl<const N: usize> [u8; N] {\n+    /// Converts this array of bytes into a array of ASCII characters,\n+    /// or returns `None` if any of the characters is non-ASCII.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char; N]> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that it's ASCII\n+            Some(unsafe { self.as_ascii_unchecked() })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Converts this array of bytes into a array of ASCII characters,\n+    /// without checking whether they're valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Every byte in the array must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char; N] {\n+        let byte_ptr: *const [u8; N] = self;\n+        let ascii_ptr = byte_ptr as *const [ascii::Char; N];\n+        // SAFETY: The caller promised all the bytes are ASCII\n+        unsafe { &*ascii_ptr }\n+    }\n+}"}, {"sha": "bdb4c975909e0664ec4fcc5938b56338efe80480", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -17,6 +17,7 @@ use crate::ops::{\n };\n use crate::slice::{Iter, IterMut};\n \n+mod ascii;\n mod drain;\n mod equality;\n mod iter;"}, {"sha": "7fd14a7e1eae8cd73f8d1a5942170aeb485c969d", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -14,6 +14,10 @@ use crate::fmt;\n use crate::iter::FusedIterator;\n use crate::num::NonZeroUsize;\n \n+mod ascii_char;\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+pub use ascii_char::AsciiChar as Char;\n+\n /// An iterator over the escaped version of a byte.\n ///\n /// This `struct` is created by the [`escape_default`] function. See its"}, {"sha": "f093a0990d1a90ff1e93d7e74dfceb12d38ef36c", "filename": "library/core/src/ascii/ascii_char.rs", "status": "added", "additions": 565, "deletions": 0, "changes": 565, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,565 @@\n+//! This uses the name `AsciiChar`, even though it's not exposed that way right now,\n+//! because it avoids a whole bunch of \"are you sure you didn't mean `char`?\"\n+//! suggestions from rustc if you get anything slightly wrong in here, and overall\n+//! helps with clarity as we're also referring to `char` intentionally in here.\n+\n+use crate::fmt;\n+use crate::mem::transmute;\n+\n+/// One of the 128 Unicode characters from U+0000 through U+007F,\n+/// often known as the [ASCII] subset.\n+///\n+/// Officially, this is the first [block] in Unicode, _Basic Latin_.\n+/// For details, see the [*C0 Controls and Basic Latin*][chart] code chart.\n+///\n+/// This block was based on older 7-bit character code standards such as\n+/// ANSI X3.4-1977, ISO 646-1973, and [NIST FIPS 1-2].\n+///\n+/// # When to use this\n+///\n+/// The main advantage of this subset is that it's always valid UTF-8.  As such,\n+/// the `&[ascii::Char]` -> `&str` conversion function (as well as other related\n+/// ones) are O(1): *no* runtime checks are needed.\n+///\n+/// If you're consuming strings, you should usually handle Unicode and thus\n+/// accept `str`s, not limit yourself to `ascii::Char`s.\n+///\n+/// However, certain formats are intentionally designed to produce ASCII-only\n+/// output in order to be 8-bit-clean.  In those cases, it can be simpler and\n+/// faster to generate `ascii::Char`s instead of dealing with the variable width\n+/// properties of general UTF-8 encoded strings, while still allowing the result\n+/// to be used freely with other Rust things that deal in general `str`s.\n+///\n+/// For example, a UUID library might offer a way to produce the string\n+/// representation of a UUID as an `[ascii::Char; 36]` to avoid memory\n+/// allocation yet still allow it to be used as UTF-8 via `as_str` without\n+/// paying for validation (or needing `unsafe` code) the way it would if it\n+/// were provided as a `[u8; 36]`.\n+///\n+/// # Layout\n+///\n+/// This type is guaranteed to have a size and alignment of 1 byte.\n+///\n+/// # Names\n+///\n+/// The variants on this type are [Unicode names][NamesList] of the characters\n+/// in upper camel case, with a few tweaks:\n+/// - For `<control>` characters, the primary alias name is used.\n+/// - `LATIN` is dropped, as this block has no non-latin letters.\n+/// - `LETTER` is dropped, as `CAPITAL`/`SMALL` suffices in this block.\n+/// - `DIGIT`s use a single digit rather than writing out `ZERO`, `ONE`, etc.\n+///\n+/// [ASCII]: https://www.unicode.org/glossary/index.html#ASCII\n+/// [block]: https://www.unicode.org/glossary/index.html#block\n+/// [chart]: https://www.unicode.org/charts/PDF/U0000.pdf\n+/// [NIST FIPS 1-2]: https://nvlpubs.nist.gov/nistpubs/Legacy/FIPS/fipspub1-2-1977.pdf\n+/// [NamesList]: https://www.unicode.org/Public/15.0.0/ucd/NamesList.txt\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+#[repr(u8)]\n+pub enum AsciiChar {\n+    /// U+0000\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Null = 0,\n+    /// U+0001\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    StartOfHeading = 1,\n+    /// U+0002\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    StartOfText = 2,\n+    /// U+0003\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfText = 3,\n+    /// U+0004\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfTransmission = 4,\n+    /// U+0005\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Enquiry = 5,\n+    /// U+0006\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Acknowledge = 6,\n+    /// U+0007\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Bell = 7,\n+    /// U+0008\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Backspace = 8,\n+    /// U+0009\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CharacterTabulation = 9,\n+    /// U+000A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LineFeed = 10,\n+    /// U+000B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LineTabulation = 11,\n+    /// U+000C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    FormFeed = 12,\n+    /// U+000D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CarriageReturn = 13,\n+    /// U+000E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ShiftOut = 14,\n+    /// U+000F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ShiftIn = 15,\n+    /// U+0010\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DataLinkEscape = 16,\n+    /// U+0011\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlOne = 17,\n+    /// U+0012\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlTwo = 18,\n+    /// U+0013\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlThree = 19,\n+    /// U+0014\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlFour = 20,\n+    /// U+0015\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    NegativeAcknowledge = 21,\n+    /// U+0016\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SynchronousIdle = 22,\n+    /// U+0017\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfTransmissionBlock = 23,\n+    /// U+0018\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Cancel = 24,\n+    /// U+0019\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfMedium = 25,\n+    /// U+001A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Substitute = 26,\n+    /// U+001B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Escape = 27,\n+    /// U+001C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorFour = 28,\n+    /// U+001D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorThree = 29,\n+    /// U+001E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorTwo = 30,\n+    /// U+001F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorOne = 31,\n+    /// U+0020\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Space = 32,\n+    /// U+0021\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ExclamationMark = 33,\n+    /// U+0022\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    QuotationMark = 34,\n+    /// U+0023\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    NumberSign = 35,\n+    /// U+0024\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DollarSign = 36,\n+    /// U+0025\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    PercentSign = 37,\n+    /// U+0026\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Ampersand = 38,\n+    /// U+0027\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Apostrophe = 39,\n+    /// U+0028\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftParenthesis = 40,\n+    /// U+0029\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightParenthesis = 41,\n+    /// U+002A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Asterisk = 42,\n+    /// U+002B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    PlusSign = 43,\n+    /// U+002C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Comma = 44,\n+    /// U+002D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    HyphenMinus = 45,\n+    /// U+002E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    FullStop = 46,\n+    /// U+002F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Solidus = 47,\n+    /// U+0030\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit0 = 48,\n+    /// U+0031\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit1 = 49,\n+    /// U+0032\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit2 = 50,\n+    /// U+0033\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit3 = 51,\n+    /// U+0034\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit4 = 52,\n+    /// U+0035\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit5 = 53,\n+    /// U+0036\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit6 = 54,\n+    /// U+0037\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit7 = 55,\n+    /// U+0038\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit8 = 56,\n+    /// U+0039\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit9 = 57,\n+    /// U+003A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Colon = 58,\n+    /// U+003B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Semicolon = 59,\n+    /// U+003C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LessThanSign = 60,\n+    /// U+003D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EqualsSign = 61,\n+    /// U+003E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    GreaterThanSign = 62,\n+    /// U+003F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    QuestionMark = 63,\n+    /// U+0040\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CommercialAt = 64,\n+    /// U+0041\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalA = 65,\n+    /// U+0042\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalB = 66,\n+    /// U+0043\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalC = 67,\n+    /// U+0044\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalD = 68,\n+    /// U+0045\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalE = 69,\n+    /// U+0046\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalF = 70,\n+    /// U+0047\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalG = 71,\n+    /// U+0048\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalH = 72,\n+    /// U+0049\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalI = 73,\n+    /// U+004A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalJ = 74,\n+    /// U+004B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalK = 75,\n+    /// U+004C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalL = 76,\n+    /// U+004D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalM = 77,\n+    /// U+004E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalN = 78,\n+    /// U+004F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalO = 79,\n+    /// U+0050\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalP = 80,\n+    /// U+0051\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalQ = 81,\n+    /// U+0052\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalR = 82,\n+    /// U+0053\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalS = 83,\n+    /// U+0054\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalT = 84,\n+    /// U+0055\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalU = 85,\n+    /// U+0056\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalV = 86,\n+    /// U+0057\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalW = 87,\n+    /// U+0058\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalX = 88,\n+    /// U+0059\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalY = 89,\n+    /// U+005A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalZ = 90,\n+    /// U+005B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftSquareBracket = 91,\n+    /// U+005C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ReverseSolidus = 92,\n+    /// U+005D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightSquareBracket = 93,\n+    /// U+005E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CircumflexAccent = 94,\n+    /// U+005F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LowLine = 95,\n+    /// U+0060\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    GraveAccent = 96,\n+    /// U+0061\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallA = 97,\n+    /// U+0062\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallB = 98,\n+    /// U+0063\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallC = 99,\n+    /// U+0064\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallD = 100,\n+    /// U+0065\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallE = 101,\n+    /// U+0066\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallF = 102,\n+    /// U+0067\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallG = 103,\n+    /// U+0068\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallH = 104,\n+    /// U+0069\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallI = 105,\n+    /// U+006A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallJ = 106,\n+    /// U+006B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallK = 107,\n+    /// U+006C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallL = 108,\n+    /// U+006D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallM = 109,\n+    /// U+006E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallN = 110,\n+    /// U+006F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallO = 111,\n+    /// U+0070\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallP = 112,\n+    /// U+0071\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallQ = 113,\n+    /// U+0072\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallR = 114,\n+    /// U+0073\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallS = 115,\n+    /// U+0074\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallT = 116,\n+    /// U+0075\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallU = 117,\n+    /// U+0076\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallV = 118,\n+    /// U+0077\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallW = 119,\n+    /// U+0078\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallX = 120,\n+    /// U+0079\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallY = 121,\n+    /// U+007A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallZ = 122,\n+    /// U+007B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftCurlyBracket = 123,\n+    /// U+007C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    VerticalLine = 124,\n+    /// U+007D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightCurlyBracket = 125,\n+    /// U+007E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Tilde = 126,\n+    /// U+007F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Delete = 127,\n+}\n+\n+impl AsciiChar {\n+    /// Creates an ascii character from the byte `b`,\n+    /// or returns `None` if it's too large.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn from_u8(b: u8) -> Option<Self> {\n+        if b <= 127 {\n+            // SAFETY: Just checked that `b` is in-range\n+            Some(unsafe { Self::from_u8_unchecked(b) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Creates an ASCII character from the byte `b`,\n+    /// without checking whether it's valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `b` must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const unsafe fn from_u8_unchecked(b: u8) -> Self {\n+        // SAFETY: Our safety precondition is that `b` is in-range.\n+        unsafe { transmute(b) }\n+    }\n+\n+    /// When passed the *number* `0`, `1`, \u2026, `9`, returns the *character*\n+    /// `'0'`, `'1'`, \u2026, `'9'` respectively.\n+    ///\n+    /// If `d >= 10`, returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn digit(d: u8) -> Option<Self> {\n+        if d < 10 {\n+            // SAFETY: Just checked it's in-range.\n+            Some(unsafe { Self::digit_unchecked(d) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// When passed the *number* `0`, `1`, \u2026, `9`, returns the *character*\n+    /// `'0'`, `'1'`, \u2026, `'9'` respectively, without checking that it's in-range.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This is immediate UB if called with `d > 64`.\n+    ///\n+    /// If `d >= 10` and `d <= 64`, this is allowed to return any value or panic.\n+    /// Notably, it should not be expected to return hex digits, or any other\n+    /// reasonable extension of the decimal digits.\n+    ///\n+    /// (This lose safety condition is intended to simplify soundness proofs\n+    /// when writing code using this method, since the implementation doesn't\n+    /// need something really specific, not to make those other arguments do\n+    /// something useful. It might be tightened before stabilization.)\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const unsafe fn digit_unchecked(d: u8) -> Self {\n+        debug_assert!(d < 10);\n+\n+        // SAFETY: `'0'` through `'9'` are U+00030 through U+0039,\n+        // so because `d` must be 64 or less the addition can return at most\n+        // 112 (0x70), which doesn't overflow and is within the ASCII range.\n+        unsafe {\n+            let byte = b'0'.unchecked_add(d);\n+            Self::from_u8_unchecked(byte)\n+        }\n+    }\n+\n+    /// Gets this ASCII character as a byte.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_u8(self) -> u8 {\n+        self as u8\n+    }\n+\n+    /// Gets this ASCII character as a `char` Unicode Scalar Value.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_char(self) -> char {\n+        self as u8 as char\n+    }\n+\n+    /// Views this ASCII character as a one-code-unit UTF-8 `str`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_str(&self) -> &str {\n+        crate::slice::from_ref(self).as_str()\n+    }\n+}\n+\n+impl [AsciiChar] {\n+    /// Views this slice of ASCII characters as a UTF-8 `str`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_str(&self) -> &str {\n+        let ascii_ptr: *const Self = self;\n+        let str_ptr = ascii_ptr as *const str;\n+        // SAFETY: Each ASCII codepoint in UTF-8 is encoded as one single-byte\n+        // code unit having the same value as the ASCII byte.\n+        unsafe { &*str_ptr }\n+    }\n+\n+    /// Views this slice of ASCII characters as a slice of `u8` bytes.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        self.as_str().as_bytes()\n+    }\n+}\n+\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+impl fmt::Display for AsciiChar {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        <str as fmt::Display>::fmt(self.as_str(), f)\n+    }\n+}"}, {"sha": "1dfa9c34db14c45ac474d99cbbd65a874ba2ec7a", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -1,5 +1,6 @@\n //! impl char {}\n \n+use crate::ascii;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -1101,6 +1102,24 @@ impl char {\n         *self as u32 <= 0x7F\n     }\n \n+    /// Returns `Some` if the value is within the ASCII range,\n+    /// or `None` if it's not.\n+    ///\n+    /// This is preferred to [`Self::is_ascii`] when you're passing the value\n+    /// along to something else that can take [`ascii::Char`] rather than\n+    /// needing to check again for itself whether the value is in ASCII.\n+    #[must_use]\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_ascii(&self) -> Option<ascii::Char> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that this is ASCII.\n+            Some(unsafe { ascii::Char::from_u8_unchecked(*self as u8) })\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Makes a copy of the value in its ASCII upper case equivalent.\n     ///\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',"}, {"sha": "08444421dca08c2acef25eb161a25e6436ab6d1f", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -472,7 +472,16 @@ impl u8 {\n     #[rustc_const_stable(feature = \"const_u8_is_ascii\", since = \"1.43.0\")]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n-        *self & 128 == 0\n+        *self <= 127\n+    }\n+\n+    /// If the value of this byte is within the ASCII range, returns it as an\n+    /// [ASCII character](ascii::Char).  Otherwise, returns `None`.\n+    #[must_use]\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_ascii(&self) -> Option<ascii::Char> {\n+        ascii::Char::from_u8(*self)\n     }\n \n     /// Makes a copy of the value in its ASCII upper case equivalent."}, {"sha": "74a325b89d442a1f3b614216e38541edeaa188ea", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -713,6 +713,32 @@ macro_rules! nonzero_signed_operations {\n                     unsafe { $Uty::new_unchecked(self.get().unsigned_abs()) }\n                 }\n \n+                /// Returns `true` if `self` is positive and `false` if the\n+                /// number is negative.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                ///\n+                /// assert!(pos_five.is_positive());\n+                /// assert!(!neg_five.is_positive());\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[must_use]\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                pub const fn is_positive(self) -> bool {\n+                    self.get().is_positive()\n+                }\n+\n                 /// Returns `true` if `self` is negative and `false` if the\n                 /// number is positive.\n                 ///"}, {"sha": "7bae6692ad4ed0f6f7a1e60bb560dd21636c0482", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -16,6 +16,36 @@ impl [u8] {\n         is_ascii(self)\n     }\n \n+    /// If this slice [`is_ascii`](Self::is_ascii), returns it as a slice of\n+    /// [ASCII characters](`ascii::Char`), otherwise returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char]> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that it's ASCII\n+            Some(unsafe { self.as_ascii_unchecked() })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Converts this slice of bytes into a slice of ASCII characters,\n+    /// without checking whether they're valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Every byte in the slice must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char] {\n+        let byte_ptr: *const [u8] = self;\n+        let ascii_ptr = byte_ptr as *const [ascii::Char];\n+        // SAFETY: The caller promised all the bytes are ASCII\n+        unsafe { &*ascii_ptr }\n+    }\n+\n     /// Checks that two slices are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,"}, {"sha": "66fa9cf6f64c065e4b97d89ba74621913997fa1b", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -16,6 +16,7 @@ mod validations;\n use self::pattern::Pattern;\n use self::pattern::{DoubleEndedSearcher, ReverseSearcher, Searcher};\n \n+use crate::ascii;\n use crate::char::{self, EscapeDebugExtArgs};\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n@@ -2366,6 +2367,16 @@ impl str {\n         self.as_bytes().is_ascii()\n     }\n \n+    /// If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\n+    /// of [ASCII characters](`ascii::Char`), otherwise returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char]> {\n+        // Like in `is_ascii`, we can work on the bytes directly.\n+        self.as_bytes().as_ascii()\n+    }\n+\n     /// Checks that two strings are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,"}, {"sha": "b18ab50de123ecd01f09d44bdf8268754c824072", "filename": "library/std/src/ascii.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fstd%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fstd%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fascii.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -16,6 +16,9 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ascii::{escape_default, EscapeDefault};\n \n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+pub use core::ascii::Char;\n+\n /// Extension methods for ASCII-subset only operations.\n ///\n /// Be aware that operations on seemingly non-ASCII characters can sometimes"}, {"sha": "5356ee277cc2cfa309fd7e02c2b84a1b4cb5c19a", "filename": "library/sysroot/Cargo.toml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fsysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fsysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fsysroot%2FCargo.toml?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,27 @@\n+[package]\n+name = \"sysroot\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+# this is a dummy crate to ensure that all required crates appear in the sysroot\n+[dependencies]\n+proc_macro = { path = \"../proc_macro\" }\n+std = { path = \"../std\" }\n+test = { path = \"../test\" }\n+\n+# Forward features to the `std` crate as necessary\n+[features]\n+default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n+backtrace = [\"std/backtrace\"]\n+compiler-builtins-c = [\"std/compiler-builtins-c\"]\n+compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n+compiler-builtins-no-asm = [\"std/compiler-builtins-no-asm\"]\n+compiler-builtins-mangled-names = [\"std/compiler-builtins-mangled-names\"]\n+llvm-libunwind = [\"std/llvm-libunwind\"]\n+system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n+panic-unwind = [\"std/panic_unwind\"]\n+panic_immediate_abort = [\"std/panic_immediate_abort\"]\n+profiler = [\"std/profiler\"]\n+std_detect_file_io = [\"std/std_detect_file_io\"]\n+std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]\n+std_detect_env_override = [\"std/std_detect_env_override\"]"}, {"sha": "71ceb580a40c34f641ed9256e5ae5176fa5d5b80", "filename": "library/sysroot/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fsysroot%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Fsysroot%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fsysroot%2Fsrc%2Flib.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1 @@\n+// This is intentionally empty since this crate is only used to depend on other library crates."}, {"sha": "91a1abde059f693711807e8216eec9a8d7d6b5cb", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -12,23 +12,3 @@ std = { path = \"../std\" }\n core = { path = \"../core\" }\n panic_unwind = { path = \"../panic_unwind\" }\n panic_abort = { path = \"../panic_abort\" }\n-\n-# not actually used but needed to always have proc_macro in the sysroot\n-proc_macro = { path = \"../proc_macro\" }\n-\n-# Forward features to the `std` crate as necessary\n-[features]\n-default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n-backtrace = [\"std/backtrace\"]\n-compiler-builtins-c = [\"std/compiler-builtins-c\"]\n-compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n-compiler-builtins-no-asm = [\"std/compiler-builtins-no-asm\"]\n-compiler-builtins-mangled-names = [\"std/compiler-builtins-mangled-names\"]\n-llvm-libunwind = [\"std/llvm-libunwind\"]\n-system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n-panic-unwind = [\"std/panic_unwind\"]\n-panic_immediate_abort = [\"std/panic_immediate_abort\"]\n-profiler = [\"std/profiler\"]\n-std_detect_file_io = [\"std/std_detect_file_io\"]\n-std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]\n-std_detect_env_override = [\"std/std_detect_env_override\"]"}, {"sha": "9f5bf24367eaa9fa2399076a5526adbe72fdcc80", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -11,7 +11,7 @@ use crate::{\n \n pub struct JunitFormatter<T> {\n     out: OutputLocation<T>,\n-    results: Vec<(TestDesc, TestResult, Duration)>,\n+    results: Vec<(TestDesc, TestResult, Duration, Vec<u8>)>,\n }\n \n impl<T: Write> JunitFormatter<T> {\n@@ -26,6 +26,18 @@ impl<T: Write> JunitFormatter<T> {\n     }\n }\n \n+fn str_to_cdata(s: &str) -> String {\n+    // Drop the stdout in a cdata. Unfortunately, you can't put either of `]]>` or\n+    // `<?'` in a CDATA block, so the escaping gets a little weird.\n+    let escaped_output = s.replace(\"]]>\", \"]]]]><![CDATA[>\");\n+    let escaped_output = escaped_output.replace(\"<?\", \"<]]><![CDATA[?\");\n+    // We also smuggle newlines as &#xa so as to keep all the output on one line\n+    let escaped_output = escaped_output.replace(\"\\n\", \"]]>&#xA;<![CDATA[\");\n+    // Prune empty CDATA blocks resulting from any escaping\n+    let escaped_output = escaped_output.replace(\"<![CDATA[]]>\", \"\");\n+    format!(\"<![CDATA[{}]]>\", escaped_output)\n+}\n+\n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_discovery_start(&mut self) -> io::Result<()> {\n         Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n@@ -63,14 +75,14 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         desc: &TestDesc,\n         result: &TestResult,\n         exec_time: Option<&time::TestExecTime>,\n-        _stdout: &[u8],\n+        stdout: &[u8],\n         _state: &ConsoleTestState,\n     ) -> io::Result<()> {\n         // Because the testsuite node holds some of the information as attributes, we can't write it\n         // until all of the tests have finished. Instead of writing every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n         let duration = exec_time.map(|t| t.0).unwrap_or_default();\n-        self.results.push((desc.clone(), result.clone(), duration));\n+        self.results.push((desc.clone(), result.clone(), duration, stdout.to_vec()));\n         Ok(())\n     }\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n@@ -85,7 +97,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::take(&mut self.results) {\n+        for (desc, result, duration, stdout) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n@@ -98,6 +110,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -110,6 +127,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -136,11 +158,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 TestResult::TrOk => {\n                     self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n-                         name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n+                         name=\\\"{}\\\" time=\\\"{}\\\"\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n+                    if stdout.is_empty() || !state.options.display_output {\n+                        self.write_message(\"/>\")?;\n+                    } else {\n+                        self.write_message(\"><system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                        self.write_message(\"</testcase>\")?;\n+                    }\n                 }\n             }\n         }"}, {"sha": "956b82385f6f5344a5f7a8c8654ac76edd3d6dee", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -79,7 +79,7 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\").path(\"library\")\n+        run.all_krates(\"sysroot\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "0d9fd56b03814afe623b9bdb08d8ceb79e355ad8", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -81,7 +81,7 @@ macro_rules! clean_crate_tree {\n \n clean_crate_tree! {\n     Rustc, Mode::Rustc, \"rustc-main\";\n-    Std, Mode::Std, \"test\";\n+    Std, Mode::Std, \"sysroot\";\n }\n \n fn clean_default(build: &Build, all: bool) {"}, {"sha": "966ae00fa1d866e915a6216f6f2b50b229ea5876", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -56,7 +56,7 @@ impl Step for Std {\n         // When downloading stage1, the standard library has already been copied to the sysroot, so\n         // there's no need to rebuild it.\n         let builder = run.builder;\n-        run.crate_or_deps(\"test\")\n+        run.crate_or_deps(\"sysroot\")\n             .path(\"library\")\n             .lazy_default_condition(Box::new(|| !builder.download_rustc()))\n     }\n@@ -364,7 +364,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n             .arg(\"--features\")\n             .arg(features)\n             .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"library/test/Cargo.toml\"));\n+            .arg(builder.src.join(\"library/sysroot/Cargo.toml\"));\n \n         // Help the libc crate compile by assisting it in finding various\n         // sysroot native libraries."}, {"sha": "ab7f7350d5f4dfdeb24b3b21dd08e54b41b41400", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -976,6 +976,7 @@ impl Step for PlainSourceTarball {\n             \"config.example.toml\",\n             \"Cargo.toml\",\n             \"Cargo.lock\",\n+            \".gitmodules\",\n         ];\n         let src_dirs = [\"src\", \"compiler\", \"library\", \"tests\"];\n "}, {"sha": "8f5d9bb66e1034fc094badd09725a9ca386587c9", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -438,7 +438,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"test\").path(\"library\").default_condition(builder.config.docs)\n+        run.all_krates(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "cfccb51662785f9bfa7f28d083edc8b878863f77", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -2145,7 +2145,7 @@ impl Step for Crate {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.crate_or_deps(\"test\")\n+        run.crate_or_deps(\"sysroot\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "4167becf5e9a96298db184c347f655563f24dbaf", "filename": "tests/codegen/ascii-char.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fcodegen%2Fascii-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fcodegen%2Fascii-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fascii-char.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags: -C opt-level=1\n+// ignore-debug (the extra assertions get in the way)\n+\n+#![crate_type = \"lib\"]\n+#![feature(ascii_char)]\n+\n+use std::ascii::Char as AsciiChar;\n+\n+// CHECK-LABEL: i8 @unwrap_digit_from_remainder(i32\n+#[no_mangle]\n+pub fn unwrap_digit_from_remainder(v: u32) -> AsciiChar {\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+\n+    // CHECK: %[[R:.+]] = urem i32 %v, 10\n+    // CHECK-NEXT: %[[T:.+]] = trunc i32 %[[R]] to i8\n+    // CHECK-NEXT: %[[D:.+]] = or i8 %[[T]], 48\n+    // CHECK-NEXT: ret i8 %[[D]]\n+\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+    AsciiChar::digit((v % 10) as u8).unwrap()\n+}\n+\n+// CHECK-LABEL: i8 @unwrap_from_masked(i8\n+#[no_mangle]\n+pub fn unwrap_from_masked(b: u8) -> AsciiChar {\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+\n+    // CHECK: %[[M:.+]] = and i8 %b, 127\n+    // CHECK-NEXT: ret i8 %[[M]]\n+\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+    AsciiChar::from_u8(b & 0x7f).unwrap()\n+}"}, {"sha": "761c074ed94508e09b761fac4d3cf5d1f6a0d975", "filename": "tests/mir-opt/dead-store-elimination/place_mention.main.DeadStoreElimination.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `main` before DeadStoreElimination\n++ // MIR for `main` after DeadStoreElimination\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/place_mention.rs:+0:11: +0:11\n+      let mut _1: (&str, &str);            // in scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          _1 = (const \"Hello\", const \"World\"); // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:19: 8:26\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:28: 8:35\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          PlaceMention(_1);                // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          StorageDead(_1);                 // scope 0 at $DIR/place_mention.rs:+3:36: +3:37\n+          _0 = const ();                   // scope 0 at $DIR/place_mention.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/place_mention.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "59dc74454a40218b8c7925374832969404f7ba98", "filename": "tests/mir-opt/dead-store-elimination/place_mention.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,9 @@\n+// unit-test: DeadStoreElimination\n+// compile-flags: -Zmir-keep-place-mention\n+\n+// EMIT_MIR place_mention.main.DeadStoreElimination.diff\n+fn main() {\n+    // Verify that we account for the `PlaceMention` statement as a use of the tuple,\n+    // and don't remove it as a dead store.\n+    let (_, _) = (\"Hello\", \"World\");\n+}"}, {"sha": "d97cafccf1fd46163e53487af6f93dbc5f1c9d17", "filename": "tests/run-make/libtest-junit/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2FMakefile?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,19 @@\n+# ignore-cross-compile\n+include ../tools.mk\n+\n+# Test expected libtest's junit output\n+\n+OUTPUT_FILE_DEFAULT := $(TMPDIR)/libtest-junit-output-default.xml\n+OUTPUT_FILE_STDOUT_SUCCESS := $(TMPDIR)/libtest-junit-output-stdout-success.xml\n+\n+all: f.rs validate_junit.py output-default.xml output-stdout-success.xml\n+\t$(RUSTC) --test f.rs\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit > $(OUTPUT_FILE_DEFAULT) || true\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit --show-output > $(OUTPUT_FILE_STDOUT_SUCCESS) || true\n+\n+\tcat $(OUTPUT_FILE_DEFAULT) | \"$(PYTHON)\" validate_junit.py\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | \"$(PYTHON)\" validate_junit.py\n+\n+\t# Normalize the actual output and compare to expected output file\n+\tcat $(OUTPUT_FILE_DEFAULT) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-default.xml -\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-stdout-success.xml -"}, {"sha": "d360d77317d78543451ababb0f5ff3297883b14e", "filename": "tests/run-make/libtest-junit/f.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Ff.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,23 @@\n+#[test]\n+fn a() {\n+    println!(\"print from successful test\");\n+    // Should pass\n+}\n+\n+#[test]\n+fn b() {\n+    println!(\"print from failing test\");\n+    assert!(false);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn c() {\n+    assert!(false);\n+}\n+\n+#[test]\n+#[ignore = \"msg\"]\n+fn d() {\n+    assert!(false);\n+}"}, {"sha": "d59e07b8ad89db255369254be0586328ddd0ce24", "filename": "tests/run-make/libtest-junit/output-default.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"/><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"/><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "0c300611e1f76c1fd71957f51c4f24af77b636bb", "filename": "tests/run-make/libtest-junit/output-stdout-success.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"><system-out><![CDATA[print from successful test]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"><system-out><![CDATA[thread 'c' panicked at 'assertion failed: false', f.rs:16:5]]>&#xA;<![CDATA[]]></system-out></testcase><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "47a8e70ccc38c522fceecd99c899d0a875f6fa7f", "filename": "tests/run-make/libtest-junit/validate_junit.py", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env python\n+\n+import sys\n+import xml.etree.ElementTree as ET\n+\n+# Try to decode line in order to ensure it is a valid XML document\n+for line in sys.stdin:\n+    try:\n+        ET.fromstring(line)\n+    except ET.ParseError as pe:\n+        print(\"Invalid xml: %r\" % line)\n+        raise"}, {"sha": "cd1607608a6e96d89e1453744b9a65e3ff805409", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -10,6 +10,7 @@ impl<const N: usize> Trait<N> for () {\n pub const fn foo<const N: usize>() where (): Trait<N> {\n     let bar = [(); <()>::Assoc];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n trait Trait2<const N: usize> {\n@@ -24,6 +25,7 @@ impl<const N: usize> Trait2<N> for () {\n pub const fn foo2<const N: usize>() where (): Trait2<N> {\n     let bar2 = [(); <()>::Assoc2];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "e532f27a10da9af028960f7f2e6d3b971fed84b7", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -7,12 +7,28 @@ LL |     let bar = [(); <()>::Assoc];\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/sneaky-array-repeat-expr.rs:25:21\n+  --> $DIR/sneaky-array-repeat-expr.rs:11:15\n+   |\n+LL |     let bar = [(); <()>::Assoc];\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:21\n    |\n LL |     let bar2 = [(); <()>::Assoc2];\n    |                     ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:16\n+   |\n+LL |     let bar2 = [(); <()>::Assoc2];\n+   |                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "d42347e136e1c5385076a4adc2858b77adc3ad58", "filename": "tests/ui/consts/issue-50439.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconsts%2Fissue-50439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconsts%2Fissue-50439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-50439.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -22,7 +22,9 @@ impl<T: Sized> PinDropInternal for Bears<T> {\n     where\n         Self: ReflectDrop,\n     {\n-        let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize]; //~ ERROR constant expression depends on a generic parameter\n+        let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize];\n+        //~^ ERROR constant expression depends on a generic parameter\n+        //~| ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "7a8cd45ecc7d1c1696e19d0afc3396ac91525c2d", "filename": "tests/ui/consts/issue-50439.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconsts%2Fissue-50439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fconsts%2Fissue-50439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-50439.stderr?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -6,5 +6,13 @@ LL |         let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usi\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-50439.rs:25:17\n+   |\n+LL |         let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "4bcb645c60eef797823579238fdcd37ff319f05b", "filename": "tests/ui/self/elision/nested-item.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fself%2Felision%2Fnested-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fself%2Felision%2Fnested-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fnested-item.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for #110899.\n+// When looking for the elided lifetime for `wrap`,\n+// we must not consider the lifetimes in `bar` as candidates.\n+\n+fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &() {\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n+    //~| ERROR `self` parameter is only allowed in associated functions\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR cannot find type `Wrap` in this scope\n+    &()\n+}\n+\n+fn main() {}"}, {"sha": "752fd82332c380b25417b79a30af93cc0ec06967", "filename": "tests/ui/self/elision/nested-item.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fself%2Felision%2Fnested-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Fself%2Felision%2Fnested-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fnested-item.stderr?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,38 @@\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/nested-item.rs:5:9\n+   |\n+LL | fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &() {\n+   |         ^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/nested-item.rs:5:29\n+   |\n+LL | fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &() {\n+   |                             ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/nested-item.rs:5:46\n+   |\n+LL | fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &() {\n+   |                                              ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &'static () {\n+   |                                               +++++++\n+\n+error[E0412]: cannot find type `Wrap` in this scope\n+  --> $DIR/nested-item.rs:5:15\n+   |\n+LL | fn wrap(self: Wrap<{ fn bar(&self) {} }>) -> &() {\n+   |               ^^^^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0106, E0412.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "b8a2a0ceb58807f8e39be26950ffd30c8b3eb133", "filename": "tests/ui/typeck/repeat-expr-checks-wf.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,10 @@\n+trait Foo {\n+    const ASSOC: [u8];\n+}\n+\n+fn bar<T: Foo>() {\n+    let a = [T::ASSOC; 2];\n+    //~^ ERROR: the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+fn main() {}"}, {"sha": "a821088a4b30e073187c3a212be0bb62319e71f8", "filename": "tests/ui/typeck/repeat-expr-checks-wf.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb7a7434215dd9d4b7cc18746ad1d0e531c25325/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr?ref=eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/repeat-expr-checks-wf.rs:6:13\n+   |\n+LL |     let a = [T::ASSOC; 2];\n+   |             ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: slice and array elements must have `Sized` type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}