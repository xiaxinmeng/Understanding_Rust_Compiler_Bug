{"sha": "5cfac942018b3f8e0b384c49d6564fcff25634e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmFjOTQyMDE4YjNmOGUwYjM4NGM0OWQ2NTY0ZmNmZjI1NjM0ZTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T04:50:12Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T15:41:48Z"}, "message": "Deprecate Equiv", "tree": {"sha": "a8ff3c15e0553d35fd3a2f1c2f93cbd1038858a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ff3c15e0553d35fd3a2f1c2f93cbd1038858a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfac942018b3f8e0b384c49d6564fcff25634e6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfac942018b3f8e0b384c49d6564fcff25634e6", "html_url": "https://github.com/rust-lang/rust/commit/5cfac942018b3f8e0b384c49d6564fcff25634e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfac942018b3f8e0b384c49d6564fcff25634e6/comments", "author": null, "committer": null, "parents": [{"sha": "09707d70a48b7bb1a180f44e233dfe36b196ad46", "url": "https://api.github.com/repos/rust-lang/rust/commits/09707d70a48b7bb1a180f44e233dfe36b196ad46", "html_url": "https://github.com/rust-lang/rust/commit/09707d70a48b7bb1a180f44e233dfe36b196ad46"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "ad0a5e76176464fdcd2611adc612d7e284d76b82", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -563,6 +563,7 @@ impl<'a> Ord for MaybeOwned<'a> {\n     }\n }\n \n+#[allow(deprecated)]\n #[deprecated = \"use std::str::CowString\"]\n impl<'a, S: Str> Equiv<S> for MaybeOwned<'a> {\n     #[inline]"}, {"sha": "fbb0bb5c4ce8673cf5fa71d3d34914a65d2ce024", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -822,7 +822,8 @@ impl<H: hash::Writer> hash::Hash<H> for String {\n     }\n }\n \n-#[experimental = \"waiting on Equiv stabilization\"]\n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<'a, S: Str> Equiv<S> for String {\n     #[inline]\n     fn equiv(&self, other: &S) -> bool {"}, {"sha": "2396cf8cec67ce20d235031f3a44e8888728b2c7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -609,7 +609,8 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n #[unstable = \"waiting on Eq stability\"]\n impl<T: Eq> Eq for Vec<T> {}\n \n-#[experimental]\n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for Vec<T> {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }"}, {"sha": "df19256471ede6db1caffc05207901bdc2955564", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -240,7 +240,7 @@ pub trait PartialOrd<Sized? Rhs = Self> for Sized?: PartialEq<Rhs> {\n /// of different types. The most common use case for this relation is\n /// container types; e.g. it is often desirable to be able to use `&str`\n /// values to look up entries in a container with `String` keys.\n-#[experimental = \"Better solutions may be discovered.\"]\n+#[deprecated = \"Use overloaded core::cmp::PartialEq\"]\n pub trait Equiv<Sized? T> for Sized? {\n     /// Implement this function to decide equivalent values.\n     fn equiv(&self, other: &T) -> bool;"}, {"sha": "416bc4588b43ca03945b1fd1529d7ea36b2c04a5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -321,12 +321,16 @@ impl<T> PartialEq for *mut T {\n impl<T> Eq for *mut T {}\n \n // Equivalence for pointers\n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<T> Equiv<*mut T> for *const T {\n     fn equiv(&self, other: &*mut T) -> bool {\n         self.to_uint() == other.to_uint()\n     }\n }\n \n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<T> Equiv<*const T> for *mut T {\n     fn equiv(&self, other: &*const T) -> bool {\n         self.to_uint() == other.to_uint()"}, {"sha": "85bd6adf8b8a60b60acc6b77603e8102769fa836", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -1816,13 +1816,15 @@ impl<A, B> PartialEq<[B]> for [A] where A: PartialEq<B> {\n #[unstable = \"waiting for DST\"]\n impl<T: Eq> Eq for [T] {}\n \n-#[unstable = \"waiting for DST\"]\n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n \n-#[unstable = \"waiting for DST\"]\n+#[allow(deprecated)]\n+#[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n impl<'a,T:PartialEq, Sized? V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }"}, {"sha": "4be628f0ac3b3c757ca4af02beea1d88dc12ade6", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -1248,6 +1248,8 @@ pub mod traits {\n         }\n     }\n \n+    #[allow(deprecated)]\n+    #[deprecated = \"Use overloaded `core::cmp::PartialEq`\"]\n     impl<S: Str> Equiv<S> for str {\n         #[inline]\n         fn equiv(&self, other: &S) -> bool { eq_slice(self, other.as_slice()) }"}, {"sha": "05932db6632ffdcb7aa3d5119ff6ed8b4d2dcb56", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -96,6 +96,7 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n     }\n }\n \n+#[allow(deprecated)]\n impl<'a, T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n     fn equiv(&self, other: &V) -> bool {\n         self.as_slice() == other.as_slice()"}, {"sha": "bd07dbf5c91841ac188b653c791e5dcc29c81b70", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -425,12 +425,14 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n         table::make_hash(&self.hasher, x)\n     }\n \n+    #[allow(deprecated)]\n     fn search_equiv<'a, Sized? Q: Hash<S> + Equiv<K>>(&'a self, q: &Q)\n                     -> Option<FullBucketImm<'a, K, V>> {\n         let hash = self.make_hash(q);\n         search_hashed(&self.table, &hash, |k| q.equiv(k)).into_option()\n     }\n \n+    #[allow(deprecated)]\n     fn search_equiv_mut<'a, Sized? Q: Hash<S> + Equiv<K>>(&'a mut self, q: &Q)\n                     -> Option<FullBucketMut<'a, K, V>> {\n         let hash = self.make_hash(q);"}, {"sha": "52b54bc7f2d6dc81cde165c9a90757a869b1cbbb", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfac942018b3f8e0b384c49d6564fcff25634e6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5cfac942018b3f8e0b384c49d6564fcff25634e6", "patch": "@@ -623,6 +623,7 @@ impl fmt::Show for InternedString {\n     }\n }\n \n+#[allow(deprecated)]\n impl<'a> Equiv<&'a str> for InternedString {\n     fn equiv(&self, other: & &'a str) -> bool {\n         (*other) == self.string.as_slice()"}]}