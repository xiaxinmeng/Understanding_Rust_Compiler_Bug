{"sha": "865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTMyMGY2YTQ5YWMxMGFjYTZjNmU2ZDZmNGUzMzU4NTk2ZGQ2NGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-29T10:47:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-01T14:13:05Z"}, "message": "remove the `ins` set altogether", "tree": {"sha": "115de559cd381b248ae74b1f54f0e4641a6e9c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115de559cd381b248ae74b1f54f0e4641a6e9c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "html_url": "https://github.com/rust-lang/rust/commit/865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be0e77837a1abaf5668bd247ed683ccabb293f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/be0e77837a1abaf5668bd247ed683ccabb293f16", "html_url": "https://github.com/rust-lang/rust/commit/be0e77837a1abaf5668bd247ed683ccabb293f16"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "012846c6fa86c0a2b31f905606fbb84798bcdd23", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "patch": "@@ -261,13 +261,6 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n                     }\n                 }\n \n-                // Before each basic block, dump out the values\n-                // that are live on entry to the basic block.\n-                PassWhere::BeforeBlock(bb) => {\n-                    let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n-                    writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n-                }\n-\n                 PassWhere::BeforeLocation(location) => {\n                     let s = live_variable_set(\n                         &regular_liveness_per_location[&location],\n@@ -283,7 +276,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n                     )?;\n                 }\n \n-                PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n+                // After each basic block, dump out the values\n+                // that are live on exit from the basic block.\n+                PassWhere::AfterTerminator(bb) => {\n+                    let s = live_variable_set(&liveness.regular.outs[bb], &liveness.drop.outs[bb]);\n+                    writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n+                }\n+\n+                PassWhere::BeforeBlock(_) | PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n             }\n             Ok(())\n         },"}, {"sha": "d4b93b896de883551deb91c11e8beeada4a18508", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "patch": "@@ -56,9 +56,6 @@ pub struct LivenessResult {\n     /// Liveness mode in use when these results were computed.\n     pub mode: LivenessMode,\n \n-    /// Live variables on entry to each basic block.\n-    pub ins: IndexVec<BasicBlock, LocalSet>,\n-\n     /// Live variables on exit to each basic block. This is equal to\n     /// the union of the `ins` for each successor.\n     pub outs: IndexVec<BasicBlock, LocalSet>,\n@@ -125,11 +122,10 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>, mode: LivenessMode) -> Liveness\n         .map(|b| block(mode, b, locals))\n         .collect();\n \n-    let mut ins: IndexVec<_, _> = mir.basic_blocks()\n+    let mut outs: IndexVec<_, _> = mir.basic_blocks()\n         .indices()\n         .map(|_| LocalSet::new_empty(locals))\n         .collect();\n-    let mut outs = ins.clone();\n \n     let mut bits = LocalSet::new_empty(locals);\n \n@@ -140,28 +136,21 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>, mode: LivenessMode) -> Liveness\n     let predecessors = mir.predecessors();\n \n     while let Some(bb) = dirty_queue.pop() {\n-        // outs[b] = \u222a {ins of successors}\n-        bits.clear();\n-        for &successor in mir[bb].terminator().successors() {\n-            bits.union(&ins[successor]);\n-        }\n-        outs[bb].overwrite(&bits);\n-\n         // bits = use \u222a (bits - def)\n+        bits.overwrite(&outs[bb]);\n         def_use[bb].apply(&mut bits);\n \n-        // update bits on entry and, if they have changed, enqueue all\n-        // of our predecessors, since their inputs have now changed\n-        if ins[bb] != bits {\n-            ins[bb].overwrite(&bits);\n-\n-            for &pred_bb in &predecessors[bb] {\n+        // add `bits` to the out set for each predecessor; if those\n+        // bits were not already present, then enqueue the predecessor\n+        // as dirty.\n+        for &pred_bb in &predecessors[bb] {\n+            if outs[pred_bb].union(&bits) {\n                 dirty_queue.insert(pred_bb);\n             }\n         }\n     }\n \n-    LivenessResult { mode, ins, outs }\n+    LivenessResult { mode, outs }\n }\n \n impl LivenessResult {\n@@ -202,8 +191,6 @@ impl LivenessResult {\n             statement_defs_uses.apply(&mut bits);\n             callback(statement_location, &bits);\n         }\n-\n-        assert_eq!(bits, self.ins[block]);\n     }\n \n     fn defs_uses<'tcx, V>(&self, mir: &Mir<'tcx>, location: Location, thing: &V) -> DefsUses\n@@ -445,7 +432,6 @@ pub fn write_mir_fn<'a, 'tcx>(\n                 .collect();\n             writeln!(w, \"{} {{{}}}\", prefix, live.join(\", \"))\n         };\n-        print(w, \"   \", &result.ins)?;\n         write_basic_block(tcx, block, mir, &mut |_, _| Ok(()), w)?;\n         print(w, \"   \", &result.outs)?;\n         if block.index() + 1 != mir.basic_blocks().len() {"}, {"sha": "6472e588bc6219053a8b30881129b14eb85be6c3", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865320f6a49ac10aca6c6e6d6f4e3358596dd64a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=865320f6a49ac10aca6c6e6d6f4e3358596dd64a", "patch": "@@ -44,6 +44,9 @@ pub enum PassWhere {\n \n     /// We just dumped the given statement or terminator.\n     AfterLocation(Location),\n+\n+    /// We just dumped the terminator for a block but not the closing `}`.\n+    AfterTerminator(BasicBlock),\n }\n \n /// If the session is properly configured, dumps a human-readable\n@@ -351,6 +354,7 @@ where\n     })?;\n \n     extra_data(PassWhere::AfterLocation(current_location), w)?;\n+    extra_data(PassWhere::AfterTerminator(block), w)?;\n \n     writeln!(w, \"{}}}\", INDENT)\n }"}]}