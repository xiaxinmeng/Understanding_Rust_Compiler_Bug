{"sha": "498ad91d063f50522a619adca169f9efabc1b1aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OGFkOTFkMDYzZjUwNTIyYTYxOWFkY2ExNjlmOWVmYWJjMWIxYWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T12:07:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T12:07:16Z"}, "message": "Upgrade CodeMirror mode used to highlight the tutorial code", "tree": {"sha": "09b1d68fe3f74e99e6df03513c31b250dcfb0719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b1d68fe3f74e99e6df03513c31b250dcfb0719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498ad91d063f50522a619adca169f9efabc1b1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498ad91d063f50522a619adca169f9efabc1b1aa", "html_url": "https://github.com/rust-lang/rust/commit/498ad91d063f50522a619adca169f9efabc1b1aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498ad91d063f50522a619adca169f9efabc1b1aa/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936c933fd8b7bb71b8a7fd845f27cf50b3fa0402", "url": "https://api.github.com/repos/rust-lang/rust/commits/936c933fd8b7bb71b8a7fd845f27cf50b3fa0402", "html_url": "https://github.com/rust-lang/rust/commit/936c933fd8b7bb71b8a7fd845f27cf50b3fa0402"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "d8c9be5656807be279c1fe6ca374b37f545eb440", "filename": "doc/tutorial/index.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498ad91d063f50522a619adca169f9efabc1b1aa/doc%2Ftutorial%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/498ad91d063f50522a619adca169f9efabc1b1aa/doc%2Ftutorial%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Findex.md?ref=498ad91d063f50522a619adca169f9efabc1b1aa", "patch": "@@ -1,3 +1 @@\n # Rust language tutorial\n-\n-*(Not quite finished yet. Proceed with caution.)*"}, {"sha": "47fd7696a1d4c1c3013d16055ebbbf5ad0826a3f", "filename": "doc/tutorial/lib/codemirror-rust.js", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/498ad91d063f50522a619adca169f9efabc1b1aa/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js", "raw_url": "https://github.com/rust-lang/rust/raw/498ad91d063f50522a619adca169f9efabc1b1aa/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js?ref=498ad91d063f50522a619adca169f9efabc1b1aa", "patch": "@@ -4,12 +4,12 @@ CodeMirror.defineMode(\"rust\", function() {\n     \"if\": \"if-style\", \"while\": \"if-style\", \"else\": \"else-style\",\n     \"do\": \"else-style\", \"ret\": \"else-style\", \"fail\": \"else-style\",\n     \"break\": \"atom\", \"cont\": \"atom\", \"const\": \"let\", \"resource\": \"fn\",\n-    \"let\": \"let\", \"fn\": \"fn\", \"for\": \"for\", \"alt\": \"alt\", \"obj\": \"fn\",\n-    \"lambda\": \"fn\", \"type\": \"type\", \"tag\": \"tag\", \"mod\": \"mod\",\n+    \"let\": \"let\", \"fn\": \"fn\", \"for\": \"for\", \"alt\": \"alt\", \"iface\": \"iface\",\n+    \"impl\": \"impl\", \"type\": \"type\", \"tag\": \"tag\", \"mod\": \"mod\",\n     \"as\": \"op\", \"true\": \"atom\", \"false\": \"atom\", \"assert\": \"op\", \"check\": \"op\",\n     \"claim\": \"op\", \"native\": \"ignore\", \"unsafe\": \"ignore\", \"import\": \"else-style\",\n     \"export\": \"else-style\", \"copy\": \"op\", \"log\": \"op\", \"log_err\": \"op\",\n-    \"use\": \"op\", \"bind\": \"op\"\n+    \"use\": \"op\", \"bind\": \"op\", \"self\": \"atom\"\n   };\n   var typeKeywords = function() {\n     var keywords = {\"fn\": \"fn\", \"block\": \"fn\", \"obj\": \"obj\"};\n@@ -169,13 +169,18 @@ CodeMirror.defineMode(\"rust\", function() {\n     };\n   }\n \n+  function stat_of(comb, tag) {\n+    return cont(pushlex(\"stat\", tag), comb, poplex, block);\n+  }\n   function block(type) {\n     if (type == \"}\") return cont();\n-    if (type == \"let\") return cont(pushlex(\"stat\", \"let\"), letdef1, poplex, block);\n-    if (type == \"fn\") return cont(pushlex(\"stat\"), fndef, poplex, block);\n+    if (type == \"let\") return stat_of(letdef1, \"let\");\n+    if (type == \"fn\") return stat_of(fndef);\n     if (type == \"type\") return cont(pushlex(\"stat\"), tydef, endstatement, poplex, block);\n-    if (type == \"tag\") return cont(pushlex(\"stat\"), tagdef, poplex, block);\n-    if (type == \"mod\") return cont(pushlex(\"stat\"), mod, poplex, block);\n+    if (type == \"tag\") return stat_of(tagdef);\n+    if (type == \"mod\") return stat_of(mod);\n+    if (type == \"iface\") return stat_of(iface);\n+    if (type == \"impl\") return stat_of(impl);\n     if (type == \"open-attr\") return cont(pushlex(\"]\"), commasep(expression, \"]\"), poplex);\n     if (type == \"ignore\" || type.match(/[\\]\\);,]/)) return cont(block);\n     return pass(pushlex(\"stat\"), expression, poplex, endstatement, block);\n@@ -253,11 +258,13 @@ CodeMirror.defineMode(\"rust\", function() {\n     return pass();\n   }\n   function fndef(type) {\n+    if (content == \"@\" || content == \"~\") {cx.marked = \"keyword\"; return cont(fndef);}\n     if (type == \"name\") {cx.marked = \"def\"; return cont(fndef);}\n     if (content == \"<\") return cont(typarams, fndef);\n     if (type == \"{\") return pass(expression);\n     if (type == \"(\") return cont(pushlex(\")\"), commasep(argdef, \")\"), poplex, fndef);\n     if (type == \"->\") return cont(typecx, rtype, valcx, fndef);\n+    if (type == \";\") return cont();\n     return cont(fndef);\n   }\n   function tydef(type) {\n@@ -284,9 +291,23 @@ CodeMirror.defineMode(\"rust\", function() {\n     if (type == \"{\") return cont(pushlex(\"}\"), block, poplex);\n     return pass();\n   }\n+  function iface(type) {\n+    if (type == \"name\") {cx.marked = \"def\"; return cont(iface);}\n+    if (content == \"<\") return cont(typarams, iface);\n+    if (type == \"{\") return cont(pushlex(\"}\"), block, poplex);\n+    return pass();\n+  }\n+  function impl(type) {\n+    if (content == \"<\") return cont(typarams, impl);\n+    if (content == \"of\" || content == \"for\") {cx.marked = \"keyword\"; return cont(rtype, impl);}\n+    if (type == \"name\") {cx.marked = \"def\"; return cont(impl);}\n+    if (type == \"{\") return cont(pushlex(\"}\"), block, poplex);\n+    return pass();\n+  }\n   function typarams(type) {\n     if (content == \">\") return cont();\n     if (content == \",\") return cont(typarams);\n+    if (content == \":\") return cont(rtype, typarams);\n     return pass(rtype, typarams);\n   }\n   function argdef(type) {"}]}