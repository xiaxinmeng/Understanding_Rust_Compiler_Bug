{"sha": "cccf9e5389eaeb93566c83da266aa5df70be812c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2Y5ZTUzODllYWViOTM1NjZjODNkYTI2NmFhNWRmNzBiZTgxMmM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T11:25:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Copy str::slice -> str::unsafe::slice (and unsafe_slice)", "tree": {"sha": "9c983772c8d1001ca8eaeab9318552685293596a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c983772c8d1001ca8eaeab9318552685293596a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccf9e5389eaeb93566c83da266aa5df70be812c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccf9e5389eaeb93566c83da266aa5df70be812c", "html_url": "https://github.com/rust-lang/rust/commit/cccf9e5389eaeb93566c83da266aa5df70be812c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccf9e5389eaeb93566c83da266aa5df70be812c/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a19bafeeac4b22615dc183cab896af79c92a411", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a19bafeeac4b22615dc183cab896af79c92a411", "html_url": "https://github.com/rust-lang/rust/commit/5a19bafeeac4b22615dc183cab896af79c92a411"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "b0dbb5b1901c8e0e807960bb4723c1067a5dd283", "filename": "src/libcore/str.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cccf9e5389eaeb93566c83da266aa5df70be812c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccf9e5389eaeb93566c83da266aa5df70be812c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=cccf9e5389eaeb93566c83da266aa5df70be812c", "patch": "@@ -425,7 +425,7 @@ Failure:\n If `begin` + `len` is is greater than the byte length of the string\n */\n fn substr(s: str, begin: uint, len: uint) -> str {\n-    ret slice(s, begin, begin + len);\n+    ret unsafe::slice(s, begin, begin + len);\n }\n \n /*\n@@ -712,7 +712,7 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str {\n     if byte_len(s) == 0u {\n         ret \"\";\n     } else if starts_with(s, from) {\n-        ret to + replace(slice(s, byte_len(from), byte_len(s)), from, to);\n+        ret to + replace(unsafe::slice(s, byte_len(from), byte_len(s)), from, to);\n     } else {\n         let idx = find(s, from);\n         if idx == -1 {\n@@ -1346,7 +1346,9 @@ mod unsafe {\n    export\n       // UNSAFE\n       from_bytes,\n-      from_byte;\n+      from_byte,\n+      slice,\n+      safe_slice;\n \n    // Function: unsafe::from_bytes\n    //\n@@ -1364,6 +1366,47 @@ mod unsafe {\n    // Converts a byte to a string. Does not verify that the byte is\n    // valid UTF-8.\n    unsafe fn from_byte(u: u8) -> str { unsafe::from_bytes([u]) }\n+\n+   /*\n+   Function: slice\n+\n+   Takes a bytewise slice from a string. Returns the substring from\n+   [`begin`..`end`).\n+\n+   This function is not unicode-safe.\n+\n+   Failure:\n+\n+   - If begin is greater than end.\n+   - If end is greater than the length of the string.\n+\n+   FIXME: rename to byte_slice\n+   */\n+   unsafe fn slice(s: str, begin: uint, end: uint) -> str unsafe {\n+       // FIXME: Typestate precondition\n+       assert (begin <= end);\n+       assert (end <= byte_len(s));\n+\n+       let v: [u8] = ::unsafe::reinterpret_cast(s);\n+       let v2 = vec::slice(v, begin, end);\n+       ::unsafe::leak(v);\n+       v2 += [0u8];\n+       let s2: str = ::unsafe::reinterpret_cast(v2);\n+       ::unsafe::leak(v2);\n+       ret s2;\n+   }\n+\n+   /*\n+   Function: safe_slice\n+\n+   FIXME: rename to safe_range_byte_slice\n+   */\n+   unsafe fn safe_slice(s: str, begin: uint, end: uint) : uint::le(begin, end) -> str {\n+       // would need some magic to make this a precondition\n+       assert (end <= byte_len(s));\n+       ret slice(s, begin, end);\n+   }\n+\n }\n \n "}]}