{"sha": "0ad97c042a1ae41652a0157d0ac148e6e90db6c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDk3YzA0MmExYWU0MTY1MmEwMTU3ZDBhYzE0OGU2ZTkwZGI2YzI=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-11T22:58:46Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-12T02:20:11Z"}, "message": "librustc: Don't use Load/Store for structural values.", "tree": {"sha": "fcf745c7aaf679b6f6c5a50756b580eac63b20aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf745c7aaf679b6f6c5a50756b580eac63b20aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad97c042a1ae41652a0157d0ac148e6e90db6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad97c042a1ae41652a0157d0ac148e6e90db6c2", "html_url": "https://github.com/rust-lang/rust/commit/0ad97c042a1ae41652a0157d0ac148e6e90db6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad97c042a1ae41652a0157d0ac148e6e90db6c2/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf", "html_url": "https://github.com/rust-lang/rust/commit/5aedcb1e916711bfeb65c26b5c6210a3fb5d72bf"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "22f8107a706bf8e92b49a1521a8c724cfe33e83d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0ad97c042a1ae41652a0157d0ac148e6e90db6c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad97c042a1ae41652a0157d0ac148e6e90db6c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0ad97c042a1ae41652a0157d0ac148e6e90db6c2", "patch": "@@ -1122,7 +1122,7 @@ pub fn memcpy_ty(bcx: &Block, dst: ValueRef, src: ValueRef, t: ty::t) {\n         let llalign = llalign_of_min(ccx, llty);\n         call_memcpy(bcx, dst, src, llsz, llalign as u32);\n     } else {\n-        Store(bcx, Load(bcx, src), dst);\n+        store_ty(bcx, Load(bcx, src), dst, t);\n     }\n }\n \n@@ -1546,7 +1546,7 @@ pub fn build_return_block(fcx: &FunctionContext, ret_cx: &Block, retty: ty::t) {\n \n     let retslot = Load(ret_cx, fcx.llretslotptr.get().unwrap());\n     let retptr = Value(retslot);\n-    let retval = match retptr.get_dominating_store(ret_cx) {\n+    match retptr.get_dominating_store(ret_cx) {\n         // If there's only a single store to the ret slot, we can directly return\n         // the value that was stored and omit the store and the alloca\n         Some(s) => {\n@@ -1557,21 +1557,28 @@ pub fn build_return_block(fcx: &FunctionContext, ret_cx: &Block, retty: ty::t) {\n                 retptr.erase_from_parent();\n             }\n \n-            if ty::type_is_bool(retty) {\n+            let retval = if ty::type_is_bool(retty) {\n                 Trunc(ret_cx, retval, Type::i1(fcx.ccx))\n             } else {\n                 retval\n+            };\n+\n+            if fcx.caller_expects_out_pointer {\n+                store_ty(ret_cx, retval, get_param(fcx.llfn, 0), retty);\n+                return RetVoid(ret_cx);\n+            } else {\n+                return Ret(ret_cx, retval);\n+            }\n+        }\n+        // Otherwise, copy the return value to the ret slot\n+        None => {\n+            if fcx.caller_expects_out_pointer {\n+                memcpy_ty(ret_cx, get_param(fcx.llfn, 0), retslot, retty);\n+                return RetVoid(ret_cx);\n+            } else {\n+                return Ret(ret_cx, load_ty(ret_cx, retslot, retty));\n             }\n         }\n-        // Otherwise, load the return value from the ret slot\n-        None => load_ty(ret_cx, retslot, retty)\n-    };\n-\n-    if fcx.caller_expects_out_pointer {\n-        store_ty(ret_cx, retval, get_param(fcx.llfn, 0), retty);\n-        RetVoid(ret_cx);\n-    } else {\n-        Ret(ret_cx, retval);\n     }\n }\n "}]}