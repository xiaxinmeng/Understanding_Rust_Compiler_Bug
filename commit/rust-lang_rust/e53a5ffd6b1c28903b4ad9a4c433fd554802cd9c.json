{"sha": "e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2E1ZmZkNmIxYzI4OTAzYjRhZDlhNGM0MzNmZDU1NDgwMmNkOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-02T15:39:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-02T15:39:25Z"}, "message": "Auto merge of #54543 - GuillaumeGomez:top-level-index, r=QuietMisdreavus\n\nAdd index page argument\n\n@Mark-Simulacrum: I might need some help from you: in bootstrap, I want to add an argument (a new flag added into `rustdoc`) in order to generate the current index directly when `rustdoc` is documenting the `std` lib. However, my change in `bootstrap` didn't do it and I assume it must be moved inside the `Std` struct. But there, I don't see how to pass it to `rustdoc` through `cargo`. Did I miss anything?\n\nr? @QuietMisdreavus", "tree": {"sha": "0c5b144bed2655dd9500e57fb0c9df6bfb6b7ab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5b144bed2655dd9500e57fb0c9df6bfb6b7ab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "html_url": "https://github.com/rust-lang/rust/commit/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a3c1ee7016bbfb782f2fd8adc75b46687ef929", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a3c1ee7016bbfb782f2fd8adc75b46687ef929", "html_url": "https://github.com/rust-lang/rust/commit/87a3c1ee7016bbfb782f2fd8adc75b46687ef929"}, {"sha": "2b646059a1011dc3565a72702b45ff4c5f3800f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b646059a1011dc3565a72702b45ff4c5f3800f9", "html_url": "https://github.com/rust-lang/rust/commit/2b646059a1011dc3565a72702b45ff4c5f3800f9"}], "stats": {"total": 233, "additions": 179, "deletions": 54}, "files": [{"sha": "c7121cb03692f4403c8002e42949302944420be1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -713,7 +713,7 @@ impl<'a> Builder<'a> {\n             \"build\" => self.cargo_out(compiler, mode, target),\n \n             // This is the intended out directory for crate documentation.\n-            \"doc\" =>  self.crate_doc_out(target),\n+            \"doc\" | \"rustdoc\" =>  self.crate_doc_out(target),\n \n             _ => self.stage_out(compiler, mode),\n         };\n@@ -742,7 +742,7 @@ impl<'a> Builder<'a> {\n             _ => compile::librustc_stamp(self, cmp, target),\n         };\n \n-        if cmd == \"doc\" {\n+        if cmd == \"doc\" || cmd == \"rustdoc\" {\n             if mode == Mode::Rustc || mode == Mode::ToolRustc || mode == Mode::Codegen {\n                 // This is the intended out directory for compiler documentation.\n                 my_out = self.compiler_doc_out(target);\n@@ -882,7 +882,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n             .env(\n                 \"RUSTDOC_REAL\",\n-                if cmd == \"doc\" || (cmd == \"test\" && want_rustdoc) {\n+                if cmd == \"doc\" || cmd == \"rustdoc\" || (cmd == \"test\" && want_rustdoc) {\n                     self.rustdoc(compiler.host)\n                 } else {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")"}, {"sha": "7623ca1e27ea6cdbc691fa4b91678413f80daec5", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -405,14 +405,15 @@ impl Step for Standalone {\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n+               .arg(\"--markdown-no-toc\")\n+               .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"))\n                .arg(\"--markdown-playground-url\")\n                .arg(\"https://play.rust-lang.org/\")\n                .arg(\"-o\").arg(&out)\n                .arg(&path);\n \n             if filename == \"not_found.md\" {\n-                cmd.arg(\"--markdown-no-toc\")\n-                   .arg(\"--markdown-css\")\n+                cmd.arg(\"--markdown-css\")\n                    .arg(\"https://doc.rust-lang.org/rust.css\");\n             } else {\n                 cmd.arg(\"--markdown-css\").arg(\"rust.css\");\n@@ -480,23 +481,31 @@ impl Step for Std {\n         // will also directly handle merging.\n         let my_out = builder.crate_doc_out(target);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n+        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"doc\");\n-        compile::std_cargo(builder, &compiler, target, &mut cargo);\n+        let run_cargo_rustdoc_for = |package: &str| {\n+            let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n+            compile::std_cargo(builder, &compiler, target, &mut cargo);\n \n-        // Keep a whitelist so we do not build internal stdlib crates, these will be\n-        // build by the rustc step later if enabled.\n-        cargo.arg(\"--no-deps\");\n-        for krate in &[\"alloc\", \"core\", \"std\"] {\n-            cargo.arg(\"-p\").arg(krate);\n+            // Keep a whitelist so we do not build internal stdlib crates, these will be\n+            // build by the rustc step later if enabled.\n+            cargo.arg(\"-Z\").arg(\"unstable-options\")\n+                 .arg(\"-p\").arg(package);\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n-            t!(fs::create_dir_all(out_dir.join(krate)));\n+            t!(fs::create_dir_all(out_dir.join(package)));\n+            cargo.arg(\"--\")\n+                 .arg(\"--markdown-css\").arg(\"rust.css\")\n+                 .arg(\"--markdown-no-toc\")\n+                 .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n+\n+            builder.run(&mut cargo);\n+            builder.cp_r(&my_out, &out);\n+        };\n+        for krate in &[\"alloc\", \"core\", \"std\"] {\n+            run_cargo_rustdoc_for(krate);\n         }\n-\n-        builder.run(&mut cargo);\n-        builder.cp_r(&my_out, &out);\n     }\n }\n "}, {"sha": "43cdab27e9daee3d159cb77b270386dffbfc9ffd", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -197,6 +197,22 @@ issue][issue-include].\n [unstable-include]: ../unstable-book/language-features/external-doc.html\n [issue-include]: https://github.com/rust-lang/rust/issues/44732\n \n+### Add aliases for an item in documentation search\n+\n+This feature allows you to add alias(es) to an item when using the `rustdoc` search through the\n+`doc(alias)` attribute. Example:\n+\n+```rust,no_run\n+#![feature(doc_alias)]\n+\n+#[doc(alias = \"x\")]\n+#[doc(alias = \"big\")]\n+pub struct BigX;\n+```\n+\n+Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n+\"big\", search will show the `BigX` struct first.\n+\n ## Unstable command-line arguments\n \n These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are\n@@ -374,18 +390,15 @@ This is an internal flag intended for the standard library and compiler that app\n allows `rustdoc` to be able to generate documentation for the compiler crates and the standard\n library, as an equivalent command-line argument is provided to `rustc` when building those crates.\n \n-### `doc_alias` feature\n+### `--index-page`: provide a top-level landing page for docs\n \n-This feature allows you to add alias(es) to an item when using the `rustdoc` search through the\n-`doc(alias)` attribute. Example:\n+This feature allows you to generate an index-page with a given markdown file. A good example of it\n+is the [rust documentation index](https://doc.rust-lang.org/index.html).\n \n-```rust,no_run\n-#![feature(doc_alias)]\n+With this, you'll have a page which you can custom as much as you want at the top of your crates.\n \n-#[doc(alias = \"x\")]\n-#[doc(alias = \"big\")]\n-pub struct BigX;\n-```\n+Using `index-page` option enables `enable-index-page` option as well.\n \n-Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n-\"big\", search will show the `BigX` struct first.\n+### `--enable-index-page`: generate a default index page for docs\n+\n+This feature allows the generation of a default index-page which lists the generated crates."}, {"sha": "3f0ef61f375c09d2f21cf723be7ff1ad3353f110", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 74, "deletions": 12, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -54,6 +54,9 @@ use std::rc::Rc;\n \n use externalfiles::ExternalHtml;\n \n+use errors;\n+use getopts;\n+\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n@@ -106,6 +109,8 @@ struct Context {\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n+    pub enable_index_page: bool,\n+    pub index_page: Option<PathBuf>,\n }\n \n struct SharedContext {\n@@ -501,7 +506,12 @@ pub fn run(mut krate: clean::Crate,\n            sort_modules_alphabetically: bool,\n            themes: Vec<PathBuf>,\n            enable_minification: bool,\n-           id_map: IdMap) -> Result<(), Error> {\n+           id_map: IdMap,\n+           enable_index_page: bool,\n+           index_page: Option<PathBuf>,\n+           matches: &getopts::Matches,\n+           diag: &errors::Handler,\n+) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -572,6 +582,8 @@ pub fn run(mut krate: clean::Crate,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n+        enable_index_page,\n+        index_page,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -666,7 +678,7 @@ pub fn run(mut krate: clean::Crate,\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n     CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n \n-    write_shared(&cx, &krate, &*cache, index, enable_minification)?;\n+    write_shared(&cx, &krate, &*cache, index, enable_minification, matches, diag)?;\n \n     // And finally render the whole crate's documentation\n     cx.krate(krate)\n@@ -742,11 +754,15 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n             Json::Object(crate_data))\n }\n \n-fn write_shared(cx: &Context,\n-                krate: &clean::Crate,\n-                cache: &Cache,\n-                search_index: String,\n-                enable_minification: bool) -> Result<(), Error> {\n+fn write_shared(\n+    cx: &Context,\n+    krate: &clean::Crate,\n+    cache: &Cache,\n+    search_index: String,\n+    enable_minification: bool,\n+    matches: &getopts::Matches,\n+    diag: &errors::Handler,\n+) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n@@ -902,8 +918,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n     write(cx.dst.join(\"COPYRIGHT.txt\"),\n           include_bytes!(\"static/COPYRIGHT.txt\"))?;\n \n-    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<Vec<String>> {\n+    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n         let mut ret = Vec::new();\n+        let mut krates = Vec::new();\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n                 let line = line?;\n@@ -914,9 +931,13 @@ themePicker.onblur = handleThemeButtonsBlur;\n                     continue;\n                 }\n                 ret.push(line.to_string());\n+                krates.push(line[key.len() + 2..].split('\"')\n+                                                 .next()\n+                                                 .map(|s| s.to_owned())\n+                                                 .unwrap_or_else(|| String::new()));\n             }\n         }\n-        Ok(ret)\n+        Ok((ret, krates))\n     }\n \n     fn show_item(item: &IndexItem, krate: &str) -> String {\n@@ -931,7 +952,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     let dst = cx.dst.join(\"aliases.js\");\n     {\n-        let mut all_aliases = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n+        let (mut all_aliases, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n         let mut w = try_err!(File::create(&dst), &dst);\n         let mut output = String::with_capacity(100);\n         for (alias, items) in &cache.aliases {\n@@ -955,7 +976,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n-    let mut all_indexes = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n     all_indexes.push(search_index);\n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n@@ -969,6 +990,46 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n     try_err!(writeln!(&mut w, \"initSearch(searchIndex);\"), &dst);\n \n+    if cx.enable_index_page == true {\n+        if let Some(ref index_page) = cx.index_page {\n+            ::markdown::render(index_page,\n+                               cx.dst.clone(),\n+                               &matches, &(*cx.shared).layout.external_html,\n+                               !matches.opt_present(\"markdown-no-toc\"),\n+                               diag);\n+        } else {\n+            let dst = cx.dst.join(\"index.html\");\n+            let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));\n+            let page = layout::Page {\n+                title: \"Index of crates\",\n+                css_class: \"mod\",\n+                root_path: \"./\",\n+                description: \"List of crates\",\n+                keywords: BASIC_KEYWORDS,\n+                resource_suffix: &cx.shared.resource_suffix,\n+            };\n+            krates.push(krate.name.clone());\n+            krates.sort();\n+            krates.dedup();\n+\n+            let content = format!(\n+\"<h1 class='fqn'>\\\n+     <span class='in-band'>List of all crates</span>\\\n+</h1><ul class='mod'>{}</ul>\",\n+                                  krates\n+                                    .iter()\n+                                    .map(|s| {\n+                                        format!(\"<li><a href=\\\"{}/index.html\\\">{}</li>\", s, s)\n+                                    })\n+                                    .collect::<String>());\n+            try_err!(layout::render(&mut w, &cx.shared.layout,\n+                                    &page, &(\"\"), &content,\n+                                    cx.shared.css_file_extension.is_some(),\n+                                    &cx.shared.themes), &dst);\n+            try_err!(w.flush(), &dst);\n+        }\n+    }\n+\n     // Update the list of all implementors for traits\n     let dst = cx.dst.join(\"implementors\");\n     for (&did, imps) in &cache.implementors {\n@@ -1022,7 +1083,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n                             remote_item_type.css_class(),\n                             remote_path[remote_path.len() - 1]));\n \n-        let mut all_implementors = try_err!(collect(&mydst, &krate.name, \"implementors\"), &mydst);\n+        let (mut all_implementors, _) = try_err!(collect(&mydst, &krate.name, \"implementors\"),\n+                                                 &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "e1cb96edd482a4c0b68254e7c9438db7b3942de3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -334,6 +334,17 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"LEVEL\",\n             )\n         }),\n+        unstable(\"index-page\", |o| {\n+             o.optopt(\"\",\n+                      \"index-page\",\n+                      \"Markdown file to be used as index page\",\n+                      \"PATH\")\n+        }),\n+        unstable(\"enable-index-page\", |o| {\n+             o.optflag(\"\",\n+                       \"enable-index-page\",\n+                       \"To enable generation of the index page\")\n+        }),\n     ]\n }\n \n@@ -451,7 +462,7 @@ fn main_args(args: &[String]) -> isize {\n         diag.struct_err(\"too many file operands\").emit();\n         return 1;\n     }\n-    let input = &matches.free[0];\n+    let input = matches.free[0].clone();\n \n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n@@ -479,7 +490,7 @@ fn main_args(args: &[String]) -> isize {\n                                           .collect();\n \n     let should_test = matches.opt_present(\"test\");\n-    let markdown_input = Path::new(input).extension()\n+    let markdown_input = Path::new(&input).extension()\n         .map_or(false, |e| e == \"md\" || e == \"markdown\");\n \n     let output = matches.opt_str(\"o\").map(|s| PathBuf::from(&s));\n@@ -534,6 +545,8 @@ fn main_args(args: &[String]) -> isize {\n     let linker = matches.opt_str(\"linker\").map(PathBuf::from);\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n+    let index_page = matches.opt_str(\"index-page\").map(|s| PathBuf::from(&s));\n+    let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n     let enable_minification = !matches.opt_present(\"disable-minification\");\n \n     let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n@@ -544,19 +557,25 @@ fn main_args(args: &[String]) -> isize {\n             return 1;\n         }\n     };\n+    if let Some(ref index_page) = index_page {\n+        if !index_page.is_file() {\n+            diag.struct_err(\"option `--index-page` argument must be a file\").emit();\n+            return 1;\n+        }\n+    }\n \n     let cg = build_codegen_options(&matches, ErrorOutputType::default());\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n+            return markdown::test(&input, cfgs, libs, externs, test_args, maybe_sysroot,\n                                   display_warnings, linker, edition, cg, &diag)\n         }\n         (true, false) => {\n-            return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n+            return test::run(Path::new(&input), cfgs, libs, externs, test_args, crate_name,\n                              maybe_sysroot, display_warnings, linker, edition, cg)\n         }\n-        (false, true) => return markdown::render(Path::new(input),\n+        (false, true) => return markdown::render(Path::new(&input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n                                                  &matches, &external_html,\n                                                  !matches.opt_present(\"markdown-no-toc\"), &diag),\n@@ -565,8 +584,8 @@ fn main_args(args: &[String]) -> isize {\n \n     let output_format = matches.opt_str(\"w\");\n \n-    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n-                            move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, matches, error_format,\n+                            move |out, matches| {\n         let Output { krate, passes, renderinfo } = out;\n         let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n         info!(\"going to format\");\n@@ -580,7 +599,10 @@ fn main_args(args: &[String]) -> isize {\n                                   renderinfo,\n                                   sort_modules_alphabetically,\n                                   themes,\n-                                  enable_minification, id_map)\n+                                  enable_minification, id_map,\n+                                  enable_index_page, index_page,\n+                                  &matches,\n+                                  &diag)\n                     .expect(\"failed to generate documentation\");\n                 0\n             }\n@@ -602,11 +624,11 @@ fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n                        edition: Edition,\n                        cg: CodegenOptions,\n-                       matches: &getopts::Matches,\n+                       matches: getopts::Matches,\n                        error_format: ErrorOutputType,\n                        f: F)\n                        -> Result<R, String>\n-where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n+where R: 'static + Send, F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n         Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, error_format, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n@@ -660,11 +682,11 @@ fn rust_input<R, F>(cratefile: PathBuf,\n                     externs: Externs,\n                     edition: Edition,\n                     cg: CodegenOptions,\n-                    matches: &getopts::Matches,\n+                    matches: getopts::Matches,\n                     error_format: ErrorOutputType,\n                     f: F) -> R\n where R: 'static + Send,\n-      F: 'static + Send + FnOnce(Output) -> R\n+      F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R\n {\n     let default_passes = if matches.opt_present(\"no-defaults\") {\n         passes::DefaultPassOption::None\n@@ -709,7 +731,7 @@ where R: 'static + Send,\n         *x == \"ui-testing\"\n     });\n \n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n+    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(&matches, error_format);\n \n     let (tx, rx) = channel();\n \n@@ -761,7 +783,8 @@ where R: 'static + Send,\n             krate = pass(krate);\n         }\n \n-        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes })).unwrap();\n+        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes },\n+                  &matches)).unwrap();\n     }));\n \n     match result {"}, {"sha": "0084c0f859281861952cdcfdb747b1c85007c9cf", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -77,7 +77,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n             diag.struct_err(&format!(\"{}: {}\", output.display(), e)).emit();\n             return 4;\n         }\n-        Ok(f) => f\n+        Ok(f) => f,\n     };\n \n     let (metadata, text) = extract_leading_metadata(&input_str);"}, {"sha": "9d35f8adeac75c2051c64efc4c366f06b4bd8dba", "filename": "src/test/rustdoc/index-page.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Ftest%2Frustdoc%2Findex-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c/src%2Ftest%2Frustdoc%2Findex-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Findex-page.rs?ref=e53a5ffd6b1c28903b4ad9a4c433fd554802cd9c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z unstable-options --enable-index-page\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/../index.html\n+// @has - '//span[@class=\"in-band\"]' 'List of all crates'\n+// @has - '//ul[@class=\"mod\"]//a[@href=\"foo/index.html\"]' 'foo'\n+pub struct Foo;"}]}