{"sha": "f40877feeb17c538a73fe6294d48af123251a8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDg3N2ZlZWIxN2M1MzhhNzNmZTYyOTRkNDhhZjEyMzI1MWE4YzU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T09:39:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T22:07:38Z"}, "message": "Add 12 num::NonZero* types for each primitive integer\n\nRFC: https://github.com/rust-lang/rfcs/pull/2307", "tree": {"sha": "a7853aec22faf794f39b4cb3093dd65d443642b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7853aec22faf794f39b4cb3093dd65d443642b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40877feeb17c538a73fe6294d48af123251a8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40877feeb17c538a73fe6294d48af123251a8c5", "html_url": "https://github.com/rust-lang/rust/commit/f40877feeb17c538a73fe6294d48af123251a8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40877feeb17c538a73fe6294d48af123251a8c5/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adf2135adc4a65a78ba053f04c29d7fe0468eb87", "url": "https://api.github.com/repos/rust-lang/rust/commits/adf2135adc4a65a78ba053f04c29d7fe0468eb87", "html_url": "https://github.com/rust-lang/rust/commit/adf2135adc4a65a78ba053f04c29d7fe0468eb87"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "c6a1dab5617573c3976919a01a6bfb32a0dd4b59", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=f40877feeb17c538a73fe6294d48af123251a8c5", "patch": "@@ -62,7 +62,7 @@ impl_zeroable_for_integer_types! {\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n-pub struct NonZero<T: Zeroable>(T);\n+pub struct NonZero<T: Zeroable>(pub(crate) T);\n \n impl<T: Zeroable> NonZero<T> {\n     /// Creates an instance of NonZero with the provided value."}, {"sha": "d3556ef742b535ce0399f74c0ef4e4d41082464f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f40877feeb17c538a73fe6294d48af123251a8c5", "patch": "@@ -15,9 +15,96 @@\n use convert::{Infallible, TryFrom};\n use fmt;\n use intrinsics;\n+use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n+macro_rules! impl_nonzero_fmt {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+        $(\n+            #[$stability]\n+            impl fmt::$Trait for $Ty {\n+                #[inline]\n+                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                    self.get().fmt(f)\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+macro_rules! nonzero_integers {\n+    ( #[$stability: meta] $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            /// An integer that is known not to equal zero.\n+            ///\n+            /// This may enable some memory layout optimization such as:\n+            ///\n+            /// ```rust\n+            /// # #![feature(nonzero)]\n+            /// use std::mem::size_of;\n+            /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n+            /// ```\n+            #[$stability]\n+            #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+            pub struct $Ty(NonZero<$Int>);\n+\n+            impl $Ty {\n+                /// Create a non-zero without checking the value.\n+                ///\n+                /// # Safety\n+                ///\n+                /// The value must not be zero.\n+                #[$stability]\n+                #[inline]\n+                pub const unsafe fn new_unchecked(n: $Int) -> Self {\n+                    $Ty(NonZero(n))\n+                }\n+\n+                /// Create a non-zero if the given value is not zero.\n+                #[$stability]\n+                #[inline]\n+                pub fn new(n: $Int) -> Option<Self> {\n+                    if n != 0 {\n+                        Some($Ty(NonZero(n)))\n+                    } else {\n+                        None\n+                    }\n+                }\n+\n+                /// Returns the value as a primitive type.\n+                #[$stability]\n+                #[inline]\n+                pub fn get(self) -> $Int {\n+                    self.0 .0\n+                }\n+\n+            }\n+\n+            impl_nonzero_fmt! {\n+                #[$stability]\n+                (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_integers! {\n+    #[unstable(feature = \"nonzero\", issue = \"27730\")]\n+    NonZeroU8(u8); NonZeroI8(i8);\n+    NonZeroU16(u16); NonZeroI16(i16);\n+    NonZeroU32(u32); NonZeroI32(i32);\n+    NonZeroU64(u64); NonZeroI64(i64);\n+    NonZeroUsize(usize); NonZeroIsize(isize);\n+}\n+\n+nonzero_integers! {\n+    // Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n+    // if other NonZero* integer types are stabilizied before 128-bit integers\n+    #[unstable(feature = \"nonzero\", issue = \"27730\")]\n+    NonZeroU128(u128); NonZeroI128(i128);\n+}\n+\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,"}, {"sha": "5c0a83fde102f7ed6792c8dd1d30b1e011b107ba", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f40877feeb17c538a73fe6294d48af123251a8c5", "patch": "@@ -282,6 +282,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n #![feature(exhaustive_patterns)]\n+#![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}, {"sha": "5e0406ca2202c6c8268a8d8136fe36c41be28380", "filename": "src/libstd/num.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40877feeb17c538a73fe6294d48af123251a8c5/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=f40877feeb17c538a73fe6294d48af123251a8c5", "patch": "@@ -21,6 +21,17 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::Wrapping;\n \n+#[unstable(feature = \"nonzero\", issue = \"27730\")]\n+pub use core::num::{\n+    NonZeroU8, NonZeroI8, NonZeroU16, NonZeroI16, NonZeroU32, NonZeroI32,\n+    NonZeroU64, NonZeroI64, NonZeroUsize, NonZeroIsize,\n+};\n+\n+// Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n+// if other NonZero* integer types are stabilizied before 128-bit integers\n+#[unstable(feature = \"nonzero\", issue = \"27730\")]\n+pub use core::num::{NonZeroU128, NonZeroI128};\n+\n #[cfg(test)] use fmt;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n "}]}