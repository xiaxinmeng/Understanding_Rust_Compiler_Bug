{"sha": "043745cb9688fbecd97638b2fa156cb055bbbb14", "node_id": "C_kwDOAAsO6NoAKDA0Mzc0NWNiOTY4OGZiZWNkOTc2MzhiMmZhMTU2Y2IwNTViYmJiMTQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-26T14:05:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-01T15:56:03Z"}, "message": "Avoid the merge derive macro in rustbuild\n\nThe task of the macro is simple enough that a decl macro is almost ten\ntimes shorter than the original proc macro. The proc macro is 159 lines\nwhile the decl macro is just 18 lines.\n\nThis reduces the amount of dependencies of rustbuild from 45 to 37. It\nalso slight reduces compilation time from 47s to 44s for debug builds.", "tree": {"sha": "6c722e08e3fdfc9508306fd6e5986718ebe168bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c722e08e3fdfc9508306fd6e5986718ebe168bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/043745cb9688fbecd97638b2fa156cb055bbbb14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/043745cb9688fbecd97638b2fa156cb055bbbb14", "html_url": "https://github.com/rust-lang/rust/commit/043745cb9688fbecd97638b2fa156cb055bbbb14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/043745cb9688fbecd97638b2fa156cb055bbbb14/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe2728fa900a708d2c70342d9d6737e5462cf5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe2728fa900a708d2c70342d9d6737e5462cf5d", "html_url": "https://github.com/rust-lang/rust/commit/2fe2728fa900a708d2c70342d9d6737e5462cf5d"}], "stats": {"total": 379, "additions": 197, "deletions": 182}, "files": [{"sha": "dd4d48c126fdf37d2c5adb47690a7ed015a03ad2", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/043745cb9688fbecd97638b2fa156cb055bbbb14/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/043745cb9688fbecd97638b2fa156cb055bbbb14/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=043745cb9688fbecd97638b2fa156cb055bbbb14", "patch": "@@ -2225,22 +2225,6 @@ name = \"merge\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"10bbef93abb1da61525bbc45eeaff6473a41907d19f8f9aa5168d214e10693e9\"\n-dependencies = [\n- \"merge_derive\",\n- \"num-traits\",\n-]\n-\n-[[package]]\n-name = \"merge_derive\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"209d075476da2e63b4b29e72a2ef627b840589588e71400a25e3565c4f849d07\"\n-dependencies = [\n- \"proc-macro-error\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n \n [[package]]\n name = \"minifier\""}, {"sha": "1f218dd8d67bc2567f1d9a72e2b5009bd9e55953", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/043745cb9688fbecd97638b2fa156cb055bbbb14/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/043745cb9688fbecd97638b2fa156cb055bbbb14/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=043745cb9688fbecd97638b2fa156cb055bbbb14", "patch": "@@ -47,7 +47,7 @@ toml = \"0.5\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n opener = \"0.5\"\n-merge = \"0.1.0\"\n+merge = { version = \"0.1.0\", default-features = false, features = [\"std\"] }\n once_cell = \"1.7.2\"\n \n [target.'cfg(windows)'.dependencies.winapi]"}, {"sha": "fcca783fbfe3ec31f002a16588e77b978c9f6f24", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 196, "deletions": 165, "changes": 361, "blob_url": "https://github.com/rust-lang/rust/blob/043745cb9688fbecd97638b2fa156cb055bbbb14/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043745cb9688fbecd97638b2fa156cb055bbbb14/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=043745cb9688fbecd97638b2fa156cb055bbbb14", "patch": "@@ -357,105 +357,132 @@ impl Merge for TomlConfig {\n     }\n }\n \n-/// TOML representation of various global build decisions.\n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Build {\n-    build: Option<String>,\n-    host: Option<Vec<String>>,\n-    target: Option<Vec<String>>,\n-    // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n-    build_dir: Option<String>,\n-    cargo: Option<String>,\n-    rustc: Option<String>,\n-    rustfmt: Option<PathBuf>,\n-    docs: Option<bool>,\n-    compiler_docs: Option<bool>,\n-    docs_minification: Option<bool>,\n-    submodules: Option<bool>,\n-    fast_submodules: Option<bool>,\n-    gdb: Option<String>,\n-    nodejs: Option<String>,\n-    npm: Option<String>,\n-    python: Option<String>,\n-    locked_deps: Option<bool>,\n-    vendor: Option<bool>,\n-    full_bootstrap: Option<bool>,\n-    extended: Option<bool>,\n-    tools: Option<HashSet<String>>,\n-    verbose: Option<usize>,\n-    sanitizers: Option<bool>,\n-    profiler: Option<bool>,\n-    cargo_native_static: Option<bool>,\n-    low_priority: Option<bool>,\n-    configure_args: Option<Vec<String>>,\n-    local_rebuild: Option<bool>,\n-    print_step_timings: Option<bool>,\n-    print_step_rusage: Option<bool>,\n-    check_stage: Option<u32>,\n-    doc_stage: Option<u32>,\n-    build_stage: Option<u32>,\n-    test_stage: Option<u32>,\n-    install_stage: Option<u32>,\n-    dist_stage: Option<u32>,\n-    bench_stage: Option<u32>,\n-    patch_binaries_for_nix: Option<bool>,\n+macro_rules! derive_merge {\n+    ($(#[$attr:meta])* struct $name:ident {\n+        $($field:ident: $field_ty:ty,)*\n+    }) => {\n+        $(#[$attr])*\n+        struct $name {\n+            $($field: $field_ty,)*\n+        }\n+\n+        impl Merge for $name {\n+            fn merge(&mut self, other: Self) {\n+                $(\n+                    Merge::merge(&mut self.$field, other.$field);\n+                )*\n+            }\n+        }\n+    }\n }\n \n-/// TOML representation of various global install decisions.\n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Install {\n-    prefix: Option<String>,\n-    sysconfdir: Option<String>,\n-    docdir: Option<String>,\n-    bindir: Option<String>,\n-    libdir: Option<String>,\n-    mandir: Option<String>,\n-    datadir: Option<String>,\n+derive_merge! {\n+    /// TOML representation of various global build decisions.\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Build {\n+        build: Option<String>,\n+        host: Option<Vec<String>>,\n+        target: Option<Vec<String>>,\n+        // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n+        build_dir: Option<String>,\n+        cargo: Option<String>,\n+        rustc: Option<String>,\n+        rustfmt: Option<PathBuf>,\n+        docs: Option<bool>,\n+        compiler_docs: Option<bool>,\n+        docs_minification: Option<bool>,\n+        submodules: Option<bool>,\n+        fast_submodules: Option<bool>,\n+        gdb: Option<String>,\n+        nodejs: Option<String>,\n+        npm: Option<String>,\n+        python: Option<String>,\n+        locked_deps: Option<bool>,\n+        vendor: Option<bool>,\n+        full_bootstrap: Option<bool>,\n+        extended: Option<bool>,\n+        tools: Option<HashSet<String>>,\n+        verbose: Option<usize>,\n+        sanitizers: Option<bool>,\n+        profiler: Option<bool>,\n+        cargo_native_static: Option<bool>,\n+        low_priority: Option<bool>,\n+        configure_args: Option<Vec<String>>,\n+        local_rebuild: Option<bool>,\n+        print_step_timings: Option<bool>,\n+        print_step_rusage: Option<bool>,\n+        check_stage: Option<u32>,\n+        doc_stage: Option<u32>,\n+        build_stage: Option<u32>,\n+        test_stage: Option<u32>,\n+        install_stage: Option<u32>,\n+        dist_stage: Option<u32>,\n+        bench_stage: Option<u32>,\n+        patch_binaries_for_nix: Option<bool>,\n+    }\n }\n \n-/// TOML representation of how the LLVM build is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Llvm {\n-    skip_rebuild: Option<bool>,\n-    optimize: Option<bool>,\n-    thin_lto: Option<bool>,\n-    release_debuginfo: Option<bool>,\n-    assertions: Option<bool>,\n-    tests: Option<bool>,\n-    plugins: Option<bool>,\n-    ccache: Option<StringOrBool>,\n-    version_check: Option<bool>,\n-    static_libstdcpp: Option<bool>,\n-    ninja: Option<bool>,\n-    targets: Option<String>,\n-    experimental_targets: Option<String>,\n-    link_jobs: Option<u32>,\n-    link_shared: Option<bool>,\n-    version_suffix: Option<String>,\n-    clang_cl: Option<String>,\n-    cflags: Option<String>,\n-    cxxflags: Option<String>,\n-    ldflags: Option<String>,\n-    use_libcxx: Option<bool>,\n-    use_linker: Option<String>,\n-    allow_old_toolchain: Option<bool>,\n-    polly: Option<bool>,\n-    clang: Option<bool>,\n-    download_ci_llvm: Option<StringOrBool>,\n+derive_merge! {\n+    /// TOML representation of various global install decisions.\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Install {\n+        prefix: Option<String>,\n+        sysconfdir: Option<String>,\n+        docdir: Option<String>,\n+        bindir: Option<String>,\n+        libdir: Option<String>,\n+        mandir: Option<String>,\n+        datadir: Option<String>,\n+    }\n }\n \n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Dist {\n-    sign_folder: Option<String>,\n-    gpg_password_file: Option<String>,\n-    upload_addr: Option<String>,\n-    src_tarball: Option<bool>,\n-    missing_tools: Option<bool>,\n-    compression_formats: Option<Vec<String>>,\n+derive_merge! {\n+    /// TOML representation of how the LLVM build is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Llvm {\n+        skip_rebuild: Option<bool>,\n+        optimize: Option<bool>,\n+        thin_lto: Option<bool>,\n+        release_debuginfo: Option<bool>,\n+        assertions: Option<bool>,\n+        tests: Option<bool>,\n+        plugins: Option<bool>,\n+        ccache: Option<StringOrBool>,\n+        version_check: Option<bool>,\n+        static_libstdcpp: Option<bool>,\n+        ninja: Option<bool>,\n+        targets: Option<String>,\n+        experimental_targets: Option<String>,\n+        link_jobs: Option<u32>,\n+        link_shared: Option<bool>,\n+        version_suffix: Option<String>,\n+        clang_cl: Option<String>,\n+        cflags: Option<String>,\n+        cxxflags: Option<String>,\n+        ldflags: Option<String>,\n+        use_libcxx: Option<bool>,\n+        use_linker: Option<String>,\n+        allow_old_toolchain: Option<bool>,\n+        polly: Option<bool>,\n+        clang: Option<bool>,\n+        download_ci_llvm: Option<StringOrBool>,\n+    }\n+}\n+\n+derive_merge! {\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Dist {\n+        sign_folder: Option<String>,\n+        gpg_password_file: Option<String>,\n+        upload_addr: Option<String>,\n+        src_tarball: Option<bool>,\n+        missing_tools: Option<bool>,\n+        compression_formats: Option<Vec<String>>,\n+    }\n }\n \n #[derive(Deserialize)]\n@@ -471,80 +498,84 @@ impl Default for StringOrBool {\n     }\n }\n \n-/// TOML representation of how the Rust build is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Rust {\n-    optimize: Option<bool>,\n-    debug: Option<bool>,\n-    codegen_units: Option<u32>,\n-    codegen_units_std: Option<u32>,\n-    debug_assertions: Option<bool>,\n-    debug_assertions_std: Option<bool>,\n-    overflow_checks: Option<bool>,\n-    overflow_checks_std: Option<bool>,\n-    debug_logging: Option<bool>,\n-    debuginfo_level: Option<u32>,\n-    debuginfo_level_rustc: Option<u32>,\n-    debuginfo_level_std: Option<u32>,\n-    debuginfo_level_tools: Option<u32>,\n-    debuginfo_level_tests: Option<u32>,\n-    run_dsymutil: Option<bool>,\n-    backtrace: Option<bool>,\n-    incremental: Option<bool>,\n-    parallel_compiler: Option<bool>,\n-    default_linker: Option<String>,\n-    channel: Option<String>,\n-    description: Option<String>,\n-    musl_root: Option<String>,\n-    rpath: Option<bool>,\n-    verbose_tests: Option<bool>,\n-    optimize_tests: Option<bool>,\n-    codegen_tests: Option<bool>,\n-    ignore_git: Option<bool>,\n-    dist_src: Option<bool>,\n-    save_toolstates: Option<String>,\n-    codegen_backends: Option<Vec<String>>,\n-    lld: Option<bool>,\n-    use_lld: Option<bool>,\n-    llvm_tools: Option<bool>,\n-    deny_warnings: Option<bool>,\n-    backtrace_on_ice: Option<bool>,\n-    verify_llvm_ir: Option<bool>,\n-    thin_lto_import_instr_limit: Option<u32>,\n-    remap_debuginfo: Option<bool>,\n-    jemalloc: Option<bool>,\n-    test_compare_mode: Option<bool>,\n-    llvm_libunwind: Option<String>,\n-    control_flow_guard: Option<bool>,\n-    new_symbol_mangling: Option<bool>,\n-    profile_generate: Option<String>,\n-    profile_use: Option<String>,\n-    // ignored; this is set from an env var set by bootstrap.py\n-    download_rustc: Option<StringOrBool>,\n+derive_merge! {\n+    /// TOML representation of how the Rust build is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Rust {\n+        optimize: Option<bool>,\n+        debug: Option<bool>,\n+        codegen_units: Option<u32>,\n+        codegen_units_std: Option<u32>,\n+        debug_assertions: Option<bool>,\n+        debug_assertions_std: Option<bool>,\n+        overflow_checks: Option<bool>,\n+        overflow_checks_std: Option<bool>,\n+        debug_logging: Option<bool>,\n+        debuginfo_level: Option<u32>,\n+        debuginfo_level_rustc: Option<u32>,\n+        debuginfo_level_std: Option<u32>,\n+        debuginfo_level_tools: Option<u32>,\n+        debuginfo_level_tests: Option<u32>,\n+        run_dsymutil: Option<bool>,\n+        backtrace: Option<bool>,\n+        incremental: Option<bool>,\n+        parallel_compiler: Option<bool>,\n+        default_linker: Option<String>,\n+        channel: Option<String>,\n+        description: Option<String>,\n+        musl_root: Option<String>,\n+        rpath: Option<bool>,\n+        verbose_tests: Option<bool>,\n+        optimize_tests: Option<bool>,\n+        codegen_tests: Option<bool>,\n+        ignore_git: Option<bool>,\n+        dist_src: Option<bool>,\n+        save_toolstates: Option<String>,\n+        codegen_backends: Option<Vec<String>>,\n+        lld: Option<bool>,\n+        use_lld: Option<bool>,\n+        llvm_tools: Option<bool>,\n+        deny_warnings: Option<bool>,\n+        backtrace_on_ice: Option<bool>,\n+        verify_llvm_ir: Option<bool>,\n+        thin_lto_import_instr_limit: Option<u32>,\n+        remap_debuginfo: Option<bool>,\n+        jemalloc: Option<bool>,\n+        test_compare_mode: Option<bool>,\n+        llvm_libunwind: Option<String>,\n+        control_flow_guard: Option<bool>,\n+        new_symbol_mangling: Option<bool>,\n+        profile_generate: Option<String>,\n+        profile_use: Option<String>,\n+        // ignored; this is set from an env var set by bootstrap.py\n+        download_rustc: Option<StringOrBool>,\n+    }\n }\n \n-/// TOML representation of how each build target is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct TomlTarget {\n-    cc: Option<String>,\n-    cxx: Option<String>,\n-    ar: Option<String>,\n-    ranlib: Option<String>,\n-    default_linker: Option<PathBuf>,\n-    linker: Option<String>,\n-    llvm_config: Option<String>,\n-    llvm_filecheck: Option<String>,\n-    android_ndk: Option<String>,\n-    sanitizers: Option<bool>,\n-    profiler: Option<bool>,\n-    crt_static: Option<bool>,\n-    musl_root: Option<String>,\n-    musl_libdir: Option<String>,\n-    wasi_root: Option<String>,\n-    qemu_rootfs: Option<String>,\n-    no_std: Option<bool>,\n+derive_merge! {\n+    /// TOML representation of how each build target is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct TomlTarget {\n+        cc: Option<String>,\n+        cxx: Option<String>,\n+        ar: Option<String>,\n+        ranlib: Option<String>,\n+        default_linker: Option<PathBuf>,\n+        linker: Option<String>,\n+        llvm_config: Option<String>,\n+        llvm_filecheck: Option<String>,\n+        android_ndk: Option<String>,\n+        sanitizers: Option<bool>,\n+        profiler: Option<bool>,\n+        crt_static: Option<bool>,\n+        musl_root: Option<String>,\n+        musl_libdir: Option<String>,\n+        wasi_root: Option<String>,\n+        qemu_rootfs: Option<String>,\n+        no_std: Option<bool>,\n+    }\n }\n \n impl Config {"}]}