{"sha": "f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NGM2ZTRlMjg4ZTRmNDljNWMyNTdiMmUyY2IyYWQ1OTE4ZjI2YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-24T20:05:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-24T20:05:32Z"}, "message": "Auto merge of #75110 - lzutao:ip-endianness, r=Mark-Simulacrum\n\nMinor changes to Ipv4Addr\n\nMinor changes to Ipv4Addr\n\n* Impl IntoInner rather than AsInner for Ipv4Addr\n* Add some comments\n* Add test to show endiannes of Ipv4Addr display", "tree": {"sha": "2c22957b5357397353c6b4812325d394ec07fe3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c22957b5357397353c6b4812325d394ec07fe3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "html_url": "https://github.com/rust-lang/rust/commit/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d85ea5cbdc376ae388e1079769b67b9eda911c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d85ea5cbdc376ae388e1079769b67b9eda911c", "html_url": "https://github.com/rust-lang/rust/commit/e6d85ea5cbdc376ae388e1079769b67b9eda911c"}, {"sha": "768509ff84d8527e587df68ecfc4ed962b9f5f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/768509ff84d8527e587df68ecfc4ed962b9f5f2a", "html_url": "https://github.com/rust-lang/rust/commit/768509ff84d8527e587df68ecfc4ed962b9f5f2a"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "d7d96862b2116c0d6706d885b8878c4e3ab21d16", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "patch": "@@ -268,7 +268,7 @@ impl SocketAddrV4 {\n             inner: c::sockaddr_in {\n                 sin_family: c::AF_INET as c::sa_family_t,\n                 sin_port: htons(port),\n-                sin_addr: *ip.as_inner(),\n+                sin_addr: ip.into_inner(),\n                 ..unsafe { mem::zeroed() }\n             },\n         }\n@@ -286,6 +286,8 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ip(&self) -> &Ipv4Addr {\n+        // SAFETY: `Ipv4Addr` is `#[repr(C)] struct { _: in_addr; }`.\n+        // It is safe to cast from `&in_addr` to `&Ipv4Addr`.\n         unsafe { &*(&self.inner.sin_addr as *const c::in_addr as *const Ipv4Addr) }\n     }\n \n@@ -302,7 +304,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: Ipv4Addr) {\n-        self.inner.sin_addr = *new_ip.as_inner()\n+        self.inner.sin_addr = new_ip.into_inner()\n     }\n \n     /// Returns the port number associated with this socket address."}, {"sha": "85bb6b60e6829da3d872348c3dc78a0904dba746", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "patch": "@@ -12,7 +12,7 @@ use crate::hash;\n use crate::io::Write as IoWrite;\n use crate::mem::transmute;\n use crate::sys::net::netc as c;\n-use crate::sys_common::{AsInner, FromInner};\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// An IP address, either IPv4 or IPv6.\n ///\n@@ -909,7 +909,10 @@ impl Eq for Ipv4Addr {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv4Addr {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n-        // `inner` is #[repr(packed)], so we need to copy `s_addr`.\n+        // NOTE:\n+        // * hash in big endian order\n+        // * in netbsd, `in_addr` has `repr(packed)`, we need to\n+        //   copy `s_addr` to avoid unsafe borrowing\n         { self.inner.s_addr }.hash(s)\n     }\n }\n@@ -944,13 +947,14 @@ impl PartialOrd<IpAddr> for Ipv4Addr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n+        // Compare as native endian\n         u32::from_be(self.inner.s_addr).cmp(&u32::from_be(other.inner.s_addr))\n     }\n }\n \n-impl AsInner<c::in_addr> for Ipv4Addr {\n-    fn as_inner(&self) -> &c::in_addr {\n-        &self.inner\n+impl IntoInner<c::in_addr> for Ipv4Addr {\n+    fn into_inner(self) -> c::in_addr {\n+        self.inner\n     }\n }\n \n@@ -2019,6 +2023,7 @@ mod tests {\n \n     #[test]\n     fn ipv4_addr_to_string() {\n+        assert_eq!(Ipv4Addr::new(127, 0, 0, 1).to_string(), \"127.0.0.1\");\n         // Short address\n         assert_eq!(Ipv4Addr::new(1, 1, 1, 1).to_string(), \"1.1.1.1\");\n         // Long address"}, {"sha": "0bb136078bc95c6539c449adb9bf6ae5be233691", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=f44c6e4e288e4f49c5c257b2e2cb2ad5918f26a3", "patch": "@@ -585,8 +585,8 @@ impl UdpSocket {\n \n     pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {\n         let mreq = c::ip_mreq {\n-            imr_multiaddr: *multiaddr.as_inner(),\n-            imr_interface: *interface.as_inner(),\n+            imr_multiaddr: multiaddr.into_inner(),\n+            imr_interface: interface.into_inner(),\n         };\n         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_ADD_MEMBERSHIP, mreq)\n     }\n@@ -601,8 +601,8 @@ impl UdpSocket {\n \n     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {\n         let mreq = c::ip_mreq {\n-            imr_multiaddr: *multiaddr.as_inner(),\n-            imr_interface: *interface.as_inner(),\n+            imr_multiaddr: multiaddr.into_inner(),\n+            imr_interface: interface.into_inner(),\n         };\n         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_DROP_MEMBERSHIP, mreq)\n     }"}]}