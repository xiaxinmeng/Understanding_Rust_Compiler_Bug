{"sha": "d15e5e6ad620f56113478f1500438039e6c2a8ec", "node_id": "C_kwDOAAsO6NoAKGQxNWU1ZTZhZDYyMGY1NjExMzQ3OGYxNTAwNDM4MDM5ZTZjMmE4ZWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T21:34:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T21:34:24Z"}, "message": "Auto merge of #9760 - SquareMan:let_underscore_future, r=llogiq\n\nAdd new lint [`let_underscore_future`]\n\nThis closes #9721\n---\n\nchangelog: add new lint [`let_underscore_future`]", "tree": {"sha": "567ced46c3e6afc4edea4110503304ed5ec96cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567ced46c3e6afc4edea4110503304ed5ec96cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15e5e6ad620f56113478f1500438039e6c2a8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15e5e6ad620f56113478f1500438039e6c2a8ec", "html_url": "https://github.com/rust-lang/rust/commit/d15e5e6ad620f56113478f1500438039e6c2a8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15e5e6ad620f56113478f1500438039e6c2a8ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5474113bec0a7b72201c1254e40fbaa378c6f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5474113bec0a7b72201c1254e40fbaa378c6f30", "html_url": "https://github.com/rust-lang/rust/commit/e5474113bec0a7b72201c1254e40fbaa378c6f30"}, {"sha": "7c5b1887c2427cb196b7e444720482ba228a6186", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5b1887c2427cb196b7e444720482ba228a6186", "html_url": "https://github.com/rust-lang/rust/commit/7c5b1887c2427cb196b7e444720482ba228a6186"}], "stats": {"total": 137, "additions": 114, "deletions": 23}, "files": [{"sha": "8330ee899c8fa934292e8339639d75d13fa10a2e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -4123,6 +4123,7 @@ Released 2018-09-13\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n [`let_underscore_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop\n+[`let_underscore_future`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value"}, {"sha": "5ab2f8a4323abafb10abb68657d9d39f1a775057", "filename": "clippy_lints/foo.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Ffoo.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Ffoo.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Ffoo.txt?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -0,0 +1 @@\n+Hello\n\\ No newline at end of file"}, {"sha": "747636b7ec390bc8a399cdb7256e1b108c17a1b3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -215,6 +215,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::len_zero::LEN_WITHOUT_IS_EMPTY_INFO,\n     crate::len_zero::LEN_ZERO_INFO,\n     crate::let_if_seq::USELESS_LET_IF_SEQ_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_FUTURE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,"}, {"sha": "61f87b91400d76405f8fcb914066040f49a9b4ff", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{is_must_use_ty, match_type};\n+use clippy_utils::ty::{implements_trait, is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -28,7 +28,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.42.0\"]\n     pub LET_UNDERSCORE_MUST_USE,\n     restriction,\n-    \"non-binding let on a `#[must_use]` expression\"\n+    \"non-binding `let` on a `#[must_use]` expression\"\n }\n \n declare_clippy_lint! {\n@@ -56,10 +56,41 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.43.0\"]\n     pub LET_UNDERSCORE_LOCK,\n     correctness,\n-    \"non-binding let on a synchronization lock\"\n+    \"non-binding `let` on a synchronization lock\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>` where the resulting type of expr implements `Future`\n+    ///\n+    /// ### Why is this bad?\n+    /// Futures must be polled for work to be done. The original intention was most likely to await the future\n+    /// and ignore the resulting value.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// async fn foo() -> Result<(), ()> {\n+    ///     Ok(())\n+    /// }\n+    /// let _ = foo();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # async fn context() {\n+    /// async fn foo() -> Result<(), ()> {\n+    ///     Ok(())\n+    /// }\n+    /// let _ = foo().await;\n+    /// # }\n+    /// ```\n+    #[clippy::version = \"1.66\"]\n+    pub LET_UNDERSCORE_FUTURE,\n+    suspicious,\n+    \"non-binding `let` on a future\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n@@ -83,17 +114,27 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     cx,\n                     LET_UNDERSCORE_LOCK,\n                     local.span,\n-                    \"non-binding let on a synchronization lock\",\n+                    \"non-binding `let` on a synchronization lock\",\n                     None,\n                     \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\",\n                 );\n+            } else if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n+                && implements_trait(cx, cx.typeck_results().expr_ty(init), future_trait_def_id, &[]) {\n+                span_lint_and_help(\n+                    cx,\n+                    LET_UNDERSCORE_FUTURE,\n+                    local.span,\n+                    \"non-binding `let` on a future\",\n+                    None,\n+                    \"consider awaiting the future or dropping explicitly with `std::mem::drop`\"\n+                );\n             } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                 span_lint_and_help(\n                     cx,\n                     LET_UNDERSCORE_MUST_USE,\n                     local.span,\n-                    \"non-binding let on an expression with `#[must_use]` type\",\n+                    \"non-binding `let` on an expression with `#[must_use]` type\",\n                     None,\n                     \"consider explicitly using expression value\",\n                 );\n@@ -102,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     cx,\n                     LET_UNDERSCORE_MUST_USE,\n                     local.span,\n-                    \"non-binding let on a result of a `#[must_use]` function\",\n+                    \"non-binding `let` on a result of a `#[must_use]` function\",\n                     None,\n                     \"consider explicitly using function result\",\n                 );"}, {"sha": "d8f54cdca91209ba8bb47f24a975ec6ad596e3ea", "filename": "tests/ui/let_underscore_future.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_future.rs?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -0,0 +1,20 @@\n+use std::future::Future;\n+\n+async fn some_async_fn() {}\n+\n+fn sync_side_effects() {}\n+fn custom() -> impl Future<Output = ()> {\n+    sync_side_effects();\n+    async {}\n+}\n+\n+fn do_something_to_future(future: &mut impl Future<Output = ()>) {}\n+\n+fn main() {\n+    let _ = some_async_fn();\n+    let _ = custom();\n+\n+    let mut future = some_async_fn();\n+    do_something_to_future(&mut future);\n+    let _ = future;\n+}"}, {"sha": "33a748736a880ed5997a781ed4fe4a4b0bac13e3", "filename": "tests/ui/let_underscore_future.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_future.stderr?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -0,0 +1,27 @@\n+error: non-binding `let` on a future\n+  --> $DIR/let_underscore_future.rs:14:5\n+   |\n+LL |     let _ = some_async_fn();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+   = note: `-D clippy::let-underscore-future` implied by `-D warnings`\n+\n+error: non-binding `let` on a future\n+  --> $DIR/let_underscore_future.rs:15:5\n+   |\n+LL |     let _ = custom();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding `let` on a future\n+  --> $DIR/let_underscore_future.rs:19:5\n+   |\n+LL |     let _ = future;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f137d4112092d9fce7591817f0356958ba85f179", "filename": "tests/ui/let_underscore_lock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -1,4 +1,4 @@\n-error: non-binding let on a synchronization lock\n+error: non-binding `let` on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:9:5\n    |\n LL |     let _ = p_m.lock();\n@@ -7,23 +7,23 @@ LL |     let _ = p_m.lock();\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n    = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n \n-error: non-binding let on a synchronization lock\n+error: non-binding `let` on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:12:5\n    |\n LL |     let _ = p_m1.lock();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: non-binding let on a synchronization lock\n+error: non-binding `let` on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:15:5\n    |\n LL |     let _ = p_rw.read();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: non-binding let on a synchronization lock\n+error: non-binding `let` on a synchronization lock\n   --> $DIR/let_underscore_lock.rs:16:5\n    |\n LL |     let _ = p_rw.write();"}, {"sha": "28d760eb46ecccd27d0d1ec2658d4606b566e084", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15e5e6ad620f56113478f1500438039e6c2a8ec/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=d15e5e6ad620f56113478f1500438039e6c2a8ec", "patch": "@@ -1,4 +1,4 @@\n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:67:5\n    |\n LL |     let _ = f();\n@@ -7,87 +7,87 @@ LL |     let _ = f();\n    = help: consider explicitly using function result\n    = note: `-D clippy::let-underscore-must-use` implied by `-D warnings`\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:68:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:70:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:74:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:75:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:78:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:79:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:81:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:83:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a `#[must_use]` function\n+error: non-binding `let` on a result of a `#[must_use]` function\n   --> $DIR/let_underscore_must_use.rs:87:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:89:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on an expression with `#[must_use]` type\n+error: non-binding `let` on an expression with `#[must_use]` type\n   --> $DIR/let_underscore_must_use.rs:91:5\n    |\n LL |     let _ = a;"}]}