{"sha": "12aedc833ccec26e6a883ec52e98acfc6d41263b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYWVkYzgzM2NjZWMyNmU2YTg4M2VjNTJlOThhY2ZjNmQ0MTI2M2I=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-05T18:04:18Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-06T21:41:18Z"}, "message": "collect unused unsafe code\n\nFIXME: de-uglify", "tree": {"sha": "b9ca0d1c535dee17ecd08afce47a1552a7c919e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ca0d1c535dee17ecd08afce47a1552a7c919e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12aedc833ccec26e6a883ec52e98acfc6d41263b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12aedc833ccec26e6a883ec52e98acfc6d41263b", "html_url": "https://github.com/rust-lang/rust/commit/12aedc833ccec26e6a883ec52e98acfc6d41263b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12aedc833ccec26e6a883ec52e98acfc6d41263b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd279a5b98c07a982824eb1b299cb0caad0c844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd279a5b98c07a982824eb1b299cb0caad0c844d", "html_url": "https://github.com/rust-lang/rust/commit/cd279a5b98c07a982824eb1b299cb0caad0c844d"}], "stats": {"total": 295, "additions": 221, "deletions": 74}, "files": [{"sha": "9bd566274fb0a1a3893ef9070af8ce0c3e625720", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -482,7 +482,7 @@ define_dep_nodes!( <'tcx>\n     [] BorrowCheckKrate,\n     [] BorrowCheck(DefId),\n     [] MirBorrowCheck(DefId),\n-    [] UnsafetyViolations(DefId),\n+    [] UnsafetyCheckResult(DefId),\n \n     [] Reachability,\n     [] MirKeys,"}, {"sha": "8ae26d81442a2be9c42917afe87ad313a39cb6fd", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -34,6 +34,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, lint_node_id });\n+impl_stable_hash_for!(struct mir::UnsafetyCheckResult { violations, unsafe_blocks });\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>>\n for mir::Terminator<'gcx> {"}, {"sha": "0fa40f5619699a743e9aef56ef8aa8bded566e2b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -33,6 +33,7 @@ use std::cell::Ref;\n use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n use std::ops::{Index, IndexMut};\n+use std::rc::Rc;\n use std::vec::IntoIter;\n use syntax::ast::{self, Name};\n use syntax_pos::Span;\n@@ -1683,6 +1684,15 @@ pub struct UnsafetyViolation {\n     pub lint_node_id: Option<ast::NodeId>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct UnsafetyCheckResult {\n+    /// Violations that are propagated *upwards* from this function\n+    pub violations: Rc<[UnsafetyViolation]>,\n+    /// unsafe blocks in this function, along with whether they are used. This is\n+    /// used for the \"unused_unsafe\" lint.\n+    pub unsafe_blocks: Rc<[(ast::NodeId, bool)]>,\n+}\n+\n /// The layout of generator state\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct GeneratorLayout<'tcx> {"}, {"sha": "b698985a927d99f29ebae9bd15ce3caa230006f2", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -171,9 +171,8 @@ define_maps! { <'tcx>\n     /// expression defining the closure.\n     [] fn closure_kind: ClosureKind(DefId) -> ty::ClosureKind,\n \n-    /// Unsafety violations for this def ID.\n-    [] fn unsafety_violations: UnsafetyViolations(DefId)\n-        -> Rc<[mir::UnsafetyViolation]>,\n+    /// The result of unsafety-checking this def-id.\n+    [] fn unsafety_check_result: UnsafetyCheckResult(DefId) -> mir::UnsafetyCheckResult,\n \n     /// The signature of functions and closures.\n     [] fn fn_sig: FnSignature(DefId) -> ty::PolyFnSig<'tcx>,"}, {"sha": "f457314f12d90041d247d409ccb6a6f19515070f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -720,7 +720,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n \n         DepKind::BorrowCheck => { force!(borrowck, def_id!()); }\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n-        DepKind::UnsafetyViolations => { force!(unsafety_violations, def_id!()); }\n+        DepKind::UnsafetyCheckResult => { force!(unsafety_check_result, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }"}, {"sha": "53a4b2551fd13e189b27910dcea80a60d9ac4a9e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 91, "deletions": 60, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -34,6 +34,7 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     used_unsafe: FxHashSet<ast::NodeId>,\n+    inherited_blocks: Vec<(ast::NodeId, bool)>,\n }\n \n impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -52,6 +53,7 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             tcx,\n             param_env,\n             used_unsafe: FxHashSet(),\n+            inherited_blocks: vec![],\n         }\n     }\n }\n@@ -124,8 +126,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 &AggregateKind::Adt(..) => {}\n                 &AggregateKind::Closure(def_id, _) |\n                 &AggregateKind::Generator(def_id, _, _) => {\n-                    let unsafety_violations = self.tcx.unsafety_violations(def_id);\n-                    self.register_violations(&unsafety_violations);\n+                    let UnsafetyCheckResult {\n+                        violations, unsafe_blocks\n+                    } = self.tcx.unsafety_check_result(def_id);\n+                    self.inherited_blocks.extend(unsafe_blocks.iter().cloned());\n+                    self.register_violations(&violations, &unsafe_blocks);\n                 }\n             }\n         }\n@@ -194,7 +199,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         source_info,\n                         description: \"use of extern static\",\n                         lint_node_id: Some(lint_root)\n-                    }]);\n+                    }], &[]);\n                 }\n             }\n         }\n@@ -227,41 +232,49 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info, description, lint_node_id: None\n-        }]);\n+        }], &[]);\n     }\n \n-    fn register_violations(&mut self, violations: &[UnsafetyViolation]) {\n-        match self.visibility_scope_info[self.source_info.scope].safety {\n+    fn register_violations(&mut self,\n+                           violations: &[UnsafetyViolation],\n+                           unsafe_blocks: &[(ast::NodeId, bool)]) {\n+        let within_unsafe = match self.visibility_scope_info[self.source_info.scope].safety {\n             Safety::Safe => {\n                 for violation in violations {\n                     if !self.violations.contains(violation) {\n                         self.violations.push(violation.clone())\n                     }\n                 }\n+\n+                false\n             }\n-            Safety::BuiltinUnsafe | Safety::FnUnsafe => {}\n+            Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n             Safety::ExplicitUnsafe(node_id) => {\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(node_id);\n                 }\n+                true\n             }\n-        }\n+        };\n+        self.inherited_blocks.extend(unsafe_blocks.iter().map(|&(node_id, is_used)| {\n+            (node_id, is_used && !within_unsafe)\n+        }));\n     }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n-        unsafety_violations,\n+        unsafety_check_result,\n         ..*providers\n     };\n }\n \n-struct UnusedUnsafeVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    used_unsafe: FxHashSet<ast::NodeId>\n+struct UnusedUnsafeVisitor<'a> {\n+    used_unsafe: &'a FxHashSet<ast::NodeId>,\n+    unsafe_blocks: &'a mut Vec<(ast::NodeId, bool)>,\n }\n \n-impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     fn nested_visit_map<'this>(&'this mut self) ->\n         hir::intravisit::NestedVisitorMap<'this, 'tcx>\n     {\n@@ -272,50 +285,15 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a, 'tcx>\n         hir::intravisit::walk_block(self, block);\n \n         if let hir::UnsafeBlock(hir::UserProvided) = block.rules {\n-            if !self.used_unsafe.contains(&block.id) {\n-                self.report_unused_unsafe(block);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> UnusedUnsafeVisitor<'a, 'tcx> {\n-    /// Return the NodeId for an enclosing scope that is also `unsafe`\n-    fn is_enclosed(&self, id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n-        let parent_id = self.tcx.hir.get_parent_node(id);\n-        if parent_id != id {\n-            if self.used_unsafe.contains(&parent_id) {\n-                Some((\"block\".to_string(), parent_id))\n-            } else if let Some(hir::map::NodeItem(&hir::Item {\n-                node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n-                ..\n-            })) = self.tcx.hir.find(parent_id) {\n-                Some((\"fn\".to_string(), parent_id))\n-            } else {\n-                self.is_enclosed(parent_id)\n-            }\n-        } else {\n-            None\n+            self.unsafe_blocks.push((block.id, self.used_unsafe.contains(&block.id)));\n         }\n     }\n-\n-    fn report_unused_unsafe(&self, block: &'tcx hir::Block) {\n-        let mut db = self.tcx.struct_span_lint_node(UNUSED_UNSAFE,\n-                                                    block.id,\n-                                                    block.span,\n-                                                    \"unnecessary `unsafe` block\");\n-        db.span_label(block.span, \"unnecessary `unsafe` block\");\n-        if let Some((kind, id)) = self.is_enclosed(block.id) {\n-            db.span_note(self.tcx.hir.span(id),\n-                         &format!(\"because it's nested under this `unsafe` {}\", kind));\n-        }\n-        db.emit();\n-    }\n }\n \n fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  def_id: DefId,\n-                                 used_unsafe: FxHashSet<ast::NodeId>)\n+                                 used_unsafe: &FxHashSet<ast::NodeId>,\n+                                 unsafe_blocks: &'a mut Vec<(ast::NodeId, bool)>)\n {\n     let body_id =\n         tcx.hir.as_local_node_id(def_id).and_then(|node_id| {\n@@ -333,13 +311,12 @@ fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"check_unused_unsafe({:?}, body={:?}, used_unsafe={:?})\",\n            def_id, body, used_unsafe);\n \n-    hir::intravisit::Visitor::visit_body(\n-        &mut UnusedUnsafeVisitor { tcx, used_unsafe },\n-        body);\n+    let mut visitor =  UnusedUnsafeVisitor { used_unsafe, unsafe_blocks };\n+    hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_violations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) ->\n-    Rc<[UnsafetyViolation]>\n+fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n+                                   -> UnsafetyCheckResult\n {\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n@@ -351,7 +328,10 @@ fn unsafety_violations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) ->\n         ClearOnDecode::Set(ref data) => data,\n         ClearOnDecode::Clear => {\n             debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n-            return Rc::new([])\n+            return UnsafetyCheckResult {\n+                violations: Rc::new([]),\n+                unsafe_blocks: Rc::new([])\n+            }\n         }\n     };\n \n@@ -360,8 +340,43 @@ fn unsafety_violations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) ->\n         mir, visibility_scope_info, tcx, param_env);\n     checker.visit_mir(mir);\n \n-    check_unused_unsafe(tcx, def_id, checker.used_unsafe);\n-    checker.violations.into()\n+    check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n+    UnsafetyCheckResult {\n+        violations: checker.violations.into(),\n+        unsafe_blocks: checker.inherited_blocks.into()\n+    }\n+}\n+\n+/// Return the NodeId for an enclosing scope that is also `unsafe`\n+fn is_enclosed(tcx: TyCtxt,\n+               used_unsafe: &FxHashSet<ast::NodeId>,\n+               id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n+    let parent_id = tcx.hir.get_parent_node(id);\n+    if parent_id != id {\n+        if used_unsafe.contains(&parent_id) {\n+            Some((\"block\".to_string(), parent_id))\n+        } else if let Some(hir::map::NodeItem(&hir::Item {\n+            node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n+            ..\n+        })) = tcx.hir.find(parent_id) {\n+            Some((\"fn\".to_string(), parent_id))\n+        } else {\n+            is_enclosed(tcx, used_unsafe, parent_id)\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: ast::NodeId) {\n+    let span = tcx.hir.span(id);\n+    let mut db = tcx.struct_span_lint_node(UNUSED_UNSAFE, id, span, \"unnecessary `unsafe` block\");\n+    db.span_label(span, \"unnecessary `unsafe` block\");\n+    if let Some((kind, id)) = is_enclosed(tcx, used_unsafe, id) {\n+        db.span_note(tcx.hir.span(id),\n+                     &format!(\"because it's nested under this `unsafe` {}\", kind));\n+    }\n+    db.emit();\n }\n \n pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n@@ -372,9 +387,14 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         _ => {}\n     };\n \n+    let UnsafetyCheckResult {\n+        violations,\n+        unsafe_blocks\n+    } = tcx.unsafety_check_result(def_id);\n+\n     for &UnsafetyViolation {\n         source_info, description, lint_node_id\n-    } in &*tcx.unsafety_violations(def_id) {\n+    } in violations.iter() {\n         // Report an error.\n         if let Some(lint_node_id) = lint_node_id {\n             tcx.lint_node(SAFE_EXTERN_STATICS,\n@@ -390,4 +410,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                 .emit();\n         }\n     }\n+\n+    let mut unsafe_blocks: Vec<_> = unsafe_blocks.into_iter().collect();\n+    unsafe_blocks.sort();\n+    let used_unsafe: FxHashSet<_> = unsafe_blocks.iter()\n+        .flat_map(|&&(id, used)| if used { Some(id) } else { None })\n+        .collect();\n+    for &(block_id, is_used) in unsafe_blocks {\n+        if !is_used {\n+            report_unused_unsafe(tcx, &used_unsafe, block_id);\n+        }\n+    }\n }"}, {"sha": "34cc3a289d18949b3a043dd8d77f651383594057", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -111,7 +111,7 @@ fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n \n fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n-    let _ = tcx.unsafety_violations(def_id);\n+    let _ = tcx.unsafety_check_result(def_id);\n \n     let source = MirSource::from_local_def_id(tcx, def_id);\n     let mut mir = tcx.mir_built(def_id).steal();"}, {"sha": "833fc2802a3a5db9208f36cc80e39acc3d7f4418", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.rs?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unused_unsafe)]\n+fn main() {\n+    let mut v = Vec::<i32>::with_capacity(24);\n+\n+    unsafe {\n+        let f = |v: &mut Vec<_>| {\n+            unsafe {\n+                v.set_len(24);\n+                |w: &mut Vec<u32>| { unsafe {\n+                    w.set_len(32);\n+                } };\n+            }\n+            |x: &mut Vec<u32>| { unsafe {\n+                x.set_len(40);\n+            } };\n+        };\n+\n+        v.set_len(0);\n+        f(&mut v);\n+    }\n+\n+    |y: &mut Vec<u32>| { unsafe {\n+        y.set_len(48);\n+    } };\n+}"}, {"sha": "5c58b19c7fb3583509a193922bdfa1cb2846eede", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -0,0 +1,71 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:17:13\n+   |\n+17 | /             unsafe {\n+18 | |                 v.set_len(24);\n+19 | |                 |w: &mut Vec<u32>| { unsafe {\n+20 | |                     w.set_len(32);\n+21 | |                 } };\n+22 | |             }\n+   | |_____________^ unnecessary `unsafe` block\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:11:8\n+   |\n+11 | #[deny(unused_unsafe)]\n+   |        ^^^^^^^^^^^^^\n+note: because it's nested under this `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:15:5\n+   |\n+15 | /     unsafe {\n+16 | |         let f = |v: &mut Vec<_>| {\n+17 | |             unsafe {\n+18 | |                 v.set_len(24);\n+...  |\n+29 | |         f(&mut v);\n+30 | |     }\n+   | |_____^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:19:38\n+   |\n+19 |                   |w: &mut Vec<u32>| { unsafe {\n+   |  ______________________________________^\n+20 | |                     w.set_len(32);\n+21 | |                 } };\n+   | |_________________^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:17:13\n+   |\n+17 | /             unsafe {\n+18 | |                 v.set_len(24);\n+19 | |                 |w: &mut Vec<u32>| { unsafe {\n+20 | |                     w.set_len(32);\n+21 | |                 } };\n+22 | |             }\n+   | |_____________^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:23:34\n+   |\n+23 |               |x: &mut Vec<u32>| { unsafe {\n+   |  __________________________________^\n+24 | |                 x.set_len(40);\n+25 | |             } };\n+   | |_____________^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` block\n+  --> $DIR/issue-45107-unnecessary-unsafe-in-closure.rs:15:5\n+   |\n+15 | /     unsafe {\n+16 | |         let f = |v: &mut Vec<_>| {\n+17 | |             unsafe {\n+18 | |                 v.set_len(24);\n+...  |\n+29 | |         f(&mut v);\n+30 | |     }\n+   | |_____^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "f4998e08907a387f55b897ab80f5cc47e203d540", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12aedc833ccec26e6a883ec52e98acfc6d41263b/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=12aedc833ccec26e6a883ec52e98acfc6d41263b", "patch": "@@ -65,12 +65,14 @@ note: because it's nested under this `unsafe` block\n    | |_____^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:40:9\n+  --> $DIR/lint-unused-unsafe.rs:39:5\n    |\n-40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n-   | |_________^ unnecessary `unsafe` block\n+43 | |     }\n+   | |_____^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1\n@@ -85,14 +87,12 @@ note: because it's nested under this `unsafe` fn\n    | |_^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:39:5\n+  --> $DIR/lint-unused-unsafe.rs:40:9\n    |\n-39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n-43 | |     }\n-   | |_____^ unnecessary `unsafe` block\n+   | |_________^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1"}]}