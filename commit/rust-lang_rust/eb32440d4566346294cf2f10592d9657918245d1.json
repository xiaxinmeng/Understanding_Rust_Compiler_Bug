{"sha": "eb32440d4566346294cf2f10592d9657918245d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzI0NDBkNDU2NjM0NjI5NGNmMmYxMDU5MmQ5NjU3OTE4MjQ1ZDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:42:57Z"}, "message": "Do not generate Def::Err in bindings\n\nInstead of Def::Err erroneous bindings can get usual definitions that doesn't require special cases later on and have less chances to generate ICE.", "tree": {"sha": "909c75d38cd50f62d85d5900ee40b4ee504ba96d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909c75d38cd50f62d85d5900ee40b4ee504ba96d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb32440d4566346294cf2f10592d9657918245d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb32440d4566346294cf2f10592d9657918245d1", "html_url": "https://github.com/rust-lang/rust/commit/eb32440d4566346294cf2f10592d9657918245d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb32440d4566346294cf2f10592d9657918245d1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4c7be19ec9b685aa91824051146115e5a30a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4c7be19ec9b685aa91824051146115e5a30a5f", "html_url": "https://github.com/rust-lang/rust/commit/4d4c7be19ec9b685aa91824051146115e5a30a5f"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "bcfd87872628e5eae28ee4252741daf6010312cd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eb32440d4566346294cf2f10592d9657918245d1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32440d4566346294cf2f10592d9657918245d1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=eb32440d4566346294cf2f10592d9657918245d1", "patch": "@@ -2180,7 +2180,8 @@ impl<'a> Resolver<'a> {\n         // because that breaks the assumptions later\n         // passes make about or-patterns.)\n         let renamed = mtwt::resolve(ident.node);\n-        let def = match bindings.get(&renamed).cloned() {\n+        let mut def = Def::Local(self.definitions.local_def_id(pat_id), pat_id);\n+        match bindings.get(&renamed).cloned() {\n             Some(id) if id == outer_pat_id => {\n                 // `Variant(a, a)`, error\n                 resolve_error(\n@@ -2189,7 +2190,6 @@ impl<'a> Resolver<'a> {\n                     ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(\n                         &ident.node.name.as_str())\n                 );\n-                Def::Err\n             }\n             Some(..) if pat_src == PatternSource::FnParam => {\n                 // `fn f(a: u8, a: u8)`, error\n@@ -2199,29 +2199,24 @@ impl<'a> Resolver<'a> {\n                     ResolutionError::IdentifierBoundMoreThanOnceInParameterList(\n                         &ident.node.name.as_str())\n                 );\n-                Def::Err\n             }\n             Some(..) if pat_src == PatternSource::Match => {\n                 // `Variant1(a) | Variant2(a)`, ok\n                 // Reuse definition from the first `a`.\n-                self.value_ribs.last_mut().unwrap().bindings[&renamed]\n+                def = self.value_ribs.last_mut().unwrap().bindings[&renamed];\n             }\n             Some(..) => {\n                 span_bug!(ident.span, \"two bindings with the same name from \\\n                                        unexpected pattern source {:?}\", pat_src);\n             }\n             None => {\n-                // A completely fresh binding, add to the lists.\n-                // FIXME: Later stages are not ready to deal with `Def::Err` here yet, so\n-                // define `Invalid` bindings as `Def::Local`, just don't add them to the lists.\n-                let def = Def::Local(self.definitions.local_def_id(pat_id), pat_id);\n+                // A completely fresh binding, add to the lists if it's valid.\n                 if ident.node.name != keywords::Invalid.name() {\n                     bindings.insert(renamed, outer_pat_id);\n                     self.value_ribs.last_mut().unwrap().bindings.insert(renamed, def);\n                 }\n-                def\n             }\n-        };\n+        }\n \n         PathResolution::new(def)\n     }\n@@ -2287,15 +2282,16 @@ impl<'a> Resolver<'a> {\n                 PatKind::Ident(bmode, ref ident, ref opt_pat) => {\n                     // First try to resolve the identifier as some existing\n                     // entity, then fall back to a fresh binding.\n-                    let local_def = self.resolve_identifier(ident.node, ValueNS, true);\n-                    let resolution = if let Some(LocalDef { def, .. }) = local_def {\n+                    let resolution = self.resolve_identifier(ident.node, ValueNS, true)\n+                                         .map(|local_def| PathResolution::new(local_def.def))\n+                                         .and_then(|resolution| {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n                         match def {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n-                                PathResolution::new(def)\n+                                Some(resolution)\n                             }\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n@@ -2307,23 +2303,21 @@ impl<'a> Resolver<'a> {\n                                     ResolutionError::BindingShadowsSomethingUnacceptable(\n                                         pat_src.descr(), kind_name, ident.node.name)\n                                 );\n-                                err_path_resolution()\n+                                None\n                             }\n                             Def::Local(..) | Def::Upvar(..) | Def::Fn(..) => {\n                                 // These entities are explicitly allowed\n                                 // to be shadowed by fresh bindings.\n-                                self.fresh_binding(ident, pat.id, outer_pat_id,\n-                                                   pat_src, bindings)\n+                                None\n                             }\n                             def => {\n                                 span_bug!(ident.span, \"unexpected definition for an \\\n                                                        identifier in pattern {:?}\", def);\n                             }\n                         }\n-                    } else {\n-                        // Fall back to a fresh binding.\n+                    }).unwrap_or_else(|| {\n                         self.fresh_binding(ident, pat.id, outer_pat_id, pat_src, bindings)\n-                    };\n+                    });\n \n                     self.record_def(pat.id, resolution);\n                 }"}]}