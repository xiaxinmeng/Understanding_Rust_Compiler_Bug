{"sha": "b4626b3ca07c4fcdce1d96840567005e294e5ecc", "node_id": "C_kwDOAAsO6NoAKGI0NjI2YjNjYTA3YzRmY2RjZTFkOTY4NDA1NjcwMDVlMjk0ZTVlY2M", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-08-27T16:09:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-27T16:09:37Z"}, "message": "Merge pull request #209 from rust-lang/2022-08-26_sync_from_rust\n\n2022/08/26 sync from rust", "tree": {"sha": "3fb39322d5717e88333d80eb6ca4dd996f1688a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb39322d5717e88333d80eb6ca4dd996f1688a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4626b3ca07c4fcdce1d96840567005e294e5ecc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCkHBCRBK7hj4Ov3rIwAA0owIAAx375lU/QyU2qGCKGOZDX6Y\neZpG7hIdwy16NNpYMkTuEv2xSLeTGwCM3ylxRTA87Nx00xbqYjKQv1asRVm6+6ba\n+cyGD2qtveMOEOlqYLN9pSeL8KKKsqjCSioRvN95Z/t5u++H28RFi46BCoNv9/KX\nG3sDqrNG0Aq90ug5I4HGndgixQMKpz0LCFeYrit7qqLzTyvLCJeJ9hvVbgabrEVj\nssGoMWLOrJfsmioIyJwj0mMh/TnDHUjSnoYgAHrTyqWuM/Xv1/pn4lxfUz4fanwY\ntlqgaw8bCzqyQYyPFcHUQd6PsJQVJ4oHInAbxkgizktzA5yqbSZToWNrFPEuxfQ=\n=5wvJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fb39322d5717e88333d80eb6ca4dd996f1688a0\nparent b4eb2c30a262763d59711d285979facc95e1ba56\nparent 61a7b96c800c7f0a338b3f8f4b5b1e89f82b1668\nauthor antoyo <antoyo@users.noreply.github.com> 1661616577 -0400\ncommitter GitHub <noreply@github.com> 1661616577 -0400\n\nMerge pull request #209 from rust-lang/2022-08-26_sync_from_rust\n\n2022/08/26 sync from rust"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4626b3ca07c4fcdce1d96840567005e294e5ecc", "html_url": "https://github.com/rust-lang/rust/commit/b4626b3ca07c4fcdce1d96840567005e294e5ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4626b3ca07c4fcdce1d96840567005e294e5ecc/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4eb2c30a262763d59711d285979facc95e1ba56", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eb2c30a262763d59711d285979facc95e1ba56", "html_url": "https://github.com/rust-lang/rust/commit/b4eb2c30a262763d59711d285979facc95e1ba56"}, {"sha": "61a7b96c800c7f0a338b3f8f4b5b1e89f82b1668", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a7b96c800c7f0a338b3f8f4b5b1e89f82b1668", "html_url": "https://github.com/rust-lang/rust/commit/61a7b96c800c7f0a338b3f8f4b5b1e89f82b1668"}], "stats": {"total": 341, "additions": 192, "deletions": 149}, "files": [{"sha": "89661918d05a5d14e90359c267beb57f356dab98", "filename": "example/alloc_system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_system.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -156,7 +156,7 @@ mod platform {\n     struct Header(*mut u8);\n     const HEAP_ZERO_MEMORY: DWORD = 0x00000008;\n     unsafe fn get_header<'a>(ptr: *mut u8) -> &'a mut Header {\n-        &mut *(ptr as *mut Header).offset(-1)\n+        &mut *(ptr as *mut Header).sub(1)\n     }\n     unsafe fn align_ptr(ptr: *mut u8, align: usize) -> *mut u8 {\n         let aligned = ptr.add(align - (ptr as usize & (align - 1)));"}, {"sha": "b23ecda35d3e3e0144ec9711ecc065a99fecf436", "filename": "example/mini_core.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,6 +1,6 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs, transparent_unions, auto_traits,\n+    decl_macro, rustc_attrs, transparent_unions, auto_traits,\n     thread_local\n )]\n #![no_core]\n@@ -39,14 +39,14 @@ impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n-impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U, ()>> for Box<T, ()> {}\n \n #[lang = \"receiver\"]\n pub trait Receiver {}\n \n impl<T: ?Sized> Receiver for &T {}\n impl<T: ?Sized> Receiver for &mut T {}\n-impl<T: ?Sized> Receiver for Box<T> {}\n+impl<T: ?Sized, A: Allocator> Receiver for Box<T, A> {}\n \n #[lang = \"copy\"]\n pub unsafe trait Copy {}\n@@ -411,7 +411,15 @@ pub trait FnMut<Args>: FnOnce<Args> {\n \n #[lang = \"panic\"]\n #[track_caller]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n+    unsafe {\n+        libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n+        intrinsics::abort();\n+    }\n+}\n+\n+#[lang = \"panic_no_unwind\"]\n+fn panic_no_unwind() -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n         intrinsics::abort();\n@@ -450,25 +458,40 @@ pub trait Deref {\n pub trait Allocator {\n }\n \n+impl Allocator for () {}\n+\n pub struct Global;\n \n impl Allocator for Global {}\n \n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[rustc_nonnull_optimization_guaranteed]\n+pub struct NonNull<T: ?Sized>(pub *const T);\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+\n+pub struct Unique<T: ?Sized> {\n+    pub pointer: NonNull<T>,\n+    pub _marker: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n #[lang = \"owned_box\"]\n-pub struct Box<\n-    T: ?Sized,\n-    A: Allocator = Global,\n->(*mut T, A);\n+pub struct Box<T: ?Sized, A: Allocator = Global>(Unique<T>, A);\n \n-impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized, A: Allocator> CoerceUnsized<Box<U, A>> for Box<T, A> {}\n \n impl<T: ?Sized, A: Allocator> Drop for Box<T, A> {\n     fn drop(&mut self) {\n         // drop is currently performed by compiler.\n     }\n }\n \n-impl<T> Deref for Box<T> {\n+impl<T: ?Sized, A: Allocator> Deref for Box<T, A> {\n     type Target = T;\n \n     fn deref(&self) -> &Self::Target {\n@@ -482,8 +505,8 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: *mut T, alloc: A) {\n-    libc::free(ptr as *mut u8);\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, _alloc: ()) {\n+    libc::free(ptr.pointer.0 as *mut u8);\n }\n \n #[lang = \"drop\"]\n@@ -505,16 +528,18 @@ pub union MaybeUninit<T> {\n }\n \n pub mod intrinsics {\n+    use crate::Sized;\n+\n     extern \"rust-intrinsic\" {\n         pub fn abort() -> !;\n         pub fn size_of<T>() -> usize;\n-        pub fn size_of_val<T: ?::Sized>(val: *const T) -> usize;\n+        pub fn size_of_val<T: ?Sized>(val: *const T) -> usize;\n         pub fn min_align_of<T>() -> usize;\n-        pub fn min_align_of_val<T: ?::Sized>(val: *const T) -> usize;\n+        pub fn min_align_of_val<T: ?Sized>(val: *const T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn needs_drop<T>() -> bool;\n+        pub fn needs_drop<T: ?Sized>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "14fd9eeffa6acd6c839f00be7aa91c5c7c798943", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -47,6 +47,11 @@ struct NoisyDrop {\n     inner: NoisyDropInner,\n }\n \n+struct NoisyDropUnsized {\n+    inner: NoisyDropInner,\n+    text: str,\n+}\n+\n struct NoisyDropInner;\n \n impl Drop for NoisyDrop {\n@@ -184,7 +189,9 @@ fn main() {\n         assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n \n         assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(!intrinsics::needs_drop::<[u8]>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n+        assert!(intrinsics::needs_drop::<NoisyDropUnsized>());\n \n         Unique {\n             pointer: 0 as *const &str,"}, {"sha": "0e34110a0603520a151346c548a1ff6b6dc82225", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -9,28 +9,28 @@ src/test/ui/allocator/xcrate-use.rs\n src/test/ui/allocator/xcrate-use2.rs\n src/test/ui/asm/may_unwind.rs\n src/test/ui/asm/x86_64/const.rs\n+src/test/ui/asm/x86_64/issue-96797.rs\n src/test/ui/asm/x86_64/multiple-clobber-abi.rs\n src/test/ui/async-await/async-fn-size-moved-locals.rs\n src/test/ui/async-await/async-fn-size-uninit-locals.rs\n-src/test/ui/backtrace.rs\n src/test/ui/cfg/cfg-panic.rs\n src/test/ui/debuginfo/debuginfo-emit-llvm-ir-and-split-debuginfo.rs\n src/test/ui/functions-closures/parallel-codegen-closures.rs\n src/test/ui/generator/size-moved-locals.rs\n-src/test/ui/issues/issue-32518.rs\n+src/test/ui/issues/issue-40883.rs\n src/test/ui/issues/issue-47364.rs\n-src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs\n src/test/ui/linkage-attr/linkage1.rs\n src/test/ui/lto/dylib-works.rs\n-src/test/ui/mir/mir_heavy_promoted.rs\n+src/test/ui/macros/rfc-2011-nicer-assert-messages/all-not-available-cases.rs\n+src/test/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs\n src/test/ui/numbers-arithmetic/saturating-float-casts.rs\n src/test/ui/polymorphization/promoted-function.rs\n+src/test/ui/process/nofile-limit.rs\n src/test/ui/runtime/rt-explody-panic-payloads.rs\n src/test/ui/sepcomp/sepcomp-cci.rs\n src/test/ui/sepcomp/sepcomp-extern.rs\n src/test/ui/sepcomp/sepcomp-fns-backwards.rs\n src/test/ui/sepcomp/sepcomp-fns.rs\n-src/test/ui/sepcomp/sepcomp-lib.rs\n src/test/ui/sepcomp/sepcomp-statics.rs\n src/test/ui/simd/generics.rs\n src/test/ui/simd/intrinsic/float-math-pass.rs"}, {"sha": "7ea0eebe6a128c64f1f8918009f080099eb83222", "filename": "patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/patches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/patches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-core-Disable-portable-simd-test.patch?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,29 +1,32 @@\n-From b1ae000f6da1abd3b8e9b80c40bc11c89b8ae93c Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 30 Dec 2021 16:54:40 +0100\n-Subject: [PATCH] [core] Disable portable-simd test\n+From f845df4056f5ba16b9f5bd703460c4ac40ea03b9 Mon Sep 17 00:00:00 2001\n+From: Antoni Boucher <bouanto@zoho.com>\n+Date: Fri, 26 Aug 2022 20:38:58 -0400\n+Subject: [PATCH] Edit\n \n ---\n- library/core/tests/lib.rs | 1 -\n- 1 file changed, 1 deletion(-)\n+ library/core/tests/lib.rs | 2 --\n+ 1 file changed, 2 deletions(-)\n \n diff --git a/library/core/tests/lib.rs b/library/core/tests/lib.rs\n-index 06c7be0..359e2e7 100644\n+index 59510d3..179bf26 100644\n --- a/library/core/tests/lib.rs\n +++ b/library/core/tests/lib.rs\n-@@ -75,7 +75,6 @@\n- #![feature(never_type)]\n+@@ -77,7 +77,6 @@\n  #![feature(unwrap_infallible)]\n  #![feature(result_into_ok_or_err)]\n+ #![feature(pointer_byte_offsets)]\n -#![feature(portable_simd)]\n  #![feature(ptr_metadata)]\n  #![feature(once_cell)]\n  #![feature(option_result_contains)]\n-@@ -127,7 +126,6 @@ mod pin;\n+@@ -135,7 +134,6 @@ mod pin;\n  mod pin_macro;\n  mod ptr;\n  mod result;\n -mod simd;\n  mod slice;\n  mod str;\n  mod str_lossy;\n+-- \n+2.26.2.7.g19db9cfb68.dirty\n+"}, {"sha": "775d9906bf4113fd2cb4290db9bf1bd152e12637", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-06\"\n+channel = \"nightly-2022-08-26\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "0ed3e1fbe93f689a5d4119c3380e36c24b2eb1e3", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,6 +1,6 @@\n use gccjit::{ToLValue, ToRValue, Type};\n use rustc_codegen_ssa::traits::{AbiBuilderMethods, BaseTypeMethods};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::bug;\n use rustc_middle::ty::Ty;\n use rustc_target::abi::call::{CastTarget, FnAbi, PassMode, Reg, RegKind};"}, {"sha": "11482c69d594d059c064f339a5f1237b45210a02", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -127,7 +127,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n \n     let name = OomStrategy::SYMBOL.to_string();\n     let global = context.new_global(None, GlobalKind::Exported, i8, name);\n-    let value = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let value = tcx.sess.opts.unstable_opts.oom.should_panic();\n     let value = context.new_rvalue_from_int(i8, value as i32);\n     global.global_set_initializer_rvalue(value);\n }"}, {"sha": "f863abdcc97ec12739924bc026ac9d8e1849b928", "filename": "src/archive.rs", "status": "modified", "additions": 39, "deletions": 64, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,15 +1,13 @@\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n+use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use rustc_session::Session;\n \n-use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     use_native_ar: bool,\n     use_gnu_style_archive: bool,\n }\n@@ -23,77 +21,56 @@ enum ArchiveEntry {\n     File(PathBuf),\n }\n \n-pub struct ArArchiveBuilder<'a> {\n-    config: ArchiveConfig<'a>,\n-    src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n-    // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n-    // the end of an archive for linkers to not get confused.\n-    entries: Vec<(String, ArchiveEntry)>,\n-}\n+pub struct ArArchiveBuilderBuilder;\n \n-impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n+impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n+    fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a> {\n         let config = ArchiveConfig {\n             sess,\n-            dst: output.to_path_buf(),\n             use_native_ar: false,\n             // FIXME test for linux and System V derivatives instead\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n         };\n \n-        let (src_archives, entries) = if let Some(input) = input {\n-            let mut archive = ar::Archive::new(File::open(input).unwrap());\n-            let mut entries = Vec::new();\n-\n-            let mut i = 0;\n-            while let Some(entry) = archive.next_entry() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    String::from_utf8(entry.header().identifier().to_vec()).unwrap(),\n-                    ArchiveEntry::FromArchive {\n-                        archive_index: 0,\n-                        entry_index: i,\n-                    },\n-                ));\n-                i += 1;\n-            }\n-\n-            (vec![(input.to_owned(), archive)], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n-        ArArchiveBuilder {\n+        Box::new(ArArchiveBuilder {\n             config,\n-            src_archives,\n-            entries,\n-        }\n+            src_archives: vec![],\n+            entries: vec![],\n+        })\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| name.clone()).collect()\n+    fn create_dll_import_lib(\n+        &self,\n+        _sess: &Session,\n+        _lib_name: &str,\n+        _dll_imports: &[DllImport],\n+        _tmpdir: &Path,\n+    ) -> PathBuf {\n+        unimplemented!();\n     }\n+}\n \n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name)\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n+pub struct ArArchiveBuilder<'a> {\n+    config: ArchiveConfig<'a>,\n+    src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n+    // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n+    // the end of an archive for linkers to not get confused.\n+    entries: Vec<(String, ArchiveEntry)>,\n+}\n \n+impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string(),\n             ArchiveEntry::File(file.to_owned()),\n         ));\n     }\n \n-    fn add_archive<F>(&mut self, archive_path: &Path, mut skip: F) -> std::io::Result<()>\n-    where\n-        F: FnMut(&str) -> bool + 'static,\n-    {\n+    fn add_archive(\n+        &mut self,\n+        archive_path: &Path,\n+        mut skip: Box<dyn FnMut(&str) -> bool + 'static>,\n+    ) -> std::io::Result<()> {\n         let mut archive = ar::Archive::new(std::fs::File::open(&archive_path)?);\n         let archive_index = self.src_archives.len();\n \n@@ -113,7 +90,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self: Box<Self>, output: &Path) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -133,19 +110,21 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         }\n \n         let mut builder = if self.config.use_native_ar {\n-            BuilderKind::NativeAr(&self.config.dst)\n+            BuilderKind::NativeAr(output)\n         } else if self.config.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n-                File::create(&self.config.dst).unwrap(),\n+                File::create(output).unwrap(),\n                 self.entries\n                     .iter()\n                     .map(|(name, _)| name.as_bytes().to_vec())\n                     .collect(),\n             ))\n         } else {\n-            BuilderKind::Bsd(ar::Builder::new(File::create(&self.config.dst).unwrap()))\n+            BuilderKind::Bsd(ar::Builder::new(File::create(output).unwrap()))\n         };\n \n+        let any_members = !self.entries.is_empty();\n+\n         // Add all files\n         for (entry_name, entry) in self.entries.into_iter() {\n             match entry {\n@@ -198,17 +177,13 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         std::mem::drop(builder);\n \n         // Run ranlib to be able to link the archive\n-        let status = std::process::Command::new(\"ranlib\")\n-            .arg(self.config.dst)\n-            .status()\n-            .expect(\"Couldn't run ranlib\");\n+        let status =\n+            std::process::Command::new(\"ranlib\").arg(output).status().expect(\"Couldn't run ranlib\");\n \n         if !status.success() {\n             self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n         }\n-    }\n \n-    fn inject_dll_import_lib(&mut self, _lib_name: &str, _dll_imports: &[DllImport], _tmpdir: &MaybeTempDir) {\n-        unimplemented!();\n+        any_members\n     }\n }"}, {"sha": "8cc9581e842c8a47b30e27beb783193a9ab70a6e", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -121,7 +121,7 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         // NOTE: Rust relies on LLVM not doing TBAA (https://github.com/rust-lang/unsafe-code-guidelines/issues/292).\n         context.add_command_line_option(\"-fno-strict-aliasing\");\n \n-        if tcx.sess.opts.debugging_opts.function_sections.unwrap_or(tcx.sess.target.function_sections) {\n+        if tcx.sess.opts.unstable_opts.function_sections.unwrap_or(tcx.sess.target.function_sections) {\n             context.add_command_line_option(\"-ffunction-sections\");\n             context.add_command_line_option(\"-fdata-sections\");\n         }"}, {"sha": "41df7e647b5fc44d898b828e5c347677f0e6dec9", "filename": "src/builder.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -30,7 +30,7 @@ use rustc_codegen_ssa::traits::{\n     OverflowOp,\n     StaticBuilderMethods,\n };\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_span::Span;\n@@ -820,16 +820,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn type_metadata(&mut self, _function: RValue<'gcc>, _typeid: String) {\n-        // Unsupported.\n-    }\n-\n-    fn typeid_metadata(&mut self, _typeid: String) -> RValue<'gcc> {\n-        // Unsupported.\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-    }\n-\n-\n     fn store(&mut self, val: RValue<'gcc>, ptr: RValue<'gcc>, align: Align) -> RValue<'gcc> {\n         self.store_with_flags(val, ptr, align, MemFlags::empty())\n     }\n@@ -1195,6 +1185,15 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");\n         self.llbb().add_assignment(None, expected, cmp);\n+        // NOTE: gcc doesn't support a failure memory model that is stronger than the success\n+        // memory model.\n+        let order =\n+            if failure_order as i32 > order as i32 {\n+                failure_order\n+            }\n+            else {\n+                order\n+            };\n         let success = self.compare_exchange(dst, expected, src, order, failure_order, weak);\n \n         let pair_type = self.cx.type_struct(&[src.get_type(), self.bool_type], false);"}, {"sha": "be7d48b2279a232af099a1054746dd39fe6ae88a", "filename": "src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcallee.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -2,7 +2,7 @@\n use gccjit::{FnAttribute, Visibility};\n use gccjit::{FunctionType, RValue};\n use rustc_codegen_ssa::traits::BaseTypeMethods;\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n \n use crate::abi::FnAbiGccExt;"}, {"sha": "1d44dc486683c1a33a1669bec840e8ca708f5cb2", "filename": "src/common.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -9,10 +9,8 @@ use rustc_codegen_ssa::traits::{\n     StaticMethods,\n };\n use rustc_middle::mir::Mutability;\n-use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n-use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n use crate::consts::const_alloc_to_gcc;\n@@ -125,12 +123,15 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.context.new_rvalue_from_double(typ, val)\n     }\n \n-    fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let s_str = s.as_str();\n-        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n-            self.global_string(s_str)\n-        });\n-        let len = s_str.len();\n+    fn const_str(&self, s: &str) -> (RValue<'gcc>, RValue<'gcc>) {\n+        let str_global = *self\n+            .const_str_cache\n+            .borrow_mut()\n+            .raw_entry_mut()\n+            .from_key(s)\n+            .or_insert_with(|| (s.to_owned(), self.global_string(s)))\n+            .1;\n+        let len = s.len();\n         let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self)),\n         );\n@@ -157,13 +158,13 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         None\n     }\n \n+    fn zst_to_backend(&self, _ty: Type<'gcc>) -> RValue<'gcc> {\n+        self.const_undef(self.type_ix(0))\n+    }\n+\n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, ty: Type<'gcc>) -> RValue<'gcc> {\n         let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {\n-            Scalar::Int(ScalarInt::ZST) => {\n-                assert_eq!(0, layout.size(self).bytes());\n-                self.const_undef(self.type_ix(0))\n-            }\n             Scalar::Int(int) => {\n                 let data = int.assert_bits(layout.size(self));\n \n@@ -210,6 +211,11 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         GlobalAlloc::Function(fn_instance) => {\n                             self.get_fn_addr(fn_instance)\n                         },\n+                        GlobalAlloc::VTable(ty, trait_ref) => {\n+                            let alloc = self.tcx.global_alloc(self.tcx.vtable_allocation((ty, trait_ref))).unwrap_memory();\n+                            let init = const_alloc_to_gcc(self, alloc);\n+                            self.static_addr_of(init, alloc.inner().align, None)\n+                        }\n                         GlobalAlloc::Static(def_id) => {\n                             assert!(self.tcx.is_static(def_id));\n                             self.get_static(def_id).get_address(None)"}, {"sha": "2699559dc2ad7aeecab00a946091b95057bcce5c", "filename": "src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n use rustc_session::Session;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n@@ -99,7 +99,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<String, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,"}, {"sha": "e3461b97973ecac841fe4df7c81cf469d9dd8a4a", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -356,6 +356,16 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.context.new_rvalue_from_int(self.int_type, 0)\n     }\n \n+    fn type_checked_load(\n+        &mut self,\n+        _llvtable: Self::Value,\n+        _vtable_byte_offset: u64,\n+        _typeid: Self::Value,\n+    ) -> Self::Value {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n     fn va_start(&mut self, _va_list: RValue<'gcc>) -> RValue<'gcc> {\n         unimplemented!();\n     }"}, {"sha": "dbf6ee6d285d1b6666fff36994c3a80eaed15d8d", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -395,9 +395,6 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         args: &[OperandRef<'tcx, RValue<'gcc>>],\n     ) -> Result<RValue<'gcc>, ()> {\n         macro_rules! emit_error {\n-            ($msg: tt) => {\n-                emit_error!($msg, )\n-            };\n             ($msg: tt, $($fmt: tt)*) => {\n                 span_invalid_monomorphization_error(\n                     bx.sess(), span,"}, {"sha": "e43ee5cf21dcb540c2adfc962378a8d6df40580a", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -6,7 +6,14 @@\n  * TODO(antoyo): remove the patches.\n  */\n \n-#![feature(rustc_private, decl_macro, associated_type_bounds, never_type, trusted_len)]\n+#![feature(\n+    rustc_private,\n+    decl_macro,\n+    associated_type_bounds,\n+    never_type,\n+    trusted_len,\n+    hash_raw_entry\n+)]\n #![allow(broken_intra_doc_links)]\n #![recursion_limit=\"256\"]\n #![warn(rust_2018_idioms)]\n@@ -128,15 +135,16 @@ impl CodegenBackend for GccCodegenBackend {\n     fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n+        link_binary(\n             sess,\n+            &crate::archive::ArArchiveBuilderBuilder,\n             &codegen_results,\n             outputs,\n         )\n     }\n \n-    fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n-        target_features(sess)\n+    fn target_features(&self, sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n+        target_features(sess, allow_unstable)\n     }\n }\n \n@@ -293,12 +301,12 @@ pub fn target_cpu(sess: &Session) -> &str {\n     }\n }\n \n-pub fn target_features(sess: &Session) -> Vec<Symbol> {\n+pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     supported_target_features(sess)\n         .iter()\n         .filter_map(\n             |&(feature, gate)| {\n-                if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n+                if sess.is_nightly_build() || allow_unstable || gate.is_none() { Some(feature) } else { None }\n             },\n         )\n         .filter(|_feature| {"}, {"sha": "ce439d339b6b5d2bf0dc999dadf1ae0243a0ebcf", "filename": "src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_item.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -4,7 +4,7 @@ use rustc_codegen_ssa::traits::PreDefineMethods;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::{self, Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n \n use crate::attributes;"}, {"sha": "c97e9586005bbdb11401a9961156a4576fe5b128", "filename": "src/type_.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -1,7 +1,7 @@\n use std::convert::TryInto;\n \n use gccjit::{RValue, Struct, Type};\n-use rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods};\n+use rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, TypeMembershipMethods};\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_middle::{bug, ty};\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -290,3 +290,14 @@ pub fn struct_fields<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout\n \n     (result, packed)\n }\n+\n+impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n+    fn set_type_metadata(&self, _function: RValue<'gcc>, _typeid: String) {\n+        // Unsupported.\n+    }\n+\n+    fn typeid_metadata(&self, _typeid: String) -> RValue<'gcc> {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+}"}, {"sha": "29d394dbba4addb2071fdafd882a30b80ceec9b7", "filename": "src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Write;\n use gccjit::{Struct, Type};\n use crate::rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods};\n use rustc_middle::bug;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_target::abi::{self, Abi, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};"}, {"sha": "ed43c645bd2dc766c614d41f7e686aa826d85e55", "filename": "test.sh", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -321,12 +321,14 @@ EOF\n     git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n \n     rm -r src/test/ui/{abi*,extern/,panic-runtime/,panics/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,borrowck/,chalkify/bugs/,test*,*lto*.rs,consts/const-float-bits-reject-conv.rs,consts/issue-miri-1910.rs} || true\n+    rm src/test/ui/mir/mir_heavy_promoted.rs # this tests is oom-killed in the CI.\n     for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n       rm $test\n     done\n     git checkout src/test/ui/lto/auxiliary/dylib.rs\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n+    git checkout src/test/ui/macros/rfc-2011-nicer-assert-messages/auxiliary/common.rs\n \n     RUSTC_ARGS=\"-Zpanic-abort-tests -Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n \n@@ -338,7 +340,7 @@ EOF\n         xargs -a ../failing-ui-tests.txt -d'\\n' rm\n     else\n         # Removing all tests.\n-        find src/test/ui -type f -name '*.rs' -exec rm {} \\;\n+        find src/test/ui -type f -name '*.rs' -not -path '*/auxiliary/*' -delete\n         # Putting back only the failing ones.\n         xargs -a ../failing-ui-tests.txt -d'\\n' git checkout --\n     fi\n@@ -354,7 +356,7 @@ EOF\n         count=$((count + 1))\n         split -d -l $count -a 1 ui_tests ui_tests.split\n         # Removing all tests.\n-        find src/test/ui -type f -name '*.rs' -not -path \"*/auxiliary/*\" -exec rm {} \\;\n+        find src/test/ui -type f -name '*.rs' -not -path \"*/auxiliary/*\" -delete\n         # Putting back only the ones we want to test.\n         xargs -a \"ui_tests.split$current_part\" -d'\\n' git checkout --\n     fi\n@@ -372,7 +374,7 @@ function test_successful_rustc() {\n }\n \n function clean_ui_tests() {\n-    find rust/build/x86_64-unknown-linux-gnu/test/ui/ -name stamp -exec rm -rf {} \\;\n+    find rust/build/x86_64-unknown-linux-gnu/test/ui/ -name stamp -delete\n }\n \n function all() {"}, {"sha": "c53d98340f04b63ef825f613214943bb7d6f0658", "filename": "tests/run/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Farray.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -79,7 +79,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         intrinsics::abort();"}, {"sha": "b95a7b714153cb639d316be526e205676b5b6432", "filename": "tests/run/assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fassign.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -64,7 +64,7 @@ mod intrinsics {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         libc::fflush(libc::stdout);"}, {"sha": "4d01d879dc1dfafeeafc0600d38703168d107240", "filename": "tests/run/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fclosure.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -177,7 +177,7 @@ impl Add for isize {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         intrinsics::abort();"}, {"sha": "38b3084cb6c7abaef77633553816888dabc57edb", "filename": "tests/run/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fcondition.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -82,7 +82,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         intrinsics::abort();"}, {"sha": "995fc5ca5d23caf0a267374fd370a3f3a9a6eeb2", "filename": "tests/run/fun_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Ffun_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Ffun_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Ffun_ptr.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -76,7 +76,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         intrinsics::abort();"}, {"sha": "4ca6236253952820c2693d6b8dcce019bc4c98aa", "filename": "tests/run/int_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fint_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fint_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint_overflow.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -62,7 +62,7 @@ mod intrinsics {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         // Panicking is expected iff overflow checking is enabled.\n         #[cfg(debug_assertions)]"}, {"sha": "814bb1a612e4bdd6784434d36565645fbda8596c", "filename": "tests/run/mut_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fmut_ref.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -66,7 +66,7 @@ mod intrinsics {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         libc::fflush(libc::stdout);"}, {"sha": "affe12067ffe7dba668c6dd1487fa14f7dd6e6d4", "filename": "tests/run/operations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Foperations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Foperations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Foperations.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -72,7 +72,7 @@ mod intrinsics {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         libc::fflush(libc::stdout);"}, {"sha": "08481739a7f9035071a157f75bec117540963ee0", "filename": "tests/run/ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4626b3ca07c4fcdce1d96840567005e294e5ecc/tests%2Frun%2Fptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fptr_cast.rs?ref=b4626b3ca07c4fcdce1d96840567005e294e5ecc", "patch": "@@ -76,7 +76,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[lang = \"panic\"]\n #[track_caller]\n #[no_mangle]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n         intrinsics::abort();"}]}