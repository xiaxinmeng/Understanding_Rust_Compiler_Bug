{"sha": "15c1da4e27587951a8806b6485a8051103019a02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzFkYTRlMjc1ODc5NTFhODgwNmI2NDg1YTgwNTExMDMwMTlhMDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:19:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:34:59Z"}, "message": "Convert from using named fields to always using indices", "tree": {"sha": "5df7a7a69517ae1e1b8c0c0b803ab964f33ed695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df7a7a69517ae1e1b8c0c0b803ab964f33ed695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c1da4e27587951a8806b6485a8051103019a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c1da4e27587951a8806b6485a8051103019a02", "html_url": "https://github.com/rust-lang/rust/commit/15c1da4e27587951a8806b6485a8051103019a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c1da4e27587951a8806b6485a8051103019a02/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e30f3e52be35c8992ae882a38b9c74e6adbfef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e30f3e52be35c8992ae882a38b9c74e6adbfef6", "html_url": "https://github.com/rust-lang/rust/commit/1e30f3e52be35c8992ae882a38b9c74e6adbfef6"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "aa189744701784d53abbcff6633d00869079c901", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=15c1da4e27587951a8806b6485a8051103019a02", "patch": "@@ -1731,6 +1731,13 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n         self.fields.iter().find(|f| f.name == name)\n     }\n \n+    #[inline]\n+    pub fn index_of_field_named(&self,\n+                                name: ast::Name)\n+                                -> Option<usize> {\n+        self.fields.iter().position(|f| f.name == name)\n+    }\n+\n     #[inline]\n     pub fn field_named(&self, name: ast::Name) -> &FieldDefData<'tcx, 'container> {\n         self.find_field_named(name).unwrap()"}, {"sha": "23ca22129fdc0f99606fdba618d99e7048f8e1a1", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=15c1da4e27587951a8806b6485a8051103019a02", "patch": "@@ -149,16 +149,19 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 block.and(Rvalue::Aggregate(AggregateKind::Closure(closure_id, substs), upvars))\n             }\n             ExprKind::Adt { adt_def, variant_index, substs, fields, base } => { // see (*) above\n-                // first process the set of fields\n+                // first process the set of fields that were provided\n+                // (evaluating them in order given by user)\n                 let fields_map: FnvHashMap<_, _> =\n                     fields.into_iter()\n                           .map(|f| (f.name, unpack!(block = this.as_operand(block, f.expr))))\n                           .collect();\n \n-                let field_names = this.hir.fields(adt_def, variant_index);\n-\n+                // if base expression is given, evaluate it now\n                 let base = base.map(|base| unpack!(block = this.as_lvalue(block, base)));\n \n+                // get list of all fields that we will need\n+                let field_names = this.hir.all_fields(adt_def, variant_index);\n+\n                 // for the actual values we use, take either the\n                 // expr the user specified or, if they didn't\n                 // specify something for this field name, create a"}, {"sha": "5bf326ba5a5fe0b6f1787fdea9f52c75b7120767", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1da4e27587951a8806b6485a8051103019a02/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=15c1da4e27587951a8806b6485a8051103019a02", "patch": "@@ -443,10 +443,19 @@ pub type LvalueProjection<'tcx> =\n pub type LvalueElem<'tcx> =\n     ProjectionElem<'tcx,Operand<'tcx>>;\n \n+/// Index into the list of fields found in a `VariantDef`\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum Field {\n-    Named(Name),\n-    Indexed(usize),\n+pub struct Field(u32);\n+\n+impl Field {\n+    pub fn new(value: usize) -> Field {\n+        assert!(value < (u32::MAX) as usize);\n+        Field(value as u32)\n+    }\n+\n+    pub fn index(self) -> usize {\n+        self.0 as usize\n+    }\n }\n \n impl<'tcx> Lvalue<'tcx> {\n@@ -491,10 +500,8 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n                         write!(fmt,\"({:?} as {:?})\", data.base, variant_index),\n                     ProjectionElem::Deref =>\n                         write!(fmt,\"(*{:?})\", data.base),\n-                    ProjectionElem::Field(Field::Named(name)) =>\n-                        write!(fmt,\"{:?}.{:?}\", data.base, name),\n-                    ProjectionElem::Field(Field::Indexed(index)) =>\n-                        write!(fmt,\"{:?}.{:?}\", data.base, index),\n+                    ProjectionElem::Field(field) =>\n+                        write!(fmt,\"{:?}.{:?}\", data.base, field.index()),\n                     ProjectionElem::Index(ref index) =>\n                         write!(fmt,\"{:?}[{:?}]\", data.base, index),\n                     ProjectionElem::ConstantIndex { offset, min_length, from_end: false } =>"}]}