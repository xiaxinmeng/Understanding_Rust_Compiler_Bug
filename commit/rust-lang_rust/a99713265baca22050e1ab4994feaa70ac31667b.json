{"sha": "a99713265baca22050e1ab4994feaa70ac31667b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OTcxMzI2NWJhY2EyMjA1MGUxYWI0OTk0ZmVhYTcwYWMzMTY2N2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:46:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:46:35Z"}, "message": "Teach fold about ty_obj.", "tree": {"sha": "c6796d1974b96566e52b80767ce6e5340f565068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6796d1974b96566e52b80767ce6e5340f565068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a99713265baca22050e1ab4994feaa70ac31667b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a99713265baca22050e1ab4994feaa70ac31667b", "html_url": "https://github.com/rust-lang/rust/commit/a99713265baca22050e1ab4994feaa70ac31667b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a99713265baca22050e1ab4994feaa70ac31667b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f914e6d350020ba69b35a7011e9f86e2fa9aed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f914e6d350020ba69b35a7011e9f86e2fa9aed1", "html_url": "https://github.com/rust-lang/rust/commit/0f914e6d350020ba69b35a7011e9f86e2fa9aed1"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "545707094f6e41730e22ebfb0a137d5b08a907ae", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a99713265baca22050e1ab4994feaa70ac31667b/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99713265baca22050e1ab4994feaa70ac31667b/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=a99713265baca22050e1ab4994feaa70ac31667b", "patch": "@@ -51,6 +51,9 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          vec[ast.ty_field] elts) -> @ty)          fold_ty_rec,\n \n+     (fn(&ENV e, &span sp,\n+         vec[ast.ty_method] meths) -> @ty)        fold_ty_obj,\n+\n      (fn(&ENV e, &span sp,\n          vec[rec(ast.mode mode, @ty ty)] inputs,\n          @ty output) -> @ty)                      fold_ty_fn,\n@@ -291,6 +294,21 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n             ret fld.fold_ty_rec(env_, t.span, flds_);\n         }\n \n+        case (ast.ty_obj(?meths)) {\n+            let vec[ast.ty_method] meths_ = vec();\n+            for (ast.ty_method m in meths) {\n+                auto tfn = fld.fold_ty_fn(env_, t.span,\n+                                          m.inputs, m.output);\n+                alt (tfn.node) {\n+                    case (ast.ty_fn(?ins, ?out)) {\n+                        append[ast.ty_method]\n+                            (meths_, rec(inputs=ins, output=out with m));\n+                    }\n+                }\n+            }\n+            ret fld.fold_ty_obj(env_, t.span, meths_);\n+        }\n+\n         case (ast.ty_path(?pth, ?ref_opt)) {\n             let vec[ast.name] path = vec();\n             for (ast.name n in pth) {\n@@ -787,6 +805,11 @@ fn identity_fold_ty_rec[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.ty_rec(elts));\n }\n \n+fn identity_fold_ty_obj[ENV](&ENV env, &span sp,\n+                             vec[ast.ty_method] meths) -> @ty {\n+    ret @respan(sp, ast.ty_obj(meths));\n+}\n+\n fn identity_fold_ty_fn[ENV](&ENV env, &span sp,\n                             vec[rec(ast.mode mode, @ty ty)] inputs,\n                             @ty output) -> @ty {\n@@ -1091,6 +1114,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_ty_vec     = bind identity_fold_ty_vec[ENV](_,_,_),\n          fold_ty_tup     = bind identity_fold_ty_tup[ENV](_,_,_),\n          fold_ty_rec     = bind identity_fold_ty_rec[ENV](_,_,_),\n+         fold_ty_obj     = bind identity_fold_ty_obj[ENV](_,_,_),\n          fold_ty_fn      = bind identity_fold_ty_fn[ENV](_,_,_,_),\n          fold_ty_path    = bind identity_fold_ty_path[ENV](_,_,_,_),\n          fold_ty_mutable = bind identity_fold_ty_mutable[ENV](_,_,_),"}]}