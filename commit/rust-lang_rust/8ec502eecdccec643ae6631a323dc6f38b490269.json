{"sha": "8ec502eecdccec643ae6631a323dc6f38b490269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzUwMmVlY2RjY2VjNjQzYWU2NjMxYTMyM2RjNmYzOGI0OTAyNjk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-17T19:18:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T07:48:56Z"}, "message": "syntax: Introduce `default`/`with_unstable` constructors for `ExpnInfo`", "tree": {"sha": "efc3e263154b0a4f74a9abd57df443cdd8d4ed37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc3e263154b0a4f74a9abd57df443cdd8d4ed37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec502eecdccec643ae6631a323dc6f38b490269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec502eecdccec643ae6631a323dc6f38b490269", "html_url": "https://github.com/rust-lang/rust/commit/8ec502eecdccec643ae6631a323dc6f38b490269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec502eecdccec643ae6631a323dc6f38b490269/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e1141c45c71c56cc4904b72f2212701b5912d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e1141c45c71c56cc4904b72f2212701b5912d4", "html_url": "https://github.com/rust-lang/rust/commit/68e1141c45c71c56cc4904b72f2212701b5912d4"}], "stats": {"total": 139, "additions": 59, "deletions": 80}, "files": [{"sha": "0edf407f7c9e3e76b746200336ef65301f73e3cd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -62,14 +62,14 @@ use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n+use syntax::source_map::{self, respan, ExpnInfo, CompilerDesugaringKind, Spanned};\n use syntax::source_map::CompilerDesugaringKind::IfTemporary;\n use syntax::std_inject;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::parse::token::{self, Token};\n use syntax::visit::{self, Visitor};\n-use syntax_pos::{DUMMY_SP, edition, Span};\n+use syntax_pos::{DUMMY_SP, Span};\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n@@ -853,14 +853,10 @@ impl<'a> LoweringContext<'a> {\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     ) -> Span {\n         let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(source_map::ExpnInfo {\n-            call_site: span,\n+        mark.set_expn_info(ExpnInfo {\n             def_site: Some(span),\n-            format: source_map::CompilerDesugaring(reason),\n             allow_internal_unstable,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: edition::Edition::from_session(),\n+            ..ExpnInfo::default(source_map::CompilerDesugaring(reason), span, self.sess.edition())\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }"}, {"sha": "d402b0ddf6e85f3be4a3fb18c3ca159ab0a3724b", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n     mut_visit::{self, MutVisitor},\n     parse::ParseSess,\n     ptr::P,\n-    symbol::{kw, sym, Symbol}\n+    symbol::{kw, sym}\n };\n use syntax_pos::Span;\n \n@@ -58,11 +58,10 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n     fn flat_map_item(&mut self, item: P<Item>) -> SmallVec<[P<Item>; 1]> {\n         debug!(\"in submodule {}\", self.in_submod);\n \n-        let name = if attr::contains_name(&item.attrs, sym::global_allocator) {\n-            \"global_allocator\"\n-        } else {\n+        if !attr::contains_name(&item.attrs, sym::global_allocator) {\n             return mut_visit::noop_flat_map_item(item, self);\n-        };\n+        }\n+\n         match item.node {\n             ItemKind::Static(..) => {}\n             _ => {\n@@ -87,15 +86,9 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n \n         // Create a fresh Mark for the new macro expansion we are about to do\n         let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo {\n-            call_site: item.span, // use the call site of the static\n-            def_site: None,\n-            format: MacroAttribute(Symbol::intern(name)),\n-            allow_internal_unstable: Some([sym::rustc_attrs][..].into()),\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: self.sess.edition,\n-        });\n+        mark.set_expn_info(ExpnInfo::with_unstable(\n+            MacroAttribute(sym::global_allocator), item.span, self.sess.edition, &[sym::rustc_attrs]\n+        ));\n \n         // Tie the span to the macro expansion info we just created\n         let span = item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "abc451c96ae0ef9f1cdc794fb08a6e6f0f42e39b", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -60,15 +60,10 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n     }\n     pretty_name.push(')');\n \n-    cx.current_expansion.mark.set_expn_info(ExpnInfo {\n-        call_site: span,\n-        def_site: None,\n-        format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n-        allow_internal_unstable: Some([sym::rustc_attrs, sym::structural_match][..].into()),\n-        allow_internal_unsafe: false,\n-        local_inner_macros: false,\n-        edition: cx.parse_sess.edition,\n-    });\n+    cx.current_expansion.mark.set_expn_info(ExpnInfo::with_unstable(\n+        ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)), span, cx.parse_sess.edition,\n+        &[sym::rustc_attrs, sym::structural_match],\n+    ));\n \n     let span = span.with_ctxt(cx.backtrace());\n     item.visit_attrs(|attrs| {"}, {"sha": "6630bf9081546de2a712a73d7355e09debf9465a", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -16,15 +16,9 @@ use syntax_pos::{DUMMY_SP, Span};\n /// The expanded code uses the unstable `#[prelude_import]` attribute.\n fn ignored_span(sp: Span, edition: Edition) -> Span {\n     let mark = Mark::fresh(Mark::root());\n-    mark.set_expn_info(ExpnInfo {\n-        call_site: DUMMY_SP,\n-        def_site: None,\n-        format: MacroAttribute(Symbol::intern(\"std_inject\")),\n-        allow_internal_unstable: Some([sym::prelude_import][..].into()),\n-        allow_internal_unsafe: false,\n-        local_inner_macros: false,\n-        edition,\n-    });\n+    mark.set_expn_info(ExpnInfo::with_unstable(\n+        MacroAttribute(Symbol::intern(\"std_inject\")), sp, edition, &[sym::prelude_import]\n+    ));\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }\n "}, {"sha": "f90b76721ee16a29402eb3e432505abb288df948", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -280,15 +280,10 @@ fn generate_test_harness(sess: &ParseSess,\n         test_runner\n     };\n \n-    mark.set_expn_info(ExpnInfo {\n-        call_site: DUMMY_SP,\n-        def_site: None,\n-        format: MacroAttribute(sym::test_case),\n-        allow_internal_unstable: Some([sym::main, sym::test, sym::rustc_attrs][..].into()),\n-        allow_internal_unsafe: false,\n-        local_inner_macros: false,\n-        edition: sess.edition,\n-    });\n+    mark.set_expn_info(ExpnInfo::with_unstable(\n+        MacroAttribute(sym::test_case), DUMMY_SP, sess.edition,\n+        &[sym::main, sym::test, sym::rustc_attrs],\n+    ));\n \n     TestHarnessGenerator {\n         cx,"}, {"sha": "45e65288a24ee6a3b7614f24ef77d961812cb321", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -347,17 +347,10 @@ fn mk_decls(\n     custom_macros: &[ProcMacroDef],\n ) -> P<ast::Item> {\n     let mark = Mark::fresh(Mark::root());\n-    mark.set_expn_info(ExpnInfo {\n-        call_site: DUMMY_SP,\n-        def_site: None,\n-        format: MacroAttribute(sym::proc_macro),\n-        allow_internal_unstable: Some([\n-            sym::rustc_attrs, Symbol::intern(\"proc_macro_internals\")\n-        ][..].into()),\n-        allow_internal_unsafe: false,\n-        local_inner_macros: false,\n-        edition: cx.parse_sess.edition,\n-    });\n+    mark.set_expn_info(ExpnInfo::with_unstable(\n+        MacroAttribute(sym::proc_macro), DUMMY_SP, cx.parse_sess.edition,\n+        &[sym::rustc_attrs, Symbol::intern(\"proc_macro_internals\")],\n+    ));\n     let span = DUMMY_SP.apply_mark(mark);\n \n     let hidden = cx.meta_list_item_word(span, sym::hidden);"}, {"sha": "24d3055e7114087192cb2ccfa784ac31ebe96425", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -8,7 +8,7 @@ use syntax::attr;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::symbol::{Symbol, sym};\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n use syntax::source_map::{ExpnInfo, MacroAttribute};\n use std::iter;\n \n@@ -62,15 +62,10 @@ pub fn expand_test_or_bench(\n \n     let (sp, attr_sp) = {\n         let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo {\n-            call_site: DUMMY_SP,\n-            def_site: None,\n-            format: MacroAttribute(sym::test),\n-            allow_internal_unstable: Some([sym::rustc_attrs, sym::test][..].into()),\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: cx.parse_sess.edition,\n-        });\n+        mark.set_expn_info(ExpnInfo::with_unstable(\n+            MacroAttribute(sym::test), attr_sp, cx.parse_sess.edition,\n+            &[sym::rustc_attrs, sym::test],\n+        ));\n         (item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark)),\n          attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark)))\n     };"}, {"sha": "6e3bc05b65e4ee38234135437b9da2b4971b9945", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -15,7 +15,7 @@ use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n use syntax::source_map::{ExpnInfo, MacroAttribute};\n use syntax::feature_gate;\n \n@@ -37,15 +37,10 @@ pub fn expand(\n \n     let sp = {\n         let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo {\n-            call_site: DUMMY_SP,\n-            def_site: None,\n-            format: MacroAttribute(sym::test_case),\n-            allow_internal_unstable: Some([sym::test, sym::rustc_attrs][..].into()),\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: ecx.parse_sess.edition,\n-        });\n+        mark.set_expn_info(ExpnInfo::with_unstable(\n+            MacroAttribute(sym::test_case), attr_sp, ecx.parse_sess.edition,\n+            &[sym::test, sym::rustc_attrs],\n+        ));\n         attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     };\n "}, {"sha": "e9a912ddbc237b133aa0e8634135183569f877da", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec502eecdccec643ae6631a323dc6f38b490269/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=8ec502eecdccec643ae6631a323dc6f38b490269", "patch": "@@ -682,6 +682,29 @@ pub struct ExpnInfo {\n     pub edition: Edition,\n }\n \n+impl ExpnInfo {\n+    /// Constructs an expansion info with default properties.\n+    pub fn default(format: ExpnFormat, call_site: Span, edition: Edition) -> ExpnInfo {\n+        ExpnInfo {\n+            call_site,\n+            def_site: None,\n+            format,\n+            allow_internal_unstable: None,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            edition,\n+        }\n+    }\n+\n+    pub fn with_unstable(format: ExpnFormat, call_site: Span, edition: Edition,\n+                         allow_internal_unstable: &[Symbol]) -> ExpnInfo {\n+        ExpnInfo {\n+            allow_internal_unstable: Some(allow_internal_unstable.into()),\n+            ..ExpnInfo::default(format, call_site, edition)\n+        }\n+    }\n+}\n+\n /// The source of expansion.\n #[derive(Clone, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum ExpnFormat {"}]}