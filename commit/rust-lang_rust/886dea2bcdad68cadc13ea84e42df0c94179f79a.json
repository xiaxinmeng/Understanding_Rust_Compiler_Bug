{"sha": "886dea2bcdad68cadc13ea84e42df0c94179f79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NmRlYTJiY2RhZDY4Y2FkYzEzZWE4NGU0MmRmMGM5NDE3OWY3OWE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-22T19:28:02Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-27T19:17:37Z"}, "message": "Make `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default", "tree": {"sha": "f80981ae1f10ed1e5da13fcfa715b5fc054dee37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f80981ae1f10ed1e5da13fcfa715b5fc054dee37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886dea2bcdad68cadc13ea84e42df0c94179f79a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmEAW9EACgkQtAh+UQ6Y\nsWQ91RAAqo/U3LBPtnnLCZfZ3P2IZcGoFh+KevE8jqQ7I4Ob3m6gzYWDcXXTR7BJ\nCUEZxNqMgbsyxXQA2SL/Du1o0rNrhZ0UEF98ubsPFk2dtOwWR+D8vSkJm5fg1h4t\nHv2GQRmhPtlAXSsLEOVzLTvwLk6iPrLpjcB0JpNKl3rCXs0Iz1CHki5DGUNopeos\nNCx6Ic6uTVxEJ8kRGHi4TYSG1O5Kunz3h6p7wpLiYlIFBjFPeJESH3dnH5kspU1l\nwog+NCPGQzhZOCM3r2kB8zTDH8nTXA/46BKSwusx/xFI8WVdbKuNY/qNFWSZzuQj\nYjc6GaIX8dpj7UwMJO0qbb60bYwQKCvRpz9ZcJKXvr6moZeq27OgJ1NU8V2Ym12t\nrDUbuwGsMEfXiv/zRDqjSj0WCnbRXiHjXI/cfq0lmCd8+ew/ZCSR8q6wtakqRIq8\nX6Uy0ggew09Xr2r+ce2P4/z95P6Rx6qN+LGhw2qLTQmvsMRs1y4lKFOO/i95h1K0\nx9uT4FYa7HAXNjft2jObtDDDDqCEzFz9eGXvnhNG6/mcWEC8SYXnrqy/xRQxMi1F\n33tUOtEx4OrvvyczVz50BN4tgzWKaIsEDJ1UPLoQ26Hfq99qMRqXCheYEZ7dRjMc\n88rzdpY0RHNYp/qVnAkrbprgtDyL55mgdlCr48yXNBkXITsOyaI=\n=dL4d\n-----END PGP SIGNATURE-----", "payload": "tree f80981ae1f10ed1e5da13fcfa715b5fc054dee37\nparent 3bc9dd0dd293ab82945e35888ed6d7ab802761ef\nauthor Aaron Hill <aa1ronham@gmail.com> 1626982082 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1627413457 -0500\n\nMake `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886dea2bcdad68cadc13ea84e42df0c94179f79a", "html_url": "https://github.com/rust-lang/rust/commit/886dea2bcdad68cadc13ea84e42df0c94179f79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886dea2bcdad68cadc13ea84e42df0c94179f79a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "html_url": "https://github.com/rust-lang/rust/commit/3bc9dd0dd293ab82945e35888ed6d7ab802761ef"}], "stats": {"total": 119, "additions": 91, "deletions": 28}, "files": [{"sha": "7195c41eae92e7aacb32d08ad578f93c977f1dfb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -2799,7 +2799,7 @@ declare_lint! {\n     /// [issue #79813]: https://github.com/rust-lang/rust/issues/79813\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-    Allow,\n+    Warn,\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\","}, {"sha": "676695795badcdde278ed9f47f4a08bacb1e43d4", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -290,7 +290,7 @@ macro_rules! dbg {\n     // `$val` expression could be a block (`{ .. }`), in which case the `eprintln!`\n     // will be malformed.\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!())\n     };\n     ($val:expr $(,)?) => {\n         // Use of `match` here is intentional because it affects the lifetimes"}, {"sha": "0685358851edda9aae3c0bd6ef27ea867d9aff66", "filename": "src/test/ui/hygiene/auxiliary/intercrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fintercrate.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -5,7 +5,7 @@ pub mod foo {\n     mod bar {\n         fn f() -> u32 { 1 }\n         pub macro m() {\n-            f();\n+            f()\n         }\n     }\n }"}, {"sha": "a06d9255ab5b0d598f9a0fbbc71e92fcc8561d69", "filename": "src/test/ui/hygiene/hygienic-label-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -3,5 +3,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    'x: loop { foo!() }\n+    'x: loop { foo!(); }\n }"}, {"sha": "c1ed861836c1cea08f164c58a08b8c057c4be6d0", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |     'x: loop { foo!() }\n-   |                ------ in this macro invocation\n+LL |     'x: loop { foo!(); }\n+   |                ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ab0559e1b6a8379adcbf912800bbe78fcf04ac32", "filename": "src/test/ui/hygiene/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -4,6 +4,6 @@ macro_rules! foo {\n \n pub fn main() {\n     'x: for _ in 0..1 {\n-        foo!()\n+        foo!();\n     };\n }"}, {"sha": "29d1b67e09f9b88c137729b11efce84a4279a2d3", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -4,8 +4,8 @@ error[E0426]: use of undeclared label `'x`\n LL |     () => { break 'x; }\n    |                   ^^ undeclared label `'x`\n ...\n-LL |         foo!()\n-   |         ------ in this macro invocation\n+LL |         foo!();\n+   |         ------- in this macro invocation\n    |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6f9e6ec0a57ff0c17d87b33c10084e202c2bfe39", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/allow-semicolon-in-expressions-from-macros.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc9dd0dd293ab82945e35888ed6d7ab802761ef/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fallow-semicolon-in-expressions-from-macros.rs?ref=3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "patch": "@@ -1,15 +0,0 @@\n-// check-pass\n-// Ensure that trailing semicolons are allowed by default\n-\n-macro_rules! foo {\n-    () => {\n-        true;\n-    }\n-}\n-\n-fn main() {\n-    let val = match true {\n-        true => false,\n-        _ => foo!()\n-    };\n-}"}, {"sha": "2c63311e659781de89fc1d1358d2bb348cc8cd59", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// Ensure that trailing semicolons cause warnings by default\n+\n+macro_rules! foo {\n+    () => {\n+        true; //~  WARN trailing semicolon in macro\n+              //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    let _val = match true {\n+        true => false,\n+        _ => foo!()\n+    };\n+}"}, {"sha": "d770a8c8f36e6f7c6b3d3c91d599220f925f12dc", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -0,0 +1,16 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/warn-semicolon-in-expressions-from-macros.rs:6:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |         _ => foo!()\n+   |              ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d09fdf118e6f4e073683aa5d8cd9271e2d327551", "filename": "src/test/ui/macros/macro-context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -6,6 +6,8 @@ macro_rules! m {\n                             //~| ERROR macro expansion ignores token `;`\n                             //~| ERROR cannot find type `i` in this scope\n                             //~| ERROR cannot find value `i` in this scope\n+                            //~| WARN trailing semicolon in macro\n+                            //~| WARN this was previously\n }\n \n fn main() {"}, {"sha": "3b8a6f17491582a7df22c0881e91157b86e1600b", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -64,7 +64,21 @@ LL |     let i = m!();\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-context.rs:3:15\n+   |\n+LL |     () => ( i ; typeof );\n+   |               ^\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0412, E0425.\n For more information about an error, try `rustc --explain E0412`."}, {"sha": "3fb4e0dbfa64937a685c44ab365a2f2f53eafeab", "filename": "src/test/ui/macros/macro-in-expression-context.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -3,6 +3,10 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +16,8 @@ macro_rules! foo {\n fn main() {\n     foo!();\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "fc434071dcd28c5795ad3c3b4954b2152be9d966", "filename": "src/test/ui/macros/macro-in-expression-context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -3,6 +3,10 @@\n macro_rules! foo {\n     () => {\n         assert_eq!(\"A\", \"A\");\n+        //~^ WARN trailing semicolon in macro\n+        //~| WARN this was previously\n+        //~| NOTE for more information\n+        //~| NOTE `#[warn(semicolon_in_expressions_from_macros)]` on by default\n         assert_eq!(\"B\", \"B\");\n     }\n     //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n@@ -12,4 +16,8 @@ macro_rules! foo {\n fn main() {\n     foo!()\n     //~^ NOTE caused by the macro expansion here\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n+    //~| NOTE in this expansion\n }"}, {"sha": "ddc1709a270936621151c685a53b5db68146f425", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -1,5 +1,5 @@\n error: macro expansion ignores token `assert_eq` and any following\n-  --> $DIR/macro-in-expression-context.rs:6:9\n+  --> $DIR/macro-in-expression-context.rs:10:9\n    |\n LL |         assert_eq!(\"B\", \"B\");\n    |         ^^^^^^^^^\n@@ -11,5 +11,19 @@ LL |     foo!()\n    |\n    = note: the usage of `foo!` is likely invalid in expression context\n \n-error: aborting due to previous error\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/macro-in-expression-context.rs:5:29\n+   |\n+LL |         assert_eq!(\"A\", \"A\");\n+   |                             ^\n+...\n+LL |     foo!()\n+   |     ------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "04d34e21cdc74b1bc78999de1f015c50e7bb3988", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886dea2bcdad68cadc13ea84e42df0c94179f79a/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs?ref=886dea2bcdad68cadc13ea84e42df0c94179f79a", "patch": "@@ -17,7 +17,7 @@ macro_rules! wrap {\n     (first, $e:expr) => { wrap!(second, $e + 1) };\n     (second, $e:expr) => { wrap!(third, $e + 2) };\n     (third, $e:expr) => {\n-        print_bang!($e + 3);\n+        print_bang!($e + 3)\n     };\n }\n "}]}