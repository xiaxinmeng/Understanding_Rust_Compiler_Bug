{"sha": "cc497c4c84be72d0c4a06ef1b202faf266b0843a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNDk3YzRjODRiZTcyZDBjNGEwNmVmMWIyMDJmYWYyNjZiMDg0M2E=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T04:46:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T04:46:59Z"}, "message": "Rollup merge of #69188 - GuillaumeGomez:clean-up-e0309, r=Dylan-DPC\n\nClean up E0309 explanation\n\nr? @Dylan-DPC", "tree": {"sha": "5dfbd881c26c3225cc85f403f2d2990957be3322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dfbd881c26c3225cc85f403f2d2990957be3322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc497c4c84be72d0c4a06ef1b202faf266b0843a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeShrDCRBK7hj4Ov3rIwAAdHIIAKOe4hIQwwM2XBVRdMGc7PX+\nlG84bZuRaRA3vAtq0luRMjS/R/NxmjT3DQK6qk1+JCzZvYabVupBDt77suUbLCSw\nbeecbNl+/7cgFhkilbt9Z9kiXYI3yBB1qqClEdOPeQJVzX9xdZT+2SYw/O2dlljL\nvCOoAAB8Lkif9m0cu7vKsTFQ4mwOZKUl0OUlC0I5/BzY7mLNwFwVS32fg/fb7DX8\nxisxLVLWEj3vl/W5piBfjUpN/QbJVKTIuNfIy0TZAO/j5So4pCsD3/Lr6jPKBnJ6\n2msTRKQuyhfIDDR/YBgBOzKs51BUGL/RnrETFPpzUeODxJ/8w5nxASxScNmgz4Q=\n=2GaX\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dfbd881c26c3225cc85f403f2d2990957be3322\nparent 3e7addccc6acb1fb8393233c895904c43fc429ee\nparent cadf9efad123a62472cad45f22569747cc599256\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581914819 +0900\ncommitter GitHub <noreply@github.com> 1581914819 +0900\n\nRollup merge of #69188 - GuillaumeGomez:clean-up-e0309, r=Dylan-DPC\n\nClean up E0309 explanation\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc497c4c84be72d0c4a06ef1b202faf266b0843a", "html_url": "https://github.com/rust-lang/rust/commit/cc497c4c84be72d0c4a06ef1b202faf266b0843a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc497c4c84be72d0c4a06ef1b202faf266b0843a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7addccc6acb1fb8393233c895904c43fc429ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7addccc6acb1fb8393233c895904c43fc429ee", "html_url": "https://github.com/rust-lang/rust/commit/3e7addccc6acb1fb8393233c895904c43fc429ee"}, {"sha": "cadf9efad123a62472cad45f22569747cc599256", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadf9efad123a62472cad45f22569747cc599256", "html_url": "https://github.com/rust-lang/rust/commit/cadf9efad123a62472cad45f22569747cc599256"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "e719ee590aba67a0aabe8e92775f2643084567de", "filename": "src/librustc_error_codes/error_codes/E0309.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc497c4c84be72d0c4a06ef1b202faf266b0843a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc497c4c84be72d0c4a06ef1b202faf266b0843a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md?ref=cc497c4c84be72d0c4a06ef1b202faf266b0843a", "patch": "@@ -1,9 +1,7 @@\n-The type definition contains some field whose type\n-requires an outlives annotation. Outlives annotations\n-(e.g., `T: 'a`) are used to guarantee that all the data in T is valid\n-for at least the lifetime `'a`. This scenario most commonly\n-arises when the type contains an associated type reference\n-like `<T as SomeTrait<'a>>::Output`, as shown in this example:\n+A parameter type is missing an explicit lifetime bound and may not live long\n+enough.\n+\n+Erroneous code example:\n \n ```compile_fail,E0309\n // This won't compile because the applicable impl of\n@@ -25,9 +23,15 @@ where\n }\n ```\n \n-Here, the where clause `T: 'a` that appears on the impl is not known to be\n-satisfied on the struct. To make this example compile, you have to add\n-a where-clause like `T: 'a` to the struct definition:\n+The type definition contains some field whose type requires an outlives\n+annotation. Outlives annotations (e.g., `T: 'a`) are used to guarantee that all\n+the data in T is valid for at least the lifetime `'a`. This scenario most\n+commonly arises when the type contains an associated type reference like\n+`<T as SomeTrait<'a>>::Output`, as shown in the previous code.\n+\n+There, the where clause `T: 'a` that appears on the impl is not known to be\n+satisfied on the struct. To make this example compile, you have to add a\n+where-clause like `T: 'a` to the struct definition:\n \n ```\n struct Foo<'a, T>"}]}