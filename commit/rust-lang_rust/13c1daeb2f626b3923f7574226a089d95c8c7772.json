{"sha": "13c1daeb2f626b3923f7574226a089d95c8c7772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzFkYWViMmY2MjZiMzkyM2Y3NTc0MjI2YTA4OWQ5NWM4Yzc3NzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-17T04:33:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-22T19:12:33Z"}, "message": "Tweak `'static` suggestion code\n\nFix #71196.", "tree": {"sha": "b6bf9fcb96ecab3b859bd8c1f85cfd34775becf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6bf9fcb96ecab3b859bd8c1f85cfd34775becf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c1daeb2f626b3923f7574226a089d95c8c7772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c1daeb2f626b3923f7574226a089d95c8c7772", "html_url": "https://github.com/rust-lang/rust/commit/13c1daeb2f626b3923f7574226a089d95c8c7772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c1daeb2f626b3923f7574226a089d95c8c7772/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e90d64266b8a4b53935d629786e69610b33f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e90d64266b8a4b53935d629786e69610b33f25", "html_url": "https://github.com/rust-lang/rust/commit/82e90d64266b8a4b53935d629786e69610b33f25"}], "stats": {"total": 681, "additions": 532, "deletions": 149}, "files": [{"sha": "cf6dde813096bf73014ed97405380a4990eef762", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -273,7 +273,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .next();\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args = self\n-                .elided_path_lifetimes(path_span, expected_lifetimes)\n+                .elided_path_lifetimes(\n+                    first_generic_span.map(|s| s.shrink_to_lo()).unwrap_or(segment.ident.span),\n+                    expected_lifetimes,\n+                )\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();"}, {"sha": "5e03d4e11409930fb92f9e2d5b9da5e82aef1aa4", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 97, "deletions": 88, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -1034,101 +1034,110 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         lifetime_names: &FxHashSet<ast::Ident>,\n         params: &[ElisionFailureInfo],\n     ) {\n-        if count > 1 {\n-            err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-        } else {\n-            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n-            let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            };\n-            let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n-                err.span_label(span, \"expected named lifetime parameter\");\n+        err.span_label(\n+            span,\n+            &format!(\n+                \"expected {} lifetime parameter{}\",\n+                if count == 1 { \"named\".to_string() } else { count.to_string() },\n+                pluralize!(count)\n+            ),\n+        );\n \n-                for missing in self.missing_named_lifetime_spots.iter().rev() {\n-                    let mut introduce_suggestion = vec![];\n-                    let msg;\n-                    let should_break;\n-                    introduce_suggestion.push(match missing {\n-                        MissingLifetimeSpot::Generics(generics) => {\n-                            msg = \"consider introducing a named lifetime parameter\".to_string();\n-                            should_break = true;\n-                            if let Some(param) = generics.params.iter().find(|p| match p.kind {\n-                                hir::GenericParamKind::Type {\n-                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                    ..\n-                                } => false,\n-                                _ => true,\n-                            }) {\n-                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n-                            } else {\n-                                (generics.span, \"<'a>\".to_string())\n-                            }\n-                        }\n-                        MissingLifetimeSpot::HigherRanked { span, span_type } => {\n-                            msg = format!(\n-                                \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n-                                span_type.descr(),\n-                            );\n-                            should_break = false;\n-                            err.note(\n-                                \"for more information on higher-ranked polymorphism, visit \\\n-                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n-                            );\n-                            (*span, span_type.suggestion(\"'a\"))\n-                        }\n-                    });\n-                    for param in params {\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n-                        {\n-                            if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                            } else if snippet.starts_with(\"&'_ \") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n-                            }\n+        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n+        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_suggestion_verbose(\n+                span,\n+                \"consider using the named lifetime\",\n+                sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n+            for missing in self.missing_named_lifetime_spots.iter().rev() {\n+                let mut introduce_suggestion = vec![];\n+                let msg;\n+                let should_break;\n+                introduce_suggestion.push(match missing {\n+                    MissingLifetimeSpot::Generics(generics) => {\n+                        msg = \"consider introducing a named lifetime parameter\".to_string();\n+                        should_break = true;\n+                        if let Some(param) = generics.params.iter().find(|p| match p.kind {\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } => false,\n+                            _ => true,\n+                        }) {\n+                            (param.span.shrink_to_lo(), \"'a, \".to_string())\n+                        } else {\n+                            (generics.span, \"<'a>\".to_string())\n                         }\n                     }\n-                    introduce_suggestion.push((span, sugg.to_string()));\n-                    err.multipart_suggestion(\n-                        &msg,\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    if should_break {\n-                        break;\n+                    MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                        msg = format!(\n+                            \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n+                            span_type.descr(),\n+                        );\n+                        should_break = false;\n+                        err.note(\n+                            \"for more information on higher-ranked polymorphism, visit \\\n+                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                        );\n+                        (*span, span_type.suggestion(\"'a\"))\n+                    }\n+                });\n+                for param in params {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n+                        if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n+                            introduce_suggestion\n+                                .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n+                        } else if snippet.starts_with(\"&'_ \") {\n+                            introduce_suggestion\n+                                .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                        }\n                     }\n                 }\n-            };\n-\n-            match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n-                (1, Some(name), Some(\"&\")) => {\n-                    suggest_existing(err, format!(\"&{} \", name));\n-                }\n-                (1, Some(name), Some(\"'_\")) => {\n-                    suggest_existing(err, name.to_string());\n-                }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n-                    suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n-                }\n-                (0, _, Some(\"&\")) => {\n-                    suggest_new(err, \"&'a \");\n-                }\n-                (0, _, Some(\"'_\")) => {\n-                    suggest_new(err, \"'a\");\n-                }\n-                (0, _, Some(snippet)) if !snippet.ends_with('>') => {\n-                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n-                }\n-                _ => {\n-                    err.span_label(span, \"expected lifetime parameter\");\n+                introduce_suggestion.push((span, sugg.to_string()));\n+                err.multipart_suggestion(&msg, introduce_suggestion, Applicability::MaybeIncorrect);\n+                if should_break {\n+                    break;\n                 }\n             }\n+        };\n+\n+        match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n+            (1, Some(name), Some(\"&\")) => {\n+                suggest_existing(err, format!(\"&{} \", name));\n+            }\n+            (1, Some(name), Some(\"'_\")) => {\n+                suggest_existing(err, name.to_string());\n+            }\n+            (1, Some(name), Some(\"\")) => {\n+                suggest_existing(err, format!(\"{}, \", name).repeat(count));\n+            }\n+            (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n+                suggest_existing(\n+                    err,\n+                    format!(\n+                        \"{}<{}>\",\n+                        snippet,\n+                        std::iter::repeat(name.to_string())\n+                            .take(count)\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    ),\n+                );\n+            }\n+            (0, _, Some(\"&\")) if count == 1 => {\n+                suggest_new(err, \"&'a \");\n+            }\n+            (0, _, Some(\"'_\")) if count == 1 => {\n+                suggest_new(err, \"'a\");\n+            }\n+            (0, _, Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n+                suggest_new(err, &format!(\"{}<'a>\", snippet));\n+            }\n+            _ => {}\n         }\n     }\n }"}, {"sha": "41c798f9229e5444c9c3a07b12e9b80fbab2ebbf", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2388,51 +2388,26 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let mut err = self.report_missing_lifetime_specifiers(span, lifetime_refs.len());\n-        let mut add_label = true;\n \n         if let Some(params) = error {\n-            if lifetime_refs.len() == 1 {\n-                add_label = add_label && self.report_elision_failure(&mut err, params, span);\n+            if self.report_elision_failure(&mut err, params) && lifetime_names.is_empty() {\n+                lifetime_names.insert(ast::Ident::from_str(\"'static\"));\n             }\n         }\n-        if add_label {\n-            self.add_missing_lifetime_specifiers_label(\n-                &mut err,\n-                span,\n-                lifetime_refs.len(),\n-                &lifetime_names,\n-                error.map(|p| &p[..]).unwrap_or(&[]),\n-            );\n-        }\n-\n+        self.add_missing_lifetime_specifiers_label(\n+            &mut err,\n+            span,\n+            lifetime_refs.len(),\n+            &lifetime_names,\n+            error.map(|p| &p[..]).unwrap_or(&[]),\n+        );\n         err.emit();\n     }\n \n-    fn suggest_lifetime(&self, db: &mut DiagnosticBuilder<'_>, span: Span, msg: &str) -> bool {\n-        match self.tcx.sess.source_map().span_to_snippet(span) {\n-            Ok(ref snippet) => {\n-                let (sugg, applicability) = if snippet == \"&\" {\n-                    (\"&'static \".to_owned(), Applicability::MachineApplicable)\n-                } else if snippet == \"'_\" {\n-                    (\"'static\".to_owned(), Applicability::MachineApplicable)\n-                } else {\n-                    (format!(\"{} + 'static\", snippet), Applicability::MaybeIncorrect)\n-                };\n-                db.span_suggestion(span, msg, sugg, applicability);\n-                false\n-            }\n-            Err(_) => {\n-                db.help(msg);\n-                true\n-            }\n-        }\n-    }\n-\n     fn report_elision_failure(\n         &mut self,\n         db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n-        span: Span,\n     ) -> bool {\n         let mut m = String::new();\n         let len = params.len();\n@@ -2482,29 +2457,28 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 \"this function's return type contains a borrowed value, \\\n                  but there is no value for it to be borrowed from\",\n             );\n-            self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n+            true\n         } else if elided_len == 0 {\n             db.help(\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\",\n             );\n-            let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n-            self.suggest_lifetime(db, span, msg)\n+            true\n         } else if elided_len == 1 {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say which {} it is borrowed from\",\n                 m\n             ));\n-            true\n+            false\n         } else {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say whether it is borrowed from {}\",\n                 m\n             ));\n-            true\n+            false\n         }\n     }\n "}, {"sha": "51e5a0113c6c65b286d021d263205d384f9c901e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -1729,6 +1729,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(None, span).unwrap_or_else(|| {\n+                        // FIXME: these can be redundant with E0106, but not always.\n                         struct_span_err!(\n                             tcx.sess,\n                             span,"}, {"sha": "7608c4a68f1ee4604a5a8e897b76da1566a503b0", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-binding-only.rs:52:23\n    |\n LL | fn elision<T: Fn() -> &i32>() {\n-   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn elision<T: Fn() -> &'static i32>() {\n+   |                       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2e31a4f3abb2f4d02fbb125fe2f00f48f4147c43", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-return-only.rs:34:23\n    |\n LL | fn elision(_: fn() -> &i32) {\n-   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn elision(_: fn() -> &'static i32) {\n+   |                       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "74f760d6c92867574f0b4409c2d2c68f52a27134", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -4,9 +4,13 @@ error[E0106]: missing lifetime specifier\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              --------       -----------\n LL |     ) -> &dyn Foo\n-   |          ^ help: consider using the named lifetime: `&'a`\n+   |          ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+help: consider using the named lifetime\n+   |\n+LL |     ) -> &'a dyn Foo\n+   |          ^^^\n \n error: aborting due to previous error\n "}, {"sha": "0d491faa9d1e2255931226a57e3c96ffe4222e27", "filename": "src/test/ui/c-variadic/variadic-ffi-6.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/variadic-ffi-6.rs:7:6\n    |\n LL | ) -> &usize {\n-   |      ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the named lifetime\n+   |\n+LL | ) -> &'static usize {\n+   |      ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "14153f302da84aa6047b7a0a12dd7f0839a50fdb", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/foreign-fn-return-lifetime.rs:5:19\n    |\n LL |     pub fn f() -> &u8;\n-   |                   ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                   ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     pub fn f() -> &'static u8;\n+   |                   ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3c5bdccd96657c3a735d59fa42511e7876c70818", "filename": "src/test/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -5,16 +5,21 @@ LL | fn should_error<T>() where T : Into<&u32> {}\n    |                                     ^ explicit lifetime name needed here\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:19\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:21\n    |\n LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^ expected lifetime parameter\n+   |                     ^ expected named lifetime parameter\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:15\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:17\n    |\n LL | fn bar<'b, L: X<&'b Nested<i32>>>(){}\n-   |               ^^^^^^^^^^^^^^^^^^ expected lifetime parameter\n+   |                 ^ expected named lifetime parameter\n+   |\n+help: consider using the named lifetime\n+   |\n+LL | fn bar<'b, L: X<'b, &'b Nested<i32>>>(){}\n+   |                 ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8454c6be61dff384190dd3d500da32c23e8acff5", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-13497.rs:2:5\n    |\n LL |     &str\n-   |     ^ help: consider giving it a 'static lifetime: `&'static`\n+   |     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     &'static str\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3049ea772f2725fecc732a0dc32d9cb2dbd31957", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -14,17 +14,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the named lifetime\n+   |\n+LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &'static str { iter() }\n+   |                                        ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:7:22\n    |\n LL | fn parse_type_3() -> &str { unimplemented!() }\n-   |                      ^ help: consider giving it a 'static lifetime: `&'static`\n+   |                      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn parse_type_3() -> &'static str { unimplemented!() }\n+   |                      ^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dae1e390189773ca0961e24a9d361248c25b5721", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:2:11\n    |\n LL | fn f() -> &isize {\n-   |           ^ help: consider giving it a 'static lifetime: `&'static`\n+   |           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn f() -> &'static isize {\n+   |           ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n@@ -34,25 +38,37 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20\n    |\n LL | fn i(_x: isize) -> &isize {\n-   |                    ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                    ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the named lifetime\n+   |\n+LL | fn i(_x: isize) -> &'static isize {\n+   |                    ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:34:24\n    |\n LL | fn j(_x: StaticStr) -> &isize {\n-   |                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the named lifetime\n+   |\n+LL | fn j(_x: StaticStr) -> &'static isize {\n+   |                        ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:40:49\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n-   |                                                 ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                                 ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the named lifetime\n+   |\n+LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &'a isize {\n+   |                                                 ^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b09c1879d701599092a3fa1e5e1d96817a317f85", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -0,0 +1,65 @@\n+#![allow(bare_trait_objects)]\n+use std::collections::HashMap;\n+use std::cell::RefCell;\n+\n+pub union Foo<'t, 'k> {\n+    i: &'t i64,\n+    f: &'k f64,\n+}\n+trait Bar<'t, 'k> {}\n+\n+pub union Qux<'t, 'k, I> {\n+    i: &'t I,\n+    f: &'k I,\n+}\n+trait Tar<'t, 'k, I> {}\n+\n+thread_local! {\n+    static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+thread_local! {\n+    static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+}\n+thread_local! {\n+    static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+thread_local! {\n+    static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+}\n+\n+thread_local! {\n+    static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+}\n+thread_local! {\n+    static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+    //~^ ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "aeb1229d1746ba0ed8557d878345b9509b6a6f49", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -0,0 +1,256 @@\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:18:44\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:18:44\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:23:44\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:23:44\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:32:48\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:32:48\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:37:44\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:37:49\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:37:44\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/missing-lifetime-specifier.rs:37:49\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^ expected 2 lifetime parameters\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                 ^^^^^^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:54:44\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-specifier.rs:54:44\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:23:45\n+   |\n+LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:37:45\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:37:45\n+   |\n+LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:47:44\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime arguments\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime arguments\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime arguments\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+  --> $DIR/missing-lifetime-specifier.rs:54:45\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                             ^^^ expected 2 lifetime arguments\n+\n+error: aborting due to 28 previous errors\n+\n+Some errors have detailed explanations: E0106, E0107.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "a93830edf3eea6a3203d2cd2974a4b5e8e1da442", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -2,23 +2,36 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:2:16\n    |\n LL | struct Foo<'a>(&usize);\n-   |                ^ help: consider using the named lifetime: `&'a`\n+   |                ^ expected named lifetime parameter\n+   |\n+help: consider using the named lifetime\n+   |\n+LL | struct Foo<'a>(&'a usize);\n+   |                ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:5:34\n    |\n LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n-   |                    ---------     ^ help: consider using the named lifetime: `&'a`\n+   |                    ---------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn func1<'a>(_arg: &'a Thing) -> &'a () { unimplemented!() }\n+   |                                  ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:7:35\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n-   |                    ----------     ^ help: consider using the named lifetime: `&'a`\n+   |                    ----------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn func2<'a>(_arg: &Thing<'a>) -> &'a () { unimplemented!() }\n+   |                                   ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ffccd100cb09bb9a94463bf7b98a317f5d14caca", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13c1daeb2f626b3923f7574226a089d95c8c7772/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=13c1daeb2f626b3923f7574226a089d95c8c7772", "patch": "@@ -14,15 +14,24 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:2:17\n    |\n LL | struct Baz<'a>(&'_ &'a u8);\n-   |                 ^^ help: consider using the named lifetime: `'a`\n+   |                 ^^ expected named lifetime parameter\n+   |\n+help: consider using the named lifetime\n+   |\n+LL | struct Baz<'a>(&'a &'a u8);\n+   |                 ^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:10:33\n    |\n LL | fn meh() -> Box<dyn for<'_> Meh<'_>>\n-   |                                 ^^ help: consider giving it a 'static lifetime: `'static`\n+   |                                 ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the named lifetime\n+   |\n+LL | fn meh() -> Box<dyn for<'_> Meh<'static>>\n+   |                                 ^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35"}]}