{"sha": "2d9ed4fd483e0caddab03dc78f805a37232463df", "node_id": "C_kwDOAAsO6NoAKDJkOWVkNGZkNDgzZTBjYWRkYWIwM2RjNzhmODA1YTM3MjMyNDYzZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T12:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T12:46:29Z"}, "message": "Auto merge of #13641 - DesmondWillowbrook:fix-move-format-string, r=Veykril\n\nfix: format expression parsing edge-cases\n\n- Handle positional arguments with formatting options (i.e. `{:b}`). Previously copied `:b` as an argument, producing broken code.\n\n- Handle indexed positional arguments (`{0}`) ([reference](https://doc.rust-lang.org/std/fmt/#positional-parameters)). Previously copied over `0` as an argument.\n\nNote: the assist also breaks when named arguments are used (`\"{name}$0\", name = 2 + 2` is converted to `\"{}\"$0, name`. I'm working on fix for that as well.", "tree": {"sha": "776903b23cdce1977c9f99ec38a5980f473b6464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776903b23cdce1977c9f99ec38a5980f473b6464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d9ed4fd483e0caddab03dc78f805a37232463df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9ed4fd483e0caddab03dc78f805a37232463df", "html_url": "https://github.com/rust-lang/rust/commit/2d9ed4fd483e0caddab03dc78f805a37232463df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d9ed4fd483e0caddab03dc78f805a37232463df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8050fdb9c78c1c39de3d3f4882826becc78bee1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8050fdb9c78c1c39de3d3f4882826becc78bee1e", "html_url": "https://github.com/rust-lang/rust/commit/8050fdb9c78c1c39de3d3f4882826becc78bee1e"}, {"sha": "6d4b2b4b17841cdb29e99bf7e7e71b57dbaa2dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b2b4b17841cdb29e99bf7e7e71b57dbaa2dc1", "html_url": "https://github.com/rust-lang/rust/commit/6d4b2b4b17841cdb29e99bf7e7e71b57dbaa2dc1"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "11db6ae7f7b811825d59fd8b08c6e872c179195a", "filename": "crates/ide-assists/src/handlers/move_format_string_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d9ed4fd483e0caddab03dc78f805a37232463df/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9ed4fd483e0caddab03dc78f805a37232463df/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs?ref=2d9ed4fd483e0caddab03dc78f805a37232463df", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n                         NodeOrToken::Node(n) => {\n                             format_to!(current_arg, \"{n}\");\n                         },\n-                        NodeOrToken::Token(t) if t.kind() == COMMA=> {\n+                        NodeOrToken::Token(t) if t.kind() == COMMA => {\n                             existing_args.push(current_arg.trim().into());\n                             current_arg.clear();\n                         },\n@@ -238,14 +238,14 @@ fn main() {\n             &add_macro_decl(\n                 r#\"\n fn main() {\n-    print!(\"{} {x + 1:b} {Struct(1, 2)}$0\", 1);\n+    print!(\"{:b} {x + 1:b} {Struct(1, 2)}$0\", 1);\n }\n \"#,\n             ),\n             &add_macro_decl(\n                 r#\"\n fn main() {\n-    print!(\"{} {:b} {}\"$0, 1, x + 1, Struct(1, 2));\n+    print!(\"{:b} {:b} {}\"$0, 1, x + 1, Struct(1, 2));\n }\n \"#,\n             ),"}, {"sha": "313346ee131539b9210714159d0164b5b464e8c2", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2d9ed4fd483e0caddab03dc78f805a37232463df/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9ed4fd483e0caddab03dc78f805a37232463df/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=2d9ed4fd483e0caddab03dc78f805a37232463df", "patch": "@@ -104,6 +104,11 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                 extracted_expressions.push(Arg::Placeholder);\n                 state = State::NotArg;\n             }\n+            (State::MaybeArg, ':') => {\n+                output.push(chr);\n+                extracted_expressions.push(Arg::Placeholder);\n+                state = State::FormatOpts;\n+            }\n             (State::MaybeArg, _) => {\n                 if matches!(chr, '\\\\' | '$') {\n                     current_expr.push('\\\\');\n@@ -118,44 +123,41 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                     state = State::Expr;\n                 }\n             }\n-            (State::Ident | State::Expr, '}') => {\n-                if inexpr_open_count == 0 {\n-                    output.push(chr);\n-\n-                    if matches!(state, State::Expr) {\n-                        extracted_expressions.push(Arg::Expr(current_expr.trim().into()));\n-                    } else {\n-                        extracted_expressions.push(Arg::Ident(current_expr.trim().into()));\n-                    }\n-\n-                    current_expr = String::new();\n-                    state = State::NotArg;\n-                } else {\n-                    // We're closing one brace met before inside of the expression.\n-                    current_expr.push(chr);\n-                    inexpr_open_count -= 1;\n-                }\n-            }\n             (State::Ident | State::Expr, ':') if matches!(chars.peek(), Some(':')) => {\n                 // path separator\n                 state = State::Expr;\n                 current_expr.push_str(\"::\");\n                 chars.next();\n             }\n-            (State::Ident | State::Expr, ':') => {\n+            (State::Ident | State::Expr, ':' | '}') => {\n                 if inexpr_open_count == 0 {\n-                    // We're outside of braces, thus assume that it's a specifier, like \"{Some(value):?}\"\n-                    output.push(chr);\n+                    let trimmed = current_expr.trim();\n \n-                    if matches!(state, State::Expr) {\n-                        extracted_expressions.push(Arg::Expr(current_expr.trim().into()));\n+                    // if the expression consists of a single number, like \"0\" or \"12\", it can refer to\n+                    // format args in the order they are specified.\n+                    // see: https://doc.rust-lang.org/std/fmt/#positional-parameters\n+                    if trimmed.chars().fold(true, |only_num, c| c.is_ascii_digit() && only_num) {\n+                        output.push_str(trimmed);\n+                    } else if matches!(state, State::Expr) {\n+                        extracted_expressions.push(Arg::Expr(trimmed.into()));\n                     } else {\n-                        extracted_expressions.push(Arg::Ident(current_expr.trim().into()));\n+                        extracted_expressions.push(Arg::Ident(trimmed.into()));\n                     }\n \n-                    current_expr = String::new();\n-                    state = State::FormatOpts;\n-                } else {\n+                    output.push(chr);\n+                    current_expr.clear();\n+                    state = if chr == ':' {\n+                        State::FormatOpts\n+                    } else if chr == '}' {\n+                        State::NotArg\n+                    } else {\n+                        unreachable!()\n+                    };\n+                } else if chr == '}' {\n+                    // We're closing one brace met before inside of the expression.\n+                    current_expr.push(chr);\n+                    inexpr_open_count -= 1;\n+                } else if chr == ':' {\n                     // We're inside of braced expression, assume that it's a struct field name/value delimiter.\n                     current_expr.push(chr);\n                 }\n@@ -219,6 +221,10 @@ mod tests {\n             (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n             (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n             (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{:1$}\", expect![[r\"{:1\\$}; $1\"]]),\n+            (\"{:>padding$}\", expect![[r\"{:>padding\\$}; $1\"]]),\n+            (\"{}, {}, {0}\", expect![[r\"{}, {}, {0}; $1, $2\"]]),\n+            (\"{}, {}, {0:b}\", expect![[r\"{}, {}, {0:b}; $1, $2\"]]),\n             (\"{$0}\", expect![[r\"{}; \\$0\"]]),\n             (\"{malformed\", expect![[\"-\"]]),\n             (\"malformed}\", expect![[\"-\"]]),"}]}