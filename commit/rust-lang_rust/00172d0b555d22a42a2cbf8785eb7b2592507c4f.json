{"sha": "00172d0b555d22a42a2cbf8785eb7b2592507c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTcyZDBiNTU1ZDIyYTQyYTJjYmY4Nzg1ZWI3YjI1OTI1MDdjNGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-25T12:58:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T12:58:50Z"}, "message": "Merge #4610\n\n4610: Cleanup lsp extensions on the client side r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "510b580723f06fd3ae1e4c641001afa82a426b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510b580723f06fd3ae1e4c641001afa82a426b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00172d0b555d22a42a2cbf8785eb7b2592507c4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey8EKCRBK7hj4Ov3rIwAAdHIIAGOI7PAEajYibD9sXCXB+P6D\nq+NAxbXdjzg7bQaT+oygjKeSOZdQLSOE20hJcYpOTviWxcjg8k5XjY3TEsrO4+P9\nPRzwPSdU1UN3Ti1gK9fyvjVO9ycVjYMlPB0vNchYmKlht38TykUiq4//IOCtTTKW\n4s6YfdP1nznwLh+flfE+2b45iOksUPuHLlI3dIewm2cCTeTSIG7wIZj32whdmIfU\nNcs3T6mSfx8nTeDtk6wHkw5JiHoe6s6gCgqd+KsKb7Jkn6rQoGkUryI/dY9Wvv04\ncYrJSfK9SHaPf3CQP56omGMyOkbZOt/ITBcXrEoMKQBqsA9z/RBhVE/hykJLyDw=\n=FqSO\n-----END PGP SIGNATURE-----\n", "payload": "tree 510b580723f06fd3ae1e4c641001afa82a426b60\nparent 8686d0b0ac765c2144b22b897de1d8fda68ecc6e\nparent a30bdd9795770329e4562d8bfca60ebe2e52dea1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590411530 +0000\ncommitter GitHub <noreply@github.com> 1590411530 +0000\n\nMerge #4610\n\n4610: Cleanup lsp extensions on the client side r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00172d0b555d22a42a2cbf8785eb7b2592507c4f", "html_url": "https://github.com/rust-lang/rust/commit/00172d0b555d22a42a2cbf8785eb7b2592507c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00172d0b555d22a42a2cbf8785eb7b2592507c4f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "html_url": "https://github.com/rust-lang/rust/commit/8686d0b0ac765c2144b22b897de1d8fda68ecc6e"}, {"sha": "a30bdd9795770329e4562d8bfca60ebe2e52dea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30bdd9795770329e4562d8bfca60ebe2e52dea1", "html_url": "https://github.com/rust-lang/rust/commit/a30bdd9795770329e4562d8bfca60ebe2e52dea1"}], "stats": {"total": 230, "additions": 93, "deletions": 137}, "files": [{"sha": "c571c62aed33219ab2dd46ab3106363ebba1c521", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -50,7 +50,7 @@ impl Request for ExpandMacro {\n #[serde(rename_all = \"camelCase\")]\n pub struct ExpandMacroParams {\n     pub text_document: TextDocumentIdentifier,\n-    pub position: Option<Position>,\n+    pub position: Position,\n }\n \n #[derive(Deserialize, Serialize, Debug)]"}, {"sha": "3ccc95c23e040e9216641cd6b8267e3fb81a738d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -72,15 +72,10 @@ pub fn handle_expand_macro(\n     let _p = profile(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n-    let offset = params.position.map(|p| from_proto::offset(&line_index, p));\n+    let offset = from_proto::offset(&line_index, params.position);\n \n-    match offset {\n-        None => Ok(None),\n-        Some(offset) => {\n-            let res = world.analysis().expand_macro(FilePosition { file_id, offset })?;\n-            Ok(res.map(|it| lsp_ext::ExpandedMacro { name: it.name, expansion: it.expansion }))\n-        }\n-    }\n+    let res = world.analysis().expand_macro(FilePosition { file_id, offset })?;\n+    Ok(res.map(|it| lsp_ext::ExpandedMacro { name: it.name, expansion: it.expansion }))\n }\n \n pub fn handle_selection_range("}, {"sha": "48147b17393c50f209c8ed4dfcd94335159e7d77", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -318,7 +318,7 @@ Primarily for debugging, but very useful for all people working on rust-analyzer\n ```typescript\n interface ExpandMacroParams {\n     textDocument: TextDocumentIdentifier,\n-    position?: Position,\n+    position: Position,\n }\n ```\n "}, {"sha": "49e3845d5b177de1a291a7a785f13f3f032a2f4d", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as ra from './rust-analyzer-api';\n+import * as ra from './lsp_ext';\n \n import { Ctx, Cmd } from './ctx';\n import { applySnippetWorkspaceEdit, applySnippetTextEdits } from './snippets';"}, {"sha": "027504ecd2a81e470640f14ac660288d2c329a55", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -1,7 +1,7 @@\n import * as os from \"os\";\n import * as vscode from 'vscode';\n import * as path from 'path';\n-import * as ra from './rust-analyzer-api';\n+import * as ra from './lsp_ext';\n \n import { Cargo } from './cargo';\n import { Ctx } from \"./ctx\";"}, {"sha": "9e6d6045f349cf4e99a9252e7233fb0e3dec4b12", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -1,6 +1,6 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from 'vscode';\n-import * as ra from './rust-analyzer-api';\n+import * as ra from './lsp_ext';\n \n import { Ctx, Disposable } from './ctx';\n import { sendRequestWithRetry, isRustDocument, RustDocument, RustEditor, sleep } from './util';"}, {"sha": "2a06632619b51cc0269c0241048b57fd1ec779e5", "filename": "editors/code/src/lsp_ext.ts", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -0,0 +1,84 @@\n+/**\n+ * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n+ */\n+\n+import * as lc from \"vscode-languageclient\";\n+\n+export const analyzerStatus = new lc.RequestType<null, string, void>(\"rust-analyzer/analyzerStatus\");\n+\n+export const collectGarbage = new lc.RequestType<null, null, void>(\"rust-analyzer/collectGarbage\");\n+\n+export interface SyntaxTreeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range | null;\n+}\n+export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\"rust-analyzer/syntaxTree\");\n+\n+\n+export interface ExpandMacroParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Position;\n+}\n+export interface ExpandedMacro {\n+    name: string;\n+    expansion: string;\n+}\n+export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro | null, void>(\"rust-analyzer/expandMacro\");\n+\n+export interface MatchingBraceParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    positions: lc.Position[];\n+}\n+export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\"experimental/matchingBrace\");\n+\n+export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.Location[], void>(\"rust-analyzer/parentModule\");\n+\n+export interface JoinLinesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    ranges: lc.Range[];\n+}\n+export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], void>(\"experimental/joinLines\");\n+\n+export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], void>(\"experimental/onEnter\");\n+\n+export interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Position | null;\n+}\n+export interface Runnable {\n+    range: lc.Range;\n+    label: string;\n+    bin: string;\n+    args: string[];\n+    extraArgs: string[];\n+    env: { [key: string]: string };\n+    cwd: string | null;\n+}\n+export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"rust-analyzer/runnables\");\n+\n+export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n+\n+export namespace InlayHint {\n+    export const enum Kind {\n+        TypeHint = \"TypeHint\",\n+        ParamHint = \"ParameterHint\",\n+        ChainingHint = \"ChainingHint\",\n+    }\n+    interface Common {\n+        range: lc.Range;\n+        label: string;\n+    }\n+    export type TypeHint = Common & { kind: Kind.TypeHint };\n+    export type ParamHint = Common & { kind: Kind.ParamHint };\n+    export type ChainingHint = Common & { kind: Kind.ChainingHint };\n+}\n+export interface InlayHintsParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+}\n+export const inlayHints = new lc.RequestType<InlayHintsParams, InlayHint[], void>(\"rust-analyzer/inlayHints\");\n+\n+export interface SsrParams {\n+    query: string;\n+    parseOnly: boolean;\n+}\n+export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>('experimental/ssr');"}, {"sha": "2a7a429cfa66ed9989fab0a19881f3621c808761", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00172d0b555d22a42a2cbf8785eb7b2592507c4f/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=00172d0b555d22a42a2cbf8785eb7b2592507c4f", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as ra from './rust-analyzer-api';\n+import * as ra from './lsp_ext';\n \n import { Ctx, Cmd } from './ctx';\n import { startDebugSession, getDebugConfiguration } from './debug';"}, {"sha": "c10c0fa78942225f5f95feddac9e4f243c33697b", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8686d0b0ac765c2144b22b897de1d8fda68ecc6e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=8686d0b0ac765c2144b22b897de1d8fda68ecc6e", "patch": "@@ -1,123 +0,0 @@\n-/**\n- * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n- */\n-\n-import * as lc from \"vscode-languageclient\";\n-\n-type Option<T> = null | T;\n-type Vec<T> = T[];\n-type FxHashMap<K extends PropertyKey, V> = Record<K, V>;\n-\n-function request<TParams, TResult>(method: string) {\n-    return new lc.RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n-}\n-function notification<TParam>(method: string) {\n-    return new lc.NotificationType<TParam>(method);\n-}\n-\n-\n-export const analyzerStatus = request<null, string>(\"analyzerStatus\");\n-\n-\n-export const collectGarbage = request<null, null>(\"collectGarbage\");\n-\n-\n-export interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: Option<lc.Range>;\n-}\n-export const syntaxTree = request<SyntaxTreeParams, string>(\"syntaxTree\");\n-\n-\n-export interface ExpandMacroParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    position: Option<lc.Position>;\n-}\n-export interface ExpandedMacro {\n-    name: string;\n-    expansion: string;\n-}\n-export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"expandMacro\");\n-\n-\n-export interface MatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    positions: lc.Position[];\n-}\n-export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], unknown>('experimental/matchingBrace');\n-\n-export interface PublishDecorationsParams {\n-    uri: string;\n-    decorations: Vec<Decoration>;\n-}\n-export interface Decoration {\n-    range: lc.Range;\n-    tag: string;\n-    bindingHash: Option<string>;\n-}\n-export const decorationsRequest = request<lc.TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n-\n-\n-export const parentModule = request<lc.TextDocumentPositionParams, Vec<lc.Location>>(\"parentModule\");\n-\n-\n-export interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    ranges: lc.Range[];\n-}\n-export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], unknown>('experimental/joinLines');\n-\n-export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], unknown>('experimental/onEnter');\n-\n-export interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    position: Option<lc.Position>;\n-}\n-export interface Runnable {\n-    range: lc.Range;\n-    label: string;\n-    bin: string;\n-    args: Vec<string>;\n-    extraArgs: Vec<string>;\n-    env: FxHashMap<string, string>;\n-    cwd: Option<string>;\n-}\n-export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n-\n-export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n-\n-export namespace InlayHint {\n-    export const enum Kind {\n-        TypeHint = \"TypeHint\",\n-        ParamHint = \"ParameterHint\",\n-        ChainingHint = \"ChainingHint\",\n-    }\n-    interface Common {\n-        range: lc.Range;\n-        label: string;\n-    }\n-    export type TypeHint = Common & { kind: Kind.TypeHint };\n-    export type ParamHint = Common & { kind: Kind.ParamHint };\n-    export type ChainingHint = Common & { kind: Kind.ChainingHint };\n-}\n-export interface InlayHintsParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\");\n-\n-\n-export interface SsrParams {\n-    query: string;\n-    parseOnly: boolean;\n-}\n-export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, unknown>('experimental/ssr');\n-\n-\n-export const publishDecorations = notification<PublishDecorationsParams>(\"publishDecorations\");\n-\n-\n-export interface SourceChange {\n-    label: string;\n-    workspaceEdit: lc.WorkspaceEdit;\n-    cursorPosition: Option<lc.TextDocumentPositionParams>;\n-}"}]}