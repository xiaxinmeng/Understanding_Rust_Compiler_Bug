{"sha": "407be5203659b10ba7391c035d494c6db0fd5487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwN2JlNTIwMzY1OWIxMGJhNzM5MWMwMzVkNDk0YzZkYjBmZDU0ODc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-26T19:40:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-26T19:42:38Z"}, "message": "rustc: Generalize resolve_var to work with regions too", "tree": {"sha": "20704d565bd58c3045f5bbe50debf13e003a53a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20704d565bd58c3045f5bbe50debf13e003a53a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407be5203659b10ba7391c035d494c6db0fd5487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407be5203659b10ba7391c035d494c6db0fd5487", "html_url": "https://github.com/rust-lang/rust/commit/407be5203659b10ba7391c035d494c6db0fd5487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407be5203659b10ba7391c035d494c6db0fd5487/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d506301f2a942b1d5a863b0c3fb6d5808c9e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d506301f2a942b1d5a863b0c3fb6d5808c9e33", "html_url": "https://github.com/rust-lang/rust/commit/a5d506301f2a942b1d5a863b0c3fb6d5808c9e33"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "b4c31f71a670fa478a2b6c839d9b4f07510215c0", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/407be5203659b10ba7391c035d494c6db0fd5487/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407be5203659b10ba7391c035d494c6db0fd5487/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=407be5203659b10ba7391c035d494c6db0fd5487", "patch": "@@ -105,6 +105,12 @@ impl of to_str for ty::mt {\n     }\n }\n \n+impl of to_str for ty::region {\n+    fn to_str(cx: infer_ctxt) -> str {\n+        util::ppaux::region_to_str(cx.tcx, self)\n+    }\n+}\n+\n impl<V:copy to_str> of to_str for bound<V> {\n     fn to_str(cx: infer_ctxt) -> str {\n         alt self {\n@@ -756,11 +762,15 @@ impl resolve_methods for infer_ctxt {\n         ret self.resolve_var(self.vb, {|t| type_is_bot(t)}, vid);\n     }\n \n+    fn resolve_region_var(rid: int) -> fres<ty::region> {\n+        ret self.resolve_var(self.rb, {|_t| false}, rid);\n+    }\n+\n     fn resolve_ty(typ: ty::t) -> fres<ty::t> {\n         alt ty::get(typ).struct {\n           ty::ty_var(vid) { self.resolve_ty_var(vid) }\n           ty::ty_rptr(ty::re_var(rid), base_ty) {\n-            alt self.resolve_region(rid as int) {\n+            alt self.resolve_region_var(rid as int) {\n               err(terr)  { err(terr) }\n               ok(region) {\n                 self.rok(ty::mk_rptr(self.tcx, region, base_ty))\n@@ -825,25 +835,12 @@ impl resolve_methods for infer_ctxt {\n     // FIXME: These should be integrated with the two functions above instead\n     // of being such blatant lazy duplicates.\n \n-    fn resolve_region(rid: int) -> fres<ty::region> {\n-        let {root:_, bounds} = self.get_region(rid as uint);\n-\n-        // See comments in resolve_ty above re. nonobviousness.\n-\n-        alt bounds {\n-          { ub:_, lb:some(r) } |\n-          { ub:some(r), lb:_ } |\n-          { ub:_, lb:some(r) } { ok(r) }\n-          { ub:none, lb:none } { self.rerr(rid) }\n-        }\n-    }\n-\n     fn subst_regions(unresolved: @mutable option<int>,\n                      regions_seen: std::list::list<int>,\n                      rid: int) -> ty::region {\n         // Should really return a fixup_result instead of a t, but fold_ty\n         // doesn't allow returning anything but a t.\n-        alt self.resolve_region(rid) {\n+        alt self.resolve_region_var(rid) {\n           err(rid) {\n             *unresolved = some(rid);\n             ret ty::re_var(rid as uint);"}]}