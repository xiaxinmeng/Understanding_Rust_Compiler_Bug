{"sha": "a243ad280a4ac57c1b8427e30e31c5b505cf10de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDNhZDI4MGE0YWM1N2MxYjg0MjdlMzBlMzFjNWI1MDVjZjEwZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T12:18:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T12:18:32Z"}, "message": "Auto merge of #81240 - JohnTitor:rollup-ieaz82a, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79655 (Add Vec visualization to understand capacity)\n - #80172 (Use consistent punctuation for 'Prelude contents' docs)\n - #80429 (Add regression test for mutual recursion in obligation forest)\n - #80601 (Improve grammar in documentation of format strings)\n - #81046 (Improve unknown external crate error)\n - #81178 (Visit only terminators when removing landing pads)\n - #81179 (Fix broken links with `--document-private-items` in the standard library)\n - #81184 (Remove unnecessary `after_run` function)\n - #81185 (Fix ICE in mir when evaluating SizeOf on unsized type)\n - #81187 (Fix typo in counters.rs)\n - #81219 (Document security implications of std::env::temp_dir)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0e08f0a0eab6dc6d2bbd2178b03c3bc9d35e8ba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e08f0a0eab6dc6d2bbd2178b03c3bc9d35e8ba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a243ad280a4ac57c1b8427e30e31c5b505cf10de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a243ad280a4ac57c1b8427e30e31c5b505cf10de", "html_url": "https://github.com/rust-lang/rust/commit/a243ad280a4ac57c1b8427e30e31c5b505cf10de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a243ad280a4ac57c1b8427e30e31c5b505cf10de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339e19697a39a78f4d669c217b7d21109215de41", "url": "https://api.github.com/repos/rust-lang/rust/commits/339e19697a39a78f4d669c217b7d21109215de41", "html_url": "https://github.com/rust-lang/rust/commit/339e19697a39a78f4d669c217b7d21109215de41"}, {"sha": "d6c7a797fc90847399e5c62122278abbd4af6552", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c7a797fc90847399e5c62122278abbd4af6552", "html_url": "https://github.com/rust-lang/rust/commit/d6c7a797fc90847399e5c62122278abbd4af6552"}], "stats": {"total": 342, "additions": 256, "deletions": 86}, "files": [{"sha": "6d447acbecf34caf6679d9fe88eb12e36fdcae7c", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -264,10 +264,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n                 let layout = self.layout_of(ty)?;\n-                assert!(\n-                    !layout.is_unsized(),\n-                    \"SizeOf nullary MIR operator called for unsized type\"\n-                );\n+                if layout.is_unsized() {\n+                    // FIXME: This should be a span_bug (#80742)\n+                    self.tcx.sess.delay_span_bug(\n+                        self.frame().current_span(),\n+                        &format!(\"SizeOf nullary MIR operator called for unsized type {}\", ty),\n+                    );\n+                }\n                 self.write_scalar(Scalar::from_machine_usize(layout.size.bytes(), self), dest)?;\n             }\n "}, {"sha": "6aaf27bdcb5f15cb730b2799a0c67d5282d6483d", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -81,7 +81,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n         MirPhase::Const,\n         &[&[\n             &add_moves_for_packed_drops::AddMovesForPackedDrops,\n-            &no_landing_pads::NoLandingPads::new(tcx),\n+            &no_landing_pads::NoLandingPads,\n             &remove_noop_landing_pads::RemoveNoopLandingPads,\n             &simplify::SimplifyCfg::new(\"make_shim\"),\n             &add_call_guards::CriticalCallEdges,"}, {"sha": "272a7bf961799797af5e2f7ddb0a73d8991547ff", "filename": "compiler/rustc_mir/src/transform/coverage/counters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -32,7 +32,7 @@ impl CoverageCounters {\n     }\n \n     /// Activate the `DebugCounters` data structures, to provide additional debug formatting\n-    /// features when formating `CoverageKind` (counter) values.\n+    /// features when formatting `CoverageKind` (counter) values.\n     pub fn enable_debug(&mut self) {\n         self.debug_counters.enable();\n     }"}, {"sha": "e509c35de40b8af2077e9ac85c734d9df6634b09", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -433,15 +433,15 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n \n     let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n         // Remove all things only needed by analysis\n-        &no_landing_pads::NoLandingPads::new(tcx),\n+        &no_landing_pads::NoLandingPads,\n         &simplify_branches::SimplifyBranches::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &cleanup_post_borrowck::CleanupNonCodegenStatements,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n         // These next passes must be executed together\n         &add_call_guards::CriticalCallEdges,\n         &elaborate_drops::ElaborateDrops,\n-        &no_landing_pads::NoLandingPads::new(tcx),\n+        &no_landing_pads::NoLandingPads,\n         // AddMovesForPackedDrops needs to run after drop\n         // elaboration.\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,"}, {"sha": "5479f0cc5861d3ee8b5cbbd463c2297f7e565658", "filename": "compiler/rustc_mir/src/transform/no_landing_pads.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fno_landing_pads.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -2,42 +2,27 @@\n //! specified.\n \n use crate::transform::MirPass;\n-use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_target::spec::PanicStrategy;\n \n-pub struct NoLandingPads<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> NoLandingPads<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n-        NoLandingPads { tcx }\n-    }\n-}\n+pub struct NoLandingPads;\n \n-impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n+impl<'tcx> MirPass<'tcx> for NoLandingPads {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n-        NoLandingPads::new(tcx).visit_body(body);\n-    }\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for NoLandingPads<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    if tcx.sess.panic_strategy() != PanicStrategy::Abort {\n+        return;\n     }\n \n-    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+    for block in body.basic_blocks_mut() {\n+        let terminator = block.terminator_mut();\n         if let Some(unwind) = terminator.kind.unwind_mut() {\n             unwind.take();\n         }\n-        self.super_terminator(terminator, location);\n     }\n }"}, {"sha": "fff14747e57293d69c887ba4fb8b04f3cf069715", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -243,6 +243,13 @@ impl<'a> PathSource<'a> {\n                 // \"function\" here means \"anything callable\" rather than `DefKind::Fn`,\n                 // this is not precise but usually more helpful than just \"value\".\n                 Some(ExprKind::Call(call_expr, _)) => match &call_expr.kind {\n+                    // the case of `::some_crate()`\n+                    ExprKind::Path(_, path)\n+                        if path.segments.len() == 2\n+                            && path.segments[0].ident.name == kw::PathRoot =>\n+                    {\n+                        \"external crate\"\n+                    }\n                     ExprKind::Path(_, path) => {\n                         let mut msg = \"function\";\n                         if let Some(segment) = path.segments.iter().last() {"}, {"sha": "d293899dc0c6f731e54496c0da155a670e02d4a7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -2485,20 +2485,26 @@ impl<'a> Resolver<'a> {\n                             (format!(\"use of undeclared crate or module `{}`\", ident), None)\n                         }\n                     } else {\n-                        let mut msg =\n-                            format!(\"could not find `{}` in `{}`\", ident, path[i - 1].ident);\n+                        let parent = path[i - 1].ident.name;\n+                        let parent = if parent == kw::PathRoot {\n+                            \"crate root\".to_owned()\n+                        } else {\n+                            format!(\"`{}`\", parent)\n+                        };\n+\n+                        let mut msg = format!(\"could not find `{}` in {}\", ident, parent);\n                         if ns == TypeNS || ns == ValueNS {\n                             let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };\n                             if let FindBindingResult::Binding(Ok(binding)) =\n                                 find_binding_in_ns(self, ns_to_try)\n                             {\n                                 let mut found = |what| {\n                                     msg = format!(\n-                                        \"expected {}, found {} `{}` in `{}`\",\n+                                        \"expected {}, found {} `{}` in {}\",\n                                         ns.descr(),\n                                         what,\n                                         ident,\n-                                        path[i - 1].ident\n+                                        parent\n                                     )\n                                 };\n                                 if binding.module().is_some() {"}, {"sha": "f9424b1d74744a21279ca290bbbd7e2054dc099c", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -282,21 +282,22 @@\n //! `%`. The actual grammar for the formatting syntax is:\n //!\n //! ```text\n-//! format_string := <text> [ maybe-format <text> ] *\n-//! maybe-format := '{' '{' | '}' '}' | <format>\n+//! format_string := text [ maybe_format text ] *\n+//! maybe_format := '{' '{' | '}' '}' | format\n //! format := '{' [ argument ] [ ':' format_spec ] '}'\n //! argument := integer | identifier\n //!\n-//! format_spec := [[fill]align][sign]['#']['0'][width]['.' precision][type]\n+//! format_spec := [[fill]align][sign]['#']['0'][width]['.' precision]type\n //! fill := character\n //! align := '<' | '^' | '>'\n //! sign := '+' | '-'\n //! width := count\n //! precision := count | '*'\n-//! type := identifier | '?' | ''\n+//! type := '' | '?' | 'x?' | 'X?' | identifier\n //! count := parameter | integer\n //! parameter := argument '$'\n //! ```\n+//! In the above grammar, `text` may not contain any `'{'` or `'}'` characters.\n //!\n //! # Formatting traits\n //!"}, {"sha": "0f5feb4ab8dc40a718177d284bf3852ecae66879", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -285,6 +285,27 @@ mod spec_extend;\n /// you would see if you coerced it to a slice), followed by [`capacity`]` -\n /// `[`len`] logically uninitialized, contiguous elements.\n ///\n+/// A vector containing the elements `'a'` and `'b'` with capacity 4 can be\n+/// visualized as below. The top part is the `Vec` struct, it contains a\n+/// pointer to the head of the allocation in the heap, length and capacity.\n+/// The bottom part is the allocation on the heap, a contiguous memory block.\n+///\n+/// ```text\n+///             ptr      len  capacity\n+///        +--------+--------+--------+\n+///        | 0x0123 |      2 |      4 |\n+///        +--------+--------+--------+\n+///             |\n+///             v\n+/// Heap   +--------+--------+--------+--------+\n+///        |    'a' |    'b' | uninit | uninit |\n+///        +--------+--------+--------+--------+\n+/// ```\n+///\n+/// - **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n+/// - Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n+///   layout (including the order of fields).\n+///\n /// `Vec` will never perform a \"small optimization\" where elements are actually\n /// stored on the stack for two reasons:\n ///\n@@ -345,6 +366,7 @@ mod spec_extend;\n /// [`push`]: Vec::push\n /// [`insert`]: Vec::insert\n /// [`reserve`]: Vec::reserve\n+/// [`MaybeUninit`]: core::mem::MaybeUninit\n /// [owned slice]: Box\n /// [slice]: ../../std/primitive.slice.html\n /// [`&`]: ../../std/primitive.reference.html"}, {"sha": "ec390c62165a56b3ec5d34d8f8c1d96136cb6081", "filename": "library/alloc/src/vec/spec_from_iter_nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -5,7 +5,7 @@ use super::{SpecExtend, Vec};\n \n /// Another specialization trait for Vec::from_iter\n /// necessary to manually prioritize overlapping specializations\n-/// see [`SpecFromIter`] for details.\n+/// see [`SpecFromIter`](super::SpecFromIter) for details.\n pub(super) trait SpecFromIterNested<T, I> {\n     fn from_iter(iter: I) -> Self;\n }"}, {"sha": "9763a2da341510aa3a00701fd6a6cf847ed3fc56", "filename": "library/std/src/env.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -561,6 +561,13 @@ pub fn home_dir() -> Option<PathBuf> {\n \n /// Returns the path of a temporary directory.\n ///\n+/// The temporary directory may be shared among users, or between processes\n+/// with different privileges; thus, the creation of any files or directories\n+/// in the temporary directory must use a secure method to create a uniquely\n+/// named file. Creating a file or directory with a fixed or predictable name\n+/// may result in \"insecure temporary file\" security vulnerabilities. Consider\n+/// using a crate that securely creates temporary files or directories.\n+///\n /// # Unix\n ///\n /// Returns the value of the `TMPDIR` environment variable if it is\n@@ -580,14 +587,10 @@ pub fn home_dir() -> Option<PathBuf> {\n ///\n /// ```no_run\n /// use std::env;\n-/// use std::fs::File;\n ///\n-/// fn main() -> std::io::Result<()> {\n+/// fn main() {\n ///     let mut dir = env::temp_dir();\n-///     dir.push(\"foo.txt\");\n-///\n-///     let f = File::create(dir)?;\n-///     Ok(())\n+///     println!(\"Temporary directory: {}\", dir.display());\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "d80643101f2ed9862d586b67dee4963e1bce7a03", "filename": "library/std/src/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fprelude.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -1,4 +1,4 @@\n-//! The I/O Prelude\n+//! The I/O Prelude.\n //!\n //! The purpose of this module is to alleviate imports of many common I/O traits\n //! by adding a glob import to the top of I/O heavy modules:"}, {"sha": "eb2095b819657ed5bcfa44d32b0142d2ab823f84", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -1,4 +1,4 @@\n-//! The Rust Prelude.\n+//! # The Rust Prelude\n //!\n //! Rust comes with a variety of things in its standard library. However, if\n //! you had to manually import every single thing that you used, it would be\n@@ -28,35 +28,35 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]},\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n //!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}, various\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n+//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`], the conversion trait that defines\n+//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n+//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n+//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }, the\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}, generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`]\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}, iterators of various\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n //!   kinds.\n //! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}, a type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`], a growable, heap-allocated vector.\n+//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n+//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}, {"sha": "c91d6decc0b675a7ab88ab93ac0fafa299adcb67", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -38,10 +38,14 @@ crate trait FormatRenderer<'tcx>: Clone {\n     fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n \n     /// Post processing hook for cleanup and dumping output to files.\n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error>;\n-\n-    /// Called after everything else to write out errors.\n-    fn after_run(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error>;\n+    ///\n+    /// A handler is available if the renderer wants to report errors.\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error>;\n }\n \n /// Main method for rendering a crate.\n@@ -104,6 +108,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n \n-    format_renderer.after_krate(&krate, &cache)?;\n-    format_renderer.after_run(diag)\n+    format_renderer.after_krate(&krate, &cache, diag)\n }"}, {"sha": "26afd705740b2b16b318e14009814f1874d60705", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -523,17 +523,12 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         Ok((cx, krate))\n     }\n \n-    fn after_run(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error> {\n-        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n-        if nb_errors > 0 {\n-            Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n-        } else {\n-            Ok(())\n-        }\n-    }\n-\n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error> {\n         let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n         let crate_name = krate.name;\n@@ -596,7 +591,15 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n-        Ok(())\n+\n+        // Flush pending errors.\n+        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n+        let nb_errors = self.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        if nb_errors > 0 {\n+            Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n+        } else {\n+            Ok(())\n+        }\n     }\n \n     fn mod_item_in("}, {"sha": "64500c1d911612db92cfce3cfd27226c09e12ae8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -199,7 +199,12 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n+    fn after_krate(\n+        &mut self,\n+        krate: &clean::Crate,\n+        cache: &Cache,\n+        _diag: &rustc_errors::Handler,\n+    ) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items(cache));\n@@ -245,8 +250,4 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         serde_json::ser::to_writer(&file, &output).unwrap();\n         Ok(())\n     }\n-\n-    fn after_run(&mut self, _diag: &rustc_errors::Handler) -> Result<(), Error> {\n-        Ok(())\n-    }\n }"}, {"sha": "06605c6f2082e4964552a8530cbec1184ecaed62", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `E`\n   --> $DIR/edition-imports-virtual-2015-gated.rs:8:5\n    |\n LL |     gen_gated!();\n-   |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n+   |     ^^^^^^^^^^^^^ could not find `E` in crate root\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c06d182fd567d2acc0cebf1d5a748d96cf6e15c4", "filename": "src/test/ui/mir/issue-80742.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,33 @@\n+// check-fail\n+\n+// This test used to cause an ICE in rustc_mir::interpret::step::eval_rvalue_into_place\n+\n+#![allow(incomplete_features)]\n+#![feature(const_evaluatable_checked)]\n+#![feature(const_generics)]\n+\n+use std::fmt::Debug;\n+use std::marker::PhantomData;\n+use std::mem::size_of;\n+\n+struct Inline<T>\n+where\n+    [u8; size_of::<T>() + 1]: ,\n+{\n+    _phantom: PhantomData<T>,\n+    buf: [u8; size_of::<T>() + 1],\n+}\n+\n+impl<T> Inline<T>\n+where\n+    [u8; size_of::<T>() + 1]: ,\n+{\n+    pub fn new(val: T) -> Inline<T> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let dst = Inline::<dyn Debug>::new(0); //~ ERROR\n+    //~^ ERROR\n+}"}, {"sha": "2ec0e9505288bfdc16aa0daf57b65d833cc57ccd", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,42 @@\n+error[E0599]: no function or associated item named `new` found for struct `Inline<dyn Debug>` in the current scope\n+  --> $DIR/issue-80742.rs:31:36\n+   |\n+LL | / struct Inline<T>\n+LL | | where\n+LL | |     [u8; size_of::<T>() + 1]: ,\n+LL | | {\n+LL | |     _phantom: PhantomData<T>,\n+LL | |     buf: [u8; size_of::<T>() + 1],\n+LL | | }\n+   | |_- function or associated item `new` not found for this\n+...\n+LL |       let dst = Inline::<dyn Debug>::new(0);\n+   |                                      ^^^ function or associated item not found in `Inline<dyn Debug>`\n+   | \n+  ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   |\n+LL |   pub trait Debug {\n+   |   --------------- doesn't satisfy `dyn Debug: Sized`\n+   |\n+   = note: the method `new` exists but the following trait bounds were not satisfied:\n+           `dyn Debug: Sized`\n+\n+error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n+  --> $DIR/issue-80742.rs:31:15\n+   |\n+LL | struct Inline<T>\n+   |               - required by this bound in `Inline`\n+...\n+LL |     let dst = Inline::<dyn Debug>::new(0);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Debug`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | struct Inline<T: ?Sized>\n+   |                ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "e8f52c0c029aaf5fcf0d772e4198a05ecee9d00f", "filename": "src/test/ui/resolve/crate-called-as-function.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    ::foo() //~ cannot find external crate `foo` in the crate root\n+}"}, {"sha": "eb42349aff1b61363610b885c4f2f5d35b0ef02d", "filename": "src/test/ui/resolve/crate-called-as-function.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fcrate-called-as-function.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find external crate `foo` in the crate root\n+  --> $DIR/crate-called-as-function.rs:2:7\n+   |\n+LL |     ::foo()\n+   |       ^^^ not found in the crate root\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "e1dedb072b77b78c7ce44d927da6cdb0e429a6ff", "filename": "src/test/ui/resolve/missing-in-namespace.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _map = std::hahmap::HashMap::new();\n+    //~^ ERROR failed to resolve: could not find `hahmap` in `std\n+}"}, {"sha": "8b292aeda50745fa45553d744c64feb3e103027c", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: could not find `hahmap` in `std`\n+  --> $DIR/missing-in-namespace.rs:2:29\n+   |\n+LL |     let _map = std::hahmap::HashMap::new();\n+   |                             ^^^^^^^ not found in `std::hahmap`\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::collections::HashMap;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "61212f299bec791ca0d81e79ae6d72ea2f36bf35", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let s = ::xcrate::S;\n-    //~^ ERROR failed to resolve: could not find `xcrate` in `{{root}}`\n+    //~^ ERROR failed to resolve: could not find `xcrate` in crate root\n }"}, {"sha": "8b2a6933f37bf6528f5497c7eef2d53c9e2ac935", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: could not find `xcrate` in `{{root}}`\n+error[E0433]: failed to resolve: could not find `xcrate` in crate root\n   --> $DIR/non-existent-2.rs:4:15\n    |\n LL |     let s = ::xcrate::S;\n-   |               ^^^^^^ could not find `xcrate` in `{{root}}`\n+   |               ^^^^^^ could not find `xcrate` in crate root\n \n error: aborting due to previous error\n "}, {"sha": "d7d7307b42431f568411e3188f0232b247ad3aaf", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.rs?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,15 @@\n+pub fn iso<A, B, F1, F2>(a: F1, b: F2) -> (Box<dyn Fn(A) -> B>, Box<dyn Fn(B) -> A>)\n+    where\n+        F1: (Fn(A) -> B) + 'static,\n+        F2: (Fn(B) -> A) + 'static,\n+{\n+    (Box::new(a), Box::new(b))\n+}\n+pub fn iso_un_option<A, B>() -> (Box<dyn Fn(A) -> B>, Box<dyn Fn(B) -> A>) {\n+   let left = |o_a: Option<_>| o_a.unwrap();\n+    let right = |o_b: Option<_>| o_b.unwrap();\n+    iso(left, right)\n+    //~^ ERROR overflow\n+}\n+\n+fn main() {}"}, {"sha": "cf867ef78c3b1fc32f2b480b566b90ef6fd5d3d3", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a243ad280a4ac57c1b8427e30e31c5b505cf10de/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=a243ad280a4ac57c1b8427e30e31c5b505cf10de", "patch": "@@ -0,0 +1,16 @@\n+error[E0275]: overflow evaluating the requirement `Option<_>: Sized`\n+  --> $DIR/mutual-recursion-issue-75860.rs:11:5\n+   |\n+LL |     iso(left, right)\n+   |     ^^^\n+   | \n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL | pub enum Option<T> {\n+   |                 - required by this bound in `Option`\n+   |\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}