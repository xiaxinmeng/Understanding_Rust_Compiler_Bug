{"sha": "d87c19db6df9189a2beb43e7998d0cc5548878b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4N2MxOWRiNmRmOTE4OWEyYmViNDNlNzk5OGQwY2M1NTQ4ODc4YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T12:56:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T12:56:09Z"}, "message": "Auto merge of #49019 - phil-opp:target-spec, r=pnkfelix\n\nIntroduce a TargetTriple enum to support absolute target paths\n\nThis PR replaces target triple strings with a `TargetTriple` enum, which represents either a target triple or a path to a JSON target file. The path variant is used if the `--target` argument has a `.json` extension, else the target triple variant is used.\n\nThe motivation of this PR is support for absolute target paths to avoid the need for setting the `RUST_TARGET_PATH` environment variable (see rust-lang/cargo#4905 for more information). For places where some kind of triple is needed (e.g. in the sysroot folder), we use the file name (without extension).\n\nFor compatibility, we keep the old behavior of searching for a file named `$(target_triple).json` in `RUST_TARGET_PATH` for non-official target triples.", "tree": {"sha": "ae7874a05c5bbcd1609ef068f557a4ade505c5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7874a05c5bbcd1609ef068f557a4ade505c5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d87c19db6df9189a2beb43e7998d0cc5548878b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d87c19db6df9189a2beb43e7998d0cc5548878b3", "html_url": "https://github.com/rust-lang/rust/commit/d87c19db6df9189a2beb43e7998d0cc5548878b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d87c19db6df9189a2beb43e7998d0cc5548878b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcffdf1b6da161eecd761eb4a3ef703ff05c33f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcffdf1b6da161eecd761eb4a3ef703ff05c33f6", "html_url": "https://github.com/rust-lang/rust/commit/bcffdf1b6da161eecd761eb4a3ef703ff05c33f6"}, {"sha": "b889f98fba63dfcce68902c3a8c330fdea16a33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b889f98fba63dfcce68902c3a8c330fdea16a33b", "html_url": "https://github.com/rust-lang/rust/commit/b889f98fba63dfcce68902c3a8c330fdea16a33b"}], "stats": {"total": 207, "additions": 150, "deletions": 57}, "files": [{"sha": "59d1a298eaa69ae6fab6d2bd1e173d227724186a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -21,7 +21,7 @@ use session::search_paths::SearchPaths;\n \n use ich::StableHashingContext;\n use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n-use rustc_back::target::Target;\n+use rustc_back::target::{Target, TargetTriple};\n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use lint;\n use middle::cstore;\n@@ -47,7 +47,7 @@ use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n use std::collections::HashSet;\n use std::iter::FromIterator;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n pub struct Config {\n     pub target: Target,\n@@ -367,7 +367,7 @@ top_level_options!(\n         libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n-        target_triple: String [TRACKED],\n+        target_triple: TargetTriple [TRACKED],\n \n         test: bool [TRACKED],\n         error_format: ErrorOutputType [UNTRACKED],\n@@ -567,7 +567,7 @@ pub fn basic_options() -> Options {\n         output_types: OutputTypes(BTreeMap::new()),\n         search_paths: SearchPaths::new(),\n         maybe_sysroot: None,\n-        target_triple: host_triple().to_string(),\n+        target_triple: TargetTriple::from_triple(host_triple()),\n         test: false,\n         incremental: None,\n         debugging_opts: basic_debugging_options(),\n@@ -1922,9 +1922,21 @@ pub fn build_session_options_and_crate_config(\n     let cg = cg;\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n-    let target = matches\n-        .opt_str(\"target\")\n-        .unwrap_or(host_triple().to_string());\n+    let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n+        if target.ends_with(\".json\") {\n+            let path = Path::new(&target);\n+            match TargetTriple::from_path(&path) {\n+                Ok(triple) => triple,\n+                Err(_) => {\n+                    early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n+                }\n+            }\n+        } else {\n+            TargetTriple::TargetTriple(target)\n+        }\n+    } else {\n+        TargetTriple::from_triple(host_triple())\n+    };\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n             if cg.opt_level.is_some() {\n@@ -2132,7 +2144,7 @@ pub fn build_session_options_and_crate_config(\n             output_types: OutputTypes(output_types),\n             search_paths,\n             maybe_sysroot: sysroot_opt,\n-            target_triple: target,\n+            target_triple,\n             test,\n             incremental,\n             debugging_opts,\n@@ -2283,6 +2295,7 @@ mod dep_tracking {\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n+    use rustc_back::target::TargetTriple;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -2342,6 +2355,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(Edition);\n+    impl_dep_tracking_hash_via_hash!(TargetTriple);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "77cf50a8341edbaf0805c07ccb814a5568d596fa", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -42,7 +42,7 @@ use syntax::feature_gate::AttributeType;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_back::{LinkerFlavor, PanicStrategy};\n-use rustc_back::target::Target;\n+use rustc_back::target::{Target, TargetTriple};\n use rustc_data_structures::flock;\n use jobserver::Client;\n \n@@ -707,7 +707,7 @@ impl Session {\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch {\n         filesearch::FileSearch::new(\n             self.sysroot(),\n-            &self.opts.target_triple,\n+            self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n             kind,\n         )\n@@ -1085,7 +1085,8 @@ pub fn build_session_(\n     span_diagnostic: errors::Handler,\n     codemap: Lrc<codemap::CodeMap>,\n ) -> Session {\n-    let host = match Target::search(config::host_triple()) {\n+    let host_triple = TargetTriple::from_triple(config::host_triple());\n+    let host = match Target::search(&host_triple) {\n         Ok(t) => t,\n         Err(e) => {\n             span_diagnostic"}, {"sha": "507243a58a5f9506b62c282c7a7c6875e7f470bb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 89, "deletions": 25, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -47,6 +47,8 @@\n use serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n+use std::{fmt, io};\n+use std::path::{Path, PathBuf};\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n use {LinkerFlavor, PanicStrategy, RelroLevel};\n@@ -824,11 +826,10 @@ impl Target {\n     ///\n     /// The error string could come from any of the APIs called, including\n     /// filesystem access and JSON decoding.\n-    pub fn search(target: &str) -> Result<Target, String> {\n+    pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n         use std::env;\n         use std::ffi::OsString;\n         use std::fs;\n-        use std::path::{Path, PathBuf};\n         use serialize::json;\n \n         fn load_file(path: &Path) -> Result<Target, String> {\n@@ -838,35 +839,40 @@ impl Target {\n             Target::from_json(obj)\n         }\n \n-        if let Ok(t) = load_specific(target) {\n-            return Ok(t)\n-        }\n-\n-        let path = Path::new(target);\n-\n-        if path.is_file() {\n-            return load_file(&path);\n-        }\n+        match target_triple {\n+            &TargetTriple::TargetTriple(ref target_triple) => {\n+                // check if triple is in list of supported targets\n+                if let Ok(t) = load_specific(target_triple) {\n+                    return Ok(t)\n+                }\n \n-        let path = {\n-            let mut target = target.to_string();\n-            target.push_str(\".json\");\n-            PathBuf::from(target)\n-        };\n+                // search for a file named `target_triple`.json in RUST_TARGET_PATH\n+                let path = {\n+                    let mut target = target_triple.to_string();\n+                    target.push_str(\".json\");\n+                    PathBuf::from(target)\n+                };\n \n-        let target_path = env::var_os(\"RUST_TARGET_PATH\")\n-                              .unwrap_or(OsString::new());\n+                let target_path = env::var_os(\"RUST_TARGET_PATH\")\n+                                    .unwrap_or(OsString::new());\n \n-        // FIXME 16351: add a sane default search path?\n+                // FIXME 16351: add a sane default search path?\n \n-        for dir in env::split_paths(&target_path) {\n-            let p =  dir.join(&path);\n-            if p.is_file() {\n-                return load_file(&p);\n+                for dir in env::split_paths(&target_path) {\n+                    let p =  dir.join(&path);\n+                    if p.is_file() {\n+                        return load_file(&p);\n+                    }\n+                }\n+                Err(format!(\"Could not find specification for target {:?}\", target_triple))\n+            }\n+            &TargetTriple::TargetPath(ref target_path) => {\n+                if target_path.is_file() {\n+                    return load_file(&target_path);\n+                }\n+                Err(format!(\"Target path {:?} is not a valid file\", target_path))\n             }\n         }\n-\n-        Err(format!(\"Could not find specification for target {:?}\", target))\n     }\n }\n \n@@ -1014,3 +1020,61 @@ fn maybe_jemalloc() -> Option<String> {\n         None\n     }\n }\n+\n+/// Either a target triple string or a path to a JSON file.\n+#[derive(PartialEq, Clone, Debug, Hash, RustcEncodable, RustcDecodable)]\n+pub enum TargetTriple {\n+    TargetTriple(String),\n+    TargetPath(PathBuf),\n+}\n+\n+impl TargetTriple {\n+    /// Creates a target triple from the passed target triple string.\n+    pub fn from_triple(triple: &str) -> Self {\n+        TargetTriple::TargetTriple(triple.to_string())\n+    }\n+\n+    /// Creates a target triple from the passed target path.\n+    pub fn from_path(path: &Path) -> Result<Self, io::Error> {\n+        let canonicalized_path = path.canonicalize()?;\n+        Ok(TargetTriple::TargetPath(canonicalized_path))\n+    }\n+\n+    /// Returns a string triple for this target.\n+    ///\n+    /// If this target is a path, the file name (without extension) is returned.\n+    pub fn triple(&self) -> &str {\n+        match self {\n+            &TargetTriple::TargetTriple(ref triple) => triple,\n+            &TargetTriple::TargetPath(ref path) => {\n+                path.file_stem().expect(\"target path must not be empty\").to_str()\n+                    .expect(\"target path must be valid unicode\")\n+            }\n+        }\n+    }\n+\n+    /// Returns an extended string triple for this target.\n+    ///\n+    /// If this target is a path, a hash of the path is appended to the triple returned\n+    /// by `triple()`.\n+    pub fn debug_triple(&self) -> String {\n+        use std::hash::{Hash, Hasher};\n+        use std::collections::hash_map::DefaultHasher;\n+\n+        let triple = self.triple();\n+        if let &TargetTriple::TargetPath(ref path) = self {\n+            let mut hasher = DefaultHasher::new();\n+            path.hash(&mut hasher);\n+            let hash = hasher.finish();\n+            format!(\"{}-{}\", triple, hash)\n+        } else {\n+            triple.to_owned()\n+        }\n+    }\n+}\n+\n+impl fmt::Display for TargetTriple {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.debug_triple())\n+    }\n+}"}, {"sha": "13ebb5f61660f981bfc9921e54f2f67a443ac967", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -22,6 +22,7 @@ use rustc::middle::cstore::DepKind;\n use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_back::PanicStrategy;\n+use rustc_back::target::TargetTriple;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{validate_crate_name, ExternCrate};\n@@ -295,7 +296,7 @@ impl<'a> CrateLoader<'a> {\n \n                 let mut proc_macro_locator = locator::Context {\n                     target: &self.sess.host,\n-                    triple: config::host_triple(),\n+                    triple: &TargetTriple::from_triple(config::host_triple()),\n                     filesearch: self.sess.host_filesearch(path_kind),\n                     rejected_via_hash: vec![],\n                     rejected_via_triple: vec![],\n@@ -339,7 +340,7 @@ impl<'a> CrateLoader<'a> {\n         // don't want to match a host crate against an equivalent target one\n         // already loaded.\n         let root = library.metadata.get_root();\n-        if locate_ctxt.triple == self.sess.opts.target_triple {\n+        if locate_ctxt.triple == &self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n                 if data.name() == root.name && root.hash == data.hash() {\n@@ -426,8 +427,9 @@ impl<'a> CrateLoader<'a> {\n     fn read_extension_crate(&mut self, span: Span, orig_name: Symbol, rename: Symbol)\n                             -> ExtensionCrate {\n         info!(\"read extension crate `extern crate {} as {}`\", orig_name, rename);\n-        let target_triple = &self.sess.opts.target_triple[..];\n-        let is_cross = target_triple != config::host_triple();\n+        let target_triple = &self.sess.opts.target_triple;\n+        let host_triple = TargetTriple::from_triple(config::host_triple());\n+        let is_cross = target_triple != &host_triple;\n         let mut target_only = false;\n         let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n@@ -437,7 +439,7 @@ impl<'a> CrateLoader<'a> {\n             hash: None,\n             filesearch: self.sess.host_filesearch(PathKind::Crate),\n             target: &self.sess.host,\n-            triple: config::host_triple(),\n+            triple: &host_triple,\n             root: &None,\n             rejected_via_hash: vec![],\n             rejected_via_triple: vec![],"}, {"sha": "41e10b4755d018f3906a2797e44fb1ef483baff5", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -233,7 +233,7 @@ use rustc::util::nodemap::FxHashMap;\n use errors::DiagnosticBuilder;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use rustc_back::target::Target;\n+use rustc_back::target::{Target, TargetTriple};\n \n use std::cmp;\n use std::fmt;\n@@ -258,7 +258,7 @@ pub struct Context<'a> {\n     pub hash: Option<&'a Svh>,\n     // points to either self.sess.target.target or self.sess.host, must match triple\n     pub target: &'a Target,\n-    pub triple: &'a str,\n+    pub triple: &'a TargetTriple,\n     pub filesearch: FileSearch<'a>,\n     pub root: &'a Option<CratePaths>,\n     pub rejected_via_hash: Vec<CrateMismatch>,\n@@ -394,7 +394,7 @@ impl<'a> Context<'a> {\n                                            add);\n \n             if (self.ident == \"std\" || self.ident == \"core\")\n-                && self.triple != config::host_triple() {\n+                && self.triple != &TargetTriple::from_triple(config::host_triple()) {\n                 err.note(&format!(\"the `{}` target may not be installed\", self.triple));\n             }\n             err.span_label(self.span, \"can't find crate\");\n@@ -698,13 +698,13 @@ impl<'a> Context<'a> {\n             }\n         }\n \n-        if root.triple != self.triple {\n+        if &root.triple != self.triple {\n             info!(\"Rejecting via crate triple: expected {} got {}\",\n                   self.triple,\n                   root.triple);\n             self.rejected_via_triple.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n-                got: root.triple,\n+                got: format!(\"{}\", root.triple),\n             });\n             return None;\n         }"}, {"sha": "d04a4001c50230ea7e9a6d74f6a1eef22bd39bcb", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -22,6 +22,7 @@ use rustc::mir;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_back::PanicStrategy;\n+use rustc_back::target::TargetTriple;\n \n use rustc_serialize as serialize;\n use syntax::{ast, attr};\n@@ -186,7 +187,7 @@ pub enum LazyState {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct CrateRoot {\n     pub name: Symbol,\n-    pub triple: String,\n+    pub triple: TargetTriple,\n     pub hash: hir::svh::Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,"}, {"sha": "19ae1fa0478eaadccae9dbd58eab62c25d5e3df7", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -950,7 +950,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             \"s390x\" => cabi_s390x::compute_abi_info(cx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(cx, self),\n             \"wasm32\" => {\n-                if cx.sess().opts.target_triple.contains(\"emscripten\") {\n+                if cx.sess().opts.target_triple.triple().contains(\"emscripten\") {\n                     cabi_asmjs::compute_abi_info(cx, self)\n                 } else {\n                     cabi_wasm32::compute_abi_info(cx, self)"}, {"sha": "d19359578330d4956bd0431f1e86fa507c1cb3a1", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -31,6 +31,7 @@ use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempdir::TempDir;\n use rustc_back::{PanicStrategy, RelroLevel};\n+use rustc_back::target::TargetTriple;\n use context::get_reloc_model;\n use llvm;\n \n@@ -81,7 +82,7 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n         }\n     };\n \n-    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple, \"link.exe\");\n+    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n     let linker_path = sess.opts.cg.linker.as_ref().map(|s| &**s)\n         .or(sess.target.target.options.linker.as_ref().map(|s| s.as_ref()))\n@@ -812,7 +813,7 @@ fn link_natively(sess: &Session,\n         }\n     }\n \n-    if sess.opts.target_triple == \"wasm32-unknown-unknown\" {\n+    if sess.opts.target_triple == TargetTriple::from_triple(\"wasm32-unknown-unknown\") {\n         wasm::rewrite_imports(&out_filename, &trans.crate_info.wasm_imports);\n         wasm::add_custom_sections(&out_filename,\n                                   &trans.crate_info.wasm_custom_sections);\n@@ -1094,7 +1095,7 @@ fn link_args(cmd: &mut Linker,\n     // addl_lib_search_paths\n     if sess.opts.cg.rpath {\n         let sysroot = sess.sysroot();\n-        let target_triple = &sess.opts.target_triple;\n+        let target_triple = sess.opts.target_triple.triple();\n         let mut get_install_prefix_lib_path = || {\n             let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n             let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);"}, {"sha": "fc699f7569f1c250ce7238c023dd4946384b4ebe", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -859,7 +859,7 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n         \"rustc.embedded.module\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    let section = if cgcx.opts.target_triple.contains(\"-ios\") {\n+    let section = if cgcx.opts.target_triple.triple().contains(\"-ios\") {\n         \"__LLVM,__bitcode\\0\"\n     } else {\n         \".llvmbc\\0\"\n@@ -874,7 +874,7 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n         \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    let section = if cgcx.opts.target_triple.contains(\"-ios\") {\n+    let section = if cgcx.opts.target_triple.triple().contains(\"-ios\") {\n         \"__LLVM,__cmdline\\0\"\n     } else {\n         \".llvmcmd\\0\""}, {"sha": "3ab33c41346971ca52e75c9ecbfd785894b24eef", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -73,6 +73,7 @@ use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n use rustc_data_structures::sync::Lrc;\n+use rustc_back::target::TargetTriple;\n \n use std::any::Any;\n use std::collections::BTreeMap;\n@@ -1086,7 +1087,7 @@ impl CrateInfo {\n         let load_wasm_items = tcx.sess.crate_types.borrow()\n             .iter()\n             .any(|c| *c != config::CrateTypeRlib) &&\n-            tcx.sess.opts.target_triple == \"wasm32-unknown-unknown\";\n+            tcx.sess.opts.target_triple == TargetTriple::from_triple(\"wasm32-unknown-unknown\");\n \n         if load_wasm_items {\n             info!(\"attempting to load all wasm sections\");"}, {"sha": "462866e05da49caed55bbc573a023049e73fb668", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -22,6 +22,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_resolve as resolve;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n+use rustc_back::target::TargetTriple;\n \n use syntax::ast::NodeId;\n use syntax::codemap;\n@@ -118,7 +119,7 @@ pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n                 externs: config::Externs,\n                 input: Input,\n-                triple: Option<String>,\n+                triple: Option<TargetTriple>,\n                 maybe_sysroot: Option<PathBuf>,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n@@ -133,14 +134,15 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n+    let host_triple = TargetTriple::from_triple(config::host_triple());\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths,\n         crate_types: vec![config::CrateTypeRlib],\n         lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n         externs,\n-        target_triple: triple.unwrap_or(config::host_triple().to_string()),\n+        target_triple: triple.unwrap_or(host_triple),\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,"}, {"sha": "0339a58d582199b5bb212a8f8f9524488f6b32ce", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87c19db6df9189a2beb43e7998d0cc5548878b3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d87c19db6df9189a2beb43e7998d0cc5548878b3", "patch": "@@ -64,6 +64,7 @@ use std::sync::mpsc::channel;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n+use rustc_back::target::TargetTriple;\n \n #[macro_use]\n pub mod externalfiles;\n@@ -542,7 +543,13 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n         paths.add_path(s, ErrorOutputType::default());\n     }\n     let cfgs = matches.opt_strs(\"cfg\");\n-    let triple = matches.opt_str(\"target\");\n+    let triple = matches.opt_str(\"target\").map(|target| {\n+        if target.ends_with(\".json\") {\n+            TargetTriple::TargetPath(PathBuf::from(target))\n+        } else {\n+            TargetTriple::TargetTriple(target)\n+        }\n+    });\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n     let crate_name = matches.opt_str(\"crate-name\");\n     let crate_version = matches.opt_str(\"crate-version\");"}]}