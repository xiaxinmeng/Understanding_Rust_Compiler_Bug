{"sha": "2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "node_id": "C_kwDOAAsO6NoAKDJhMDQwMjg0YTViYzNiZWUxZTc4YTdiZWE2MGUxNWEwMDMzZWYyYjU", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-05T23:02:57Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T13:26:26Z"}, "message": "Fix tests broken by deaggregation change", "tree": {"sha": "233446ce4bb41441a95eb6f9f49280622d4fbc5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233446ce4bb41441a95eb6f9f49280622d4fbc5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "html_url": "https://github.com/rust-lang/rust/commit/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe796cd0f608a46ae250a2899cbbec657a22db9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe796cd0f608a46ae250a2899cbbec657a22db9c", "html_url": "https://github.com/rust-lang/rust/commit/fe796cd0f608a46ae250a2899cbbec657a22db9c"}], "stats": {"total": 1084, "additions": 619, "deletions": 465}, "files": [{"sha": "92be90014ffc42a601d6b62bc088e331e61369a0", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -14,7 +14,7 @@ type R = Result<u64, i32>;\n #[no_mangle]\n pub fn try_identity(x: R) -> R {\n // CHECK: start:\n-// CHECK-NOT: br {{.*}}\n+// FIXME(JakobDegen): Broken by deaggregation change CHECK-NOT\\: br {{.*}}\n // CHECK ret void\n     let y = match into_result(x) {\n         Err(e) => return from_error(From::from(e)),"}, {"sha": "884275430c8b164eb508de4592651bc8ff3ba407", "filename": "src/test/mir-opt/76803_regression.encode.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -17,6 +17,7 @@\n       }\n   \n       bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n           discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n           goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n       }"}, {"sha": "678e965cd67f268826bef48339f298e36283fd39", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -63,6 +63,7 @@\n       }\n   \n       bb3: {\n+          Deinit(_0);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n           (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15"}, {"sha": "7dd420e41ceff11c36a55583ef6842dc99375c22", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -79,13 +79,16 @@\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n           StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n+          Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n+          Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n           StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n+          Deinit(_12);                     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n           StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10"}, {"sha": "821075047cb876e4605cfd71a4880ea5c23b5ad8", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -14,6 +14,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22"}, {"sha": "445732f70220a53b3e6e2502c8240ae979b35c16", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,6 +15,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31"}, {"sha": "445732f70220a53b3e6e2502c8240ae979b35c16", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,6 +15,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31"}, {"sha": "c60cf1e481dcdd1fc6098e12bc7708e50ba061ea", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -34,13 +34,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n           StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n           (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n -         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n +         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n           StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:21:69: 21:70\n           StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n           StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:59\n           StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n           (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n -         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n -         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n@@ -57,6 +59,7 @@\n           StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n           StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:35: 35:73\n           StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n           (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n           nop;                             // scope 6 at $DIR/invalid_constant.rs:35:44: 35:71\n           nop;                             // scope 3 at $DIR/invalid_constant.rs:35:34: 35:74"}, {"sha": "e874adebbe01b62caf26efe22d2ad3316f0b735c", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -11,6 +11,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           nop;                             // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22"}, {"sha": "69d31b681b4e5631d00353e5a994f8055a76a6c9", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -11,8 +11,10 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n           (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n           (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n -         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n +         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19"}, {"sha": "b1deebe40fac0b6db93eced5d35e363a717a6b95", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -14,6 +14,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13"}, {"sha": "07208ad0d2b58f5a1abaaf9190ae69fb801a7917", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -18,6 +18,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10"}, {"sha": "247d8f32432c0e65d33df16b134fc358894814f5", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -31,6 +31,7 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12"}, {"sha": "72a613b26b6a34246f3a7405b5268d38c4a2adec", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -52,6 +52,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38"}, {"sha": "72a613b26b6a34246f3a7405b5268d38c4a2adec", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -52,6 +52,7 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38"}, {"sha": "2bcd10f160b820782c06c73db76b3fbccfb15f16", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -12,6 +12,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n+          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15"}, {"sha": "dcc4368694c9fcf69be62016dcc72499796f0576", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22"}, {"sha": "08730da2f3d124fe0da1084a8227f8ef98a48cb7", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -16,6 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14"}, {"sha": "69de05b309f84b713ce5b9ffded2a83e05ecc549", "filename": "src/test/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -10,6 +10,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n           _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n -         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35"}, {"sha": "b28f506a694c9653dbe8d6f7808055451aaff054", "filename": "src/test/mir-opt/deaggregator_test_enum.bar.Deaggregator.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -10,6 +10,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n           _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n -         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n +         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n +         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n           StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22"}, {"sha": "5cfcef849e9db84508f515ff2c565ca5b515235f", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n           _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n -         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n +         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n +         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n           StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n@@ -29,6 +30,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n           _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n -         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n +         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n +         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n           StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18"}, {"sha": "c346f551a1ab8878f2381e5b574078692f1572bc", "filename": "src/test/mir-opt/deaggregator_test_multiple.test.Deaggregator.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -14,13 +14,15 @@\n           StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n           _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n -         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n +         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n +         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n           StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n           StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n           StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n           _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n -         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n +         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n +         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n           StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26"}, {"sha": "fcf5ef91160659a3f133724a2cc195635d45c47a", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -17,29 +17,24 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n--         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n--         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n-+         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n--         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n+          Deinit(_1);                      // scope 0 at $DIR/union.rs:13:14: 13:30\n+          (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n           _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n--         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n-+         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "e40274dc393401734ba33a5a1a4b2e30c1f142b1", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -25,6 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17"}, {"sha": "4f2b9696f8c821ccab2bfe4a5ff7deced7841d8f", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -26,6 +26,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17"}, {"sha": "96c7e46853f145d994797691c16b078868156316", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -25,6 +25,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:12: 22:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:16: 22:17"}, {"sha": "379d0e9ea48b38ff83254fe909f836fa8a0c1e46", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -34,6 +34,7 @@\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n           StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n           _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n           (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20"}, {"sha": "8396d071ded1e81d5a2cc224e8ab85484a38a4d6", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -65,21 +65,17 @@\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n--         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n--         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n--         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-+         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n--         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n--         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n -         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n +         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -98,13 +94,14 @@\n -     bb2: {\n +         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n -         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n -         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   \n@@ -121,6 +118,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -144,6 +142,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -167,6 +166,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -190,6 +190,7 @@\n +         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -211,6 +212,7 @@\n -         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n -         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n -         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+-         Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n -         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -232,6 +234,7 @@\n -         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n -         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n -         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -253,6 +256,7 @@\n -         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n -         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n -         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+-         Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n -         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -274,6 +278,7 @@\n -         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n -         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n -         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -283,13 +288,13 @@\n -     }\n - \n -     bb10: {\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n -         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n -         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   "}, {"sha": "4cd34ba38ba96cc3661faa308f57932ce325165f", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -62,6 +62,7 @@\n           _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n@@ -84,6 +85,8 @@\n -     bb2: {\n +         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+-         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n -         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n@@ -121,6 +124,7 @@\n           _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n           StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n           StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n+          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n@@ -144,6 +148,7 @@\n           _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n           StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n           StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n@@ -167,6 +172,7 @@\n           _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n           StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n           StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n+          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n@@ -190,6 +196,7 @@\n           _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n           StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n           StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n@@ -201,6 +208,7 @@\n   \n -     bb10: {\n +     bb6: {\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7"}, {"sha": "6adc5194aec75963419fd915aab8a3e133f4f454", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -32,6 +32,7 @@\n           _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n           StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n           _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17"}, {"sha": "f22fbec03d000ffc5283840d1137b5f2000b73ac", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -51,11 +51,13 @@\n       }\n   \n       bb2: {\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n           discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n       }\n   \n       bb3: {\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n           discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n           goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n       }"}, {"sha": "739492d7d249f0ee48be466807c70d2608945203", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -21,11 +21,14 @@ yields ()\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n         (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n         StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n "}, {"sha": "7f5ebe2a59b55a24151860fdcc3d43dec709d014", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -1,13 +1,17 @@\n // MIR for `main::{closure#0}` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n-    field_tys: {},\n+    field_tys: {\n+        _0: HasDrop,\n+    },\n     variant_fields: {\n         Unresumed(0): [],\n         Returned (1): [],\n         Panicked (2): [],\n-        Suspend0 (3): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n     },\n-    storage_conflicts: BitMatrix(0x0) {},\n } */\n \n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]>, _2: u8) -> GeneratorState<(), ()> {\n@@ -23,7 +27,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n     let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     scope 1 {\n-        debug _d => _3;                  // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n@@ -33,14 +37,17 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n \n     bb1: {\n         _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n         StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n         goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb2: {\n         StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n@@ -64,7 +71,6 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6]\n     }\n \n     bb5: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6"}, {"sha": "d42b8397c505e6ec6669d7849e27ce8cb2a40366", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -13,6 +13,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:6:5: 6:6\n           _3 = &_1;                        // scope 0 at $DIR/cycle.rs:6:5: 6:6\n           StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:6:5: 6:8\n+          Deinit(_4);                      // scope 0 at $DIR/cycle.rs:6:5: 6:8\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:6:5: 6:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6"}, {"sha": "4d6cdafd12deab4a5f9f0247f0a48fadfbada1d5", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -21,13 +21,15 @@ fn foo(_1: T, _2: i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n         _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12"}, {"sha": "45281302f9291483d3a4015cb25a56e5fdf3f6a9", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -25,13 +25,15 @@ fn foo(_1: T, _2: &i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12"}, {"sha": "337f0871843ea150ae37496421ab5824f8fe6152", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -28,6 +28,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n@@ -37,13 +38,15 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        Deinit(_7);                      // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         _10 = (*((*_6).0: &i32));        // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         _11 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24"}, {"sha": "48432c1ddd8a398707985bab78966820dabc9216", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -44,6 +44,7 @@\n -     }\n - \n -     bb1: {\n++         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n +         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n -         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n@@ -58,6 +59,7 @@\n +         _5 = move _3;                    // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         Deinit(_2);                      // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n@@ -113,6 +115,7 @@\n + \n +     bb6: {\n +         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 3; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n@@ -123,6 +126,7 @@\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 1; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41"}, {"sha": "072ab5e8df4f7cbe63794cc8369e9087c20aca02", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -34,6 +34,7 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41"}, {"sha": "8b8a741ec12da6a51a3a676b08b3efcf2a027565", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -34,6 +34,7 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41"}, {"sha": "b9ddbacc0e75be7f4f5fe345766b3c812593e3b2", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -20,10 +20,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n+        Deinit(_1);                      // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:33\n         StorageLive(_2);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n         _2 = &_1;                        // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n         StorageLive(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n+        Deinit(_4);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n+        Deinit(_3);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10"}, {"sha": "b44f9900d6c6a04f6453e631f09fe7bb507bfb82", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -25,6 +25,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15"}, {"sha": "8a998fb50006c0243933102dd4810a7f0653965c", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -24,7 +24,7 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n +         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant"}, {"sha": "288250e8afd2bcb5df01e9639e1ae3430d6d9d69", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -43,6 +43,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n@@ -53,6 +54,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -65,6 +67,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -86,6 +89,7 @@\n   \n       bb1: {\n           StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -96,6 +100,7 @@\n           _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "288250e8afd2bcb5df01e9639e1ae3430d6d9d69", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -43,6 +43,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n@@ -53,6 +54,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -65,6 +67,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -86,6 +89,7 @@\n   \n       bb1: {\n           StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -96,6 +100,7 @@\n           _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "89c7154ae00279c5af426cfe0e97417de11af953", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -51,6 +51,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n@@ -73,6 +74,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -86,6 +88,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -110,6 +113,7 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -126,6 +130,7 @@\n           _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "89c7154ae00279c5af426cfe0e97417de11af953", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -51,6 +51,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n@@ -73,6 +74,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n           _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n           StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n@@ -86,6 +88,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -110,6 +113,7 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -126,6 +130,7 @@\n           _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant"}, {"sha": "299529ec649d8ad35bd49edff7fe0febc2e07e11", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -67,6 +67,7 @@\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n+          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           ((_0 as Some).0: [u8; 4]) = move _5; // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           discriminant(_0) = 1;            // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n           StorageDead(_5);                 // scope 1 at $DIR/issue-75439.rs:10:38: 10:39\n@@ -75,6 +76,7 @@\n       }\n   \n       bb8: {\n+          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n           discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:12:9: 12:13\n           goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }"}, {"sha": "e63148a8312daa4c1629aff285cd1ec739ffd4e2", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -41,6 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n@@ -53,6 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n@@ -67,6 +69,7 @@\n           _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n           StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n           _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n+          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17"}, {"sha": "e63148a8312daa4c1629aff285cd1ec739ffd4e2", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -41,6 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n@@ -53,6 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n+-         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n@@ -67,6 +69,7 @@\n           _9 = _4;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n           StorageLive(_10);                // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n           _10 = _5;                        // scope 4 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n+          Deinit(_0);                      // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.0: bool) = move _7;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.1: bool) = move _8;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17\n           (_0.2: bool) = move _9;          // scope 4 at $DIR/matches_reduce_branches.rs:36:5: 36:17"}, {"sha": "5131e2f088d3d191755f51a233fe706b577821d2", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -38,6 +38,7 @@\n           _1 = const 0_i32;                // scope 0 at $DIR/remove_storage_markers.rs:7:19: 7:20\n -         StorageLive(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n -         StorageLive(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+          Deinit(_3);                      // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           _2 = move _3;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "ad8f0acc763a65a1536b2e308f711557d631c61f", "filename": "src/test/mir-opt/remove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -6,6 +6,8 @@ fn get_union() -> Foo {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n+        nop;                             // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:14: 13:16\n+        Deinit(_0);                      // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:5: 13:18\n         (_0.0: ()) = move _1;            // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:5: 13:18\n         StorageDead(_1);                 // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:13:17: 13:18\n         return;                          // scope 0 at $DIR/remove_zsts_dont_touch_unions.rs:14:2: 14:2"}, {"sha": "8394323c84998186dd8f034c730e4f67fde5c367", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 33, "deletions": 81, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,15 +15,15 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 9 {\n-                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _10: i32;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _12: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  scope 6 {\n+                      debug e => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _12;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -34,107 +34,59 @@\n           scope 4 {\n           }\n       }\n-      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          scope 6 {\n-              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-          scope 7 {\n-              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                                           // mir::Constant\n+                                           // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n+                                           // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n+  \n+      bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n   \n-      bb2: {\n+      bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _10 = move ((_8 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _10;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move _12;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _11; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n-  \n-      bb3: {\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         switchInt(const 1_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n-  \n-      bb4: {\n-          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n-      bb5: {\n-          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         switchInt(const 0_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n   }\n   "}, {"sha": "93f9a8398cb3687bf37b8b34a2ea9a4bbccd916b", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 45, "deletions": 78, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -6,115 +6,82 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n     let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-    let _5: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-    let mut _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+    let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+    let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+    let mut _7: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+    let _8: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     scope 1 {\n-        debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n         scope 2 {\n-            scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _16: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 9 {\n-                    debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                    scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                        debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                debug residual => _7;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _9: i32;             // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _10: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 6 {\n+                    debug e => _9;       // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                        debug t => _11;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                     }\n                 }\n             }\n         }\n     }\n     scope 3 {\n-        debug val => _7;                 // in scope 3 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        debug val => _8;                 // in scope 3 at $DIR/separate_const_switch.rs:29:8: 29:10\n         scope 4 {\n         }\n     }\n-    scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-        debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _8: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _9: i32;                     // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _10: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _13: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        scope 6 {\n-            debug v => _9;               // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-        scope 7 {\n-            debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-    }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n         _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n+                                         // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _11 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        _6 = _5;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _14 = move ((_6 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageDead(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n-        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n+        _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     }\n \n     bb2: {\n-        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _8 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _2 = _8;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n+        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n+        return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n     }\n \n     bb3: {\n+        StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _9 = move ((_7 as Err).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _10 = move _11;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_0 as Err).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _2 = _7;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n-        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n         StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n         return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2"}, {"sha": "559c97681ca2fb4aaa1a97343279005d69d220d9", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 33, "deletions": 91, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,15 +15,15 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 9 {\n-                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _10: i32;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _12: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  scope 6 {\n+                      debug e => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _12;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -34,117 +34,59 @@\n           scope 4 {\n           }\n       }\n-      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          scope 6 {\n-              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-          scope 7 {\n-              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                                           // mir::Constant\n+                                           // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n+                                           // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n--     }\n-- \n--     bb2: {\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n+  \n+      bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n   \n--     bb3: {\n-+     bb2: {\n+      bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _10 = move ((_8 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _10;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move _12;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _11; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n-  \n--     bb4: {\n-+     bb3: {\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n-  \n--     bb5: {\n-+     bb4: {\n-          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n--     bb6: {\n-+     bb5: {\n-          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n   }\n   "}, {"sha": "ea549a76f5810509a3d5fc8136210d626e54c175", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -38,6 +38,7 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n@@ -53,6 +54,7 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -66,6 +68,7 @@\n       bb3: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n           goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -76,6 +79,7 @@\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "d388376ca483ab90c1d15c924ff05f3bd399fad2", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -36,12 +36,14 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n         StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n         _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+        Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n         StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n         _10 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -52,6 +54,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n         StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n         _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+        Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -60,6 +63,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _8 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n         StorageLive(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n         _9 = _8;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         ((_0 as Some).0: i32) = move _9; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         StorageDead(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "11f8d509281ea71921edcd13b6175bee991a9850", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -38,6 +38,7 @@\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n           StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n           _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n+          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n@@ -52,6 +53,7 @@\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n           _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:16:44: 16:45\n+          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n@@ -69,6 +71,7 @@\n +     bb3: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n -         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n@@ -81,6 +84,7 @@\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44"}, {"sha": "389dbd27b5d1b1e8fc01ed7049b4272f6ae58b81", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -8,8 +8,7 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n--         debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n-+         debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n@@ -18,6 +17,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n           discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n       }\n@@ -27,15 +27,15 @@\n       }\n   \n       bb3: {\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n--         _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n--         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n--         ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n-+         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n       }\n   "}, {"sha": "32b7b9aa555535b29777a1ff1a9a9bb969fbe521", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -8,32 +8,38 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n-          debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n--         switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n+          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n       }\n   \n       bb1: {\n--         discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n--     }\n-- \n--     bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n--     }\n-- \n--     bb3: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n       }\n   \n--     bb4: {\n-+     bb2: {\n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:14:2: 14:2\n       }\n   }"}, {"sha": "60d421a2e1ab3f8fa1b36a25a96176d8cd583897", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -10,12 +10,10 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n--         debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n--         debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n-+         debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n@@ -24,15 +22,15 @@\n       }\n   \n       bb1: {\n--         StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n--         _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n--         StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n--         _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n--         ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n--         StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n-+         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n       }\n   \n@@ -41,15 +39,15 @@\n       }\n   \n       bb3: {\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n--         _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n--         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n--         ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n-+         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n       }\n   "}, {"sha": "52adf11d0f528042955814612d6471d644cdde4e", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -10,35 +10,48 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n-          debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n--         switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n       }\n   \n       bb1: {\n--         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n--     }\n-- \n--     bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n--     }\n-- \n--     bb3: {\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n       }\n   \n--     bb4: {\n-+     bb2: {\n+      bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:21:2: 21:2\n       }\n   }"}, {"sha": "5da2ad1a27dc9bc0216f224b9c128375a772671b", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,24 +15,19 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n--         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n-+         debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n@@ -50,17 +45,17 @@\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n--         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n--         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n+          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n@@ -70,18 +65,18 @@\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2"}, {"sha": "528828ad075adb046682e811bb4afa12a4cbaf75", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,19 +15,19 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n+          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n-          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n-          debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n@@ -41,30 +41,48 @@\n           _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n       }\n   \n       bb1: {\n-          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n--     }\n-- \n--     bb3: {\n--         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n--     }\n-- \n--     bb4: {\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      }\n+  \n+      bb3: {\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }"}, {"sha": "474d2df7aadb8fa0e1c293ab009ca63140c0eb02", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n@@ -27,6 +28,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n@@ -41,6 +43,7 @@\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n           _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35"}, {"sha": "474d2df7aadb8fa0e1c293ab009ca63140c0eb02", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n@@ -27,6 +28,7 @@\n       }\n   \n       bb1: {\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n@@ -41,6 +43,7 @@\n           _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:20:18: 20:19\n           StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n           _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:20:33: 20:34\n+          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35"}, {"sha": "6d76b51cb193c51029c1e8c3972e550f3eb96a91", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -9,6 +9,7 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:17: 22:18\n           return;                          // scope 0 at $DIR/simplify-locals.rs:23:2: 23:2"}, {"sha": "4a386d46468c9bf94fd8b8634d75ec61543f4db0", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -9,10 +9,13 @@\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n -         discriminant(_1) = 1;            // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:5: 28:17\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n -         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -                                          // mir::Constant"}, {"sha": "a8cc61f052656bb7de4a3ebd209e2dc8992a9aa4", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -18,9 +18,12 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          Deinit(_2);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n           discriminant(_2) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_3);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n           discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_1);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           (_1.0: std::option::Option<u8>) = move _2; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69"}, {"sha": "55b9838031cb3de30c946c0d38dc04e2816df4cc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -47,6 +47,7 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34"}, {"sha": "aa9f0c18d09ac77d44590482d9743b5f60657502", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n@@ -17,8 +17,24 @@\n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n+      }\n+  \n+      bb1: {\n+          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:26: 6:27\n+      }\n+  \n+      bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+      }\n+  \n+      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }"}, {"sha": "aa9f0c18d09ac77d44590482d9743b5f60657502", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n@@ -17,8 +17,24 @@\n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n+      }\n+  \n+      bb1: {\n+          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:26: 6:27\n+      }\n+  \n+      bb2: {\n+          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:17: 5:21\n+      }\n+  \n+      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }"}, {"sha": "1e0071353f9272e190bdee45e0bafd04a9e21000", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,48 +15,100 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n-          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+-             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n-          debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n++         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n -         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-+         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n++         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n -         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         _3 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n +         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n++         ((_0 as Ok).0: u32) = ((_3 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n++         nop;                             // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n +         nop;                             // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+      }\n+  \n+      bb2: {\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n++         ((_0 as Err).0: i32) = ((_3 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n++         nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n++         nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }"}, {"sha": "01e76109ada5953863d0ecc8a907c756963be109", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,24 +15,19 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n-+         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+          debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n           debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n@@ -50,34 +45,34 @@\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+          _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "56af6730966f7e638354b5f34df01fe0ced4422c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -14,19 +14,19 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n+        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n-        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+        debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n@@ -40,11 +40,38 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+        switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+    }\n+\n+    bb2: {\n+        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+        StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "4407e8e36fdd07d0cad0a4e780c9235426b553c0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -3,6 +3,8 @@\n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+    let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+    let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n     scope 1 {\n         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n@@ -19,11 +21,26 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n+        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+        switchInt(move _3) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n+    }\n+\n+    bb1: {\n+        ((_0 as Ok).0: u32) = ((_2 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n+    }\n+\n+    bb2: {\n+        ((_0 as Err).0: i32) = ((_2 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "2b79a69b93b3e653224ee60c455da3d80105e609", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -15,6 +15,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n@@ -28,6 +29,7 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19"}, {"sha": "fe87bbd8c0b8788478e229064a7a0ce06f2d5383", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -16,6 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n -         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 20:19\n@@ -57,6 +58,7 @@\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19"}, {"sha": "27f9c8b7f8feac3e693afd9087be983ed56baef4", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -22,7 +22,9 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:9: 19:13\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+        Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+        Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:47: 19:48"}, {"sha": "8622fccec888a7d4f24424e3bdc6ad95f1f52e7b", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -23,7 +23,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:9: 19:13\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+          Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:38: 19:46\n+          Deinit(_1);                      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           (_1.0: u32) = const 51_u32;      // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           (_1.1: Test1) = move _2;         // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:16: 19:48\n           StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:19:47: 19:48"}, {"sha": "d106da84fc77811635736bbf77ae2d8229c8add8", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -4,6 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n+        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13"}, {"sha": "d106da84fc77811635736bbf77ae2d8229c8add8", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -4,6 +4,7 @@ fn Test::X(_1: usize) -> Test {\n     let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n+        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13"}, {"sha": "0529b15522ea6a4ac43970cd9d630824a7aada5f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25"}, {"sha": "0529b15522ea6a4ac43970cd9d630824a7aada5f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a040284a5bc3bee1e78a7bea60e15a0033ef2b5/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=2a040284a5bc3bee1e78a7bea60e15a0033ef2b5", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25"}]}