{"sha": "d50a3a7b8696975a2a1116f8c4eb4673271ae968", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MGEzYTdiODY5Njk3NWEyYTExMTZmOGM0ZWI0NjczMjcxYWU5Njg=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T18:05:14Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:01:01Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "aecadbecf15de4c899e8ba231fcbdfcfa43c2957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aecadbecf15de4c899e8ba231fcbdfcfa43c2957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d50a3a7b8696975a2a1116f8c4eb4673271ae968", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYL0ACgkQj1SKWi7R\nP1jGIhAAlYAtU96whqhN/lDZtOlDBMRJTonjF9CImMWXPGdB7YQr8wx2N6QT5pBx\nD8TINTbX6hrqrvDllUU+FJyRSh2838UN9aH4tzsmMM4kDgQQaEWUBvku1ERuOG3h\nz6mJ4QNCewkkF4KHhm8ArKHXADBXdKTvODu/zf1rlB36nYwPeLRWurruuxYKvvt4\nRr++Wb0fochGCq6fXhaIFpB4tVeI4atZ8P3M72jM+YA5BsuotgstzKGYiwa9ZASL\ndGDboT0QvCxhg24eroOULmxEES6n3Lunwfg/wpwPTIqSNStyOOlYGoBut3lVGGXA\nEZY7E5hRT0cSVc1jlM91cQS69kWHj/6cXXky72ChVVVkgrbFcxo1LN2m6CXGYJGa\npVs0vF2UBwM2yae05BkMIFfMKErZXLVYZNmY6fmv44OCWQ3DcpEjyg7g0riWDW0E\nLnr4jwGUO2t3RMu5TCmz0Ae8Pym5709omPT9p8wlXMn8rlv9ylQNWdh606mNiO8J\nPXjagERNNu7SXuoMwQbMqxKYksgxoKcg4/vHEsH30hLyQ7xFJjoaogJx4vYHP+/q\nx2F9OOoZAEq8Y6YbmzEUp7UZ/R24bV4tgt/XJZc4SZWFuMp6TmiAptQoi4FpMiVh\nwH6xs5KiPtxyp0PPZfCNogn8JMo4q0prF+dFxUIfnX35i/IwPsk=\n=4Co4\n-----END PGP SIGNATURE-----", "payload": "tree aecadbecf15de4c899e8ba231fcbdfcfa43c2957\nparent 6ae80cf23f744566f2822861291abcfcdc6af5ce\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561140314 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140861 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d50a3a7b8696975a2a1116f8c4eb4673271ae968", "html_url": "https://github.com/rust-lang/rust/commit/d50a3a7b8696975a2a1116f8c4eb4673271ae968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d50a3a7b8696975a2a1116f8c4eb4673271ae968/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ae80cf23f744566f2822861291abcfcdc6af5ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae80cf23f744566f2822861291abcfcdc6af5ce", "html_url": "https://github.com/rust-lang/rust/commit/6ae80cf23f744566f2822861291abcfcdc6af5ce"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "9160b8024ee4512042f4c166e90600085af25d63", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -347,7 +347,7 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     }\n }\n \n-fn check_mod_attrs<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckAttrVisitor { tcx }.as_deep_visitor()"}, {"sha": "e30e86998a8c6f16bde7f8c1d8e932edb1380f31", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n-    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool {\n+    pub fn var_diverges(&self, vid: ty::TyVid) -> bool {\n         self.values.get(vid.index as usize).diverging\n     }\n "}, {"sha": "d2699004c81d8f9952d9ebd65952142d2ee39d73", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -247,11 +247,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.incoming_edges(target).sources()\n     }\n \n-    pub fn depth_traverse<'a>(\n-        &'a self,\n+    pub fn depth_traverse(\n+        &self,\n         start: NodeIndex,\n         direction: Direction,\n-    ) -> DepthFirstTraversal<'a, N, E> {\n+    ) -> DepthFirstTraversal<'_, N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n "}, {"sha": "d94ebdbae24ae9f68d3a9468a431b1cdfd9f84c0", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -92,7 +92,7 @@ struct BorrowedLocalsVisitor<'gk> {\n     trans: &'gk mut GenKillSet<Local>,\n }\n \n-fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+fn find_local(place: &Place<'_>) -> Option<Local> {\n     place.iterate(|place_base, place_projection| {\n         for proj in place_projection {\n             if proj.elem == ProjectionElem::Deref {"}, {"sha": "c4c4e10a14cc0ad1838b45c4e87534abcdcf7174", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -29,7 +29,7 @@ use syntax_pos::Span;\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl<'tcx>(tcx: TyCtxt<'tcx>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n+pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.sty {"}, {"sha": "9b1a8913822092a002b957a7a97e509500c06a01", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -79,7 +79,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n@@ -385,7 +385,7 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = InternedString::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)"}, {"sha": "a68778ba804be34610dd719e0d4307983f156019", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -698,31 +698,31 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n     tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n }\n \n-fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n }\n \n-fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n@@ -742,7 +742,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destructor> {\n+fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n@@ -755,10 +755,10 @@ fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destruct\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n-fn primary_body_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn primary_body_of(\n+    tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n@@ -796,7 +796,7 @@ fn primary_body_of<'tcx>(\n     }\n }\n \n-fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -808,11 +808,11 @@ fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     primary_body_of(tcx, id).is_some()\n }\n \n-fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx DefIdSet {\n+fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n+fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -913,7 +913,7 @@ fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckT\n     tables\n }\n \n-fn check_abi<'tcx>(tcx: TyCtxt<'tcx>, span: Span, abi: Abi) {\n+fn check_abi(tcx: TyCtxt<'_>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,\n             \"The ABI `{}` is not supported for the current target\", abi).emit()\n@@ -1291,7 +1291,7 @@ fn check_fn<'a, 'tcx>(\n     (fcx, gen_ty)\n }\n \n-fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_struct(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1305,7 +1305,7 @@ fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_union<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1467,14 +1467,14 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     }\n }\n \n-fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, item: &hir::Item) {\n+fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item) {\n     let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n-fn report_forbidden_specialization<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn report_forbidden_specialization(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     parent_impl: DefId,\n ) {\n@@ -1690,7 +1690,7 @@ fn check_impl_items_against_trait<'tcx>(\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) -> bool {\n+fn check_representable(tcx: TyCtxt<'_>, sp: Span, item_def_id: DefId) -> bool {\n     let rty = tcx.type_of(item_def_id);\n \n     // Check that it is possible to represent this type. This call identifies\n@@ -1712,7 +1712,7 @@ fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) ->\n     return true;\n }\n \n-pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let t = tcx.type_of(def_id);\n     if let ty::Adt(def, substs) = t.sty {\n         if def.is_struct() {\n@@ -1741,7 +1741,7 @@ pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_packed(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n@@ -1765,7 +1765,7 @@ fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n+fn check_packed_inner(tcx: TyCtxt<'_>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n     let t = tcx.type_of(def_id);\n     if stack.contains(&def_id) {\n         debug!(\"check_packed_inner: {:?} is recursive\", t);\n@@ -1839,7 +1839,7 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n@@ -1988,7 +1988,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res<'tcx>(tcx: TyCtxt<'tcx>, res: Res, span: Span, qpath: &QPath) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath) {\n     span_err!(tcx.sess, span, E0533,\n               \"expected unit struct/variant or constant, found {} `{}`\",\n               res.descr(),"}, {"sha": "2c48bd8b4f0265cffc5f8cbd93712276e4d0d3ea", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n-pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -156,7 +156,7 @@ pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }\n }\n \n-pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n@@ -167,7 +167,7 @@ pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n@@ -178,8 +178,8 @@ pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n \n-fn check_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_associated_item(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n     sig_if_method: Option<&hir::MethodSig>,\n@@ -231,7 +231,7 @@ fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) -> CheckWfFcxBuilder<'tcx\n     for_id(tcx, item.hir_id, item.span)\n }\n \n-fn for_id<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'tcx> {\n+fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n@@ -317,7 +317,7 @@ fn check_type_defn<'tcx, F>(\n     });\n }\n \n-fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -340,7 +340,7 @@ fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -352,8 +352,8 @@ fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_item_type(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     ty_span: Span,\n     allow_foreign_ty: bool,\n@@ -980,7 +980,7 @@ fn check_variances_for_type_defn<'tcx>(\n     }\n }\n \n-fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx>, span: Span, param_name: ast::Name) {\n+fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     let mut err = error_392(tcx, span, param_name);\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n@@ -1023,7 +1023,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n-fn check_false_global_bounds<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, span: Span, id: hir::HirId) {\n+fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);\n@@ -1135,11 +1135,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn error_392<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn error_392(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     param_name: ast::Name,\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'_> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "68bdcbfe3fd952a893144d137b96535be91b13ca", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n-pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) {\n+pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n         .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n@@ -46,7 +46,7 @@ impl<'tcx> Checker<'tcx> {\n     }\n }\n \n-fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: DefId) {\n     if let ty::Adt(..) = tcx.type_of(impl_did).sty {\n         /* do nothing */\n     } else {\n@@ -74,7 +74,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n@@ -154,7 +154,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\",\n            impl_did);\n     if impl_did.is_local() {"}, {"sha": "f208c6a138d26c7338c99eb6b8ba6d5533de7355", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -17,10 +17,10 @@ use syntax::ast;\n use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn crate_inherent_impls(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CrateInherentImpls {\n+) -> &CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     let krate = tcx.hir().krate();\n@@ -33,7 +33,7 @@ pub fn crate_inherent_impls<'tcx>(\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx>, ty_def_id: DefId) -> &'tcx [DefId] {\n+pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n     assert!(ty_def_id.is_local());\n \n     // NB. Until we adopt the red-green dep-tracking algorithm (see"}, {"sha": "1785304fb1d487449d81a3bee7d0594824c35295", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });"}, {"sha": "9b9789139b70f14c327ba51675c5d07184696f99", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -18,7 +18,7 @@ mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n@@ -124,7 +124,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -135,7 +135,7 @@ fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     builtin::check_trait(tcx, def_id);\n }\n \n-pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_coherence(tcx: TyCtxt<'_>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n@@ -151,7 +151,7 @@ pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl_overlap(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;"}, {"sha": "2d0faecd8ee71dbb8d3b94c3b71bbf96341665aa", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);\n }"}, {"sha": "123d7c6123b89a0a11db04471e64d576ad304734", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n }"}, {"sha": "8d3d79e4dce5a6f31336f7dc83e949f00cc1a026", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -2541,7 +2541,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-fn shorter<'a>(s: Option<&'a str>) -> String {\n+fn shorter(s: Option<&str>) -> String {\n     match s {\n         Some(s) => s.lines()\n             .skip_while(|s| s.chars().all(|c| c.is_whitespace()))"}, {"sha": "2da7aceae8bf4fd23c19b9aee537c0aaf03bf679", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50a3a7b8696975a2a1116f8c4eb4673271ae968/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=d50a3a7b8696975a2a1116f8c4eb4673271ae968", "patch": "@@ -119,7 +119,7 @@ impl TocBuilder {\n     /// Push a level `level` heading into the appropriate place in the\n     /// hierarchy, returning a string containing the section number in\n     /// `<num>.<num>.<num>` format.\n-    pub fn push<'a>(&'a mut self, level: u32, name: String, id: String) -> &'a str {\n+    pub fn push(&mut self, level: u32, name: String, id: String) -> &str {\n         assert!(level >= 1);\n \n         // collapse all previous sections into their parents until we"}]}