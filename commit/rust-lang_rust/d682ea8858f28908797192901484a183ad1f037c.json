{"sha": "d682ea8858f28908797192901484a183ad1f037c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODJlYTg4NThmMjg5MDg3OTcxOTI5MDE0ODRhMTgzYWQxZjAzN2M=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T14:24:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T14:39:44Z"}, "message": "Add my emacs configuration\n\nThis relies on emacs-lsp instead of eglot, so I didn't want to just add it to\nthe other one.", "tree": {"sha": "85dc4f98679d648e83fba60eb274467b8e992887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85dc4f98679d648e83fba60eb274467b8e992887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d682ea8858f28908797192901484a183ad1f037c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d682ea8858f28908797192901484a183ad1f037c", "html_url": "https://github.com/rust-lang/rust/commit/d682ea8858f28908797192901484a183ad1f037c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d682ea8858f28908797192901484a183ad1f037c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d131d63f92c932d8416367e530bc71300025c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d131d63f92c932d8416367e530bc71300025c16", "html_url": "https://github.com/rust-lang/rust/commit/2d131d63f92c932d8416367e530bc71300025c16"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "b13068ee24bfae3373423eeefb910962503240a7", "filename": "editors/emacs/ra-emacs-lsp.el", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/d682ea8858f28908797192901484a183ad1f037c/editors%2Femacs%2Fra-emacs-lsp.el", "raw_url": "https://github.com/rust-lang/rust/raw/d682ea8858f28908797192901484a183ad1f037c/editors%2Femacs%2Fra-emacs-lsp.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Fra-emacs-lsp.el?ref=d682ea8858f28908797192901484a183ad1f037c", "patch": "@@ -0,0 +1,139 @@\n+;;; ra-emacs-lsp.el --- Rust analyzer emacs bindings for emacs-lsp -*- lexical-binding: t; -*-\n+;;; Code:\n+\n+(require 'lsp)\n+(require 'dash)\n+(require 'ht)\n+\n+;; This currently\n+;;  - sets up rust-analyzer with emacs-lsp, giving\n+;;    - code actions\n+;;    - completion (use company-lsp for proper snippet support)\n+;;    - imenu support\n+;;    - on-type formatting\n+;;    - 'hover' type information & documentation (with lsp-ui)\n+;;  - implements source changes (for code actions etc.), except for file system changes\n+;;  - implements joinLines (you need to bind rust-analyzer-join-lines to a key)\n+;;  - implements extendSelection (either bind rust-analyzer-extend-selection to a key, or use expand-region)\n+\n+;; What's missing:\n+;;  - file system changes in apply-source-change\n+;;  - semantic highlighting\n+;;  - onEnter, parentModule, findMatchingBrace\n+;;  - runnables\n+;;  - the debugging commands (syntaxTree and analyzerStatus)\n+;;  - lsp-ui doesn't interpret the markdown we return currently and instead displays it raw (https://github.com/emacs-lsp/lsp-ui/issues/220 )\n+;;  - more\n+\n+;; Also, there's a problem with company-lsp's caching being too eager, sometimes\n+;; resulting in outdated completions.\n+\n+(defcustom rust-analyzer-command '(\"ra_lsp_server\")\n+  \"\"\n+  :type '(repeat (string)))\n+\n+(defconst rust-analyzer--notification-handlers\n+  '((\"rust-analyzer/publishDecorations\" . (lambda (_w _p)))))\n+\n+(defconst rust-analyzer--action-handlers\n+  '((\"rust-analyzer.applySourceChange\" .\n+     (lambda (p) (rust-analyzer--apply-source-change-command p)))))\n+\n+(defun rust-analyzer--uri-filename (text-document)\n+  (lsp--uri-to-path (gethash \"uri\" text-document)))\n+\n+(defun rust-analyzer--goto-lsp-loc (loc)\n+  (-let (((&hash \"line\" \"character\") loc))\n+    (goto-line (1+ line))\n+    (move-to-column character)))\n+\n+(defun rust-analyzer--apply-text-document-edit (edit)\n+  \"Like lsp--apply-text-document-edit, but it allows nil version.\"\n+  (let* ((ident (gethash \"textDocument\" edit))\n+         (filename (rust-analyzer--uri-filename ident))\n+         (version (gethash \"version\" ident)))\n+    (with-current-buffer (find-file-noselect filename)\n+      (when (or (not version) (= version (lsp--cur-file-version)))\n+        (lsp--apply-text-edits (gethash \"edits\" edit))))))\n+\n+(defun rust-analyzer--apply-source-change (data)\n+  ;; TODO fileSystemEdits\n+  (--each (-> data (ht-get \"workspaceEdit\") (ht-get \"documentChanges\"))\n+    (rust-analyzer--apply-text-document-edit it))\n+  (-when-let (cursor-position (ht-get data \"cursorPosition\"))\n+    (let ((filename (rust-analyzer--uri-filename (ht-get cursor-position \"textDocument\")))\n+          (position (ht-get cursor-position \"position\")))\n+      (find-file filename)\n+      (rust-analyzer--goto-lsp-loc position)\n+      )))\n+\n+(defun rust-analyzer--apply-source-change-command (p)\n+  (let ((data (-> p (ht-get \"arguments\") (car))))\n+    (rust-analyzer--apply-source-change data)))\n+\n+(lsp-register-client\n+ (make-lsp-client\n+  :new-connection (lsp-stdio-connection (lambda () rust-analyzer-command))\n+  :notification-handlers (ht<-alist rust-analyzer--notification-handlers)\n+  :action-handlers (ht<-alist rust-analyzer--action-handlers)\n+  :major-modes '(rust-mode)\n+  :ignore-messages nil\n+  :server-id 'rust-analyzer))\n+\n+(defun rust-analyzer--join-lines-params ()\n+  \"Join lines params.\"\n+  (list :textDocument (lsp--text-document-identifier)\n+        :range (if (use-region-p)\n+                   (lsp--region-to-range (region-beginning) (region-end))\n+                 (lsp--region-to-range (point) (point)))))\n+\n+(defun rust-analyzer-join-lines ()\n+  (interactive)\n+  (->\n+   (lsp-send-request (lsp-make-request \"rust-analyzer/joinLines\"\n+                                       (rust-analyzer--join-lines-params)))\n+   (rust-analyzer--apply-source-change)))\n+\n+(with-eval-after-load 'company-lsp\n+  ;; company-lsp provides a snippet handler for rust by default that adds () after function calls, which RA does better\n+  (setq company-lsp--snippet-functions (assq-delete-all \"rust\" company-lsp--snippet-functions)))\n+\n+;; extend selection\n+\n+(defun rust-analyzer-extend-selection ()\n+  (interactive)\n+  (-let (((&hash \"start\" \"end\") (rust-analyzer--extend-selection)))\n+    (rust-analyzer--goto-lsp-loc start)\n+    (set-mark (point))\n+    (rust-analyzer--goto-lsp-loc end)\n+    (exchange-point-and-mark)))\n+\n+(defun rust-analyzer--extend-selection-params ()\n+  \"Extend selection params.\"\n+  (list :textDocument (lsp--text-document-identifier)\n+        :selections\n+        (vector\n+         (if (use-region-p)\n+             (lsp--region-to-range (region-beginning) (region-end))\n+           (lsp--region-to-range (point) (point))))))\n+\n+(defun rust-analyzer--extend-selection ()\n+  (->\n+   (lsp-send-request\n+    (lsp-make-request\n+     \"rust-analyzer/extendSelection\"\n+     (rust-analyzer--extend-selection-params)))\n+   (ht-get \"selections\")\n+   (car)))\n+\n+(defun rust-analyzer--add-er-expansion ()\n+  (make-variable-buffer-local 'er/try-expand-list)\n+  (setq er/try-expand-list (append\n+                            er/try-expand-list\n+                            '(rust-analyzer-extend-selection))))\n+\n+(with-eval-after-load 'expand-region\n+  (add-hook 'rust-mode-hook 'rust-analyzer--add-er-expansion))\n+\n+(provide 'ra-emacs-lsp)\n+;;; ra-emacs-lsp.el ends here"}]}