{"sha": "5008a08acf6d3e8e01e6b1768850579da6058aea", "node_id": "C_kwDOAAsO6NoAKDUwMDhhMDhhY2Y2ZDNlOGUwMWU2YjE3Njg4NTA1NzlkYTYwNThhZWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-13T11:46:40Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-13T11:46:40Z"}, "message": "Simplify code as suggested by the review", "tree": {"sha": "2e60b942d3ecd56c302ed410f8811ad4b38a109c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e60b942d3ecd56c302ed410f8811ad4b38a109c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5008a08acf6d3e8e01e6b1768850579da6058aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5008a08acf6d3e8e01e6b1768850579da6058aea", "html_url": "https://github.com/rust-lang/rust/commit/5008a08acf6d3e8e01e6b1768850579da6058aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5008a08acf6d3e8e01e6b1768850579da6058aea/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2545fb22554eb1b04528d490c681e583fdc31d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2545fb22554eb1b04528d490c681e583fdc31d0", "html_url": "https://github.com/rust-lang/rust/commit/f2545fb22554eb1b04528d490c681e583fdc31d0"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "d61f2d0668a29481cdcd760b2fb6889635ce3adc", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5008a08acf6d3e8e01e6b1768850579da6058aea/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5008a08acf6d3e8e01e6b1768850579da6058aea/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5008a08acf6d3e8e01e6b1768850579da6058aea", "patch": "@@ -918,24 +918,15 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                     }\n \n                     traits::vtable::VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n-                        let existential_trait_ref = trait_ref.map_bound(|trait_ref| {\n-                            ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n-                        });\n-\n                         // Lookup the shape of vtable for the trait.\n                         let own_existential_entries =\n-                            tcx.own_existential_vtable_entries(existential_trait_ref.def_id());\n-\n-                        let own_entries = own_existential_entries.iter().copied().map(|_def_id| {\n-                            // The original code here ignores the method if its predicates are impossible.\n-                            // We can't really do that as, for example, all not trivial bounds on generic\n-                            // parameters are impossible (since we don't know the parameters...),\n-                            // see the comment above.\n-\n-                            1\n-                        });\n+                            tcx.own_existential_vtable_entries(trait_ref.def_id());\n \n-                        unupcasted_cost += own_entries.sum::<usize>();\n+                        // The original code here ignores the method if its predicates are impossible.\n+                        // We can't really do that as, for example, all not trivial bounds on generic\n+                        // parameters are impossible (since we don't know the parameters...),\n+                        // see the comment above.\n+                        unupcasted_cost += own_existential_entries.len();\n \n                         if emit_vptr {\n                             upcast_cost += 1;"}]}