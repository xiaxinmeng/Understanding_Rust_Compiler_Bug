{"sha": "35decad78124b251822eb4666638455224d3f0c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGVjYWQ3ODEyNGIyNTE4MjJlYjQ2NjY2Mzg0NTUyMjRkM2YwYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-12T02:24:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-12T02:24:06Z"}, "message": "Auto merge of #29616 - nagisa:mir-repeat, r=nikomatsakis\n\nr? @nikomatsakis\n\nI went ahead and replaced repeat count with a `Constant`, because it cannot be non-constant to the best of my knowledge.", "tree": {"sha": "3c1fef1b0ecca4576453bed9ec7a8a1bb0115be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1fef1b0ecca4576453bed9ec7a8a1bb0115be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35decad78124b251822eb4666638455224d3f0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35decad78124b251822eb4666638455224d3f0c8", "html_url": "https://github.com/rust-lang/rust/commit/35decad78124b251822eb4666638455224d3f0c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35decad78124b251822eb4666638455224d3f0c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc30948720d152f73e48f8f322ac3f9da18e72cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc30948720d152f73e48f8f322ac3f9da18e72cd", "html_url": "https://github.com/rust-lang/rust/commit/cc30948720d152f73e48f8f322ac3f9da18e72cd"}, {"sha": "e4e880df37d5daff3dec8adf1629df45fd8a6132", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e880df37d5daff3dec8adf1629df45fd8a6132", "html_url": "https://github.com/rust-lang/rust/commit/e4e880df37d5daff3dec8adf1629df45fd8a6132"}], "stats": {"total": 90, "additions": 76, "deletions": 14}, "files": [{"sha": "e351215276a561fbb617a2084c9a64e672fe62d4", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -44,8 +44,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, value));\n-                let count_operand = unpack!(block = this.as_operand(block, count));\n-                block.and(Rvalue::Repeat(value_operand, count_operand))\n+                let count = this.as_constant(count);\n+                block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Borrow { region, borrow_kind, arg } => {\n                 let arg_lvalue = unpack!(block = this.as_lvalue(block, arg));"}, {"sha": "56ec08818111cd20f4652d6e1b722421ee086b37", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -15,7 +15,6 @@ use hair::cx::Cx;\n use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use rustc::front::map;\n-use rustc::middle::const_eval;\n use rustc::middle::def;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::pat_util;\n@@ -80,10 +79,9 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 }\n             }\n \n-            hir::ExprLit(..) => {\n-                let value = const_eval::eval_const_expr(cx.tcx, self);\n-                ExprKind::Literal { literal: Literal::Value { value: value } }\n-            }\n+            hir::ExprLit(..) => ExprKind::Literal {\n+                literal: cx.const_eval_literal(self)\n+            },\n \n             hir::ExprBinary(op, ref lhs, ref rhs) => {\n                 if cx.tcx.is_method_call(self.id) {\n@@ -272,8 +270,17 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             // Now comes the rote stuff:\n \n-            hir::ExprRepeat(ref v, ref c) =>\n-                ExprKind::Repeat { value: v.to_ref(), count: c.to_ref() },\n+            hir::ExprRepeat(ref v, ref c) => ExprKind::Repeat {\n+                value: v.to_ref(),\n+                count: Expr {\n+                    ty: cx.tcx.expr_ty(c),\n+                    temp_lifetime: None,\n+                    span: c.span,\n+                    kind: ExprKind::Literal {\n+                        literal: cx.const_eval_literal(c)\n+                    }\n+                }.to_ref()\n+            },\n             hir::ExprRet(ref v) =>\n                 ExprKind::Return { value: v.to_ref() },\n             hir::ExprBreak(label) =>"}, {"sha": "cb04df9104225f5b22afbe7dbd786a59282c173d", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -18,13 +18,14 @@\n use hair::*;\n use repr::*;\n \n-use rustc::middle::const_eval::ConstVal;\n+use rustc::middle::const_eval::{self, ConstVal};\n use rustc::middle::def_id::DefId;\n use rustc::middle::infer::InferCtxt;\n use rustc::middle::subst::{Subst, Substs};\n use rustc::middle::ty::{self, Ty};\n use syntax::codemap::Span;\n use syntax::parse::token;\n+use rustc_front::hir;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'tcx: 'a> {\n@@ -71,6 +72,10 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         Literal::Value { value: ConstVal::Bool(false) }\n     }\n \n+    pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> {\n+        Literal::Value { value: const_eval::eval_const_expr(self.tcx, e) }\n+    }\n+\n     pub fn partial_eq(&mut self, ty: Ty<'tcx>) -> ItemRef<'tcx> {\n         let eq_def_id = self.tcx.lang_items.eq_trait().unwrap();\n         self.cmp_method_ref(eq_def_id, \"eq\", ty)"}, {"sha": "d2d7faac6271e9507f8a461054c6e03e0f2aceca", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -210,6 +210,9 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n+        // FIXME(#29789): Add a separate hair::Constant<'tcx> so this could be more explicit about\n+        // its contained data. Currently this should only contain expression of ExprKind::Literal\n+        // kind.\n         count: ExprRef<'tcx>,\n     },\n     Vec {"}, {"sha": "610c983ce325902facdef756a529a1b595a918a2", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -569,7 +569,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     // [x; 32]\n-    Repeat(Operand<'tcx>, Operand<'tcx>),\n+    Repeat(Operand<'tcx>, Constant<'tcx>),\n \n     // &x or &mut x\n     Ref(Region, BorrowKind, Lvalue<'tcx>),"}, {"sha": "b3ec2f10cf664c1e18b0239d853af104025fff03", "filename": "src/librustc_mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_mir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fvisit.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -141,7 +141,7 @@ pub trait Visitor<'tcx> {\n \n             Rvalue::Repeat(ref value, ref len) => {\n                 self.visit_operand(value);\n-                self.visit_operand(len);\n+                self.visit_constant(len);\n             }\n \n             Rvalue::Ref(r, bk, ref path) => {"}, {"sha": "218edc200d4c6cdeb119fda9b4c85d0c381a8e2d", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -49,8 +49,14 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 unimplemented!()\n             }\n \n-            mir::Rvalue::Repeat(..) => {\n-                unimplemented!()\n+            mir::Rvalue::Repeat(ref elem, ref count) => {\n+                let elem = self.trans_operand(bcx, elem);\n+                let size = self.trans_constant(bcx, count);\n+                let base = expr::get_dataptr(bcx, lldest);\n+                tvec::iter_vec_raw(bcx, base, elem.ty, size, |b, vref, _| {\n+                    build::Store(b, elem.llval, vref);\n+                    b\n+                })\n             }\n \n             mir::Rvalue::Aggregate(_, ref operands) => {"}, {"sha": "e6ffb895825126d82cf3f2d49e30585df250f201", "filename": "src/test/run-pass/mir_trans_array.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+fn into_inner() -> [u64; 1024] {\n+    let mut x = 10 + 20;\n+    [x; 1024]\n+}\n+\n+fn main(){\n+    let x: &[u64] = &[30; 1024];\n+    assert_eq!(&into_inner()[..], x);\n+}"}, {"sha": "4aa686298e9eee9188befbeeaafcd502a9895ca6", "filename": "src/test/run-pass/mir_trans_array_2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35decad78124b251822eb4666638455224d3f0c8/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35decad78124b251822eb4666638455224d3f0c8/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs?ref=35decad78124b251822eb4666638455224d3f0c8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+fn into_inner(x: u64) -> [u64; 1024] {\n+    [x; 2*4*8*16]\n+}\n+\n+fn main(){\n+    let x: &[u64] = &[42; 1024];\n+    assert_eq!(&into_inner(42)[..], x);\n+}"}]}