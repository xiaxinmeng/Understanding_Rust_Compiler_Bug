{"sha": "c4251319fd3acf7b7781275ec77b53cc0efe6140", "node_id": "C_kwDOAAsO6NoAKGM0MjUxMzE5ZmQzYWNmN2I3NzgxMjc1ZWM3N2I1M2NjMGVmZTYxNDA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-27T10:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T10:55:36Z"}, "message": "Merge #10364\n\n10364: internal: Rename `Dyn*` nodes to `Any*` nodes r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/pull/10304#issuecomment-927263396\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9fab285f486311edbf1c8986fd870d8e913fd094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fab285f486311edbf1c8986fd870d8e913fd094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4251319fd3acf7b7781275ec77b53cc0efe6140", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUaMoCRBK7hj4Ov3rIwAAaQwIABVyN8gQT+IYJl0FXN6/b2MD\nh77OLYXFizpryZXjo12jMaUIDuJnxRu4dOXp/6scQRMicga9NzXpscN2QzW7jKWc\ncow8rYbIZs+S+qLeJv+i0LBoVd5gIljrpMnqXrnJErkTpKLH/6VbZOO8Wy8IRYx6\nesuUIvDlSMDnUOI2AM4lbrNRnUHzJjaMnMDqMzV+QEDPeLybIROHMgOdSDFbQI+L\nMjTsSdCZFI31rxtsPrh6nVLihq4REEOyQXd7i+ttUVMt5XWzI0WZFxjyZmgkhTyo\n8ZAFKXUUJ38ng+BfK8XZ61+AORPNUK35R960L+465z/Qkj7ZGt5dLjuOYKn1vs4=\n=cvIZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fab285f486311edbf1c8986fd870d8e913fd094\nparent 009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1\nparent b6ed91a6de846682d91b7196e4fb0c19106d1654\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632740136 +0000\ncommitter GitHub <noreply@github.com> 1632740136 +0000\n\nMerge #10364\n\n10364: internal: Rename `Dyn*` nodes to `Any*` nodes r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/pull/10304#issuecomment-927263396\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4251319fd3acf7b7781275ec77b53cc0efe6140", "html_url": "https://github.com/rust-lang/rust/commit/c4251319fd3acf7b7781275ec77b53cc0efe6140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4251319fd3acf7b7781275ec77b53cc0efe6140/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1", "html_url": "https://github.com/rust-lang/rust/commit/009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1"}, {"sha": "b6ed91a6de846682d91b7196e4fb0c19106d1654", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ed91a6de846682d91b7196e4fb0c19106d1654", "html_url": "https://github.com/rust-lang/rust/commit/b6ed91a6de846682d91b7196e4fb0c19106d1654"}], "stats": {"total": 798, "additions": 397, "deletions": 401}, "files": [{"sha": "aa4f25a3b44dc682f5a43b3f37b4fe6db71fbce7", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -12,7 +12,7 @@ use hir_ty::{\n     },\n     Interner, TraitRefExt, WhereClause,\n };\n-use syntax::ast::{self, NameOwner};\n+use syntax::ast::{self, HasName};\n \n use crate::{\n     Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,"}, {"sha": "879124502a5c978700d82b1807d45fbb1f912f6b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -72,7 +72,7 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n use syntax::{\n-    ast::{self, AttrsOwner, NameOwner},\n+    ast::{self, HasAttrs as _, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxKind, SyntaxNodePtr,\n };\n use tt::{Ident, Leaf, Literal, TokenTree};"}, {"sha": "ff3384cbe9ef7ee9323524ed0032ef86409453f5", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -17,7 +17,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     algo::skip_trivia_token,\n-    ast::{self, GenericParamsOwner, LoopBodyOwner},\n+    ast::{self, HasGenericParams, HasLoopBody},\n     match_ast, AstNode, Direction, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextSize,\n };\n \n@@ -682,7 +682,7 @@ impl<'db> SemanticsImpl<'db> {\n     fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n         let text = lifetime.text();\n         let lifetime_param = lifetime.syntax().ancestors().find_map(|syn| {\n-            let gpl = ast::DynGenericParamsOwner::cast(syn)?.generic_param_list()?;\n+            let gpl = ast::AnyHasGenericParams::cast(syn)?.generic_param_list()?;\n             gpl.lifetime_params()\n                 .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()).as_ref() == Some(&text))\n         })?;"}, {"sha": "20e2481af6c96f3220f3dc866e41c20bd968a2d8", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -100,7 +100,7 @@ use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n use stdx::impl_from;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     match_ast, AstNode, SyntaxNode,\n };\n "}, {"sha": "6ba70a2df67c35ed0927c68be5f875e2c3352a9d", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n     InFile,\n };\n use la_arena::{Arena, ArenaMap};\n-use syntax::ast::{self, NameOwner, VisibilityOwner};\n+use syntax::ast::{self, HasName, HasVisibility};\n use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n \n use crate::{"}, {"sha": "03fe46e2671dddd418d4e89efaf076df87cabdbc", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -17,7 +17,7 @@ use la_arena::ArenaMap;\n use mbe::{syntax_node_to_token_tree, DelimiterKind};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n-    ast::{self, AstNode, AttrsOwner, IsString},\n+    ast::{self, AstNode, HasAttrs, IsString},\n     match_ast, AstPtr, AstToken, SmolStr, SyntaxNode, TextRange, TextSize,\n };\n use tt::Subtree;\n@@ -101,11 +101,7 @@ impl ops::Deref for AttrsWithOwner {\n impl RawAttrs {\n     pub(crate) const EMPTY: Self = Self { entries: None };\n \n-    pub(crate) fn new(\n-        db: &dyn DefDatabase,\n-        owner: &dyn ast::AttrsOwner,\n-        hygiene: &Hygiene,\n-    ) -> Self {\n+    pub(crate) fn new(db: &dyn DefDatabase, owner: &dyn ast::HasAttrs, hygiene: &Hygiene) -> Self {\n         let entries = collect_attrs(owner)\n             .flat_map(|(id, attr)| match attr {\n                 Either::Left(attr) => {\n@@ -122,7 +118,7 @@ impl RawAttrs {\n         Self { entries: if entries.is_empty() { None } else { Some(entries) } }\n     }\n \n-    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn ast::AttrsOwner>) -> Self {\n+    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn ast::HasAttrs>) -> Self {\n         let hygiene = Hygiene::new(db.upcast(), owner.file_id);\n         Self::new(db, owner.value, &hygiene)\n     }\n@@ -208,7 +204,7 @@ impl Attrs {\n         let mut res = ArenaMap::default();\n \n         for (id, var) in src.value.iter() {\n-            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn ast::AttrsOwner))\n+            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn ast::HasAttrs))\n                 .filter(db, krate);\n \n             res.insert(id, attrs)\n@@ -226,7 +222,7 @@ impl Attrs {\n         let mut res = ArenaMap::default();\n \n         for (id, fld) in src.value.iter() {\n-            let owner: &dyn AttrsOwner = match fld {\n+            let owner: &dyn HasAttrs = match fld {\n                 Either::Left(tuple) => tuple,\n                 Either::Right(record) => record,\n             };\n@@ -312,7 +308,7 @@ impl AttrsWithOwner {\n                     Some(it) => {\n                         let raw_attrs = RawAttrs::from_attrs_owner(\n                             db,\n-                            it.as_ref().map(|it| it as &dyn ast::AttrsOwner),\n+                            it.as_ref().map(|it| it as &dyn ast::HasAttrs),\n                         );\n                         match mod_data.definition_source(db) {\n                             InFile { file_id, value: ModuleSource::SourceFile(file) } => raw_attrs\n@@ -323,9 +319,9 @@ impl AttrsWithOwner {\n                     None => RawAttrs::from_attrs_owner(\n                         db,\n                         mod_data.definition_source(db).as_ref().map(|src| match src {\n-                            ModuleSource::SourceFile(file) => file as &dyn ast::AttrsOwner,\n-                            ModuleSource::Module(module) => module as &dyn ast::AttrsOwner,\n-                            ModuleSource::BlockExpr(block) => block as &dyn ast::AttrsOwner,\n+                            ModuleSource::SourceFile(file) => file as &dyn ast::HasAttrs,\n+                            ModuleSource::Module(module) => module as &dyn ast::HasAttrs,\n+                            ModuleSource::BlockExpr(block) => block as &dyn ast::HasAttrs,\n                         }),\n                     ),\n                 }\n@@ -398,9 +394,9 @@ impl AttrsWithOwner {\n                     None => {\n                         let InFile { file_id, value } = mod_data.definition_source(db);\n                         let attrs_owner = match &value {\n-                            ModuleSource::SourceFile(file) => file as &dyn ast::AttrsOwner,\n-                            ModuleSource::Module(module) => module as &dyn ast::AttrsOwner,\n-                            ModuleSource::BlockExpr(block) => block as &dyn ast::AttrsOwner,\n+                            ModuleSource::SourceFile(file) => file as &dyn ast::HasAttrs,\n+                            ModuleSource::Module(module) => module as &dyn ast::HasAttrs,\n+                            ModuleSource::BlockExpr(block) => block as &dyn ast::HasAttrs,\n                         };\n                         return AttrSourceMap::new(InFile::new(file_id, attrs_owner));\n                     }\n@@ -411,51 +407,51 @@ impl AttrsWithOwner {\n                 let file_id = id.parent.file_id(db);\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let owner = match &map[id.local_id] {\n-                    Either::Left(it) => ast::DynAttrsOwner::new(it.to_node(&root)),\n-                    Either::Right(it) => ast::DynAttrsOwner::new(it.to_node(&root)),\n+                    Either::Left(it) => ast::AnyHasAttrs::new(it.to_node(&root)),\n+                    Either::Right(it) => ast::AnyHasAttrs::new(it.to_node(&root)),\n                 };\n                 InFile::new(file_id, owner)\n             }\n             AttrDefId::AdtId(adt) => match adt {\n-                AdtId::StructId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-                AdtId::UnionId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-                AdtId::EnumId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+                AdtId::StructId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+                AdtId::UnionId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+                AdtId::EnumId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             },\n-            AttrDefId::FunctionId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::FunctionId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::EnumVariantId(id) => {\n                 let map = db.variants_attrs_source_map(id.parent);\n                 let file_id = id.parent.lookup(db).id.file_id();\n                 let root = db.parse_or_expand(file_id).unwrap();\n-                InFile::new(file_id, ast::DynAttrsOwner::new(map[id.local_id].to_node(&root)))\n+                InFile::new(file_id, ast::AnyHasAttrs::new(map[id.local_id].to_node(&root)))\n             }\n-            AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+            AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+            AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+            AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::MacroDefId(id) => id.ast_id().either(\n-                |it| it.with_value(ast::DynAttrsOwner::new(it.to_node(db.upcast()))),\n-                |it| it.with_value(ast::DynAttrsOwner::new(it.to_node(db.upcast()))),\n+                |it| it.with_value(ast::AnyHasAttrs::new(it.to_node(db.upcast()))),\n+                |it| it.with_value(ast::AnyHasAttrs::new(it.to_node(db.upcast()))),\n             ),\n-            AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::GenericParamId(id) => match id {\n                 GenericParamId::TypeParamId(id) => {\n                     id.parent.child_source(db).map(|source| match &source[id.local_id] {\n-                        Either::Left(id) => ast::DynAttrsOwner::new(id.clone()),\n-                        Either::Right(id) => ast::DynAttrsOwner::new(id.clone()),\n+                        Either::Left(id) => ast::AnyHasAttrs::new(id.clone()),\n+                        Either::Right(id) => ast::AnyHasAttrs::new(id.clone()),\n                     })\n                 }\n                 GenericParamId::LifetimeParamId(id) => id\n                     .parent\n                     .child_source(db)\n-                    .map(|source| ast::DynAttrsOwner::new(source[id.local_id].clone())),\n+                    .map(|source| ast::AnyHasAttrs::new(source[id.local_id].clone())),\n                 GenericParamId::ConstParamId(id) => id\n                     .parent\n                     .child_source(db)\n-                    .map(|source| ast::DynAttrsOwner::new(source[id.local_id].clone())),\n+                    .map(|source| ast::AnyHasAttrs::new(source[id.local_id].clone())),\n             },\n         };\n \n-        AttrSourceMap::new(owner.as_ref().map(|node| node as &dyn AttrsOwner))\n+        AttrSourceMap::new(owner.as_ref().map(|node| node as &dyn HasAttrs))\n     }\n \n     pub fn docs_with_rangemap(\n@@ -555,7 +551,7 @@ pub struct AttrSourceMap {\n }\n \n impl AttrSourceMap {\n-    fn new(owner: InFile<&dyn ast::AttrsOwner>) -> Self {\n+    fn new(owner: InFile<&dyn ast::HasAttrs>) -> Self {\n         let mut attrs = Vec::new();\n         let mut doc_comments = Vec::new();\n         for (_, attr) in collect_attrs(owner.value) {\n@@ -812,10 +808,10 @@ impl<'a> AttrQuery<'a> {\n \n fn attrs_from_ast<N>(src: AstId<N>, db: &dyn DefDatabase) -> RawAttrs\n where\n-    N: ast::AttrsOwner,\n+    N: ast::HasAttrs,\n {\n     let src = InFile::new(src.file_id, src.to_node(db.upcast()));\n-    RawAttrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn ast::AttrsOwner))\n+    RawAttrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn ast::HasAttrs))\n }\n \n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {\n@@ -825,7 +821,7 @@ fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase\n }\n \n fn collect_attrs(\n-    owner: &dyn ast::AttrsOwner,\n+    owner: &dyn ast::HasAttrs,\n ) -> impl Iterator<Item = (AttrId, Either<ast::Attr, ast::Comment>)> {\n     let (inner_attrs, inner_docs) = inner_attributes(owner.syntax())\n         .map_or((None, None), |(attrs, docs)| (Some(attrs), Some(docs)));"}, {"sha": "0eff093beb4bdd639d7e79638bac733c5ebb87d2", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -70,11 +70,11 @@ impl CfgExpander {\n         CfgExpander { cfg_options, hygiene, krate }\n     }\n \n-    pub(crate) fn parse_attrs(&self, db: &dyn DefDatabase, owner: &dyn ast::AttrsOwner) -> Attrs {\n+    pub(crate) fn parse_attrs(&self, db: &dyn DefDatabase, owner: &dyn ast::HasAttrs) -> Attrs {\n         RawAttrs::new(db, owner, &self.hygiene).filter(db, self.krate)\n     }\n \n-    pub(crate) fn is_cfg_enabled(&self, db: &dyn DefDatabase, owner: &dyn ast::AttrsOwner) -> bool {\n+    pub(crate) fn is_cfg_enabled(&self, db: &dyn DefDatabase, owner: &dyn ast::HasAttrs) -> bool {\n         let attrs = self.parse_attrs(db, owner);\n         attrs.is_cfg_enabled(&self.cfg_options)\n     }\n@@ -179,7 +179,7 @@ impl Expander {\n         InFile { file_id: self.current_file_id, value }\n     }\n \n-    pub(crate) fn parse_attrs(&self, db: &dyn DefDatabase, owner: &dyn ast::AttrsOwner) -> Attrs {\n+    pub(crate) fn parse_attrs(&self, db: &dyn DefDatabase, owner: &dyn ast::HasAttrs) -> Attrs {\n         self.cfg_expander.parse_attrs(db, owner)\n     }\n "}, {"sha": "804d98ce3814a271fc8d77c8b61196322c03dd9f", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -14,7 +14,7 @@ use la_arena::Arena;\n use profile::Count;\n use syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, AstChildren, LiteralKind, LoopBodyOwner, NameOwner,\n+        self, ArrayExprKind, AstChildren, HasArgList, HasLoopBody, HasName, LiteralKind,\n         SlicePatComponents,\n     },\n     AstNode, AstPtr, SyntaxNodePtr,\n@@ -912,7 +912,7 @@ impl ExprCollector<'_> {\n \n     /// Returns `None` (and emits diagnostics) when `owner` if `#[cfg]`d out, and `Some(())` when\n     /// not.\n-    fn check_cfg(&mut self, owner: &dyn ast::AttrsOwner) -> Option<()> {\n+    fn check_cfg(&mut self, owner: &dyn ast::HasAttrs) -> Option<()> {\n         match self.expander.parse_attrs(self.db, owner).cfg() {\n             Some(cfg) => {\n                 if self.expander.cfg_options().check(&cfg) != Some(false) {"}, {"sha": "6d63570428b579f70c0946d2a4e1e26782a0bf55", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,7 +7,7 @@\n use either::Either;\n use hir_expand::HirFileId;\n use itertools::Itertools;\n-use syntax::ast::AttrsOwner;\n+use syntax::ast::HasAttrs;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "ef86ab8a84394bea372ead2a5f64ad3283fe447c", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -10,7 +10,7 @@ use hir_expand::{\n     HirFileId, InFile,\n };\n use la_arena::{Arena, ArenaMap};\n-use syntax::ast::{self, GenericParamsOwner, NameOwner, TypeBoundsOwner};\n+use syntax::ast::{self, HasGenericParams, HasName, HasTypeBounds};\n \n use crate::{\n     body::LowerCtx,\n@@ -236,7 +236,7 @@ impl GenericParams {\n         &mut self,\n         lower_ctx: &LowerCtx,\n         sm: &mut SourceMap,\n-        node: &dyn GenericParamsOwner,\n+        node: &dyn HasGenericParams,\n     ) {\n         if let Some(params) = node.generic_param_list() {\n             self.fill_params(lower_ctx, sm, params)\n@@ -249,7 +249,7 @@ impl GenericParams {\n     pub(crate) fn fill_bounds(\n         &mut self,\n         lower_ctx: &LowerCtx,\n-        node: &dyn ast::TypeBoundsOwner,\n+        node: &dyn ast::HasTypeBounds,\n         target: Either<TypeRef, LifetimeRef>,\n     ) {\n         for bound in"}, {"sha": "df46ceeaeedebbea4cefdfee01a9f14bea4ed817", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -44,7 +44,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ast::{AstNode, NameOwner, StructKind};\n+use ast::{AstNode, HasName, StructKind};\n use base_db::CrateId;\n use either::Either;\n use hir_expand::{"}, {"sha": "0af4ae0f90b74839b23d1144d338a2321743a390", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n use syntax::{\n-    ast::{self, ModuleItemOwner},\n+    ast::{self, HasModuleItem},\n     SyntaxNode, WalkEvent,\n };\n \n@@ -40,7 +40,7 @@ impl<'a> Ctx<'a> {\n         }\n     }\n \n-    pub(super) fn lower_module_items(mut self, item_owner: &dyn ModuleItemOwner) -> ItemTree {\n+    pub(super) fn lower_module_items(mut self, item_owner: &dyn HasModuleItem) -> ItemTree {\n         self.tree.top_level =\n             item_owner.items().flat_map(|item| self.lower_mod_item(&item, false)).collect();\n         self.tree\n@@ -644,7 +644,7 @@ impl<'a> Ctx<'a> {\n     fn lower_generic_params_and_inner_items(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::GenericParamsOwner,\n+        node: &impl ast::HasGenericParams,\n     ) -> Interned<GenericParams> {\n         // Generics are part of item headers and may contain inner items we need to collect.\n         if let Some(params) = node.generic_param_list() {\n@@ -660,7 +660,7 @@ impl<'a> Ctx<'a> {\n     fn lower_generic_params(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::GenericParamsOwner,\n+        node: &impl ast::HasGenericParams,\n     ) -> Interned<GenericParams> {\n         let mut sm = &mut Default::default();\n         let mut generics = GenericParams::default();\n@@ -706,7 +706,7 @@ impl<'a> Ctx<'a> {\n         Interned::new(generics)\n     }\n \n-    fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<Interned<TypeBound>> {\n+    fn lower_type_bounds(&mut self, node: &impl ast::HasTypeBounds) -> Vec<Interned<TypeBound>> {\n         match node.type_bound_list() {\n             Some(bound_list) => bound_list\n                 .bounds()\n@@ -716,7 +716,7 @@ impl<'a> Ctx<'a> {\n         }\n     }\n \n-    fn lower_visibility(&mut self, item: &impl ast::VisibilityOwner) -> RawVisibilityId {\n+    fn lower_visibility(&mut self, item: &impl ast::HasVisibility) -> RawVisibilityId {\n         let vis = match self.forced_visibility {\n             Some(vis) => return vis,\n             None => RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), &self.hygiene),"}, {"sha": "99e7cdc999ccd243eda770faf218691a00adbe84", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -6,7 +6,7 @@ use crate::intern::Interned;\n \n use either::Either;\n use hir_expand::name::{name, AsName};\n-use syntax::ast::{self, AstNode, TypeBoundsOwner};\n+use syntax::ast::{self, AstNode, HasTypeBounds};\n \n use super::AssociatedTypeBinding;\n use crate::{"}, {"sha": "eeebe87acd64e712d2c37bcf97bdc2934c0e7fb8", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use tracing::debug;\n \n use mbe::ExpandResult;\n use syntax::{\n-    ast::{self, AstNode, GenericParamsOwner, ModuleItemOwner, NameOwner},\n+    ast::{self, AstNode, HasGenericParams, HasModuleItem, HasName},\n     match_ast,\n };\n "}, {"sha": "9293b45064620d4d368c8dd4523c63ba6d099268", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -558,7 +558,7 @@ mod tests {\n \n     use base_db::{fixture::WithFixture, SourceDatabase};\n     use expect_test::{expect, Expect};\n-    use syntax::ast::NameOwner;\n+    use syntax::ast::HasName;\n \n     use crate::{\n         name::AsName, test_db::TestDB, AstNode, EagerCallInfo, ExpandTo, MacroCallId,"}, {"sha": "fd1d8d2e60b5b9d06d9f44764a4f036e0b15cfe4", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -8,7 +8,7 @@ use mbe::{syntax_node_to_token_tree, ExpandError, ExpandResult};\n use rustc_hash::FxHashSet;\n use syntax::{\n     algo::diff,\n-    ast::{self, AttrsOwner, NameOwner},\n+    ast::{self, HasAttrs, HasName},\n     AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, T,\n };\n "}, {"sha": "5b3ccdeb60577a84a1cbd98e4088cc948817227b", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -9,7 +9,7 @@ use db::TokenExpander;\n use either::Either;\n use mbe::Origin;\n use syntax::{\n-    ast::{self, AttrsOwner},\n+    ast::{self, HasAttrs},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n "}, {"sha": "fc1ac172136d5a8f7b0fa018c7d17bf6e6323736", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -25,7 +25,7 @@ use std::{hash::Hash, iter, sync::Arc};\n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n     algo::skip_trivia_token,\n-    ast::{self, AstNode, AttrsOwner},\n+    ast::{self, AstNode, HasAttrs},\n     Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n "}, {"sha": "6fbb9c93b49ef1b4afca80cb75f1f18c9f88b068", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -22,7 +22,7 @@ use hir_def::{\n use hir_expand::name::{AsName, Name};\n use stdx::{always, never};\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     AstNode, AstPtr,\n };\n "}, {"sha": "cf6833e56ad4d227da03f8123d14efe0ddaa5fe0", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -26,7 +26,7 @@ use hir_expand::{db::AstDatabase, InFile};\n use once_cell::race::OnceBool;\n use stdx::format_to;\n use syntax::{\n-    ast::{self, AstNode, NameOwner},\n+    ast::{self, AstNode, HasName},\n     SyntaxNode,\n };\n use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};"}, {"sha": "472b396ac5db85b27adae1ae508dfe5f82fe787e", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n     helpers::visit_file_defs,\n     RootDatabase,\n };\n-use syntax::{ast::NameOwner, AstNode, TextRange};\n+use syntax::{ast::HasName, AstNode, TextRange};\n \n use crate::{\n     fn_references::find_all_methods,\n@@ -99,7 +99,7 @@ pub(crate) fn annotations(\n                 });\n             }\n \n-            fn name_range<T: NameOwner>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n+            fn name_range<T: HasName>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n                 if node.file_id == file_id.into() {\n                     node.value.name().map(|it| it.syntax().text_range())\n                 } else {"}, {"sha": "65c29f680532b11a55bd5bdcd43085a19a1fe1bf", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -14,7 +14,7 @@ use ide_db::{\n };\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     match_ast, AstNode, SmolStr, TextRange,\n };\n \n@@ -133,7 +133,7 @@ impl NavigationTarget {\n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n     pub(crate) fn from_named(\n         db: &RootDatabase,\n-        node: InFile<&dyn ast::NameOwner>,\n+        node: InFile<&dyn ast::HasName>,\n         kind: SymbolKind,\n     ) -> NavigationTarget {\n         let name = node.value.name().map(|it| it.text().into()).unwrap_or_else(|| \"_\".into());\n@@ -257,13 +257,13 @@ impl ToNavFromAst for hir::Trait {\n impl<D> TryToNav for D\n where\n     D: HasSource + ToNavFromAst + Copy + HasAttrs + HirDisplay,\n-    D::Ast: ast::NameOwner,\n+    D::Ast: ast::HasName,\n {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n         let mut res = NavigationTarget::from_named(\n             db,\n-            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n+            src.as_ref().map(|it| it as &dyn ast::HasName),\n             D::KIND,\n         );\n         res.docs = self.docs(db);\n@@ -343,7 +343,7 @@ impl TryToNav for hir::Field {\n impl TryToNav for hir::MacroDef {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n-        let name_owner: &dyn ast::NameOwner = match &src.value {\n+        let name_owner: &dyn ast::HasName = match &src.value {\n             Either::Left(it) => it,\n             Either::Right(it) => it,\n         };"}, {"sha": "409f3901f5810c947e128a8e02a174c684d7706e", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use ide_db::SymbolKind;\n use syntax::{\n-    ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n+    ast::{self, HasAttrs, HasGenericParams, HasName},\n     match_ast, AstNode, AstToken, NodeOrToken, SourceFile, SyntaxNode, SyntaxToken, TextRange,\n     WalkEvent,\n };\n@@ -74,11 +74,11 @@ pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n }\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n-    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: StructureNodeKind) -> Option<StructureNode> {\n+    fn decl<N: HasName + HasAttrs>(node: N, kind: StructureNodeKind) -> Option<StructureNode> {\n         decl_with_detail(&node, None, kind)\n     }\n \n-    fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n+    fn decl_with_type_ref<N: HasName + HasAttrs>(\n         node: &N,\n         type_ref: Option<ast::Type>,\n         kind: StructureNodeKind,\n@@ -91,7 +91,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n         decl_with_detail(node, detail, kind)\n     }\n \n-    fn decl_with_detail<N: NameOwner + AttrsOwner>(\n+    fn decl_with_detail<N: HasName + HasAttrs>(\n         node: &N,\n         detail: Option<String>,\n         kind: StructureNodeKind,"}, {"sha": "63fb322cea07e2de5f29357f9031c00128a915da", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@\n use hir::Semantics;\n use ide_assists::utils::test_related_attribute;\n use ide_db::RootDatabase;\n-use syntax::{ast, ast::NameOwner, AstNode, SyntaxNode};\n+use syntax::{ast, ast::HasName, AstNode, SyntaxNode};\n \n use crate::{FileId, FileRange};\n "}, {"sha": "66126c8d551155582b63c250ba5fdbc1df6beb6a", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -152,7 +152,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n \n fn contiguous_range_for_item_group<N>(first: N, visited: &mut FxHashSet<N>) -> Option<TextRange>\n where\n-    N: ast::VisibilityOwner + Clone + Hash + Eq,\n+    N: ast::HasVisibility + Clone + Hash + Eq,\n {\n     if !visited.insert(first.clone()) {\n         return None;"}, {"sha": "6b557bc92d223c01de389fb7a6b081713873c334", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -8,7 +8,7 @@ use ide_db::{\n };\n use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, LoopBodyOwner},\n+    ast::{self, HasLoopBody},\n     match_ast, AstNode,\n     SyntaxKind::IDENT,\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,"}, {"sha": "401feffff425ed6f70e9f225d8380af45c7f62a9", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use ide_db::RootDatabase;\n use ide_db::{base_db::FileRange, helpers::FamousDefs};\n use stdx::to_lower_snake_case;\n use syntax::{\n-    ast::{self, ArgListOwner, AstNode, NameOwner},\n+    ast::{self, AstNode, HasArgList, HasName},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n };\n "}, {"sha": "3ebec4dd8fb1f32aa1c8ff97824d6cd968a089a8", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -22,7 +22,7 @@ use ide_db::{\n use rustc_hash::FxHashMap;\n use syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     match_ast, AstNode, SyntaxNode, TextRange, TextSize, T,\n };\n "}, {"sha": "5d0cf7bba4b5c3143d346f461423c5be6e324b8a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use std::fmt;\n \n-use ast::NameOwner;\n+use ast::HasName;\n use cfg::CfgExpr;\n use either::Either;\n use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, InFile, Semantics};\n@@ -14,7 +14,7 @@ use ide_db::{\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::{always, format_to};\n-use syntax::ast::{self, AstNode, AttrsOwner};\n+use syntax::ast::{self, AstNode, HasAttrs as _};\n \n use crate::{\n     display::{ToNav, TryToNav},\n@@ -328,7 +328,7 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n \n     let nav = NavigationTarget::from_named(\n         sema.db,\n-        func.as_ref().map(|it| it as &dyn ast::NameOwner),\n+        func.as_ref().map(|it| it as &dyn ast::HasName),\n         SymbolKind::Function,\n     );\n     let cfg = def.attrs(sema.db).cfg();"}, {"sha": "14cdc1cf869d185f9ef0a23ff42fe1250c016026", "filename": "crates/ide_assists/src/handlers/add_lifetime_to_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n+use syntax::ast::{self, AstNode, HasGenericParams, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "c856ab45d7bf18b4e051e48ae724b96974e138c8", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n-use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n+use syntax::ast::{self, make, AstNode, HasName, MatchArm, Pat};\n \n use crate::{\n     utils::{self, render_snippet, Cursor},"}, {"sha": "5f15e923ad862be7104ac170437b655aee93b216", "filename": "crates/ide_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, NameOwner, VisibilityOwner},\n+    ast::{self, HasName, HasVisibility},\n     AstNode,\n     SyntaxKind::{\n         CONST, ENUM, FN, MACRO_DEF, MODULE, STATIC, STRUCT, TRAIT, TYPE_ALIAS, USE, VISIBILITY,"}, {"sha": "2e24c22c9fcfbf564ea5519e40337ea8b409dd7d", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n };\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, edit::AstNodeEdit, make, ArgListOwner},\n+    ast::{self, edit::AstNodeEdit, make, HasArgList},\n     ted, AstNode, SyntaxNode,\n };\n "}, {"sha": "29555a5111ceefe4f8822e2f4afed981be074dc9", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@ use ide_db::{\n     helpers::{mod_path_to_ast, FamousDefs},\n     traits::resolve_target_trait,\n };\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "8744115f29ccb709f978e702bcc9752a3da23644", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@ use hir::known;\n use ide_db::helpers::FamousDefs;\n use stdx::format_to;\n use syntax::{\n-    ast::{self, edit_in_place::Indent, make, ArgListOwner, LoopBodyOwner},\n+    ast::{self, edit_in_place::Indent, make, HasArgList, HasLoopBody},\n     AstNode,\n };\n "}, {"sha": "9b8e548e8f0f5ec1c7b588c8c6075b8e11fbde1c", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use ide_db::defs::{Definition, NameRefClass};\n use syntax::{\n-    ast::{self, AstNode, GenericParamsOwner, VisibilityOwner},\n+    ast::{self, AstNode, HasGenericParams, HasVisibility},\n     match_ast, SyntaxNode,\n };\n "}, {"sha": "2ecf64625232d6ff5ebb5ae838acdee988c944b6", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, LoopBodyOwner,\n+        make, HasLoopBody,\n     },\n     AstNode, T,\n };"}, {"sha": "a57b3c39043ca4b1785155cab9fd2388a8296e0c", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n };\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, AstNode, FieldExpr, IdentPat, MethodCallExpr, NameOwner},\n+    ast::{self, AstNode, FieldExpr, HasName, IdentPat, MethodCallExpr},\n     TextRange,\n };\n "}, {"sha": "4b11c5da193e00fb225e4ef65efe15e7ac3eb6fc", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -636,7 +636,7 @@ impl FunctionBody {\n         let mut ancestors = self.parent()?.ancestors();\n         let infer_expr_opt = |expr| sema.type_of_expr(&expr?).map(TypeInfo::adjusted);\n         let mut parent_loop = None;\n-        let mut set_parent_loop = |loop_: &dyn ast::LoopBodyOwner| {\n+        let mut set_parent_loop = |loop_: &dyn ast::HasLoopBody| {\n             if loop_\n                 .loop_body()\n                 .map_or(false, |it| it.syntax().text_range().contains_range(self.text_range()))"}, {"sha": "d481b8c29813d6af5aa279a759eddf7d8daa6f23", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -15,8 +15,8 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{\n-        self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, AttrsOwner,\n-        GenericParamsOwner, NameOwner, TypeBoundsOwner, VisibilityOwner,\n+        self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, HasAttrs, HasGenericParams,\n+        HasName, HasTypeBounds, HasVisibility,\n     },\n     match_ast,\n     ted::{self, Position},"}, {"sha": "f0c4d521dba5fd5a2ec0ce0affd359a0408e4021", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@ use either::Either;\n use ide_db::helpers::node_ext::walk_ty;\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, edit::IndentLevel, AstNode, GenericParamsOwner, NameOwner},\n+    ast::{self, edit::IndentLevel, AstNode, HasGenericParams, HasName},\n     match_ast,\n };\n "}, {"sha": "80da4a35ad85313ff8387e1d40eb6b042c8afa31", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n use ide_db::base_db::FileId;\n use syntax::{\n-    ast::{self, VisibilityOwner},\n+    ast::{self, HasVisibility as _},\n     AstNode, TextRange, TextSize,\n };\n \n@@ -147,7 +147,7 @@ fn target_data_for_def(\n     ) -> Option<(TextSize, Option<ast::Visibility>, TextRange, FileId)>\n     where\n         S: HasSource<Ast = Ast>,\n-        Ast: AstNode + ast::VisibilityOwner,\n+        Ast: AstNode + ast::HasVisibility,\n     {\n         let source = x.source(db)?;\n         let in_file_syntax = source.syntax();"}, {"sha": "e67789a662dc6adc8f104580d87ed2b764fdef71", "filename": "crates/ide_assists/src/handlers/generate_default_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use ide_db::{helpers::FamousDefs, RootDatabase};\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "680ec0d1cd87194e30f56fa6a187ed71cdad54f4", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@ use ide_db::helpers::FamousDefs;\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    ast::{self, GenericParamsOwner, Impl, NameOwner, TypeBoundsOwner},\n+    ast::{self, HasGenericParams, HasName, HasTypeBounds, Impl},\n     AstNode,\n };\n "}, {"sha": "2208c23c15e56f87fc4405505ec87cccf88b07d7", "filename": "crates/ide_assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@ use std::fmt::Display;\n \n use ide_db::{helpers::FamousDefs, RootDatabase};\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     AstNode, SyntaxNode,\n };\n "}, {"sha": "28483f795e0f6c8fb5b0d20cec4b855050995084", "filename": "crates/ide_assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, AstNode, AttrsOwner},\n+    ast::{self, AstNode, HasAttrs},\n     SyntaxKind::{COMMENT, WHITESPACE},\n     TextSize,\n };"}, {"sha": "c2a6e438b176bca338c1fda564afb28d370fd7c1", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use stdx::to_lower_snake_case;\n-use syntax::ast::VisibilityOwner;\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::HasVisibility;\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{\n     utils::{add_method_to_adt, find_struct_impl},"}, {"sha": "a9116be67ca1017f2bcf37ea2542570afc20189f", "filename": "crates/ide_assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n use itertools::Itertools;\n use stdx::to_lower_snake_case;\n-use syntax::ast::VisibilityOwner;\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::HasVisibility;\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{\n     utils::{add_method_to_adt, find_struct_impl},"}, {"sha": "96b751f0996ffe429202f8c1fd583d3e7dd81c76", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "8a115087da6a10b2fdc6108bb571b58c912817da", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, ArgListOwner, AstNode, CallExpr, ModuleItemOwner,\n+        make, AstNode, CallExpr, HasArgList, HasModuleItem,\n     },\n     SyntaxKind, SyntaxNode, TextRange, TextSize,\n };"}, {"sha": "186e01fa9d077b344c6f61292678e55e8ad46d6d", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use stdx::{format_to, to_lower_snake_case};\n-use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n+use syntax::ast::{self, AstNode, HasName, HasVisibility};\n \n use crate::{\n     utils::useless_type_special_case,"}, {"sha": "58fea103f854af724d72cb1d66c065a90ebc672c", "filename": "crates/ide_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ast::{self, AstNode, NameOwner};\n+use syntax::ast::{self, AstNode, HasName};\n \n use crate::{utils::generate_impl_text, AssistContext, AssistId, AssistKind, Assists};\n "}, {"sha": "d831289775a2e3d35b24e7fc70e4a38ee759ff00", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use hir::{known, HasSource, Name};\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     AstNode,\n };\n "}, {"sha": "6a1f710f6d5f3009c38495acd027ab399d5e0c30", "filename": "crates/ide_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::ast::{self, AstNode, NameOwner, StructKind, VisibilityOwner};\n+use syntax::ast::{self, AstNode, HasName, HasVisibility, StructKind};\n \n use crate::{\n     utils::{find_impl_block_start, find_struct_impl, generate_impl_text},"}, {"sha": "5005ac9f5c1668665cdc12f310495c04289ea0d7", "filename": "crates/ide_assists/src/handlers/generate_setter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use stdx::{format_to, to_lower_snake_case};\n-use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n+use syntax::ast::{self, AstNode, HasName, HasVisibility};\n \n use crate::{\n     utils::{find_impl_block_end, find_struct_impl, generate_impl_text},"}, {"sha": "14313fefa77b3cdd3a9c5fddd6d6057618941e9b", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -11,7 +11,7 @@ use ide_db::{\n };\n use itertools::{izip, Itertools};\n use syntax::{\n-    ast::{self, edit_in_place::Indent, ArgListOwner},\n+    ast::{self, edit_in_place::Indent, HasArgList},\n     ted, AstNode, SyntaxNode,\n };\n "}, {"sha": "f01dff0965fde9b281d4f41c53c53c4a84514993", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,7 +7,7 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    ast::{self, AstNode, AstToken, NameOwner},\n+    ast::{self, AstNode, AstToken, HasName},\n     SyntaxElement, TextRange,\n };\n "}, {"sha": "ec6be2e8169e300eb0d02b8548a18c87d43e3805", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, GenericParamsOwner},\n+    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, HasGenericParams},\n     ted::{self, Position},\n     AstNode, TextRange,\n };"}, {"sha": "01c6eea225b806b10eb6e71442ea18ac1336c5c9", "filename": "crates/ide_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, NameOwner, TypeBoundsOwner},\n+    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, HasName, HasTypeBounds},\n     match_ast,\n };\n "}, {"sha": "30dc7c5fa40a8a4dcd60b63a0002ddb892ebc1a9", "filename": "crates/ide_assists/src/handlers/move_module_to_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use ide_db::base_db::AnchoredPathBuf;\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    ast::{self, edit::AstNodeEdit, NameOwner},\n+    ast::{self, edit::AstNodeEdit, HasName},\n     AstNode, TextRange,\n };\n "}, {"sha": "8a2ec8ba809fea092142035e1d75d78265287a51", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -8,7 +8,7 @@ use ide_db::helpers::{\n use ide_db::RootDatabase;\n use syntax::{\n     ast,\n-    ast::{make, ArgListOwner},\n+    ast::{make, HasArgList},\n     AstNode,\n };\n "}, {"sha": "545809a71d155d1a2e683220757b94ee4b5d104d", "filename": "crates/ide_assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n use ide_db::{base_db::FileId, defs::Definition, search::FileReference};\n use syntax::{\n     algo::find_node_at_range,\n-    ast::{self, ArgListOwner},\n+    ast::{self, HasArgList},\n     AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, T,\n };\n "}, {"sha": "8ae12ab1f41d1fb6473adc5db8aa3fc95bce0751", "filename": "crates/ide_assists/src/handlers/reorder_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use rustc_hash::FxHashMap;\n use hir::{PathResolution, Semantics};\n use ide_db::RootDatabase;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     ted, AstNode,\n };\n "}, {"sha": "c0b7db332e211402b44cddad56207058ff507c5e", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -3,7 +3,7 @@ use ide_db::helpers::{import_assets::NameToImport, mod_path_to_ast};\n use ide_db::items_locator;\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, AstNode, NameOwner},\n+    ast::{self, make, AstNode, HasName},\n     SyntaxKind::{IDENT, WHITESPACE},\n };\n "}, {"sha": "3a89c2b996c830e5be0d8697f9eed9cf5d7a08f9", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, NameOwner,\n+        make, HasName,\n     },\n     AstNode, TextRange,\n };"}, {"sha": "a9d4f4299e73d001a2670af7ca92b567ab23787c", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -3,7 +3,7 @@ use std::cmp::Ordering;\n use itertools::Itertools;\n \n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     ted, AstNode, TextRange,\n };\n \n@@ -195,7 +195,7 @@ fn add_sort_variants_assist(acc: &mut Assists, variant_list: ast::VariantList) -\n     )\n }\n \n-fn sort_by_name<T: NameOwner + Clone>(initial: &[T]) -> Vec<T> {\n+fn sort_by_name<T: HasName + Clone>(initial: &[T]) -> Vec<T> {\n     initial\n         .iter()\n         .cloned()"}, {"sha": "feaa24c1fe184c25772dff2383b50698bab56861", "filename": "crates/ide_assists/src/handlers/toggle_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, AttrsOwner},\n+    ast::{self, HasAttrs},\n     AstNode, AstToken,\n };\n "}, {"sha": "71a816e19f65d080c523b0e155bba1b979e162f2", "filename": "crates/ide_assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,6 +1,6 @@\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, VisibilityOwner},\n+    ast::{self, make, HasVisibility},\n     ted::{self, Position},\n     AstNode, SyntaxKind,\n };"}, {"sha": "9bc70bc3fe72b666135d8775e925061575a94e0a", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -14,7 +14,7 @@ use syntax::{\n         self,\n         edit::{self, AstNodeEdit},\n         edit_in_place::AttrsOwnerEdit,\n-        make, ArgListOwner, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n+        make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds,\n     },\n     ted, AstNode, Direction, SmolStr,\n     SyntaxKind::*,"}, {"sha": "6915460209b6a1457782f1957988d5bc1217c452", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n //! This module contains functions to generate default trait impl function bodies where possible.\n \n use syntax::{\n-    ast::{self, edit::AstNodeEdit, make, AstNode, BinaryOp, CmpOp, LogicOp, NameOwner},\n+    ast::{self, edit::AstNodeEdit, make, AstNode, BinaryOp, CmpOp, HasName, LogicOp},\n     ted,\n };\n "}, {"sha": "35e230019625fbaf687c0d26f5157b66135b0a33", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use ide_db::RootDatabase;\n use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     match_ast, AstNode, SmolStr,\n };\n "}, {"sha": "a9f1944e28366530d249cbfa2a378055341eed10", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, ModuleItemOwner},\n+    ast::{self, HasModuleItem},\n     match_ast, AstNode,\n };\n "}, {"sha": "9d3e894a3dbdaa99091b3f2fa7f6240841c32d99", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n };\n use syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, NameOrNameRef, NameOwner},\n+    ast::{self, HasName, NameOrNameRef},\n     match_ast, AstNode, NodeOrToken,\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,"}, {"sha": "381a6a83aace369090621602c0335de73b04dab4", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -8,7 +8,7 @@ use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, ArgListOwner, LoopBodyOwner},\n+    ast::{self, HasArgList, HasLoopBody},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,"}, {"sha": "166ae3c16bc54028168f6443612fcfc3dbad6344", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasSource};\n use ide_db::SymbolKind;\n use syntax::{\n-    ast::{Const, NameOwner},\n+    ast::{Const, HasName},\n     display::const_label,\n };\n "}, {"sha": "c1e61826430d516881c6ce656aa40a67be0e37c4", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasSource};\n use ide_db::SymbolKind;\n use syntax::{\n-    ast::{NameOwner, TypeAlias},\n+    ast::{HasName, TypeAlias},\n     display::type_label,\n };\n "}, {"sha": "e1d85f0411ca762527b05e0bf9d9f270d16a301b", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -5,7 +5,7 @@ use hir::{HasAttrs, HirDisplay, Semantics, Type};\n use stdx::format_to;\n use syntax::{\n     algo,\n-    ast::{self, ArgListOwner, NameOwner},\n+    ast::{self, HasArgList, HasName},\n     match_ast, AstNode, Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n "}, {"sha": "a8087d47fe269a5deb274fa696e1ca8469311759", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -13,7 +13,7 @@ use base_db::FileId;\n use either::Either;\n use hir::{ItemInNs, MacroDef, ModuleDef, Name, Semantics};\n use syntax::{\n-    ast::{self, make, LoopBodyOwner},\n+    ast::{self, make, HasLoopBody},\n     AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent, T,\n };\n "}, {"sha": "d6bb19d12983c1801fe761387fedbbf09ac44c2f", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -6,7 +6,7 @@ use hir::{\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     utils::path_to_string_stripping_turbo_fish,\n     AstNode, SyntaxNode,\n };"}, {"sha": "a5d193277556091af3ccc13e24c784520f0c068c", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,7 +7,7 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, AttrsOwner, ModuleItemOwner, PathSegmentKind, VisibilityOwner},\n+    ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n     match_ast, ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n@@ -51,7 +51,7 @@ pub enum ImportScope {\n \n impl ImportScope {\n     fn from(syntax: SyntaxNode) -> Option<Self> {\n-        fn contains_cfg_attr(attrs: &dyn AttrsOwner) -> bool {\n+        fn contains_cfg_attr(attrs: &dyn HasAttrs) -> bool {\n             attrs\n                 .attrs()\n                 .any(|attr| attr.as_simple_call().map_or(false, |(ident, _)| ident == \"cfg\"))"}, {"sha": "8189d6e53f7c741ca7bca1604bc2a3527ac48ce3", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -3,7 +3,7 @@ use std::cmp::Ordering;\n \n use itertools::{EitherOrBoth, Itertools};\n use syntax::{\n-    ast::{self, make, AstNode, AttrsOwner, PathSegmentKind, VisibilityOwner},\n+    ast::{self, make, AstNode, HasAttrs, HasVisibility, PathSegmentKind},\n     ted,\n };\n "}, {"sha": "0ca0dc8c6b1b4e49257a313dcf70955a3252f43b", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -27,7 +27,7 @@ use either::Either;\n use hir::{AsAssocItem, FieldSource, HasSource, InFile, ModuleSource, Semantics};\n use stdx::never;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     lex_single_syntax_kind, AstNode, SyntaxKind, TextRange, T,\n };\n use text_edit::{TextEdit, TextEditBuilder};\n@@ -156,7 +156,7 @@ impl Definition {\n         fn name_range<D>(def: D, sema: &Semantics<RootDatabase>) -> Option<FileRange>\n         where\n             D: HasSource,\n-            D::Ast: ast::NameOwner,\n+            D::Ast: ast::HasName,\n         {\n             let src = def.source(sema.db)?;\n             let name = src.value.name()?;"}, {"sha": "54ceafa67f69d3ad23e9d2f5d13b7b2158c2b344", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -37,7 +37,7 @@ use hir::db::DefDatabase;\n use rayon::prelude::*;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     match_ast, AstNode, Parse, SmolStr, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n@@ -427,7 +427,7 @@ fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec\n }\n \n fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n-    fn decl<N: NameOwner>(node: N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n+    fn decl<N: HasName>(node: N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n         let name = node.name()?;\n         let name_range = name.syntax().text_range();\n         let name = name.text().into();"}, {"sha": "def7a8acaa7379f7b8be2d09ea79749ea03c5d1e", "filename": "crates/ide_db/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -4,7 +4,7 @@ use crate::RootDatabase;\n use hir::Semantics;\n use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     AstNode,\n };\n "}, {"sha": "9826e1c707eaa64e1f2c8afdfebd23da9fdd8d00", "filename": "crates/ide_diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n use hir::{db::AstDatabase, InFile};\n use ide_db::source_change::SourceChange;\n use syntax::{\n-    ast::{self, ArgListOwner},\n+    ast::{self, HasArgList},\n     AstNode, TextRange,\n };\n use text_edit::TextEdit;"}, {"sha": "cc10a63f878b6859703dac2f38d1eb1de70f0b47", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,7 +7,7 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    ast::{self, ModuleItemOwner, NameOwner},\n+    ast::{self, HasModuleItem, HasName},\n     AstNode, TextRange, TextSize,\n };\n use text_edit::TextEdit;"}, {"sha": "88c1d80608ece8d3fd1ac45de0b37cd2de776a2c", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -527,7 +527,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         pattern_ufcs: &UfcsCallInfo,\n         code: &ast::MethodCallExpr,\n     ) -> Result<(), MatchFailed> {\n-        use ast::ArgListOwner;\n+        use ast::HasArgList;\n         let code_resolved_function = self\n             .sema\n             .resolve_method_call(code)\n@@ -587,7 +587,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         pattern_ufcs: &UfcsCallInfo,\n         code: &ast::CallExpr,\n     ) -> Result<(), MatchFailed> {\n-        use ast::ArgListOwner;\n+        use ast::HasArgList;\n         // Check that the first argument is the expected type.\n         if let (Some(pattern_type), Some(expr)) = (\n             &pattern_ufcs.qualifier_type,"}, {"sha": "cd5d76be3c0fd0bc4d513f9d38ee2fdd67264b5d", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, HasName},\n     AstNode, SmolStr,\n };\n use test_utils::{bench, bench_fixture, skip_slow_tests};"}, {"sha": "26924fa8f3e047881693f95a0c42ca07089700a6", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -238,7 +238,7 @@ fn debug_dump_ignore_spaces(node: &syntax::SyntaxNode) -> String {\n \n #[test]\n fn test_node_to_tt_censor() {\n-    use syntax::ast::{AttrsOwner, ModuleItemOwner};\n+    use syntax::ast::{HasAttrs, HasModuleItem};\n \n     let source = r##\"\n #[attr0]"}, {"sha": "e57c3d2fe44930b9717e339219acdcb033749375", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -30,8 +30,8 @@ pub use self::{\n         QuoteOffsets, Radix,\n     },\n     traits::{\n-        ArgListOwner, AttrsOwner, CommentIter, DocCommentsOwner, GenericParamsOwner, LoopBodyOwner,\n-        ModuleItemOwner, NameOwner, TypeBoundsOwner, VisibilityOwner,\n+        CommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n+        HasModuleItem, HasName, HasTypeBounds, HasVisibility,\n     },\n };\n \n@@ -118,7 +118,7 @@ mod support {\n \n #[test]\n fn assert_ast_is_object_safe() {\n-    fn _f(_: &dyn AstNode, _: &dyn NameOwner) {}\n+    fn _f(_: &dyn AstNode, _: &dyn HasName) {}\n }\n \n #[test]"}, {"sha": "4b354f7b32e9aee695dcf01641ac55090f1e2000", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,16 +7,16 @@ use rowan::SyntaxElement;\n \n use crate::{\n     algo::neighbor,\n-    ast::{self, edit::IndentLevel, make, GenericParamsOwner},\n+    ast::{self, edit::IndentLevel, make, HasGenericParams},\n     ted::{self, Position},\n     AstNode, AstToken, Direction,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode,\n };\n \n-use super::NameOwner;\n+use super::HasName;\n \n-pub trait GenericParamsOwnerEdit: ast::GenericParamsOwner {\n+pub trait GenericParamsOwnerEdit: ast::HasGenericParams {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList;\n     fn get_or_create_where_clause(&self) -> ast::WhereClause;\n }\n@@ -194,7 +194,7 @@ fn create_generic_param_list(position: Position) -> ast::GenericParamList {\n     gpl\n }\n \n-pub trait AttrsOwnerEdit: ast::AttrsOwner {\n+pub trait AttrsOwnerEdit: ast::HasAttrs {\n     fn remove_attrs_and_docs(&self) {\n         remove_attrs_and_docs(self.syntax());\n \n@@ -218,7 +218,7 @@ pub trait AttrsOwnerEdit: ast::AttrsOwner {\n     }\n }\n \n-impl<T: ast::AttrsOwner> AttrsOwnerEdit for T {}\n+impl<T: ast::HasAttrs> AttrsOwnerEdit for T {}\n \n impl ast::GenericParamList {\n     pub fn add_generic_param(&self, generic_param: ast::GenericParam) {"}, {"sha": "7363ad905aedee1c78d27118a616d3996c7e8104", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     SyntaxToken, T,\n };\n \n-impl ast::AttrsOwner for ast::Expr {}\n+impl ast::HasAttrs for ast::Expr {}\n \n impl ast::Expr {\n     pub fn is_block_like(&self) -> bool {"}, {"sha": "5d92a0f9e59143a9761d708144b2b79914617c2c", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 184, "deletions": 184, "changes": 368, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -104,7 +104,7 @@ impl TypeArg {\n pub struct AssocTypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::TypeBoundsOwner for AssocTypeArg {}\n+impl ast::HasTypeBounds for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n@@ -145,7 +145,7 @@ impl TypeBoundList {\n pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MacroCall {}\n+impl ast::HasAttrs for MacroCall {}\n impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n@@ -179,7 +179,7 @@ impl TokenTree {\n pub struct MacroItems {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ModuleItemOwner for MacroItems {}\n+impl ast::HasModuleItem for MacroItems {}\n impl MacroItems {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroStmts {\n@@ -193,18 +193,18 @@ impl MacroStmts {\n pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for SourceFile {}\n-impl ast::ModuleItemOwner for SourceFile {}\n+impl ast::HasAttrs for SourceFile {}\n+impl ast::HasModuleItem for SourceFile {}\n impl SourceFile {\n     pub fn shebang_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![shebang]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Const {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Const {}\n-impl ast::NameOwner for Const {}\n-impl ast::VisibilityOwner for Const {}\n+impl ast::HasAttrs for Const {}\n+impl ast::HasName for Const {}\n+impl ast::HasVisibility for Const {}\n impl Const {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -219,10 +219,10 @@ impl Const {\n pub struct Enum {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Enum {}\n-impl ast::NameOwner for Enum {}\n-impl ast::VisibilityOwner for Enum {}\n-impl ast::GenericParamsOwner for Enum {}\n+impl ast::HasAttrs for Enum {}\n+impl ast::HasName for Enum {}\n+impl ast::HasVisibility for Enum {}\n+impl ast::HasGenericParams for Enum {}\n impl Enum {\n     pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n     pub fn variant_list(&self) -> Option<VariantList> { support::child(&self.syntax) }\n@@ -231,7 +231,7 @@ impl Enum {\n pub struct ExternBlock {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ExternBlock {}\n+impl ast::HasAttrs for ExternBlock {}\n impl ExternBlock {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n     pub fn extern_item_list(&self) -> Option<ExternItemList> { support::child(&self.syntax) }\n@@ -240,8 +240,8 @@ impl ExternBlock {\n pub struct ExternCrate {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ExternCrate {}\n-impl ast::VisibilityOwner for ExternCrate {}\n+impl ast::HasAttrs for ExternCrate {}\n+impl ast::HasVisibility for ExternCrate {}\n impl ExternCrate {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n@@ -253,10 +253,10 @@ impl ExternCrate {\n pub struct Fn {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Fn {}\n-impl ast::NameOwner for Fn {}\n-impl ast::VisibilityOwner for Fn {}\n-impl ast::GenericParamsOwner for Fn {}\n+impl ast::HasAttrs for Fn {}\n+impl ast::HasName for Fn {}\n+impl ast::HasVisibility for Fn {}\n+impl ast::HasGenericParams for Fn {}\n impl Fn {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n@@ -273,9 +273,9 @@ impl Fn {\n pub struct Impl {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Impl {}\n-impl ast::VisibilityOwner for Impl {}\n-impl ast::GenericParamsOwner for Impl {}\n+impl ast::HasAttrs for Impl {}\n+impl ast::HasVisibility for Impl {}\n+impl ast::HasGenericParams for Impl {}\n impl Impl {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n@@ -289,9 +289,9 @@ impl Impl {\n pub struct MacroRules {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MacroRules {}\n-impl ast::NameOwner for MacroRules {}\n-impl ast::VisibilityOwner for MacroRules {}\n+impl ast::HasAttrs for MacroRules {}\n+impl ast::HasName for MacroRules {}\n+impl ast::HasVisibility for MacroRules {}\n impl MacroRules {\n     pub fn macro_rules_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![macro_rules])\n@@ -303,9 +303,9 @@ impl MacroRules {\n pub struct MacroDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MacroDef {}\n-impl ast::NameOwner for MacroDef {}\n-impl ast::VisibilityOwner for MacroDef {}\n+impl ast::HasAttrs for MacroDef {}\n+impl ast::HasName for MacroDef {}\n+impl ast::HasVisibility for MacroDef {}\n impl MacroDef {\n     pub fn macro_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![macro]) }\n     pub fn args(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n@@ -315,9 +315,9 @@ impl MacroDef {\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Module {}\n-impl ast::NameOwner for Module {}\n-impl ast::VisibilityOwner for Module {}\n+impl ast::HasAttrs for Module {}\n+impl ast::HasName for Module {}\n+impl ast::HasVisibility for Module {}\n impl Module {\n     pub fn mod_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n@@ -327,9 +327,9 @@ impl Module {\n pub struct Static {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Static {}\n-impl ast::NameOwner for Static {}\n-impl ast::VisibilityOwner for Static {}\n+impl ast::HasAttrs for Static {}\n+impl ast::HasName for Static {}\n+impl ast::HasVisibility for Static {}\n impl Static {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n@@ -343,10 +343,10 @@ impl Static {\n pub struct Struct {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Struct {}\n-impl ast::NameOwner for Struct {}\n-impl ast::VisibilityOwner for Struct {}\n-impl ast::GenericParamsOwner for Struct {}\n+impl ast::HasAttrs for Struct {}\n+impl ast::HasName for Struct {}\n+impl ast::HasVisibility for Struct {}\n+impl ast::HasGenericParams for Struct {}\n impl Struct {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -356,11 +356,11 @@ impl Struct {\n pub struct Trait {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Trait {}\n-impl ast::NameOwner for Trait {}\n-impl ast::VisibilityOwner for Trait {}\n-impl ast::GenericParamsOwner for Trait {}\n-impl ast::TypeBoundsOwner for Trait {}\n+impl ast::HasAttrs for Trait {}\n+impl ast::HasName for Trait {}\n+impl ast::HasVisibility for Trait {}\n+impl ast::HasGenericParams for Trait {}\n+impl ast::HasTypeBounds for Trait {}\n impl Trait {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n@@ -371,11 +371,11 @@ impl Trait {\n pub struct TypeAlias {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TypeAlias {}\n-impl ast::NameOwner for TypeAlias {}\n-impl ast::VisibilityOwner for TypeAlias {}\n-impl ast::GenericParamsOwner for TypeAlias {}\n-impl ast::TypeBoundsOwner for TypeAlias {}\n+impl ast::HasAttrs for TypeAlias {}\n+impl ast::HasName for TypeAlias {}\n+impl ast::HasVisibility for TypeAlias {}\n+impl ast::HasGenericParams for TypeAlias {}\n+impl ast::HasTypeBounds for TypeAlias {}\n impl TypeAlias {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n@@ -387,10 +387,10 @@ impl TypeAlias {\n pub struct Union {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Union {}\n-impl ast::NameOwner for Union {}\n-impl ast::VisibilityOwner for Union {}\n-impl ast::GenericParamsOwner for Union {}\n+impl ast::HasAttrs for Union {}\n+impl ast::HasName for Union {}\n+impl ast::HasVisibility for Union {}\n+impl ast::HasGenericParams for Union {}\n impl Union {\n     pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n     pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n@@ -399,8 +399,8 @@ impl Union {\n pub struct Use {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Use {}\n-impl ast::VisibilityOwner for Use {}\n+impl ast::HasAttrs for Use {}\n+impl ast::HasVisibility for Use {}\n impl Use {\n     pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n@@ -421,8 +421,8 @@ impl Visibility {\n pub struct ItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ItemList {}\n-impl ast::ModuleItemOwner for ItemList {}\n+impl ast::HasAttrs for ItemList {}\n+impl ast::HasModuleItem for ItemList {}\n impl ItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n@@ -431,7 +431,7 @@ impl ItemList {\n pub struct Rename {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::NameOwner for Rename {}\n+impl ast::HasName for Rename {}\n impl Rename {\n     pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n@@ -475,7 +475,7 @@ impl WhereClause {\n pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for BlockExpr {}\n+impl ast::HasAttrs for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n@@ -488,8 +488,8 @@ impl BlockExpr {\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for SelfParam {}\n-impl ast::NameOwner for SelfParam {}\n+impl ast::HasAttrs for SelfParam {}\n+impl ast::HasName for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n     pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n@@ -501,7 +501,7 @@ impl SelfParam {\n pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Param {}\n+impl ast::HasAttrs for Param {}\n impl Param {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -530,9 +530,9 @@ impl TupleFieldList {\n pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordField {}\n-impl ast::NameOwner for RecordField {}\n-impl ast::VisibilityOwner for RecordField {}\n+impl ast::HasAttrs for RecordField {}\n+impl ast::HasName for RecordField {}\n+impl ast::HasVisibility for RecordField {}\n impl RecordField {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n@@ -541,8 +541,8 @@ impl RecordField {\n pub struct TupleField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TupleField {}\n-impl ast::VisibilityOwner for TupleField {}\n+impl ast::HasAttrs for TupleField {}\n+impl ast::HasVisibility for TupleField {}\n impl TupleField {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -559,9 +559,9 @@ impl VariantList {\n pub struct Variant {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Variant {}\n-impl ast::NameOwner for Variant {}\n-impl ast::VisibilityOwner for Variant {}\n+impl ast::HasAttrs for Variant {}\n+impl ast::HasName for Variant {}\n+impl ast::HasVisibility for Variant {}\n impl Variant {\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n@@ -571,7 +571,7 @@ impl Variant {\n pub struct AssocItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for AssocItemList {}\n+impl ast::HasAttrs for AssocItemList {}\n impl AssocItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn assoc_items(&self) -> AstChildren<AssocItem> { support::children(&self.syntax) }\n@@ -581,7 +581,7 @@ impl AssocItemList {\n pub struct ExternItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ExternItemList {}\n+impl ast::HasAttrs for ExternItemList {}\n impl ExternItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn extern_items(&self) -> AstChildren<ExternItem> { support::children(&self.syntax) }\n@@ -591,8 +591,8 @@ impl ExternItemList {\n pub struct ConstParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ConstParam {}\n-impl ast::NameOwner for ConstParam {}\n+impl ast::HasAttrs for ConstParam {}\n+impl ast::HasName for ConstParam {}\n impl ConstParam {\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -604,18 +604,18 @@ impl ConstParam {\n pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for LifetimeParam {}\n-impl ast::TypeBoundsOwner for LifetimeParam {}\n+impl ast::HasAttrs for LifetimeParam {}\n+impl ast::HasTypeBounds for LifetimeParam {}\n impl LifetimeParam {\n     pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TypeParam {}\n-impl ast::NameOwner for TypeParam {}\n-impl ast::TypeBoundsOwner for TypeParam {}\n+impl ast::HasAttrs for TypeParam {}\n+impl ast::HasName for TypeParam {}\n+impl ast::HasTypeBounds for TypeParam {}\n impl TypeParam {\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn default_type(&self) -> Option<Type> { support::child(&self.syntax) }\n@@ -624,7 +624,7 @@ impl TypeParam {\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::TypeBoundsOwner for WherePred {}\n+impl ast::HasTypeBounds for WherePred {}\n impl WherePred {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n@@ -653,7 +653,7 @@ impl ExprStmt {\n pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for LetStmt {}\n+impl ast::HasAttrs for LetStmt {}\n impl LetStmt {\n     pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n@@ -667,7 +667,7 @@ impl LetStmt {\n pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ArrayExpr {}\n+impl ast::HasAttrs for ArrayExpr {}\n impl ArrayExpr {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n@@ -679,7 +679,7 @@ impl ArrayExpr {\n pub struct AwaitExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for AwaitExpr {}\n+impl ast::HasAttrs for AwaitExpr {}\n impl AwaitExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n@@ -689,13 +689,13 @@ impl AwaitExpr {\n pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for BinExpr {}\n+impl ast::HasAttrs for BinExpr {}\n impl BinExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for BoxExpr {}\n+impl ast::HasAttrs for BoxExpr {}\n impl BoxExpr {\n     pub fn box_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![box]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -704,7 +704,7 @@ impl BoxExpr {\n pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for BreakExpr {}\n+impl ast::HasAttrs for BreakExpr {}\n impl BreakExpr {\n     pub fn break_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![break]) }\n     pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n@@ -714,16 +714,16 @@ impl BreakExpr {\n pub struct CallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for CallExpr {}\n-impl ast::ArgListOwner for CallExpr {}\n+impl ast::HasAttrs for CallExpr {}\n+impl ast::HasArgList for CallExpr {}\n impl CallExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CastExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for CastExpr {}\n+impl ast::HasAttrs for CastExpr {}\n impl CastExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n@@ -733,7 +733,7 @@ impl CastExpr {\n pub struct ClosureExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ClosureExpr {}\n+impl ast::HasAttrs for ClosureExpr {}\n impl ClosureExpr {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n@@ -746,7 +746,7 @@ impl ClosureExpr {\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ContinueExpr {}\n+impl ast::HasAttrs for ContinueExpr {}\n impl ContinueExpr {\n     pub fn continue_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![continue])\n@@ -757,7 +757,7 @@ impl ContinueExpr {\n pub struct FieldExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for FieldExpr {}\n+impl ast::HasAttrs for FieldExpr {}\n impl FieldExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n@@ -767,8 +767,8 @@ impl FieldExpr {\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ForExpr {}\n-impl ast::LoopBodyOwner for ForExpr {}\n+impl ast::HasAttrs for ForExpr {}\n+impl ast::HasLoopBody for ForExpr {}\n impl ForExpr {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n@@ -779,7 +779,7 @@ impl ForExpr {\n pub struct IfExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for IfExpr {}\n+impl ast::HasAttrs for IfExpr {}\n impl IfExpr {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n@@ -789,7 +789,7 @@ impl IfExpr {\n pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for IndexExpr {}\n+impl ast::HasAttrs for IndexExpr {}\n impl IndexExpr {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n@@ -798,22 +798,22 @@ impl IndexExpr {\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for Literal {}\n+impl ast::HasAttrs for Literal {}\n impl Literal {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for LoopExpr {}\n-impl ast::LoopBodyOwner for LoopExpr {}\n+impl ast::HasAttrs for LoopExpr {}\n+impl ast::HasLoopBody for LoopExpr {}\n impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MatchExpr {}\n+impl ast::HasAttrs for MatchExpr {}\n impl MatchExpr {\n     pub fn match_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![match]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -823,8 +823,8 @@ impl MatchExpr {\n pub struct MethodCallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MethodCallExpr {}\n-impl ast::ArgListOwner for MethodCallExpr {}\n+impl ast::HasAttrs for MethodCallExpr {}\n+impl ast::HasArgList for MethodCallExpr {}\n impl MethodCallExpr {\n     pub fn receiver(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n@@ -835,7 +835,7 @@ impl MethodCallExpr {\n pub struct ParenExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ParenExpr {}\n+impl ast::HasAttrs for ParenExpr {}\n impl ParenExpr {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -845,23 +845,23 @@ impl ParenExpr {\n pub struct PathExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for PathExpr {}\n+impl ast::HasAttrs for PathExpr {}\n impl PathExpr {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for PrefixExpr {}\n+impl ast::HasAttrs for PrefixExpr {}\n impl PrefixExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RangeExpr {}\n+impl ast::HasAttrs for RangeExpr {}\n impl RangeExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordExpr {\n@@ -877,7 +877,7 @@ impl RecordExpr {\n pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RefExpr {}\n+impl ast::HasAttrs for RefExpr {}\n impl RefExpr {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n     pub fn raw_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![raw]) }\n@@ -889,7 +889,7 @@ impl RefExpr {\n pub struct ReturnExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ReturnExpr {}\n+impl ast::HasAttrs for ReturnExpr {}\n impl ReturnExpr {\n     pub fn return_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![return]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -898,7 +898,7 @@ impl ReturnExpr {\n pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TryExpr {}\n+impl ast::HasAttrs for TryExpr {}\n impl TryExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n@@ -907,7 +907,7 @@ impl TryExpr {\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TupleExpr {}\n+impl ast::HasAttrs for TupleExpr {}\n impl TupleExpr {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn fields(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n@@ -917,8 +917,8 @@ impl TupleExpr {\n pub struct WhileExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for WhileExpr {}\n-impl ast::LoopBodyOwner for WhileExpr {}\n+impl ast::HasAttrs for WhileExpr {}\n+impl ast::HasLoopBody for WhileExpr {}\n impl WhileExpr {\n     pub fn while_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![while]) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n@@ -927,7 +927,7 @@ impl WhileExpr {\n pub struct YieldExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for YieldExpr {}\n+impl ast::HasAttrs for YieldExpr {}\n impl YieldExpr {\n     pub fn yield_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![yield]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -936,7 +936,7 @@ impl YieldExpr {\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for StmtList {}\n+impl ast::HasAttrs for StmtList {}\n impl StmtList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n@@ -955,7 +955,7 @@ impl Label {\n pub struct RecordExprFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordExprFieldList {}\n+impl ast::HasAttrs for RecordExprFieldList {}\n impl RecordExprFieldList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordExprField> { support::children(&self.syntax) }\n@@ -967,7 +967,7 @@ impl RecordExprFieldList {\n pub struct RecordExprField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordExprField {}\n+impl ast::HasAttrs for RecordExprField {}\n impl RecordExprField {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -996,7 +996,7 @@ impl Condition {\n pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MatchArmList {}\n+impl ast::HasAttrs for MatchArmList {}\n impl MatchArmList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn arms(&self) -> AstChildren<MatchArm> { support::children(&self.syntax) }\n@@ -1006,7 +1006,7 @@ impl MatchArmList {\n pub struct MatchArm {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for MatchArm {}\n+impl ast::HasAttrs for MatchArm {}\n impl MatchArm {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn guard(&self) -> Option<MatchGuard> { support::child(&self.syntax) }\n@@ -1155,8 +1155,8 @@ impl TypeBound {\n pub struct IdentPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for IdentPat {}\n-impl ast::NameOwner for IdentPat {}\n+impl ast::HasAttrs for IdentPat {}\n+impl ast::HasName for IdentPat {}\n impl IdentPat {\n     pub fn ref_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ref]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n@@ -1296,7 +1296,7 @@ impl RecordPatFieldList {\n pub struct RecordPatField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordPatField {}\n+impl ast::HasAttrs for RecordPatField {}\n impl RecordPatField {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -1379,7 +1379,7 @@ pub enum Item {\n     Union(Union),\n     Use(Use),\n }\n-impl ast::AttrsOwner for Item {}\n+impl ast::HasAttrs for Item {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     ExprStmt(ExprStmt),\n@@ -1416,73 +1416,73 @@ pub enum Adt {\n     Struct(Struct),\n     Union(Union),\n }\n-impl ast::AttrsOwner for Adt {}\n-impl ast::GenericParamsOwner for Adt {}\n-impl ast::NameOwner for Adt {}\n-impl ast::VisibilityOwner for Adt {}\n+impl ast::HasAttrs for Adt {}\n+impl ast::HasGenericParams for Adt {}\n+impl ast::HasName for Adt {}\n+impl ast::HasVisibility for Adt {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Const(Const),\n     Fn(Fn),\n     MacroCall(MacroCall),\n     TypeAlias(TypeAlias),\n }\n-impl ast::AttrsOwner for AssocItem {}\n+impl ast::HasAttrs for AssocItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n     Fn(Fn),\n     MacroCall(MacroCall),\n     Static(Static),\n     TypeAlias(TypeAlias),\n }\n-impl ast::AttrsOwner for ExternItem {}\n+impl ast::HasAttrs for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericParam {\n     ConstParam(ConstParam),\n     LifetimeParam(LifetimeParam),\n     TypeParam(TypeParam),\n }\n-impl ast::AttrsOwner for GenericParam {}\n+impl ast::HasAttrs for GenericParam {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynArgListOwner {\n+pub struct AnyHasArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ArgListOwner for DynArgListOwner {}\n+impl ast::HasArgList for AnyHasArgList {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynAttrsOwner {\n+pub struct AnyHasAttrs {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for DynAttrsOwner {}\n+impl ast::HasAttrs for AnyHasAttrs {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynGenericParamsOwner {\n+pub struct AnyHasGenericParams {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::GenericParamsOwner for DynGenericParamsOwner {}\n+impl ast::HasGenericParams for AnyHasGenericParams {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynLoopBodyOwner {\n+pub struct AnyHasLoopBody {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::LoopBodyOwner for DynLoopBodyOwner {}\n+impl ast::HasLoopBody for AnyHasLoopBody {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynModuleItemOwner {\n+pub struct AnyHasModuleItem {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ModuleItemOwner for DynModuleItemOwner {}\n+impl ast::HasModuleItem for AnyHasModuleItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynNameOwner {\n+pub struct AnyHasName {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::NameOwner for DynNameOwner {}\n+impl ast::HasName for AnyHasName {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynTypeBoundsOwner {\n+pub struct AnyHasTypeBounds {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::TypeBoundsOwner for DynTypeBoundsOwner {}\n+impl ast::HasTypeBounds for AnyHasTypeBounds {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynVisibilityOwner {\n+pub struct AnyHasVisibility {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::VisibilityOwner for DynVisibilityOwner {}\n+impl ast::HasVisibility for AnyHasVisibility {}\n impl AstNode for Name {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3597,31 +3597,31 @@ impl AstNode for GenericParam {\n         }\n     }\n }\n-impl DynArgListOwner {\n+impl AnyHasArgList {\n     #[inline]\n-    pub fn new<T: ast::ArgListOwner>(node: T) -> DynArgListOwner {\n-        DynArgListOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasArgList>(node: T) -> AnyHasArgList {\n+        AnyHasArgList { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynArgListOwner {\n+impl AstNode for AnyHasArgList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CALL_EXPR | METHOD_CALL_EXPR => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynArgListOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasArgList { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynAttrsOwner {\n+impl AnyHasAttrs {\n     #[inline]\n-    pub fn new<T: ast::AttrsOwner>(node: T) -> DynAttrsOwner {\n-        DynAttrsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasAttrs>(node: T) -> AnyHasAttrs {\n+        AnyHasAttrs { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynAttrsOwner {\n+impl AstNode for AnyHasAttrs {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             MACRO_CALL\n@@ -3692,71 +3692,71 @@ impl AstNode for DynAttrsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynAttrsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasAttrs { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynGenericParamsOwner {\n+impl AnyHasGenericParams {\n     #[inline]\n-    pub fn new<T: ast::GenericParamsOwner>(node: T) -> DynGenericParamsOwner {\n-        DynGenericParamsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasGenericParams>(node: T) -> AnyHasGenericParams {\n+        AnyHasGenericParams { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynGenericParamsOwner {\n+impl AstNode for AnyHasGenericParams {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynGenericParamsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasGenericParams { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynLoopBodyOwner {\n+impl AnyHasLoopBody {\n     #[inline]\n-    pub fn new<T: ast::LoopBodyOwner>(node: T) -> DynLoopBodyOwner {\n-        DynLoopBodyOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasLoopBody>(node: T) -> AnyHasLoopBody {\n+        AnyHasLoopBody { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynLoopBodyOwner {\n+impl AstNode for AnyHasLoopBody {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             FOR_EXPR | LOOP_EXPR | WHILE_EXPR => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynLoopBodyOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasLoopBody { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynModuleItemOwner {\n+impl AnyHasModuleItem {\n     #[inline]\n-    pub fn new<T: ast::ModuleItemOwner>(node: T) -> DynModuleItemOwner {\n-        DynModuleItemOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasModuleItem>(node: T) -> AnyHasModuleItem {\n+        AnyHasModuleItem { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynModuleItemOwner {\n+impl AstNode for AnyHasModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynModuleItemOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasModuleItem { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynNameOwner {\n+impl AnyHasName {\n     #[inline]\n-    pub fn new<T: ast::NameOwner>(node: T) -> DynNameOwner {\n-        DynNameOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasName>(node: T) -> AnyHasName {\n+        AnyHasName { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynNameOwner {\n+impl AstNode for AnyHasName {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | FN | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT\n@@ -3766,35 +3766,35 @@ impl AstNode for DynNameOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynNameOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasName { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynTypeBoundsOwner {\n+impl AnyHasTypeBounds {\n     #[inline]\n-    pub fn new<T: ast::TypeBoundsOwner>(node: T) -> DynTypeBoundsOwner {\n-        DynTypeBoundsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasTypeBounds>(node: T) -> AnyHasTypeBounds {\n+        AnyHasTypeBounds { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynTypeBoundsOwner {\n+impl AstNode for AnyHasTypeBounds {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynTypeBoundsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasTypeBounds { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynVisibilityOwner {\n+impl AnyHasVisibility {\n     #[inline]\n-    pub fn new<T: ast::VisibilityOwner>(node: T) -> DynVisibilityOwner {\n-        DynVisibilityOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::HasVisibility>(node: T) -> AnyHasVisibility {\n+        AnyHasVisibility { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynVisibilityOwner {\n+impl AstNode for AnyHasVisibility {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | EXTERN_CRATE | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n@@ -3805,7 +3805,7 @@ impl AstNode for DynVisibilityOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynVisibilityOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyHasVisibility { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "a07f02e4451c44e884e8d9d592dca769c2daa8f8", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -11,8 +11,8 @@ use rowan::{GreenNodeData, GreenTokenData};\n \n use crate::{\n     ast::{\n-        self, support, AstNode, AstToken, AttrsOwner, GenericParamsOwner, ModuleItemOwner,\n-        NameOwner, SyntaxNode,\n+        self, support, AstNode, AstToken, HasAttrs, HasGenericParams, HasModuleItem, HasName,\n+        SyntaxNode,\n     },\n     NodeOrToken, SmolStr, SyntaxElement, SyntaxToken, TokenText, T,\n };\n@@ -50,7 +50,7 @@ fn text_of_first_token(node: &SyntaxNode) -> TokenText<'_> {\n     }\n }\n \n-impl ast::ModuleItemOwner for ast::StmtList {}\n+impl ast::HasModuleItem for ast::StmtList {}\n \n impl ast::BlockExpr {\n     // FIXME: remove all these methods, they belong to ast::StmtList\n@@ -107,7 +107,7 @@ impl AstNode for Macro {\n     }\n }\n \n-impl NameOwner for Macro {\n+impl HasName for Macro {\n     fn name(&self) -> Option<ast::Name> {\n         match self {\n             Macro::MacroRules(mac) => mac.name(),\n@@ -116,7 +116,7 @@ impl NameOwner for Macro {\n     }\n }\n \n-impl AttrsOwner for Macro {}\n+impl HasAttrs for Macro {}\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum AttrKind {\n@@ -531,7 +531,7 @@ impl ast::Variant {\n \n impl ast::Item {\n     pub fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n-        ast::DynGenericParamsOwner::cast(self.syntax().clone())?.generic_param_list()\n+        ast::AnyHasGenericParams::cast(self.syntax().clone())?.generic_param_list()\n     }\n }\n \n@@ -765,21 +765,21 @@ impl ast::GenericParamList {\n     }\n }\n \n-impl ast::DocCommentsOwner for ast::SourceFile {}\n-impl ast::DocCommentsOwner for ast::Fn {}\n-impl ast::DocCommentsOwner for ast::Struct {}\n-impl ast::DocCommentsOwner for ast::Union {}\n-impl ast::DocCommentsOwner for ast::RecordField {}\n-impl ast::DocCommentsOwner for ast::TupleField {}\n-impl ast::DocCommentsOwner for ast::Enum {}\n-impl ast::DocCommentsOwner for ast::Variant {}\n-impl ast::DocCommentsOwner for ast::Trait {}\n-impl ast::DocCommentsOwner for ast::Module {}\n-impl ast::DocCommentsOwner for ast::Static {}\n-impl ast::DocCommentsOwner for ast::Const {}\n-impl ast::DocCommentsOwner for ast::TypeAlias {}\n-impl ast::DocCommentsOwner for ast::Impl {}\n-impl ast::DocCommentsOwner for ast::MacroRules {}\n-impl ast::DocCommentsOwner for ast::MacroDef {}\n-impl ast::DocCommentsOwner for ast::Macro {}\n-impl ast::DocCommentsOwner for ast::Use {}\n+impl ast::HasDocComments for ast::SourceFile {}\n+impl ast::HasDocComments for ast::Fn {}\n+impl ast::HasDocComments for ast::Struct {}\n+impl ast::HasDocComments for ast::Union {}\n+impl ast::HasDocComments for ast::RecordField {}\n+impl ast::HasDocComments for ast::TupleField {}\n+impl ast::HasDocComments for ast::Enum {}\n+impl ast::HasDocComments for ast::Variant {}\n+impl ast::HasDocComments for ast::Trait {}\n+impl ast::HasDocComments for ast::Module {}\n+impl ast::HasDocComments for ast::Static {}\n+impl ast::HasDocComments for ast::Const {}\n+impl ast::HasDocComments for ast::TypeAlias {}\n+impl ast::HasDocComments for ast::Impl {}\n+impl ast::HasDocComments for ast::MacroRules {}\n+impl ast::HasDocComments for ast::MacroDef {}\n+impl ast::HasDocComments for ast::Macro {}\n+impl ast::HasDocComments for ast::Use {}"}, {"sha": "eae3a7e2fe6094ba3960f8eb4204ea169e49ae6e", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -7,19 +7,19 @@ use crate::{\n     SyntaxToken, T,\n };\n \n-pub trait NameOwner: AstNode {\n+pub trait HasName: AstNode {\n     fn name(&self) -> Option<ast::Name> {\n         support::child(self.syntax())\n     }\n }\n \n-pub trait VisibilityOwner: AstNode {\n+pub trait HasVisibility: AstNode {\n     fn visibility(&self) -> Option<ast::Visibility> {\n         support::child(self.syntax())\n     }\n }\n \n-pub trait LoopBodyOwner: AstNode {\n+pub trait HasLoopBody: AstNode {\n     fn loop_body(&self) -> Option<ast::BlockExpr> {\n         support::child(self.syntax())\n     }\n@@ -29,19 +29,19 @@ pub trait LoopBodyOwner: AstNode {\n     }\n }\n \n-pub trait ArgListOwner: AstNode {\n+pub trait HasArgList: AstNode {\n     fn arg_list(&self) -> Option<ast::ArgList> {\n         support::child(self.syntax())\n     }\n }\n \n-pub trait ModuleItemOwner: AstNode {\n+pub trait HasModuleItem: AstNode {\n     fn items(&self) -> AstChildren<ast::Item> {\n         support::children(self.syntax())\n     }\n }\n \n-pub trait GenericParamsOwner: AstNode {\n+pub trait HasGenericParams: AstNode {\n     fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n         support::child(self.syntax())\n     }\n@@ -51,7 +51,7 @@ pub trait GenericParamsOwner: AstNode {\n     }\n }\n \n-pub trait TypeBoundsOwner: AstNode {\n+pub trait HasTypeBounds: AstNode {\n     fn type_bound_list(&self) -> Option<ast::TypeBoundList> {\n         support::child(self.syntax())\n     }\n@@ -61,7 +61,7 @@ pub trait TypeBoundsOwner: AstNode {\n     }\n }\n \n-pub trait AttrsOwner: AstNode {\n+pub trait HasAttrs: AstNode {\n     fn attrs(&self) -> AstChildren<ast::Attr> {\n         support::children(self.syntax())\n     }\n@@ -70,7 +70,7 @@ pub trait AttrsOwner: AstNode {\n     }\n }\n \n-pub trait DocCommentsOwner: AttrsOwner {\n+pub trait HasDocComments: HasAttrs {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }"}, {"sha": "1498385fef7b664e8b29230d8777144a4ffac58e", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -2,11 +2,11 @@\n //! into types that may be used to render in a UI.\n \n use crate::{\n-    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n+    ast::{self, AstNode, HasAttrs, HasGenericParams, HasName},\n     SyntaxKind::{ATTR, COMMENT},\n };\n \n-use ast::VisibilityOwner;\n+use ast::HasVisibility;\n use stdx::format_to;\n \n pub fn function_declaration(node: &ast::Fn) -> String {"}, {"sha": "132d300674d8bdbf488fb5bd2cf7f445716730ee", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -255,7 +255,7 @@ macro_rules! match_ast {\n /// API.\n #[test]\n fn api_walkthrough() {\n-    use ast::{ModuleItemOwner, NameOwner};\n+    use ast::{HasModuleItem, HasName};\n \n     let source_code = \"\n         fn foo() {"}, {"sha": "f8f7a3ad325fab8d5e6bc91d95f2c673b2c4d02a", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -8,7 +8,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use ast::NameOwner;\n+use ast::HasName;\n use expect_test::expect_file;\n use rayon::prelude::*;\n use test_utils::{bench, bench_fixture, project_root};"}, {"sha": "564cf6663cb323bd035ca20ce4e454e14615ee12", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -209,15 +209,15 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         })\n         .unzip();\n \n-    let (dyn_node_defs, dyn_node_boilerplate_impls): (Vec<_>, Vec<_>) = grammar\n+    let (any_node_defs, any_node_boilerplate_impls): (Vec<_>, Vec<_>) = grammar\n         .nodes\n         .iter()\n         .flat_map(|node| node.traits.iter().map(move |t| (t, node)))\n         .into_group_map()\n         .into_iter()\n         .sorted_by_key(|(k, _)| k.clone())\n         .map(|(trait_name, nodes)| {\n-            let name = format_ident!(\"Dyn{}\", trait_name);\n+            let name = format_ident!(\"Any{}\", trait_name);\n             let trait_name = format_ident!(\"{}\", trait_name);\n             let kinds: Vec<_> = nodes\n                 .iter()\n@@ -297,10 +297,10 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n \n         #(#node_defs)*\n         #(#enum_defs)*\n-        #(#dyn_node_defs)*\n+        #(#any_node_defs)*\n         #(#node_boilerplate_impls)*\n         #(#enum_boilerplate_impls)*\n-        #(#dyn_node_boilerplate_impls)*\n+        #(#any_node_boilerplate_impls)*\n         #(#display_impls)*\n     };\n \n@@ -740,14 +740,14 @@ fn extract_enums(ast: &mut AstSrc) {\n \n fn extract_struct_traits(ast: &mut AstSrc) {\n     let traits: &[(&str, &[&str])] = &[\n-        (\"AttrsOwner\", &[\"attrs\"]),\n-        (\"NameOwner\", &[\"name\"]),\n-        (\"VisibilityOwner\", &[\"visibility\"]),\n-        (\"GenericParamsOwner\", &[\"generic_param_list\", \"where_clause\"]),\n-        (\"TypeBoundsOwner\", &[\"type_bound_list\", \"colon_token\"]),\n-        (\"ModuleItemOwner\", &[\"items\"]),\n-        (\"LoopBodyOwner\", &[\"label\", \"loop_body\"]),\n-        (\"ArgListOwner\", &[\"arg_list\"]),\n+        (\"HasAttrs\", &[\"attrs\"]),\n+        (\"HasName\", &[\"name\"]),\n+        (\"HasVisibility\", &[\"visibility\"]),\n+        (\"HasGenericParams\", &[\"generic_param_list\", \"where_clause\"]),\n+        (\"HasTypeBounds\", &[\"type_bound_list\", \"colon_token\"]),\n+        (\"HasModuleItem\", &[\"items\"]),\n+        (\"HasLoopBody\", &[\"label\", \"loop_body\"]),\n+        (\"HasArgList\", &[\"arg_list\"]),\n     ];\n \n     for node in &mut ast.nodes {"}, {"sha": "b2d42f6651751ae2fb664692397cd55dee67ee90", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -13,7 +13,7 @@ use rustc_lexer::unescape::{\n \n use crate::{\n     algo,\n-    ast::{self, VisibilityOwner},\n+    ast::{self, HasVisibility},\n     match_ast, AstNode, SyntaxError,\n     SyntaxKind::{CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,"}, {"sha": "9076b8250350e7a87fd5b2ee4810f695adf39ef1", "filename": "crates/syntax/src/validation/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4251319fd3acf7b7781275ec77b53cc0efe6140/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=c4251319fd3acf7b7781275ec77b53cc0efe6140", "patch": "@@ -1,7 +1,7 @@\n //! Logic for validating block expressions i.e. `ast::BlockExpr`.\n \n use crate::{\n-    ast::{self, AstNode, AttrsOwner},\n+    ast::{self, AstNode, HasAttrs},\n     SyntaxError,\n     SyntaxKind::*,\n };"}]}