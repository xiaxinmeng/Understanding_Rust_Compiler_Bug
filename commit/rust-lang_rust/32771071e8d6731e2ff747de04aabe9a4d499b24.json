{"sha": "32771071e8d6731e2ff747de04aabe9a4d499b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzcxMDcxZThkNjczMWUyZmY3NDdkZTA0YWFiZTlhNGQ0OTliMjQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-31T14:50:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-03T09:20:35Z"}, "message": "syntax/rustc: move `mark_span_with_reason` back.", "tree": {"sha": "1c3aa6366f0882d2b4a4d5698aa4e3d32bda58dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3aa6366f0882d2b4a4d5698aa4e3d32bda58dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32771071e8d6731e2ff747de04aabe9a4d499b24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlz05mMACgkQAXYLT59T\n8VQTqBAAimtwlUTwYBzHImA9Cxq4FWhoFTDqjtnXSwxxClTmzC4l7L6CYVnVviqI\ndrUj/84veNhJ42g5yRv86g2DRHItZ9OHvQh/Vmc6i9Jttb3fP/Qffnl9z3lIP0Pn\nfdcwvfQTBnZrHEdktmRprDgc/pFJ1tx+3UF6VFoJVvhn55c8Abl4nHsiEPncr+XU\n+j0sf0BY/HNIj1NcZ94H1rf8OAocv5JeFtqr570VFQZV9Yc/CH47XmihlupqxDir\nCvn08mZuvLHuG02QR+CeNA1bB4bpQ309SnQelM2Yp1ZVWGdvxdauUQmtYJBtc0gh\nc9L1h5MtA6011x2VF0AdyjYgZdzzq+CmQlRg2A0xaIH/14a9jWtcD+w7QzStYZ1r\naZs4VNbFQO7zPvdhK5+GaLOgKfOxjCTiPDNlrBht9JOh0vIIAgJQpJHY94eHPLsb\nd1ptse7pvIo/ROna2J8Ybky2hjNHxG++dQJlZXupgueiqFhUMBcQqk5PNtoZua3e\nsxmT8mvsTgJghZ634h1L8o7SuGRekltx5w7NQN02SkegPEOqqR1wHotLgtnr2R4I\nFnMm4YiofbEjZ6wecFGAcaIEACQrbGZmwIihsZrrssCAOrYF7yjxBz4+NPNfg7e9\nJJq6FK+ELzMm2gZLr/EFbLiniFPmaj5x17JGj8SdLEX0tHDxH/s=\n=bj59\n-----END PGP SIGNATURE-----", "payload": "tree 1c3aa6366f0882d2b4a4d5698aa4e3d32bda58dc\nparent d0c78dd7aa692a9338b2085e8d227cde73d2a5f9\nauthor David Wood <david@davidtw.co> 1559314206 +0100\ncommitter David Wood <david@davidtw.co> 1559553635 +0100\n\nsyntax/rustc: move `mark_span_with_reason` back.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32771071e8d6731e2ff747de04aabe9a4d499b24", "html_url": "https://github.com/rust-lang/rust/commit/32771071e8d6731e2ff747de04aabe9a4d499b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32771071e8d6731e2ff747de04aabe9a4d499b24/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c78dd7aa692a9338b2085e8d227cde73d2a5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c78dd7aa692a9338b2085e8d227cde73d2a5f9", "html_url": "https://github.com/rust-lang/rust/commit/d0c78dd7aa692a9338b2085e8d227cde73d2a5f9"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "df0a23c1b867109044ee3800e08809a14f7a2244", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32771071e8d6731e2ff747de04aabe9a4d499b24/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32771071e8d6731e2ff747de04aabe9a4d499b24/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=32771071e8d6731e2ff747de04aabe9a4d499b24", "patch": "@@ -50,6 +50,7 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_data_structures::sync::Lrc;\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::mem;\n@@ -58,17 +59,17 @@ use syntax::attr;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::ext::hygiene::Mark;\n+use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{respan, CompilerDesugaringKind, Spanned};\n+use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n use syntax::source_map::CompilerDesugaringKind::IfTemporary;\n use syntax::std_inject;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::parse::token::Token;\n use syntax::visit::{self, Visitor};\n-use syntax_pos::Span;\n+use syntax_pos::{edition, Span};\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n@@ -829,6 +830,27 @@ impl<'a> LoweringContext<'a> {\n         self.sess.diagnostic()\n     }\n \n+    /// Reuses the span but adds information like the kind of the desugaring and features that are\n+    /// allowed inside this span.\n+    fn mark_span_with_reason(\n+        &self,\n+        reason: CompilerDesugaringKind,\n+        span: Span,\n+        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n+    ) -> Span {\n+        let mark = Mark::fresh(Mark::root());\n+        mark.set_expn_info(source_map::ExpnInfo {\n+            call_site: span,\n+            def_site: Some(span),\n+            format: source_map::CompilerDesugaring(reason),\n+            allow_internal_unstable,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            edition: edition::Edition::from_session(),\n+        });\n+        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n+    }\n+\n     fn with_anonymous_lifetime_mode<R>(\n         &mut self,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n@@ -1128,7 +1150,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n         };\n \n-        let unstable_span = self.sess.source_map().mark_span_with_reason(\n+        let unstable_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             Some(vec![sym::gen_future].into()),\n@@ -1535,7 +1557,7 @@ impl<'a> LoweringContext<'a> {\n         // desugaring that explicitly states that we don't want to track that.\n         // Not tracking it makes lints in rustc and clippy very fragile as\n         // frequently opened issues show.\n-        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n+        let exist_ty_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n             None,\n@@ -2395,7 +2417,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::FunctionRetTy {\n         let span = output.span();\n \n-        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n+        let exist_ty_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             None,\n@@ -4038,10 +4060,7 @@ impl<'a> LoweringContext<'a> {\n                 let else_arm = self.arm(hir_vec![else_pat], P(else_expr));\n \n                 // Lower condition:\n-                let span_block = self\n-                    .sess\n-                    .source_map()\n-                    .mark_span_with_reason(IfTemporary, cond.span, None);\n+                let span_block = self.mark_span_with_reason(IfTemporary, cond.span, None);\n                 let cond = self.lower_expr(cond);\n                 // Wrap in a construct equivalent to `{ let _t = $cond; _t }` to preserve drop\n                 // semantics since `if cond { ... }` don't let temporaries live outside of `cond`.\n@@ -4071,7 +4090,7 @@ impl<'a> LoweringContext<'a> {\n             }),\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n-                    let unstable_span = this.sess.source_map().mark_span_with_reason(\n+                    let unstable_span = this.mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n                         Some(vec![sym::try_trait].into()),\n@@ -4503,7 +4522,7 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let mut head = self.lower_expr(head);\n                 let head_sp = head.span;\n-                let desugared_span = self.sess.source_map().mark_span_with_reason(\n+                let desugared_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n                     None,\n@@ -4657,13 +4676,13 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.sess.source_map().mark_span_with_reason(\n+                let unstable_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n                     Some(vec![sym::try_trait].into()),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n-                let try_span = self.sess.source_map().mark_span_with_reason(\n+                let try_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     try_span,\n                     Some(vec![sym::try_trait].into()),\n@@ -5460,12 +5479,12 @@ impl<'a> LoweringContext<'a> {\n             err.emit();\n             return hir::ExprKind::Err;\n         }\n-        let span = self.sess.source_map().mark_span_with_reason(\n+        let span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             None,\n         );\n-        let gen_future_span = self.sess.source_map().mark_span_with_reason(\n+        let gen_future_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             Some(vec![sym::gen_future].into()),"}, {"sha": "a21d2df416206fc3c44534800ea3d2ff79d7a070", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32771071e8d6731e2ff747de04aabe9a4d499b24/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32771071e8d6731e2ff747de04aabe9a4d499b24/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=32771071e8d6731e2ff747de04aabe9a4d499b24", "patch": "@@ -935,27 +935,6 @@ impl SourceMap {\n \n         None\n     }\n-\n-    /// Reuses the span but adds information like the kind of the desugaring and features that are\n-    /// allowed inside this span.\n-    pub fn mark_span_with_reason(\n-        &self,\n-        reason: hygiene::CompilerDesugaringKind,\n-        span: Span,\n-        allow_internal_unstable: Option<Lrc<[symbol::Symbol]>>,\n-    ) -> Span {\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(ExpnInfo {\n-            call_site: span,\n-            def_site: Some(span),\n-            format: CompilerDesugaring(reason),\n-            allow_internal_unstable,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: edition::Edition::from_session(),\n-        });\n-        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n-    }\n }\n \n impl SourceMapper for SourceMap {"}]}