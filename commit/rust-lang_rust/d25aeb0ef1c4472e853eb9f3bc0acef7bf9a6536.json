{"sha": "d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNWFlYjBlZjFjNDQ3MmU4NTNlYjlmM2JjMGFjZWY3YmY5YTY1MzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-04T09:54:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T09:54:02Z"}, "message": "Rollup merge of #36902 - ollie27:stab_impls, r=alexcrichton\n\nstd: Correct stability attributes for some implementations\n\nThese are displayed by rustdoc so should be correct.", "tree": {"sha": "d1631833677beed85553dd2e0a1cacc5ed104acf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1631833677beed85553dd2e0a1cacc5ed104acf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "html_url": "https://github.com/rust-lang/rust/commit/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39a78a28ce7a66944f08c3cd12c0be0282d4827", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39a78a28ce7a66944f08c3cd12c0be0282d4827", "html_url": "https://github.com/rust-lang/rust/commit/e39a78a28ce7a66944f08c3cd12c0be0282d4827"}, {"sha": "06a7dcd35588c0dd6eaa0a523b30e4140ff79868", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a7dcd35588c0dd6eaa0a523b30e4140ff79868", "html_url": "https://github.com/rust-lang/rust/commit/06a7dcd35588c0dd6eaa0a523b30e4140ff79868"}], "stats": {"total": 135, "additions": 88, "deletions": 47}, "files": [{"sha": "b4be8a43213d8dbf4974f18c7fd73d5ad7b02ed5", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -1033,7 +1033,7 @@ pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -1048,15 +1048,15 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "788236c24d063a75a00b86cfbc496a1df1f5b6e8", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -136,6 +136,7 @@ pub struct BTreeMap<K, V> {\n     length: usize,\n }\n \n+#[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for BTreeMap<K, V> {\n     #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n@@ -146,6 +147,7 @@ impl<K, V> Drop for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n     fn clone(&self) -> BTreeMap<K, V> {\n         fn clone_subtree<K: Clone, V: Clone>(node: node::NodeRef<marker::Immut,\n@@ -1125,6 +1127,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> {\n     type Item = (&'a K, &'a V);\n     type IntoIter = Iter<'a, K, V>;\n@@ -1134,6 +1137,7 @@ impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n@@ -1154,6 +1158,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {\n         if self.length == 0 {\n@@ -1165,12 +1170,14 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> ExactSizeIterator for Iter<'a, K, V> {\n     fn len(&self) -> usize {\n         self.length\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {\n@@ -1180,6 +1187,7 @@ impl<'a, K, V> Clone for Iter<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> {\n     type Item = (&'a K, &'a mut V);\n     type IntoIter = IterMut<'a, K, V>;\n@@ -1189,6 +1197,7 @@ impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n@@ -1206,6 +1215,7 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n         if self.length == 0 {\n@@ -1217,6 +1227,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n     fn len(&self) -> usize {\n         self.length\n@@ -1226,6 +1237,7 @@ impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n     type IntoIter = IntoIter<K, V>;\n@@ -1244,6 +1256,7 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n     fn drop(&mut self) {\n         for _ in &mut *self {\n@@ -1260,6 +1273,7 @@ impl<K, V> Drop for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (K, V);\n \n@@ -1304,6 +1318,7 @@ impl<K, V> Iterator for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n     fn next_back(&mut self) -> Option<(K, V)> {\n         if self.length == 0 {\n@@ -1342,6 +1357,7 @@ impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n     fn len(&self) -> usize {\n         self.length\n@@ -1351,6 +1367,7 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n@@ -1363,12 +1380,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> {\n     fn next_back(&mut self) -> Option<&'a K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n@@ -1378,12 +1397,14 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n         Keys { inner: self.inner.clone() }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n \n@@ -1396,12 +1417,14 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> {\n     fn next_back(&mut self) -> Option<&'a V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n@@ -1411,6 +1434,7 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {\n         Values { inner: self.inner.clone() }\n@@ -1635,6 +1659,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> BTreeMap<K, V> {\n         let mut map = BTreeMap::new();\n@@ -1643,6 +1668,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n@@ -1652,12 +1678,14 @@ impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> {\n     fn extend<I: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         for elt in self {\n@@ -1666,41 +1694,48 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Default for BTreeMap<K, V> {\n     /// Creates an empty `BTreeMap<K, V>`.\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: PartialEq, V: PartialEq> PartialEq for BTreeMap<K, V> {\n     fn eq(&self, other: &BTreeMap<K, V>) -> bool {\n         self.len() == other.len() && self.iter().zip(other).all(|(a, b)| a == b)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Eq, V: Eq> Eq for BTreeMap<K, V> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: PartialOrd, V: PartialOrd> PartialOrd for BTreeMap<K, V> {\n     #[inline]\n     fn partial_cmp(&self, other: &BTreeMap<K, V>) -> Option<Ordering> {\n         self.iter().partial_cmp(other.iter())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n     #[inline]\n     fn cmp(&self, other: &BTreeMap<K, V>) -> Ordering {\n         self.iter().cmp(other.iter())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>\n     where K: Borrow<Q>,\n           Q: Ord"}, {"sha": "c57266d9e3b4a5b013a97842bac3ef044220836a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -779,6 +779,7 @@ impl<T: Debug> Debug for BTreeSet<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter { iter: self.iter.clone() }\n@@ -864,6 +865,7 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Difference<'a, T> {\n     fn clone(&self) -> Difference<'a, T> {\n         Difference {\n@@ -901,6 +903,7 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for SymmetricDifference<'a, T> {\n     fn clone(&self) -> SymmetricDifference<'a, T> {\n         SymmetricDifference {\n@@ -934,6 +937,7 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Intersection<'a, T> {\n     fn clone(&self) -> Intersection<'a, T> {\n         Intersection {\n@@ -977,6 +981,7 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Union<'a, T> {\n     fn clone(&self) -> Union<'a, T> {\n         Union {"}, {"sha": "2d12b4ccffe01aa246611dd2afa3fb51b86052ef", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -48,7 +48,6 @@ impl<E> Clone for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E: CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt.debug_set().entries(self).finish()\n@@ -277,7 +276,6 @@ impl<E: CLike> FromIterator<E> for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike\n {\n     type Item = E;\n@@ -296,7 +294,6 @@ impl<E: CLike> Extend<E> for EnumSet<E> {\n     }\n }\n \n-#[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, E: 'a + CLike + Copy> Extend<&'a E> for EnumSet<E> {\n     fn extend<I: IntoIterator<Item = &'a E>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());"}, {"sha": "3c4c2c9f61ec97b48b8e88876aac29aea7050104", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -122,7 +122,7 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;\n "}, {"sha": "54fd19dbe3058cd7a310ba34077b749fb82634bb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -1755,7 +1755,7 @@ pub struct IntoIter<T> {\n     end: *const T,\n }\n \n-#[stable(feature = \"vec_intoiter_debug\", since = \"\")]\n+#[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\")\n@@ -1929,7 +1929,7 @@ unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -1943,15 +1943,15 @@ impl<'a, T> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt as *const _) })\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         // exhaust self first\n@@ -1973,7 +1973,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n }\n \n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "cfed647f5d81c0cc8879b33cbf2f6a689ff372d8", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -2002,7 +2002,7 @@ unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n@@ -2051,7 +2051,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -2066,15 +2066,15 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "37bd57034a7b6ed7647f13950730facff135cc82", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -93,13 +93,15 @@ macro_rules! __impl_slice_eq2 {\n macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T> AsRef<[T]> for [T; $N] {\n                 #[inline]\n                 fn as_ref(&self) -> &[T] {\n                     &self[..]\n                 }\n             }\n \n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T> AsMut<[T]> for [T; $N] {\n                 #[inline]\n                 fn as_mut(&mut self) -> &mut [T] {"}, {"sha": "035418570a019076033f171f1fa98feb3d218ff3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -386,7 +386,7 @@ pub struct Cloned<I> {\n     it: I,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> Iterator for Cloned<I>\n     where I: Iterator<Item=&'a T>, T: Clone\n {\n@@ -401,7 +401,7 @@ impl<'a, I, T: 'a> Iterator for Cloned<I>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n     where I: DoubleEndedIterator<Item=&'a T>, T: Clone\n {\n@@ -410,7 +410,7 @@ impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}"}, {"sha": "eaa3d50c88adedee40ca18d6f3310adc31933e94", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -328,7 +328,8 @@ impl<A: Step> ops::RangeInclusive<A> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n     A: Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -352,7 +353,8 @@ impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n impl<A> FusedIterator for StepBy<A, ops::RangeFrom<A>>\n     where A: Clone, for<'a> &'a A: Add<&'a A, Output = A> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     type Item = A;\n "}, {"sha": "9a403891ebf82b0e5feb6163ed71534c830b3173", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -2570,7 +2570,7 @@ impl fmt::Display for TryFromIntError {\n \n macro_rules! same_sign_from_int_impl {\n     ($storage:ty, $target:ty, $($source:ty),*) => {$(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Err = TryFromIntError;\n \n@@ -2600,7 +2600,7 @@ same_sign_from_int_impl!(i64, isize, i8, i16, i32, i64, isize);\n \n macro_rules! cross_sign_from_int_impl {\n     ($unsigned:ty, $($signed:ty),*) => {$(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$unsigned> for $signed {\n             type Err = TryFromIntError;\n \n@@ -2614,7 +2614,7 @@ macro_rules! cross_sign_from_int_impl {\n             }\n         }\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$signed> for $unsigned {\n             type Err = TryFromIntError;\n "}, {"sha": "2c69880dfa35ab4417808f8e8c62bafbfaef0062", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -28,7 +28,7 @@ macro_rules! sh_impl_signed {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shl_assign(&mut self, other: $f) {\n@@ -50,7 +50,7 @@ macro_rules! sh_impl_signed {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shr_assign(&mut self, other: $f) {\n@@ -72,7 +72,7 @@ macro_rules! sh_impl_unsigned {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shl_assign(&mut self, other: $f) {\n@@ -90,7 +90,7 @@ macro_rules! sh_impl_unsigned {\n             }\n         }\n \n-        #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n             #[inline(always)]\n             fn shr_assign(&mut self, other: $f) {"}, {"sha": "f0510422a07d7b67faf2ed6442f46bc1be5d3bed", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -761,7 +761,7 @@ impl<T:?Sized> Deref for Unique<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&*self.pointer, f)"}, {"sha": "1c7894794c9c8f6c55b3299f7f114110e5d9b8e1", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -181,13 +181,16 @@ impl<I> Iterator for Utf16Encoder<I>\n impl<I> FusedIterator for Utf16Encoder<I>\n     where I: FusedIterator<Item = char> {}\n \n+#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;\n \n     fn next(&mut self) -> Option<&'a str> {\n         self.inner.next()\n     }\n }\n+\n+#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n     fn next_back(&mut self) -> Option<&'a str> {\n         self.inner.next_back()"}, {"sha": "3dfae976bfa7b3a6e9172f110c6d2f12dcd8f7ce", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -1598,14 +1598,14 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n \n     #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next().map(|(_, k, v)| (k, v)) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n@@ -2070,7 +2070,7 @@ impl Hasher for DefaultHasher {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n impl Default for RandomState {\n     /// Constructs a new `RandomState`.\n     #[inline]"}, {"sha": "2030a61f60f38a0c9f4f113f59b7efef6ae92d78", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -277,8 +277,7 @@ impl Ipv4Addr {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated)]\n+#[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "d86711c10ac7965c9dfcb17ab474ce8e771c3875", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -302,7 +302,7 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {"}, {"sha": "3788568a2fd27e80625daa35dfa5dc9d7496f231", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -196,9 +196,9 @@ impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: UnwindSafe> UnwindSafe for Unique<T> {}\n-#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Shared<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}, {"sha": "8b4da532af6f00cd3df224b888bfefed7baabb31", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -352,14 +352,12 @@ impl Iterator for Packets {\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n impl fmt::Debug for Select {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Select {{ .. }}\")\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Handle {{ .. }}\")"}, {"sha": "3a7c59d4e6d09d32e1aefbb5331fc60f8589eee8", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -161,21 +161,21 @@ impl AsRawFd for process::ChildStderr {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdin {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdout {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStderr {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()"}, {"sha": "bce32959a23c31f779a71bad76e6f7368f56e466", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=d25aeb0ef1c4472e853eb9f3bc0acef7bf9a6536", "patch": "@@ -33,7 +33,7 @@ impl AsRawHandle for process::Child {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::Child {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -61,21 +61,21 @@ impl AsRawHandle for process::ChildStderr {\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStdin {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStdout {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n-#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for process::ChildStderr {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -91,7 +91,7 @@ pub trait ExitStatusExt {\n     fn from_raw(raw: u32) -> Self;\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n impl ExitStatusExt for process::ExitStatus {\n     fn from_raw(raw: u32) -> Self {\n         process::ExitStatus::from_inner(From::from(raw))"}]}