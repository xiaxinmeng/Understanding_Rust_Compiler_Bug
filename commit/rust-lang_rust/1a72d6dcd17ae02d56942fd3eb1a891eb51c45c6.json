{"sha": "1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNzJkNmRjZDE3YWUwMmQ1Njk0MmZkM2ViMWE4OTFlYjUxYzQ1YzY=", "commit": {"author": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-19T19:17:06Z"}, "committer": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-19T19:17:06Z"}, "message": "Fix some of the __names in the comments", "tree": {"sha": "ce7ac2f505ee0831d4d96ad83ef33ac3b1ea2267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7ac2f505ee0831d4d96ad83ef33ac3b1ea2267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "html_url": "https://github.com/rust-lang/rust/commit/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/comments", "author": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b650c412d901dc92f795c4d32eb382f530f7e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b650c412d901dc92f795c4d32eb382f530f7e1", "html_url": "https://github.com/rust-lang/rust/commit/b9b650c412d901dc92f795c4d32eb382f530f7e1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "99b6f752e9406a48c91e12f1ef8a806897cb9d71", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "patch": "@@ -77,9 +77,9 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n     // ::std::cmp::Ordering::Equal => {\n     // ...\n     // }\n-    // __cmp => __cmp\n+    // cmp => cmp\n     // },\n-    // __cmp => __cmp\n+    // cmp => cmp\n     // }\n     //\n     cs_fold(// foldr nests the if-elses correctly, leaving the first field\n@@ -88,7 +88,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n             |cx, span, old, self_f, other_fs| {\n         // match new {\n         //     ::std::cmp::Ordering::Equal => old,\n-        //     __cmp => __cmp\n+        //     cmp => cmp\n         // }\n \n         let new = {"}, {"sha": "804b6f9a31802a4da4d11056d51c3c1a3adecd00", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "patch": "@@ -138,9 +138,9 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<\n     // ::std::option::Option::Some(::std::cmp::Ordering::Equal) => {\n     // ...\n     // }\n-    // __cmp => __cmp\n+    // cmp => cmp\n     // },\n-    // __cmp => __cmp\n+    // cmp => cmp\n     // }\n     //\n     cs_fold(// foldr nests the if-elses correctly, leaving the first field\n@@ -149,7 +149,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<\n             |cx, span, old, self_f, other_fs| {\n         // match new {\n         //     Some(::std::cmp::Ordering::Equal) => old,\n-        //     __cmp => __cmp\n+        //     cmp => cmp\n         // }\n \n         let new = {"}, {"sha": "457cae512929420eb8d7a4f245b16d0acd0135a1", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1a72d6dcd17ae02d56942fd3eb1a891eb51c45c6", "patch": "@@ -1004,10 +1004,10 @@ impl<'a> MethodDef<'a> {\n     ///\n     /// // equivalent to:\n     /// impl PartialEq for A {\n-    ///     fn eq(&self, __arg_1: &A) -> bool {\n+    ///     fn eq(&self, other: &A) -> bool {\n     ///         match *self {\n     ///             A {x: ref __self_0_0, y: ref __self_0_1} => {\n-    ///                 match *__arg_1 {\n+    ///                 match *other {\n     ///                     A {x: ref __self_1_0, y: ref __self_1_1} => {\n     ///                         __self_0_0.eq(__self_1_0) && __self_0_1.eq(__self_1_1)\n     ///                     }\n@@ -1020,10 +1020,10 @@ impl<'a> MethodDef<'a> {\n     /// // or if A is repr(packed) - note fields are matched by-value\n     /// // instead of by-reference.\n     /// impl PartialEq for A {\n-    ///     fn eq(&self, __arg_1: &A) -> bool {\n+    ///     fn eq(&self, other: &A) -> bool {\n     ///         match *self {\n     ///             A {x: __self_0_0, y: __self_0_1} => {\n-    ///                 match __arg_1 {\n+    ///                 match other {\n     ///                     A {x: __self_1_0, y: __self_1_1} => {\n     ///                         __self_0_0.eq(&__self_1_0) && __self_0_1.eq(&__self_1_1)\n     ///                     }\n@@ -1134,14 +1134,14 @@ impl<'a> MethodDef<'a> {\n     /// // is equivalent to\n     ///\n     /// impl PartialEq for A {\n-    ///     fn eq(&self, __arg_1: &A) -> ::bool {\n-    ///         match (&*self, &*__arg_1) {\n+    ///     fn eq(&self, other: &A) -> ::bool {\n+    ///         match (&*self, &*other) {\n     ///             (&A1, &A1) => true,\n     ///             (&A2(ref self_0),\n     ///              &A2(ref __arg_1_0)) => (*self_0).eq(&(*__arg_1_0)),\n     ///             _ => {\n     ///                 let __self_vi = match *self { A1(..) => 0, A2(..) => 1 };\n-    ///                 let __arg_1_vi = match *__arg_1 { A1(..) => 0, A2(..) => 1 };\n+    ///                 let __arg_1_vi = match *other { A1(..) => 0, A2(..) => 1 };\n     ///                 false\n     ///             }\n     ///         }"}]}