{"sha": "9051d6bc366804fde7c69074950363fc2956a2e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNTFkNmJjMzY2ODA0ZmRlN2M2OTA3NDk1MDM2M2ZjMjk1NmEyZTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-19T17:56:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T17:56:19Z"}, "message": "Merge #5822\n\n5822: Remove dead code\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "799ea7db698e0de0f241573f9fdf54446f974d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/799ea7db698e0de0f241573f9fdf54446f974d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9051d6bc366804fde7c69074950363fc2956a2e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPWfDCRBK7hj4Ov3rIwAAdHIIALFSZl73S7sZRZRpFJ2/Mz4V\nsGbuFTjdiaoVDJctqf8guoA9r3TpReXqPiAA5QgqPrkwfNujDzASHUcll8xfj98+\nfKmJUv+xHU/9tPaxpJpKmq/fap2p3cHPb3eoGDU+3DZsvOpGuyRMYKael6fTKDki\ny1TWop/uA5hD75VUqsD4FxT6ws00ybT1h318iaAueu0uT/0vTROKMdaNno+dv6gS\nCEDJizM5OO8L9qBU/nQJ6dagHybZVUU+BRlaxsoT82sixEp8UCQGaBzwqN9E6DSl\noPZ8C16RrynzDp9g3V7GTqB8Xm5UTiEgRIUh9tAqAhAqlstes27T5ZSAANh2byk=\n=uX/2\n-----END PGP SIGNATURE-----\n", "payload": "tree 799ea7db698e0de0f241573f9fdf54446f974d1b\nparent bb07e6bdee234d4408c3733307d6134597b531ec\nparent eb7bb2cba0b846b32aaf33bc187465f349706431\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597859779 +0000\ncommitter GitHub <noreply@github.com> 1597859779 +0000\n\nMerge #5822\n\n5822: Remove dead code\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9051d6bc366804fde7c69074950363fc2956a2e1", "html_url": "https://github.com/rust-lang/rust/commit/9051d6bc366804fde7c69074950363fc2956a2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9051d6bc366804fde7c69074950363fc2956a2e1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb07e6bdee234d4408c3733307d6134597b531ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb07e6bdee234d4408c3733307d6134597b531ec", "html_url": "https://github.com/rust-lang/rust/commit/bb07e6bdee234d4408c3733307d6134597b531ec"}, {"sha": "eb7bb2cba0b846b32aaf33bc187465f349706431", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7bb2cba0b846b32aaf33bc187465f349706431", "html_url": "https://github.com/rust-lang/rust/commit/eb7bb2cba0b846b32aaf33bc187465f349706431"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "dd8cfe42d2d6cf9b3afab8ddb24b8cbe367b169a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9051d6bc366804fde7c69074950363fc2956a2e1/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9051d6bc366804fde7c69074950363fc2956a2e1/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=9051d6bc366804fde7c69074950363fc2956a2e1", "patch": "@@ -484,9 +484,9 @@ fn highlight_element(\n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_def(sema, db, def, None) | HighlightModifier::Definition\n+                    highlight_def(db, def) | HighlightModifier::Definition\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_def(sema, db, def, None),\n+                Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n                 Some(NameClass::FieldShorthand { field, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n                     if let Definition::Field(field) = field {\n@@ -520,7 +520,7 @@ fn highlight_element(\n                                 }\n                             };\n \n-                            let mut h = highlight_def(sema, db, def, Some(name_ref.clone()));\n+                            let mut h = highlight_def(db, def);\n \n                             if let Some(parent) = name_ref.syntax().parent() {\n                                 if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n@@ -736,34 +736,24 @@ fn highlight_method_call(\n     Some(h)\n }\n \n-fn highlight_def(\n-    sema: &Semantics<RootDatabase>,\n-    db: &RootDatabase,\n-    def: Definition,\n-    name_ref: Option<ast::NameRef>,\n-) -> Highlight {\n+fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n         Definition::Field(_) => HighlightTag::Field,\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n-                return name_ref\n-                    .and_then(|name_ref| highlight_func_by_name_ref(sema, &name_ref))\n-                    .unwrap_or_else(|| {\n-                        let mut h = HighlightTag::Function.into();\n-                        if func.is_unsafe(db) {\n-                            h |= HighlightModifier::Unsafe;\n-                        }\n-\n-                        match func.self_param(db) {\n-                            None => h,\n-                            Some(self_param) => match self_param.access(db) {\n-                                hir::Access::Exclusive => h | HighlightModifier::Mutable,\n-                                hir::Access::Shared | hir::Access::Owned => h,\n-                            },\n-                        }\n-                    });\n+                let mut h = HighlightTag::Function.into();\n+                if func.is_unsafe(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+                if let Some(self_param) = func.self_param(db) {\n+                    match self_param.access(db) {\n+                        hir::Access::Exclusive => h |= HighlightModifier::Mutable,\n+                        hir::Access::Shared | hir::Access::Owned => (),\n+                    }\n+                }\n+                return h;\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,"}]}