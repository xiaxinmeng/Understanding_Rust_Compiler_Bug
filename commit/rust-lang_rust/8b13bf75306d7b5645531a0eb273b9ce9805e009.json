{"sha": "8b13bf75306d7b5645531a0eb273b9ce9805e009", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTNiZjc1MzA2ZDdiNTY0NTUzMWEwZWIyNzNiOWNlOTgwNWUwMDk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2012-12-11T14:47:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:27:06Z"}, "message": "priority_queue: replace some copies with swaps", "tree": {"sha": "71f9e7b90672d999986e0fa70f6a7d9fde87892d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f9e7b90672d999986e0fa70f6a7d9fde87892d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b13bf75306d7b5645531a0eb273b9ce9805e009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b13bf75306d7b5645531a0eb273b9ce9805e009", "html_url": "https://github.com/rust-lang/rust/commit/8b13bf75306d7b5645531a0eb273b9ce9805e009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b13bf75306d7b5645531a0eb273b9ce9805e009/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285496bd550817094c31167e7e49378a35560842", "url": "https://api.github.com/repos/rust-lang/rust/commits/285496bd550817094c31167e7e49378a35560842", "html_url": "https://github.com/rust-lang/rust/commit/285496bd550817094c31167e7e49378a35560842"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "ab274970ab3c38328356c053b1922b8945bdbce9", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b13bf75306d7b5645531a0eb273b9ce9805e009/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b13bf75306d7b5645531a0eb273b9ce9805e009/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=8b13bf75306d7b5645531a0eb273b9ce9805e009", "patch": "@@ -38,13 +38,9 @@ impl <T: Copy Ord> PriorityQueue<T> {\n \n     /// Pop the greatest item from the queue - fails if empty\n     fn pop(&mut self) -> T {\n-        let last = self.data.pop();\n-        if self.is_not_empty() {\n-            let ret = self.data[0];\n-            self.data[0] = last;\n-            self.siftup(0);\n-            ret\n-        } else { last }\n+        let mut item = self.data.pop();\n+        if self.is_not_empty() { item <-> self.data[0]; self.siftup(0); }\n+        item\n     }\n \n     /// Pop the greatest item from the queue - None if empty\n@@ -70,10 +66,10 @@ impl <T: Copy Ord> PriorityQueue<T> {\n \n     /// Optimized version of a pop followed by a push - fails if empty\n     fn replace(&mut self, item: T) -> T {\n-        let ret = self.data[0];\n-        self.data[0] = item;\n+        let mut item = item;\n+        item <-> self.data[0];\n         self.siftup(0);\n-        ret\n+        item\n     }\n \n     /// Consume the PriorityQueue and return the underlying vector"}]}