{"sha": "83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTg3ZmI3YjYzNzhlYjkyOGQwZmQzZTM4ZmJhYjM1NzlkYzUyMGM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-10T09:19:24Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-10T09:19:24Z"}, "message": "UI test cleanup: Extract match_same_arms tests", "tree": {"sha": "c291139eeeeb14d645070a1379a1497e1ebcb24b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c291139eeeeb14d645070a1379a1497e1ebcb24b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxf7KgACgkQtvoGpuDi\nZlvW1Q//dJ386cQv9TmtnJmI/wE7Yubiq8IZbeBtpsUQgA33JXt01YTd9HykiI1x\n3DjSRJjdcZlfciqHEIJm+e2P8ga4TTvs4FBz739jTW9gcpbXFv56nG//GxQs2eE8\nw4CDAWAC4O5qNLJcjLDZSkv3S1XsUuIYsbE5c2bJaRnDnuoXf2gXn/d7fhBUdyeT\nzwA0v4Z0waVRuliYYCFWISQ0cRfrbotb6PSYS0XmZjRhyz0kBK22QOP14sEkcZu/\n0zyBNuQ7GTzBH7HWxFu+gJQCCNcgZ5qFaBcLj9FD39MnymA1jzzy20mB6tI7WLfD\nPwB+LwvbINcisxmT8Af7FrQdsHtdahk61IU8OKdHhKspElgrZR6XVnZEUgdFPicX\n40EvA9N52F9olwFwLxKOQVCZW7Wlwu42Z2l9gdyo8Mjm0gR0xW/4KPvdplf8Tdjk\nTox/M98/gewergACoQpzJupaZjKque5Xn08zC9zEfvumW8wr+wO/VHhCG0xz93bO\n70ECV3wQ90iYzbzJbNE3RK/sW2vvweBJ6Gc9gvFbAILW3jTqz4kj92SBqsDz/Ude\nlGXORH+1TN4hY5sNrDhfSnrQLBxVHPg9ia0VOnDQkp4jF6VOjJHa8eqHMilBp0sj\nL3HFKOkQOR8L3ptpmOP+AO4AIXibO+/9AM8dYlZYwvMSiPhYBu4=\n=qy+0\n-----END PGP SIGNATURE-----", "payload": "tree c291139eeeeb14d645070a1379a1497e1ebcb24b\nparent 5725726345039830677a0aeb8389ae78ce01ff97\nauthor Philipp Hansch <dev@phansch.net> 1549790364 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1549790364 +0100\n\nUI test cleanup: Extract match_same_arms tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "html_url": "https://github.com/rust-lang/rust/commit/83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5725726345039830677a0aeb8389ae78ce01ff97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5725726345039830677a0aeb8389ae78ce01ff97", "html_url": "https://github.com/rust-lang/rust/commit/5725726345039830677a0aeb8389ae78ce01ff97"}], "stats": {"total": 978, "additions": 499, "deletions": 479}, "files": [{"sha": "a1f15c0268b525b0c8036d5732b78ff69001bbda", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 1, "deletions": 245, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "patch": "@@ -5,7 +5,6 @@\n     clippy::eq_op,\n     clippy::needless_continue,\n     clippy::needless_return,\n-    clippy::never_loop,\n     clippy::no_effect,\n     clippy::zero_divided_by_zero,\n     clippy::unused_unit\n@@ -16,64 +15,15 @@ fn foo() -> bool {\n     unimplemented!()\n }\n \n-struct Foo {\n-    bar: u8,\n-}\n-\n pub enum Abc {\n     A,\n     B,\n     C,\n }\n \n-#[warn(clippy::if_same_then_else)]\n #[warn(clippy::match_same_arms)]\n #[allow(clippy::unused_unit)]\n-fn if_same_then_else() -> Result<&'static str, ()> {\n-    if true {\n-        Foo { bar: 42 };\n-        0..10;\n-        ..;\n-        0..;\n-        ..10;\n-        0..=10;\n-        foo();\n-    } else {\n-        //~ ERROR same body as `if` block\n-        Foo { bar: 42 };\n-        0..10;\n-        ..;\n-        0..;\n-        ..10;\n-        0..=10;\n-        foo();\n-    }\n-\n-    if true {\n-        Foo { bar: 42 };\n-    } else {\n-        Foo { bar: 43 };\n-    }\n-\n-    if true {\n-        ();\n-    } else {\n-        ()\n-    }\n-\n-    if true {\n-        0..10;\n-    } else {\n-        0..=10;\n-    }\n-\n-    if true {\n-        foo();\n-        foo();\n-    } else {\n-        foo();\n-    }\n-\n+fn match_same_arms() {\n     let _ = match 42 {\n         42 => {\n             foo();\n@@ -102,129 +52,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         _ => 0, //~ ERROR match arms have same body\n     };\n \n-    if true {\n-        foo();\n-    }\n-\n-    let _ = if true {\n-        42\n-    } else {\n-        //~ ERROR same body as `if` block\n-        42\n-    };\n-\n-    if true {\n-        for _ in &[42] {\n-            let foo: &Option<_> = &Some::<u8>(42);\n-            if true {\n-                break;\n-            } else {\n-                continue;\n-            }\n-        }\n-    } else {\n-        //~ ERROR same body as `if` block\n-        for _ in &[42] {\n-            let foo: &Option<_> = &Some::<u8>(42);\n-            if true {\n-                break;\n-            } else {\n-                continue;\n-            }\n-        }\n-    }\n-\n-    if true {\n-        let bar = if true { 42 } else { 43 };\n-\n-        while foo() {\n-            break;\n-        }\n-        bar + 1;\n-    } else {\n-        //~ ERROR same body as `if` block\n-        let bar = if true { 42 } else { 43 };\n-\n-        while foo() {\n-            break;\n-        }\n-        bar + 1;\n-    }\n-\n-    if true {\n-        let _ = match 42 {\n-            42 => 1,\n-            a if a > 0 => 2,\n-            10..=15 => 3,\n-            _ => 4,\n-        };\n-    } else if false {\n-        foo();\n-    } else if foo() {\n-        let _ = match 42 {\n-            42 => 1,\n-            a if a > 0 => 2,\n-            10..=15 => 3,\n-            _ => 4,\n-        };\n-    }\n-\n-    if true {\n-        if let Some(a) = Some(42) {}\n-    } else {\n-        //~ ERROR same body as `if` block\n-        if let Some(a) = Some(42) {}\n-    }\n-\n-    if true {\n-        if let (1, .., 3) = (1, 2, 3) {}\n-    } else {\n-        //~ ERROR same body as `if` block\n-        if let (1, .., 3) = (1, 2, 3) {}\n-    }\n-\n-    if true {\n-        if let (1, .., 3) = (1, 2, 3) {}\n-    } else {\n-        if let (.., 3) = (1, 2, 3) {}\n-    }\n-\n-    if true {\n-        if let (1, .., 3) = (1, 2, 3) {}\n-    } else {\n-        if let (.., 4) = (1, 2, 3) {}\n-    }\n-\n-    if true {\n-        if let (1, .., 3) = (1, 2, 3) {}\n-    } else {\n-        if let (.., 1, 3) = (1, 2, 3) {}\n-    }\n-\n-    if true {\n-        if let Some(42) = None {}\n-    } else {\n-        if let Option::Some(42) = None {}\n-    }\n-\n-    if true {\n-        if let Some(42) = None::<u8> {}\n-    } else {\n-        if let Some(42) = None {}\n-    }\n-\n-    if true {\n-        if let Some(42) = None::<u8> {}\n-    } else {\n-        if let Some(42) = None::<u32> {}\n-    }\n-\n-    if true {\n-        if let Some(a) = Some(42) {}\n-    } else {\n-        if let Some(a) = Some(43) {}\n-    }\n-\n     let _ = match 42 {\n         42 => foo(),\n         51 => foo(), //~ ERROR match arms have same body\n@@ -271,33 +98,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         _ => 0,\n     };\n \n-    let _ = if true {\n-        0.0\n-    } else {\n-        //~ ERROR same body as `if` block\n-        0.0\n-    };\n-\n-    let _ = if true {\n-        -0.0\n-    } else {\n-        //~ ERROR same body as `if` block\n-        -0.0\n-    };\n-\n-    let _ = if true { 0.0 } else { -0.0 };\n-\n-    // Different NaNs\n-    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n-\n-    // Same NaNs\n-    let _ = if true {\n-        std::f32::NAN\n-    } else {\n-        //~ ERROR same body as `if` block\n-        std::f32::NAN\n-    };\n-\n     let _ = match Some(()) {\n         Some(()) => 0.0,\n         None => -0.0,\n@@ -308,50 +108,6 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         (None, Some(a)) => bar(a), // bindings have different types\n         _ => (),\n     }\n-\n-    if true {\n-        try!(Ok(\"foo\"));\n-    } else {\n-        //~ ERROR same body as `if` block\n-        try!(Ok(\"foo\"));\n-    }\n-\n-    if true {\n-        let foo = \"\";\n-        return Ok(&foo[0..]);\n-    } else if false {\n-        let foo = \"bar\";\n-        return Ok(&foo[0..]);\n-    } else {\n-        let foo = \"\";\n-        return Ok(&foo[0..]);\n-    }\n-\n-    // false positive if_same_then_else, let(x,y) vs let(y,x), see #3559\n-    if true {\n-        let foo = \"\";\n-        let (x, y) = (1, 2);\n-        return Ok(&foo[x..y]);\n-    } else {\n-        let foo = \"\";\n-        let (y, x) = (1, 2);\n-        return Ok(&foo[x..y]);\n-    }\n }\n \n fn main() {}\n-\n-// Issue #2423. This was causing an ICE\n-fn func() {\n-    if true {\n-        f(&[0; 62]);\n-        f(&[0; 4]);\n-        f(&[0; 3]);\n-    } else {\n-        f(&[0; 62]);\n-        f(&[0; 6]);\n-        f(&[0; 6]);\n-    }\n-}\n-\n-fn f(val: &[u8]) {}"}, {"sha": "f04a7706846530dad85026b8f929b21662f4040d", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 22, "deletions": 234, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "patch": "@@ -1,32 +1,5 @@\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:41:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         Foo { bar: 42 };\n-LL | |         0..10;\n-...  |\n-LL | |         foo();\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/copies.rs:33:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         Foo { bar: 42 };\n-LL | |         0..10;\n-LL | |         ..;\n-...  |\n-LL | |         foo();\n-LL | |     } else {\n-   | |_____^\n-\n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:87:14\n+  --> $DIR/copies.rs:37:14\n    |\n LL |           _ => {\n    |  ______________^\n@@ -40,7 +13,7 @@ LL | |         },\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/copies.rs:78:15\n+  --> $DIR/copies.rs:28:15\n    |\n LL |           42 => {\n    |  _______________^\n@@ -52,7 +25,7 @@ LL | |             a\n LL | |         },\n    | |_________^\n note: `42` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:78:15\n+  --> $DIR/copies.rs:28:15\n    |\n LL |           42 => {\n    |  _______________^\n@@ -65,291 +38,106 @@ LL | |         },\n    | |_________^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:102:14\n+  --> $DIR/copies.rs:52:14\n    |\n LL |         _ => 0, //~ ERROR match arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/copies.rs:100:19\n+  --> $DIR/copies.rs:50:19\n    |\n LL |         Abc::A => 0,\n    |                   ^\n note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:100:19\n+  --> $DIR/copies.rs:50:19\n    |\n LL |         Abc::A => 0,\n    |                   ^\n \n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:111:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         42\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:109:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         42\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:125:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         for _ in &[42] {\n-LL | |             let foo: &Option<_> = &Some::<u8>(42);\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:116:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         for _ in &[42] {\n-LL | |             let foo: &Option<_> = &Some::<u8>(42);\n-LL | |             if true {\n-...  |\n-LL | |         }\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:144:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         let bar = if true { 42 } else { 43 };\n-LL | |\n-...  |\n-LL | |         bar + 1;\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:137:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         let bar = if true { 42 } else { 43 };\n-LL | |\n-LL | |         while foo() {\n-...  |\n-LL | |         bar + 1;\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:174:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         if let Some(a) = Some(42) {}\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:172:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         if let Some(a) = Some(42) {}\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:181:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         if let (1, .., 3) = (1, 2, 3) {}\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:179:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         if let (1, .., 3) = (1, 2, 3) {}\n-LL | |     } else {\n-   | |_____^\n-\n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:230:15\n+  --> $DIR/copies.rs:57:15\n    |\n LL |         51 => foo(), //~ ERROR match arms have same body\n    |               ^^^^^\n    |\n note: same as this\n-  --> $DIR/copies.rs:229:15\n+  --> $DIR/copies.rs:56:15\n    |\n LL |         42 => foo(),\n    |               ^^^^^\n note: consider refactoring into `42 | 51`\n-  --> $DIR/copies.rs:229:15\n+  --> $DIR/copies.rs:56:15\n    |\n LL |         42 => foo(),\n    |               ^^^^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:236:17\n+  --> $DIR/copies.rs:63:17\n    |\n LL |         None => 24, //~ ERROR match arms have same body\n    |                 ^^\n    |\n note: same as this\n-  --> $DIR/copies.rs:235:20\n+  --> $DIR/copies.rs:62:20\n    |\n LL |         Some(_) => 24,\n    |                    ^^\n note: consider refactoring into `Some(_) | None`\n-  --> $DIR/copies.rs:235:20\n+  --> $DIR/copies.rs:62:20\n    |\n LL |         Some(_) => 24,\n    |                    ^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:258:28\n+  --> $DIR/copies.rs:85:28\n    |\n LL |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n    |                            ^^^^^^\n    |\n note: same as this\n-  --> $DIR/copies.rs:257:28\n+  --> $DIR/copies.rs:84:28\n    |\n LL |         (Some(a), None) => bar(a),\n    |                            ^^^^^^\n note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-  --> $DIR/copies.rs:257:28\n+  --> $DIR/copies.rs:84:28\n    |\n LL |         (Some(a), None) => bar(a),\n    |                            ^^^^^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:264:26\n+  --> $DIR/copies.rs:91:26\n    |\n LL |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n    |                          ^^^^^^\n    |\n note: same as this\n-  --> $DIR/copies.rs:263:26\n+  --> $DIR/copies.rs:90:26\n    |\n LL |         (Some(a), ..) => bar(a),\n    |                          ^^^^^^\n note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-  --> $DIR/copies.rs:263:26\n+  --> $DIR/copies.rs:90:26\n    |\n LL |         (Some(a), ..) => bar(a),\n    |                          ^^^^^^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:270:20\n+  --> $DIR/copies.rs:97:20\n    |\n LL |         (.., 3) => 42, //~ ERROR match arms have same body\n    |                    ^^\n    |\n note: same as this\n-  --> $DIR/copies.rs:269:23\n+  --> $DIR/copies.rs:96:23\n    |\n LL |         (1, .., 3) => 42,\n    |                       ^^\n note: consider refactoring into `(1, .., 3) | (.., 3)`\n-  --> $DIR/copies.rs:269:23\n+  --> $DIR/copies.rs:96:23\n    |\n LL |         (1, .., 3) => 42,\n    |                       ^^\n \n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:276:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         0.0\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:274:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         0.0\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:283:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         -0.0\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:281:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         -0.0\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:296:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         std::f32::NAN\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:294:21\n-   |\n-LL |       let _ = if true {\n-   |  _____________________^\n-LL | |         std::f32::NAN\n-LL | |     } else {\n-   | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/copies.rs:314:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         try!(Ok(\"foo\"));\n-LL | |     }\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/copies.rs:312:13\n-   |\n-LL |       if true {\n-   |  _____________^\n-LL | |         try!(Ok(\"foo\"));\n-LL | |     } else {\n-   | |_____^\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "c054e39811cf842a758492711a402365312e1114", "filename": "tests/ui/if_same_then_else.rs", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "patch": "@@ -0,0 +1,262 @@\n+#![warn(clippy::if_same_then_else)]\n+#![allow(\n+    clippy::blacklisted_name,\n+    clippy::collapsible_if,\n+    clippy::cyclomatic_complexity,\n+    clippy::eq_op,\n+    clippy::needless_return,\n+    clippy::never_loop,\n+    clippy::no_effect,\n+    clippy::zero_divided_by_zero,\n+    clippy::unused_unit,\n+)]\n+\n+struct Foo {\n+    bar: u8,\n+}\n+\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n+\n+fn if_same_then_else() -> Result<&'static str, ()> {\n+    if true {\n+        Foo { bar: 42 };\n+        0..10;\n+        ..;\n+        0..;\n+        ..10;\n+        0..=10;\n+        foo();\n+    } else {\n+        //~ ERROR same body as `if` block\n+        Foo { bar: 42 };\n+        0..10;\n+        ..;\n+        0..;\n+        ..10;\n+        0..=10;\n+        foo();\n+    }\n+\n+    if true {\n+        Foo { bar: 42 };\n+    } else {\n+        Foo { bar: 43 };\n+    }\n+\n+    if true {\n+        ();\n+    } else {\n+        ()\n+    }\n+\n+    if true {\n+        0..10;\n+    } else {\n+        0..=10;\n+    }\n+\n+    if true {\n+        foo();\n+        foo();\n+    } else {\n+        foo();\n+    }\n+\n+    let _ = if true {\n+        0.0\n+    } else {\n+        //~ ERROR same body as `if` block\n+        0.0\n+    };\n+\n+    let _ = if true {\n+        -0.0\n+    } else {\n+        //~ ERROR same body as `if` block\n+        -0.0\n+    };\n+\n+    let _ = if true { 0.0 } else { -0.0 };\n+\n+    // Different NaNs\n+    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n+\n+    if true {\n+        foo();\n+    }\n+\n+    let _ = if true {\n+        42\n+    } else {\n+        //~ ERROR same body as `if` block\n+        42\n+    };\n+\n+    if true {\n+        for _ in &[42] {\n+            let foo: &Option<_> = &Some::<u8>(42);\n+            if true {\n+                break;\n+            } else {\n+                continue;\n+            }\n+        }\n+    } else {\n+        //~ ERROR same body as `if` block\n+        for _ in &[42] {\n+            let foo: &Option<_> = &Some::<u8>(42);\n+            if true {\n+                break;\n+            } else {\n+                continue;\n+            }\n+        }\n+    }\n+\n+    if true {\n+        let bar = if true { 42 } else { 43 };\n+\n+        while foo() {\n+            break;\n+        }\n+        bar + 1;\n+    } else {\n+        //~ ERROR same body as `if` block\n+        let bar = if true { 42 } else { 43 };\n+\n+        while foo() {\n+            break;\n+        }\n+        bar + 1;\n+    }\n+\n+    if true {\n+        let _ = match 42 {\n+            42 => 1,\n+            a if a > 0 => 2,\n+            10..=15 => 3,\n+            _ => 4,\n+        };\n+    } else if false {\n+        foo();\n+    } else if foo() {\n+        let _ = match 42 {\n+            42 => 1,\n+            a if a > 0 => 2,\n+            10..=15 => 3,\n+            _ => 4,\n+        };\n+    }\n+\n+    if true {\n+        if let Some(a) = Some(42) {}\n+    } else {\n+        //~ ERROR same body as `if` block\n+        if let Some(a) = Some(42) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    } else {\n+        //~ ERROR same body as `if` block\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    } else {\n+        if let (.., 3) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    } else {\n+        if let (.., 4) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let (1, .., 3) = (1, 2, 3) {}\n+    } else {\n+        if let (.., 1, 3) = (1, 2, 3) {}\n+    }\n+\n+    if true {\n+        if let Some(42) = None {}\n+    } else {\n+        if let Option::Some(42) = None {}\n+    }\n+\n+    if true {\n+        if let Some(42) = None::<u8> {}\n+    } else {\n+        if let Some(42) = None {}\n+    }\n+\n+    if true {\n+        if let Some(42) = None::<u8> {}\n+    } else {\n+        if let Some(42) = None::<u32> {}\n+    }\n+\n+    if true {\n+        if let Some(a) = Some(42) {}\n+    } else {\n+        if let Some(a) = Some(43) {}\n+    }\n+\n+    // Same NaNs\n+    let _ = if true {\n+        std::f32::NAN\n+    } else {\n+        //~ ERROR same body as `if` block\n+        std::f32::NAN\n+    };\n+\n+    if true {\n+        try!(Ok(\"foo\"));\n+    } else {\n+        //~ ERROR same body as `if` block\n+        try!(Ok(\"foo\"));\n+    }\n+\n+    if true {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    } else if false {\n+        let foo = \"bar\";\n+        return Ok(&foo[0..]);\n+    } else {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    }\n+\n+    // false positive if_same_then_else, let(x,y) vs let(y,x), see #3559\n+    if true {\n+        let foo = \"\";\n+        let (x, y) = (1, 2);\n+        return Ok(&foo[x..y]);\n+    } else {\n+        let foo = \"\";\n+        let (y, x) = (1, 2);\n+        return Ok(&foo[x..y]);\n+    }\n+}\n+\n+// Issue #2423. This was causing an ICE\n+fn func() {\n+    if true {\n+        f(&[0; 62]);\n+        f(&[0; 4]);\n+        f(&[0; 3]);\n+    } else {\n+        f(&[0; 62]);\n+        f(&[0; 6]);\n+        f(&[0; 6]);\n+    }\n+}\n+\n+fn f(val: &[u8]) {}\n+\n+fn main() {}"}, {"sha": "b170db31b85331e4fb5d87e4175d59e049c0366a", "filename": "tests/ui/if_same_then_else.stderr", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fb7b6378eb928d0fd3e38fbab3579dc520c/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=83a87fb7b6378eb928d0fd3e38fbab3579dc520c", "patch": "@@ -0,0 +1,214 @@\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:31:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         Foo { bar: 42 };\n+LL | |         0..10;\n+...  |\n+LL | |         foo();\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:23:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         Foo { bar: 42 };\n+LL | |         0..10;\n+LL | |         ..;\n+...  |\n+LL | |         foo();\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:69:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         0.0\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:67:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         0.0\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:76:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         -0.0\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:74:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         -0.0\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:92:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         42\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:90:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         42\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:106:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         for _ in &[42] {\n+LL | |             let foo: &Option<_> = &Some::<u8>(42);\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:97:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         for _ in &[42] {\n+LL | |             let foo: &Option<_> = &Some::<u8>(42);\n+LL | |             if true {\n+...  |\n+LL | |         }\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:125:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         let bar = if true { 42 } else { 43 };\n+LL | |\n+...  |\n+LL | |         bar + 1;\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:118:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         let bar = if true { 42 } else { 43 };\n+LL | |\n+LL | |         while foo() {\n+...  |\n+LL | |         bar + 1;\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:155:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         if let Some(a) = Some(42) {}\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:153:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         if let Some(a) = Some(42) {}\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:162:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:160:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:212:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         std::f32::NAN\n+LL | |     };\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:210:21\n+   |\n+LL |       let _ = if true {\n+   |  _____________________^\n+LL | |         std::f32::NAN\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:219:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         try!(Ok(\"foo\"));\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:217:13\n+   |\n+LL |       if true {\n+   |  _____________^\n+LL | |         try!(Ok(\"foo\"));\n+LL | |     } else {\n+   | |_____^\n+\n+error: aborting due to 10 previous errors\n+"}]}