{"sha": "acdc9987371092422dedf88bc8a0542e688986c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZGM5OTg3MzcxMDkyNDIyZGVkZjg4YmM4YTA1NDJlNjg4OTg2YzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T00:14:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:58Z"}, "message": "libsyntax: De-`@mut` the path in the AST mapping context", "tree": {"sha": "b69713b1c5d7571f20dec1a161d428602adbae0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b69713b1c5d7571f20dec1a161d428602adbae0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acdc9987371092422dedf88bc8a0542e688986c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acdc9987371092422dedf88bc8a0542e688986c5", "html_url": "https://github.com/rust-lang/rust/commit/acdc9987371092422dedf88bc8a0542e688986c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acdc9987371092422dedf88bc8a0542e688986c5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4269f85d5bc67390af75c28311b17c0032a55c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4269f85d5bc67390af75c28311b17c0032a55c5e", "html_url": "https://github.com/rust-lang/rust/commit/4269f85d5bc67390af75c28311b17c0032a55c5e"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "05fdfb36ca540a5e745152ad8678a4d90fc5686e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/acdc9987371092422dedf88bc8a0542e688986c5/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdc9987371092422dedf88bc8a0542e688986c5/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=acdc9987371092422dedf88bc8a0542e688986c5", "patch": "@@ -197,13 +197,13 @@ pub type map = @RefCell<HashMap<NodeId, ast_node>>;\n \n pub struct Ctx {\n     map: map,\n-    path: path,\n+    path: RefCell<path>,\n     diag: @SpanHandler,\n }\n \n impl Ctx {\n     fn extend(&self, elt: path_elt) -> @path {\n-        @vec::append(self.path.clone(), [elt])\n+        @vec::append(self.path.get(), [elt])\n     }\n \n     fn map_method(&mut self,\n@@ -275,12 +275,18 @@ impl Ctx {\n             map.get().insert(a.id, node_arg(a.pat));\n         }\n         match *fk {\n-            visit::fk_method(name, _, _) => { self.path.push(path_name(name)) }\n+            visit::fk_method(name, _, _) => {\n+                let mut path = self.path.borrow_mut();\n+                path.get().push(path_name(name))\n+            }\n             _ => {}\n         }\n         visit::walk_fn(self, fk, decl, body, sp, id, ());\n         match *fk {\n-            visit::fk_method(..) => { self.path.pop(); }\n+            visit::fk_method(..) => {\n+                let mut path = self.path.borrow_mut();\n+                path.get().pop();\n+            }\n             _ => {}\n         }\n     }\n@@ -320,7 +326,7 @@ impl Ctx {\n impl Visitor<()> for Ctx {\n     fn visit_item(&mut self, i: @item, _: ()) {\n         // clone is FIXME #2543\n-        let item_path = @self.path.clone();\n+        let item_path = @self.path.get();\n         {\n             let mut map = self.map.borrow_mut();\n             map.get().insert(i.id, node_item(i, item_path));\n@@ -338,7 +344,8 @@ impl Visitor<()> for Ctx {\n                     self.map_method(impl_did, extended, *m, false)\n                 }\n \n-                self.path.push(elt);\n+                let mut path = self.path.borrow_mut();\n+                path.get().push(elt);\n             }\n             item_enum(ref enum_definition, _) => {\n                 for &v in enum_definition.variants.iter() {\n@@ -366,7 +373,7 @@ impl Visitor<()> for Ctx {\n                                                         // Anonymous extern\n                                                         // mods go in the\n                                                         // parent scope.\n-                                                        @self.path.clone()\n+                                                        @self.path.get()\n                                                        ));\n                 }\n             }\n@@ -401,13 +408,19 @@ impl Visitor<()> for Ctx {\n \n         match i.node {\n             item_mod(_) | item_foreign_mod(_) => {\n-                self.path.push(path_mod(i.ident));\n+                let mut path = self.path.borrow_mut();\n+                path.get().push(path_mod(i.ident));\n             }\n             item_impl(..) => {} // this was guessed above.\n-            _ => self.path.push(path_name(i.ident))\n+            _ => {\n+                let mut path = self.path.borrow_mut();\n+                path.get().push(path_name(i.ident))\n+            }\n         }\n         visit::walk_item(self, i, ());\n-        self.path.pop();\n+\n+        let mut path = self.path.borrow_mut();\n+        path.get().pop();\n     }\n \n     fn visit_pat(&mut self, pat: &Pat, _: ()) {\n@@ -445,7 +458,7 @@ impl Visitor<()> for Ctx {\n pub fn map_crate(diag: @SpanHandler, c: &Crate) -> map {\n     let cx = @mut Ctx {\n         map: @RefCell::new(HashMap::new()),\n-        path: ~[],\n+        path: RefCell::new(~[]),\n         diag: diag,\n     };\n     visit::walk_crate(cx, c, ());\n@@ -464,7 +477,7 @@ pub fn map_decoded_item(diag: @SpanHandler,\n     // starting from 0.\n     let cx = @mut Ctx {\n         map: map,\n-        path: path.clone(),\n+        path: RefCell::new(path.clone()),\n         diag: diag,\n     };\n "}]}