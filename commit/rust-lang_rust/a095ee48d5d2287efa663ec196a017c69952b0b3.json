{"sha": "a095ee48d5d2287efa663ec196a017c69952b0b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTVlZTQ4ZDVkMjI4N2VmYTY2M2VjMTk2YTAxN2M2OTk1MmIwYjM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-09-06T22:08:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-09-11T20:31:02Z"}, "message": "Add class for codeblocks", "tree": {"sha": "eea25453323c72178c842ba709143249c6c35241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea25453323c72178c842ba709143249c6c35241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a095ee48d5d2287efa663ec196a017c69952b0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a095ee48d5d2287efa663ec196a017c69952b0b3", "html_url": "https://github.com/rust-lang/rust/commit/a095ee48d5d2287efa663ec196a017c69952b0b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a095ee48d5d2287efa663ec196a017c69952b0b3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a20953906056f85f71896795e762ac242e1891aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20953906056f85f71896795e762ac242e1891aa", "html_url": "https://github.com/rust-lang/rust/commit/a20953906056f85f71896795e762ac242e1891aa"}], "stats": {"total": 88, "additions": 79, "deletions": 9}, "files": [{"sha": "cc1da35a997572290be8f8a007d72dbe6a1de297", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=a095ee48d5d2287efa663ec196a017c69952b0b3", "patch": "@@ -22,6 +22,7 @@\n \n use html::escape::Escape;\n \n+use std::collections::HashMap;\n use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n@@ -34,12 +35,18 @@ use syntax_pos::Span;\n \n /// Highlights `src`, returning the HTML output.\n pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>,\n-                                extension: Option<&str>) -> String {\n+                                extension: Option<&str>,\n+                                extras: Option<HashMap<String, String>>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new(FilePathMapping::empty());\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n \n     let mut out = Vec::new();\n+    if let Some((tooltip, class)) = tooltip {\n+        write!(out, \"<div class='information'><div class='tooltip {}'>\u26a0<span \\\n+                     class='tooltiptext'>{}</span></div></div>\",\n+               class, tooltip).unwrap();\n+    }\n     write_header(class, id, &mut out).unwrap();\n \n     let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());\n@@ -389,12 +396,18 @@ impl Class {\n \n fn write_header(class: Option<&str>,\n                 id: Option<&str>,\n-                out: &mut Write)\n+                out: &mut Write,\n+                extras: Option<HashMap<String, String>>)\n                 -> io::Result<()> {\n     write!(out, \"<pre \")?;\n     if let Some(id) = id {\n         write!(out, \"id='{}' \", id)?;\n     }\n+    if let Some(extras) = extras {\n+        for (key, value) in &extras {\n+            write!(out, \"{}=\\\"{}\\\" \", key, value)?;\n+        }\n+    }\n     write!(out, \"class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n }\n "}, {"sha": "d9fb35c4c269b6f20b1df1fde72c8640132474d1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a095ee48d5d2287efa663ec196a017c69952b0b3", "patch": "@@ -158,10 +158,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let event = self.inner.next();\n+        let compile_fail;\n+        let ignore;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n-            if !LangString::parse(&lang).rust {\n+            let parse_result = LangString::parse(&lang);\n+            if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n+            compile_fail = parse_result.compile_fail;\n+            ignore = parse_result.ignore;\n         } else {\n             return event;\n         }\n@@ -220,11 +225,28 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     url, test_escaped, channel\n                 ))\n             });\n+            let title = if ignore {\n+                let mut tmp = HashMap::new();\n+                tmp.insert(\"title\".to_owned(),\n+                           \"Be careful when using this code, it's not being tested!\".to_owned());\n+                Some(tmp)\n+            } else if compile_fail {\n+                let mut tmp = HashMap::new();\n+                tmp.insert(\"title\".to_owned(),\n+                           \"This code doesn't compile so be extra careful!\".to_owned());\n+                Some(tmp)\n+            } else {\n+                None\n+            };\n             s.push_str(&highlight::render_with_highlighting(\n                         &text,\n-                        Some(\"rust-example-rendered\"),\n+                        Some(&format!(\"rust-example-rendered{}\",\n+                                      if ignore { \" ignore\" }\n+                                      else if compile_fail { \" compile_fail\" }\n+                                      else { \"\" })),\n                         None,\n-                        playground_button.as_ref().map(String::as_str)));\n+                        playground_button.as_ref().map(String::as_str),\n+                        title));\n             Some(Event::Html(s.into()))\n         })\n     }\n@@ -554,12 +576,18 @@ pub fn render(w: &mut fmt::Formatter,\n             let origtext = str::from_utf8(text).unwrap();\n             let origtext = origtext.trim_left();\n             debug!(\"docblock: ==============\\n{:?}\\n=======\", text);\n+            let mut compile_fail = false;\n+            let mut ignore = false;\n+\n             let rendered = if lang.is_null() || origtext.is_empty() {\n                 false\n             } else {\n                 let rlang = (*lang).as_bytes();\n                 let rlang = str::from_utf8(rlang).unwrap();\n-                if !LangString::parse(rlang).rust {\n+                let parse_result = LangString::parse(rlang);\n+                compile_fail = parse_result.compile_fail;\n+                ignore = parse_result.ignore;\n+                if !parse_result.rust {\n                     (my_opaque.dfltblk)(ob, orig_text, lang,\n                                         opaque as *const hoedown_renderer_data,\n                                         line);\n@@ -614,11 +642,30 @@ pub fn render(w: &mut fmt::Formatter,\n                         url, test_escaped, channel\n                     ))\n                 });\n+                let title = if ignore {\n+                    let mut tmp = HashMap::new();\n+                    tmp.insert(\"title\".to_owned(),\n+                               \"Be careful when using this code, it's not being \\\n+                                tested!\".to_owned());\n+                    Some(tmp)\n+                } else if compile_fail {\n+                    let mut tmp = HashMap::new();\n+                    tmp.insert(\"title\".to_owned(),\n+                               \"This code doesn't compile so be extra \\\n+                                careful!\".to_owned());\n+                    Some(tmp)\n+                } else {\n+                    None\n+                };\n                 s.push_str(&highlight::render_with_highlighting(\n                                &text,\n-                               Some(\"rust-example-rendered\"),\n+                               Some(&format!(\"rust-example-rendered{}\",\n+                                             if ignore { \" ignore\" }\n+                                             else if compile_fail { \" compile_fail\" }\n+                                             else { \"\" })),\n                                None,\n-                               playground_button.as_ref().map(String::as_str)));\n+                               playground_button.as_ref().map(String::as_str),\n+                               title));\n                 hoedown_buffer_put(ob, s.as_ptr(), s.len());\n             })\n         }"}, {"sha": "f911ddb4d4f55b9806e0c1075637c821e61bbc72", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a095ee48d5d2287efa663ec196a017c69952b0b3", "patch": "@@ -1839,6 +1839,7 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n                 None,\n                 None,\n                 None,\n+                None,\n             )\n         }\n         _ => String::new(),\n@@ -3678,7 +3679,7 @@ impl<'a> fmt::Display for Source<'a> {\n             write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols)?;\n         }\n         write!(fmt, \"</pre>\")?;\n-        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None, None))?;\n+        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None, None, None))?;\n         Ok(())\n     }\n }\n@@ -3688,6 +3689,7 @@ fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     w.write_str(&highlight::render_with_highlighting(&t.source,\n                                                      Some(\"macro\"),\n                                                      None,\n+                                                     None,\n                                                      None))?;\n     document(w, cx, it)\n }"}, {"sha": "18b40b3d60c177247fcd7e5783b199118e53ce2c", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/a095ee48d5d2287efa663ec196a017c69952b0b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=a095ee48d5d2287efa663ec196a017c69952b0b3", "patch": "@@ -202,4 +202,12 @@ a.test-arrow:hover{\n \n :target > code {\n \tbackground: #FDFFD3;\n+}\n+\n+pre.compile_fail {\n+\tbox-shadow: -6px 0 5px -3px #f00;\n+}\n+\n+pre.ignore {\n+\tbox-shadow: -6px 0 5px -3px #ff9200;\n }\n\\ No newline at end of file"}]}