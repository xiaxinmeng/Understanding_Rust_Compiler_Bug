{"sha": "02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "node_id": "C_kwDOAAsO6NoAKDAyY2Q3OWFmYjgwODBmY2U4YzhjZTM1NTMzYzU0ZDhlY2Y4ZjM5MGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T13:04:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T13:04:57Z"}, "message": "Auto merge of #102652 - Dylan-DPC:rollup-6ff8ct8, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101189 (Implement `Ready::into_inner()`)\n - #101642 (Fix in-place collection leak when remaining element destructor panic)\n - #102489 (Normalize substs before resolving instance in `NoopMethodCall` lint)\n - #102559 (Don't ICE when trying to copy unsized value in const prop)\n - #102568 (Lint against nested opaque types that don't satisfy associated type bounds)\n - #102633 (Fix rustdoc ICE in invalid_rust_codeblocks lint)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b8194a8a03bdb4b497e7766ceaf273decda95a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8194a8a03bdb4b497e7766ceaf273decda95a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "html_url": "https://github.com/rust-lang/rust/commit/02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ead49f0beb7e36007aeed59f862f10f72b889c59", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead49f0beb7e36007aeed59f862f10f72b889c59", "html_url": "https://github.com/rust-lang/rust/commit/ead49f0beb7e36007aeed59f862f10f72b889c59"}, {"sha": "f7ca4652723aa372592d47f495186fb27d10186a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ca4652723aa372592d47f495186fb27d10186a", "html_url": "https://github.com/rust-lang/rust/commit/f7ca4652723aa372592d47f495186fb27d10186a"}], "stats": {"total": 525, "additions": 467, "deletions": 58}, "files": [{"sha": "eeeb7d6d3e5cc1e86766e92222bbb88c6e0b0ddd", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -640,11 +640,17 @@ where\n         // avoid force_allocation.\n         let src = match self.read_immediate_raw(src)? {\n             Ok(src_val) => {\n-                assert!(!src.layout.is_unsized(), \"cannot copy unsized immediates\");\n-                assert!(\n-                    !dest.layout.is_unsized(),\n-                    \"the src is sized, so the dest must also be sized\"\n-                );\n+                // FIXME(const_prop): Const-prop can possibly evaluate an\n+                // unsized copy operation when it thinks that the type is\n+                // actually sized, due to a trivially false where-clause\n+                // predicate like `where Self: Sized` with `Self = dyn Trait`.\n+                // See #102553 for an example of such a predicate.\n+                if src.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(src.layout.ty));\n+                }\n+                if dest.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(dest.layout.ty));\n+                }\n                 assert_eq!(src.layout.size, dest.layout.size);\n                 // Yay, we got a value that we can write directly.\n                 return if layout_compat {"}, {"sha": "0fd9b0ead167c31eccd5e0bfe0e2a9c55cded87b", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -433,3 +433,7 @@ lint_check_name_unknown_tool = unknown lint tool: `{$tool_name}`\n lint_check_name_warning = {$msg}\n \n lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}\n+\n+lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its associated type bounds\n+    .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n+    .suggestion = add this bound"}, {"sha": "9148c42195fbed1156064a2163c1e03498f8b345", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -62,6 +62,7 @@ mod non_ascii_idents;\n mod non_fmt_panic;\n mod nonstandard_style;\n mod noop_method_call;\n+mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n@@ -93,6 +94,7 @@ use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n use noop_method_call::*;\n+use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n use traits::*;\n@@ -223,6 +225,7 @@ macro_rules! late_lint_mod_passes {\n                 EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n                 NamedAsmLabels: NamedAsmLabels,\n+                OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             ]\n         );\n     };"}, {"sha": "9a62afd3cafb78488d19001cbd56aa82ccf700af", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -1,5 +1,4 @@\n use crate::context::LintContext;\n-use crate::rustc_middle::ty::TypeVisitable;\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_errors::fluent;\n@@ -46,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n-        let (trait_id, did) = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n+        let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n             // Verify we are dealing with a method/associated function.\n             Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n                 // Check that we're dealing with a trait method for one of the traits we care about.\n@@ -56,21 +55,17 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                         Some(sym::Borrow | sym::Clone | sym::Deref)\n                     ) =>\n                 {\n-                    (trait_id, did)\n+                    did\n                 }\n                 _ => return,\n             },\n             _ => return,\n         };\n-        let substs = cx.typeck_results().node_substs(expr.hir_id);\n-        if substs.needs_subst() {\n-            // We can't resolve on types that require monomorphization, so we don't handle them if\n-            // we need to perform substitution.\n-            return;\n-        }\n-        let param_env = cx.tcx.param_env(trait_id);\n+        let substs = cx\n+            .tcx\n+            .normalize_erasing_regions(cx.param_env, cx.typeck_results().node_substs(expr.hir_id));\n         // Resolve the trait method instance.\n-        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) else {\n+        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, cx.param_env, did, substs) else {\n             return\n         };\n         // (Re)check that it implements the noop diagnostic."}, {"sha": "d8ce20db37ce9cfe462335b92d6520a11ef9094a", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,156 @@\n+use rustc_hir as hir;\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_macros::LintDiagnostic;\n+use rustc_middle::ty::{self, fold::BottomUpFolder, Ty, TypeFoldable};\n+use rustc_span::Span;\n+use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `opaque_hidden_inferred_bound` lint detects cases in which nested\n+    /// `impl Trait` in associated type bounds are not written generally enough\n+    /// to satisfy the bounds of the associated type.\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This functionality was removed in #97346, but then rolled back in #99860\n+    /// because it caused regressions.\n+    ///\n+    /// We plan on reintroducing this as a hard error, but in the mean time,\n+    /// this lint serves to warn and suggest fixes for any use-cases which rely\n+    /// on this behavior.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// trait Trait {\n+    ///     type Assoc: Send;\n+    /// }\n+    ///\n+    /// struct Struct;\n+    ///\n+    /// impl Trait for Struct {\n+    ///     type Assoc = i32;\n+    /// }\n+    ///\n+    /// fn test() -> impl Trait<Assoc = impl Sized> {\n+    ///     Struct\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// In this example, `test` declares that the associated type `Assoc` for\n+    /// `impl Trait` is `impl Sized`, which does not satisfy the `Send` bound\n+    /// on the associated type.\n+    ///\n+    /// Although the hidden type, `i32` does satisfy this bound, we do not\n+    /// consider the return type to be well-formed with this lint. It can be\n+    /// fixed by changing `impl Sized` into `impl Sized + Send`.\n+    pub OPAQUE_HIDDEN_INFERRED_BOUND,\n+    Warn,\n+    \"detects the use of nested `impl Trait` types in associated type bounds that are not general enough\"\n+}\n+\n+declare_lint_pass!(OpaqueHiddenInferredBound => [OPAQUE_HIDDEN_INFERRED_BOUND]);\n+\n+impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        let hir::ItemKind::OpaqueTy(_) = &item.kind else { return; };\n+        let def_id = item.def_id.def_id.to_def_id();\n+        cx.tcx.infer_ctxt().enter(|ref infcx| {\n+            // For every projection predicate in the opaque type's explicit bounds,\n+            // check that the type that we're assigning actually satisfies the bounds\n+            // of the associated type.\n+            for &(pred, pred_span) in cx.tcx.explicit_item_bounds(def_id) {\n+                // Liberate bound regions in the predicate since we\n+                // don't actually care about lifetimes in this check.\n+                let predicate = cx.tcx.liberate_late_bound_regions(\n+                    def_id,\n+                    pred.kind(),\n+                );\n+                let ty::PredicateKind::Projection(proj) = predicate else {\n+                    continue;\n+                };\n+                // Only check types, since those are the only things that may\n+                // have opaques in them anyways.\n+                let Some(proj_term) = proj.term.ty() else { continue };\n+\n+                let proj_ty =\n+                    cx\n+                    .tcx\n+                    .mk_projection(proj.projection_ty.item_def_id, proj.projection_ty.substs);\n+                // For every instance of the projection type in the bounds,\n+                // replace them with the term we're assigning to the associated\n+                // type in our opaque type.\n+                let proj_replacer = &mut BottomUpFolder {\n+                    tcx: cx.tcx,\n+                    ty_op: |ty| if ty == proj_ty { proj_term } else { ty },\n+                    lt_op: |lt| lt,\n+                    ct_op: |ct| ct,\n+                };\n+                // For example, in `impl Trait<Assoc = impl Send>`, for all of the bounds on `Assoc`,\n+                // e.g. `type Assoc: OtherTrait`, replace `<impl Trait as Trait>::Assoc: OtherTrait`\n+                // with `impl Send: OtherTrait`.\n+                for assoc_pred_and_span in cx\n+                    .tcx\n+                    .bound_explicit_item_bounds(proj.projection_ty.item_def_id)\n+                    .transpose_iter()\n+                {\n+                    let assoc_pred_span = assoc_pred_and_span.0.1;\n+                    let assoc_pred = assoc_pred_and_span\n+                        .map_bound(|(pred, _)| *pred)\n+                        .subst(cx.tcx, &proj.projection_ty.substs)\n+                        .fold_with(proj_replacer);\n+                    let Ok(assoc_pred) = traits::fully_normalize(infcx, traits::ObligationCause::dummy(), cx.param_env, assoc_pred) else {\n+                        continue;\n+                    };\n+                    // If that predicate doesn't hold modulo regions (but passed during type-check),\n+                    // then we must've taken advantage of the hack in `project_and_unify_types` where\n+                    // we replace opaques with inference vars. Emit a warning!\n+                    if !infcx.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                        traits::ObligationCause::dummy(),\n+                        cx.param_env,\n+                        assoc_pred,\n+                    )) {\n+                        // If it's a trait bound and an opaque that doesn't satisfy it,\n+                        // then we can emit a suggestion to add the bound.\n+                        let (suggestion, suggest_span) =\n+                            match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n+                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => (\n+                                    format!(\" + {}\", trait_pred.print_modifiers_and_trait_path()),\n+                                    Some(cx.tcx.def_span(def_id).shrink_to_hi()),\n+                                ),\n+                                _ => (String::new(), None),\n+                            };\n+                        cx.emit_spanned_lint(\n+                            OPAQUE_HIDDEN_INFERRED_BOUND,\n+                            pred_span,\n+                            OpaqueHiddenInferredBoundLint {\n+                                ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n+                                proj_ty: proj_term,\n+                                assoc_pred_span,\n+                                suggestion,\n+                                suggest_span,\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n+        });\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint::opaque_hidden_inferred_bound)]\n+struct OpaqueHiddenInferredBoundLint<'tcx> {\n+    ty: Ty<'tcx>,\n+    proj_ty: Ty<'tcx>,\n+    #[label(lint::specifically)]\n+    assoc_pred_span: Span,\n+    #[suggestion_verbose(applicability = \"machine-applicable\", code = \"{suggestion}\")]\n+    suggest_span: Option<Span>,\n+    suggestion: String,\n+}"}, {"sha": "d95c5cbd654cb1a48ec7920b5e19a17a7bb1d345", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -446,7 +446,9 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     match expn_data.kind {\n         ExpnKind::Inlined\n         | ExpnKind::Root\n-        | ExpnKind::Desugaring(DesugaringKind::ForLoop | DesugaringKind::WhileLoop) => false,\n+        | ExpnKind::Desugaring(\n+            DesugaringKind::ForLoop | DesugaringKind::WhileLoop | DesugaringKind::OpaqueTy,\n+        ) => false,\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro."}, {"sha": "87d61deb1eb2f9e2a7a2e6c55e63518a8866fb26", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -55,6 +55,9 @@\n //! This is handled by the [`InPlaceDrop`] guard for sink items (`U`) and by\n //! [`vec::IntoIter::forget_allocation_drop_remaining()`] for remaining source items (`T`).\n //!\n+//! If dropping any remaining source item (`T`) panics then [`InPlaceDstBufDrop`] will handle dropping\n+//! the already collected sink items (`U`) and freeing the allocation.\n+//!\n //! [`vec::IntoIter::forget_allocation_drop_remaining()`]: super::IntoIter::forget_allocation_drop_remaining()\n //!\n //! # O(1) collect\n@@ -138,7 +141,7 @@ use core::iter::{InPlaceIterable, SourceIter, TrustedRandomAccessNoCoerce};\n use core::mem::{self, ManuallyDrop, SizedTypeProperties};\n use core::ptr::{self};\n \n-use super::{InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n+use super::{InPlaceDrop, InPlaceDstBufDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n@@ -191,14 +194,17 @@ where\n             );\n         }\n \n-        // Drop any remaining values at the tail of the source but prevent drop of the allocation\n-        // itself once IntoIter goes out of scope.\n-        // If the drop panics then we also leak any elements collected into dst_buf.\n+        // The ownership of the allocation and the new `T` values is temporarily moved into `dst_guard`.\n+        // This is safe because `forget_allocation_drop_remaining` immediately forgets the allocation\n+        // before any panic can occur in order to avoid any double free, and then proceeds to drop\n+        // any remaining values at the tail of the source.\n         //\n         // Note: This access to the source wouldn't be allowed by the TrustedRandomIteratorNoCoerce\n         // contract (used by SpecInPlaceCollect below). But see the \"O(1) collect\" section in the\n         // module documenttation why this is ok anyway.\n+        let dst_guard = InPlaceDstBufDrop { ptr: dst_buf, len, cap };\n         src.forget_allocation_drop_remaining();\n+        mem::forget(dst_guard);\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n "}, {"sha": "25ca33c6a7bf0576921f249fcf48782663bf6c87", "filename": "library/alloc/src/vec/in_place_drop.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -22,3 +22,18 @@ impl<T> Drop for InPlaceDrop<T> {\n         }\n     }\n }\n+\n+// A helper struct for in-place collection that drops the destination allocation and elements,\n+// to avoid leaking them if some other destructor panics.\n+pub(super) struct InPlaceDstBufDrop<T> {\n+    pub(super) ptr: *mut T,\n+    pub(super) len: usize,\n+    pub(super) cap: usize,\n+}\n+\n+impl<T> Drop for InPlaceDstBufDrop<T> {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { super::Vec::from_raw_parts(self.ptr, self.len, self.cap) };\n+    }\n+}"}, {"sha": "73d7c90cf78ec5f4008eaaa0083447a5c0d8fdf9", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -95,13 +95,16 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     }\n \n     /// Drops remaining elements and relinquishes the backing allocation.\n+    /// This method guarantees it won't panic before relinquishing\n+    /// the backing allocation.\n     ///\n     /// This is roughly equivalent to the following, but more efficient\n     ///\n     /// ```\n     /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();\n+    /// let mut into_iter = std::mem::replace(&mut into_iter, Vec::new().into_iter());\n     /// (&mut into_iter).for_each(core::mem::drop);\n-    /// unsafe { core::ptr::write(&mut into_iter, Vec::new().into_iter()); }\n+    /// std::mem::forget(into_iter);\n     /// ```\n     ///\n     /// This method is used by in-place iteration, refer to the vec::in_place_collect\n@@ -118,6 +121,8 @@ impl<T, A: Allocator> IntoIter<T, A> {\n         self.ptr = self.buf.as_ptr();\n         self.end = self.buf.as_ptr();\n \n+        // Dropping the remaining elements can panic, so this needs to be\n+        // done only after updating the other fields.\n         unsafe {\n             ptr::drop_in_place(remaining);\n         }"}, {"sha": "0332047e6b688538d26cafa50666f65c06485ff6", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -125,7 +125,7 @@ use self::set_len_on_drop::SetLenOnDrop;\n mod set_len_on_drop;\n \n #[cfg(not(no_global_oom_handling))]\n-use self::in_place_drop::InPlaceDrop;\n+use self::in_place_drop::{InPlaceDrop, InPlaceDstBufDrop};\n \n #[cfg(not(no_global_oom_handling))]\n mod in_place_drop;"}, {"sha": "e0271187044782cb30da6d6b30c57365827fdd23", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -1191,48 +1191,53 @@ fn test_from_iter_specialization_panic_during_iteration_drops() {\n }\n \n #[test]\n-fn test_from_iter_specialization_panic_during_drop_leaks() {\n-    static mut DROP_COUNTER: usize = 0;\n+fn test_from_iter_specialization_panic_during_drop_doesnt_leak() {\n+    static mut DROP_COUNTER_OLD: [usize; 5] = [0; 5];\n+    static mut DROP_COUNTER_NEW: [usize; 2] = [0; 2];\n \n     #[derive(Debug)]\n-    enum Droppable {\n-        DroppedTwice(Box<i32>),\n-        PanicOnDrop,\n-    }\n+    struct Old(usize);\n \n-    impl Drop for Droppable {\n+    impl Drop for Old {\n         fn drop(&mut self) {\n-            match self {\n-                Droppable::DroppedTwice(_) => {\n-                    unsafe {\n-                        DROP_COUNTER += 1;\n-                    }\n-                    println!(\"Dropping!\")\n-                }\n-                Droppable::PanicOnDrop => {\n-                    if !std::thread::panicking() {\n-                        panic!();\n-                    }\n-                }\n+            unsafe {\n+                DROP_COUNTER_OLD[self.0] += 1;\n+            }\n+\n+            if self.0 == 3 {\n+                panic!();\n             }\n+\n+            println!(\"Dropped Old: {}\", self.0);\n         }\n     }\n \n-    let mut to_free: *mut Droppable = core::ptr::null_mut();\n-    let mut cap = 0;\n+    #[derive(Debug)]\n+    struct New(usize);\n+\n+    impl Drop for New {\n+        fn drop(&mut self) {\n+            unsafe {\n+                DROP_COUNTER_NEW[self.0] += 1;\n+            }\n+\n+            println!(\"Dropped New: {}\", self.0);\n+        }\n+    }\n \n     let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n-        let mut v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n-        to_free = v.as_mut_ptr();\n-        cap = v.capacity();\n-        let _ = v.into_iter().take(0).collect::<Vec<_>>();\n+        let v = vec![Old(0), Old(1), Old(2), Old(3), Old(4)];\n+        let _ = v.into_iter().map(|x| New(x.0)).take(2).collect::<Vec<_>>();\n     }));\n \n-    assert_eq!(unsafe { DROP_COUNTER }, 1);\n-    // clean up the leak to keep miri happy\n-    unsafe {\n-        drop(Vec::from_raw_parts(to_free, 0, cap));\n-    }\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[0] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[1] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[2] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[3] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[4] }, 1);\n+\n+    assert_eq!(unsafe { DROP_COUNTER_NEW[0] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_NEW[1] }, 1);\n }\n \n // regression test for issue #85322. Peekable previously implemented InPlaceIterable,"}, {"sha": "a07b63fb62b9023a70bca9c419d1890c4124aa86", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -24,6 +24,30 @@ impl<T> Future for Ready<T> {\n     }\n }\n \n+impl<T> Ready<T> {\n+    /// Consumes the `Ready`, returning the wrapped value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Will panic if this [`Ready`] was already polled to completion.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ready_into_inner)]\n+    /// use std::future;\n+    ///\n+    /// let a = future::ready(1);\n+    /// assert_eq!(a.into_inner(), 1);\n+    /// ```\n+    #[unstable(feature = \"ready_into_inner\", issue = \"101196\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn into_inner(self) -> T {\n+        self.0.expect(\"Called `into_inner()` on `Ready` after completion\")\n+    }\n+}\n+\n /// Creates a future that is immediately ready with a value.\n ///\n /// Futures created through this function are functionally similar to those"}, {"sha": "14a38a760d2386d82913b59a2d49bbebcc6123f7", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -192,8 +192,11 @@ impl Translate for BufferEmitter {\n impl Emitter for BufferEmitter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut buffer = self.buffer.borrow_mut();\n-        // FIXME(davidtwco): need to support translation here eventually\n-        buffer.messages.push(format!(\"error from rustc: {}\", diag.message[0].0.expect_str()));\n+\n+        let fluent_args = self.to_fluent_args(diag.args());\n+        let translated_main_message = self.translate_message(&diag.message[0].0, &fluent_args);\n+\n+        buffer.messages.push(format!(\"error from rustc: {}\", translated_main_message));\n         if diag.is_error() {\n             buffer.has_errors = true;\n         }"}, {"sha": "acb2a6f084f233aabf69e19cab139fad0f32cb7c", "filename": "src/test/rustdoc-ui/invalid-syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -99,3 +99,9 @@ pub fn indent_after_fenced() {}\n /// ```\n pub fn invalid() {}\n //~^^^^ WARNING could not parse code block as Rust code\n+\n+/// ```\n+/// fn wook_at_my_beautifuw_bwaces_plz() {);\n+/// ```\n+pub fn uwu() {}\n+//~^^^^ WARNING could not parse code block as Rust code"}, {"sha": "597d19e748cb7a1836ec4e8f2f961d0b08b02ee4", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -150,5 +150,20 @@ help: mark blocks that do not contain Rust code as text\n LL | /// ```text\n    |        ++++\n \n-warning: 12 warnings emitted\n+warning: could not parse code block as Rust code\n+  --> $DIR/invalid-syntax.rs:103:5\n+   |\n+LL |   /// ```\n+   |  _____^\n+LL | | /// fn wook_at_my_beautifuw_bwaces_plz() {);\n+LL | | /// ```\n+   | |_______^\n+   |\n+   = note: error from rustc: mismatched closing delimiter: `)`\n+help: mark blocks that do not contain Rust code as text\n+   |\n+LL | /// ```text\n+   |        ++++\n+\n+warning: 13 warnings emitted\n "}, {"sha": "66d15cf1215dadf7898b08515e657f6df3d67e05", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-102074.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// Checks that the NoopMethodCall lint doesn't call Instance::resolve on unresolved consts\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128CipherKey([u8; Aes128Cipher::KEY_LEN]);\n+\n+impl Aes128CipherKey {\n+    pub fn new(key: &[u8; Aes128Cipher::KEY_LEN]) -> Self {\n+        Self(key.clone())\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128Cipher;\n+\n+impl Aes128Cipher {\n+    const KEY_LEN: usize = 16;\n+}\n+\n+fn main() {}"}, {"sha": "523a9d7ac72045b5d758cd707f5f3a41dafabb79", "filename": "src/test/ui/const_prop/issue-102553.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+\n+pub trait Widget<E> {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w;\n+}\n+\n+pub trait WidgetDyn<E> {}\n+\n+impl<T, E> WidgetDyn<E> for T where T: Widget<E> {}\n+\n+impl<E> Widget<E> for dyn WidgetDyn<E> + '_ {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w,\n+    {\n+        // Even though this is illegal to const evaluate, this should never\n+        // trigger an ICE because it can never be called from actual code\n+        // (due to the trivially false where-clause predicate).\n+        Box::new(self)\n+    }\n+}"}, {"sha": "089018a1cdf0106497c33188f7fe7c7452250046", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -26,6 +26,7 @@ type Sendable = impl Send;\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, but if its hidden type does.\n fn foo() -> impl Trait<Assoc = Sendable> {\n+    //~^ WARN opaque type `impl Trait<Assoc = Sendable>` does not satisfy its associated type bounds\n     || 42\n }\n "}, {"sha": "a8eb69cfcb736cd80b1d727bcd97f6d28a96ec88", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `impl Trait<Assoc = Sendable>` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type2-tait.rs:28:24\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `Sendable`\n+...\n+LL | fn foo() -> impl Trait<Assoc = Sendable> {\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | type Sendable = impl Send + Duh;\n+   |                           +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cc1f1f4ec44c895ee50f4e423b9733ed28f66a6d", "filename": "src/test/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -23,6 +23,7 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // Lazy TAIT would error out, but we inserted a hack to make it work again,\n // keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n+    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     || 42\n }\n "}, {"sha": "3aed05ca1329883e3661b6ac6ac0a81624e7381e", "filename": "src/test/ui/impl-trait/nested-return-type2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type2.rs:25:24\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `impl Send`\n+...\n+LL | fn foo() -> impl Trait<Assoc = impl Send> {\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n+   |                                          +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3a97e35b4c400b705e4a383c82d4ceca09d3dd37", "filename": "src/test/ui/impl-trait/nested-return-type3-tait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -17,6 +17,7 @@ impl<F: Duh> Trait for F {\n type Sendable = impl Send;\n \n fn foo() -> impl Trait<Assoc = Sendable> {\n+    //~^ WARN opaque type `impl Trait<Assoc = Sendable>` does not satisfy its associated type bounds\n     42\n }\n "}, {"sha": "5f58c8dca4ad4a7c94289acb866498bc503fc81a", "filename": "src/test/ui/impl-trait/nested-return-type3-tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `impl Trait<Assoc = Sendable>` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type3-tait.rs:19:24\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `Sendable`\n+...\n+LL | fn foo() -> impl Trait<Assoc = Sendable> {\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | type Sendable = impl Send + Duh;\n+   |                           +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5b6f78a9896876d07fd344b220525cc82205b57b", "filename": "src/test/ui/impl-trait/nested-return-type3-tait2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -16,6 +16,7 @@ impl<F: Duh> Trait for F {\n \n type Sendable = impl Send;\n type Traitable = impl Trait<Assoc = Sendable>;\n+//~^ WARN opaque type `Traitable` does not satisfy its associated type bounds\n \n fn foo() -> Traitable {\n     42"}, {"sha": "c07f6ead750282fa1169ef975432304bbc750ae2", "filename": "src/test/ui/impl-trait/nested-return-type3-tait2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `Traitable` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type3-tait2.rs:18:29\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `Sendable`\n+...\n+LL | type Traitable = impl Trait<Assoc = Sendable>;\n+   |                             ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | type Sendable = impl Send + Duh;\n+   |                           +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "394d8f581102f9da70342586db40fdf4bcbbe489", "filename": "src/test/ui/impl-trait/nested-return-type3-tait3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -15,6 +15,7 @@ impl<F: Duh> Trait for F {\n }\n \n type Traitable = impl Trait<Assoc = impl Send>;\n+//~^ WARN opaque type `Traitable` does not satisfy its associated type bounds\n \n fn foo() -> Traitable {\n     42"}, {"sha": "d98ad89222fa7eb9ae4d05c264b56b1ebaf35266", "filename": "src/test/ui/impl-trait/nested-return-type3-tait3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `Traitable` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type3-tait3.rs:17:29\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `impl Send`\n+...\n+LL | type Traitable = impl Trait<Assoc = impl Send>;\n+   |                             ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | type Traitable = impl Trait<Assoc = impl Send + Duh>;\n+   |                                               +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5a764fc4c285a697cde2a553832f40edf3e51ff2", "filename": "src/test/ui/impl-trait/nested-return-type3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -13,6 +13,7 @@ impl<F: Duh> Trait for F {\n }\n \n fn foo() -> impl Trait<Assoc = impl Send> {\n+    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     42\n }\n "}, {"sha": "632de71aa4c880246ad942242eae3b6ab01f4beb", "filename": "src/test/ui/impl-trait/nested-return-type3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -0,0 +1,17 @@\n+warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n+  --> $DIR/nested-return-type3.rs:15:24\n+   |\n+LL |     type Assoc: Duh;\n+   |                 --- this associated type bound is unsatisfied for `impl Send`\n+...\n+LL | fn foo() -> impl Trait<Assoc = impl Send> {\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n+help: add this bound\n+   |\n+LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n+   |                                          +++++\n+\n+warning: 1 warning emitted\n+"}, {"sha": "89b296635954204a1cbcec15cf5c01093caaee5c", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -46,6 +46,7 @@ fn main() {\n \n fn generic<T>(non_clone_type: &PlainType<T>) {\n     non_clone_type.clone();\n+    //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n }\n \n fn non_generic(non_clone_type: &PlainType<u32>) {"}, {"sha": "6a904d01abc8e92fc8683abfff27662ad574a7c8", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -28,12 +28,20 @@ LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n    = note: the type `&PlainType<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n \n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:52:19\n+  --> $DIR/noop-method-call.rs:48:19\n+   |\n+LL |     non_clone_type.clone();\n+   |                   ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&PlainType<T>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+\n+warning: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/noop-method-call.rs:53:19\n    |\n LL |     non_clone_type.clone();\n    |                   ^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 4 warnings emitted\n+warning: 5 warnings emitted\n "}]}