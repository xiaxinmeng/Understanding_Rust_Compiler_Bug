{"sha": "e1bd0e7b4e9009ada545580b2698a11631f1f597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYmQwZTdiNGU5MDA5YWRhNTQ1NTgwYjI2OThhMTE2MzFmMWY1OTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-06T13:31:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-09T17:50:43Z"}, "message": "Reduce code duplication in Once", "tree": {"sha": "70bc9475b5d60ac8235a329515cd00c900b3e000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70bc9475b5d60ac8235a329515cd00c900b3e000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1bd0e7b4e9009ada545580b2698a11631f1f597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1bd0e7b4e9009ada545580b2698a11631f1f597", "html_url": "https://github.com/rust-lang/rust/commit/e1bd0e7b4e9009ada545580b2698a11631f1f597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1bd0e7b4e9009ada545580b2698a11631f1f597/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aba6f9184e0e738664c219c58feadb70f967f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aba6f9184e0e738664c219c58feadb70f967f33", "html_url": "https://github.com/rust-lang/rust/commit/6aba6f9184e0e738664c219c58feadb70f967f33"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "c788ff3ca6309f2c66cb7d108929ef4e7d2d9275", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e1bd0e7b4e9009ada545580b2698a11631f1f597/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1bd0e7b4e9009ada545580b2698a11631f1f597/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=e1bd0e7b4e9009ada545580b2698a11631f1f597", "patch": "@@ -219,13 +219,9 @@ impl Once {\n     /// [poison]: struct.Mutex.html#poisoning\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn call_once<F>(&self, f: F) where F: FnOnce() {\n-        // Fast path, just see if we've completed initialization.\n-        // An `Acquire` load is enough because that makes all the initialization\n-        // operations visible to us. The cold path uses SeqCst consistently\n-        // because the performance difference really does not matter there,\n-        // and SeqCst minimizes the chances of something going wrong.\n-        if self.state.load(Ordering::Acquire) == COMPLETE {\n-            return\n+        // Fast path check\n+        if self.is_completed() {\n+            return;\n         }\n \n         let mut f = Some(f);\n@@ -280,13 +276,9 @@ impl Once {\n     /// ```\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn call_once_force<F>(&self, f: F) where F: FnOnce(&OnceState) {\n-        // same as above, just with a different parameter to `call_inner`.\n-        // An `Acquire` load is enough because that makes all the initialization\n-        // operations visible to us. The cold path uses SeqCst consistently\n-        // because the performance difference really does not matter there,\n-        // and SeqCst minimizes the chances of something going wrong.\n-        if self.state.load(Ordering::Acquire) == COMPLETE {\n-            return\n+        // Fast path check\n+        if self.is_completed() {\n+            return;\n         }\n \n         let mut f = Some(f);\n@@ -302,6 +294,10 @@ impl Once {\n     ///   * `call_once` was called, but has not yet completed,\n     ///   * the `Once` instance is poisoned\n     ///\n+    /// It is also possible that immediately after `is_completed`\n+    /// returns false, some other thread finishes executing\n+    /// `call_once`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -333,6 +329,10 @@ impl Once {\n     /// ```\n     #[unstable(feature = \"once_is_completed\", issue = \"42\")]\n     pub fn is_completed(&self) -> bool {\n+        // An `Acquire` load is enough because that makes all the initialization\n+        // operations visible to us, and, this being a fast path, weaker\n+        // ordering helps with performance. This `Acquire` synchronizes with\n+        // `SeqCst` operations on the slow path.\n         self.state.load(Ordering::Acquire) == COMPLETE\n     }\n \n@@ -351,6 +351,10 @@ impl Once {\n     fn call_inner(&self,\n                   ignore_poisoning: bool,\n                   init: &mut dyn FnMut(bool)) {\n+\n+        // This cold path uses SeqCst consistently because the\n+        // performance difference really does not matter there, and\n+        // SeqCst minimizes the chances of something going wrong.\n         let mut state = self.state.load(Ordering::SeqCst);\n \n         'outer: loop {"}]}