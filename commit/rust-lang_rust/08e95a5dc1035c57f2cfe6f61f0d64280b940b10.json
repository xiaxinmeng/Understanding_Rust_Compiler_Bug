{"sha": "08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZTk1YTVkYzEwMzVjNTdmMmNmZTZmNjFmMGQ2NDI4MGI5NDBiMTA=", "commit": {"author": {"name": "GrayJack", "email": "gr41.j4ck@gmail.com", "date": "2020-10-26T18:20:33Z"}, "committer": {"name": "GrayJack", "email": "gr41.j4ck@gmail.com", "date": "2020-10-26T18:20:33Z"}, "message": "Fix case where non FnOnce variables is marked callable", "tree": {"sha": "6a132d4c6520941694d0ed5407038730ce18db45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a132d4c6520941694d0ed5407038730ce18db45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcp2lmfLVC4NXZ3mZEsVOBKq5kx4FAl+XE3EACgkQEsVOBKq5\nkx4iRg//Ryp+C0jrpHndnBvLC4LtpIxVFyWKe2lGfQkHFoOTehvJxNkZJulqX+1J\nO5KW63fL3DvXJSl5BdGggzlmateu6QXJQVOpLcAy1iRxfFqLG/d2jGnC/g89kv6n\n7pOlg8f9gRbvE2/cCATdQQbLtHllQiMg8ZpKeRcWh8raKOkHGL1zIs1y83RPhUFC\nMAHWnQ85c2DWjIG0CWFGvRaJeiCB78ve7r/JeW1zOsuaENFUb1ymuBQsnVpPuIWN\nfXW/d3N87ncOANXe4mmbIeNPfmRIIMeQXFJduQ+UhXr0GVKQW8rQoVjfbz+pJ+el\nb+V+MSlRFCYwNnD5ux8bEP0s8Ymi0iOcK88HU7I7JsT4IR59+PRiQuoceCJURajO\nfhbzGHyLfOM/K4+Kt4pbXTgiBvZ5KKRIvHBdHLPnYKLVdz+iSMMt714QcoVMncFC\nSaLFe5U+lOnA9DBZRGHmS4PLPHPZAMjEAwyLTFT5UmJy6m5xqKKJnJ1YWChLToSn\n5qRLmJjPIO8cixF+2LkGLOv0vcf2RfQCgcT76FoceJScoK6agGbtVUN86EeF+5B6\nkCLEWNwsQqWUCkE+jGmE6JCl7Kxp8ie49T9id+c9pkmOviV+5yTMbYFbvvWj/DPQ\nhPYYQVRawR7yDnaPBIupz85+fMuGTNhEzOjFWLQIZ/iVwF1ZLo0=\n=W4V6\n-----END PGP SIGNATURE-----", "payload": "tree 6a132d4c6520941694d0ed5407038730ce18db45\nparent d01e412eb1572676a33ad145f3370a7157dbc9df\nauthor GrayJack <gr41.j4ck@gmail.com> 1603736433 -0300\ncommitter GrayJack <gr41.j4ck@gmail.com> 1603736433 -0300\n\nFix case where non FnOnce variables is marked callable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "html_url": "https://github.com/rust-lang/rust/commit/08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08e95a5dc1035c57f2cfe6f61f0d64280b940b10/comments", "author": {"login": "GrayJack", "id": 17973728, "node_id": "MDQ6VXNlcjE3OTczNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/17973728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrayJack", "html_url": "https://github.com/GrayJack", "followers_url": "https://api.github.com/users/GrayJack/followers", "following_url": "https://api.github.com/users/GrayJack/following{/other_user}", "gists_url": "https://api.github.com/users/GrayJack/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrayJack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrayJack/subscriptions", "organizations_url": "https://api.github.com/users/GrayJack/orgs", "repos_url": "https://api.github.com/users/GrayJack/repos", "events_url": "https://api.github.com/users/GrayJack/events{/privacy}", "received_events_url": "https://api.github.com/users/GrayJack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GrayJack", "id": 17973728, "node_id": "MDQ6VXNlcjE3OTczNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/17973728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrayJack", "html_url": "https://github.com/GrayJack", "followers_url": "https://api.github.com/users/GrayJack/followers", "following_url": "https://api.github.com/users/GrayJack/following{/other_user}", "gists_url": "https://api.github.com/users/GrayJack/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrayJack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrayJack/subscriptions", "organizations_url": "https://api.github.com/users/GrayJack/orgs", "repos_url": "https://api.github.com/users/GrayJack/repos", "events_url": "https://api.github.com/users/GrayJack/events{/privacy}", "received_events_url": "https://api.github.com/users/GrayJack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01e412eb1572676a33ad145f3370a7157dbc9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e412eb1572676a33ad145f3370a7157dbc9df", "html_url": "https://github.com/rust-lang/rust/commit/d01e412eb1572676a33ad145f3370a7157dbc9df"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "563145f921e7b66ff44cb92df17876938686677f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08e95a5dc1035c57f2cfe6f61f0d64280b940b10/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e95a5dc1035c57f2cfe6f61f0d64280b940b10/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "patch": "@@ -1398,7 +1398,7 @@ impl Type {\n         };\n \n         let canonical_ty = Canonical { value: self.ty.value.clone(), kinds: Arc::new([]) };\n-        method_resolution::implements_trait(\n+        method_resolution::implements_trait_unique(\n             &canonical_ty,\n             db,\n             self.ty.environment.clone(),"}, {"sha": "5a6f0c67fbb67e255632b297e44dca37bc2a55f7", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/08e95a5dc1035c57f2cfe6f61f0d64280b940b10/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e95a5dc1035c57f2cfe6f61f0d64280b940b10/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=08e95a5dc1035c57f2cfe6f61f0d64280b940b10", "patch": "@@ -740,6 +740,19 @@ pub fn implements_trait(\n     solution.is_some()\n }\n \n+pub fn implements_trait_unique(\n+    ty: &Canonical<Ty>,\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    trait_: TraitId,\n+) -> bool {\n+    let goal = generic_implements_goal(db, env, trait_, ty.clone());\n+    let solution = db.trait_solve(krate, goal);\n+\n+    matches!(solution, Some(crate::traits::Solution::Unique(_)))\n+}\n+\n /// This creates Substs for a trait with the given Self type and type variables\n /// for all other parameters, to query Chalk with it.\n fn generic_implements_goal("}]}