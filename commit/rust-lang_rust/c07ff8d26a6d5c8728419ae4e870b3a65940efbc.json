{"sha": "c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwN2ZmOGQyNmE2ZDVjODcyODQxOWFlNGU4NzBiM2E2NTk0MGVmYmM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-29T05:32:41Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:33Z"}, "message": "Add module `ext::placeholders` with  `placeholder()` and `PlaceholderExpander`.", "tree": {"sha": "c9e3784d05eafca8cff84c6ebbd6615d933fb9b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9e3784d05eafca8cff84c6ebbd6615d933fb9b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "html_url": "https://github.com/rust-lang/rust/commit/c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3ae576fa729e0465719f97aa7bb80c9721b446", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3ae576fa729e0465719f97aa7bb80c9721b446", "html_url": "https://github.com/rust-lang/rust/commit/7a3ae576fa729e0465719f97aa7bb80c9721b446"}], "stats": {"total": 221, "additions": 182, "deletions": 39}, "files": [{"sha": "c5fc149bb7e8b021d20a5264aca0ad4e613bbd5e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "patch": "@@ -12,8 +12,9 @@ use ast::{Block, Crate, Ident, Mac_, PatKind};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n+use ext::placeholders;\n use attr::{self, HasAttrs};\n-use codemap::{dummy_spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n+use codemap::{ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use syntax_pos::{self, Span, ExpnId};\n use config::StripUnconfigured;\n use ext::base::*;\n@@ -35,8 +36,8 @@ macro_rules! expansions {\n             $(.$fold:ident)*  $(lift .$fold_elt:ident)*,\n             $(.$visit:ident)* $(lift .$visit_elt:ident)*;)*) => {\n         #[derive(Copy, Clone)]\n-        enum ExpansionKind { OptExpr, $( $kind, )*  }\n-        enum Expansion { OptExpr(Option<P<ast::Expr>>), $( $kind($ty), )* }\n+        pub enum ExpansionKind { OptExpr, $( $kind, )*  }\n+        pub enum Expansion { OptExpr(Option<P<ast::Expr>>), $( $kind($ty), )* }\n \n         impl ExpansionKind {\n             fn name(self) -> &'static str {\n@@ -55,20 +56,20 @@ macro_rules! expansions {\n         }\n \n         impl Expansion {\n-            fn make_opt_expr(self) -> Option<P<ast::Expr>> {\n+            pub fn make_opt_expr(self) -> Option<P<ast::Expr>> {\n                 match self {\n                     Expansion::OptExpr(expr) => expr,\n                     _ => panic!(\"Expansion::make_* called on the wrong kind of expansion\"),\n                 }\n             }\n-            $( fn $make(self) -> $ty {\n+            $( pub fn $make(self) -> $ty {\n                 match self {\n                     Expansion::$kind(ast) => ast,\n                     _ => panic!(\"Expansion::make_* called on the wrong kind of expansion\"),\n                 }\n             } )*\n \n-            fn fold_with<F: Folder>(self, folder: &mut F) -> Self {\n+            pub fn fold_with<F: Folder>(self, folder: &mut F) -> Self {\n                 use self::Expansion::*;\n                 match self {\n                     OptExpr(expr) => OptExpr(expr.and_then(|expr| folder.fold_opt_expr(expr))),\n@@ -434,9 +435,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                 // If keep_macs is true, expands to a MacEager::items instead.\n                 if self.keep_macs {\n-                    Some(reconstruct_macro_rules(&def, &path))\n+                    Some(placeholders::reconstructed_macro_rules(&def, &path))\n                 } else {\n-                    Some(macro_scope_placeholder())\n+                    Some(placeholders::macro_scope_placeholder())\n                 }\n             }\n \n@@ -650,37 +651,6 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n }\n \n-fn macro_scope_placeholder() -> Expansion {\n-    Expansion::Items(SmallVector::one(P(ast::Item {\n-        ident: keywords::Invalid.ident(),\n-        attrs: Vec::new(),\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ItemKind::Mac(dummy_spanned(ast::Mac_ {\n-            path: ast::Path { span: syntax_pos::DUMMY_SP, global: false, segments: Vec::new() },\n-            tts: Vec::new(),\n-        })),\n-        vis: ast::Visibility::Inherited,\n-        span: syntax_pos::DUMMY_SP,\n-    })))\n-}\n-\n-fn reconstruct_macro_rules(def: &ast::MacroDef, path: &ast::Path) -> Expansion {\n-    Expansion::Items(SmallVector::one(P(ast::Item {\n-        ident: def.ident,\n-        attrs: def.attrs.clone(),\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ItemKind::Mac(ast::Mac {\n-            span: def.span,\n-            node: ast::Mac_ {\n-                path: path.clone(),\n-                tts: def.body.clone(),\n-            }\n-        }),\n-        vis: ast::Visibility::Inherited,\n-        span: def.span,\n-    })))\n-}\n-\n pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n     pub features: Option<&'feat Features>,"}, {"sha": "f1665bdde75107cb8b735ab886eea1ff8a28e823", "filename": "src/libsyntax/ext/placeholders.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "patch": "@@ -0,0 +1,172 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ast;\n+use codemap::{DUMMY_SP, dummy_spanned};\n+use ext::expand::{Expansion, ExpansionKind};\n+use fold::*;\n+use parse::token::keywords;\n+use ptr::P;\n+use util::small_vector::SmallVector;\n+\n+use std::collections::HashMap;\n+\n+pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n+    fn mac_placeholder() -> ast::Mac {\n+        dummy_spanned(ast::Mac_ {\n+            path: ast::Path { span: DUMMY_SP, global: false, segments: Vec::new() },\n+            tts: Vec::new(),\n+        })\n+    }\n+\n+    let ident = keywords::Invalid.ident();\n+    let attrs = Vec::new();\n+    let vis = ast::Visibility::Inherited;\n+    let span = DUMMY_SP;\n+    let expr_placeholder = || P(ast::Expr {\n+        id: id, span: span,\n+        attrs: ast::ThinVec::new(),\n+        node: ast::ExprKind::Mac(mac_placeholder()),\n+    });\n+\n+    match kind {\n+        ExpansionKind::Expr => Expansion::Expr(expr_placeholder()),\n+        ExpansionKind::OptExpr => Expansion::OptExpr(Some(expr_placeholder())),\n+        ExpansionKind::Items => Expansion::Items(SmallVector::one(P(ast::Item {\n+            id: id, span: span, ident: ident, vis: vis, attrs: attrs,\n+            node: ast::ItemKind::Mac(mac_placeholder()),\n+        }))),\n+        ExpansionKind::TraitItems => Expansion::TraitItems(SmallVector::one(ast::TraitItem {\n+            id: id, span: span, ident: ident, attrs: attrs,\n+            node: ast::TraitItemKind::Macro(mac_placeholder()),\n+        })),\n+        ExpansionKind::ImplItems => Expansion::ImplItems(SmallVector::one(ast::ImplItem {\n+            id: id, span: span, ident: ident, vis: vis, attrs: attrs,\n+            node: ast::ImplItemKind::Macro(mac_placeholder()),\n+            defaultness: ast::Defaultness::Final,\n+        })),\n+        ExpansionKind::Pat => Expansion::Pat(P(ast::Pat {\n+            id: id, span: span, node: ast::PatKind::Mac(mac_placeholder()),\n+        })),\n+        ExpansionKind::Ty => Expansion::Ty(P(ast::Ty {\n+            id: id, span: span, node: ast::TyKind::Mac(mac_placeholder()),\n+        })),\n+        ExpansionKind::Stmts => Expansion::Stmts(SmallVector::one({\n+            let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ast::ThinVec::new()));\n+            ast::Stmt { id: id, span: span, node: ast::StmtKind::Mac(mac) }\n+        })),\n+    }\n+}\n+\n+pub fn macro_scope_placeholder() -> Expansion {\n+    placeholder(ExpansionKind::Items, ast::DUMMY_NODE_ID)\n+}\n+\n+pub struct PlaceholderExpander {\n+    expansions: HashMap<ast::NodeId, Expansion>,\n+}\n+\n+impl PlaceholderExpander {\n+    pub fn new(expansions: HashMap<ast::NodeId, Expansion>) -> Self {\n+        PlaceholderExpander {\n+            expansions: expansions,\n+        }\n+    }\n+\n+    pub fn remove(&mut self, id: ast::NodeId) -> Expansion {\n+        let expansion = self.expansions.remove(&id).unwrap();\n+        expansion.fold_with(self)\n+    }\n+}\n+\n+impl Folder for PlaceholderExpander {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        match item.node {\n+            // Scope placeholder\n+            ast::ItemKind::Mac(_) if item.id == ast::DUMMY_NODE_ID => SmallVector::one(item),\n+            ast::ItemKind::Mac(_) => self.remove(item.id).make_items(),\n+            _ => noop_fold_item(item, self),\n+        }\n+    }\n+\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n+        match item.node {\n+            ast::TraitItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n+            _ => noop_fold_trait_item(item, self),\n+        }\n+    }\n+\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n+        match item.node {\n+            ast::ImplItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n+            _ => noop_fold_impl_item(item, self),\n+        }\n+    }\n+\n+    fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n+        match expr.node {\n+            ast::ExprKind::Mac(_) => self.remove(expr.id).make_expr(),\n+            _ => expr.map(|expr| noop_fold_expr(expr, self)),\n+        }\n+    }\n+\n+    fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n+        match expr.node {\n+            ast::ExprKind::Mac(_) => self.remove(expr.id).make_opt_expr(),\n+            _ => noop_fold_opt_expr(expr, self),\n+        }\n+    }\n+\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n+        let (style, mut expansion) = match stmt.node {\n+            ast::StmtKind::Mac(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n+            _ => return noop_fold_stmt(stmt, self),\n+        };\n+\n+        if style == ast::MacStmtStyle::Semicolon {\n+            if let Some(stmt) = expansion.pop() {\n+                expansion.push(stmt.add_trailing_semicolon());\n+            }\n+        }\n+\n+        expansion\n+    }\n+\n+    fn fold_pat(&mut self, pat: P<ast::Pat>) -> P<ast::Pat> {\n+        match pat.node {\n+            ast::PatKind::Mac(_) => self.remove(pat.id).make_pat(),\n+            _ => noop_fold_pat(pat, self),\n+        }\n+    }\n+\n+    fn fold_ty(&mut self, ty: P<ast::Ty>) -> P<ast::Ty> {\n+        match ty.node {\n+            ast::TyKind::Mac(_) => self.remove(ty.id).make_ty(),\n+            _ => noop_fold_ty(ty, self),\n+        }\n+    }\n+}\n+\n+pub fn reconstructed_macro_rules(def: &ast::MacroDef, path: &ast::Path) -> Expansion {\n+    Expansion::Items(SmallVector::one(P(ast::Item {\n+        ident: def.ident,\n+        attrs: def.attrs.clone(),\n+        id: ast::DUMMY_NODE_ID,\n+        node: ast::ItemKind::Mac(ast::Mac {\n+            span: def.span,\n+            node: ast::Mac_ {\n+                path: path.clone(),\n+                tts: def.body.clone(),\n+            }\n+        }),\n+        vis: ast::Visibility::Inherited,\n+        span: def.span,\n+    })))\n+}"}, {"sha": "42201231247af6c5de0b9ef177094363444922dd", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07ff8d26a6d5c8728419ae4e870b3a65940efbc/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c07ff8d26a6d5c8728419ae4e870b3a65940efbc", "patch": "@@ -126,6 +126,7 @@ pub mod ext {\n     pub mod base;\n     pub mod build;\n     pub mod expand;\n+    pub mod placeholders;\n     pub mod hygiene;\n     pub mod proc_macro_shim;\n     pub mod quote;"}]}