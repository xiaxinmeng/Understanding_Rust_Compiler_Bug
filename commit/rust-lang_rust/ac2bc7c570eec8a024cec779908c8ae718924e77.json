{"sha": "ac2bc7c570eec8a024cec779908c8ae718924e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmJjN2M1NzBlZWM4YTAyNGNlYzc3OTkwOGM4YWU3MTg5MjRlNzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-20T07:17:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T15:53:08Z"}, "message": "Point to enclosing block/fn on nested unsafe\n\nWhen declaring nested unsafe blocks (`unsafe {unsafe {}}`) that trigger\nthe \"unnecessary `unsafe` block\" error, point out the enclosing `unsafe\nblock` or `unsafe fn` that makes it unnecessary.", "tree": {"sha": "de7703442b5dcda24e698257e3f640075f6b3159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7703442b5dcda24e698257e3f640075f6b3159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2bc7c570eec8a024cec779908c8ae718924e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2bc7c570eec8a024cec779908c8ae718924e77", "html_url": "https://github.com/rust-lang/rust/commit/ac2bc7c570eec8a024cec779908c8ae718924e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2bc7c570eec8a024cec779908c8ae718924e77/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "f9b7c68587678dea4a5f6a0edecbcfe8c5500583", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ac2bc7c570eec8a024cec779908c8ae718924e77", "patch": "@@ -189,11 +189,38 @@ impl LintPass for UnusedUnsafe {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedUnsafe {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+        /// Return the NodeId for an enclosing scope that is also `unsafe`\n+        fn is_enclosed(cx: &LateContext, id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n+            let parent_id = cx.tcx.hir.get_parent_node(id);\n+            if parent_id != id {\n+                if cx.tcx.used_unsafe.borrow().contains(&parent_id) {\n+                    Some((\"block\".to_string(), parent_id))\n+                } else if let Some(hir::map::NodeItem(&hir::Item {\n+                    node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n+                    ..\n+                })) = cx.tcx.hir.find(parent_id) {\n+                    Some((\"fn\".to_string(), parent_id))\n+                } else {\n+                    is_enclosed(cx, parent_id)\n+                }\n+            } else {\n+                None\n+            }\n+        }\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) &&\n                !cx.tcx.used_unsafe.borrow().contains(&blk.id) {\n-                cx.span_lint(UNUSED_UNSAFE, blk.span, \"unnecessary `unsafe` block\");\n+\n+                let mut db = cx.struct_span_lint(UNUSED_UNSAFE, blk.span,\n+                                                 \"unnecessary `unsafe` block\");\n+\n+                db.span_label(blk.span, &\"unnecessary `unsafe` block\");\n+                if let Some((kind, id)) = is_enclosed(cx, blk.id) {\n+                    db.span_note(cx.tcx.hir.span(id),\n+                                 &format!(\"because it's nested under this `unsafe` {}\", kind));\n+                }\n+                db.emit();\n             }\n         }\n     }"}, {"sha": "5c8e73e674751d109db04ffec9e4d657e0abae90", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=ac2bc7c570eec8a024cec779908c8ae718924e77", "previous_filename": "src/test/compile-fail/lint-unused-unsafe.rs"}, {"sha": "0df3fa43022a485c3c993512a3602d18a6263d00", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac2bc7c570eec8a024cec779908c8ae718924e77/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=ac2bc7c570eec8a024cec779908c8ae718924e77", "patch": "@@ -0,0 +1,116 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:26:13\n+   |\n+26 | fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-unused-unsafe.rs:14:9\n+   |\n+14 | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:27:13\n+   |\n+27 | fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:28:20\n+   |\n+28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+   |                    ^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:28:1\n+   |\n+28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:29:13\n+   |\n+29 | fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:30:20\n+   |\n+30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+   |                    ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:30:1\n+   |\n+30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:33:9\n+   |\n+33 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |  _________^ starting here...\n+34 | |             unsf()\n+35 | |         }\n+   | |_________^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:32:5\n+   |\n+32 |       unsafe {                             // don't put the warning here\n+   |  _____^ starting here...\n+33 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+34 | |             unsf()\n+35 | |         }\n+36 | |     }\n+   | |_____^ ...ending here\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:39:5\n+   |\n+39 |       unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+   |  _____^ starting here...\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+   | |_____^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:38:1\n+   |\n+38 |   unsafe fn bad7() {\n+   |  _^ starting here...\n+39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+44 | | }\n+   | |_^ ...ending here\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:40:9\n+   |\n+40 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |  _________^ starting here...\n+41 | |             unsf()\n+42 | |         }\n+   | |_________^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:38:1\n+   |\n+38 |   unsafe fn bad7() {\n+   |  _^ starting here...\n+39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+44 | | }\n+   | |_^ ...ending here\n+\n+error: aborting due to 8 previous errors\n+"}]}