{"sha": "287a4f8ab176a95cff2b82f6414d37e33809110a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4N2E0ZjhhYjE3NmE5NWNmZjJiODJmNjQxNGQzN2UzMzgwOTExMGE=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-21T15:48:16Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:14:20Z"}, "message": "Refactor empty loop to its own module", "tree": {"sha": "2a890939107eb4370deb75d9149732a46ab62c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a890939107eb4370deb75d9149732a46ab62c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287a4f8ab176a95cff2b82f6414d37e33809110a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287a4f8ab176a95cff2b82f6414d37e33809110a", "html_url": "https://github.com/rust-lang/rust/commit/287a4f8ab176a95cff2b82f6414d37e33809110a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287a4f8ab176a95cff2b82f6414d37e33809110a/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b657c0b7335ccb4a594af100ab49d8bd660e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b657c0b7335ccb4a594af100ab49d8bd660e97", "html_url": "https://github.com/rust-lang/rust/commit/d0b657c0b7335ccb4a594af100ab49d8bd660e97"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "fdc99e190e381ef6dbbb1908a14aa3e8cef2f504", "filename": "clippy_lints/src/loops/empty_loop.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/287a4f8ab176a95cff2b82f6414d37e33809110a/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287a4f8ab176a95cff2b82f6414d37e33809110a/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs?ref=287a4f8ab176a95cff2b82f6414d37e33809110a", "patch": "@@ -0,0 +1,17 @@\n+use super::EMPTY_LOOP;\n+use crate::utils::{is_in_panic_handler, is_no_std_crate, span_lint_and_help};\n+\n+use rustc_hir::{Block, Expr};\n+use rustc_lint::LateContext;\n+\n+pub(super) fn check_empty_loop(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n+    if loop_block.stmts.is_empty() && loop_block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n+        let msg = \"empty `loop {}` wastes CPU cycles\";\n+        let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+            \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n+        } else {\n+            \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\"\n+        };\n+        span_lint_and_help(cx, EMPTY_LOOP, expr.span, msg, None, help);\n+    }\n+}"}, {"sha": "d205f0536792e39f05237763497301f2c0f58ae8", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/287a4f8ab176a95cff2b82f6414d37e33809110a/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287a4f8ab176a95cff2b82f6414d37e33809110a/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=287a4f8ab176a95cff2b82f6414d37e33809110a", "patch": "@@ -1,3 +1,4 @@\n+mod empty_loop;\n mod explicit_counter_loop;\n mod for_loop_arg;\n mod for_loop_over_map_kv;\n@@ -14,10 +15,7 @@ mod utils;\n mod while_let_on_iterator;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    higher, is_in_panic_handler, is_no_std_crate, snippet_with_applicability, span_lint_and_help, span_lint_and_sugg,\n-    sugg,\n-};\n+use crate::utils::{higher, snippet_with_applicability, span_lint_and_sugg, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, LoopSource, MatchSource, Pat, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -565,15 +563,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         // (even if the \"match\" or \"if let\" is used for declaration)\n         if let ExprKind::Loop(ref block, _, LoopSource::Loop, _) = expr.kind {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n-            if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n-                let msg = \"empty `loop {}` wastes CPU cycles\";\n-                let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n-                    \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n-                } else {\n-                    \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\"\n-                };\n-                span_lint_and_help(cx, EMPTY_LOOP, expr.span, msg, None, help);\n-            }\n+            empty_loop::check_empty_loop(cx, expr, block);\n \n             // extract the expression from the first statement (if any) in a block\n             let inner_stmt_expr = extract_expr_from_first_stmt(block);"}]}