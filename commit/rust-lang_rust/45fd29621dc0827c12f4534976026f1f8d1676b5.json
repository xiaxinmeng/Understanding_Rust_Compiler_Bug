{"sha": "45fd29621dc0827c12f4534976026f1f8d1676b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmQyOTYyMWRjMDgyN2MxMmY0NTM0OTc2MDI2ZjFmOGQxNjc2YjU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-07T15:45:52Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-07T15:48:28Z"}, "message": "mark user-defined derefs as non-constant\n\nFixes #25901", "tree": {"sha": "158891561a83fa1f625b974c5b51fd0f366d1524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158891561a83fa1f625b974c5b51fd0f366d1524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fd29621dc0827c12f4534976026f1f8d1676b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd29621dc0827c12f4534976026f1f8d1676b5", "html_url": "https://github.com/rust-lang/rust/commit/45fd29621dc0827c12f4534976026f1f8d1676b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fd29621dc0827c12f4534976026f1f8d1676b5/comments", "author": null, "committer": null, "parents": [{"sha": "445824b29f5ee9a218f315f8cf56142f089e71d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/445824b29f5ee9a218f315f8cf56142f089e71d0", "html_url": "https://github.com/rust-lang/rust/commit/445824b29f5ee9a218f315f8cf56142f089e71d0"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "c329f2fb012db00519bc9b9e8452ce697c512cbe", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=45fd29621dc0827c12f4534976026f1f8d1676b5", "patch": "@@ -1237,5 +1237,6 @@ register_diagnostics! {\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n-    E0370  // discriminant overflow\n+    E0370, // discriminant overflow\n+    E0400  // overloaded derefs are not allowed in constants\n }"}, {"sha": "59f91a50f74212e92c9422a070f2550429ca3610", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=45fd29621dc0827c12f4534976026f1f8d1676b5", "patch": "@@ -405,6 +405,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n \n         let node_ty = self.tcx.node_id_to_type(ex.id);\n         check_expr(self, ex, node_ty);\n+        check_adjustments(self, ex);\n \n         // Special-case some expressions to avoid certain flags bubbling up.\n         match ex.node {\n@@ -777,6 +778,25 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n     }\n }\n \n+/// Check the adjustments of an expression\n+fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &ast::Expr) {\n+    match v.tcx.tables.borrow().adjustments.get(&e.id) {\n+        None | Some(&ty::AdjustReifyFnPointer) | Some(&ty::AdjustUnsafeFnPointer) => {}\n+        Some(&ty::AdjustDerefRef(ty::AutoDerefRef { autoderefs, .. })) => {\n+            if (0..autoderefs as u32).any(|autoderef| {\n+                    v.tcx.is_overloaded_autoderef(e.id, autoderef)\n+            }) {\n+                v.add_qualif(ConstQualif::NOT_CONST);\n+                if v.mode != Mode::Var {\n+                    span_err!(v.tcx.sess, e.span, E0400,\n+                              \"user-defined dereference operators are not allowed in {}s\",\n+                              v.msg());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n pub fn check_crate(tcx: &ty::ctxt) {\n     visit::walk_crate(&mut CheckCrateVisitor {\n         tcx: tcx,"}, {"sha": "3254f0b2aa9bdd1bd7544cb39da6bdbd18fb3b00", "filename": "src/test/compile-fail/issue-25901.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Ftest%2Fcompile-fail%2Fissue-25901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd29621dc0827c12f4534976026f1f8d1676b5/src%2Ftest%2Fcompile-fail%2Fissue-25901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25901.rs?ref=45fd29621dc0827c12f4534976026f1f8d1676b5", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A;\n+struct B;\n+\n+static S: &'static B = &A; //~ ERROR user-defined dereference operators\n+\n+use std::ops::Deref;\n+\n+impl Deref for A {\n+    type Target = B;\n+    fn deref(&self)->&B { static B_: B = B; &B_ }\n+}\n+\n+fn main(){}"}]}