{"sha": "c74f85f935189021345cbc0efdfcccb98047c29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGY4NWY5MzUxODkwMjEzNDVjYmMwZWZkZmNjY2I5ODA0N2MyOWU=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-09T10:42:11Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:16Z"}, "message": "Check only predicates with a single param with a concrete default.\n\nThis is the most conservative possible and should be always correct.", "tree": {"sha": "83a9a7f53a9f2a1f31faa075dfa970423cafd32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a9a7f53a9f2a1f31faa075dfa970423cafd32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74f85f935189021345cbc0efdfcccb98047c29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74f85f935189021345cbc0efdfcccb98047c29e", "html_url": "https://github.com/rust-lang/rust/commit/c74f85f935189021345cbc0efdfcccb98047c29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74f85f935189021345cbc0efdfcccb98047c29e/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "html_url": "https://github.com/rust-lang/rust/commit/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46"}], "stats": {"total": 150, "additions": 49, "deletions": 101}, "files": [{"sha": "258860d3d5e404deb844b8d673fc62c1c258fbee", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c74f85f935189021345cbc0efdfcccb98047c29e", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     fn check_trait(&mut self, item: &hir::Item) {\n         let trait_def_id = self.tcx.hir.local_def_id(item.id);\n         self.for_item(item).with_fcx(|fcx, _| {\n-            self.check_trait_where_clauses(fcx, item.span, trait_def_id);\n+            self.check_where_clauses(fcx, item.span, trait_def_id);\n             vec![]\n         });\n     }\n@@ -354,23 +354,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                        fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                        span: Span,\n                                        def_id: DefId) {\n-        self.inner_check_where_clauses(fcx, span, def_id, false)\n-    }\n-\n-    fn check_trait_where_clauses<'fcx, 'tcx>(&mut self,\n-                                       fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n-                                       span: Span,\n-                                       def_id: DefId) {\n-        self.inner_check_where_clauses(fcx, span, def_id, true)\n-    }\n-\n-    /// Checks where clauses and inline bounds that are declared on def_id.\n-    fn inner_check_where_clauses<'fcx, 'tcx>(&mut self,\n-                                       fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n-                                       span: Span,\n-                                       def_id: DefId,\n-                                       is_trait: bool)\n-    {\n         use ty::subst::Subst;\n         use rustc::ty::TypeFoldable;\n \n@@ -390,43 +373,50 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         }\n \n         // Check that trait predicates are WF when params are substituted by their defaults.\n-        // We don't want to overly constrain the predicates that may be written but we\n-        // want to catch obviously wrong cases such as `struct Foo<T: Copy = String>`\n-        // or cases where defaults don't work together such as:\n-        // `struct Foo<T = i32, U = u8> where T: into<U>`\n-        // Therefore we check if a predicate in which all type params are defaulted\n-        // is WF with those defaults simultaneously substituted.\n+        // We don't want to overly constrain the predicates that may be written but we want to\n+        // catch cases where a default my never be applied such as `struct Foo<T: Copy = String>`.\n+        // Therefore we check if a predicate which contains a single type param\n+        // with a concrete default is WF with that default substituted.\n         // For more examples see tests `defaults-well-formedness.rs` and `type-check-defaults.rs`.\n         //\n         // First we build the defaulted substitution.\n         let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n                 // All regions are identity.\n                 fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n             }, |def, _| {\n-                if !is_our_default(def) {\n-                    // We don't want to use non-defaulted params in a substitution, mark as err.\n-                    fcx.tcx.types.err\n-                } else  {\n-                    // Substitute with default.\n-                    fcx.tcx.type_of(def.def_id)\n+                // If the param has a default,\n+                if is_our_default(def) {\n+                    let default_ty = fcx.tcx.type_of(def.def_id);\n+                    // and it's not a dependent default\n+                    if !default_ty.needs_subst() {\n+                        // then substitute with the default.\n+                        return default_ty;\n+                    }\n                 }\n+                // Mark unwanted params as err.\n+                fcx.tcx.types.err\n             });\n         // Now we build the substituted predicates.\n         for &pred in predicates.predicates.iter() {\n+            struct CountParams { params: FxHashSet<u32> }\n+            impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+                    match t.sty {\n+                        ty::TyParam(p) => {\n+                            self.params.insert(p.idx);\n+                            t.super_visit_with(self)\n+                        }\n+                        _ => t.super_visit_with(self)\n+                    }\n+                }\n+            }\n+            let mut param_count = CountParams { params: FxHashSet() };\n+            pred.visit_with(&mut param_count);\n             let substituted_pred = pred.subst(fcx.tcx, substs);\n-            // If there is a non-defaulted param in the predicate, don't check it.\n-            if substituted_pred.references_error() {\n+            // Don't check non-defaulted params, dependent defaults or preds with multiple params.\n+            if substituted_pred.references_error() || param_count.params.len() > 1 {\n                 continue;\n             }\n-            // In trait defs, don't check `Self: Sized` when `Self` is the default.\n-            if let ty::Predicate::Trait(trait_pred) = substituted_pred {\n-                // `skip_binder()` is ok, we're only inspecting for `has_self_ty()`.\n-                let lhs_is_self = trait_pred.skip_binder().self_ty().has_self_ty();\n-                let pred_sized = Some(trait_pred.def_id()) == fcx.tcx.lang_items().sized_trait();\n-                if is_trait && lhs_is_self && pred_sized {\n-                    continue;\n-                }\n-            }\n             // Avoid duplication of predicates that contain no parameters, for example.\n             if !predicates.predicates.contains(&substituted_pred) {\n                 substituted_predicates.push(substituted_pred);"}, {"sha": "552665bac4e6c12afee08636b137109679ca0013", "filename": "src/test/run-pass/defaults-well-formedness.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs?ref=c74f85f935189021345cbc0efdfcccb98047c29e", "patch": "@@ -14,12 +14,15 @@ struct Foo<U, V=i32>(U, V) where U: Trait<V>;\n trait Marker {}\n struct TwoParams<T, U>(T, U);\n impl Marker for TwoParams<i32, i32> {}\n-// Check that defaults are substituted simultaneously.\n+\n+// Clauses with more than 1 param are not checked.\n struct IndividuallyBogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Marker;\n+struct BogusTogether<T = u32, U = i32>(T, U) where TwoParams<T, U>: Marker;\n // Clauses with non-defaulted params are not checked.\n struct NonDefaultedInClause<T, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Marker;\n struct DefaultedLhs<U, V=i32>(U, V) where V: Trait<U>;\n-// Dependent defaults.\n-struct Dependent<T: Copy, U = T>(T, U) where U: Copy;\n+// Dependent defaults are not checked.\n+struct Dependent<T, U = T>(T, U) where U: Copy;\n+trait SelfBound<T: Copy=Self> {}\n \n fn main() {}"}, {"sha": "65560df9f21f24d97da995ef834d5a0f6d1ca18a", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=c74f85f935189021345cbc0efdfcccb98047c29e", "patch": "@@ -30,25 +30,11 @@ struct WhereClause<T=String>(T) where T: Copy;\n trait TraitBound<T:Copy=String> {}\n //~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n-trait SelfBound<T:Copy=Self> {}\n-//~^ error: the trait bound `Self: std::marker::Copy` is not satisfied [E0277]\n-\n trait Super<T: Copy> { }\n trait Base<T = String>: Super<T> { }\n //~^ error: the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n \n trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-//~^ error: the trait bound `i32: std::ops::Add<u8>` is not satisfied [E0277]\n-\n-// Defaults must work together.\n-struct TwoParams<T = u32, U = i32>(T, U) where T: Bar<U>;\n-//~^ the trait bound `u32: Bar<i32>` is not satisfied [E0277]\n-trait Bar<V> {}\n-impl Bar<String> for u32 { }\n-impl Bar<i32> for String { }\n-\n-// Dependent defaults.\n-struct Dependent<T, U = T>(T, U) where U: Copy;\n-//~^ the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+//~^ error:  cannot add `u8` to `i32` [E0277]\n \n fn main() { }"}, {"sha": "c73c0792f8e7c06a4aa52a97bdd0941d6703edb5", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 11, "deletions": 42, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c74f85f935189021345cbc0efdfcccb98047c29e/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=c74f85f935189021345cbc0efdfcccb98047c29e", "patch": "@@ -25,13 +25,14 @@ note: required by `Foo`\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: std::iter::Iterator` is not satisfied\n-  --> $DIR/type-check-defaults.rs:21:1\n+  --> $DIR/type-check-defaults.rs:21:32\n    |\n 21 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `A` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |                                ^ `A` is not an iterator; maybe try calling `.iter()` or a similar method\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `A`\n    = help: consider adding a `where A: std::iter::Iterator` bound\n+   = note: required by `std::iter::Iterator`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:24:1\n@@ -57,59 +58,27 @@ error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not sa\n    |\n    = note: required by `std::marker::Copy`\n \n-error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:33:1\n-   |\n-33 | trait SelfBound<T:Copy=Self> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::marker::Copy` bound\n-   = note: required by `std::marker::Copy`\n-\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:37:1\n+  --> $DIR/type-check-defaults.rs:34:1\n    |\n-37 | trait Base<T = String>: Super<T> { }\n+34 | trait Base<T = String>: Super<T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n note: required by `Super`\n-  --> $DIR/type-check-defaults.rs:36:1\n+  --> $DIR/type-check-defaults.rs:33:1\n    |\n-36 | trait Super<T: Copy> { }\n+33 | trait Super<T: Copy> { }\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `i32: std::ops::Add<u8>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:40:1\n+error[E0277]: cannot add `u8` to `i32`\n+  --> $DIR/type-check-defaults.rs:37:1\n    |\n-40 | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+37 | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n    = note: required by `std::ops::Add`\n \n-error[E0277]: the trait bound `u32: Bar<i32>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:44:1\n-   |\n-44 | struct TwoParams<T = u32, U = i32>(T, U) where T: Bar<U>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar<i32>` is not implemented for `u32`\n-   |\n-   = help: the following implementations were found:\n-             <u32 as Bar<std::string::String>>\n-note: required by `Bar`\n-  --> $DIR/type-check-defaults.rs:46:1\n-   |\n-46 | trait Bar<V> {}\n-   | ^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:51:1\n-   |\n-51 | struct Dependent<T, U = T>(T, U) where U: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n-   = note: required by `std::marker::Copy`\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 8 previous errors\n "}]}