{"sha": "912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMmYwMGMxODdmYmU2MjkzYTcxZTJjM2M0NmUxNGU1ZDVmNzM4NWM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-01T10:55:26Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-01T14:52:13Z"}, "message": "Rollup merge of #55536 - ljedrz:don't_collect_suggestions, r=davidtwco\n\nPass suggestions as impl Iterator instead of Vec\n\nThis avoids some allocations when throwing errors, making failing faster ^^.", "tree": {"sha": "2db251d1dd48c72696f3fbc129212f8f6fd8c5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db251d1dd48c72696f3fbc129212f8f6fd8c5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvbEx0ACgkQ/vbIBR0O\nATwWNBAAqSiCBzbrBwMbeHqzoYZRqTL0tta59KI+PwJ3ruSrEpqrvLcxsqqfH5pS\nFA2WEZZi5ATboWLRI9IFB0Up3LMKZzImH6T+PQqFwtSpxeyVisfSSc4NTPNCFcYZ\npOjh5Mblr6o1iU4gs1+B/5d0fE1jx2W/HiXQF/YTN3KQGivrWZ+IVkcqBOei9Shb\ni8MKGU+70OtuPzC7vWitarrGJlZ06wfSeJ0ClR1umVaiHM9ul5DHw7jUjkDYoT6H\nKiiRlvby02YLfZ0HWMFgzCU9++xapKuvEYDolK2mUdcIdC3XCgQ+qDtWi1PT+XxH\nCwK/p62zAUy+NKMpz+Ff6woYI+mbbAVqdGdVCYwVtCmyT0hfgO0eHUBzGUvaiVhn\nzF0NFsmhSpavn5yBgmgjKjrvI3U1r5whxm45iGeW9tPHHxOINqXgYsaMUcDC37cc\njoS7qzfVJz64LBDqyVdIOtBAAgER9N9en5lqOIaSZix84F0jp9YvrBwyg1/nuUDY\nMjPVHk7V02Hy9ReBL1CGEB9QMJ+givUvKZXuksb+Gg0wj2EuXo+ejX2jgJDLE1Xj\nU1ft0a6iQm6woNc4jzW8hX/tMsYUUKvhHjN5sxPrIuy/N8znSM8KalTR5ygXdFud\nxKzvvjQhJGMxKrUbDfysVVZaSmQe+jM2NT6jpDiM5KidIJ/PsCo=\n=8OPB\n-----END PGP SIGNATURE-----", "payload": "tree 2db251d1dd48c72696f3fbc129212f8f6fd8c5e6\nparent 1e1d37b637ce7440836a600f2fe373cefe39ed8f\nparent 9ff0f3374882275b8c6b321f94b14440454f8340\nauthor Pietro Albini <pietro@pietroalbini.org> 1541069726 +0100\ncommitter kennytm <kennytm@gmail.com> 1541083933 +0800\n\nRollup merge of #55536 - ljedrz:don't_collect_suggestions, r=davidtwco\n\nPass suggestions as impl Iterator instead of Vec\n\nThis avoids some allocations when throwing errors, making failing faster ^^.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "html_url": "https://github.com/rust-lang/rust/commit/912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1d37b637ce7440836a600f2fe373cefe39ed8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d37b637ce7440836a600f2fe373cefe39ed8f", "html_url": "https://github.com/rust-lang/rust/commit/1e1d37b637ce7440836a600f2fe373cefe39ed8f"}, {"sha": "9ff0f3374882275b8c6b321f94b14440454f8340", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff0f3374882275b8c6b321f94b14440454f8340", "html_url": "https://github.com/rust-lang/rust/commit/9ff0f3374882275b8c6b321f94b14440454f8340"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "a323282f2335325896a68fafa95d3bc2c5bd54b3", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -350,10 +350,10 @@ impl Diagnostic {\n     }\n \n     pub fn span_suggestions_with_applicability(&mut self, sp: Span, msg: &str,\n-                                        suggestions: Vec<String>,\n-                                        applicability: Applicability) -> &mut Self {\n+        suggestions: impl Iterator<Item = String>, applicability: Applicability) -> &mut Self\n+    {\n         self.suggestions.push(CodeSuggestion {\n-            substitutions: suggestions.into_iter().map(|snippet| Substitution {\n+            substitutions: suggestions.map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n                     snippet,\n                     span: sp,"}, {"sha": "2f16470530e4374581750e89c1f2afef8dc6c4fc", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -253,7 +253,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     pub fn span_suggestions_with_applicability(&mut self,\n                                                sp: Span,\n                                                msg: &str,\n-                                               suggestions: Vec<String>,\n+                                               suggestions: impl Iterator<Item = String>,\n                                                applicability: Applicability)\n                                                -> &mut Self {\n         if !self.allow_suggestions {"}, {"sha": "7b5e704f60f6e1919cd492361683b160563d4f1d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -4948,7 +4948,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n         err.span_suggestions_with_applicability(\n             span,\n             &msg,\n-            path_strings,\n+            path_strings.into_iter(),\n             Applicability::Unspecified,\n         );\n     } else {"}, {"sha": "0a196834cb49442635af0176299d45aa6f90dd80", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if compatible_variants.peek().is_some() {\n                     let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n                     let suggestions = compatible_variants\n-                        .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                        .map(|v| format!(\"{}({})\", v, expr_text));\n                     err.span_suggestions_with_applicability(\n                         expr.span,\n                         \"try using a variant of the expected type\","}, {"sha": "cd243d414439447d978d9559591b346a4c499512", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     with_crate_prefix(|| self.tcx.item_path_str(*did)),\n                     additional_newline\n                 )\n-            }).collect();\n+            });\n \n             err.span_suggestions_with_applicability(\n                                                     span,"}, {"sha": "17784a4681d009fdf5afce6cdb64dbf01b1294cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f00c187fbe6293a71e2c3c46e14e5d5f7385c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=912f00c187fbe6293a71e2c3c46e14e5d5f7385c", "patch": "@@ -4744,7 +4744,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                let suggestions = iter::repeat(&expr_text).zip(methods.iter())\n+                let mut suggestions = iter::repeat(&expr_text).zip(methods.iter())\n                     .filter_map(|(receiver, method)| {\n                         let method_call = format!(\".{}()\", method.ident);\n                         if receiver.ends_with(&method_call) {\n@@ -4760,8 +4760,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 Some(format!(\"{}{}\", receiver, method_call))\n                             }\n                         }\n-                    }).collect::<Vec<_>>();\n-                if !suggestions.is_empty() {\n+                    }).peekable();\n+                if suggestions.peek().is_some() {\n                     err.span_suggestions_with_applicability(\n                         expr.span,\n                         \"try using a conversion method\","}]}