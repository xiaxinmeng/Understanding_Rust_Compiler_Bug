{"sha": "b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NjZkMGFlMTJhYTUzYmZkZGZlYWZhNjFlYWNhMzA1N2EyYzhhYjI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T16:53:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T16:53:14Z"}, "message": "Rollup merge of #84460 - jyn514:doctree-is-crate, r=camelid\n\nrustdoc: Remove unnecessary `is_crate` field from doctree::Module and clean::Module\n\nIt can be calculated on-demand even without a TyCtxt.\n\nThis also changed `json::conversions::from_item_kind` to take a whole item, which avoids\nhaving to add more and more parameters.\n\nHelps with https://github.com/rust-lang/rust/issues/76382.\n\nr? ```@camelid```", "tree": {"sha": "40df7e730a829a6a9a4ff21a618b2bd559f8e148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40df7e730a829a6a9a4ff21a618b2bd559f8e148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghEz6CRBK7hj4Ov3rIwAAmMMIAJxOh6KOKXzVBzqBZbOoSZ3w\nAbMVZzrsB8OwLkkVZhxVYoE0FbLatG70OrxfcS03fUV+skFh2CtsT7syMTzsWLma\nWczu5+tGpAxA3NViZPZ6IrHz8YmFioZv4T9nqXaxe9qCdSkVHh3zQKs4hL9Jdt6z\nOGnkHmXVutglCZMq97vwFafBDwQW7/MYZtZRceGHYDEkynmD0oNACNBlmehw5Qw3\nk8SB9rTP/kUn4vQIED9r/MDIIm2ZqVDdFEpwG1MnkJm7XnGqN9mVrW4MVBC1eaIa\nKP2XEMOvMY9iC4EupyUKMVTa0C6CxDRVRW0Zp74UbvDyRVZR989uW1mtUxZJtw4=\n=8jK6\n-----END PGP SIGNATURE-----\n", "payload": "tree 40df7e730a829a6a9a4ff21a618b2bd559f8e148\nparent 46c517b7c43e332ef0a9bf9ff2ad6bd00eaefc80\nparent e29f46ce3761e7a3e8bf535bc55b7f8b58e4c0a7\nauthor Yuki Okushi <jtitor@2k36.org> 1619283194 +0900\ncommitter GitHub <noreply@github.com> 1619283194 +0900\n\nRollup merge of #84460 - jyn514:doctree-is-crate, r=camelid\n\nrustdoc: Remove unnecessary `is_crate` field from doctree::Module and clean::Module\n\nIt can be calculated on-demand even without a TyCtxt.\n\nThis also changed `json::conversions::from_item_kind` to take a whole item, which avoids\nhaving to add more and more parameters.\n\nHelps with https://github.com/rust-lang/rust/issues/76382.\n\nr? ```@camelid```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "html_url": "https://github.com/rust-lang/rust/commit/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46c517b7c43e332ef0a9bf9ff2ad6bd00eaefc80", "url": "https://api.github.com/repos/rust-lang/rust/commits/46c517b7c43e332ef0a9bf9ff2ad6bd00eaefc80", "html_url": "https://github.com/rust-lang/rust/commit/46c517b7c43e332ef0a9bf9ff2ad6bd00eaefc80"}, {"sha": "e29f46ce3761e7a3e8bf535bc55b7f8b58e4c0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29f46ce3761e7a3e8bf535bc55b7f8b58e4c0a7", "html_url": "https://github.com/rust-lang/rust/commit/e29f46ce3761e7a3e8bf535bc55b7f8b58e4c0a7"}], "stats": {"total": 68, "additions": 26, "deletions": 42}, "files": [{"sha": "01936da57467a13937b5d7d0f1aa407d4f43eb03", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -487,7 +487,7 @@ fn build_module(\n         }\n     }\n \n-    clean::Module { items, is_crate: false }\n+    clean::Module { items }\n }\n \n crate fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {"}, {"sha": "9b0be6aec39429b557c4e387974679c3a9adcc0c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -112,12 +112,8 @@ impl Clean<Item> for doctree::Module<'_> {\n             }\n         };\n \n-        let what_rustc_thinks = Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            ModuleItem(Module { is_crate: self.is_crate, items }),\n-            cx,\n-        );\n+        let what_rustc_thinks =\n+            Item::from_hir_id_and_parts(self.id, Some(self.name), ModuleItem(Module { items }), cx);\n         Item { span: span.clean(cx), ..what_rustc_thinks }\n     }\n }"}, {"sha": "1308ff769ba8ed4b3858fa5a85e2371afcc5551d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -391,12 +391,9 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        matches!(\n-            *self.kind,\n-            StrippedItem(box ModuleItem(Module { is_crate: true, .. }))\n-                | ModuleItem(Module { is_crate: true, .. })\n-        )\n+        self.is_mod() && self.def_id.index == CRATE_DEF_INDEX\n     }\n+\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module\n     }\n@@ -608,7 +605,6 @@ impl ItemKind {\n #[derive(Clone, Debug)]\n crate struct Module {\n     crate items: Vec<Item>,\n-    crate is_crate: bool,\n }\n \n crate struct ListAttributesIter<'a> {\n@@ -1983,7 +1979,7 @@ crate enum Variant {\n \n /// Small wrapper around [`rustc_span::Span]` that adds helper methods\n /// and enforces calling [`rustc_span::Span::source_callsite()`].\n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug)]\n crate struct Span(rustc_span::Span);\n \n impl Span {"}, {"sha": "d3f4353a58b7b60aac7a1925cfd3e153b1de5fcd", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -14,7 +14,6 @@ crate struct Module<'hir> {\n     crate items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n     crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n     crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Symbol>)>,\n-    crate is_crate: bool,\n }\n \n impl Module<'hir> {\n@@ -28,7 +27,6 @@ impl Module<'hir> {\n             items: Vec::new(),\n             foreigns: Vec::new(),\n             macros: Vec::new(),\n-            is_crate: false,\n         }\n     }\n }"}, {"sha": "ed91a5605757499115b0feac7d786af9eb2492ff", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -80,10 +80,7 @@ crate trait DocFolder: Sized {\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {\n-        Module {\n-            is_crate: m.is_crate,\n-            items: m.items.into_iter().filter_map(|i| self.fold_item(i)).collect(),\n-        }\n+        Module { items: m.items.into_iter().filter_map(|i| self.fold_item(i)).collect() }\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {"}, {"sha": "5865da9440b16450ad1627aca5d21fa0b6e1e264", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -28,8 +28,8 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer)\n     // Write the breadcrumb trail header for the top\n     buf.write_str(\"<h1 class=\\\"fqn\\\"><span class=\\\"in-band\\\">\");\n     let name = match *item.kind {\n-        clean::ModuleItem(ref m) => {\n-            if m.is_crate {\n+        clean::ModuleItem(_) => {\n+            if item.is_crate() {\n                 \"Crate \"\n             } else {\n                 \"Module \""}, {"sha": "80ef0073da8a410f30745bdeed49c21e09b43f7c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -10,7 +10,6 @@ use rustc_ast::ast;\n use rustc_hir::def::CtorKind;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_span::symbol::Symbol;\n use rustc_span::Pos;\n \n use rustdoc_json_types::*;\n@@ -34,23 +33,26 @@ impl JsonRenderer<'_> {\n                 did.map(|did| (link.clone(), from_def_id(did)))\n             })\n             .collect();\n-        let clean::Item { span, name, attrs, kind, visibility, def_id } = item;\n-        let inner = match *kind {\n+        let docs = item.attrs.collapsed_doc_value();\n+        let attrs = item\n+            .attrs\n+            .other_attrs\n+            .iter()\n+            .map(rustc_ast_pretty::pprust::attribute_to_string)\n+            .collect();\n+        let clean::Item { span, name, attrs: _, kind: _, visibility, def_id } = item;\n+        let inner = match *item.kind {\n             clean::StrippedItem(_) => return None,\n-            kind => from_clean_item_kind(kind, self.tcx, &name),\n+            _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n             id: from_def_id(def_id),\n             crate_id: def_id.krate.as_u32(),\n             name: name.map(|sym| sym.to_string()),\n             span: self.convert_span(span),\n             visibility: self.convert_visibility(visibility),\n-            docs: attrs.collapsed_doc_value(),\n-            attrs: attrs\n-                .other_attrs\n-                .iter()\n-                .map(rustc_ast_pretty::pprust::attribute_to_string)\n-                .collect(),\n+            docs,\n+            attrs,\n             deprecation: deprecation.map(from_deprecation),\n             inner,\n             links,\n@@ -172,10 +174,12 @@ crate fn from_def_id(did: DefId) -> Id {\n     Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index)))\n }\n \n-fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Symbol>) -> ItemEnum {\n+fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n     use clean::ItemKind::*;\n-    match item {\n-        ModuleItem(m) => ItemEnum::Module(m.into_tcx(tcx)),\n+    let name = item.name;\n+    let is_crate = item.is_crate();\n+    match *item.kind {\n+        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items) }),\n         ImportItem(i) => ItemEnum::Import(i.into_tcx(tcx)),\n         StructItem(s) => ItemEnum::Struct(s.into_tcx(tcx)),\n         UnionItem(u) => ItemEnum::Union(u.into_tcx(tcx)),\n@@ -214,12 +218,6 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Sy\n     }\n }\n \n-impl FromWithTcx<clean::Module> for Module {\n-    fn from_tcx(module: clean::Module, _tcx: TyCtxt<'_>) -> Self {\n-        Module { is_crate: module.is_crate, items: ids(module.items) }\n-    }\n-}\n-\n impl FromWithTcx<clean::Struct> for Struct {\n     fn from_tcx(struct_: clean::Struct, tcx: TyCtxt<'_>) -> Self {\n         let clean::Struct { struct_type, generics, fields, fields_stripped } = struct_;"}, {"sha": "3538182427a9312c12f969941bcee3343b166dde", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "patch": "@@ -79,7 +79,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             &krate.item,\n             self.cx.tcx.crate_name,\n         );\n-        top_level_module.is_crate = true;\n         // Attach the crate's exported macros to the top-level module.\n         // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as\n         // well (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by"}]}