{"sha": "833b33cad9b6a94b749a58108dd8efb3a933170f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzM2IzM2NhZDliNmE5NGI3NDlhNTgxMDhkZDhlZmIzYTkzMzE3MGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-01T15:58:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-01T15:58:27Z"}, "message": "Merge pull request #824 from mcarton/doc\n\nFix false positive with `DOC_MARKDOWN` and links + rustup", "tree": {"sha": "22b4ba14ea7d786b535bd4e0e44b60d969394127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b4ba14ea7d786b535bd4e0e44b60d969394127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833b33cad9b6a94b749a58108dd8efb3a933170f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833b33cad9b6a94b749a58108dd8efb3a933170f", "html_url": "https://github.com/rust-lang/rust/commit/833b33cad9b6a94b749a58108dd8efb3a933170f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833b33cad9b6a94b749a58108dd8efb3a933170f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfe38c432694677282f658b48b2a4c86d6a23a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfe38c432694677282f658b48b2a4c86d6a23a5", "html_url": "https://github.com/rust-lang/rust/commit/8bfe38c432694677282f658b48b2a4c86d6a23a5"}, {"sha": "f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "html_url": "https://github.com/rust-lang/rust/commit/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "9a6a86d41403f447cc294676ee2d81bea1c9a37b", "filename": "src/doc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/833b33cad9b6a94b749a58108dd8efb3a933170f/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b33cad9b6a94b749a58108dd8efb3a933170f/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=833b33cad9b6a94b749a58108dd8efb3a933170f", "patch": "@@ -69,7 +69,7 @@ fn collect_doc(attrs: &[ast::Attribute]) -> (Cow<str>, Option<Span>) {\n             let (doc, span) = doc_attrs.next().unwrap_or_else(|| unreachable!());\n             (doc.into(), Some(span))\n         }\n-        _ => (doc_attrs.map(|s| s.0).collect::<String>().into(), None),\n+        _ => (doc_attrs.map(|s| format!(\"{}\\n\", s.0)).collect::<String>().into(), None),\n     }\n }\n \n@@ -124,9 +124,14 @@ fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n         s != \"_\" && !s.contains(\"\\\\_\") && s.contains('_')\n     }\n \n+    // Something with a `/` might be a link, don\u2019t warn (see #823):\n+    if word.contains('/') {\n+        return;\n+    }\n+\n     // Trim punctuation as in `some comment (see foo::bar).`\n     //                                                   ^^\n-    // Or even as `_foo bar_` which is emphasized.\n+    // Or even as in `_foo bar_` which is emphasized.\n     let word = word.trim_matches(|c: char| !c.is_alphanumeric());\n \n     if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {"}, {"sha": "a7b316e1f823578bd854e95962e4548a7b62cd12", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/833b33cad9b6a94b749a58108dd8efb3a933170f/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b33cad9b6a94b749a58108dd8efb3a933170f/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=833b33cad9b6a94b749a58108dd8efb3a933170f", "patch": "@@ -29,6 +29,11 @@ fn multiline_ticks() {\n fn test_emphasis() {\n }\n \n+/// This test has [a link with underscores][chunked-example] inside it. See #823.\n+/// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues).\n+///\n+/// [chunked-example]: http://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n+\n /// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n /// `multiline_ticks` functions.\n fn main() {"}, {"sha": "cd86281d8f24879c12ee5b7564b7520a176a62af", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/833b33cad9b6a94b749a58108dd8efb3a933170f/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b33cad9b6a94b749a58108dd8efb3a933170f/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=833b33cad9b6a94b749a58108dd8efb3a933170f", "patch": "@@ -62,19 +62,19 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = core::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = std::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = my_transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<u32> = core::intrinsics::transmute(my_vec());\n         let _: Vec<u32> = core::mem::transmute(my_vec());\n@@ -92,16 +92,16 @@ fn crosspointer() {\n \n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(vec_const_ptr);\n-        //~^ ERROR transmute from a type (`*const collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`*const std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n \n         let _: Vec<i32> = core::intrinsics::transmute(vec_mut_ptr);\n-        //~^ ERROR transmute from a type (`*mut collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`*mut std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n \n         let _: *const Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*const collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*const std::vec::Vec<i32>`)\n \n         let _: *mut Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*mut collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*mut std::vec::Vec<i32>`)\n     }\n }\n "}]}