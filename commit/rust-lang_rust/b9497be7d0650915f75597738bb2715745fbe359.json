{"sha": "b9497be7d0650915f75597738bb2715745fbe359", "node_id": "C_kwDOAAsO6NoAKGI5NDk3YmU3ZDA2NTA5MTVmNzU1OTc3MzhiYjI3MTU3NDVmYmUzNTk", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-20T22:21:15Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-24T16:50:05Z"}, "message": "Allow Buffer methods to inline", "tree": {"sha": "7168962566a2e7dc95885c2781b6142604a0c53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7168962566a2e7dc95885c2781b6142604a0c53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9497be7d0650915f75597738bb2715745fbe359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9497be7d0650915f75597738bb2715745fbe359", "html_url": "https://github.com/rust-lang/rust/commit/b9497be7d0650915f75597738bb2715745fbe359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9497be7d0650915f75597738bb2715745fbe359/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761ddf3e7fe2dea4e0dc437ffca24be8e529852b", "url": "https://api.github.com/repos/rust-lang/rust/commits/761ddf3e7fe2dea4e0dc437ffca24be8e529852b", "html_url": "https://github.com/rust-lang/rust/commit/761ddf3e7fe2dea4e0dc437ffca24be8e529852b"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "1989d85dfb5dbec23b3ad90c3b9065a451220ade", "filename": "library/std/src/io/buffered/bufreader/buffer.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9497be7d0650915f75597738bb2715745fbe359/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9497be7d0650915f75597738bb2715745fbe359/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader%2Fbuffer.rs?ref=b9497be7d0650915f75597738bb2715745fbe359", "patch": "@@ -10,43 +10,52 @@ pub struct Buffer {\n }\n \n impl Buffer {\n+    #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n         let buf = Box::new_uninit_slice(capacity);\n         Self { buf, pos: 0, cap: 0, init: 0 }\n     }\n \n+    #[inline]\n     pub fn buffer(&self) -> &[u8] {\n         // SAFETY: self.cap is always <= self.init, so self.buf[self.pos..self.cap] is always init\n         // Additionally, both self.pos and self.cap are valid and and self.cap => self.pos, and\n         // that region is initialized because those are all invariants of this type.\n         unsafe { MaybeUninit::slice_assume_init_ref(&self.buf.get_unchecked(self.pos..self.cap)) }\n     }\n \n+    #[inline]\n     pub fn capacity(&self) -> usize {\n         self.buf.len()\n     }\n \n+    #[inline]\n     pub fn cap(&self) -> usize {\n         self.cap\n     }\n \n+    #[inline]\n     pub fn pos(&self) -> usize {\n         self.pos\n     }\n \n+    #[inline]\n     pub fn discard_buffer(&mut self) {\n         self.pos = 0;\n         self.cap = 0;\n     }\n \n+    #[inline]\n     pub fn consume(&mut self, amt: usize) {\n         self.pos = cmp::min(self.pos + amt, self.cap);\n     }\n \n+    #[inline]\n     pub fn unconsume(&mut self, amt: usize) {\n         self.pos = self.pos.saturating_sub(amt);\n     }\n \n+    #[inline]\n     pub fn fill_buf(&mut self, mut reader: impl Read) -> io::Result<&[u8]> {\n         // If we've reached the end of our internal buffer then we need to fetch\n         // some more data from the underlying reader."}]}