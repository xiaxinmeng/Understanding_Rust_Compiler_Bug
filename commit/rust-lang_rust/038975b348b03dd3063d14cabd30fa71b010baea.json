{"sha": "038975b348b03dd3063d14cabd30fa71b010baea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODk3NWIzNDhiMDNkZDMwNjNkMTRjYWJkMzBmYTcxYjAxMGJhZWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T09:26:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T09:26:34Z"}, "message": "plug new boilerplate_gen into ra_tools", "tree": {"sha": "43535287459df418afd25f0a672f187f4355f3d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43535287459df418afd25f0a672f187f4355f3d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038975b348b03dd3063d14cabd30fa71b010baea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038975b348b03dd3063d14cabd30fa71b010baea", "html_url": "https://github.com/rust-lang/rust/commit/038975b348b03dd3063d14cabd30fa71b010baea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038975b348b03dd3063d14cabd30fa71b010baea/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa250ff612b10c02bfbc197557adfd4c70e01e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa250ff612b10c02bfbc197557adfd4c70e01e43", "html_url": "https://github.com/rust-lang/rust/commit/aa250ff612b10c02bfbc197557adfd4c70e01e43"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "415839cb5f4d65a182e4699036cdb1d6a07c13ae", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=038975b348b03dd3063d14cabd30fa71b010baea", "patch": "@@ -557,10 +557,6 @@ impl SyntaxKind {\n             \"try\" => TRY_KW,\n             \"box\" => BOX_KW,\n             \"await\" => AWAIT_KW,\n-            \"auto\" => AUTO_KW,\n-            \"default\" => DEFAULT_KW,\n-            \"existential\" => EXISTENTIAL_KW,\n-            \"union\" => UNION_KW,\n             _ => return None,\n         };\n         Some(kw)"}, {"sha": "7ef51e82ad48ed2de849ab91c5403471ff05a58b", "filename": "crates/ra_tools/src/boilerplate_gen.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs?ref=038975b348b03dd3063d14cabd30fa71b010baea", "patch": "@@ -2,7 +2,6 @@ use std::{\n     collections::BTreeMap,\n     fs,\n     io::Write,\n-    path::Path,\n     process::{Command, Stdio},\n };\n \n@@ -12,7 +11,7 @@ use quote::{format_ident, quote};\n use ron;\n use serde::Deserialize;\n \n-use crate::{project_root, Mode, Result, AST, GRAMMAR, SYNTAX_KINDS};\n+use crate::{project_root, update, Mode, Result, AST, GRAMMAR, SYNTAX_KINDS};\n \n pub fn generate_boilerplate(mode: Mode) -> Result<()> {\n     let grammar = project_root().join(GRAMMAR);\n@@ -21,11 +20,14 @@ pub fn generate_boilerplate(mode: Mode) -> Result<()> {\n         ron::de::from_str(&text)?\n     };\n \n-    let _syntax_kinds = project_root().join(SYNTAX_KINDS);\n-    let _ast = project_root().join(AST);\n+    let syntax_kinds_file = project_root().join(SYNTAX_KINDS);\n+    let syntax_kinds = generate_syntax_kinds(&grammar)?;\n+    update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n+\n+    let ast_file = project_root().join(AST);\n+    let ast = generate_ast(&grammar)?;\n+    update(ast_file.as_path(), &ast, mode)?;\n \n-    let ast = generate_syntax_kinds(&grammar)?;\n-    println!(\"{}\", ast);\n     Ok(())\n }\n \n@@ -172,10 +174,14 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n         .chain(grammar.multi_byte_tokens.iter().map(|(_token, name)| format_ident!(\"{}\", name)))\n         .collect::<Vec<_>>();\n \n-    let keywords_values =\n+    let full_keywords_values = &grammar.keywords;\n+    let full_keywords =\n+        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", kw.to_shouty_snake_case()));\n+\n+    let all_keywords_values =\n         grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n-    let keywords_idents = keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n-    let keywords = keywords_values\n+    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n+    let all_keywords = all_keywords_values\n         .iter()\n         .map(|name| format_ident!(\"{}_KW\", name.to_shouty_snake_case()))\n         .collect::<Vec<_>>();\n@@ -202,7 +208,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n             #[doc(hidden)]\n             EOF,\n             #(#punctuation,)*\n-            #(#keywords,)*\n+            #(#all_keywords,)*\n             #(#literals,)*\n             #(#tokens,)*\n             #(#nodes,)*\n@@ -229,7 +235,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n         impl SyntaxKind {\n             pub fn is_keyword(self) -> bool {\n                 match self {\n-                    #(#keywords)|* => true,\n+                    #(#all_keywords)|* => true,\n                     _ => false,\n                 }\n             }\n@@ -251,7 +257,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n             pub(crate) fn info(self) -> &'static SyntaxInfo {\n                 match self {\n                     #(#punctuation => &SyntaxInfo { name: stringify!(#punctuation) },)*\n-                    #(#keywords => &SyntaxInfo { name: stringify!(#keywords) },)*\n+                    #(#all_keywords => &SyntaxInfo { name: stringify!(#all_keywords) },)*\n                     #(#literals => &SyntaxInfo { name: stringify!(#literals) },)*\n                     #(#tokens => &SyntaxInfo { name: stringify!(#tokens) },)*\n                     #(#nodes => &SyntaxInfo { name: stringify!(#nodes) },)*\n@@ -263,7 +269,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n \n             pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n                 let kw = match ident {\n-                    #(#keywords_values => #keywords,)*\n+                    #(#full_keywords_values => #full_keywords,)*\n                     _ => return None,\n                 };\n                 Some(kw)\n@@ -281,7 +287,7 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n         #[macro_export]\n         macro_rules! T {\n             #((#punctuation_values) => { $crate::SyntaxKind::#punctuation };)*\n-            #((#keywords_idents) => { $crate::SyntaxKind::#keywords };)*\n+            #((#all_keywords_idents) => { $crate::SyntaxKind::#all_keywords };)*\n         }\n     };\n "}, {"sha": "d47660369e85081d3fe058d16e205100521b2c34", "filename": "crates/ra_tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Flib.rs?ref=038975b348b03dd3063d14cabd30fa71b010baea", "patch": "@@ -20,7 +20,7 @@ const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n const OK_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/ok\";\n const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\";\n \n-pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs.tera\";\n+pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs\";\n pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs\";\n const TOOLCHAIN: &str = \"stable\";\n "}, {"sha": "03cb9d5a73dad220ce2e02b593d35fc5e11d1213", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=038975b348b03dd3063d14cabd30fa71b010baea", "patch": "@@ -1,8 +1,8 @@\n use clap::{App, Arg, SubCommand};\n use core::str;\n use ra_tools::{\n-    gen_tests, generate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt, Cmd,\n-    Overwrite, Result,\n+    gen_tests, generate_boilerplate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n+    Cmd, Overwrite, Result,\n };\n use std::{env, path::PathBuf};\n \n@@ -49,7 +49,7 @@ fn main() -> Result<()> {\n             install(opts)?\n         }\n         (\"gen-tests\", _) => gen_tests(Overwrite)?,\n-        (\"gen-syntax\", _) => generate(Overwrite)?,\n+        (\"gen-syntax\", _) => generate_boilerplate(Overwrite)?,\n         (\"format\", _) => run_rustfmt(Overwrite)?,\n         (\"format-hook\", _) => install_format_hook()?,\n         (\"lint\", _) => run_clippy()?,"}, {"sha": "c672e578895378e5b4c1f043d22ae2e1c1867926", "filename": "crates/ra_tools/tests/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038975b348b03dd3063d14cabd30fa71b010baea/crates%2Fra_tools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Ftests%2Fcli.rs?ref=038975b348b03dd3063d14cabd30fa71b010baea", "patch": "@@ -1,10 +1,10 @@\n use walkdir::WalkDir;\n \n-use ra_tools::{gen_tests, generate, project_root, run_rustfmt, Verify};\n+use ra_tools::{gen_tests, generate_boilerplate, project_root, run_rustfmt, Verify};\n \n #[test]\n fn generated_grammar_is_fresh() {\n-    if let Err(error) = generate(Verify) {\n+    if let Err(error) = generate_boilerplate(Verify) {\n         panic!(\"{}. Please update it by running `cargo gen-syntax`\", error);\n     }\n }"}]}