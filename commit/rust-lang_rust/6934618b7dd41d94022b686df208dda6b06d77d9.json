{"sha": "6934618b7dd41d94022b686df208dda6b06d77d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MzQ2MThiN2RkNDFkOTQwMjJiNjg2ZGYyMDhkZGE2YjA2ZDc3ZDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-23T00:30:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-28T22:48:49Z"}, "message": "remove SupSupConflict, which is now dead code", "tree": {"sha": "559b39a0b79cb46113689984724e6eeed4c5daea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559b39a0b79cb46113689984724e6eeed4c5daea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6934618b7dd41d94022b686df208dda6b06d77d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6934618b7dd41d94022b686df208dda6b06d77d9", "html_url": "https://github.com/rust-lang/rust/commit/6934618b7dd41d94022b686df208dda6b06d77d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6934618b7dd41d94022b686df208dda6b06d77d9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18698c80c7c17eccfa93ef1d1859a8c718a7a763", "url": "https://api.github.com/repos/rust-lang/rust/commits/18698c80c7c17eccfa93ef1d1859a8c718a7a763", "html_url": "https://github.com/rust-lang/rust/commit/18698c80c7c17eccfa93ef1d1859a8c718a7a763"}], "stats": {"total": 49, "additions": 0, "deletions": 49}, "files": [{"sha": "880e181cdef143750f712193123261146af5a1cf", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6934618b7dd41d94022b686df208dda6b06d77d9/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6934618b7dd41d94022b686df208dda6b06d77d9/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=6934618b7dd41d94022b686df208dda6b06d77d9", "patch": "@@ -65,7 +65,6 @@ use super::ValuePairs;\n use super::region_inference::RegionResolutionError;\n use super::region_inference::ConcreteFailure;\n use super::region_inference::SubSupConflict;\n-use super::region_inference::SupSupConflict;\n use super::region_inference::GenericBoundFailure;\n use super::region_inference::GenericKind;\n use super::region_inference::ProcessedErrors;\n@@ -258,13 +257,6 @@ pub trait ErrorReporting<'tcx> {\n                                sup_origin: SubregionOrigin<'tcx>,\n                                sup_region: Region);\n \n-    fn report_sup_sup_conflict(&self,\n-                               var_origin: RegionVariableOrigin,\n-                               origin1: SubregionOrigin<'tcx>,\n-                               region1: Region,\n-                               origin2: SubregionOrigin<'tcx>,\n-                               region2: Region);\n-\n     fn report_processed_errors(&self,\n                                var_origin: &[RegionVariableOrigin],\n                                trace_origin: &[(TypeTrace<'tcx>, TypeError<'tcx>)],\n@@ -313,14 +305,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                                                  sup_origin, sup_r);\n                 }\n \n-                SupSupConflict(var_origin,\n-                               origin1, r1,\n-                               origin2, r2) => {\n-                    self.report_sup_sup_conflict(var_origin,\n-                                                 origin1, r1,\n-                                                 origin2, r2);\n-                }\n-\n                 ProcessedErrors(ref var_origins,\n                                 ref trace_origins,\n                                 ref same_regions) => {\n@@ -376,7 +360,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         None => processed_errors.push((*error).clone()),\n                     }\n                 }\n-                SupSupConflict(..) => processed_errors.push((*error).clone()),\n                 _ => ()  // This shouldn't happen\n             }\n         }\n@@ -930,29 +913,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         self.note_region_origin(&sub_origin);\n     }\n \n-    fn report_sup_sup_conflict(&self,\n-                               var_origin: RegionVariableOrigin,\n-                               origin1: SubregionOrigin<'tcx>,\n-                               region1: Region,\n-                               origin2: SubregionOrigin<'tcx>,\n-                               region2: Region) {\n-        self.report_inference_failure(var_origin);\n-\n-        self.tcx.note_and_explain_region(\n-            \"first, the lifetime must be contained by \",\n-            region1,\n-            \"...\");\n-\n-        self.note_region_origin(&origin1);\n-\n-        self.tcx.note_and_explain_region(\n-            \"but, the lifetime must also be contained by \",\n-            region2,\n-            \"...\");\n-\n-        self.note_region_origin(&origin2);\n-    }\n-\n     fn report_processed_errors(&self,\n                                var_origins: &[RegionVariableOrigin],\n                                trace_origins: &[(TypeTrace<'tcx>, TypeError<'tcx>)],"}, {"sha": "3b2eacb9b29180c2337e022a0f00e3ac6abb5277", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6934618b7dd41d94022b686df208dda6b06d77d9/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6934618b7dd41d94022b686df208dda6b06d77d9/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=6934618b7dd41d94022b686df208dda6b06d77d9", "patch": "@@ -141,15 +141,6 @@ pub enum RegionResolutionError<'tcx> {\n                    SubregionOrigin<'tcx>, Region,\n                    SubregionOrigin<'tcx>, Region),\n \n-    /// `SupSupConflict(v, origin1, r1, origin2, r2)`:\n-    ///\n-    /// Could not infer a value for `v` because `v <= r1` (due to\n-    /// `origin1`) and `v <= r2` (due to `origin2`) and\n-    /// `r1` and `r2` have no intersection.\n-    SupSupConflict(RegionVariableOrigin,\n-                   SubregionOrigin<'tcx>, Region,\n-                   SubregionOrigin<'tcx>, Region),\n-\n     /// For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\n     /// more specific errors message by suggesting to the user where they\n     /// should put a lifetime. In those cases we process and put those errors"}]}