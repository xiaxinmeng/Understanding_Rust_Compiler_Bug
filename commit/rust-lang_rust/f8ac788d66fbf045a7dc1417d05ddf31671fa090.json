{"sha": "f8ac788d66fbf045a7dc1417d05ddf31671fa090", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWM3ODhkNjZmYmYwNDVhN2RjMTQxN2QwNWRkZjMxNjcxZmEwOTA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-19T00:59:17Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-19T01:13:18Z"}, "message": "Print tag names in type error messages. Closes #834.", "tree": {"sha": "f701f9a42c29daf9c32b512ca369d5880ffa3a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f701f9a42c29daf9c32b512ca369d5880ffa3a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ac788d66fbf045a7dc1417d05ddf31671fa090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ac788d66fbf045a7dc1417d05ddf31671fa090", "html_url": "https://github.com/rust-lang/rust/commit/f8ac788d66fbf045a7dc1417d05ddf31671fa090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ac788d66fbf045a7dc1417d05ddf31671fa090/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a894dae8ec784480cc7d8b127a79f9418e8fa7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a894dae8ec784480cc7d8b127a79f9418e8fa7d", "html_url": "https://github.com/rust-lang/rust/commit/4a894dae8ec784480cc7d8b127a79f9418e8fa7d"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "6c125f0e176da33367dff9721a37c913c4521c48", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=f8ac788d66fbf045a7dc1417d05ddf31671fa090", "patch": "@@ -143,13 +143,13 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n              bind middle::ast_map::map_crate(*crate));\n     time(time_passes, \"external crate/lib resolution\",\n          bind creader::read_crates(sess, *crate));\n-    let d =\n+    let {def_map, ext_map} =\n         time(time_passes, \"resolution\",\n              bind resolve::resolve_crate(sess, ast_map, crate));\n     let freevars =\n         time(time_passes, \"freevar finding\",\n-             bind freevars::annotate_freevars(sess, d, crate));\n-    let ty_cx = ty::mk_ctxt(sess, d, ast_map, freevars);\n+             bind freevars::annotate_freevars(sess, def_map, crate));\n+    let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, ast_map, freevars);\n     time::<()>(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, crate));\n     time::<()>(time_passes, \"alt checking\",\n@@ -222,9 +222,9 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     alt ppm {\n       ppm_typed. {\n         let amap = middle::ast_map::map_crate(*crate);\n-        let d = resolve::resolve_crate(sess, amap, crate);\n-        let freevars = freevars::annotate_freevars(sess, d, crate);\n-        let ty_cx = ty::mk_ctxt(sess, d, amap, freevars);\n+        let {def_map, ext_map} = resolve::resolve_crate(sess, amap, crate);\n+        let freevars = freevars::annotate_freevars(sess, def_map, crate);\n+        let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, amap, freevars);\n         typeck::check_crate(ty_cx, crate);\n         ann = {pre: ann_paren_for_expr, post: bind ann_typed_post(ty_cx, _)};\n       }"}, {"sha": "80bd61cd979d12066362b3ce8429ec41652ba1a6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=f8ac788d66fbf045a7dc1417d05ddf31671fa090", "patch": "@@ -36,6 +36,7 @@ import syntax::print::pprust::*;\n \n export resolve_crate;\n export def_map;\n+export ext_map;\n \n // Resolving happens in two passes. The first pass collects defids of all\n // (internal) imports and modules, so that they can be looked up when needed,\n@@ -113,6 +114,7 @@ type indexed_mod =\n    only need to look at them to determine exports, which they can't control.*/\n \n type def_map = hashmap<node_id, def>;\n+type ext_map = hashmap<def_id, [ident]>;\n \n type env =\n     {cstore: cstore::cstore,\n@@ -133,7 +135,7 @@ tag dir { inside; outside; }\n tag namespace { ns_value; ns_type; ns_module; }\n \n fn resolve_crate(sess: session, amap: &ast_map::map, crate: @ast::crate) ->\n-   def_map {\n+    {def_map: def_map, ext_map: ext_map} {\n     let e =\n         @{cstore: sess.get_cstore(),\n           def_map: new_int_hash::<def>(),\n@@ -148,7 +150,7 @@ fn resolve_crate(sess: session, amap: &ast_map::map, crate: @ast::crate) ->\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);\n     resolve_names(e, crate);\n-    ret e.def_map;\n+    ret {def_map: e.def_map, ext_map: e.ext_map};\n }\n \n "}, {"sha": "df6b749f52f643933baa424ddead9f985839ef3e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f8ac788d66fbf045a7dc1417d05ddf31671fa090", "patch": "@@ -212,6 +212,9 @@ type ctxt =\n     @{ts: @type_store,\n       sess: session::session,\n       def_map: resolve::def_map,\n+      // We need the ext_map just for printing the types of tags defined in\n+      // other crates. Once we get cnames back it should go.\n+      ext_map: resolve::ext_map,\n       node_types: node_type_table,\n       items: ast_map::map,\n       freevars: freevars::freevar_map,\n@@ -392,7 +395,8 @@ fn mk_rcache() -> creader_cache {\n }\n \n \n-fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n+fn mk_ctxt(s: session::session, dm: resolve::def_map,\n+           em: hashmap<def_id, [ident]>, amap: ast_map::map,\n            freevars: freevars::freevar_map) -> ctxt {\n     let ntt: node_type_table =\n         @smallintmap::mk::<ty::ty_param_substs_opt_and_ty>();\n@@ -402,6 +406,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n         @{ts: ts,\n           sess: s,\n           def_map: dm,\n+          ext_map: em,\n           node_types: ntt,\n           items: amap,\n           freevars: freevars,"}, {"sha": "76df85015effab51bb9f7b353b1eb31cb43f8ef1", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ac788d66fbf045a7dc1417d05ddf31671fa090/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=f8ac788d66fbf045a7dc1417d05ddf31671fa090", "patch": "@@ -18,6 +18,8 @@ import pp::zerobreak;\n import pp::hardbreak;\n import ast::ty_mach_to_str;\n import syntax::ast;\n+import middle::ast_map;\n+import metadata::csearch;\n \n fn mode_str(m: &ty::mode) -> str {\n     alt m {\n@@ -35,6 +37,17 @@ fn fn_ident_to_string(id: ast::node_id, i: &ast::fn_ident) -> str {\n     ret alt i { none. { \"anon\" + int::str(id) } some(s) { s } };\n }\n \n+fn get_id_ident(cx: &ctxt, id: ast::def_id) -> str {\n+    if (id.crate != ast::local_crate) {\n+        str::connect(cx.ext_map.get(id), \"::\")\n+    } else {\n+        alt cx.items.find(id.node) {\n+          some(ast_map::node_item(it)) { it.ident }\n+          _ { fail \"get_id_ident: can't find item in ast_map\" }\n+        }\n+    }\n+}\n+\n fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n     fn fn_input_to_str(cx: &ctxt, input: &{mode: middle::ty::mode, ty: t}) ->\n        str {\n@@ -105,9 +118,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n         s += \"(\" + str::connect(strs, \",\") + \")\";\n       }\n       ty_tag(id, tps) {\n-        // The user should never see this if the cname is set properly!\n-\n-        s += \"<tag#\" + int::str(id.crate) + \":\" + int::str(id.node) + \">\";\n+        s += get_id_ident(cx, id);\n         if vec::len::<t>(tps) > 0u {\n             let strs: [str] = ~[];\n             for typ: t in tps { strs += ~[ty_to_str(cx, typ)]; }\n@@ -128,8 +139,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n         s += \"obj {\\n\\t\" + str::connect(strs, \"\\n\\t\") + \"\\n}\";\n       }\n       ty_res(id, _, _) {\n-        s +=\n-            \"<resource#\" + int::str(id.node) + \":\" + int::str(id.crate) + \">\";\n+        s += get_id_ident(cx, id);\n       }\n       ty_var(v) { s += \"<T\" + int::str(v) + \">\"; }\n       ty_param(id,_) {"}]}