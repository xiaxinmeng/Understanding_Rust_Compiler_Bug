{"sha": "1b7c3bcef9dc88e65c4914887071e432436a0b04", "node_id": "C_kwDOAAsO6NoAKDFiN2MzYmNlZjlkYzg4ZTY1YzQ5MTQ4ODcwNzFlNDMyNDM2YTBiMDQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-14T13:13:02Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-16T12:37:56Z"}, "message": "allow special behavior when printing const infer", "tree": {"sha": "01f87464073c0293985910cfe9dc78ca70ec0543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f87464073c0293985910cfe9dc78ca70ec0543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7c3bcef9dc88e65c4914887071e432436a0b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7c3bcef9dc88e65c4914887071e432436a0b04", "html_url": "https://github.com/rust-lang/rust/commit/1b7c3bcef9dc88e65c4914887071e432436a0b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7c3bcef9dc88e65c4914887071e432436a0b04/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ec2a47a43ceba5506165e0db5fc8355bff4073", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ec2a47a43ceba5506165e0db5fc8355bff4073", "html_url": "https://github.com/rust-lang/rust/commit/11ec2a47a43ceba5506165e0db5fc8355bff4073"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "4ea8241072ebe197bf1dec68b3bf86ba576538cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -497,16 +497,32 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n             let mut s = String::new();\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n-            let mut inner = self.inner.borrow_mut();\n-            let ty_vars = inner.type_variables();\n-            let getter = move |ty_vid| {\n-                let var_origin = ty_vars.var_origin(ty_vid);\n-                if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind {\n+            let ty_getter = move |ty_vid| {\n+                if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n+                    self.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+                {\n+                    Some(name.to_string())\n+                } else {\n+                    None\n+                }\n+            };\n+            printer.ty_infer_name_resolver = Some(Box::new(ty_getter));\n+            let const_getter = move |ct_vid| {\n+                if let ConstVariableOriginKind::ConstParameterDefinition(name, _) = self\n+                    .inner\n+                    .borrow_mut()\n+                    .const_unification_table()\n+                    .probe_value(ct_vid)\n+                    .origin\n+                    .kind\n+                {\n                     return Some(name.to_string());\n+                } else {\n+                    None\n                 }\n-                None\n             };\n-            printer.name_resolver = Some(Box::new(&getter));\n+            printer.const_infer_name_resolver = Some(Box::new(const_getter));\n+\n             let _ = if let ty::FnDef(..) = ty.kind() {\n                 // We don't want the regular output for `fn`s because it includes its path in\n                 // invalid pseudo-syntax, we want the `fn`-pointer output instead."}, {"sha": "94bbb711cfe38baba4a17b4ce5b1361ad544d9b4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -606,7 +606,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Infer(infer_ty) => {\n                 let verbose = self.tcx().sess.verbose();\n                 if let ty::TyVar(ty_vid) = infer_ty {\n-                    if let Some(name) = self.infer_ty_name(ty_vid) {\n+                    if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n                     } else {\n                         if verbose {\n@@ -1015,7 +1015,11 @@ pub trait PrettyPrinter<'tcx>:\n         }\n     }\n \n-    fn infer_ty_name(&self, _: ty::TyVid) -> Option<String> {\n+    fn ty_infer_name(&self, _: ty::TyVid) -> Option<String> {\n+        None\n+    }\n+\n+    fn const_infer_name(&self, _: ty::ConstVid<'tcx>) -> Option<String> {\n         None\n     }\n \n@@ -1203,7 +1207,14 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n                 }\n             }\n-            ty::ConstKind::Infer(..) => print_underscore!(),\n+            ty::ConstKind::Infer(infer_ct) => {\n+                match infer_ct {\n+                    ty::InferConst::Var(ct_vid)\n+                        if let Some(name) = self.const_infer_name(ct_vid) =>\n+                            p!(write(\"{}\", name)),\n+                    _ => print_underscore!(),\n+                }\n+            }\n             ty::ConstKind::Param(ParamConst { name, .. }) => p!(write(\"{}\", name)),\n             ty::ConstKind::Value(value) => {\n                 return self.pretty_print_const_value(value, ct.ty(), print_ty);\n@@ -1551,7 +1562,8 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n-    pub name_resolver: Option<Box<&'a dyn Fn(ty::TyVid) -> Option<String>>>,\n+    pub ty_infer_name_resolver: Option<Box<dyn Fn(ty::TyVid) -> Option<String> + 'a>>,\n+    pub const_infer_name_resolver: Option<Box<dyn Fn(ty::ConstVid<'tcx>) -> Option<String> + 'a>>,\n }\n \n impl<'a, 'tcx, F> Deref for FmtPrinter<'a, 'tcx, F> {\n@@ -1580,7 +1592,8 @@ impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n             binder_depth: 0,\n             printed_type_count: 0,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n-            name_resolver: None,\n+            ty_infer_name_resolver: None,\n+            const_infer_name_resolver: None,\n         }))\n     }\n }\n@@ -1835,8 +1848,12 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n }\n \n impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n-    fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n-        self.0.name_resolver.as_ref().and_then(|func| func(id))\n+    fn ty_infer_name(&self, id: ty::TyVid) -> Option<String> {\n+        self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n+    }\n+\n+    fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<String> {\n+        self.0.const_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n \n     fn print_value_path("}, {"sha": "9c59e672d8e4cbc523b4d3744bebd4b5e565c4cc", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -9,5 +9,5 @@ impl<const N: u32> Foo<N> {\n fn main() {\n     let foo = Foo::<1>::foo();\n     let foo = Foo::foo();\n-    //~^ error: type annotations needed for `Foo<{_: u32}>`\n+    //~^ error: type annotations needed for `Foo<N>`\n }"}, {"sha": "cccf433e32864ae0c58c21ec0b8519d91bc3161f", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `Foo<{_: u32}>`\n+error[E0282]: type annotations needed for `Foo<N>`\n   --> $DIR/doesnt_infer.rs:11:15\n    |\n LL |     let foo = Foo::foo();"}, {"sha": "b45e2cbc7372b3bfc3446714d9af3be41e609b2f", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.rs?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -4,5 +4,5 @@ use std::simd::Mask;\n \n fn main() {\n     let y = Mask::<_, _>::splat(false);\n-    //~^ error: type annotations needed for `Mask<_, {_: usize}>`\n+    //~^ ERROR: type annotations needed for\n }"}, {"sha": "347cd2364b2667cff9bb7103c23376cf4ef90006", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c3bcef9dc88e65c4914887071e432436a0b04/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=1b7c3bcef9dc88e65c4914887071e432436a0b04", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations needed for `Mask<_, {_: usize}>`\n+error[E0283]: type annotations needed for `Mask<_, LANES>`\n   --> $DIR/issue-91614.rs:6:13\n    |\n LL |     let y = Mask::<_, _>::splat(false);"}]}