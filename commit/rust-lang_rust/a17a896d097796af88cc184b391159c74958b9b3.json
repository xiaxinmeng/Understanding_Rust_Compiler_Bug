{"sha": "a17a896d097796af88cc184b391159c74958b9b3", "node_id": "C_kwDOAAsO6NoAKGExN2E4OTZkMDk3Nzk2YWY4OGNjMTg0YjM5MTE1OWM3NDk1OGI5YjM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-01-31T20:43:15Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T02:47:31Z"}, "message": "Update documentation somewhat", "tree": {"sha": "86b5ee272387d420f08e45dac487c3be9c5e4fbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86b5ee272387d420f08e45dac487c3be9c5e4fbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17a896d097796af88cc184b391159c74958b9b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH95UMACgkQ4u/UMJ4R\nyKg7Yg//an7v48fJFXTzM6ZBv3jcpQlhVO6Tkj1jfqtICwixog51ibDoOplUt+e3\n5CMkX7HnAYEqJbX6NzevuDxG8mNNd3U5pGjkwj//BgDMaUv27NGTLEEVZ+u6Cjwl\nHJPks9Hfpbu6AoCFvN+qedd+mG4u2Y5BXsd/tijpvxTQArE4wyfSzHkgLSqAh00w\nq3RcGVLE8fUpAVhOpWzH5F0Ks+dG8C143WI01b8lQGmxLXzqqwGURwAyV2rfNZYR\naMmqypF7WiOBsba2zd6D6yn9PPaAsVmzJk61ZXNHtf6PmjgfU6q8bYjhztCT2ePm\nTcdsrfJXUtmqVptqy5zpXvNOk2jQ50NDFiv5FZsc646esiN46KWEBlIoffo5fxKV\n40WggmdF+bx6BmQuTYW5QypJmbECngsuVHQy62ajIdMnZOyFUtw4roMXgUdQRlhw\nAkeNIY1b9b3kB9yt/TwP71lEL8mQPZfXCuKGWKHb+aWeBTXaUb+zsjJI6h0ul1L1\ndVWvTrDsYLWS4bV4Mz8HuGMBklADQFzNLjcW9z1jTqyi32TaRrRL2IhROIEJvM/T\ntFSD0SPS+pkgAsipc5LPdRcdT3VGZATQsIlvBHafkQP1U1xYWdd1Y0EXaw+CGC70\n7egSoqC/0dtXIEk6RC+CunXLLWvaymIyjMr/Qb6/CJh9dy/iB7A=\n=du+l\n-----END PGP SIGNATURE-----", "payload": "tree 86b5ee272387d420f08e45dac487c3be9c5e4fbc\nparent e98c7f720901f6a375bba749d08a75354c347ba6\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1643661795 -0800\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644029251 -0800\n\nUpdate documentation somewhat\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a896d097796af88cc184b391159c74958b9b3", "html_url": "https://github.com/rust-lang/rust/commit/a17a896d097796af88cc184b391159c74958b9b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17a896d097796af88cc184b391159c74958b9b3/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98c7f720901f6a375bba749d08a75354c347ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98c7f720901f6a375bba749d08a75354c347ba6", "html_url": "https://github.com/rust-lang/rust/commit/e98c7f720901f6a375bba749d08a75354c347ba6"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "e901d374a6f04b80bf1dcf7a1f1f1ba17e73c89f", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a17a896d097796af88cc184b391159c74958b9b3/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a896d097796af88cc184b391159c74958b9b3/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=a17a896d097796af88cc184b391159c74958b9b3", "patch": "@@ -87,6 +87,16 @@ enum ErrorData<C> {\n // higher already. We include it just because repr_bitpacked.rs's encoding\n // requires an alignment >= 4 (note that `#[repr(align)]` will not reduce the\n // alignment required by the struct, only increase it).\n+//\n+// If we add more variants to ErrorData, this can be increased to 8, but it\n+// should probably be behind `#[cfg_attr(target_pointer_width = \"64\", ...)]` or\n+// whatever cfg we're using to enable the `repr_bitpacked` code, since only the\n+// that version needs the alignment, and 8 is higher than the alignment we'll\n+// have on 32 bit platforms.\n+//\n+// (For the sake of being explicit: the alignment requirement here only matters\n+// if `error/repr_bitpacked.rs` is in use \u2014\u00a0for the unpacked repr it doesn't\n+// matter at all)\n #[repr(align(4))]\n pub(crate) struct SimpleMessage {\n     kind: ErrorKind,"}, {"sha": "a4d29b0ce43a20509aeb7a2129d6959d411192b3", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a17a896d097796af88cc184b391159c74958b9b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a896d097796af88cc184b391159c74958b9b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=a17a896d097796af88cc184b391159c74958b9b3", "patch": "@@ -321,23 +321,26 @@ fn kind_from_prim(ek: u32) -> Option<ErrorKind> {\n // that our encoding relies on for correctness and soundness. (Some of these are\n // a bit overly thorough/cautious, admittedly)\n //\n-// If any of these are hit on a platform that libstd supports, we should just\n-// make sure `repr_unpacked.rs` is used instead.\n+// If any of these are hit on a platform that libstd supports, we should likely\n+// just use `repr_unpacked.rs` there instead (unless the fix is easy).\n macro_rules! static_assert {\n     ($condition:expr) => {\n-        const _: [(); 0] = [(); (!$condition) as usize];\n+        const _: () = assert!($condition);\n+    };\n+    (@usize_eq: $lhs:expr, $rhs:expr) => {\n+        const _: [(); $lhs] = [(); $rhs];\n     };\n }\n \n // The bitpacking we use requires pointers be exactly 64 bits.\n-static_assert!(size_of::<NonNull<()>>() == 8);\n+static_assert!(@usize_eq: size_of::<NonNull<()>>(), 8);\n \n // We also require pointers and usize be the same size.\n-static_assert!(size_of::<NonNull<()>>() == size_of::<usize>());\n+static_assert!(@usize_eq: size_of::<NonNull<()>>(), size_of::<usize>());\n \n // `Custom` and `SimpleMessage` need to be thin pointers.\n-static_assert!(size_of::<&'static SimpleMessage>() == 8);\n-static_assert!(size_of::<Box<Custom>>() == 8);\n+static_assert!(@usize_eq: size_of::<&'static SimpleMessage>(), 8);\n+static_assert!(@usize_eq: size_of::<Box<Custom>>(), 8);\n \n // And they must have >= 4 byte alignment.\n static_assert!(align_of::<SimpleMessage>() >= 4);\n@@ -346,20 +349,21 @@ static_assert!(align_of::<Custom>() >= 4);\n // This is obviously true (`TAG_CUSTOM` is `0b01`), but our implementation of\n // `Repr::new_custom` and such would be wrong if it were not, so we check.\n static_assert!(size_of::<Custom>() >= TAG_CUSTOM);\n+\n // These two store a payload which is allowed to be zero, so they must be\n // non-zero to preserve the `NonNull`'s range invariant.\n static_assert!(TAG_OS != 0);\n static_assert!(TAG_SIMPLE != 0);\n // We can't tag `SimpleMessage`s, the tag must be 0.\n-static_assert!(TAG_SIMPLE_MESSAGE == 0);\n+static_assert!(@usize_eq: TAG_SIMPLE_MESSAGE, 0);\n \n // Check that the point of all of this still holds.\n //\n // We'd check against `io::Error`, but *technically* it's allowed to vary,\n // as it's not `#[repr(transparent)]`/`#[repr(C)]`. We could add that, but\n // the `#[repr()]` would show up in rustdoc, which might be seen as a stable\n // commitment.\n-static_assert!(size_of::<Repr>() == 8);\n-static_assert!(size_of::<Option<Repr>>() == 8);\n-static_assert!(size_of::<Result<(), Repr>>() == 8);\n-static_assert!(size_of::<Result<usize, Repr>>() == 16);\n+static_assert!(@usize_eq: size_of::<Repr>(), 8);\n+static_assert!(@usize_eq: size_of::<Option<Repr>>(), 8);\n+static_assert!(@usize_eq: size_of::<Result<(), Repr>>(), 8);\n+static_assert!(@usize_eq: size_of::<Result<usize, Repr>>(), 16);"}]}