{"sha": "f0c98b15cc82ac711432e038166fb2a8c5f32f10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzk4YjE1Y2M4MmFjNzExNDMyZTAzODE2NmZiMmE4YzVmMzJmMTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T01:34:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T01:34:22Z"}, "message": "Rollup merge of #82370 - 0yoyoyo:update-issue-81650-point-anonymous-lifetime, r=estebank\n\nImprove anonymous lifetime note to indicate the target span\n\nImprovement for  #81650\nCc #81995\n\nMessage after this improvement:\n(Improve note in the middle)\n\n```\nerror[E0311]: the parameter type `T` may not live long enough\n  --> src/main.rs:25:11\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |              -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n   |\nnote: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 24:40...\n  --> src/main.rs:24:40\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |                                        ^^^^^\nnote: ...so that the type `[closure@src/main.rs:25:17: 27:6]` will meet its required lifetime bounds\n  --> src/main.rs:25:11\n   |\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n```\n\nr? ``````@estebank``````", "tree": {"sha": "24958c7630b16fb498596522e9b4003c4210a975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24958c7630b16fb498596522e9b4003c4210a975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c98b15cc82ac711432e038166fb2a8c5f32f10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOaGeCRBK7hj4Ov3rIwAAdHIIAE1z7rfb50QvPAb9jz0/nVRv\n5LtzHDHCZcpIQN3btlutkkJChe79aM3JA+RolSMZyNfYT9DCDi4dw4s6Vk8RoS3W\niY5oJL3nnJYq4R3q1+vZN9SAcM3/xUnbCfCh23Nfsa6OEWoEgDmdOiP86+e+B9JG\n1M2xFjNNCtIm92KnelJpGRvlL9iDpKB1AVCjJwTzOIz8vY9WxCsyrkqKZIkMZLae\n2DT3FHdkYdl7fll5fY0GGUs2zdqDbK/mrxQbl1SJbcJqC/VDlpYB0j+uE/WJIP7k\niHip1CbKxIxdo8vLFV6rt0eW3dlMHZiNrUirKHcamzwjutaY5PSIDCgbLz3knZc=\n=l6UE\n-----END PGP SIGNATURE-----\n", "payload": "tree 24958c7630b16fb498596522e9b4003c4210a975\nparent cabe97272d782294e0d642135f3d8b13579b2929\nparent 75d1e303af04758c26e1aee63f2f0afd53dfd6f8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614389662 +0100\ncommitter GitHub <noreply@github.com> 1614389662 +0100\n\nRollup merge of #82370 - 0yoyoyo:update-issue-81650-point-anonymous-lifetime, r=estebank\n\nImprove anonymous lifetime note to indicate the target span\n\nImprovement for  #81650\nCc #81995\n\nMessage after this improvement:\n(Improve note in the middle)\n\n```\nerror[E0311]: the parameter type `T` may not live long enough\n  --> src/main.rs:25:11\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |              -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n   |\nnote: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 24:40...\n  --> src/main.rs:24:40\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |                                        ^^^^^\nnote: ...so that the type `[closure@src/main.rs:25:17: 27:6]` will meet its required lifetime bounds\n  --> src/main.rs:25:11\n   |\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n```\n\nr? ``````@estebank``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c98b15cc82ac711432e038166fb2a8c5f32f10", "html_url": "https://github.com/rust-lang/rust/commit/f0c98b15cc82ac711432e038166fb2a8c5f32f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c98b15cc82ac711432e038166fb2a8c5f32f10/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cabe97272d782294e0d642135f3d8b13579b2929", "url": "https://api.github.com/repos/rust-lang/rust/commits/cabe97272d782294e0d642135f3d8b13579b2929", "html_url": "https://github.com/rust-lang/rust/commit/cabe97272d782294e0d642135f3d8b13579b2929"}, {"sha": "75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d1e303af04758c26e1aee63f2f0afd53dfd6f8", "html_url": "https://github.com/rust-lang/rust/commit/75d1e303af04758c26e1aee63f2f0afd53dfd6f8"}], "stats": {"total": 325, "additions": 158, "deletions": 167}, "files": [{"sha": "eeff48a63950e03f58e3a244abf363879e065759", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -50,6 +50,7 @@ use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n use crate::infer;\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -179,7 +180,14 @@ fn msg_span_from_early_bound_and_free_regions(\n         }\n         ty::ReFree(ref fr) => match fr.bound_region {\n             ty::BrAnon(idx) => {\n-                (format!(\"the anonymous lifetime #{} defined on\", idx + 1), tcx.hir().span(node))\n+                if let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region) {\n+                    (\"the anonymous lifetime defined on\".to_string(), ty.span)\n+                } else {\n+                    (\n+                        format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                        tcx.hir().span(node),\n+                    )\n+                }\n             }\n             _ => (\n                 format!(\"the lifetime `{}` as defined on\", region),"}, {"sha": "1b35c4032f44c5d14e3fe30e935deb79a7dc4a64", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -1,6 +1,7 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n@@ -66,9 +67,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let scope_def_id_sub = anon_reg_sub.def_id;\n         let bregion_sub = anon_reg_sub.boundregion;\n \n-        let ty_sup = self.find_anon_type(sup, &bregion_sup)?;\n+        let ty_sup = find_anon_type(self.tcx(), sup, &bregion_sup)?;\n \n-        let ty_sub = self.find_anon_type(sub, &bregion_sub)?;\n+        let ty_sub = find_anon_type(self.tcx(), sub, &bregion_sub)?;\n \n         debug!(\n             \"try_report_anon_anon_conflict: found_param1={:?} sup={:?} br1={:?}\","}, {"sha": "ffdaedf8666c3f32ef541c7a9a19a619ca97f45f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 55, "deletions": 59, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -1,72 +1,68 @@\n-use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::{self, Region, TyCtxt};\n \n-impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n-    /// This function calls the `visit_ty` method for the parameters\n-    /// corresponding to the anonymous regions. The `nested_visitor.found_type`\n-    /// contains the anonymous type.\n-    ///\n-    /// # Arguments\n-    /// region - the anonymous region corresponding to the anon_anon conflict\n-    /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n-    ///\n-    /// # Example\n-    /// ```\n-    /// fn foo(x: &mut Vec<&u8>, y: &u8)\n-    ///    { x.push(y); }\n-    /// ```\n-    /// The function returns the nested type corresponding to the anonymous region\n-    /// for e.g., `&u8` and Vec<`&u8`.\n-    pub(super) fn find_anon_type(\n-        &self,\n-        region: Region<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<(&hir::Ty<'tcx>, &hir::FnDecl<'tcx>)> {\n-        if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n-            let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n-            let fndecl = match self.tcx().hir().get(hir_id) {\n-                Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n-                | Node::TraitItem(&hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(ref m, ..),\n-                    ..\n-                })\n-                | Node::ImplItem(&hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(ref m, ..), ..\n-                }) => &m.decl,\n-                _ => return None,\n-            };\n+/// This function calls the `visit_ty` method for the parameters\n+/// corresponding to the anonymous regions. The `nested_visitor.found_type`\n+/// contains the anonymous type.\n+///\n+/// # Arguments\n+/// region - the anonymous region corresponding to the anon_anon conflict\n+/// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n+///\n+/// # Example\n+/// ```\n+/// fn foo(x: &mut Vec<&u8>, y: &u8)\n+///    { x.push(y); }\n+/// ```\n+/// The function returns the nested type corresponding to the anonymous region\n+/// for e.g., `&u8` and Vec<`&u8`.\n+pub(crate) fn find_anon_type(\n+    tcx: TyCtxt<'tcx>,\n+    region: Region<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnDecl<'tcx>)> {\n+    if let Some(anon_reg) = tcx.is_suitable_region(region) {\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n+        let fndecl = match tcx.hir().get(hir_id) {\n+            Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n+            | Node::TraitItem(&hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(ref m, ..), ..\n+            })\n+            | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(ref m, ..), .. }) => {\n+                &m.decl\n+            }\n+            _ => return None,\n+        };\n \n-            fndecl\n-                .inputs\n-                .iter()\n-                .find_map(|arg| self.find_component_for_bound_region(arg, br))\n-                .map(|ty| (ty, &**fndecl))\n-        } else {\n-            None\n-        }\n+        fndecl\n+            .inputs\n+            .iter()\n+            .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n+            .map(|ty| (ty, &**fndecl))\n+    } else {\n+        None\n     }\n+}\n \n-    // This method creates a FindNestedTypeVisitor which returns the type corresponding\n-    // to the anonymous region.\n-    fn find_component_for_bound_region(\n-        &self,\n-        arg: &'tcx hir::Ty<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<&'tcx hir::Ty<'tcx>> {\n-        let mut nested_visitor = FindNestedTypeVisitor {\n-            tcx: self.tcx(),\n-            bound_region: *br,\n-            found_type: None,\n-            current_index: ty::INNERMOST,\n-        };\n-        nested_visitor.visit_ty(arg);\n-        nested_visitor.found_type\n-    }\n+// This method creates a FindNestedTypeVisitor which returns the type corresponding\n+// to the anonymous region.\n+fn find_component_for_bound_region(\n+    tcx: TyCtxt<'tcx>,\n+    arg: &'tcx hir::Ty<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<&'tcx hir::Ty<'tcx>> {\n+    let mut nested_visitor = FindNestedTypeVisitor {\n+        tcx,\n+        bound_region: *br,\n+        found_type: None,\n+        current_index: ty::INNERMOST,\n+    };\n+    nested_visitor.visit_ty(arg);\n+    nested_visitor.found_type\n }\n \n // The FindNestedTypeVisitor captures the corresponding `hir::Ty` of the"}, {"sha": "e20436690b3aa1d42309ea097afa3fa5bc216218", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::source_map::Span;\n \n mod different_lifetimes;\n-mod find_anon_type;\n+pub mod find_anon_type;\n mod named_anon_conflict;\n mod placeholder_error;\n mod static_impl_trait;"}, {"sha": "2f3c0d6957a613f12ff33bd428369aab78cc83e1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -1,5 +1,6 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::Visitor;\n@@ -74,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n+        if let Some((_, fndecl)) = find_anon_type(self.tcx(), anon, &br) {\n             if self.is_self_anon(is_first, scope_def_id) {\n                 return None;\n             }"}, {"sha": "35bcf286c440fadbfec629278321c341725afff7", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.a();\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 3:5...\n-  --> $DIR/issue-16683.rs:3:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 3:10...\n+  --> $DIR/issue-16683.rs:3:10\n    |\n LL |     fn b(&self) {\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-16683.rs:4:9\n    |"}, {"sha": "995f5f1fc3de3bfb7f89300aac330673085bc626", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,11 +6,11 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected struct `Foo<'a>`\n               found struct `Foo<'_>`\n-note: the anonymous lifetime #2 defined on the method body at 6:5...\n-  --> $DIR/issue-17740.rs:6:5\n+note: the anonymous lifetime defined on the method body at 6:23...\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n   --> $DIR/issue-17740.rs:5:7\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the impl at 5:7...\n    |\n LL | impl <'a> Foo<'a>{\n    |       ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 6:5\n-  --> $DIR/issue-17740.rs:6:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 6:23\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "846e8939b53b80473833e0ab4ce55e1d00f88b7e", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.foo();\n    |              ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 6:5...\n-  --> $DIR/issue-17758.rs:6:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 6:12...\n+  --> $DIR/issue-17758.rs:6:12\n    |\n LL |     fn bar(&self) {\n-   |     ^^^^^^^^^^^^^\n+   |            ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-17758.rs:7:9\n    |"}, {"sha": "3c27f7058591c5618defc3b0786d9d6f08bf5aa6", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,11 +6,11 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the anonymous lifetime #2 defined on the method body at 8:5...\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: the anonymous lifetime defined on the method body at 8:24...\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'_` as defined on the impl at 5:5...\n    |\n LL |     &str,\n    |     ^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 8:5\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 8:24\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e68482d1caf696db159003465d951dac2fddcc84", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 28:58...\n+  --> $DIR/issue-20831-debruijn.rs:28:58\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "80eecb42d1cef7fc988f10059d6915fc360f3ae7", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,11 +6,11 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the anonymous lifetime #1 defined on the method body at 5:5...\n-  --> $DIR/issue-27942.rs:5:5\n+note: the anonymous lifetime defined on the method body at 5:15...\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the trait at 3:18\n   --> $DIR/issue-27942.rs:3:18\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the trait at 3:18...\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 5:5\n-  --> $DIR/issue-27942.rs:5:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 5:15\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "23bb12f942075fab0a3e05f56437039b4f54ceb8", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -9,11 +9,11 @@ note: ...the reference is valid for the lifetime `'_` as defined on the impl at\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n-  --> $DIR/issue-52742.rs:13:5\n+note: ...but the borrowed content is only valid for the anonymous lifetime defined on the method body at 13:31\n+  --> $DIR/issue-52742.rs:13:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "36721f923f7da7846172b8cc7f4fac579465c949", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` d\n LL |         Foo { bar }\n    |         ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n-  --> $DIR/issue-55394.rs:8:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 8:17...\n+  --> $DIR/issue-55394.rs:8:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-55394.rs:9:15\n    |"}, {"sha": "6498ecfbe6f9b555d5a1d15e2a1a71b12313811a", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |         C { f: b }\n    |         ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 16:5...\n-  --> $DIR/type-alias-free-regions.rs:16:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 16:24...\n+  --> $DIR/type-alias-free-regions.rs:16:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:17:16\n    |\n@@ -35,11 +35,11 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 26:5...\n-  --> $DIR/type-alias-free-regions.rs:26:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 26:23...\n+  --> $DIR/type-alias-free-regions.rs:26:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:27:25\n    |"}, {"sha": "95eb4d1f75b72ee8de7d2091b73a9e5f69cc5151", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,11 +6,11 @@ LL |         self.f = b;\n    |\n    = note: expected struct `Box<Box<&'a isize>>`\n               found struct `Box<Box<&isize>>`\n-note: the anonymous lifetime #2 defined on the method body at 21:5...\n-  --> $DIR/regions-infer-paramd-indirect.rs:21:5\n+note: the anonymous lifetime defined on the method body at 21:36...\n+  --> $DIR/regions-infer-paramd-indirect.rs:21:36\n    |\n LL |     fn set_f_bad(&mut self, b: Box<B>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |"}, {"sha": "7e07a5775bb12f444d805f380d2ad5ee0cf1ecde", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -7,11 +7,11 @@ LL | |         t.test();\n LL | |     });\n    | |______^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e7d52978400f710952d347a2700cd472d8ce949", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -6,11 +6,11 @@ LL | fn func<T: Test>(foo: &Foo, t: T) {\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |"}, {"sha": "b509610b89e2699f1626053e30bf78944803e041", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -25,56 +25,47 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:68:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 68:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:68:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 68:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:34\n    |\n-LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |                                  ^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}, {"sha": "789fff7acc29bfca9d9bab28a35aff24c9d62a14", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -33,14 +33,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37\n    |\n@@ -57,14 +54,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n@@ -81,11 +75,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |"}, {"sha": "133ecab2296b747e0d9aba2f5e518f8bbfac7a65", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c98b15cc82ac711432e038166fb2a8c5f32f10/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=f0c98b15cc82ac711432e038166fb2a8c5f32f10", "patch": "@@ -33,11 +33,11 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #1 defined on the method body at 37:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: the anonymous lifetime defined on the method body at 37:21...\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -57,11 +57,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 37:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 37:21\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n \n error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n@@ -71,11 +71,11 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #2 defined on the method body at 39:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: the anonymous lifetime defined on the method body at 39:22...\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -95,11 +95,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 39:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 39:22\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}