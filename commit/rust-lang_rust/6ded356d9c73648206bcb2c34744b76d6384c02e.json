{"sha": "6ded356d9c73648206bcb2c34744b76d6384c02e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZWQzNTZkOWM3MzY0ODIwNmJjYjJjMzQ3NDRiNzZkNjM4NGMwMmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T09:25:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T09:25:50Z"}, "message": "Rollup merge of #71494 - flip1995:while_let_span, r=petrochenkov\n\nFix span of while (let) expressions after lowering\n\nCredit goes to @alex-700 who found this while trying to fix a suggestion in Clippy.\n\nWhile `if`, `try`, `for` and `await` expressions get the span of the original expression when desugared, `while` loops got the span of the scrutinee, which lead to weird code, when building the suggestion, that randomly worked: https://github.com/rust-lang/rust-clippy/pull/5511/files#diff-df4e9d2bf840a5f2e3b580bef73da3bcR106-R108\n\nI'm wondering, if `DesugaringKind` should get a variant `WhileLoop` and instead of using the span of the `ast::ExprKind::While` expr directly, a new span with `self.mark_span_with_reason` should be used, like it is done with `for` loops.\n\nThere was some fallout, but I think that is acceptable. If not, I need some help to find out where this can be fixed.", "tree": {"sha": "b621f25bcac4d4e2c531c2de9b46672f7be42c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b621f25bcac4d4e2c531c2de9b46672f7be42c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ded356d9c73648206bcb2c34744b76d6384c02e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepAIeCRBK7hj4Ov3rIwAAdHIIAEQE9xmtU8Jt7fwHDPMihUkS\ne1DClIRH4QgEjwTa5tNsoWa7ZJZ+x6Kkci788EAgkdscS/oq55uAEuGEFIglV0dE\noX62K44wvh+jiqI/LYJBhNHCPXGRGijHD8KLFof6YcS04mDgAjCpc8aFjuZbNboD\nN2xqzuY22Zylr7vMQcU74eke2KfrclOaFP1EkUBixoAxsXaxNVMyntplj8soKijb\nd/3s8LBwK98aA1ThFRuJ2sN+NFowO3xDIYpA5kpyp2VEnAD2Plgv21syh5v0Ibp+\nAJXKDPfJvJkAbQ3Bob0NxByz8xgMHurUPCS2+rZ+Onfc/LdeBDabeGBgKed07KA=\n=YZk4\n-----END PGP SIGNATURE-----\n", "payload": "tree b621f25bcac4d4e2c531c2de9b46672f7be42c18\nparent cbbf065425050a90126e0da070a92109faf62140\nparent 898cbf265a1bff978a258b0c63028b2df5d4f6c1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587806750 +0200\ncommitter GitHub <noreply@github.com> 1587806750 +0200\n\nRollup merge of #71494 - flip1995:while_let_span, r=petrochenkov\n\nFix span of while (let) expressions after lowering\n\nCredit goes to @alex-700 who found this while trying to fix a suggestion in Clippy.\n\nWhile `if`, `try`, `for` and `await` expressions get the span of the original expression when desugared, `while` loops got the span of the scrutinee, which lead to weird code, when building the suggestion, that randomly worked: https://github.com/rust-lang/rust-clippy/pull/5511/files#diff-df4e9d2bf840a5f2e3b580bef73da3bcR106-R108\n\nI'm wondering, if `DesugaringKind` should get a variant `WhileLoop` and instead of using the span of the `ast::ExprKind::While` expr directly, a new span with `self.mark_span_with_reason` should be used, like it is done with `for` loops.\n\nThere was some fallout, but I think that is acceptable. If not, I need some help to find out where this can be fixed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ded356d9c73648206bcb2c34744b76d6384c02e", "html_url": "https://github.com/rust-lang/rust/commit/6ded356d9c73648206bcb2c34744b76d6384c02e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ded356d9c73648206bcb2c34744b76d6384c02e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbf065425050a90126e0da070a92109faf62140", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf065425050a90126e0da070a92109faf62140", "html_url": "https://github.com/rust-lang/rust/commit/cbbf065425050a90126e0da070a92109faf62140"}, {"sha": "898cbf265a1bff978a258b0c63028b2df5d4f6c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/898cbf265a1bff978a258b0c63028b2df5d4f6c1", "html_url": "https://github.com/rust-lang/rust/commit/898cbf265a1bff978a258b0c63028b2df5d4f6c1"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "cbe192d35e5934cb748fb3f5add321c4220fba48", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=6ded356d9c73648206bcb2c34744b76d6384c02e", "patch": "@@ -397,12 +397,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let then_arm = self.arm(then_pat, self.arena.alloc(then_expr));\n \n         // `match <scrutinee> { ... }`\n-        let match_expr = self.expr_match(\n-            scrutinee.span,\n-            scrutinee,\n-            arena_vec![self; then_arm, else_arm],\n-            desugar,\n-        );\n+        let match_expr =\n+            self.expr_match(span, scrutinee, arena_vec![self; then_arm, else_arm], desugar);\n \n         // `[opt_ident]: loop { ... }`\n         hir::ExprKind::Loop(self.block_expr(self.arena.alloc(match_expr)), opt_label, source)"}, {"sha": "5d9c1f6b230d9006c54a5e97c148761b14459682", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=6ded356d9c73648206bcb2c34744b76d6384c02e", "patch": "@@ -57,7 +57,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb5: {\n         StorageDead(_4);                 // bb5[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n@@ -74,7 +74,7 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb7: {\n-        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         return;                          // bb7[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n     }\n }"}, {"sha": "d4845290d8a908d3528444f8d0f275dc0a28f759", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ded356d9c73648206bcb2c34744b76d6384c02e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=6ded356d9c73648206bcb2c34744b76d6384c02e", "patch": "@@ -9,8 +9,14 @@ LL |     while true {\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n-LL |         true\n-   |         ^^^^ expected `()`, found `bool`\n+LL | /     while true {\n+LL | |         true\n+   | |         ^^^^ expected `()`, found `bool`\n+LL | |\n+LL | |     }\n+   | |     -- help: consider using a semicolon here\n+   | |_____|\n+   |       expected this to be `()`\n \n error: aborting due to previous error; 1 warning emitted\n "}]}