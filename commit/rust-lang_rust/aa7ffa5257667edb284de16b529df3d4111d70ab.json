{"sha": "aa7ffa5257667edb284de16b529df3d4111d70ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhN2ZmYTUyNTc2NjdlZGIyODRkZTE2YjUyOWRmM2Q0MTExZDcwYWI=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-01T13:39:09Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-01T13:39:09Z"}, "message": "Fix FP in `same_item_push`\n\nDon't emit a lint when the pushed item doesn't have Clone trait", "tree": {"sha": "e0917c508640ae11d53a84dbfcc64394c59eadb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0917c508640ae11d53a84dbfcc64394c59eadb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7ffa5257667edb284de16b529df3d4111d70ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7ffa5257667edb284de16b529df3d4111d70ab", "html_url": "https://github.com/rust-lang/rust/commit/aa7ffa5257667edb284de16b529df3d4111d70ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7ffa5257667edb284de16b529df3d4111d70ab/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001c1c51d2d4b6964a2f0c0c5936bfaacf49a585", "url": "https://api.github.com/repos/rust-lang/rust/commits/001c1c51d2d4b6964a2f0c0c5936bfaacf49a585", "html_url": "https://github.com/rust-lang/rust/commit/001c1c51d2d4b6964a2f0c0c5936bfaacf49a585"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "25345f8fa316c1b87eb016b7fa6c6b9faee0c3a6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 43, "deletions": 35, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ffa5257667edb284de16b529df3d4111d70ab/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ffa5257667edb284de16b529df3d4111d70ab/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=aa7ffa5257667edb284de16b529df3d4111d70ab", "patch": "@@ -1140,43 +1140,51 @@ fn detect_same_item_push<'tcx>(\n     walk_expr(&mut same_item_push_visitor, body);\n     if same_item_push_visitor.should_lint {\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push {\n-            // Make sure that the push does not involve possibly mutating values\n-            if let PatKind::Wild = pat.kind {\n-                let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n-                let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n-                if let ExprKind::Path(ref qpath) = pushed_item.kind {\n-                    if_chain! {\n-                        if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id);\n-                        let node = cx.tcx.hir().get(hir_id);\n-                        if let Node::Binding(pat) = node;\n-                        if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                        if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n-                        then {\n-                            span_lint_and_help(\n-                                cx,\n-                                SAME_ITEM_PUSH,\n-                                vec.span,\n-                                \"it looks like the same item is being pushed into this Vec\",\n-                                None,\n-                                &format!(\n-                                    \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                    item_str, vec_str, item_str\n-                                ),\n-                            )\n+            let ty = cx.typeck_results().expr_ty(pushed_item);\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .clone_trait()\n+                .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n+            {\n+                // Make sure that the push does not involve possibly mutating values\n+                if let PatKind::Wild = pat.kind {\n+                    let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+                    let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+                    if let ExprKind::Path(ref qpath) = pushed_item.kind {\n+                        if_chain! {\n+                            if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id);\n+                            let node = cx.tcx.hir().get(hir_id);\n+                            if let Node::Binding(pat) = node;\n+                            if let PatKind::Binding(bind_ann, ..) = pat.kind;\n+                            if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n+                            then {\n+                                span_lint_and_help(\n+                                    cx,\n+                                    SAME_ITEM_PUSH,\n+                                    vec.span,\n+                                    \"it looks like the same item is being pushed into this Vec\",\n+                                    None,\n+                                    &format!(\n+                                        \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                        item_str, vec_str, item_str\n+                                    ),\n+                                )\n+                            }\n                         }\n+                    } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n+                        span_lint_and_help(\n+                            cx,\n+                            SAME_ITEM_PUSH,\n+                            vec.span,\n+                            \"it looks like the same item is being pushed into this Vec\",\n+                            None,\n+                            &format!(\n+                                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                item_str, vec_str, item_str\n+                            ),\n+                        )\n                     }\n-                } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n-                    span_lint_and_help(\n-                        cx,\n-                        SAME_ITEM_PUSH,\n-                        vec.span,\n-                        \"it looks like the same item is being pushed into this Vec\",\n-                        None,\n-                        &format!(\n-                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                            item_str, vec_str, item_str\n-                        ),\n-                    )\n                 }\n             }\n         }"}, {"sha": "0903a8738265195812bc110d39e376a7472d2651", "filename": "tests/ui/same_item_push.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa7ffa5257667edb284de16b529df3d4111d70ab/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7ffa5257667edb284de16b529df3d4111d70ab/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=aa7ffa5257667edb284de16b529df3d4111d70ab", "patch": "@@ -94,4 +94,10 @@ fn main() {\n         vec13.push(item);\n         item += 10;\n     }\n+\n+    // Fix #5979\n+    let mut vec14: Vec<std::fs::File> = Vec::new();\n+    for _ in 0..10 {\n+        vec14.push(std::fs::File::open(\"foobar\").unwrap());\n+    }\n }"}]}