{"sha": "5404deeb64f4449079f5165ace6bfa1e52ca4b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDRkZWViNjRmNDQ0OTA3OWY1MTY1YWNlNmJmYTFlNTJjYTRiMzM=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-10-14T20:27:48Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-12-01T11:12:48Z"}, "message": "Gracefully handle mistyping -> as => in function return type", "tree": {"sha": "b4a0cee6781d257ae05ebaf6d8a6cdffc1104946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a0cee6781d257ae05ebaf6d8a6cdffc1104946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5404deeb64f4449079f5165ace6bfa1e52ca4b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5404deeb64f4449079f5165ace6bfa1e52ca4b33", "html_url": "https://github.com/rust-lang/rust/commit/5404deeb64f4449079f5165ace6bfa1e52ca4b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5404deeb64f4449079f5165ace6bfa1e52ca4b33/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4926d01ada661d4fbffb0e5b1708ae5463d47b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4926d01ada661d4fbffb0e5b1708ae5463d47b3", "html_url": "https://github.com/rust-lang/rust/commit/c4926d01ada661d4fbffb0e5b1708ae5463d47b3"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "790a0c867af8bd993972f0dc86ed48a394afe6d0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -1,5 +1,5 @@\n use super::pat::{GateOr, PARAM_EXPECTED};\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverFatArrow, RecoverQPath};\n use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n@@ -1647,7 +1647,7 @@ impl<'a> Parser<'a> {\n             self.expect_or()?;\n             args\n         };\n-        let output = self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes)?;\n+        let output = self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes, RecoverFatArrow::Yes)?;\n \n         Ok(P(FnDecl { inputs, output }))\n     }"}, {"sha": "9e342a0d681319f24b9dda39550d651fb4923395", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -1,5 +1,5 @@\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverFatArrow, RecoverQPath};\n use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n@@ -1648,7 +1648,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<FnDecl>> {\n         Ok(P(FnDecl {\n             inputs: self.parse_fn_params(req_name)?,\n-            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n+            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes, RecoverFatArrow::Yes)?,\n         }))\n     }\n "}, {"sha": "311a4829fcfc54c0a16e045b31d2e703ca03d043", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -1,4 +1,4 @@\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverFatArrow, RecoverQPath};\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ptr::P;\n@@ -231,7 +231,8 @@ impl<'a> Parser<'a> {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n                     let span = ident.span.to(self.prev_token.span);\n-                    let output = self.parse_ret_ty(AllowPlus::No, RecoverQPath::No)?;\n+                    let output =\n+                        self.parse_ret_ty(AllowPlus::No, RecoverQPath::No, RecoverFatArrow::No)?;\n                     ParenthesizedArgs { inputs, output, span }.into()\n                 };\n "}, {"sha": "ff19c5cfa856414a4c661ada930fef2d94d1d18c", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -43,6 +43,12 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n+#[derive(PartialEq)]\n+pub(super) enum RecoverFatArrow {\n+    Yes,\n+    No,\n+}\n+\n // Is `...` (`CVarArgs`) legal at this level of type parsing?\n #[derive(PartialEq)]\n enum AllowCVariadic {\n@@ -87,11 +93,26 @@ impl<'a> Parser<'a> {\n         &mut self,\n         allow_plus: AllowPlus,\n         recover_qpath: RecoverQPath,\n+        recover_fat_arrow: RecoverFatArrow,\n     ) -> PResult<'a, FnRetTy> {\n         Ok(if self.eat(&token::RArrow) {\n             // FIXME(Centril): Can we unconditionally `allow_plus`?\n             let ty = self.parse_ty_common(allow_plus, recover_qpath, AllowCVariadic::No)?;\n             FnRetTy::Ty(ty)\n+        } else if recover_fat_arrow == RecoverFatArrow::Yes && self.token == token::FatArrow {\n+            // Don't `eat` to prevent `=>` from being added as an expected token which isn't\n+            // actually expected and could only confuse users\n+            self.bump();\n+            self.struct_span_err(self.prev_token.span, \"return types are denoted using `->`\")\n+                .span_suggestion_short(\n+                    self.prev_token.span,\n+                    \"use `->` instead\",\n+                    \"->\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            let ty = self.parse_ty_common(allow_plus, recover_qpath, AllowCVariadic::No)?;\n+            FnRetTy::Ty(ty)\n         } else {\n             FnRetTy::Default(self.token.span.shrink_to_lo())\n         })"}, {"sha": "0acca85aa679fedb1db1737b97a29f822cd21ed7", "filename": "src/test/ui/fn/fn-fat-arrow-return.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.fixed?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(unused)]\n+fn a() -> usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "4bdcd70d7fc43d43683772123a37f75ddac912d8", "filename": "src/test/ui/fn/fn-fat-arrow-return.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(unused)]\n+fn a() => usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "1fcdb18a51472e7ec15cc140ce7950e88f777aab", "filename": "src/test/ui/fn/fn-fat-arrow-return.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return.stderr?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -0,0 +1,8 @@\n+error: return types are denoted using `->`\n+  --> $DIR/fn-fat-arrow-return.rs:3:8\n+   |\n+LL | fn a() => usize { 0 }\n+   |        ^^ help: use `->` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "316fa2cbf02ed44615ad52a92dc8f4497869bf2b", "filename": "src/test/ui/fn/fn-fat-arrow-return2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.rs?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -0,0 +1,10 @@\n+fn a() => impl Fn() => bool {\n+    //~^ ERROR return types are denoted using `->`\n+    //~| ERROR expected `;` or `{`, found `=>`\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let foo = |a: bool| => bool { a };\n+    dbg!(foo(false));\n+}"}, {"sha": "a6f9fe3b5732c6436dee1df16f62a85d8df47d92", "filename": "src/test/ui/fn/fn-fat-arrow-return2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5404deeb64f4449079f5165ace6bfa1e52ca4b33/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-fat-arrow-return2.stderr?ref=5404deeb64f4449079f5165ace6bfa1e52ca4b33", "patch": "@@ -0,0 +1,14 @@\n+error: return types are denoted using `->`\n+  --> $DIR/fn-fat-arrow-return2.rs:1:8\n+   |\n+LL | fn a() => impl Fn() => bool {\n+   |        ^^ help: use `->` instead\n+\n+error: expected `;` or `{`, found `=>`\n+  --> $DIR/fn-fat-arrow-return2.rs:1:21\n+   |\n+LL | fn a() => impl Fn() => bool {\n+   |                     ^^ expected `;` or `{`\n+\n+error: aborting due to 2 previous errors\n+"}]}