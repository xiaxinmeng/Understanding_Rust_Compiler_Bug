{"sha": "2cf964967c48376c97fa6e2288ca26f8081f78c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjk2NDk2N2M0ODM3NmM5N2ZhNmUyMjg4Y2EyNmY4MDgxZjc4YzM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-16T08:50:34Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:05Z"}, "message": "Immutable `ExpansionData`.", "tree": {"sha": "6733195bb02cd1ea0b452c8c753f9ecf36bdf152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6733195bb02cd1ea0b452c8c753f9ecf36bdf152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf964967c48376c97fa6e2288ca26f8081f78c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf964967c48376c97fa6e2288ca26f8081f78c3", "html_url": "https://github.com/rust-lang/rust/commit/2cf964967c48376c97fa6e2288ca26f8081f78c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf964967c48376c97fa6e2288ca26f8081f78c3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c7333f51cac1e492f3d6d229149f14c160d662", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c7333f51cac1e492f3d6d229149f14c160d662", "html_url": "https://github.com/rust-lang/rust/commit/f3c7333f51cac1e492f3d6d229149f14c160d662"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "79f133770b36764bb7d913356a2dbe2b48b7bc17", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2cf964967c48376c97fa6e2288ca26f8081f78c3", "patch": "@@ -203,7 +203,7 @@ impl<'b> Resolver<'b> {\n                                 let ext = macro_rules::compile(&self.session.parse_sess, &def);\n                                 let shadowing =\n                                     self.resolve_macro_name(Mark::root(), name, false).is_some();\n-                                self.expansion_data[&Mark::root()].module.macros.borrow_mut()\n+                                self.expansion_data[&Mark::root()].module.get().macros.borrow_mut()\n                                     .insert(name, macros::NameBinding {\n                                         ext: Rc::new(ext),\n                                         expansion: expansion,\n@@ -525,8 +525,8 @@ pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) {\n-        self.resolver.expansion_data.get_mut(&Mark::from_placeholder_id(id)).unwrap().module =\n-            self.resolver.current_module;\n+        let mark = Mark::from_placeholder_id(id);\n+        self.resolver.expansion_data[&mark].module.set(self.resolver.current_module);\n     }\n }\n "}, {"sha": "a03d23a93941571b2e8684a629cc9325e245cb48", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2cf964967c48376c97fa6e2288ca26f8081f78c3", "patch": "@@ -77,6 +77,7 @@ use std::mem::replace;\n use std::rc::Rc;\n \n use resolve_imports::{ImportDirective, NameResolution};\n+use macros::ExpansionData;\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -1088,7 +1089,7 @@ pub struct Resolver<'a> {\n     macro_names: FnvHashSet<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n-    expansion_data: FnvHashMap<Mark, macros::ExpansionData<'a>>,\n+    expansion_data: FnvHashMap<Mark, &'a ExpansionData<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1097,6 +1098,7 @@ pub struct ResolverArenas<'a> {\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n     import_directives: arena::TypedArena<ImportDirective<'a>>,\n     name_resolutions: arena::TypedArena<RefCell<NameResolution<'a>>>,\n+    expansion_data: arena::TypedArena<ExpansionData<'a>>,\n }\n \n impl<'a> ResolverArenas<'a> {\n@@ -1120,6 +1122,9 @@ impl<'a> ResolverArenas<'a> {\n     fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {\n         self.name_resolutions.alloc(Default::default())\n     }\n+    fn alloc_expansion_data(&'a self, expansion_data: ExpansionData<'a>) -> &'a ExpansionData<'a> {\n+        self.expansion_data.alloc(expansion_data)\n+    }\n }\n \n impl<'a> ty::NodeIdTree for Resolver<'a> {\n@@ -1206,7 +1211,8 @@ impl<'a> Resolver<'a> {\n         DefCollector::new(&mut definitions).collect_root();\n \n         let mut expansion_data = FnvHashMap();\n-        expansion_data.insert(Mark::root(), macros::ExpansionData::root(graph_root));\n+        expansion_data.insert(Mark::root(),\n+                              arenas.alloc_expansion_data(ExpansionData::root(graph_root)));\n \n         Resolver {\n             session: session,\n@@ -1277,6 +1283,7 @@ impl<'a> Resolver<'a> {\n             name_bindings: arena::TypedArena::new(),\n             import_directives: arena::TypedArena::new(),\n             name_resolutions: arena::TypedArena::new(),\n+            expansion_data: arena::TypedArena::new(),\n         }\n     }\n "}, {"sha": "ee3edbccabca5c3781ac667d143d3cd62197c444", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf964967c48376c97fa6e2288ca26f8081f78c3/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2cf964967c48376c97fa6e2288ca26f8081f78c3", "patch": "@@ -12,6 +12,7 @@ use {Module, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::map::{self, DefCollector};\n+use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::errors::DiagnosticBuilder;\n@@ -35,7 +36,7 @@ pub struct NameBinding {\n #[derive(Clone)]\n pub struct ExpansionData<'a> {\n     backtrace: SyntaxContext,\n-    pub module: Module<'a>,\n+    pub module: Cell<Module<'a>>,\n     def_index: DefIndex,\n     // True if this expansion is in a `const_integer` position, for example `[u32; m!()]`.\n     // c.f. `DefCollector::visit_ast_const_integer`.\n@@ -46,7 +47,7 @@ impl<'a> ExpansionData<'a> {\n     pub fn root(graph_root: Module<'a>) -> Self {\n         ExpansionData {\n             backtrace: SyntaxContext::empty(),\n-            module: graph_root,\n+            module: Cell::new(graph_root),\n             def_index: CRATE_DEF_INDEX,\n             const_integer: false,\n         }\n@@ -61,18 +62,18 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark {\n         let mark = Mark::fresh();\n         let module = self.module_map[&id];\n-        self.expansion_data.insert(mark, ExpansionData {\n+        self.expansion_data.insert(mark, self.arenas.alloc_expansion_data(ExpansionData {\n             backtrace: SyntaxContext::empty(),\n-            module: module,\n+            module: Cell::new(module),\n             def_index: module.def_id().unwrap().index,\n             const_integer: false,\n-        });\n+        }));\n         mark\n     }\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         self.collect_def_ids(mark, expansion);\n-        self.current_module = self.expansion_data[&mark].module;\n+        self.current_module = self.expansion_data[&mark].module.get();\n         expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: self, expansion: mark });\n     }\n \n@@ -81,13 +82,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n         if def.use_locally {\n-            let ExpansionData { mut module, backtrace, .. } = self.expansion_data[&scope];\n+            let expansion_data = self.expansion_data[&scope];\n+            let mut module = expansion_data.module.get();\n             while module.macros_escape {\n                 module = module.parent.unwrap();\n             }\n             let binding = NameBinding {\n                 ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n-                expansion: backtrace.data().prev_ctxt.data().outer_mark,\n+                expansion: expansion_data.backtrace.data().prev_ctxt.data().outer_mark,\n                 shadowing: self.resolve_macro_name(scope, def.ident.name, false).is_some(),\n                 span: def.span,\n             };\n@@ -119,7 +121,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n-            match self.expansion_data[&Mark::root()].module.macros.borrow().get(&name) {\n+            match self.expansion_data[&Mark::root()].module.get().macros.borrow().get(&name) {\n                 Some(binding) => match *binding.ext {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n@@ -164,10 +166,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n impl<'a> Resolver<'a> {\n     pub fn resolve_macro_name(&mut self, scope: Mark, name: ast::Name, record_used: bool)\n                               -> Option<Rc<SyntaxExtension>> {\n-        let ExpansionData { mut module, backtrace, .. } = self.expansion_data[&scope];\n+        let expansion_data = self.expansion_data[&scope];\n+        let mut module = expansion_data.module.get();\n         loop {\n             if let Some(binding) = module.macros.borrow().get(&name) {\n-                let mut backtrace = backtrace.data();\n+                let mut backtrace = expansion_data.backtrace.data();\n                 while binding.expansion != backtrace.outer_mark {\n                     if backtrace.outer_mark != Mark::root() {\n                         backtrace = backtrace.prev_ctxt.data();\n@@ -205,14 +208,18 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n-        let expansion_data = &mut self.expansion_data;\n-        let ExpansionData { backtrace, def_index, const_integer, module } = expansion_data[&mark];\n+        let Resolver { ref mut expansion_data, arenas, graph_root, .. } = *self;\n+        let ExpansionData { def_index, const_integer, backtrace, .. } =\n+            expansion_data[&mark].clone();\n+\n         let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n-            expansion_data.entry(invoc.mark).or_insert(ExpansionData {\n-                backtrace: backtrace.apply_mark(invoc.mark),\n-                def_index: invoc.def_index,\n-                const_integer: invoc.const_integer,\n-                module: module,\n+            expansion_data.entry(invoc.mark).or_insert_with(|| {\n+                arenas.alloc_expansion_data(ExpansionData {\n+                    backtrace: backtrace.apply_mark(invoc.mark),\n+                    def_index: invoc.def_index,\n+                    const_integer: invoc.const_integer,\n+                    module: Cell::new(graph_root),\n+                })\n             });\n         };\n "}]}