{"sha": "e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "node_id": "C_kwDOAAsO6NoAKGU0NTM0ZmU2ZmVmNTQ1MmE1ZjJmZDQyOTI3YzkzM2UwNmQ4ZWMxYjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-05T08:45:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-05T08:45:52Z"}, "message": "Rollup merge of #101391 - matthiaskrgr:perf0309, r=oli-obk\n\nmore clippy::perf fixes", "tree": {"sha": "f1695ecd78fcb40279826a43c2f61f2a07da2298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1695ecd78fcb40279826a43c2f61f2a07da2298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFbdACRBK7hj4Ov3rIwAAzSgIADKY1RO2bPyiSTYkOmcHlk0a\nYhTvHEeAhVSGnZZjYR/qQm/AqS2wD5WziyphEFt3GCRRWlg91QUQwKqma8RUOXh0\nnv+FI59/hD7zkoEJbORs/prH3qsYWb5SYqyKQwYfYOSB8z0XLJFX8ViYBoMJK+HH\n8/DqGih9E8wLVLzbxNMwUhywZVMXtaJGM32Ly/Q/9kjsjOSY6LGCYB/GeqdEgHy6\n298k6VqwXMK7+R8W/qFfpPqUhCVSqfMNOtRy2NvgpCehkTjVyopik4GXad1S6LJc\nZj+KVoDzkKJ6BTYwEh15d90/Yh0eSV7yRzqCJP0TVXbDs1XKTMjfJ+SJ0iYr6Dk=\n=einm\n-----END PGP SIGNATURE-----\n", "payload": "tree f1695ecd78fcb40279826a43c2f61f2a07da2298\nparent d18dc3d2ab0e63be6ce00142d8cdced48447782c\nparent 6f4726541e56ae02a7e31cc42d1d14df81848c58\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662367552 +0530\ncommitter GitHub <noreply@github.com> 1662367552 +0530\n\nRollup merge of #101391 - matthiaskrgr:perf0309, r=oli-obk\n\nmore clippy::perf fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "html_url": "https://github.com/rust-lang/rust/commit/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18dc3d2ab0e63be6ce00142d8cdced48447782c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18dc3d2ab0e63be6ce00142d8cdced48447782c", "html_url": "https://github.com/rust-lang/rust/commit/d18dc3d2ab0e63be6ce00142d8cdced48447782c"}, {"sha": "6f4726541e56ae02a7e31cc42d1d14df81848c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4726541e56ae02a7e31cc42d1d14df81848c58", "html_url": "https://github.com/rust-lang/rust/commit/6f4726541e56ae02a7e31cc42d1d14df81848c58"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "9a163cf207e97ba7dc6bc0a56d81c4af6c21edcc", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -842,7 +842,7 @@ pub trait LintContext: Sized {\n                     if let Some(positional_arg_to_replace) = position_sp_to_replace {\n                         let name = if is_formatting_arg { named_arg_name + \"$\" } else { named_arg_name };\n                         let span_to_replace = if let Ok(positional_arg_content) =\n-                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(\":\") {\n+                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(':') {\n                             positional_arg_to_replace.shrink_to_lo()\n                         } else {\n                             positional_arg_to_replace"}, {"sha": "039486ba02c37a466b580cfb163580f9c95a19ac", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -1377,19 +1377,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        let keys_and_jobs = tcx\n-            .mir_keys(())\n-            .iter()\n-            .filter_map(|&def_id| {\n-                let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n-                if encode_const || encode_opt {\n-                    Some((def_id, encode_const, encode_opt))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-        for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {\n+        let keys_and_jobs = tcx.mir_keys(()).iter().filter_map(|&def_id| {\n+            let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n+            if encode_const || encode_opt { Some((def_id, encode_const, encode_opt)) } else { None }\n+        });\n+        for (def_id, encode_const, encode_opt) in keys_and_jobs {\n             debug_assert!(encode_const || encode_opt);\n \n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);"}, {"sha": "ab71fa0bc1d4d2a407c3d3ea28db8a60496a63a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -1393,7 +1393,7 @@ impl<'a> Resolver<'a> {\n \n         // If only some candidates are accessible, take just them\n         if !candidates.iter().all(|v: &ImportSuggestion| !v.accessible) {\n-            candidates = candidates.into_iter().filter(|x| x.accessible).collect();\n+            candidates.retain(|x| x.accessible)\n         }\n \n         candidates"}, {"sha": "56bb71b5dcbdee2c0e00e542126125192314bf26", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -429,7 +429,7 @@ mod cgroups {\n                         Some(b\"\") => Cgroup::V2,\n                         Some(controllers)\n                             if from_utf8(controllers)\n-                                .is_ok_and(|c| c.split(\",\").any(|c| c == \"cpu\")) =>\n+                                .is_ok_and(|c| c.split(',').any(|c| c == \"cpu\")) =>\n                         {\n                             Cgroup::V1\n                         }"}, {"sha": "1e6f20d2b491c4bce959b1e3bde66d37160128e9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -2367,9 +2367,9 @@ pub(crate) fn get_filtered_impls_for_reference<'a>(\n     let Some(v) = shared.cache.impls.get(&def_id) else { return (Vec::new(), Vec::new(), Vec::new()) };\n     // Since there is no \"direct implementation\" on the reference primitive type, we filter out\n     // every implementation which isn't a trait implementation.\n-    let traits: Vec<_> = v.iter().filter(|i| i.inner_impl().trait_.is_some()).collect();\n+    let traits = v.iter().filter(|i| i.inner_impl().trait_.is_some());\n     let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-        traits.into_iter().partition(|t| t.inner_impl().kind.is_auto());\n+        traits.partition(|t| t.inner_impl().kind.is_auto());\n \n     let (blanket_impl, concrete): (Vec<&Impl>, _) =\n         concrete.into_iter().partition(|t| t.inner_impl().kind.is_blanket());"}, {"sha": "fc4d46fe6b6f191fbe54d6391c17837a643ca497", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4534fe6fef5452a5f2fd42927c933e06d8ec1b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=e4534fe6fef5452a5f2fd42927c933e06d8ec1b8", "patch": "@@ -312,7 +312,7 @@ pub(super) fn write_shared(\n                 if line.starts_with(&prefix) {\n                     continue;\n                 }\n-                if line.ends_with(\",\") {\n+                if line.ends_with(',') {\n                     ret.push(line[..line.len() - 1].to_string());\n                 } else {\n                     // No comma (it's the case for the last added crate line)"}]}