{"sha": "d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZWI0OWJhYTliZjgzNjk5N2RjY2FmM2M5YWFlNDFkZDBhNTVlOGU=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-12-06T14:01:03Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-12-06T14:01:03Z"}, "message": "Merge commit 'c1664c50b27a51f7a78c93ba65558e7c33eabee6' into clippyup", "tree": {"sha": "d5bc32f5bf23f21ad9077228533cb08d8b7ca467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5bc32f5bf23f21ad9077228533cb08d8b7ca467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl/M5CcACgkQLO/Nsn7Q\nvnmvQBAAlSDmG7OohPd+RTL1Vbu9/TgeHzI38TATsOxy2up4iLq5UMxX6HGJjFoG\nr9dx0VttWvD2LmBzeOzUjtjWNclAdB0NqR03AtOsdcQuawYXSMg3nlFFrqFjoERS\nm+3oC+Za8hd8TV01NN0LfWRZtnkRiKmiB3/gncFf0v1AW5MIrC/MY9CzVwu7/7ue\nrnP8kSkVTp19QlKYHMYy7UdvOPkWjWpt7FA0PovtER3HVZgnC2Z7ns5QfAHxkxRI\n/G485Bp4orxqN+8s9Xf7rt088h7XfdlHfOXzD/l0kKeMH+zrrirhcIuH+3eevBTZ\nxnbKwbTnB75eZ4ijl1dnhNn+8wyBkTruZqIxaBTAO5hcxIeNIT5nGf9T+dpwNCdw\nJoVs2I1bmi+YUallV/1C0Tpl92uSETJaLhsnjzVg3tH+4NHTapWqeuwJ0hcZvsia\nGLKPli/BT9bhH7eAGxkElLzXyE7RkNcaVlSQMPwNVBo/8hSnk//AoQWImhlnZbBc\nECKHkIFLR9PBSGCR/g8gh2+YAiqeafHQEv6hF1xS0PtAQ+jS+USoZ7UhyaEK+WOS\nZbeD0L6EFYBYSfwvy1heWI7nSvXWAGO31CbkS+e5TjZAwySt31ga3f470sGjrMGV\nRZvw/8E3PtZ+3ZCpSVS03PzaET3gEPN+ZtHXoXSDzQuTE2K0jBg=\n=ZEvI\n-----END PGP SIGNATURE-----", "payload": "tree d5bc32f5bf23f21ad9077228533cb08d8b7ca467\nparent a68864b68859e5848865bd392ce6d892b16f5cdd\nparent c1664c50b27a51f7a78c93ba65558e7c33eabee6\nauthor flip1995 <hello@philkrones.com> 1607263263 +0100\ncommitter flip1995 <hello@philkrones.com> 1607263263 +0100\n\nMerge commit 'c1664c50b27a51f7a78c93ba65558e7c33eabee6' into clippyup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "html_url": "https://github.com/rust-lang/rust/commit/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a68864b68859e5848865bd392ce6d892b16f5cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68864b68859e5848865bd392ce6d892b16f5cdd", "html_url": "https://github.com/rust-lang/rust/commit/a68864b68859e5848865bd392ce6d892b16f5cdd"}, {"sha": "c1664c50b27a51f7a78c93ba65558e7c33eabee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1664c50b27a51f7a78c93ba65558e7c33eabee6", "html_url": "https://github.com/rust-lang/rust/commit/c1664c50b27a51f7a78c93ba65558e7c33eabee6"}], "stats": {"total": 4910, "additions": 4334, "deletions": 576}, "files": [{"sha": "784463fe0df9e71a3e22b871c006c106329673ee", "filename": "src/tools/clippy/.github/workflows/clippy_bors.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -128,14 +128,14 @@ jobs:\n         SYSROOT=$(rustc --print sysroot)\n         echo \"$SYSROOT/bin\" >> $GITHUB_PATH\n \n-    - name: Build\n-      run: cargo build --features deny-warnings\n+    - name: Build with internal lints\n+      run: cargo build --features deny-warnings,internal-lints\n \n-    - name: Test\n-      run: cargo test --features deny-warnings\n+    - name: Test with internal lints\n+      run: cargo test --features deny-warnings,internal-lints\n \n-    - name: Test clippy_lints\n-      run: cargo test --features deny-warnings\n+    - name: Test clippy_lints with internal lints\n+      run: cargo test --features deny-warnings,internal-lints\n       working-directory: clippy_lints\n \n     - name: Test rustc_tools_util"}, {"sha": "c7e02aaf4e188762a3dd12f87409458bb2596ca2", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1770,6 +1770,7 @@ Released 2018-09-13\n [`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\n [`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n+[`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n@@ -2056,6 +2057,7 @@ Released 2018-09-13\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n+[`size_of_in_element_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n@@ -2073,6 +2075,7 @@ Released 2018-09-13\n [`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n+[`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment"}, {"sha": "f8c26e2d456d73bdfa0512fdb76f59bdc58bd31d", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -14,11 +14,16 @@ All contributors are expected to follow the [Rust Code of Conduct].\n \n - [Contributing to Clippy](#contributing-to-clippy)\n   - [Getting started](#getting-started)\n+    - [High level approach](#high-level-approach)\n     - [Finding something to fix/improve](#finding-something-to-fiximprove)\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n   - [How Clippy works](#how-clippy-works)\n   - [Fixing build failures caused by Rust](#fixing-build-failures-caused-by-rust)\n+    - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n+    - [Performing the sync](#performing-the-sync)\n+    - [Syncing back changes in Clippy to [`rust-lang/rust`]](#syncing-back-changes-in-clippy-to-rust-langrust)\n+    - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n   - [Contributions](#contributions)\n@@ -320,8 +325,8 @@ commands [here][homu_instructions].\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug\n [homu]: https://github.com/rust-lang/homu\n-[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n-[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n+[homu_instructions]: https://bors.rust-lang.org/\n+[homu_queue]: https://bors.rust-lang.org/queue/clippy\n \n ## Contributions\n "}, {"sha": "a765390c6032d4c83694367683988b4b1c5e3bc0", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -32,7 +32,7 @@ path = \"src/driver.rs\"\n clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }\n # end automatic update\n semver = \"0.11\"\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n tempfile = { version = \"3.1.0\", optional = true }\n \n [dev-dependencies]\n@@ -49,8 +49,9 @@ derive-new = \"0.5\"\n rustc-workspace-hack = \"1.0.0\"\n \n [build-dependencies]\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n \n [features]\n deny-warnings = []\n integration = [\"tempfile\"]\n+internal-lints = [\"clippy_lints/internal-lints\"]"}, {"sha": "fddf0614a0b85d77b24dbb93c6463222e8d7bbce", "filename": "src/tools/clippy/README.md", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FREADME.md?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -182,7 +182,7 @@ cargo clippy -- -W clippy::lint_name\n ```\n \n This also works with lint groups. For example you\n-can run Clippy with warnings for all lints enabled: \n+can run Clippy with warnings for all lints enabled:\n ```terminal\n cargo clippy -- -W clippy::pedantic\n ```\n@@ -194,6 +194,33 @@ cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n+### Specifying the minimum supported Rust version\n+\n+Projects that intend to support old versions of Rust can disable lints pertaining to newer features by\n+specifying the minimum supported Rust version (MSRV) in the clippy configuration file.\n+\n+```toml\n+msrv = \"1.30.0\"\n+```\n+\n+The MSRV can also be specified as an inner attribute, like below.\n+\n+```rust\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.30.0\"]\n+\n+fn main() {\n+  ...\n+}\n+```\n+\n+You can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\n+is equivalent to `msrv = 1.30.0`.\n+\n+Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+\n+Lints that recognize this configuration option can be found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)\n+\n ## Contributing\n \n If you want to contribute to Clippy, you can find more information in [CONTRIBUTING.md](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md)."}, {"sha": "f51c45e9eb5931a170c16c0dd187364fc2d510c7", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -146,16 +146,30 @@ pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String>\n }\n \n #[must_use]\n-pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    let pre = \"    store.register_lints(&[\".to_string();\n-    let post = \"    ]);\".to_string();\n-    let mut inner = lints\n+pub fn gen_register_lint_list<'a>(\n+    internal_lints: impl Iterator<Item = &'a Lint>,\n+    usable_lints: impl Iterator<Item = &'a Lint>,\n+) -> Vec<String> {\n+    let header = \"    store.register_lints(&[\".to_string();\n+    let footer = \"    ]);\".to_string();\n+    let internal_lints = internal_lints\n+        .sorted_by_key(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n+        .map(|l| {\n+            format!(\n+                \"        #[cfg(feature = \\\"internal-lints\\\")]\\n        &{}::{},\",\n+                l.module,\n+                l.name.to_uppercase()\n+            )\n+        });\n+    let other_lints = usable_lints\n+        .sorted_by_key(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-        .sorted()\n-        .collect::<Vec<String>>();\n-    inner.insert(0, pre);\n-    inner.push(post);\n-    inner\n+        .sorted();\n+    let mut lint_list = vec![header];\n+    lint_list.extend(internal_lints);\n+    lint_list.extend(other_lints);\n+    lint_list.push(footer);\n+    lint_list\n }\n \n /// Gathers all files in `src/clippy_lints` and gathers all lints inside"}, {"sha": "edf6c5f57a49766d44f8a353c55937ac0b015354", "filename": "src/tools/clippy/clippy_dev/src/update_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -68,7 +68,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end register lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n+        || gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n     )\n     .changed;\n "}, {"sha": "7697eba650aca9499c95b1adf6e885ec9f885797", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -28,6 +28,7 @@ smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n semver = \"0.11\"\n+rustc-semver=\"1.1.0\"\n # NOTE: cargo requires serde feat in its url dep\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n url = { version =  \"2.1.0\", features = [\"serde\"] }\n@@ -36,3 +37,5 @@ syn = { version = \"1\", features = [\"full\"] }\n \n [features]\n deny-warnings = []\n+# build clippy with internal lints enabled, off by default\n+internal-lints = []"}, {"sha": "3edbe723922f8343f67a653e2578af24d4ef32ff", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -5,7 +5,6 @@ use crate::utils::{\n     span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n-use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -15,6 +14,7 @@ use rustc_lint::{CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext,\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n use rustc_span::symbol::{Symbol, SymbolStr};"}, {"sha": "a34ba2d00a8c7bc71873bcb692b8ad7498542543", "filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,172 @@\n+use crate::utils::visitors::LocalUsedVisitor;\n+use crate::utils::{span_lint_and_then, SpanlessEq};\n+use if_chain::if_chain;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{MultiSpan, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n+    /// without adding any branches.\n+    ///\n+    /// Note that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\n+    /// cases where merging would most likely make the code more readable.\n+    ///\n+    /// **Why is this bad?** It is unnecessarily verbose and complex.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(n) => match n {\n+    ///             Ok(n) => n,\n+    ///             _ => return,\n+    ///         }\n+    ///         None => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(Ok(n)) => n,\n+    ///         _ => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    pub COLLAPSIBLE_MATCH,\n+    style,\n+    \"Nested `match` or `if let` expressions where the patterns may be \\\"collapsed\\\" together.\"\n+}\n+\n+declare_lint_pass!(CollapsibleMatch => [COLLAPSIBLE_MATCH]);\n+\n+impl<'tcx> LateLintPass<'tcx> for CollapsibleMatch {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n+        if let ExprKind::Match(_expr, arms, _source) = expr.kind {\n+            if let Some(wild_arm) = arms.iter().rfind(|arm| arm_is_wild_like(arm, cx.tcx)) {\n+                for arm in arms {\n+                    check_arm(arm, wild_arm, cx);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n+    if_chain! {\n+        let expr = strip_singleton_blocks(arm.body);\n+        if let ExprKind::Match(expr_in, arms_inner, _) = expr.kind;\n+        // the outer arm pattern and the inner match\n+        if expr_in.span.ctxt() == arm.pat.span.ctxt();\n+        // there must be no more than two arms in the inner match for this lint\n+        if arms_inner.len() == 2;\n+        // no if guards on the inner match\n+        if arms_inner.iter().all(|arm| arm.guard.is_none());\n+        // match expression must be a local binding\n+        // match <local> { .. }\n+        if let ExprKind::Path(QPath::Resolved(None, path)) = expr_in.kind;\n+        if let Res::Local(binding_id) = path.res;\n+        // one of the branches must be \"wild-like\"\n+        if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n+        let (wild_inner_arm, non_wild_inner_arm) =\n+            (&arms_inner[wild_inner_arm_idx], &arms_inner[1 - wild_inner_arm_idx]);\n+        if !pat_contains_or(non_wild_inner_arm.pat);\n+        // the binding must come from the pattern of the containing match arm\n+        // ..<local>.. => match <local> { .. }\n+        if let Some(binding_span) = find_pat_binding(arm.pat, binding_id);\n+        // the \"wild-like\" branches must be equal\n+        if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n+        // the binding must not be used in the if guard\n+        if !matches!(arm.guard, Some(Guard::If(guard)) if LocalUsedVisitor::new(binding_id).check_expr(guard));\n+        // ...or anywhere in the inner match\n+        if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n+        then {\n+            span_lint_and_then(\n+                cx,\n+                COLLAPSIBLE_MATCH,\n+                expr.span,\n+                \"Unnecessary nested match\",\n+                |diag| {\n+                    let mut help_span = MultiSpan::from_spans(vec![binding_span, non_wild_inner_arm.pat.span]);\n+                    help_span.push_span_label(binding_span, \"Replace this binding\".into());\n+                    help_span.push_span_label(non_wild_inner_arm.pat.span, \"with this pattern\".into());\n+                    diag.span_help(help_span, \"The outer pattern can be modified to include the inner pattern.\");\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+fn strip_singleton_blocks<'hir>(mut expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n+    while let ExprKind::Block(block, _) = expr.kind {\n+        match (block.stmts, block.expr) {\n+            ([stmt], None) => match stmt.kind {\n+                StmtKind::Expr(e) | StmtKind::Semi(e) => expr = e,\n+                _ => break,\n+            },\n+            ([], Some(e)) => expr = e,\n+            _ => break,\n+        }\n+    }\n+    expr\n+}\n+\n+/// A \"wild-like\" pattern is wild (\"_\") or `None`.\n+/// For this lint to apply, both the outer and inner match expressions\n+/// must have \"wild-like\" branches that can be combined.\n+fn arm_is_wild_like(arm: &Arm<'_>, tcx: TyCtxt<'_>) -> bool {\n+    if arm.guard.is_some() {\n+        return false;\n+    }\n+    match arm.pat.kind {\n+        PatKind::Binding(..) | PatKind::Wild => true,\n+        PatKind::Path(QPath::Resolved(None, path)) if is_none_ctor(path.res, tcx) => true,\n+        _ => false,\n+    }\n+}\n+\n+fn find_pat_binding(pat: &Pat<'_>, hir_id: HirId) -> Option<Span> {\n+    let mut span = None;\n+    pat.walk_short(|p| match &p.kind {\n+        // ignore OR patterns\n+        PatKind::Or(_) => false,\n+        PatKind::Binding(_bm, _, _ident, _) => {\n+            let found = p.hir_id == hir_id;\n+            if found {\n+                span = Some(p.span);\n+            }\n+            !found\n+        },\n+        _ => true,\n+    });\n+    span\n+}\n+\n+fn pat_contains_or(pat: &Pat<'_>) -> bool {\n+    let mut result = false;\n+    pat.walk(|p| {\n+        let is_or = matches!(p.kind, PatKind::Or(_));\n+        result |= is_or;\n+        !is_or\n+    });\n+    result\n+}\n+\n+fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n+    if let Some(none_id) = tcx.lang_items().option_none_variant() {\n+        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Const), id) = res {\n+            if let Some(variant_id) = tcx.parent(id) {\n+                return variant_id == none_id;\n+            }\n+        }\n+    }\n+    false\n+}"}, {"sha": "ae1143b2c50ce8fbbe5647c56f6d52e386b70155", "filename": "src/tools/clippy/clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -12,7 +12,8 @@ declare_clippy_lint! {\n     /// **Why is this bad?** `if` is not guaranteed to be exhaustive and conditionals can get\n     /// repetitive\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** The match statement may be slower due to the compiler\n+    /// not inlining the call to cmp. See issue #5354\n     ///\n     /// **Example:**\n     /// ```rust,ignore"}, {"sha": "f69f6f1412af97d0c35cfc044b887dd6111def9e", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -280,8 +280,7 @@ fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Op\n         // only take assignments to fields where the left-hand side field is a field of\n         // the same binding as the previous statement\n         if let ExprKind::Field(ref binding, field_ident) = assign_lhs.kind;\n-        if let ExprKind::Path(ref qpath) = binding.kind;\n-        if let QPath::Resolved(_, path) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = binding.kind;\n         if let Some(second_binding_name) = path.segments.last();\n         if second_binding_name.ident.name == binding_name;\n         then {"}, {"sha": "bec0c9f93a0d294d27f7dc025363daf37ae3abb3", "filename": "src/tools/clippy/clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -51,26 +51,6 @@ declare_deprecated_lint! {\n     \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n }\n \n-declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n-    ///\n-    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-    /// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n-    /// specialized to be as efficient as `to_owned`.\n-    pub STR_TO_STRING,\n-    \"using `str::to_string` is common even today and specialization will likely happen soon\"\n-}\n-\n-declare_deprecated_lint! {\n-    /// **What it does:** Nothing. This lint has been deprecated.\n-    ///\n-    /// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n-    /// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n-    /// specialized to be as efficient as `clone`.\n-    pub STRING_TO_STRING,\n-    \"using `string::to_string` is common even today and specialization will likely happen soon\"\n-}\n-\n declare_deprecated_lint! {\n     /// **What it does:** Nothing. This lint has been deprecated.\n     ///"}, {"sha": "6308f6e2e7e9d6d8c825620ad644386dad8b5b6f", "filename": "src/tools/clippy/clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{\n-    eq_expr_value, higher, implements_trait, in_macro, is_copy, is_expn_of, multispan_sugg, snippet, span_lint,\n-    span_lint_and_then,\n+    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, implements_trait, in_macro, is_copy, is_expn_of,\n+    multispan_sugg, snippet, span_lint, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOp, BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n             if macro_with_not_op(&left.kind) || macro_with_not_op(&right.kind) {\n                 return;\n             }\n-            if is_valid_operator(op) && eq_expr_value(cx, left, right) {\n+            if is_useless_with_eq_exprs(higher::binop(op.node)) && eq_expr_value(cx, left, right) {\n                 span_lint(\n                     cx,\n                     EQ_OP,\n@@ -245,22 +245,3 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n         }\n     }\n }\n-\n-fn is_valid_operator(op: BinOp) -> bool {\n-    matches!(\n-        op.node,\n-        BinOpKind::Sub\n-            | BinOpKind::Div\n-            | BinOpKind::Eq\n-            | BinOpKind::Lt\n-            | BinOpKind::Le\n-            | BinOpKind::Gt\n-            | BinOpKind::Ge\n-            | BinOpKind::Ne\n-            | BinOpKind::And\n-            | BinOpKind::Or\n-            | BinOpKind::BitXor\n-            | BinOpKind::BitAnd\n-            | BinOpKind::BitOr\n-    )\n-}"}, {"sha": "1194bd7e55e2566e5ad5c20f741d8888829e5e5f", "filename": "src/tools/clippy/clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -41,8 +41,7 @@ declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n-            if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n+            if let ExprKind::Match(ref op, ref body, MatchSource::IfLetDesugar { .. }) = expr.kind; //test if expr is if let\n             if let ExprKind::MethodCall(_, ok_span, ref result_types, _) = op.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;"}, {"sha": "03e95c9e27f6ae241627945d537a629306da4d73", "filename": "src/tools/clippy/clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -68,8 +68,7 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if_chain! {\n                     if let StmtKind::Semi(expr, ..) = &stmt.kind;\n                     // make sure it's a break, otherwise we want to skip\n-                    if let ExprKind::Break(.., break_expr) = &expr.kind;\n-                    if let Some(break_expr) = break_expr;\n+                    if let ExprKind::Break(.., Some(break_expr)) = &expr.kind;\n                     then {\n                             lint(cx, expr.span, break_expr.span, LINT_BREAK);\n                     }"}, {"sha": "3a01acd8fdc97a94e779a93ce6b3123d43fd4662", "filename": "src/tools/clippy/clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -59,8 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             if let Some(target) = subtracts_one(cx, e);\n \n             // Extracting out the variable name\n-            if let ExprKind::Path(ref assign_path) = target.kind;\n-            if let QPath::Resolved(_, ref ares_path) = assign_path;\n+            if let ExprKind::Path(QPath::Resolved(_, ref ares_path)) = target.kind;\n \n             then {\n                 // Handle symmetric conditions in the if statement"}, {"sha": "0927d218446ddb71c506d9cc19558c4fc265059e", "filename": "src/tools/clippy/clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -58,12 +58,12 @@ impl EarlyLintPass for ItemsAfterStatements {\n             return;\n         }\n \n-        // skip initial items\n+        // skip initial items and trailing semicolons\n         let stmts = item\n             .stmts\n             .iter()\n             .map(|stmt| &stmt.kind)\n-            .skip_while(|s| matches!(**s, StmtKind::Item(..)));\n+            .skip_while(|s| matches!(**s, StmtKind::Item(..) | StmtKind::Empty));\n \n         // lint on all further items\n         for stmt in stmts {"}, {"sha": "a76595ed0897dd85ffa73afc66bfe79211d4392b", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -52,8 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "9a448ab125686cf2ce405a7ca9c1a84416b800c7", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -43,8 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "0d2d95324c4f7556f400230f5b33e852f9b2099c", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,12 +1,11 @@\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit;\n use rustc_hir::BindingAnnotation;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,10 +65,10 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n                 if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n-                if !used_in_expr(cx, canonical_id, cond);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);\n-                if !used_in_expr(cx, canonical_id, value);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n@@ -136,32 +135,6 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n     }\n }\n \n-struct UsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    id: hir::HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::Path(ref qpath) = expr.kind;\n-            if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id);\n-            if self.id == local_id;\n-            then {\n-                self.used = true;\n-                return;\n-            }\n-        }\n-        intravisit::walk_expr(self, expr);\n-    }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n-}\n-\n fn check_assign<'tcx>(\n     cx: &LateContext<'tcx>,\n     decl: hir::HirId,\n@@ -176,18 +149,10 @@ fn check_assign<'tcx>(\n         if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n         if decl == local_id;\n         then {\n-            let mut v = UsedVisitor {\n-                cx,\n-                id: decl,\n-                used: false,\n-            };\n-\n-            for s in block.stmts.iter().take(block.stmts.len()-1) {\n-                intravisit::walk_stmt(&mut v, s);\n+            let mut v = LocalUsedVisitor::new(decl);\n \n-                if v.used {\n-                    return None;\n-                }\n+            if block.stmts.iter().take(block.stmts.len()-1).any(|stmt| v.check_stmt(stmt)) {\n+                return None;\n             }\n \n             return Some(value);\n@@ -196,9 +161,3 @@ fn check_assign<'tcx>(\n \n     None\n }\n-\n-fn used_in_expr<'tcx>(cx: &LateContext<'tcx>, id: hir::HirId, expr: &'tcx hir::Expr<'_>) -> bool {\n-    let mut v = UsedVisitor { cx, id, used: false };\n-    intravisit::walk_expr(&mut v, expr);\n-    v.used\n-}"}, {"sha": "2b99ed570b14874dbe02b0ce127f06d4ade72a90", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 70, "deletions": 43, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -44,6 +44,7 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n \n+use crate::utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n use rustc_session::Session;\n@@ -171,6 +172,7 @@ mod cargo_common_metadata;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n+mod collapsible_match;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n@@ -304,9 +306,11 @@ mod self_assignment;\n mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n+mod size_of_in_element_count;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n mod strings;\n+mod suspicious_operation_groupings;\n mod suspicious_trait_impl;\n mod swap;\n mod tabs_in_doc_comments;\n@@ -440,14 +444,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::unstable_as_mut_slice\",\n         \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n     );\n-    store.register_removed(\n-        \"clippy::str_to_string\",\n-        \"using `str::to_string` is common even today and specialization will likely happen soon\",\n-    );\n-    store.register_removed(\n-        \"clippy::string_to_string\",\n-        \"using `string::to_string` is common even today and specialization will likely happen soon\",\n-    );\n     store.register_removed(\n         \"clippy::misaligned_transmute\",\n         \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n@@ -504,6 +500,24 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n     store.register_lints(&[\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::DEFAULT_LINT,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::INVALID_PATHS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::PRODUCE_ICE,\n         &approx_const::APPROX_CONSTANT,\n         &arithmetic::FLOAT_ARITHMETIC,\n         &arithmetic::INTEGER_ARITHMETIC,\n@@ -537,6 +551,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &checked_conversions::CHECKED_CONVERSIONS,\n         &cognitive_complexity::COGNITIVE_COMPLEXITY,\n         &collapsible_if::COLLAPSIBLE_IF,\n+        &collapsible_match::COLLAPSIBLE_MATCH,\n         &comparison_chain::COMPARISON_CHAIN,\n         &copies::IFS_SAME_COND,\n         &copies::IF_SAME_THEN_ELSE,\n@@ -833,12 +848,16 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_SAME,\n         &shadow::SHADOW_UNRELATED,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n+        &size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n         &strings::STRING_ADD,\n         &strings::STRING_ADD_ASSIGN,\n         &strings::STRING_FROM_UTF8_AS_BYTES,\n         &strings::STRING_LIT_AS_BYTES,\n+        &strings::STRING_TO_STRING,\n+        &strings::STR_TO_STRING,\n+        &suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n         &suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         &swap::ALMOST_SWAPPED,\n@@ -907,15 +926,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap_in_result::UNWRAP_IN_RESULT,\n         &use_self::USE_SELF,\n         &useless_conversion::USELESS_CONVERSION,\n-        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n-        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        &utils::internal_lints::DEFAULT_LINT,\n-        &utils::internal_lints::INVALID_PATHS,\n-        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n-        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n-        &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n         &vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n@@ -934,14 +944,22 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n \n+    // all the internal lints\n+    #[cfg(feature = \"internal-lints\")]\n+    {\n+        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n+        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n+        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n+        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n+        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n+        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n+        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+    }\n+    store.register_late_pass(|| box utils::author::Author);\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n     store.register_late_pass(|| box serde_api::SerdeAPI);\n-    store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n-    store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n-    store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n-    store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-    store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n-    store.register_late_pass(|| box utils::author::Author);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n@@ -964,12 +982,25 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box len_zero::LenZero);\n     store.register_late_pass(|| box attrs::Attributes);\n     store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n+    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n     store.register_late_pass(|| box unicode::Unicode);\n     store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box methods::Methods);\n+\n+    let msrv = conf.msrv.as_ref().and_then(|s| {\n+        parse_msrv(s, None, None).or_else(|| {\n+            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n+            None\n+        })\n+    });\n+\n+    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    store.register_late_pass(move || box matches::Matches::new(msrv));\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n+    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -983,7 +1014,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box types::Casts);\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n-    store.register_late_pass(|| box matches::Matches::default());\n     store.register_late_pass(|| box minmax::MinMaxPass);\n     store.register_late_pass(|| box open_options::OpenOptions);\n     store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n@@ -1057,6 +1087,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box types::UnitArg);\n     store.register_late_pass(|| box double_comparison::DoubleComparisons);\n     store.register_late_pass(|| box question_mark::QuestionMark);\n+    store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n     store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n     store.register_late_pass(|| box map_unit_fn::MapUnit);\n     store.register_late_pass(|| box inherent_impl::MultipleInherentImpl::default());\n@@ -1107,10 +1138,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n     store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n-    store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n+    let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n+    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n-    store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n@@ -1124,7 +1155,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n-    store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n@@ -1140,16 +1170,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n     store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n-\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1166,14 +1193,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    store.register_late_pass(|| box manual_strip::ManualStrip);\n-    store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n     store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n-\n+    store.register_late_pass(|| box strings::StrToString);\n+    store.register_late_pass(|| box strings::StringToString);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1192,6 +1218,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&integer_division::INTEGER_DIVISION),\n         LintId::of(&let_underscore::LET_UNDERSCORE_MUST_USE),\n         LintId::of(&literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+        LintId::of(&map_err_ignore::MAP_ERR_IGNORE),\n         LintId::of(&matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),\n@@ -1215,6 +1242,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&shadow::SHADOW_REUSE),\n         LintId::of(&shadow::SHADOW_SAME),\n         LintId::of(&strings::STRING_ADD),\n+        LintId::of(&strings::STRING_TO_STRING),\n+        LintId::of(&strings::STR_TO_STRING),\n         LintId::of(&types::RC_BUFFER),\n         LintId::of(&unwrap_in_result::UNWRAP_IN_RESULT),\n         LintId::of(&verbose_file_reads::VERBOSE_FILE_READS),\n@@ -1256,7 +1285,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n         LintId::of(&manual_ok_or::MANUAL_OK_OR),\n-        LintId::of(&map_err_ignore::MAP_ERR_IGNORE),\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_SAME_ARMS),\n@@ -1304,6 +1332,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n     ]);\n \n+    #[cfg(feature = \"internal-lints\")]\n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n         LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n@@ -1337,6 +1366,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&collapsible_match::COLLAPSIBLE_MATCH),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n@@ -1533,9 +1563,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n+        LintId::of(&suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n@@ -1602,6 +1634,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&collapsible_match::COLLAPSIBLE_MATCH),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&default::FIELD_REASSIGN_WITH_DEFAULT),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n@@ -1687,6 +1720,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+        LintId::of(&suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n         LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&try_err::TRY_ERR),\n@@ -1839,6 +1873,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n@@ -1930,14 +1965,6 @@ fn register_removed_non_tool_lints(store: &mut rustc_lint::LintStore) {\n         \"unstable_as_mut_slice\",\n         \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n     );\n-    store.register_removed(\n-        \"str_to_string\",\n-        \"using `str::to_string` is common even today and specialization will likely happen soon\",\n-    );\n-    store.register_removed(\n-        \"string_to_string\",\n-        \"using `string::to_string` is common even today and specialization will likely happen soon\",\n-    );\n     store.register_removed(\n         \"misaligned_transmute\",\n         \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\","}, {"sha": "87a957a9bd241728bd01fbaedaf06f08ee5836a7", "filename": "src/tools/clippy/clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// **What it does:** Warns if a long integral or floating-point constant does\n@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNREADABLE_LITERAL,\n     pedantic,\n-    \"long integer literal without underscores\"\n+    \"long literal without underscores\"\n }\n \n declare_clippy_lint! {\n@@ -208,7 +208,13 @@ impl WarningType {\n     }\n }\n \n-declare_lint_pass!(LiteralDigitGrouping => [\n+#[allow(clippy::module_name_repetitions)]\n+#[derive(Copy, Clone)]\n+pub struct LiteralDigitGrouping {\n+    lint_fraction_readability: bool,\n+}\n+\n+impl_lint_pass!(LiteralDigitGrouping => [\n     UNREADABLE_LITERAL,\n     INCONSISTENT_DIGIT_GROUPING,\n     LARGE_DIGIT_GROUPS,\n@@ -223,7 +229,7 @@ impl EarlyLintPass for LiteralDigitGrouping {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            Self::check_lit(cx, lit)\n+            self.check_lit(cx, lit)\n         }\n     }\n }\n@@ -232,7 +238,13 @@ impl EarlyLintPass for LiteralDigitGrouping {\n const UUID_GROUP_LENS: [usize; 5] = [8, 4, 4, 4, 12];\n \n impl LiteralDigitGrouping {\n-    fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n+    pub fn new(lint_fraction_readability: bool) -> Self {\n+        Self {\n+            lint_fraction_readability,\n+        }\n+    }\n+\n+    fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n         if_chain! {\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(mut num_lit) = NumericLiteral::from_lit(&src, &lit);\n@@ -247,9 +259,12 @@ impl LiteralDigitGrouping {\n \n                 let result = (|| {\n \n-                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'), num_lit.radix)?;\n+                    let integral_group_size = Self::get_group_size(num_lit.integer.split('_'), num_lit.radix, true)?;\n                     if let Some(fraction) = num_lit.fraction {\n-                        let fractional_group_size = Self::get_group_size(fraction.rsplit('_'), num_lit.radix)?;\n+                        let fractional_group_size = Self::get_group_size(\n+                            fraction.rsplit('_'),\n+                            num_lit.radix,\n+                            self.lint_fraction_readability)?;\n \n                         let consistent = Self::parts_consistent(integral_group_size,\n                                                                 fractional_group_size,\n@@ -363,7 +378,11 @@ impl LiteralDigitGrouping {\n \n     /// Returns the size of the digit groups (or None if ungrouped) if successful,\n     /// otherwise returns a `WarningType` for linting.\n-    fn get_group_size<'a>(groups: impl Iterator<Item = &'a str>, radix: Radix) -> Result<Option<usize>, WarningType> {\n+    fn get_group_size<'a>(\n+        groups: impl Iterator<Item = &'a str>,\n+        radix: Radix,\n+        lint_unreadable: bool,\n+    ) -> Result<Option<usize>, WarningType> {\n         let mut groups = groups.map(str::len);\n \n         let first = groups.next().expect(\"At least one group\");\n@@ -380,7 +399,7 @@ impl LiteralDigitGrouping {\n             } else {\n                 Ok(Some(second))\n             }\n-        } else if first > 5 {\n+        } else if first > 5 && lint_unreadable {\n             Err(WarningType::UnreadableLiteral)\n         } else {\n             Ok(None)"}, {"sha": "400148ab81dd997d20050228c4e6d2a39ebf0d69", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -2,6 +2,7 @@ use crate::consts::constant;\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n@@ -1919,8 +1920,7 @@ fn check_for_single_element_loop<'tcx>(\n     if_chain! {\n         if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg_expr) = arg.kind;\n         if let PatKind::Binding(.., target, _) = pat.kind;\n-        if let ExprKind::Array(ref arg_expr_list) = arg_expr.kind;\n-        if let [arg_expression] = arg_expr_list;\n+        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Path(ref list_item) = arg_expression.kind;\n         if let Some(list_item_name) = single_segment_path(list_item).map(|ps| ps.ident.name);\n         if let ExprKind::Block(ref block, _) = body.kind;\n@@ -2025,8 +2025,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n                 let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                    if let BindingAnnotation::Mutable = bind_ann;\n+                    if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n                     then {\n                         return Some(hir_id);\n                     }\n@@ -2071,28 +2070,6 @@ fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     }\n }\n \n-struct LocalUsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    local: HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if same_var(self.cx, expr, self.local) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n struct VarVisitor<'a, 'tcx> {\n     /// context reference\n     cx: &'a LateContext<'tcx>,\n@@ -2126,11 +2103,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor {\n-                        cx: self.cx,\n-                        local: self.var,\n-                        used: false,\n-                    };\n+                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };\n@@ -2950,7 +2923,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n         for ref stmt in block.stmts {\n             if_chain! {\n                 if let StmtKind::Local(\n-                    Local { pat: Pat { kind: PatKind::Binding(_, _, ident, .. ), .. },\n+                    Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n@@ -2964,6 +2937,16 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;\n                 then {\n+                    let mut used_count_visitor = UsedCountVisitor {\n+                        cx,\n+                        id: *pat_id,\n+                        count: 0,\n+                    };\n+                    walk_block(&mut used_count_visitor, block);\n+                    if used_count_visitor.count > 1 {\n+                        return;\n+                    }\n+\n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let iter_call = &iter_calls[0];\n                     span_lint_and_then(\n@@ -3087,6 +3070,28 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     }\n }\n \n+struct UsedCountVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    id: HirId,\n+    count: usize,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if same_var(self.cx, expr, self.id) {\n+            self.count += 1;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n /// Detect the occurrences of calls to `iter` or `into_iter` for the\n /// given identifier\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {"}, {"sha": "91849e748878f645b6453e1571cf8357f0fab61f", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,12 +1,15 @@\n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n+const MANUAL_NON_EXHAUSTIVE_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n     ///\n@@ -55,10 +58,26 @@ declare_clippy_lint! {\n     \"manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]\"\n }\n \n-declare_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n+#[derive(Clone)]\n+pub struct ManualNonExhaustive {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualNonExhaustive {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustive {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_NON_EXHAUSTIVE_MSRV) {\n+            return;\n+        }\n+\n         match &item.kind {\n             ItemKind::Enum(def, _) => {\n                 check_manual_non_exhaustive_enum(cx, item, &def.variants);\n@@ -73,6 +92,8 @@ impl EarlyLintPass for ManualNonExhaustive {\n             _ => {},\n         }\n     }\n+\n+    extract_msrv_attr!(EarlyContext);\n }\n \n fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants: &[Variant]) {"}, {"sha": "3c4368a3545a9f71b5a432b700a630e652b70250", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, higher, match_def_path, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n@@ -10,13 +10,16 @@ use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n \n+const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n+\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using\n@@ -51,7 +54,18 @@ declare_clippy_lint! {\n     \"suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing\"\n }\n \n-declare_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n+pub struct ManualStrip {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualStrip {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum StripKind {\n@@ -61,6 +75,10 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let Some((cond, then, _)) = higher::if_block(&expr);\n             if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n@@ -114,6 +132,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n // Returns `Some(arg)` if `expr` matches `arg.len()` and `None` otherwise.\n@@ -199,8 +219,7 @@ fn find_stripping<'tcx>(\n                 if is_ref_str(self.cx, ex);\n                 let unref = peel_ref(ex);\n                 if let ExprKind::Index(indexed, index) = &unref.kind;\n-                if let Some(range) = higher::range(index);\n-                if let higher::Range { start, end, .. } = range;\n+                if let Some(higher::Range { start, end, .. }) = higher::range(index);\n                 if let ExprKind::Path(path) = &indexed.kind;\n                 if qpath_res(self.cx, path, ex.hir_id) == self.target;\n                 then {"}, {"sha": "f3c0515b9bcde0e9e4522a9a517dc03e93fa8d38", "filename": "src/tools/clippy/clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -99,7 +99,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub MAP_ERR_IGNORE,\n-    pedantic,\n+    restriction,\n     \"`map_err` should not ignore the original error\"\n }\n \n@@ -133,9 +133,9 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                     cx,\n                                     MAP_ERR_IGNORE,\n                                     body_span,\n-                                    \"`map_err(|_|...` ignores the original error\",\n+                                    \"`map_err(|_|...` wildcard pattern discards the original error\",\n                                     None,\n-                                    \"Consider wrapping the error in an enum variant\",\n+                                    \"Consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\",\n                                 );\n                             }\n                         }"}, {"sha": "274d20cfa8005b772f3aabeb9866b524d67fed95", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 92, "deletions": 23, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -3,8 +3,8 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n-    snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n+    snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n     span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n@@ -20,6 +20,7 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::{sym, Symbol};\n@@ -411,8 +412,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Lint for redundant pattern matching over `Result` or\n-    /// `Option`\n+    /// **What it does:** Lint for redundant pattern matching over `Result`, `Option`,\n+    /// `std::task::Poll` or `std::net::IpAddr`\n     ///\n     /// **Why is this bad?** It's more concise and clear to just use the proper\n     /// utility function\n@@ -422,10 +423,16 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n+    /// # use std::task::Poll;\n+    /// # use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     /// if let Ok(_) = Ok::<i32, i32>(42) {}\n     /// if let Err(_) = Err::<i32, i32>(42) {}\n     /// if let None = None::<()> {}\n     /// if let Some(_) = Some(42) {}\n+    /// if let Poll::Pending = Poll::Pending::<()> {}\n+    /// if let Poll::Ready(_) = Poll::Ready(42) {}\n+    /// if let IpAddr::V4(_) = IpAddr::V4(Ipv4Addr::LOCALHOST) {}\n+    /// if let IpAddr::V6(_) = IpAddr::V6(Ipv6Addr::LOCALHOST) {}\n     /// match Ok::<i32, i32>(42) {\n     ///     Ok(_) => true,\n     ///     Err(_) => false,\n@@ -435,10 +442,16 @@ declare_clippy_lint! {\n     /// The more idiomatic use would be:\n     ///\n     /// ```rust\n+    /// # use std::task::Poll;\n+    /// # use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n     /// if Ok::<i32, i32>(42).is_ok() {}\n     /// if Err::<i32, i32>(42).is_err() {}\n     /// if None::<()>.is_none() {}\n     /// if Some(42).is_some() {}\n+    /// if Poll::Pending::<()>.is_pending() {}\n+    /// if Poll::Ready(42).is_ready() {}\n+    /// if IpAddr::V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+    /// if IpAddr::V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n     /// Ok::<i32, i32>(42).is_ok();\n     /// ```\n     pub REDUNDANT_PATTERN_MATCHING,\n@@ -452,7 +465,8 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** Readability and needless complexity.\n     ///\n-    /// **Known problems:** None\n+    /// **Known problems:** This lint falsely triggers, if there are arms with\n+    /// `cfg` attributes that remove an arm evaluating to `false`.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -521,9 +535,20 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n+    msrv: Option<RustcVersion>,\n     infallible_destructuring_match_linted: bool,\n }\n \n+impl Matches {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self {\n+            msrv,\n+            ..Matches::default()\n+        }\n+    }\n+}\n+\n impl_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -543,14 +568,21 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n+const MATCH_LIKE_MATCHES_MACRO_MSRV: RustcVersion = RustcVersion::new(1, 42, 0);\n+\n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n             return;\n         }\n \n         redundant_pattern_match::check(cx, expr);\n-        if !check_match_like_matches(cx, expr) {\n+\n+        if meets_msrv(self.msrv.as_ref(), &MATCH_LIKE_MATCHES_MACRO_MSRV) {\n+            if !check_match_like_matches(cx, expr) {\n+                lint_match_arms(cx, expr);\n+            }\n+        } else {\n             lint_match_arms(cx, expr);\n         }\n \n@@ -614,8 +646,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         if_chain! {\n             if !in_external_macro(cx.sess(), pat.span);\n             if !in_macro(pat.span);\n-            if let PatKind::Struct(ref qpath, fields, true) = pat.kind;\n-            if let QPath::Resolved(_, ref path) = qpath;\n+            if let PatKind::Struct(QPath::Resolved(_, ref path), fields, true) = pat.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             let ty = cx.tcx.type_of(def_id);\n             if let ty::Adt(def, _) = ty.kind();\n@@ -634,6 +665,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n #[rustfmt::skip]\n@@ -922,16 +955,14 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 if let QPath::Resolved(_, p) = path {\n                     missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n-            } else if let PatKind::TupleStruct(ref path, ref patterns, ..) = arm.pat.kind {\n-                if let QPath::Resolved(_, p) = path {\n-                    // Some simple checks for exhaustive patterns.\n-                    // There is a room for improvements to detect more cases,\n-                    // but it can be more expensive to do so.\n-                    let is_pattern_exhaustive =\n-                        |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n-                    if patterns.iter().all(is_pattern_exhaustive) {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n-                    }\n+            } else if let PatKind::TupleStruct(QPath::Resolved(_, p), ref patterns, ..) = arm.pat.kind {\n+                // Some simple checks for exhaustive patterns.\n+                // There is a room for improvements to detect more cases,\n+                // but it can be more expensive to do so.\n+                let is_pattern_exhaustive =\n+                    |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n+                if patterns.iter().all(is_pattern_exhaustive) {\n+                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n             }\n         }\n@@ -1134,13 +1165,16 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;\n+        if b0_arms[0].attrs.is_empty();\n         if b0_arms[1..].iter()\n             .all(|arm| {\n                 find_bool_lit(&arm.body.kind, desugared).map_or(false, |b| b == b0) &&\n-                arm.guard.is_none()\n+                arm.guard.is_none() && arm.attrs.is_empty()\n             });\n         then {\n-            let mut applicability = Applicability::MachineApplicable;\n+            // The suggestion may be incorrect, because some arms can have `cfg` attributes\n+            // evaluated into `false` and so such arms will be stripped before.\n+            let mut applicability = Applicability::MaybeIncorrect;\n             let pat = {\n                 use itertools::Itertools as _;\n                 b0_arms.iter()\n@@ -1403,8 +1437,7 @@ fn is_ref_some_arm(arm: &Arm<'_>) -> Option<BindingAnnotation> {\n         if let ExprKind::Call(ref e, ref args) = remove_blocks(&arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n         if match_qpath(some_path, &paths::OPTION_SOME) && args.len() == 1;\n-        if let ExprKind::Path(ref qpath) = args[0].kind;\n-        if let &QPath::Resolved(_, ref path2) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, ref path2)) = args[0].kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n             return Some(rb)\n@@ -1538,14 +1571,28 @@ mod redundant_pattern_match {\n                         \"is_err()\"\n                     } else if match_qpath(path, &paths::OPTION_SOME) {\n                         \"is_some()\"\n+                    } else if match_qpath(path, &paths::POLL_READY) {\n+                        \"is_ready()\"\n+                    } else if match_qpath(path, &paths::IPADDR_V4) {\n+                        \"is_ipv4()\"\n+                    } else if match_qpath(path, &paths::IPADDR_V6) {\n+                        \"is_ipv6()\"\n                     } else {\n                         return;\n                     }\n                 } else {\n                     return;\n                 }\n             },\n-            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+            PatKind::Path(ref path) => {\n+                if match_qpath(path, &paths::OPTION_NONE) {\n+                    \"is_none()\"\n+                } else if match_qpath(path, &paths::POLL_PENDING) {\n+                    \"is_pending()\"\n+                } else {\n+                    return;\n+                }\n+            },\n             _ => return,\n         };\n \n@@ -1610,6 +1657,17 @@ mod redundant_pattern_match {\n                             \"is_ok()\",\n                             \"is_err()\",\n                         )\n+                        .or_else(|| {\n+                            find_good_method_for_match(\n+                                arms,\n+                                path_left,\n+                                path_right,\n+                                &paths::IPADDR_V4,\n+                                &paths::IPADDR_V6,\n+                                \"is_ipv4()\",\n+                                \"is_ipv6()\",\n+                            )\n+                        })\n                     } else {\n                         None\n                     }\n@@ -1628,6 +1686,17 @@ mod redundant_pattern_match {\n                             \"is_some()\",\n                             \"is_none()\",\n                         )\n+                        .or_else(|| {\n+                            find_good_method_for_match(\n+                                arms,\n+                                path_left,\n+                                path_right,\n+                                &paths::POLL_READY,\n+                                &paths::POLL_PENDING,\n+                                \"is_ready()\",\n+                                \"is_pending()\",\n+                            )\n+                        })\n                     } else {\n                         None\n                     }"}, {"sha": "44c974b9d98577c2add2c02bedb8f8e1feea592e", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -90,8 +90,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     if_chain! {\n         if let hir::ExprKind::Call(func, args) = &expr.kind;\n         if args.is_empty();\n-        if let hir::ExprKind::Path(path) = &func.kind;\n-        if let hir::QPath::TypeRelative(_, segment) = path;\n+        if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n             match &*segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),"}, {"sha": "8002c27a5e91b7e27b92818a5b51f47275832761", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -14,25 +14,25 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n \n use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n-    is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n-    match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n-    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n+    contains_return, contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n+    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n+    match_def_path, match_qpath, match_trait_method, match_type, match_var, meets_msrv, method_calls,\n+    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n+    walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1404,7 +1404,18 @@ declare_clippy_lint! {\n     \"use `.collect()` instead of `::from_iter()`\"\n }\n \n-declare_lint_pass!(Methods => [\n+pub struct Methods {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl Methods {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n@@ -1531,8 +1542,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n-            [\"map\", \"as_ref\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false),\n-            [\"map\", \"as_mut\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true),\n+            [\"map\", \"as_ref\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref())\n+            },\n+            [\"map\", \"as_mut\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true, self.msrv.as_ref())\n+            },\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n@@ -1738,6 +1753,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n@@ -3453,14 +3470,21 @@ fn lint_suspicious_map(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n+const OPTION_AS_REF_DEREF_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n+\n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n fn lint_option_as_ref_deref<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,\n     as_ref_args: &[hir::Expr<'_>],\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n+    msrv: Option<&RustcVersion>,\n ) {\n+    if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n+        return;\n+    }\n+\n     let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n \n     let option_ty = cx.typeck_results().expr_ty(&as_ref_args[0]);\n@@ -3846,36 +3870,6 @@ fn is_bool(ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n-// Returns `true` if `expr` contains a return expression\n-fn contains_return(expr: &hir::Expr<'_>) -> bool {\n-    struct RetCallFinder {\n-        found: bool,\n-    }\n-\n-    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n-        type Map = Map<'tcx>;\n-\n-        fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n-            if self.found {\n-                return;\n-            }\n-            if let hir::ExprKind::Ret(..) = &expr.kind {\n-                self.found = true;\n-            } else {\n-                intravisit::walk_expr(self, expr);\n-            }\n-        }\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-    }\n-\n-    let mut visitor = RetCallFinder { found: false };\n-    visitor.visit_expr(expr);\n-    visitor.found\n-}\n-\n fn check_pointer_offset(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     if_chain! {\n         if args.len() == 2;"}, {"sha": "0512d74c7b1c8350bd31ca5f039d84578d663b83", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 83, "deletions": 61, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -18,7 +18,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_integer_const, iter_input_pats,\n     last_path_segment, match_qpath, match_trait_method, paths, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_lint_hir_and_then, SpanlessEq,\n+    span_lint_and_then, span_lint_hir_and_then, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -139,23 +139,26 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the remainder of a division by one.\n+    /// **What it does:** Checks for getting the remainder of a division by one or minus\n+    /// one.\n     ///\n-    /// **Why is this bad?** The result can only ever be zero. No one will write\n-    /// such code deliberately, unless trying to win an Underhanded Rust\n-    /// Contest. Even for that contest, it's probably a bad idea. Use something more\n-    /// underhanded.\n+    /// **Why is this bad?** The result for a divisor of one can only ever be zero; for\n+    /// minus one it can cause panic/overflow (if the left operand is the minimal value of\n+    /// the respective integer type) or results in zero. No one will write such code\n+    /// deliberately, unless trying to win an Underhanded Rust Contest. Even for that\n+    /// contest, it's probably a bad idea. Use something more underhanded.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n     /// # let x = 1;\n     /// let a = x % 1;\n+    /// let a = x % -1;\n     /// ```\n     pub MODULO_ONE,\n     correctness,\n-    \"taking a number modulo 1, which always returns 0\"\n+    \"taking a number modulo +/-1, which can either panic/overflow or always returns 0\"\n }\n \n declare_clippy_lint! {\n@@ -378,60 +381,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 return;\n             },\n             ExprKind::Binary(ref cmp, ref left, ref right) => {\n-                let op = cmp.node;\n-                if op.is_comparison() {\n-                    check_nan(cx, left, expr);\n-                    check_nan(cx, right, expr);\n-                    check_to_owned(cx, left, right, true);\n-                    check_to_owned(cx, right, left, false);\n-                }\n-                if (op == BinOpKind::Eq || op == BinOpKind::Ne) && (is_float(cx, left) || is_float(cx, right)) {\n-                    if is_allowed(cx, left) || is_allowed(cx, right) {\n-                        return;\n-                    }\n-\n-                    // Allow comparing the results of signum()\n-                    if is_signum(cx, left) && is_signum(cx, right) {\n-                        return;\n-                    }\n-\n-                    if let Some(name) = get_item_name(cx, expr) {\n-                        let name = name.as_str();\n-                        if name == \"eq\"\n-                            || name == \"ne\"\n-                            || name == \"is_nan\"\n-                            || name.starts_with(\"eq_\")\n-                            || name.ends_with(\"_eq\")\n-                        {\n-                            return;\n-                        }\n-                    }\n-                    let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n-                    let (lint, msg) = get_lint_and_message(\n-                        is_named_constant(cx, left) || is_named_constant(cx, right),\n-                        is_comparing_arrays,\n-                    );\n-                    span_lint_and_then(cx, lint, expr.span, msg, |diag| {\n-                        let lhs = Sugg::hir(cx, left, \"..\");\n-                        let rhs = Sugg::hir(cx, right, \"..\");\n-\n-                        if !is_comparing_arrays {\n-                            diag.span_suggestion(\n-                                expr.span,\n-                                \"consider comparing them within some margin of error\",\n-                                format!(\n-                                    \"({}).abs() {} error_margin\",\n-                                    lhs - rhs,\n-                                    if op == BinOpKind::Eq { '<' } else { '>' }\n-                                ),\n-                                Applicability::HasPlaceholders, // snippet\n-                            );\n-                        }\n-                        diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\");\n-                    });\n-                } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n-                    span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n-                }\n+                check_binary(cx, expr, cmp, left, right);\n+                return;\n             },\n             _ => {},\n         }\n@@ -744,3 +695,74 @@ fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>)\n         }\n     }\n }\n+\n+fn check_binary(\n+    cx: &LateContext<'a>,\n+    expr: &Expr<'_>,\n+    cmp: &rustc_span::source_map::Spanned<rustc_hir::BinOpKind>,\n+    left: &'a Expr<'_>,\n+    right: &'a Expr<'_>,\n+) {\n+    let op = cmp.node;\n+    if op.is_comparison() {\n+        check_nan(cx, left, expr);\n+        check_nan(cx, right, expr);\n+        check_to_owned(cx, left, right, true);\n+        check_to_owned(cx, right, left, false);\n+    }\n+    if (op == BinOpKind::Eq || op == BinOpKind::Ne) && (is_float(cx, left) || is_float(cx, right)) {\n+        if is_allowed(cx, left) || is_allowed(cx, right) {\n+            return;\n+        }\n+\n+        // Allow comparing the results of signum()\n+        if is_signum(cx, left) && is_signum(cx, right) {\n+            return;\n+        }\n+\n+        if let Some(name) = get_item_name(cx, expr) {\n+            let name = name.as_str();\n+            if name == \"eq\" || name == \"ne\" || name == \"is_nan\" || name.starts_with(\"eq_\") || name.ends_with(\"_eq\") {\n+                return;\n+            }\n+        }\n+        let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n+        let (lint, msg) = get_lint_and_message(\n+            is_named_constant(cx, left) || is_named_constant(cx, right),\n+            is_comparing_arrays,\n+        );\n+        span_lint_and_then(cx, lint, expr.span, msg, |diag| {\n+            let lhs = Sugg::hir(cx, left, \"..\");\n+            let rhs = Sugg::hir(cx, right, \"..\");\n+\n+            if !is_comparing_arrays {\n+                diag.span_suggestion(\n+                    expr.span,\n+                    \"consider comparing them within some margin of error\",\n+                    format!(\n+                        \"({}).abs() {} error_margin\",\n+                        lhs - rhs,\n+                        if op == BinOpKind::Eq { '<' } else { '>' }\n+                    ),\n+                    Applicability::HasPlaceholders, // snippet\n+                );\n+            }\n+            diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\");\n+        });\n+    } else if op == BinOpKind::Rem {\n+        if is_integer_const(cx, right, 1) {\n+            span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n+        }\n+\n+        if let ty::Int(ity) = cx.typeck_results().expr_ty(right).kind() {\n+            if is_integer_const(cx, right, unsext(cx.tcx, -1, *ity)) {\n+                span_lint(\n+                    cx,\n+                    MODULO_ONE,\n+                    expr.span,\n+                    \"any number modulo -1 will panic/overflow or result in 0\",\n+                );\n+            }\n+        };\n+    }\n+}"}, {"sha": "42f97b2ac497aa3151bda4f96da00c3a190b9930", "filename": "src/tools/clippy/clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -6,7 +6,6 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     higher, is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n };\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -198,13 +197,9 @@ struct ExpressionInfoWithSpan {\n }\n \n fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n-    if_chain! {\n-        if let ExprKind::Unary(unop, operand) = e.kind;\n-        if let UnOp::UnNot = unop;\n-        then {\n-            return (true, operand.span);\n-        }\n-    };\n+    if let ExprKind::Unary(UnOp::UnNot, operand) = e.kind {\n+        return (true, operand.span);\n+    }\n     (false, e.span)\n }\n "}, {"sha": "359620cc079752b806be469b03505d40aa4a2e1f", "filename": "src/tools/clippy/clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -66,7 +66,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNREACHABLE,\n     restriction,\n-    \"`unreachable!` should not be present in production code\"\n+    \"usage of the `unreachable!` macro\"\n }\n \n declare_lint_pass!(PanicUnimplemented => [UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n@@ -85,12 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n             } else if is_expn_of(expr.span, \"todo\").is_some() {\n                 span_lint(cx, TODO, span, \"`todo` should not be present in production code\");\n             } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-                span_lint(\n-                    cx,\n-                    UNREACHABLE,\n-                    span,\n-                    \"`unreachable` should not be present in production code\",\n-                );\n+                span_lint(cx, UNREACHABLE, span, \"usage of the `unreachable!` macro\");\n             } else if is_expn_of(expr.span, \"panic\").is_some() {\n                 span_lint(cx, PANIC, span, \"`panic` should not be present in production code\");\n             }"}, {"sha": "b91233ac582808dd7916039fe4c219bf4862634d", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -176,8 +176,7 @@ impl QuestionMark {\n             if block.stmts.len() == 1;\n             if let Some(expr) = block.stmts.iter().last();\n             if let StmtKind::Semi(ref expr) = expr.kind;\n-            if let ExprKind::Ret(ret_expr) = expr.kind;\n-            if let Some(ret_expr) = ret_expr;\n+            if let ExprKind::Ret(Some(ret_expr)) = expr.kind;\n \n             then {\n                 return Some(ret_expr);"}, {"sha": "f398b3fff25a328ec6b5d94c249a9e78de88fef5", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                 cx: &'a LateContext<'tcx>,\n                 path: &'tcx hir::Path<'tcx>,\n                 count: usize,\n-            };\n+            }\n             impl<'a, 'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'a, 'tcx> {\n                 type Map = Map<'tcx>;\n \n@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                 fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n                     hir_visit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n                 }\n-            };\n+            }\n             let mut closure_usage_count = ClosureUsageCount { cx, path, count: 0 };\n             closure_usage_count.visit_block(block);\n             closure_usage_count.count"}, {"sha": "ea7a76146f52c3bf9aad1eaac7b9824f5594aca8", "filename": "src/tools/clippy/clippy_lints/src/size_of_in_element_count.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,145 @@\n+//! Lint on use of `size_of` or `size_of_val` of T in an expression\n+//! expecting a count of T\n+\n+use crate::utils::{match_def_path, paths, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::BinOpKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Detects expressions where\n+    /// `size_of::<T>` or `size_of_val::<T>` is used as a\n+    /// count of elements of type `T`\n+    ///\n+    /// **Why is this bad?** These functions expect a count\n+    /// of `T` and not a number of bytes\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,no_run\n+    /// # use std::ptr::copy_nonoverlapping;\n+    /// # use std::mem::size_of;\n+    /// const SIZE: usize = 128;\n+    /// let x = [2u8; SIZE];\n+    /// let mut y = [2u8; SIZE];\n+    /// unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    /// ```\n+    pub SIZE_OF_IN_ELEMENT_COUNT,\n+    correctness,\n+    \"using `size_of::<T>` or `size_of_val::<T>` where a count of elements of `T` is expected\"\n+}\n+\n+declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n+\n+fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tcx>> {\n+    match expr.kind {\n+        ExprKind::Call(count_func, _func_args) => {\n+            if_chain! {\n+                if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n+                if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n+                if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n+                    || match_def_path(cx, def_id, &paths::MEM_SIZE_OF_VAL);\n+                then {\n+                    cx.typeck_results().node_substs(count_func.hir_id).types().next()\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n+            get_size_of_ty(cx, left).or_else(|| get_size_of_ty(cx, right))\n+        },\n+        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr),\n+        _ => None,\n+    }\n+}\n+\n+fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n+    const FUNCTIONS: [&[&str]; 8] = [\n+        &paths::COPY_NONOVERLAPPING,\n+        &paths::COPY,\n+        &paths::WRITE_BYTES,\n+        &paths::PTR_SWAP_NONOVERLAPPING,\n+        &paths::PTR_SLICE_FROM_RAW_PARTS,\n+        &paths::PTR_SLICE_FROM_RAW_PARTS_MUT,\n+        &paths::SLICE_FROM_RAW_PARTS,\n+        &paths::SLICE_FROM_RAW_PARTS_MUT,\n+    ];\n+    const METHODS: [&str; 11] = [\n+        \"write_bytes\",\n+        \"copy_to\",\n+        \"copy_from\",\n+        \"copy_to_nonoverlapping\",\n+        \"copy_from_nonoverlapping\",\n+        \"add\",\n+        \"wrapping_add\",\n+        \"sub\",\n+        \"wrapping_sub\",\n+        \"offset\",\n+        \"wrapping_offset\",\n+    ];\n+\n+    if_chain! {\n+        // Find calls to ptr::{copy, copy_nonoverlapping}\n+        // and ptr::{swap_nonoverlapping, write_bytes},\n+        if let ExprKind::Call(func, [.., count]) = expr.kind;\n+        if let ExprKind::Path(ref func_qpath) = func.kind;\n+        if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n+        if FUNCTIONS.iter().any(|func_path| match_def_path(cx, def_id, func_path));\n+\n+        // Get the pointee type\n+        if let Some(pointee_ty) = cx.typeck_results().node_substs(func.hir_id).types().next();\n+        then {\n+            return Some((pointee_ty, count));\n+        }\n+    };\n+    if_chain! {\n+        // Find calls to copy_{from,to}{,_nonoverlapping} and write_bytes methods\n+        if let ExprKind::MethodCall(method_path, _, [ptr_self, .., count], _) = expr.kind;\n+        let method_ident = method_path.ident.as_str();\n+        if METHODS.iter().any(|m| *m == &*method_ident);\n+\n+        // Get the pointee type\n+        if let ty::RawPtr(TypeAndMut { ty: pointee_ty, .. }) =\n+            cx.typeck_results().expr_ty(ptr_self).kind();\n+        then {\n+            return Some((pointee_ty, count));\n+        }\n+    };\n+    None\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        const HELP_MSG: &str = \"use a count of elements instead of a count of bytes\\\n+            , it already gets multiplied by the size of the type\";\n+\n+        const LINT_MSG: &str = \"found a count of bytes \\\n+             instead of a count of elements of `T`\";\n+\n+        if_chain! {\n+            // Find calls to functions with an element count parameter and get\n+            // the pointee type and count parameter expression\n+            if let Some((pointee_ty, count_expr)) = get_pointee_ty_and_count_expr(cx, expr);\n+\n+            // Find a size_of call in the count parameter expression and\n+            // check that it's the same type\n+            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr);\n+            if TyS::same_type(pointee_ty, ty_used_for_size_of);\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    SIZE_OF_IN_ELEMENT_COUNT,\n+                    count_expr.span,\n+                    LINT_MSG,\n+                    None,\n+                    HELP_MSG\n+                );\n+            }\n+        };\n+    }\n+}"}, {"sha": "77e790733789c23c061436734afb9b15b5073d2c", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 100, "deletions": 3, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -2,6 +2,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n@@ -11,7 +12,7 @@ use if_chain::if_chain;\n use crate::utils::SpanlessEq;\n use crate::utils::{\n     get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n-    span_lint_and_sugg,\n+    span_lint_and_help, span_lint_and_sugg,\n };\n \n declare_clippy_lint! {\n@@ -221,8 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if method_names[0] == sym!(as_bytes);\n \n             // Check for slicer\n-            if let ExprKind::Struct(ref path, _, _) = right.kind;\n-            if let QPath::LangItem(LangItem::Range, _) = path;\n+            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, _), _, _) = right.kind;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -289,3 +289,100 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n     }\n }\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`.\n+    ///\n+    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// When called on a `&str` it turns the `&str` into the owned variant `String`, which can be better\n+    /// expressed with `.to_owned()`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// let _ = \"str\".to_string();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// let _ = \"str\".to_owned();\n+    /// ```\n+    pub STR_TO_STRING,\n+    restriction,\n+    \"using `to_string()` on a `&str`, which should be `to_owned()`\"\n+}\n+\n+declare_lint_pass!(StrToString => [STR_TO_STRING]);\n+\n+impl LateLintPass<'_> for StrToString {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if path.ident.name == sym!(to_string);\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            if let ty::Ref(_, ty, ..) = ty.kind();\n+            if *ty.kind() == ty::Str;\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    STR_TO_STRING,\n+                    expr.span,\n+                    \"`to_string()` called on a `&str`\",\n+                    None,\n+                    \"consider using `.to_owned()`\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`.\n+    ///\n+    /// **Why is this bad?** The `to_string` method is also used on other types to convert them to a string.\n+    /// When called on a `String` it only clones the `String`, which can be better expressed with `.clone()`.\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// let msg = String::from(\"Hello World\");\n+    /// let _ = msg.to_string();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// let msg = String::from(\"Hello World\");\n+    /// let _ = msg.clone();\n+    /// ```\n+    pub STRING_TO_STRING,\n+    restriction,\n+    \"using `to_string()` on a `String`, which should be `clone()`\"\n+}\n+\n+declare_lint_pass!(StringToString => [STRING_TO_STRING]);\n+\n+impl LateLintPass<'_> for StringToString {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if path.ident.name == sym!(to_string);\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            if is_type_diagnostic_item(cx, ty, sym!(string_type));\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    STRING_TO_STRING,\n+                    expr.span,\n+                    \"`to_string()` called on a `String`\",\n+                    None,\n+                    \"consider using `.clone()`\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "cccd24ccf9401eaca5085f88601deb18f0dc9189", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "added", "additions": 693, "deletions": 0, "changes": 693, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,693 @@\n+use crate::utils::ast_utils::{eq_id, is_useless_with_eq_exprs, IdentIter};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use core::ops::{Add, AddAssign};\n+use if_chain::if_chain;\n+use rustc_ast::ast::{BinOpKind, Expr, ExprKind, StmtKind};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for unlikely usages of binary operators that are almost\n+    /// certainly typos and/or copy/paste errors, given the other usages\n+    /// of binary operators nearby.\n+    /// **Why is this bad?**\n+    /// They are probably bugs and if they aren't then they look like bugs\n+    /// and you should add a comment explaining why you are doing such an\n+    /// odd set of operations.\n+    /// **Known problems:**\n+    /// There may be some false positives if you are trying to do something\n+    /// unusual that happens to look like a typo.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Vec3 {\n+    ///     x: f64,\n+    ///     y: f64,\n+    ///     z: f64,\n+    /// }\n+    ///\n+    /// impl Eq for Vec3 {}\n+    ///\n+    /// impl PartialEq for Vec3 {\n+    ///     fn eq(&self, other: &Self) -> bool {\n+    ///         // This should trigger the lint because `self.x` is compared to `other.y`\n+    ///         self.x == other.y && self.y == other.y && self.z == other.z\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Vec3 {\n+    /// #     x: f64,\n+    /// #     y: f64,\n+    /// #     z: f64,\n+    /// # }\n+    /// // same as above except:\n+    /// impl PartialEq for Vec3 {\n+    ///     fn eq(&self, other: &Self) -> bool {\n+    ///         // Note we now compare other.x to self.x\n+    ///         self.x == other.x && self.y == other.y && self.z == other.z\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SUSPICIOUS_OPERATION_GROUPINGS,\n+    style,\n+    \"groupings of binary operations that look suspiciously like typos\"\n+}\n+\n+declare_lint_pass!(SuspiciousOperationGroupings => [SUSPICIOUS_OPERATION_GROUPINGS]);\n+\n+impl EarlyLintPass for SuspiciousOperationGroupings {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n+        if let Some(binops) = extract_related_binops(&expr.kind) {\n+            check_binops(cx, &binops.iter().collect::<Vec<_>>());\n+\n+            let mut op_types = Vec::with_capacity(binops.len());\n+            // We could use a hashmap, etc. to avoid being O(n*m) here, but\n+            // we want the lints to be emitted in a consistent order. Besides,\n+            // m, (the number of distinct `BinOpKind`s in `binops`)\n+            // will often be small, and does have an upper limit.\n+            binops.iter().map(|b| b.op).for_each(|op| {\n+                if !op_types.contains(&op) {\n+                    op_types.push(op);\n+                }\n+            });\n+\n+            for op_type in op_types {\n+                let ops: Vec<_> = binops.iter().filter(|b| b.op == op_type).collect();\n+\n+                check_binops(cx, &ops);\n+            }\n+        }\n+    }\n+}\n+\n+fn check_binops(cx: &EarlyContext<'_>, binops: &[&BinaryOp<'_>]) {\n+    let binop_count = binops.len();\n+    if binop_count < 2 {\n+        // Single binary operation expressions would likely be false\n+        // positives.\n+        return;\n+    }\n+\n+    let mut one_ident_difference_count = 0;\n+    let mut no_difference_info = None;\n+    let mut double_difference_info = None;\n+    let mut expected_ident_loc = None;\n+\n+    let mut paired_identifiers = FxHashSet::default();\n+\n+    for (i, BinaryOp { left, right, op, .. }) in binops.iter().enumerate() {\n+        match ident_difference_expr(left, right) {\n+            IdentDifference::NoDifference => {\n+                if is_useless_with_eq_exprs(*op) {\n+                    // The `eq_op` lint should catch this in this case.\n+                    return;\n+                }\n+\n+                no_difference_info = Some(i);\n+            },\n+            IdentDifference::Single(ident_loc) => {\n+                one_ident_difference_count += 1;\n+                if let Some(previous_expected) = expected_ident_loc {\n+                    if previous_expected != ident_loc {\n+                        // This expression doesn't match the form we're\n+                        // looking for.\n+                        return;\n+                    }\n+                } else {\n+                    expected_ident_loc = Some(ident_loc);\n+                }\n+\n+                // If there was only a single difference, all other idents\n+                // must have been the same, and thus were paired.\n+                for id in skip_index(IdentIter::from(*left), ident_loc.index) {\n+                    paired_identifiers.insert(id);\n+                }\n+            },\n+            IdentDifference::Double(ident_loc1, ident_loc2) => {\n+                double_difference_info = Some((i, ident_loc1, ident_loc2));\n+            },\n+            IdentDifference::Multiple | IdentDifference::NonIdent => {\n+                // It's too hard to know whether this is a bug or not.\n+                return;\n+            },\n+        }\n+    }\n+\n+    let mut applicability = Applicability::MachineApplicable;\n+\n+    if let Some(expected_loc) = expected_ident_loc {\n+        match (no_difference_info, double_difference_info) {\n+            (Some(i), None) => attempt_to_emit_no_difference_lint(cx, binops, i, expected_loc),\n+            (None, Some((double_difference_index, ident_loc1, ident_loc2))) => {\n+                if_chain! {\n+                    if one_ident_difference_count == binop_count - 1;\n+                    if let Some(binop) = binops.get(double_difference_index);\n+                    then {\n+                        let changed_loc = if ident_loc1 == expected_loc {\n+                            ident_loc2\n+                        } else if ident_loc2 == expected_loc {\n+                            ident_loc1\n+                        } else {\n+                            // This expression doesn't match the form we're\n+                            // looking for.\n+                            return;\n+                        };\n+\n+                        if let Some(sugg) = ident_swap_sugg(\n+                            cx,\n+                            &paired_identifiers,\n+                            binop,\n+                            changed_loc,\n+                            &mut applicability,\n+                        ) {\n+                            emit_suggestion(\n+                                cx,\n+                                binop.span,\n+                                sugg,\n+                                applicability,\n+                            );\n+                        }\n+                    }\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+fn attempt_to_emit_no_difference_lint(\n+    cx: &EarlyContext<'_>,\n+    binops: &[&BinaryOp<'_>],\n+    i: usize,\n+    expected_loc: IdentLocation,\n+) {\n+    if let Some(binop) = binops.get(i).cloned() {\n+        // We need to try and figure out which identifier we should\n+        // suggest using instead. Since there could be multiple\n+        // replacement candidates in a given expression, and we're\n+        // just taking the first one, we may get some bad lint\n+        // messages.\n+        let mut applicability = Applicability::MaybeIncorrect;\n+\n+        // We assume that the correct ident is one used elsewhere in\n+        // the other binops, in a place that there was a single\n+        // difference between idents before.\n+        let old_left_ident = get_ident(binop.left, expected_loc);\n+        let old_right_ident = get_ident(binop.right, expected_loc);\n+\n+        for b in skip_index(binops.iter(), i) {\n+            if_chain! {\n+                if let (Some(old_ident), Some(new_ident)) =\n+                (old_left_ident, get_ident(b.left, expected_loc));\n+                if old_ident != new_ident;\n+                if let Some(sugg) = suggestion_with_swapped_ident(\n+                    cx,\n+                    binop.left,\n+                    expected_loc,\n+                    new_ident,\n+                    &mut applicability,\n+                );\n+                then {\n+                    emit_suggestion(\n+                        cx,\n+                        binop.span,\n+                        replace_left_sugg(cx, &binop, &sugg, &mut applicability),\n+                        applicability,\n+                    );\n+                    return;\n+                }\n+            }\n+\n+            if_chain! {\n+                if let (Some(old_ident), Some(new_ident)) =\n+                    (old_right_ident, get_ident(b.right, expected_loc));\n+                if old_ident != new_ident;\n+                if let Some(sugg) = suggestion_with_swapped_ident(\n+                    cx,\n+                    binop.right,\n+                    expected_loc,\n+                    new_ident,\n+                    &mut applicability,\n+                );\n+                then {\n+                    emit_suggestion(\n+                        cx,\n+                        binop.span,\n+                        replace_right_sugg(cx, &binop, &sugg, &mut applicability),\n+                        applicability,\n+                    );\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn emit_suggestion(cx: &EarlyContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n+    span_lint_and_sugg(\n+        cx,\n+        SUSPICIOUS_OPERATION_GROUPINGS,\n+        span,\n+        \"This sequence of operators looks suspiciously like a bug.\",\n+        \"I think you meant\",\n+        sugg,\n+        applicability,\n+    )\n+}\n+\n+fn ident_swap_sugg(\n+    cx: &EarlyContext<'_>,\n+    paired_identifiers: &FxHashSet<Ident>,\n+    binop: &BinaryOp<'_>,\n+    location: IdentLocation,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n+    let left_ident = get_ident(&binop.left, location)?;\n+    let right_ident = get_ident(&binop.right, location)?;\n+\n+    let sugg = match (\n+        paired_identifiers.contains(&left_ident),\n+        paired_identifiers.contains(&right_ident),\n+    ) {\n+        (true, true) | (false, false) => {\n+            // We don't have a good guess of what ident should be\n+            // used instead, in these cases.\n+            *applicability = Applicability::MaybeIncorrect;\n+\n+            // We arbitraily choose one side to suggest changing,\n+            // since we don't have a better guess. If the user\n+            // ends up duplicating a clause, the `logic_bug` lint\n+            // should catch it.\n+\n+            let right_suggestion =\n+                suggestion_with_swapped_ident(cx, &binop.right, location, left_ident, applicability)?;\n+\n+            replace_right_sugg(cx, binop, &right_suggestion, applicability)\n+        },\n+        (false, true) => {\n+            // We haven't seen a pair involving the left one, so\n+            // it's probably what is wanted.\n+\n+            let right_suggestion =\n+                suggestion_with_swapped_ident(cx, &binop.right, location, left_ident, applicability)?;\n+\n+            replace_right_sugg(cx, binop, &right_suggestion, applicability)\n+        },\n+        (true, false) => {\n+            // We haven't seen a pair involving the right one, so\n+            // it's probably what is wanted.\n+            let left_suggestion = suggestion_with_swapped_ident(cx, &binop.left, location, right_ident, applicability)?;\n+\n+            replace_left_sugg(cx, binop, &left_suggestion, applicability)\n+        },\n+    };\n+\n+    Some(sugg)\n+}\n+\n+fn replace_left_sugg(\n+    cx: &EarlyContext<'_>,\n+    binop: &BinaryOp<'_>,\n+    left_suggestion: &str,\n+    applicability: &mut Applicability,\n+) -> String {\n+    format!(\n+        \"{} {} {}\",\n+        left_suggestion,\n+        binop.op.to_string(),\n+        snippet_with_applicability(cx, binop.right.span, \"..\", applicability),\n+    )\n+}\n+\n+fn replace_right_sugg(\n+    cx: &EarlyContext<'_>,\n+    binop: &BinaryOp<'_>,\n+    right_suggestion: &str,\n+    applicability: &mut Applicability,\n+) -> String {\n+    format!(\n+        \"{} {} {}\",\n+        snippet_with_applicability(cx, binop.left.span, \"..\", applicability),\n+        binop.op.to_string(),\n+        right_suggestion,\n+    )\n+}\n+\n+#[derive(Clone, Debug)]\n+struct BinaryOp<'exprs> {\n+    op: BinOpKind,\n+    span: Span,\n+    left: &'exprs Expr,\n+    right: &'exprs Expr,\n+}\n+\n+impl BinaryOp<'exprs> {\n+    fn new(op: BinOpKind, span: Span, (left, right): (&'exprs Expr, &'exprs Expr)) -> Self {\n+        Self { op, span, left, right }\n+    }\n+}\n+\n+fn strip_non_ident_wrappers(expr: &Expr) -> &Expr {\n+    let mut output = expr;\n+    loop {\n+        output = match &output.kind {\n+            ExprKind::Paren(ref inner) | ExprKind::Unary(_, ref inner) => inner,\n+            _ => {\n+                return output;\n+            },\n+        };\n+    }\n+}\n+\n+fn extract_related_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+    append_opt_vecs(chained_binops(kind), if_statment_binops(kind))\n+}\n+\n+fn if_statment_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+    match kind {\n+        ExprKind::If(ref condition, _, _) => chained_binops(&condition.kind),\n+        ExprKind::Paren(ref e) => if_statment_binops(&e.kind),\n+        ExprKind::Block(ref block, _) => {\n+            let mut output = None;\n+            for stmt in &block.stmts {\n+                match stmt.kind {\n+                    StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => {\n+                        output = append_opt_vecs(output, if_statment_binops(&e.kind));\n+                    },\n+                    _ => {},\n+                }\n+            }\n+            output\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn append_opt_vecs<A>(target_opt: Option<Vec<A>>, source_opt: Option<Vec<A>>) -> Option<Vec<A>> {\n+    match (target_opt, source_opt) {\n+        (Some(mut target), Some(mut source)) => {\n+            target.reserve(source.len());\n+            for op in source.drain(..) {\n+                target.push(op);\n+            }\n+            Some(target)\n+        },\n+        (Some(v), None) | (None, Some(v)) => Some(v),\n+        (None, None) => None,\n+    }\n+}\n+\n+fn chained_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+    match kind {\n+        ExprKind::Binary(_, left_outer, right_outer) => chained_binops_helper(left_outer, right_outer),\n+        ExprKind::Paren(ref e) | ExprKind::Unary(_, ref e) => chained_binops(&e.kind),\n+        _ => None,\n+    }\n+}\n+\n+fn chained_binops_helper(left_outer: &'expr Expr, right_outer: &'expr Expr) -> Option<Vec<BinaryOp<'expr>>> {\n+    match (&left_outer.kind, &right_outer.kind) {\n+        (\n+            ExprKind::Paren(ref left_e) | ExprKind::Unary(_, ref left_e),\n+            ExprKind::Paren(ref right_e) | ExprKind::Unary(_, ref right_e),\n+        ) => chained_binops_helper(left_e, right_e),\n+        (ExprKind::Paren(ref left_e) | ExprKind::Unary(_, ref left_e), _) => chained_binops_helper(left_e, right_outer),\n+        (_, ExprKind::Paren(ref right_e) | ExprKind::Unary(_, ref right_e)) => {\n+            chained_binops_helper(left_outer, right_e)\n+        },\n+        (\n+            ExprKind::Binary(Spanned { node: left_op, .. }, ref left_left, ref left_right),\n+            ExprKind::Binary(Spanned { node: right_op, .. }, ref right_left, ref right_right),\n+        ) => match (\n+            chained_binops_helper(left_left, left_right),\n+            chained_binops_helper(right_left, right_right),\n+        ) {\n+            (Some(mut left_ops), Some(mut right_ops)) => {\n+                left_ops.reserve(right_ops.len());\n+                for op in right_ops.drain(..) {\n+                    left_ops.push(op);\n+                }\n+                Some(left_ops)\n+            },\n+            (Some(mut left_ops), _) => {\n+                left_ops.push(BinaryOp::new(*right_op, right_outer.span, (right_left, right_right)));\n+                Some(left_ops)\n+            },\n+            (_, Some(mut right_ops)) => {\n+                right_ops.insert(0, BinaryOp::new(*left_op, left_outer.span, (left_left, left_right)));\n+                Some(right_ops)\n+            },\n+            (None, None) => Some(vec![\n+                BinaryOp::new(*left_op, left_outer.span, (left_left, left_right)),\n+                BinaryOp::new(*right_op, right_outer.span, (right_left, right_right)),\n+            ]),\n+        },\n+        _ => None,\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Default, Debug)]\n+struct IdentLocation {\n+    index: usize,\n+}\n+\n+impl Add for IdentLocation {\n+    type Output = IdentLocation;\n+\n+    fn add(self, other: Self) -> Self::Output {\n+        Self {\n+            index: self.index + other.index,\n+        }\n+    }\n+}\n+\n+impl AddAssign for IdentLocation {\n+    fn add_assign(&mut self, other: Self) {\n+        *self = *self + other\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug)]\n+enum IdentDifference {\n+    NoDifference,\n+    Single(IdentLocation),\n+    Double(IdentLocation, IdentLocation),\n+    Multiple,\n+    NonIdent,\n+}\n+\n+impl Add for IdentDifference {\n+    type Output = IdentDifference;\n+\n+    fn add(self, other: Self) -> Self::Output {\n+        match (self, other) {\n+            (Self::NoDifference, output) | (output, Self::NoDifference) => output,\n+            (Self::Multiple, _)\n+            | (_, Self::Multiple)\n+            | (Self::Double(_, _), Self::Single(_))\n+            | (Self::Single(_) | Self::Double(_, _), Self::Double(_, _)) => Self::Multiple,\n+            (Self::NonIdent, _) | (_, Self::NonIdent) => Self::NonIdent,\n+            (Self::Single(il1), Self::Single(il2)) => Self::Double(il1, il2),\n+        }\n+    }\n+}\n+\n+impl AddAssign for IdentDifference {\n+    fn add_assign(&mut self, other: Self) {\n+        *self = *self + other\n+    }\n+}\n+\n+impl IdentDifference {\n+    /// Returns true if learning about more differences will not change the value\n+    /// of this `IdentDifference`, and false otherwise.\n+    fn is_complete(&self) -> bool {\n+        match self {\n+            Self::NoDifference | Self::Single(_) | Self::Double(_, _) => false,\n+            Self::Multiple | Self::NonIdent => true,\n+        }\n+    }\n+}\n+\n+fn ident_difference_expr(left: &Expr, right: &Expr) -> IdentDifference {\n+    ident_difference_expr_with_base_location(left, right, IdentLocation::default()).0\n+}\n+\n+fn ident_difference_expr_with_base_location(\n+    left: &Expr,\n+    right: &Expr,\n+    mut base: IdentLocation,\n+) -> (IdentDifference, IdentLocation) {\n+    // Ideally, this function should not use IdentIter because it should return\n+    // early if the expressions have any non-ident differences. We want that early\n+    // return because if without that restriction the lint would lead to false\n+    // positives.\n+    //\n+    // But, we cannot (easily?) use a `rustc_ast::visit::Visitor`, since we need\n+    // the two expressions to be walked in lockstep. And without a `Visitor`, we'd\n+    // have to do all the AST traversal ourselves, which is a lot of work, since to\n+    // do it properly we'd need to be able to handle more or less every possible\n+    // AST node since `Item`s can be written inside `Expr`s.\n+    //\n+    // In practice, it seems likely that expressions, above a certain size, that\n+    // happen to use the exact same idents in the exact same order, and which are\n+    // not structured the same, would be rare. Therefore it seems likely that if\n+    // we do only the first layer of matching ourselves and eventually fallback on\n+    // IdentIter, then the output of this function will be almost always be correct\n+    // in practice.\n+    //\n+    // If it turns out that problematic cases are more prelavent than we assume,\n+    // then we should be able to change this function to do the correct traversal,\n+    // without needing to change the rest of the code.\n+\n+    #![allow(clippy::enum_glob_use)]\n+    use ExprKind::*;\n+\n+    match (\n+        &strip_non_ident_wrappers(left).kind,\n+        &strip_non_ident_wrappers(right).kind,\n+    ) {\n+        (Yield(_), Yield(_))\n+        | (Try(_), Try(_))\n+        | (Paren(_), Paren(_))\n+        | (Repeat(_, _), Repeat(_, _))\n+        | (Struct(_, _, _), Struct(_, _, _))\n+        | (MacCall(_), MacCall(_))\n+        | (LlvmInlineAsm(_), LlvmInlineAsm(_))\n+        | (InlineAsm(_), InlineAsm(_))\n+        | (Ret(_), Ret(_))\n+        | (Continue(_), Continue(_))\n+        | (Break(_, _), Break(_, _))\n+        | (AddrOf(_, _, _), AddrOf(_, _, _))\n+        | (Path(_, _), Path(_, _))\n+        | (Range(_, _, _), Range(_, _, _))\n+        | (Index(_, _), Index(_, _))\n+        | (Field(_, _), Field(_, _))\n+        | (AssignOp(_, _, _), AssignOp(_, _, _))\n+        | (Assign(_, _, _), Assign(_, _, _))\n+        | (TryBlock(_), TryBlock(_))\n+        | (Await(_), Await(_))\n+        | (Async(_, _, _), Async(_, _, _))\n+        | (Block(_, _), Block(_, _))\n+        | (Closure(_, _, _, _, _, _), Closure(_, _, _, _, _, _))\n+        | (Match(_, _), Match(_, _))\n+        | (Loop(_, _), Loop(_, _))\n+        | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))\n+        | (While(_, _, _), While(_, _, _))\n+        | (If(_, _, _), If(_, _, _))\n+        | (Let(_, _), Let(_, _))\n+        | (Type(_, _), Type(_, _))\n+        | (Cast(_, _), Cast(_, _))\n+        | (Lit(_), Lit(_))\n+        | (Unary(_, _), Unary(_, _))\n+        | (Binary(_, _, _), Binary(_, _, _))\n+        | (Tup(_), Tup(_))\n+        | (MethodCall(_, _, _), MethodCall(_, _, _))\n+        | (Call(_, _), Call(_, _))\n+        | (ConstBlock(_), ConstBlock(_))\n+        | (Array(_), Array(_))\n+        | (Box(_), Box(_)) => {\n+            // keep going\n+        },\n+        _ => {\n+            return (IdentDifference::NonIdent, base);\n+        },\n+    }\n+\n+    let mut difference = IdentDifference::NoDifference;\n+\n+    for (left_attr, right_attr) in left.attrs.iter().zip(right.attrs.iter()) {\n+        let (new_difference, new_base) =\n+            ident_difference_via_ident_iter_with_base_location(left_attr, right_attr, base);\n+        base = new_base;\n+        difference += new_difference;\n+        if difference.is_complete() {\n+            return (difference, base);\n+        }\n+    }\n+\n+    let (new_difference, new_base) = ident_difference_via_ident_iter_with_base_location(left, right, base);\n+    base = new_base;\n+    difference += new_difference;\n+\n+    (difference, base)\n+}\n+\n+fn ident_difference_via_ident_iter_with_base_location<Iterable: Into<IdentIter>>(\n+    left: Iterable,\n+    right: Iterable,\n+    mut base: IdentLocation,\n+) -> (IdentDifference, IdentLocation) {\n+    // See the note in `ident_difference_expr_with_base_location` about `IdentIter`\n+    let mut difference = IdentDifference::NoDifference;\n+\n+    let mut left_iterator = left.into();\n+    let mut right_iterator = right.into();\n+\n+    loop {\n+        match (left_iterator.next(), right_iterator.next()) {\n+            (Some(left_ident), Some(right_ident)) => {\n+                if !eq_id(left_ident, right_ident) {\n+                    difference += IdentDifference::Single(base);\n+                    if difference.is_complete() {\n+                        return (difference, base);\n+                    }\n+                }\n+            },\n+            (Some(_), None) | (None, Some(_)) => {\n+                return (IdentDifference::NonIdent, base);\n+            },\n+            (None, None) => {\n+                return (difference, base);\n+            },\n+        }\n+        base += IdentLocation { index: 1 };\n+    }\n+}\n+\n+fn get_ident(expr: &Expr, location: IdentLocation) -> Option<Ident> {\n+    IdentIter::from(expr).nth(location.index)\n+}\n+\n+fn suggestion_with_swapped_ident(\n+    cx: &EarlyContext<'_>,\n+    expr: &Expr,\n+    location: IdentLocation,\n+    new_ident: Ident,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n+    get_ident(expr, location).and_then(|current_ident| {\n+        if eq_id(current_ident, new_ident) {\n+            // We never want to suggest a non-change\n+            return None;\n+        }\n+\n+        Some(format!(\n+            \"{}{}{}\",\n+            snippet_with_applicability(cx, expr.span.with_hi(current_ident.span.lo()), \"..\", applicability),\n+            new_ident.to_string(),\n+            snippet_with_applicability(cx, expr.span.with_lo(current_ident.span.hi()), \"..\", applicability),\n+        ))\n+    })\n+}\n+\n+fn skip_index<A, Iter>(iter: Iter, index: usize) -> impl Iterator<Item = A>\n+where\n+    Iter: Iterator<Item = A>,\n+{\n+    iter.enumerate()\n+        .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n+}"}, {"sha": "daff5f81e8c34c926a830089025eff5294a7d540", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -168,8 +168,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n             if !in_macro(bound_predicate.span);\n-            if let TyKind::Path(ref path) = bound_predicate.bounded_ty.kind;\n-            if let QPath::Resolved(_, Path { ref segments, .. }) = path;\n+            if let TyKind::Path(QPath::Resolved(_, Path { ref segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();\n             if let Some(trait_resolutions_direct) = map.get(&segment.ident);\n             then {"}, {"sha": "6b171a0fa1af2ef2058f402837237f957153908f", "filename": "src/tools/clippy/clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -48,8 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 if_chain! {\n                     if let ExprKind::Path(ref _qpath) = args[0].kind;\n                     let x = const_eval_context.expr(&args[0]);\n-                    if let Some(constant) = x;\n-                    if let Constant::RawPtr(0) = constant;\n+                    if let Some(Constant::RawPtr(0)) = x;\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "74ba53e6a9a02fbd9c7f90b63ed72e8d58ea00c9", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -8,6 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -737,8 +738,7 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n     if_chain! {\n         if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n-        if let Some(node) = cx.tcx.hir().get_if_local(did);\n-        if let Node::GenericParam(generic_param) = node;\n+        if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n         then {\n@@ -1469,8 +1469,7 @@ fn check_loss_of_sign(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // don't lint for positive constants\n     let const_val = constant(cx, &cx.typeck_results(), op);\n     if_chain! {\n-        if let Some((const_val, _)) = const_val;\n-        if let Constant::Int(n) = const_val;\n+        if let Some((Constant::Int(n), _)) = const_val;\n         if let ty::Int(ity) = *cast_from.kind();\n         if sext(cx.tcx, n, ity) >= 0;\n         then {\n@@ -1632,7 +1631,14 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Cast(ref ex, _) = expr.kind {\n+        if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n+                if let Res::Def(_, def_id) = path.res {\n+                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n+                        return;\n+                    }\n+                }\n+            }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let Some(lit) = get_numeric_literal(ex) {\n@@ -1711,7 +1717,7 @@ fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &st\n         expr.span,\n         &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n         \"try\",\n-        format!(\"{}_{}\", literal_str, cast_to),\n+        format!(\"{}_{}\", literal_str.trim_end_matches('.'), cast_to),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "5d801511a0b185b32af9e40816f1fc6a68cfd42c", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    contains_return, in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n     visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n@@ -95,6 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                 if let ExprKind::Path(ref qpath) = func.kind;\n                 if match_qpath(qpath, path);\n                 if args.len() == 1;\n+                if !contains_return(&args[0]);\n                 then {\n                     suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n                     true\n@@ -134,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                     diag.multipart_suggestion(\n                         \"...and change the returning expressions\",\n                         suggs,\n-                        Applicability::MachineApplicable,\n+                        Applicability::MaybeIncorrect,\n                     );\n                 },\n             );"}, {"sha": "31b4e25411bd39ba24a2aa927d4c28259e24a405", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -10,6 +10,17 @@ use rustc_ast::{self as ast, *};\n use rustc_span::symbol::Ident;\n use std::mem;\n \n+pub mod ident_iter;\n+pub use ident_iter::IdentIter;\n+\n+pub fn is_useless_with_eq_exprs(kind: BinOpKind) -> bool {\n+    use BinOpKind::*;\n+    matches!(\n+        kind,\n+        Sub | Div | Eq | Lt | Le | Gt | Ge | Ne | And | Or | BitXor | BitAnd | BitOr\n+    )\n+}\n+\n /// Checks if each element in the first slice is contained within the latter as per `eq_fn`.\n pub fn unordered_over<X>(left: &[X], right: &[X], mut eq_fn: impl FnMut(&X, &X) -> bool) -> bool {\n     left.len() == right.len() && left.iter().all(|l| right.iter().any(|r| eq_fn(l, r)))"}, {"sha": "eefcbabd835d2b669cf65be463c4130b366b66e7", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils/ident_iter.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils%2Fident_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils%2Fident_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils%2Fident_iter.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,45 @@\n+use core::iter::FusedIterator;\n+use rustc_ast::visit::{walk_attribute, walk_expr, Visitor};\n+use rustc_ast::{Attribute, Expr};\n+use rustc_span::symbol::Ident;\n+\n+pub struct IdentIter(std::vec::IntoIter<Ident>);\n+\n+impl Iterator for IdentIter {\n+    type Item = Ident;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+}\n+\n+impl FusedIterator for IdentIter {}\n+\n+impl From<&Expr> for IdentIter {\n+    fn from(expr: &Expr) -> Self {\n+        let mut visitor = IdentCollector::default();\n+\n+        walk_expr(&mut visitor, expr);\n+\n+        IdentIter(visitor.0.into_iter())\n+    }\n+}\n+\n+impl From<&Attribute> for IdentIter {\n+    fn from(attr: &Attribute) -> Self {\n+        let mut visitor = IdentCollector::default();\n+\n+        walk_attribute(&mut visitor, attr);\n+\n+        IdentIter(visitor.0.into_iter())\n+    }\n+}\n+\n+#[derive(Default)]\n+struct IdentCollector(Vec<Ident>);\n+\n+impl Visitor<'_> for IdentCollector {\n+    fn visit_ident(&mut self, ident: Ident) {\n+        self.0.push(ident);\n+    }\n+}"}, {"sha": "24052a243af8245bf8c86e0408e7db4366c71751", "filename": "src/tools/clippy/clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -21,6 +21,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, DeprecationStatus)] = &[\n         DeprecationStatus::Replaced(\"cognitive_complexity\"),\n     ),\n     (\"dump\", DeprecationStatus::None),\n+    (\"msrv\", DeprecationStatus::None),\n ];\n \n pub struct LimitStack {\n@@ -123,6 +124,24 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n+pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'static str) -> Option<ast::Attribute> {\n+    let mut unique_attr = None;\n+    for attr in get_attr(sess, attrs, name) {\n+        match attr.style {\n+            ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n+            ast::AttrStyle::Inner => {\n+                sess.struct_span_err(attr.span, &format!(\"`{}` is defined multiple times\", name))\n+                    .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n+                    .emit();\n+            },\n+            ast::AttrStyle::Outer => {\n+                sess.span_err(attr.span, &format!(\"`{}` cannot be an outer attribute\", name));\n+            },\n+        }\n+    }\n+    unique_attr\n+}\n+\n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {"}, {"sha": "6403ff6dad18561700b83f447ce6116935b1034b", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -106,6 +106,8 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n+    /// Lint: MANUAL_NON_EXHAUSTIVE, MANUAL_STRIP, OPTION_AS_REF_DEREF, MATCH_LIKE_MATCHES_MACRO. The minimum rust version that the project supports\n+    (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n@@ -168,6 +170,8 @@ define_Conf! {\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n     /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n+    /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n+    (unreadable_literal_lint_fractions, \"unreadable_literal_lint_fractions\": bool, true),\n }\n \n impl Default for Conf {"}, {"sha": "a7a6b5855b754948957f7ce187261ac685303f37", "filename": "src/tools/clippy/clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -186,7 +186,9 @@ pub fn span_lint_hir_and_then(\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n-#[allow(clippy::collapsible_span_lint_calls)]\n+\n+#[allow(clippy::unknown_clippy_lints)]\n+#[cfg_attr(feature = \"internal-lints\", allow(clippy::collapsible_span_lint_calls))]\n pub fn span_lint_and_sugg<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,"}, {"sha": "01ffac5b5599d547dee26056a8f549b574e3a799", "filename": "src/tools/clippy/clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -162,8 +162,7 @@ pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<\n         if let hir::Block { expr: Some(expr), .. } = &**block;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n-        if let [arm, ..] = &arms[..];\n-        if let hir::Arm { body, .. } = arm;\n+        if let [hir::Arm { body, .. }, ..] = &arms[..];\n         then {\n             return Some((cond, body));\n         }"}, {"sha": "d847d22275e831df1ff791418da5a2e02891cf22", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             }\n         }\n \n-        match (&left.kind, &right.kind) {\n+        match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n             (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n@@ -306,6 +306,32 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n }\n \n+/// Some simple reductions like `{ return }` => `return`\n+fn reduce_exprkind<'hir>(kind: &'hir ExprKind<'hir>) -> &ExprKind<'hir> {\n+    if let ExprKind::Block(block, _) = kind {\n+        match (block.stmts, block.expr) {\n+            // `{}` => `()`\n+            ([], None) => &ExprKind::Tup(&[]),\n+            ([], Some(expr)) => match expr.kind {\n+                // `{ return .. }` => `return ..`\n+                ExprKind::Ret(..) => &expr.kind,\n+                _ => kind,\n+            },\n+            ([stmt], None) => match stmt.kind {\n+                StmtKind::Expr(expr) | StmtKind::Semi(expr) => match expr.kind {\n+                    // `{ return ..; }` => `return ..`\n+                    ExprKind::Ret(..) => &expr.kind,\n+                    _ => kind,\n+                },\n+                _ => kind,\n+            },\n+            _ => kind,\n+        }\n+    } else {\n+        kind\n+    }\n+}\n+\n fn swap_binop<'a>(\n     binop: BinOpKind,\n     lhs: &'a Expr<'a>,"}, {"sha": "3a6b64c90e8f65ef4634ecc7197f2275af7017c9", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -14,6 +14,7 @@ pub mod eager_or_lazy;\n pub mod higher;\n mod hir_utils;\n pub mod inspector;\n+#[cfg(feature = \"internal-lints\")]\n pub mod internal_lints;\n pub mod numeric_literal;\n pub mod paths;\n@@ -51,6 +52,8 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_semver::RustcVersion;\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym as rustc_sym;\n@@ -62,6 +65,49 @@ use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n+pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n+    if let Ok(version) = RustcVersion::parse(msrv) {\n+        return Some(version);\n+    } else if let Some(sess) = sess {\n+        if let Some(span) = span {\n+            sess.span_err(span, &format!(\"`{}` is not a valid Rust version\", msrv));\n+        }\n+    }\n+    None\n+}\n+\n+pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool {\n+    msrv.map_or(true, |msrv| msrv.meets(*lint_msrv))\n+}\n+\n+macro_rules! extract_msrv_attr {\n+    (LateContext) => {\n+        extract_msrv_attr!(@LateContext, ());\n+    };\n+    (EarlyContext) => {\n+        extract_msrv_attr!(@EarlyContext);\n+    };\n+    (@$context:ident$(, $call:tt)?) => {\n+        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'tcx>, attrs: &'tcx [rustc_ast::ast::Attribute]) {\n+            use $crate::utils::get_unique_inner_attr;\n+            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n+                Some(msrv_attr) => {\n+                    if let Some(msrv) = msrv_attr.value_str() {\n+                        self.msrv = $crate::utils::parse_msrv(\n+                            &msrv.to_string(),\n+                            Some(cx.sess$($call)?),\n+                            Some(msrv_attr.span),\n+                        );\n+                    } else {\n+                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                    }\n+                },\n+                _ => (),\n+            }\n+        }\n+    };\n+}\n+\n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n #[must_use]\n@@ -527,6 +573,36 @@ pub fn contains_name(name: Symbol, expr: &Expr<'_>) -> bool {\n     cn.result\n }\n \n+/// Returns `true` if `expr` contains a return expression\n+pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n+    struct RetCallFinder {\n+        found: bool,\n+    }\n+\n+    impl<'tcx> hir::intravisit::Visitor<'tcx> for RetCallFinder {\n+        type Map = Map<'tcx>;\n+\n+        fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n+            if self.found {\n+                return;\n+            }\n+            if let hir::ExprKind::Ret(..) = &expr.kind {\n+                self.found = true;\n+            } else {\n+                hir::intravisit::walk_expr(self, expr);\n+            }\n+        }\n+\n+        fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+            hir::intravisit::NestedVisitorMap::None\n+        }\n+    }\n+\n+    let mut visitor = RetCallFinder { found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}\n+\n /// Converts a span to a code snippet if available, otherwise use default.\n ///\n /// This is useful if you want to provide suggestions for your lint or more generally, if you want"}, {"sha": "6fdc7b4587f049c207f4fff45760fd5cd3e17419", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -20,6 +20,8 @@ pub const CLONE_TRAIT: [&str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n+pub const COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n+pub const COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n@@ -31,6 +33,7 @@ pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n@@ -58,16 +61,22 @@ pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n+pub const IPADDR_V4: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V4\"];\n+pub const IPADDR_V6: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V6\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"ManuallyDrop\"];\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n+pub const MEM_SIZE_OF: [&str; 3] = [\"core\", \"mem\", \"size_of\"];\n+pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n@@ -90,9 +99,14 @@ pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n+pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n+pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n+pub const PTR_SLICE_FROM_RAW_PARTS: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts\"];\n+pub const PTR_SLICE_FROM_RAW_PARTS_MUT: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts_mut\"];\n+pub const PTR_SWAP_NONOVERLAPPING: [&str; 3] = [\"core\", \"ptr\", \"swap_nonoverlapping\"];\n pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n@@ -114,6 +128,8 @@ pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGu\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n+pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];\n+pub const SLICE_FROM_RAW_PARTS_MUT: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts_mut\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n@@ -129,6 +145,7 @@ pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n@@ -146,3 +163,4 @@ pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n+pub const WRITE_BYTES: [&str; 3] = [\"core\", \"intrinsics\", \"write_bytes\"];"}, {"sha": "28b3e79d7a6d6d9646edbb7804d1ddf6fad3a3d3", "filename": "src/tools/clippy/clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,7 @@\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{self, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, QPath, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n \n@@ -123,3 +125,54 @@ where\n         !ret_finder.failed\n     }\n }\n+\n+pub struct LocalUsedVisitor {\n+    pub local_hir_id: HirId,\n+    pub used: bool,\n+}\n+\n+impl LocalUsedVisitor {\n+    pub fn new(local_hir_id: HirId) -> Self {\n+        Self {\n+            local_hir_id,\n+            used: false,\n+        }\n+    }\n+\n+    fn check<T>(&mut self, t: T, visit: fn(&mut Self, T)) -> bool {\n+        visit(self, t);\n+        std::mem::replace(&mut self.used, false)\n+    }\n+\n+    pub fn check_arm(&mut self, arm: &Arm<'_>) -> bool {\n+        self.check(arm, Self::visit_arm)\n+    }\n+\n+    pub fn check_expr(&mut self, expr: &Expr<'_>) -> bool {\n+        self.check(expr, Self::visit_expr)\n+    }\n+\n+    pub fn check_stmt(&mut self, stmt: &Stmt<'_>) -> bool {\n+        self.check(stmt, Self::visit_stmt)\n+    }\n+}\n+\n+impl<'v> Visitor<'v> for LocalUsedVisitor {\n+    type Map = Map<'v>;\n+\n+    fn visit_expr(&mut self, expr: &'v Expr<'v>) {\n+        if let ExprKind::Path(QPath::Resolved(None, path)) = expr.kind {\n+            if let Res::Local(id) = path.res {\n+                if id == self.local_hir_id {\n+                    self.used = true;\n+                    return;\n+                }\n+            }\n+        }\n+        walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "ec3af94b9ca910dd293b807638ddd015f49dd336", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -12,6 +12,9 @@ use std::path::{Path, PathBuf};\n \n mod cargo;\n \n+// whether to run internal tests or not\n+const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal-lints\");\n+\n fn host_lib() -> PathBuf {\n     option_env!(\"HOST_LIBS\").map_or(cargo::CARGO_TARGET_DIR.join(env!(\"PROFILE\")), PathBuf::from)\n }\n@@ -96,6 +99,16 @@ fn run_mode(cfg: &mut compiletest::Config) {\n     compiletest::run_tests(&cfg);\n }\n \n+fn run_internal_tests(cfg: &mut compiletest::Config) {\n+    // only run internal tests with the internal-tests feature\n+    if !RUN_INTERNAL_TESTS {\n+        return;\n+    }\n+    cfg.mode = TestMode::Ui;\n+    cfg.src_base = Path::new(\"tests\").join(\"ui-internal\");\n+    compiletest::run_tests(&cfg);\n+}\n+\n fn run_ui_toml(config: &mut compiletest::Config) {\n     fn run_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n         let mut result = true;\n@@ -199,7 +212,6 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                         Some(\"main.rs\") => {},\n                         _ => continue,\n                     }\n-\n                     let paths = compiletest::common::TestPaths {\n                         file: file_path,\n                         base: config.src_base.clone(),\n@@ -253,4 +265,5 @@ fn compile_test() {\n     run_mode(&mut config);\n     run_ui_toml(&mut config);\n     run_ui_cargo(&mut config);\n+    run_internal_tests(&mut config);\n }"}, {"sha": "a6163a83d768709a562ca5a59a98b4eb92857bf4", "filename": "src/tools/clippy/tests/dogfood.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -18,7 +18,8 @@ fn dogfood_clippy() {\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n-    let output = Command::new(&*CLIPPY_PATH)\n+    let mut command = Command::new(&*CLIPPY_PATH);\n+    command\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n@@ -27,11 +28,16 @@ fn dogfood_clippy() {\n         .arg(\"--all-features\")\n         .arg(\"--\")\n         .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::internal\"])\n         .args(&[\"-D\", \"clippy::pedantic\"])\n-        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-        .output()\n-        .unwrap();\n+        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+\n+    // internal lints only exist if we build with the internal-lints feature\n+    if cfg!(feature = \"internal-lints\") {\n+        command.args(&[\"-D\", \"clippy::internal\"]);\n+    }\n+\n+    let output = command.output().unwrap();\n+\n     println!(\"status: {}\", output.status);\n     println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n     println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));"}, {"sha": "e588c23345e2fdd8ad010e05a0db259589f7bade", "filename": "src/tools/clippy/tests/ui-internal/collapsible_span_lint_calls.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/collapsible_span_lint_calls.fixed"}, {"sha": "d5dd3bb562b429d9265f3ba1d5c80a4c977a4dc2", "filename": "src/tools/clippy/tests/ui-internal/collapsible_span_lint_calls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/collapsible_span_lint_calls.rs"}, {"sha": "874d4a9f255c27dcaa542325be407d65d25cfabd", "filename": "src/tools/clippy/tests/ui-internal/collapsible_span_lint_calls.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/collapsible_span_lint_calls.stderr"}, {"sha": "5b30c9d5721ca5a0dcf8c7fe0ef200c2339d50f2", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/custom_ice_message.rs"}, {"sha": "a1b8e2ee162cf67eb3722946e1884415b768149c", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/custom_ice_message.stderr"}, {"sha": "053faae02ce3e0d3aa457083224bb9d32b20ba30", "filename": "src/tools/clippy/tests/ui-internal/default_lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/default_lint.rs"}, {"sha": "5c5836a7d297e82a0ae0c18b819d73ef39b3caf9", "filename": "src/tools/clippy/tests/ui-internal/default_lint.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/default_lint.stderr"}, {"sha": "01e28ae5e9d3581c0995e1b88abb0fd738494052", "filename": "src/tools/clippy/tests/ui-internal/invalid_paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/invalid_paths.rs"}, {"sha": "bd69d661b714fe8bd29e553588d2736e3eb22fc3", "filename": "src/tools/clippy/tests/ui-internal/invalid_paths.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Finvalid_paths.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/invalid_paths.stderr"}, {"sha": "beaef79a340afad2c371352f2dda86f385c95d8c", "filename": "src/tools/clippy/tests/ui-internal/lint_without_lint_pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/lint_without_lint_pass.rs"}, {"sha": "1257dae96d71cc17c0261ff5f66efcea3575c165", "filename": "src/tools/clippy/tests/ui-internal/lint_without_lint_pass.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Flint_without_lint_pass.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/lint_without_lint_pass.stderr"}, {"sha": "fe950b0aa7c7004c729c33cc7b6dab3392d1260a", "filename": "src/tools/clippy/tests/ui-internal/match_type_on_diag_item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/match_type_on_diag_item.rs"}, {"sha": "82465dbaf6ecc9d9e61b5f99e25f62948da7ebc7", "filename": "src/tools/clippy/tests/ui-internal/match_type_on_diag_item.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fmatch_type_on_diag_item.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/match_type_on_diag_item.stderr"}, {"sha": "b0b3498f057f7f7d05eb87124c4acb68a45aa7e6", "filename": "src/tools/clippy/tests/ui-internal/outer_expn_data.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/outer_expn_data.fixed"}, {"sha": "55a3fed00d075dfa5a4d7360fa9b9f0a85ece34f", "filename": "src/tools/clippy/tests/ui-internal/outer_expn_data.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/outer_expn_data.rs"}, {"sha": "56b6ce1f78ea4de38c7f1b1d0ffb666565c1f05a", "filename": "src/tools/clippy/tests/ui-internal/outer_expn_data.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fouter_expn_data.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "previous_filename": "src/tools/clippy/tests/ui/outer_expn_data.stderr"}, {"sha": "088b12b2daca61c66f1974f221d65a1d42e4cc95", "filename": "src/tools/clippy/tests/ui-toml/invalid_min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1 @@\n+msrv = \"invalid.version\""}, {"sha": "2ebf28645e51e53a969fbac0b02340bab8e7eeb0", "filename": "src/tools/clippy/tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,3 @@\n+#![allow(clippy::redundant_clone)]\n+\n+fn main() {}"}, {"sha": "e9d8fd2e0f525649eb8c2fc7471b320e21efe12e", "filename": "src/tools/clippy/tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file. `invalid.version` is not a valid Rust version\n+\n+error: aborting due to previous error\n+"}, {"sha": "6feaf7d5c0c1b02aa339b0c0ec48460e61ea8e93", "filename": "src/tools/clippy/tests/ui-toml/lint_decimal_readability/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Fclippy.toml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1 @@\n+unreadable-literal-lint-fractions = false\n\\ No newline at end of file"}, {"sha": "9377eb69b233aca281df4305c86149d13f90b2f6", "filename": "src/tools/clippy/tests/ui-toml/lint_decimal_readability/test.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,22 @@\n+#[deny(clippy::unreadable_literal)]\n+\n+fn allow_inconsistent_digit_grouping() {\n+    #![allow(clippy::inconsistent_digit_grouping)]\n+    let _pass1 = 100_200_300.123456789;\n+}\n+\n+fn main() {\n+    allow_inconsistent_digit_grouping();\n+\n+    let _pass1 = 100_200_300.100_200_300;\n+    let _pass2 = 1.123456789;\n+    let _pass3 = 1.0;\n+    let _pass4 = 10000.00001;\n+    let _pass5 = 1.123456789e1;\n+\n+    // due to clippy::inconsistent-digit-grouping\n+    let _fail1 = 100_200_300.123456789;\n+\n+    // fail due to the integer part\n+    let _fail2 = 100200300.300200100;\n+}"}, {"sha": "9119ef19a7be1aae36193412bcba84b58b204340", "filename": "src/tools/clippy/tests/ui-toml/lint_decimal_readability/test.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Flint_decimal_readability%2Ftest.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,10 @@\n+error: digits grouped inconsistently by underscores\n+  --> $DIR/test.rs:18:18\n+   |\n+LL |     let _fail1 = 100_200_300.123456789;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider: `100_200_300.123_456_789`\n+   |\n+   = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8e17d8074c41f7f7dbb57d3b2b2fd9a3ff0dfa9a", "filename": "src/tools/clippy/tests/ui-toml/min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1 @@\n+msrv = \"1.0.0\""}, {"sha": "bc41efa42a17ce1f8f14e53f48f6d048bdc9e5b5", "filename": "src/tools/clippy/tests/ui-toml/min_rust_version/min_rust_version.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,68 @@\n+#![allow(clippy::redundant_clone)]\n+#![warn(clippy::manual_non_exhaustive)]\n+\n+use std::ops::Deref;\n+\n+mod enums {\n+    enum E {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+\n+    // user forgot to remove the marker\n+    #[non_exhaustive]\n+    enum Ep {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+}\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}"}, {"sha": "7b3c476461d506af54bad5ba90cfbcd6d290a245", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "cd745feec6d8acc81063dae1d74b6f0a0a4e85e2", "filename": "src/tools/clippy/tests/ui/as_conversions.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,7 +1,19 @@\n-#[warn(clippy::as_conversions)]\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::as_conversions)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+fn with_external_macro() {\n+    as_conv_with_arg!(0u32 as u64);\n+    as_conv!();\n+}\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n+\n+    with_external_macro();\n }"}, {"sha": "f5f75d3aee04a40f2032684353aa310418343389", "filename": "src/tools/clippy/tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_conversions.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:4:13\n+  --> $DIR/as_conversions.rs:14:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "f985a15eda2bb5cbc48fecbbdd1e8c1b0205346e", "filename": "src/tools/clippy/tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -70,3 +70,17 @@ macro_rules! ref_arg_function {\n         fn fun_example(ref _x: usize) {}\n     };\n }\n+\n+#[macro_export]\n+macro_rules! as_conv_with_arg {\n+    (0u32 as u64) => {\n+        ()\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! as_conv {\n+    () => {\n+        0u32 as u64\n+    };\n+}"}, {"sha": "a83e6c77b12e5bc38dc8b76a76611d539160d91a", "filename": "src/tools/clippy/tests/ui/collapsible_match.rs", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,239 @@\n+#![warn(clippy::collapsible_match)]\n+#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+\n+fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n+    // match without block\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // match with block\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // if let, if let\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            take(n);\n+        }\n+    }\n+\n+    // if let else, if let else\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            take(n);\n+        } else {\n+            return;\n+        }\n+    } else {\n+        return;\n+    }\n+\n+    // if let, match\n+    if let Ok(val) = res_opt {\n+        match val {\n+            Some(n) => foo(n),\n+            _ => (),\n+        }\n+    }\n+\n+    // match, if let\n+    match res_opt {\n+        Ok(val) => {\n+            if let Some(n) = val {\n+                take(n);\n+            }\n+        },\n+        _ => {},\n+    }\n+\n+    // if let else, match\n+    if let Ok(val) = res_opt {\n+        match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        }\n+    } else {\n+        return;\n+    }\n+\n+    // match, if let else\n+    match res_opt {\n+        Ok(val) => {\n+            if let Some(n) = val {\n+                take(n);\n+            } else {\n+                return;\n+            }\n+        },\n+        _ => return,\n+    }\n+\n+    // None in inner match same as outer wild branch\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            None => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // None in outer match same as inner wild branch\n+    match opt_opt {\n+        Some(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        None => return,\n+    }\n+}\n+\n+fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {\n+    // no wild pattern in outer match\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        Err(_) => return,\n+    }\n+\n+    // inner branch is not wild or None\n+    match res_res {\n+        Ok(val) => match val {\n+            Ok(n) => foo(n),\n+            Err(_) => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // statement before inner match\n+    match res_opt {\n+        Ok(val) => {\n+            \"hi buddy\";\n+            match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            }\n+        },\n+        _ => return,\n+    }\n+\n+    // statement after inner match\n+    match res_opt {\n+        Ok(val) => {\n+            match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            }\n+            \"hi buddy\";\n+        },\n+        _ => return,\n+    }\n+\n+    // wild branches do not match\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => {\n+                \"sup\";\n+                return;\n+            },\n+        },\n+        _ => return,\n+    }\n+\n+    // binding used in if guard\n+    match res_opt {\n+        Ok(val) if val.is_some() => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // binding used in inner match body\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(_) => take(val),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // if guard on inner match\n+    {\n+        match res_opt {\n+            Ok(val) => match val {\n+                Some(n) if make() => foo(n),\n+                _ => return,\n+            },\n+            _ => return,\n+        }\n+        match res_opt {\n+            Ok(val) => match val {\n+                _ => make(),\n+                _ if make() => return,\n+            },\n+            _ => return,\n+        }\n+    }\n+\n+    // differing macro contexts\n+    {\n+        macro_rules! mac {\n+            ($val:ident) => {\n+                match $val {\n+                    Some(n) => foo(n),\n+                    _ => return,\n+                }\n+            };\n+        }\n+        match res_opt {\n+            Ok(val) => mac!(val),\n+            _ => return,\n+        }\n+    }\n+\n+    // OR pattern\n+    enum E<T> {\n+        A(T),\n+        B(T),\n+        C(T),\n+    };\n+    match make::<E<Option<u32>>>() {\n+        E::A(val) | E::B(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+    match make::<Option<E<u32>>>() {\n+        Some(val) => match val {\n+            E::A(val) | E::B(val) => foo(val),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+}\n+\n+fn make<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn foo<T, U>(t: T) -> U {\n+    unimplemented!()\n+}\n+\n+fn take<T>(t: T) {}\n+\n+fn main() {}"}, {"sha": "63ac6a1613dc648ce44a90a139d768d18e2a7788", "filename": "src/tools/clippy/tests/ui/collapsible_match.stderr", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,179 @@\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:7:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:7:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:16:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:16:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:25:9\n+   |\n+LL | /         if let Some(n) = val {\n+LL | |             take(n);\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:24:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         if let Some(n) = val {\n+   |                ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:32:9\n+   |\n+LL | /         if let Some(n) = val {\n+LL | |             take(n);\n+LL | |         } else {\n+LL | |             return;\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:31:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         if let Some(n) = val {\n+   |                ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:43:9\n+   |\n+LL | /         match val {\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => (),\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:42:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         match val {\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:52:13\n+   |\n+LL | /             if let Some(n) = val {\n+LL | |                 take(n);\n+LL | |             }\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:51:12\n+   |\n+LL |         Ok(val) => {\n+   |            ^^^ Replace this binding\n+LL |             if let Some(n) = val {\n+   |                    ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:61:9\n+   |\n+LL | /         match val {\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:60:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         match val {\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:72:13\n+   |\n+LL | /             if let Some(n) = val {\n+LL | |                 take(n);\n+LL | |             } else {\n+LL | |                 return;\n+LL | |             }\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:71:12\n+   |\n+LL |         Ok(val) => {\n+   |            ^^^ Replace this binding\n+LL |             if let Some(n) = val {\n+   |                    ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:83:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             None => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:83:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:92:22\n+   |\n+LL |           Some(val) => match val {\n+   |  ______________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:92:14\n+   |\n+LL |         Some(val) => match val {\n+   |              ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "d571ac4ab693e3cc1415cfe200b840c41617c92d", "filename": "src/tools/clippy/tests/ui/collapsible_match2.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,53 @@\n+#![warn(clippy::collapsible_match)]\n+#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+\n+fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n+    // if guards on outer match\n+    {\n+        match res_opt {\n+            Ok(val) if make() => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ => return,\n+        }\n+        match res_opt {\n+            Ok(val) => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ if make() => return,\n+            _ => return,\n+        }\n+    }\n+\n+    // macro\n+    {\n+        macro_rules! mac {\n+            ($outer:expr => $pat:pat, $e:expr => $inner_pat:pat, $then:expr) => {\n+                match $outer {\n+                    $pat => match $e {\n+                        $inner_pat => $then,\n+                        _ => return,\n+                    },\n+                    _ => return,\n+                }\n+            };\n+        }\n+        // Lint this since the patterns are not defined by the macro.\n+        // Allows the lint to work on if_chain! for example.\n+        // Fixing the lint requires knowledge of the specific macro, but we optimistically assume that\n+        // there is still a better way to write this.\n+        mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+    }\n+}\n+\n+fn make<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn foo<T, U>(t: T) -> U {\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "490d82d12cd59d3099b750d112174c034e1bc013", "filename": "src/tools/clippy/tests/ui/collapsible_match2.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,61 @@\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:8:34\n+   |\n+LL |               Ok(val) if make() => match val {\n+   |  __________________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:8:16\n+   |\n+LL |             Ok(val) if make() => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:15:24\n+   |\n+LL |               Ok(val) => match val {\n+   |  ________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:15:16\n+   |\n+LL |             Ok(val) => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:29:29\n+   |\n+LL |                       $pat => match $e {\n+   |  _____________________________^\n+LL | |                         $inner_pat => $then,\n+LL | |                         _ => return,\n+LL | |                     },\n+   | |_____________________^\n+...\n+LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |           ------------------------------------------------- in this macro invocation\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:41:28\n+   |\n+LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |                            ^^^          ^^^^^^^ with this pattern\n+   |                            |\n+   |                            Replace this binding\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e1ee8dbca2c04286a9924606d4865aae056c1e10", "filename": "src/tools/clippy/tests/ui/deprecated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,3 @@\n-#[warn(clippy::str_to_string)]\n-#[warn(clippy::string_to_string)]\n #[warn(clippy::unstable_as_slice)]\n #[warn(clippy::unstable_as_mut_slice)]\n #[warn(clippy::misaligned_transmute)]"}, {"sha": "edbb891afe07bdb9cfd6e9d2c84d158c400c5b86", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,88 +1,76 @@\n-error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated.rs:1:8\n-   |\n-LL | #[warn(clippy::str_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n-\n-error: lint `clippy::string_to_string` has been removed: `using `string::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated.rs:2:8\n-   |\n-LL | #[warn(clippy::string_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated.rs:3:8\n+  --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated.rs:4:8\n+  --> $DIR/deprecated.rs:2:8\n    |\n LL | #[warn(clippy::unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n-  --> $DIR/deprecated.rs:5:8\n+  --> $DIR/deprecated.rs:3:8\n    |\n LL | #[warn(clippy::misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::unused_collect` has been removed: ``collect` has been marked as #[must_use] in rustc and that covers all cases of this lint`\n-  --> $DIR/deprecated.rs:6:8\n+  --> $DIR/deprecated.rs:4:8\n    |\n LL | #[warn(clippy::unused_collect)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `invalid_value``\n-  --> $DIR/deprecated.rs:7:8\n+  --> $DIR/deprecated.rs:5:8\n    |\n LL | #[warn(clippy::invalid_ref)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::into_iter_on_array` has been removed: `this lint has been uplifted to rustc and is now called `array_into_iter``\n-  --> $DIR/deprecated.rs:8:8\n+  --> $DIR/deprecated.rs:6:8\n    |\n LL | #[warn(clippy::into_iter_on_array)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::unused_label` has been removed: `this lint has been uplifted to rustc and is now called `unused_labels``\n-  --> $DIR/deprecated.rs:9:8\n+  --> $DIR/deprecated.rs:7:8\n    |\n LL | #[warn(clippy::unused_label)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::regex_macro` has been removed: `the regex! macro has been removed from the regex crate in 2018`\n-  --> $DIR/deprecated.rs:10:8\n+  --> $DIR/deprecated.rs:8:8\n    |\n LL | #[warn(clippy::regex_macro)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted to rustc and is now called `drop_bounds``\n-  --> $DIR/deprecated.rs:11:8\n+  --> $DIR/deprecated.rs:9:8\n    |\n LL | #[warn(clippy::drop_bounds)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr``\n-  --> $DIR/deprecated.rs:12:8\n+  --> $DIR/deprecated.rs:10:8\n    |\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::panic_params` has been removed: `this lint has been uplifted to rustc and is now called `panic_fmt``\n-  --> $DIR/deprecated.rs:13:8\n+  --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n+error: lint `clippy::unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n   --> $DIR/deprecated.rs:1:8\n    |\n-LL | #[warn(clippy::str_to_string)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[warn(clippy::unstable_as_slice)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "e89dca4fcfd4cf3ea6625b8d2e159f1e98956924", "filename": "src/tools/clippy/tests/ui/deprecated_old.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,3 @@\n-#[warn(str_to_string)]\n-#[warn(string_to_string)]\n #[warn(unstable_as_slice)]\n #[warn(unstable_as_mut_slice)]\n #[warn(misaligned_transmute)]"}, {"sha": "2fe1facf0c72de582fef93a36a28527e32dc12c2", "filename": "src/tools/clippy/tests/ui/deprecated_old.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated_old.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,40 +1,28 @@\n-error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated_old.rs:1:8\n-   |\n-LL | #[warn(str_to_string)]\n-   |        ^^^^^^^^^^^^^\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n-\n-error: lint `string_to_string` has been removed: `using `string::to_string` is common even today and specialization will likely happen soon`\n-  --> $DIR/deprecated_old.rs:2:8\n-   |\n-LL | #[warn(string_to_string)]\n-   |        ^^^^^^^^^^^^^^^^\n-\n error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated_old.rs:3:8\n+  --> $DIR/deprecated_old.rs:1:8\n    |\n LL | #[warn(unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `unstable_as_mut_slice` has been removed: ``Vec::as_mut_slice` has been stabilized in 1.7`\n-  --> $DIR/deprecated_old.rs:4:8\n+  --> $DIR/deprecated_old.rs:2:8\n    |\n LL | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `misaligned_transmute` has been removed: `this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr`\n-  --> $DIR/deprecated_old.rs:5:8\n+  --> $DIR/deprecated_old.rs:3:8\n    |\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n+error: lint `unstable_as_slice` has been removed: ``Vec::as_slice` has been stabilized in 1.7`\n   --> $DIR/deprecated_old.rs:1:8\n    |\n-LL | #[warn(str_to_string)]\n-   |        ^^^^^^^^^^^^^\n+LL | #[warn(unstable_as_slice)]\n+   |        ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "7ab23320db6d1b7aba040e382ea317cb517b2d2c", "filename": "src/tools/clippy/tests/ui/eq_op.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -86,3 +86,12 @@ fn check_ignore_macro() {\n     // checks if the lint ignores macros with `!` operator\n     !bool_macro!(1) && !bool_macro!(\"\");\n }\n+\n+struct Nested {\n+    inner: ((i32,), (i32,), (i32,)),\n+}\n+\n+fn check_nested(n1: &Nested, n2: &Nested) -> bool {\n+    // `n2.inner.0.0` mistyped as `n1.inner.0.0`\n+    (n1.inner.0).0 == (n1.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}"}, {"sha": "8ef658af8df429829ec50d85dfcdbe4f8ab3bd74", "filename": "src/tools/clippy/tests/ui/eq_op.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feq_op.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -162,5 +162,13 @@ error: equal expressions as operands to `/`\n LL |     const D: u32 = A / A;\n    |                    ^^^^^\n \n-error: aborting due to 27 previous errors\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:96:5\n+   |\n+LL |     (n1.inner.0).0 == (n1.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::eq_op)]` on by default\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "d439ca1e4e1a171ca3ef20dc99f2311b968b5573", "filename": "src/tools/clippy/tests/ui/item_after_statement.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fitem_after_statement.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -37,3 +37,16 @@ fn mac() {\n     b!();\n     println!(\"{}\", a);\n }\n+\n+fn semicolon() {\n+    struct S {\n+        a: u32,\n+    };\n+    impl S {\n+        fn new(a: u32) -> Self {\n+            Self { a }\n+        }\n+    }\n+\n+    let _ = S::new(3);\n+}"}, {"sha": "00e037843f8c29e47afffe937d9ddc6052ee190c", "filename": "src/tools/clippy/tests/ui/map_err.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -22,5 +22,9 @@ fn main() -> Result<(), Errors> {\n \n     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n \n+    // Should not warn you because you explicitly ignore the parameter\n+    // using a named wildcard value\n+    println!(\"{:?}\", x.map_err(|_foo| Errors::Ignored));\n+\n     Ok(())\n }"}, {"sha": "8ee2941790d3542d243502c8dd81135480830d06", "filename": "src/tools/clippy/tests/ui/map_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,11 +1,11 @@\n-error: `map_err(|_|...` ignores the original error\n+error: `map_err(|_|...` wildcard pattern discards the original error\n   --> $DIR/map_err.rs:23:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^\n    |\n    = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n-   = help: Consider wrapping the error in an enum variant\n+   = help: Consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\n \n error: aborting due to previous error\n "}, {"sha": "1026cc40d3b0e20ce6824f1735472e02fbf8a1ca", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,87 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.0.0\"]\n+\n+use std::ops::Deref;\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+pub fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}\n+\n+mod meets_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.45.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_under_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.46.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_above_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.44.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}"}, {"sha": "3e1af046e7a2795127d85fdd27bcaf4f16c5e7f8", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,37 @@\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:60:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::manual-strip` implied by `-D warnings`\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:59:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:72:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:71:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f20841891a7429f213294e520dc32159697d4869", "filename": "src/tools/clippy/tests/ui/min_rust_version_invalid_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"invalid.version\"]\n+\n+fn main() {}"}, {"sha": "6ff88ca56f8b92fac4ba9446420e0f19d20602d2", "filename": "src/tools/clippy/tests/ui/min_rust_version_invalid_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_invalid_attr.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,8 @@\n+error: `invalid.version` is not a valid Rust version\n+  --> $DIR/min_rust_version_invalid_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e882d5ccf91a8f6b7657c63fa218b33a5593174b", "filename": "src/tools/clippy/tests/ui/min_rust_version_multiple_inner_attr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,11 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.40\"]\n+#![clippy::msrv = \"=1.35.0\"]\n+#![clippy::msrv = \"1.10.1\"]\n+\n+mod foo {\n+    #![clippy::msrv = \"1\"]\n+    #![clippy::msrv = \"1.0.0\"]\n+}\n+\n+fn main() {}"}, {"sha": "e3ff6605cde87b891cd80d18b77bd64f1d77dcfd", "filename": "src/tools/clippy/tests/ui/min_rust_version_multiple_inner_attr.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,38 @@\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:3:1\n+   |\n+LL | #![clippy::msrv = \"=1.35.0\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:4:1\n+   |\n+LL | #![clippy::msrv = \"1.10.1\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:8:5\n+   |\n+LL |     #![clippy::msrv = \"1.0.0\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:7:5\n+   |\n+LL |     #![clippy::msrv = \"1\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "98fffe1e3512b9c41750f598f0787ce56329eade", "filename": "src/tools/clippy/tests/ui/min_rust_version_no_patch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_no_patch.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,14 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.0\"]\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    manual_strip_msrv()\n+}"}, {"sha": "551948bd72ef1be61145dacfed4dc98f7e33d2ba", "filename": "src/tools/clippy/tests/ui/min_rust_version_outer_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+\n+#[clippy::msrv = \"invalid.version\"]\n+fn main() {}"}, {"sha": "579ee7a87d23ceef6bf2c06ebfc097d8d6e17686", "filename": "src/tools/clippy/tests/ui/min_rust_version_outer_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_outer_attr.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,8 @@\n+error: `msrv` cannot be an outer attribute\n+  --> $DIR/min_rust_version_outer_attr.rs:3:1\n+   |\n+LL | #[clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "678a312f66e53af9ed72aeb8765c9db6cbbb53e1", "filename": "src/tools/clippy/tests/ui/modulo_one.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -2,13 +2,22 @@\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n static STATIC_ONE: usize = 2 - 1;\n+static STATIC_NEG_ONE: i64 = 1 - 2;\n \n fn main() {\n     10 % 1;\n+    10 % -1;\n     10 % 2;\n+    i32::MIN % (-1); // also caught by rustc\n \n     const ONE: u32 = 1 * 1;\n+    const NEG_ONE: i64 = 1 - 2;\n+    const INT_MIN: i64 = i64::MIN;\n \n     2 % ONE;\n-    5 % STATIC_ONE;\n+    5 % STATIC_ONE; // NOT caught by lint\n+    2 % NEG_ONE;\n+    5 % STATIC_NEG_ONE; // NOT caught by lint\n+    INT_MIN % NEG_ONE; // also caught by rustc\n+    INT_MIN % STATIC_NEG_ONE; // ONLY caught by rustc\n }"}, {"sha": "2b2c699733852dd464507708dc41ad79a15b92eb", "filename": "src/tools/clippy/tests/ui/modulo_one.stderr", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,30 +1,74 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:11:5\n+   |\n+LL |     i32::MIN % (-1); // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:21:5\n+   |\n+LL |     INT_MIN % NEG_ONE; // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:22:5\n+   |\n+LL |     INT_MIN % STATIC_NEG_ONE; // ONLY caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n+\n error: any number modulo 1 will be 0\n-  --> $DIR/modulo_one.rs:7:5\n+  --> $DIR/modulo_one.rs:8:5\n    |\n LL |     10 % 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::modulo-one` implied by `-D warnings`\n \n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:9:5\n+   |\n+LL |     10 % -1;\n+   |     ^^^^^^^\n+\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:11:5\n+   |\n+LL |     i32::MIN % (-1); // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^\n+\n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:10:22\n+  --> $DIR/modulo_one.rs:13:22\n    |\n LL |     const ONE: u32 = 1 * 1;\n    |                      ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:10:22\n+  --> $DIR/modulo_one.rs:13:22\n    |\n LL |     const ONE: u32 = 1 * 1;\n    |                      ^^^^^\n \n error: any number modulo 1 will be 0\n-  --> $DIR/modulo_one.rs:12:5\n+  --> $DIR/modulo_one.rs:17:5\n    |\n LL |     2 % ONE;\n    |     ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:19:5\n+   |\n+LL |     2 % NEG_ONE;\n+   |     ^^^^^^^^^^^\n+\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:21:5\n+   |\n+LL |     INT_MIN % NEG_ONE; // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "0918a6868ab4b08c4958f4975209012c24faa09f", "filename": "src/tools/clippy/tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect_indirect.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -22,4 +22,24 @@ fn main() {\n     let sample = vec![a.clone(), \"b\".to_string(), \"c\".to_string()];\n     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n     non_copy_contains.contains(&a);\n+\n+    // Fix #5991\n+    let vec_a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let vec_b = vec_a.iter().collect::<Vec<_>>();\n+    if vec_b.len() > 3 {}\n+    let other_vec = vec![1, 3, 12, 4, 16, 2];\n+    let we_got_the_same_numbers = other_vec.iter().filter(|item| vec_b.contains(item)).collect::<Vec<_>>();\n+\n+    // Fix #6297\n+    let sample = [1; 5];\n+    let multiple_indirect = sample.iter().collect::<Vec<_>>();\n+    let sample2 = vec![2, 3];\n+    if multiple_indirect.is_empty() {\n+        // do something\n+    } else {\n+        let found = sample2\n+            .iter()\n+            .filter(|i| multiple_indirect.iter().any(|s| **s % **i == 0))\n+            .collect::<Vec<_>>();\n+    }\n }"}, {"sha": "6028323a3c84d2dee0ed4b4cbcad5424a42e5bac", "filename": "src/tools/clippy/tests/ui/panicking_macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -62,23 +62,23 @@ error: `unimplemented` should not be present in production code\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `unreachable` should not be present in production code\n+error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n-error: `unreachable` should not be present in production code\n+error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `unreachable` should not be present in production code\n+error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n@@ -102,7 +102,7 @@ error: `unimplemented` should not be present in production code\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: `unreachable` should not be present in production code\n+error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();"}, {"sha": "acc8de5f41ee879e282c50a49ae1f1e7f756587e", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_ipaddr.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::net::{\n+    IpAddr::{self, V4, V6},\n+    Ipv4Addr, Ipv6Addr,\n+};\n+\n+fn main() {\n+    let ipaddr: IpAddr = V4(Ipv4Addr::LOCALHOST);\n+    if ipaddr.is_ipv4() {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if let V4(ipaddr) = V4(Ipv4Addr::LOCALHOST) {\n+        println!(\"{}\", ipaddr);\n+    }\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv4();\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv6();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv6();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv4();\n+\n+    let _ = if V4(Ipv4Addr::LOCALHOST).is_ipv4() {\n+        true\n+    } else {\n+        false\n+    };\n+\n+    ipaddr_const();\n+\n+    let _ = if gen_ipaddr().is_ipv4() {\n+        1\n+    } else if gen_ipaddr().is_ipv6() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_ipaddr() -> IpAddr {\n+    V4(Ipv4Addr::LOCALHOST)\n+}\n+\n+const fn ipaddr_const() {\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    V4(Ipv4Addr::LOCALHOST).is_ipv4();\n+\n+    V6(Ipv6Addr::LOCALHOST).is_ipv6();\n+}"}, {"sha": "678d91ce93acda75d753e0222792723338c59fb5", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_ipaddr.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::net::{\n+    IpAddr::{self, V4, V6},\n+    Ipv4Addr, Ipv6Addr,\n+};\n+\n+fn main() {\n+    let ipaddr: IpAddr = V4(Ipv4Addr::LOCALHOST);\n+    if let V4(_) = &ipaddr {}\n+\n+    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\n+\n+    if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\n+\n+    if let V4(ipaddr) = V4(Ipv4Addr::LOCALHOST) {\n+        println!(\"{}\", ipaddr);\n+    }\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {\n+        true\n+    } else {\n+        false\n+    };\n+\n+    ipaddr_const();\n+\n+    let _ = if let V4(_) = gen_ipaddr() {\n+        1\n+    } else if let V6(_) = gen_ipaddr() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_ipaddr() -> IpAddr {\n+    V4(Ipv4Addr::LOCALHOST)\n+}\n+\n+const fn ipaddr_const() {\n+    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+\n+    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+\n+    match V4(Ipv4Addr::LOCALHOST) {\n+        V4(_) => true,\n+        V6(_) => false,\n+    };\n+\n+    match V6(Ipv6Addr::LOCALHOST) {\n+        V4(_) => false,\n+        V6(_) => true,\n+    };\n+}"}, {"sha": "caf458cd862e01a27b7e53cd2343483667cae4ca", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_ipaddr.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_ipaddr.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,130 @@\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:14:12\n+   |\n+LL |     if let V4(_) = &ipaddr {}\n+   |     -------^^^^^---------- help: try this: `if ipaddr.is_ipv4()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:16:12\n+   |\n+LL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:18:12\n+   |\n+LL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:20:15\n+   |\n+LL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:22:15\n+   |\n+LL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:32:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:37:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:42:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:47:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:52:20\n+   |\n+LL |     let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {\n+   |             -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:60:20\n+   |\n+LL |     let _ = if let V4(_) = gen_ipaddr() {\n+   |             -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:62:19\n+   |\n+LL |     } else if let V6(_) = gen_ipaddr() {\n+   |            -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:74:12\n+   |\n+LL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:76:12\n+   |\n+LL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:78:15\n+   |\n+LL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:80:15\n+   |\n+LL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n+   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: redundant pattern matching, consider using `is_ipv4()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:82:5\n+   |\n+LL | /     match V4(Ipv4Addr::LOCALHOST) {\n+LL | |         V4(_) => true,\n+LL | |         V6(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n+\n+error: redundant pattern matching, consider using `is_ipv6()`\n+  --> $DIR/redundant_pattern_matching_ipaddr.rs:87:5\n+   |\n+LL | /     match V6(Ipv6Addr::LOCALHOST) {\n+LL | |         V4(_) => false,\n+LL | |         V6(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "66f580a0a683426e250479c01e5a8a6c1ff86dd6", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -2,13 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(\n-    clippy::unit_arg,\n-    unused_must_use,\n-    clippy::needless_bool,\n-    clippy::match_like_matches_macro,\n-    deprecated\n-)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n \n fn main() {\n     if None::<()>.is_none() {}\n@@ -43,8 +37,7 @@ fn main() {\n     let _ = None::<()>.is_none();\n \n     let opt = Some(false);\n-    let x = if opt.is_some() { true } else { false };\n-    takes_bool(x);\n+    let _ = if opt.is_some() { true } else { false };\n \n     issue6067();\n \n@@ -61,8 +54,6 @@ fn gen_opt() -> Option<()> {\n     None\n }\n \n-fn takes_bool(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "f18b27b8b95c30b4cc33e5756e2d51d4bf5bcd75", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -2,13 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(\n-    clippy::unit_arg,\n-    unused_must_use,\n-    clippy::needless_bool,\n-    clippy::match_like_matches_macro,\n-    deprecated\n-)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n \n fn main() {\n     if let None = None::<()> {}\n@@ -52,8 +46,7 @@ fn main() {\n     };\n \n     let opt = Some(false);\n-    let x = if let Some(_) = opt { true } else { false };\n-    takes_bool(x);\n+    let _ = if let Some(_) = opt { true } else { false };\n \n     issue6067();\n \n@@ -70,8 +63,6 @@ fn gen_opt() -> Option<()> {\n     None\n }\n \n-fn takes_bool(_: bool) {}\n-\n fn foo() {}\n \n fn bar() {}"}, {"sha": "58482a0ab70dcbe0c4c1a2bef214861dcbd06d3a", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,49 +1,49 @@\n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:14:12\n+  --> $DIR/redundant_pattern_matching_option.rs:8:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:16:12\n+  --> $DIR/redundant_pattern_matching_option.rs:10:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:18:12\n+  --> $DIR/redundant_pattern_matching_option.rs:12:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:24:15\n+  --> $DIR/redundant_pattern_matching_option.rs:18:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:26:15\n+  --> $DIR/redundant_pattern_matching_option.rs:20:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:28:15\n+  --> $DIR/redundant_pattern_matching_option.rs:22:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:31:15\n+  --> $DIR/redundant_pattern_matching_option.rs:25:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:39:5\n+  --> $DIR/redundant_pattern_matching_option.rs:33:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:44:5\n+  --> $DIR/redundant_pattern_matching_option.rs:38:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:49:13\n+  --> $DIR/redundant_pattern_matching_option.rs:43:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -71,49 +71,49 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:55:20\n+  --> $DIR/redundant_pattern_matching_option.rs:49:20\n    |\n-LL |     let x = if let Some(_) = opt { true } else { false };\n+LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:60:20\n+  --> $DIR/redundant_pattern_matching_option.rs:53:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:62:19\n+  --> $DIR/redundant_pattern_matching_option.rs:55:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:12\n+  --> $DIR/redundant_pattern_matching_option.rs:74:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:12\n+  --> $DIR/redundant_pattern_matching_option.rs:76:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:87:15\n+  --> $DIR/redundant_pattern_matching_option.rs:78:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:89:15\n+  --> $DIR/redundant_pattern_matching_option.rs:80:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:91:5\n+  --> $DIR/redundant_pattern_matching_option.rs:82:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +122,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:96:5\n+  --> $DIR/redundant_pattern_matching_option.rs:87:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,"}, {"sha": "465aa80dac27c4512eef6b6011dbe4840fea1f22", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_poll.fixed", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,70 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::task::Poll::{self, Pending, Ready};\n+\n+fn main() {\n+    if Pending::<()>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    if Ready(42).is_ready() {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while Ready(42).is_ready() {}\n+\n+    while Ready(42).is_pending() {}\n+\n+    while Pending::<()>.is_pending() {}\n+\n+    if Pending::<i32>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    Ready(42).is_ready();\n+\n+    Pending::<()>.is_pending();\n+\n+    let _ = Pending::<()>.is_pending();\n+\n+    let poll = Ready(false);\n+    let _ = if poll.is_ready() { true } else { false };\n+\n+    poll_const();\n+\n+    let _ = if gen_poll().is_ready() {\n+        1\n+    } else if gen_poll().is_pending() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_poll() -> Poll<()> {\n+    Pending\n+}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+const fn poll_const() {\n+    if Ready(42).is_ready() {}\n+\n+    if Pending::<()>.is_pending() {}\n+\n+    while Ready(42).is_ready() {}\n+\n+    while Pending::<()>.is_pending() {}\n+\n+    Ready(42).is_ready();\n+\n+    Pending::<()>.is_pending();\n+}"}, {"sha": "7891ff353b13ee5d9ba4c81a5bde2004a3c68dde", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_poll.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]\n+\n+use std::task::Poll::{self, Pending, Ready};\n+\n+fn main() {\n+    if let Pending = Pending::<()> {}\n+\n+    if let Ready(_) = Ready(42) {}\n+\n+    if let Ready(_) = Ready(42) {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while let Ready(_) = Ready(42) {}\n+\n+    while let Pending = Ready(42) {}\n+\n+    while let Pending = Pending::<()> {}\n+\n+    if Pending::<i32>.is_pending() {}\n+\n+    if Ready(42).is_ready() {}\n+\n+    match Ready(42) {\n+        Ready(_) => true,\n+        Pending => false,\n+    };\n+\n+    match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+\n+    let _ = match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+\n+    let poll = Ready(false);\n+    let _ = if let Ready(_) = poll { true } else { false };\n+\n+    poll_const();\n+\n+    let _ = if let Ready(_) = gen_poll() {\n+        1\n+    } else if let Pending = gen_poll() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_poll() -> Poll<()> {\n+    Pending\n+}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+const fn poll_const() {\n+    if let Ready(_) = Ready(42) {}\n+\n+    if let Pending = Pending::<()> {}\n+\n+    while let Ready(_) = Ready(42) {}\n+\n+    while let Pending = Pending::<()> {}\n+\n+    match Ready(42) {\n+        Ready(_) => true,\n+        Pending => false,\n+    };\n+\n+    match Pending::<()> {\n+        Ready(_) => false,\n+        Pending => true,\n+    };\n+}"}, {"sha": "5ffc6c47c90a220691a4069329a5ec0a3b279167", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_poll.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_poll.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,128 @@\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:10:12\n+   |\n+LL |     if let Pending = Pending::<()> {}\n+   |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:12:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {}\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:14:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:20:15\n+   |\n+LL |     while let Ready(_) = Ready(42) {}\n+   |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:22:15\n+   |\n+LL |     while let Pending = Ready(42) {}\n+   |     ----------^^^^^^^------------ help: try this: `while Ready(42).is_pending()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:24:15\n+   |\n+LL |     while let Pending = Pending::<()> {}\n+   |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:30:5\n+   |\n+LL | /     match Ready(42) {\n+LL | |         Ready(_) => true,\n+LL | |         Pending => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:35:5\n+   |\n+LL | /     match Pending::<()> {\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:40:13\n+   |\n+LL |       let _ = match Pending::<()> {\n+   |  _____________^\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:46:20\n+   |\n+LL |     let _ = if let Ready(_) = poll { true } else { false };\n+   |             -------^^^^^^^^------- help: try this: `if poll.is_ready()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:50:20\n+   |\n+LL |     let _ = if let Ready(_) = gen_poll() {\n+   |             -------^^^^^^^^------------- help: try this: `if gen_poll().is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:52:19\n+   |\n+LL |     } else if let Pending = gen_poll() {\n+   |            -------^^^^^^^------------- help: try this: `if gen_poll().is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:68:12\n+   |\n+LL |     if let Ready(_) = Ready(42) {}\n+   |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:70:12\n+   |\n+LL |     if let Pending = Pending::<()> {}\n+   |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:72:15\n+   |\n+LL |     while let Ready(_) = Ready(42) {}\n+   |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:74:15\n+   |\n+LL |     while let Pending = Pending::<()> {}\n+   |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n+\n+error: redundant pattern matching, consider using `is_ready()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:76:5\n+   |\n+LL | /     match Ready(42) {\n+LL | |         Ready(_) => true,\n+LL | |         Pending => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ready(42).is_ready()`\n+\n+error: redundant pattern matching, consider using `is_pending()`\n+  --> $DIR/redundant_pattern_matching_poll.rs:81:5\n+   |\n+LL | /     match Pending::<()> {\n+LL | |         Ready(_) => false,\n+LL | |         Pending => true,\n+LL | |     };\n+   | |_____^ help: try this: `Pending::<()>.is_pending()`\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "e94c5704b48917fd89667bed89cd3bb52896ab98", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.fixed", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -3,7 +3,6 @@\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(\n-    clippy::unit_arg,\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,", "previous_filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed"}, {"sha": "5d1752942322b0b19aa22d5bb46227bea1bb4eca", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -3,7 +3,6 @@\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(\n-    clippy::unit_arg,\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,", "previous_filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs"}, {"sha": "d6a46babb77952de2a4d3f602841b77172bef6d6", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.stderr", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,37 +1,37 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching_result.rs:15:12\n    |\n LL |     if let Ok(_) = &result {}\n    |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:18:12\n+  --> $DIR/redundant_pattern_matching_result.rs:17:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:20:12\n+  --> $DIR/redundant_pattern_matching_result.rs:19:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:22:15\n+  --> $DIR/redundant_pattern_matching_result.rs:21:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching_result.rs:23:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:34:5\n+  --> $DIR/redundant_pattern_matching_result.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -40,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:39:5\n+  --> $DIR/redundant_pattern_matching_result.rs:38:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -49,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:44:5\n+  --> $DIR/redundant_pattern_matching_result.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -58,7 +58,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:49:5\n+  --> $DIR/redundant_pattern_matching_result.rs:48:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -67,73 +67,73 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:54:20\n+  --> $DIR/redundant_pattern_matching_result.rs:53:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:60:20\n+  --> $DIR/redundant_pattern_matching_result.rs:59:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:62:19\n+  --> $DIR/redundant_pattern_matching_result.rs:61:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:85:19\n+  --> $DIR/redundant_pattern_matching_result.rs:84:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:86:16\n+  --> $DIR/redundant_pattern_matching_result.rs:85:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:12\n+  --> $DIR/redundant_pattern_matching_result.rs:91:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:93:15\n+  --> $DIR/redundant_pattern_matching_result.rs:92:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:111:12\n+  --> $DIR/redundant_pattern_matching_result.rs:110:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:113:12\n+  --> $DIR/redundant_pattern_matching_result.rs:112:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:115:15\n+  --> $DIR/redundant_pattern_matching_result.rs:114:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:117:15\n+  --> $DIR/redundant_pattern_matching_result.rs:116:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:119:5\n+  --> $DIR/redundant_pattern_matching_result.rs:118:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:124:5\n+  --> $DIR/redundant_pattern_matching_result.rs:123:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,", "previous_filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr"}, {"sha": "b13e390705ab79e96317b57375dff763f9725039", "filename": "src/tools/clippy/tests/ui/size_of_in_element_count.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,61 @@\n+#![warn(clippy::size_of_in_element_count)]\n+#![allow(clippy::ptr_offset_with_cast)]\n+\n+use std::mem::{size_of, size_of_val};\n+use std::ptr::{\n+    copy, copy_nonoverlapping, slice_from_raw_parts, slice_from_raw_parts_mut, swap_nonoverlapping, write_bytes,\n+};\n+use std::slice::{from_raw_parts, from_raw_parts_mut};\n+\n+fn main() {\n+    const SIZE: usize = 128;\n+    const HALF_SIZE: usize = SIZE / 2;\n+    const DOUBLE_SIZE: usize = SIZE * 2;\n+    let mut x = [2u8; SIZE];\n+    let mut y = [2u8; SIZE];\n+\n+    // Count is size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+\n+    unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n+    unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+\n+    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n+    unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n+\n+    unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+\n+    slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n+    slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n+\n+    unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n+\n+    unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n+    y.as_ptr().wrapping_sub(size_of::<u8>());\n+    unsafe { y.as_ptr().add(size_of::<u8>()) };\n+    y.as_mut_ptr().wrapping_add(size_of::<u8>());\n+    unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n+    y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n+\n+    // Count expression involving multiplication of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+\n+    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+\n+    // Count expression involving divisions of size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+\n+    // No size_of calls (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+\n+    // Different types for pointee and size_of (Should not trigger the lint)\n+    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n+}"}, {"sha": "8cf3612abda36a1dab853a18bece3bb3e48d77d8", "filename": "src/tools/clippy/tests/ui/size_of_in_element_count.stderr", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsize_of_in_element_count.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,195 @@\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:18:68\n+   |\n+LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                                    ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:19:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:21:49\n+   |\n+LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:22:64\n+   |\n+LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                                                ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:23:51\n+   |\n+LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n+   |                                                   ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:24:66\n+   |\n+LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n+   |                                                                  ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:26:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |                                               ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:27:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |                                               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:29:46\n+   |\n+LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:30:47\n+   |\n+LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:32:66\n+   |\n+LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:34:46\n+   |\n+LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:35:38\n+   |\n+LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:37:49\n+   |\n+LL |     unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:38:41\n+   |\n+LL |     unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:40:33\n+   |\n+LL |     unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n+   |                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:41:29\n+   |\n+LL |     y.as_ptr().wrapping_sub(size_of::<u8>());\n+   |                             ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:42:29\n+   |\n+LL |     unsafe { y.as_ptr().add(size_of::<u8>()) };\n+   |                             ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:43:33\n+   |\n+LL |     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n+   |                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:44:32\n+   |\n+LL |     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:45:36\n+   |\n+LL |     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:48:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:51:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/size_of_in_element_count.rs:54:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "08f734025181c612ee3c7139d94edb363e574852", "filename": "src/tools/clippy/tests/ui/str_to_string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::str_to_string)]\n+\n+fn main() {\n+    let hello = \"hello world\".to_string();\n+    let msg = &hello[..];\n+    msg.to_string();\n+}"}, {"sha": "b1f73eda5d26c2e75c10e87d81aec835dd309462", "filename": "src/tools/clippy/tests/ui/str_to_string.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstr_to_string.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,19 @@\n+error: `to_string()` called on a `&str`\n+  --> $DIR/str_to_string.rs:4:17\n+   |\n+LL |     let hello = \"hello world\".to_string();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::str-to-string` implied by `-D warnings`\n+   = help: consider using `.to_owned()`\n+\n+error: `to_string()` called on a `&str`\n+  --> $DIR/str_to_string.rs:6:5\n+   |\n+LL |     msg.to_string();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `.to_owned()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c66855f709411358f81e4af29ac3f2f07c03bc3", "filename": "src/tools/clippy/tests/ui/string_to_string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::string_to_string)]\n+#![allow(clippy::redundant_clone)]\n+\n+fn main() {\n+    let mut message = String::from(\"Hello\");\n+    let mut v = message.to_string();\n+}"}, {"sha": "1ebd17999bd8ffae49af1238cb617fb62972ce7b", "filename": "src/tools/clippy/tests/ui/string_to_string.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstring_to_string.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,11 @@\n+error: `to_string()` called on a `String`\n+  --> $DIR/string_to_string.rs:6:17\n+   |\n+LL |     let mut v = message.to_string();\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::string-to-string` implied by `-D warnings`\n+   = help: consider using `.clone()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd6f4ec7bd9b57bed579d463145cf35be8757302", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.rs", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,207 @@\n+#![warn(clippy::suspicious_operation_groupings)]\n+\n+struct Vec3 {\n+    x: f64,\n+    y: f64,\n+    z: f64,\n+}\n+\n+impl Eq for Vec3 {}\n+\n+impl PartialEq for Vec3 {\n+    fn eq(&self, other: &Self) -> bool {\n+        // This should trigger the lint because `self.x` is compared to `other.y`\n+        self.x == other.y && self.y == other.y && self.z == other.z\n+    }\n+}\n+\n+struct S {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+}\n+\n+fn buggy_ab_cmp(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.b`\n+    s1.a < s2.a && s1.a < s2.b\n+}\n+\n+struct SAOnly {\n+    a: i32,\n+}\n+\n+impl S {\n+    fn a(&self) -> i32 {\n+        0\n+    }\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SAOnly) -> bool {\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1.a() < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SAOnly) -> bool {\n+    macro_rules! s1 {\n+        () => {\n+            S {\n+                a: 1,\n+                b: 1,\n+                c: 1,\n+                d: 1,\n+            }\n+        };\n+    }\n+\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1!().a < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SAOnly) -> bool {\n+    // There's two `s1.b`, but we should not suggest `s2.b` since that is invalid\n+    s1.a < s2.a && s1.b < s1.b\n+}\n+\n+fn permissable(s1: &S, s2: &S) -> bool {\n+    // Something like this seems like it might actually be what is desired.\n+    s1.a == s2.b\n+}\n+\n+fn non_boolean_operators(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d\n+}\n+\n+fn odd_number_of_pairs(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_left(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    s1.a * s2.a + s2.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_right(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s1.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_start(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.a`\n+    s1.a * s1.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_end(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s1.c\n+}\n+\n+fn the_cross_product_should_not_lint(s1: &S, s2: &S) -> (i32, i32, i32) {\n+    (\n+        s1.b * s2.c - s1.c * s2.b,\n+        s1.c * s2.a - s1.a * s2.c,\n+        s1.a * s2.b - s1.b * s2.a,\n+    )\n+}\n+\n+fn outer_parens_simple(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    (s1.a * s2.a + s1.b * s1.b)\n+}\n+\n+fn outer_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d)\n+}\n+\n+fn inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)\n+}\n+\n+fn outer_and_some_inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_balanced_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n+}\n+\n+fn all_parens_left_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b)) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)))\n+}\n+\n+fn inside_other_binop_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    (s1.a * s2.a + s2.b * s2.b) / 2\n+}\n+\n+fn inside_function_call(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    i32::swap_bytes(s1.a * s2.a + s2.b * s2.b)\n+}\n+\n+fn inside_larger_boolean_expression(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.b > 0 && s1.d == s2.c && s1.d == s2.d\n+}\n+\n+fn inside_larger_boolean_expression_with_unsorted_ops(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.d == s2.c && s1.b > 0 && s1.d == s2.d\n+}\n+\n+struct Nested {\n+    inner: ((i32,), (i32,), (i32,)),\n+}\n+\n+fn changed_middle_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.2.0`\n+    (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.1).0\n+}\n+\n+// `eq_op` should catch this one.\n+fn changed_initial_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.0.0`\n+    (n1.inner.0).0 == (n1.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}\n+\n+fn inside_fn_with_similar_expression(s1: &S, s2: &S, strict: bool) -> bool {\n+    if strict {\n+        s1.a < s2.a && s1.b < s2.b\n+    } else {\n+        // There's no `s1.b` in this subexpression\n+        s1.a <= s2.a && s1.a <= s2.b\n+    }\n+}\n+\n+fn inside_an_if_statement(s1: &S, s2: &S) {\n+    // There's no `s1.b`\n+    if s1.a < s2.a && s1.a < s2.b {\n+        s1.c = s2.c;\n+    }\n+}\n+\n+fn maximum_unary_minus_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.b) + -(-s1.d * -s2.d)))\n+}\n+\n+fn unary_minus_and_an_if_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })\n+}\n+\n+fn main() {}"}, {"sha": "ce7108217f18dccd5d81743633318de7124697ae", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -0,0 +1,166 @@\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:14:9\n+   |\n+LL |         self.x == other.y && self.y == other.y && self.z == other.z\n+   |         ^^^^^^^^^^^^^^^^^ help: I think you meant: `self.x == other.x`\n+   |\n+   = note: `-D clippy::suspicious-operation-groupings` implied by `-D warnings`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:14:9\n+   |\n+LL |         self.x == other.y && self.y == other.y && self.z == other.z\n+   |         ^^^^^^^^^^^^^^^^^ help: I think you meant: `self.x == other.x`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:27:20\n+   |\n+LL |     s1.a < s2.a && s1.a < s2.b\n+   |                    ^^^^^^^^^^^ help: I think you meant: `s1.b < s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:75:33\n+   |\n+LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d\n+   |                                 ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:80:19\n+   |\n+LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n+   |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:80:19\n+   |\n+LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n+   |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:85:19\n+   |\n+LL |     s1.a * s2.a + s2.b * s2.b + s1.c * s2.c\n+   |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:90:19\n+   |\n+LL |     s1.a * s2.a + s1.b * s1.b + s1.c * s2.c\n+   |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:95:5\n+   |\n+LL |     s1.a * s1.a + s1.b * s2.b + s1.c * s2.c\n+   |     ^^^^^^^^^^^ help: I think you meant: `s1.a * s2.a`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:100:33\n+   |\n+LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s1.c\n+   |                                 ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:113:20\n+   |\n+LL |     (s1.a * s2.a + s1.b * s1.b)\n+   |                    ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:118:34\n+   |\n+LL |     (s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d)\n+   |                                  ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:123:38\n+   |\n+LL |     (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)\n+   |                                      ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:128:39\n+   |\n+LL |     ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d))\n+   |                                       ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:133:42\n+   |\n+LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n+   |                                          ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:133:42\n+   |\n+LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n+   |                                          ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:138:40\n+   |\n+LL |     (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b)) + (s1.d * s2.d))\n+   |                                        ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:143:40\n+   |\n+LL |     ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)))\n+   |                                        ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:148:20\n+   |\n+LL |     (s1.a * s2.a + s2.b * s2.b) / 2\n+   |                    ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:153:35\n+   |\n+LL |     i32::swap_bytes(s1.a * s2.a + s2.b * s2.b)\n+   |                                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:158:29\n+   |\n+LL |     s1.a > 0 && s1.b > 0 && s1.d == s2.c && s1.d == s2.d\n+   |                             ^^^^^^^^^^^^ help: I think you meant: `s1.c == s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:163:17\n+   |\n+LL |     s1.a > 0 && s1.d == s2.c && s1.b > 0 && s1.d == s2.d\n+   |                 ^^^^^^^^^^^^ help: I think you meant: `s1.c == s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:172:77\n+   |\n+LL |     (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.1).0\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: I think you meant: `(n1.inner.2).0 == (n2.inner.2).0`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:186:25\n+   |\n+LL |         s1.a <= s2.a && s1.a <= s2.b\n+   |                         ^^^^^^^^^^^^ help: I think you meant: `s1.b <= s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:192:23\n+   |\n+LL |     if s1.a < s2.a && s1.a < s2.b {\n+   |                       ^^^^^^^^^^^ help: I think you meant: `s1.b < s2.b`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:199:48\n+   |\n+LL |     -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.b) + -(-s1.d * -s2.d)))\n+   |                                                ^^^^^^^^^^^^^ help: I think you meant: `-s1.c * -s2.c`\n+\n+error: This sequence of operators looks suspiciously like a bug.\n+  --> $DIR/suspicious_operation_groupings.rs:204:27\n+   |\n+LL |     -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })\n+   |                           ^^^^^^^^^^^^^ help: I think you meant: `-s1.b < -s2.b`\n+\n+error: aborting due to 27 previous errors\n+"}, {"sha": "e8f2fb46665924848e113fa3a5ee4b2859714c0a", "filename": "src/tools/clippy/tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -20,4 +20,7 @@ fn main() {\n     foo!(a, i32);\n     foo!(b, f32);\n     foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n }"}, {"sha": "7fbce58a82f8e340e7d1ddc76eeb65732de23e7d", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -11,6 +11,8 @@ fn main() {\n     let _ = -100_f32;\n     let _ = -100_f64;\n     let _ = -100_f64;\n+    100_f32;\n+    100_f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "a71363ea4d265ac86a4aaf3081fdc5aabdd62536", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -11,6 +11,8 @@ fn main() {\n     let _ = -100 as f32;\n     let _ = -100 as f64;\n     let _ = -100_i32 as f64;\n+    100. as f32;\n+    100. as f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "3695a8f819c4a9da2ab2c364d29cf4f34a2a3c2b", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -36,59 +36,71 @@ error: casting integer literal to `f64` is unnecessary\n LL |     let _ = -100_i32 as f64;\n    |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n \n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:14:5\n+   |\n+LL |     100. as f32;\n+   |     ^^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:15:5\n+   |\n+LL |     100. as f64;\n+   |     ^^^^^^^^^^^ help: try: `100_f64`\n+\n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:25:5\n+  --> $DIR/unnecessary_cast_fixable.rs:27:5\n    |\n LL |     1 as u32;\n    |     ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:26:5\n+  --> $DIR/unnecessary_cast_fixable.rs:28:5\n    |\n LL |     0x10 as i32;\n    |     ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+  --> $DIR/unnecessary_cast_fixable.rs:29:5\n    |\n LL |     0b10 as usize;\n    |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+  --> $DIR/unnecessary_cast_fixable.rs:30:5\n    |\n LL |     0o73 as u16;\n    |     ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:29:5\n+  --> $DIR/unnecessary_cast_fixable.rs:31:5\n    |\n LL |     1_000_000_000 as u32;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:31:5\n+  --> $DIR/unnecessary_cast_fixable.rs:33:5\n    |\n LL |     1.0 as f64;\n    |     ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:32:5\n+  --> $DIR/unnecessary_cast_fixable.rs:34:5\n    |\n LL |     0.5 as f32;\n    |     ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:36:13\n+  --> $DIR/unnecessary_cast_fixable.rs:38:13\n    |\n LL |     let _ = -1 as i32;\n    |             ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:37:13\n+  --> $DIR/unnecessary_cast_fixable.rs:39:13\n    |\n LL |     let _ = -1.0 as f32;\n    |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "a4570098d7167da8393f6c4933d20cf277be8962", "filename": "src/tools/clippy/tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_wraps.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -109,6 +109,13 @@ impl B for A {\n     }\n }\n \n+fn issue_6384(s: &str) -> Option<&str> {\n+    Some(match s {\n+        \"a\" => \"A\",\n+        _ => return None,\n+    })\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);"}, {"sha": "c2e38037addd2465af022e7ce1b786ca33b24260", "filename": "src/tools/clippy/tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -10,6 +10,14 @@ macro_rules! foo {\n     };\n }\n \n+struct Bar(f32);\n+\n+macro_rules! bar {\n+    () => {\n+        Bar(100200300400.100200300400500)\n+    };\n+}\n+\n fn main() {\n     let _good = (\n         0b1011_i64,\n@@ -26,10 +34,12 @@ fn main() {\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123_456e1;\n \n-    let _fail9 = 0x00ab_cdef;\n-    let _fail10: u32 = 0xBAFE_BAFE;\n-    let _fail11 = 0x0abc_deff;\n-    let _fail12: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+    let _fail1 = 0x00ab_cdef;\n+    let _fail2: u32 = 0xBAFE_BAFE;\n+    let _fail3 = 0x0abc_deff;\n+    let _fail4: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+    let _fail5 = 1.100_300_400;\n \n     let _ = foo!();\n+    let _ = bar!();\n }"}, {"sha": "8296945b25eb4713fc702fa08d298cdf2d9a6214", "filename": "src/tools/clippy/tests/ui/unreadable_literal.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -10,6 +10,14 @@ macro_rules! foo {\n     };\n }\n \n+struct Bar(f32);\n+\n+macro_rules! bar {\n+    () => {\n+        Bar(100200300400.100200300400500)\n+    };\n+}\n+\n fn main() {\n     let _good = (\n         0b1011_i64,\n@@ -26,10 +34,12 @@ fn main() {\n     let _good_sci = 1.1234e1;\n     let _bad_sci = 1.123456e1;\n \n-    let _fail9 = 0xabcdef;\n-    let _fail10: u32 = 0xBAFEBAFE;\n-    let _fail11 = 0xabcdeff;\n-    let _fail12: i128 = 0xabcabcabcabcabcabc;\n+    let _fail1 = 0xabcdef;\n+    let _fail2: u32 = 0xBAFEBAFE;\n+    let _fail3 = 0xabcdeff;\n+    let _fail4: i128 = 0xabcabcabcabcabcabc;\n+    let _fail5 = 1.100300400;\n \n     let _ = foo!();\n+    let _ = bar!();\n }"}, {"sha": "8436aac17acfe76b42d9a20a21ddd9e81e1723d1", "filename": "src/tools/clippy/tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funreadable_literal.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,66 +1,72 @@\n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:17:9\n+  --> $DIR/unreadable_literal.rs:25:9\n    |\n LL |         0x1_234_567,\n    |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:17\n+  --> $DIR/unreadable_literal.rs:33:17\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:31\n+  --> $DIR/unreadable_literal.rs:33:31\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                               ^^^^^^^^^^^^^^^^ help: consider: `0xcafe_babe_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:49\n+  --> $DIR/unreadable_literal.rs:33:49\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:61\n+  --> $DIR/unreadable_literal.rs:33:61\n    |\n LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n    |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:27:20\n+  --> $DIR/unreadable_literal.rs:35:20\n    |\n LL |     let _bad_sci = 1.123456e1;\n    |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:29:18\n+  --> $DIR/unreadable_literal.rs:37:18\n    |\n-LL |     let _fail9 = 0xabcdef;\n+LL |     let _fail1 = 0xabcdef;\n    |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:30:24\n+  --> $DIR/unreadable_literal.rs:38:23\n    |\n-LL |     let _fail10: u32 = 0xBAFEBAFE;\n-   |                        ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n+LL |     let _fail2: u32 = 0xBAFEBAFE;\n+   |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:31:19\n+  --> $DIR/unreadable_literal.rs:39:18\n    |\n-LL |     let _fail11 = 0xabcdeff;\n-   |                   ^^^^^^^^^ help: consider: `0x0abc_deff`\n+LL |     let _fail3 = 0xabcdeff;\n+   |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:32:25\n+  --> $DIR/unreadable_literal.rs:40:24\n    |\n-LL |     let _fail12: i128 = 0xabcabcabcabcabcabc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n+LL |     let _fail4: i128 = 0xabcabcabcabcabcabc;\n+   |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n-error: aborting due to 10 previous errors\n+error: long literal lacking separators\n+  --> $DIR/unreadable_literal.rs:41:18\n+   |\n+LL |     let _fail5 = 1.100300400;\n+   |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "c266f684a36f94f042c11e9491034efa40296446", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "2dbf726d5d07236801f9fee0441f3c2e6b15b12f", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "0da2b68ba0b2f80fc6c3885bc6d4b6b5f14abd23", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=d3eb49baa9bf836997dccaf3c9aae41dd0a55e8e", "patch": "@@ -1,5 +1,5 @@\n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:38:9\n+  --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n@@ -11,25 +11,25 @@ LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:42:9\n+  --> $DIR/wildcard_enum_match_arm.rs:43:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:46:9\n+  --> $DIR/wildcard_enum_match_arm.rs:47:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:62:9\n+  --> $DIR/wildcard_enum_match_arm.rs:63:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n error: match on non-exhaustive enum doesn't explicitly match all known variants\n-  --> $DIR/wildcard_enum_match_arm.rs:79:9\n+  --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _`"}]}