{"sha": "816b9fc2d1d002824908c37ed043125c3031128d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmI5ZmMyZDFkMDAyODI0OTA4YzM3ZWQwNDMxMjVjMzAzMTEyOGQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-28T16:36:06Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-06T10:27:37Z"}, "message": "Remove Option only used as its Some variant", "tree": {"sha": "a58ac1b663f5585eda908e8612a1b58f2bf3876a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58ac1b663f5585eda908e8612a1b58f2bf3876a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816b9fc2d1d002824908c37ed043125c3031128d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816b9fc2d1d002824908c37ed043125c3031128d", "html_url": "https://github.com/rust-lang/rust/commit/816b9fc2d1d002824908c37ed043125c3031128d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816b9fc2d1d002824908c37ed043125c3031128d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c091b5c84caccab856f0b604b4dbc88c319fe92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c091b5c84caccab856f0b604b4dbc88c319fe92f", "html_url": "https://github.com/rust-lang/rust/commit/c091b5c84caccab856f0b604b4dbc88c319fe92f"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "44e38a018a6e91bc73afc745f96fe5452bb2017d", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/816b9fc2d1d002824908c37ed043125c3031128d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816b9fc2d1d002824908c37ed043125c3031128d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=816b9fc2d1d002824908c37ed043125c3031128d", "patch": "@@ -1344,10 +1344,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     debug!(\"eq_opaque_type_and_type: equated\");\n \n-                    Ok(InferOk {\n-                        value: Some(opaque_type_map),\n-                        obligations: obligations.into_vec(),\n-                    })\n+                    Ok(InferOk { value: opaque_type_map, obligations: obligations.into_vec() })\n                 },\n                 || \"input_output\".to_string(),\n             ),\n@@ -1361,25 +1358,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // have to solve any bounds (e.g., `-> impl Iterator` needs to\n         // prove that `T: Iterator` where `T` is the type we\n         // instantiated it with).\n-        if let Some(opaque_type_map) = opaque_type_map {\n-            for (opaque_type_key, opaque_decl) in opaque_type_map {\n-                self.fully_perform_op(\n-                    locations,\n-                    ConstraintCategory::OpaqueType,\n-                    CustomTypeOp::new(\n-                        |infcx| {\n-                            infcx.constrain_opaque_type(\n-                                opaque_type_key,\n-                                &opaque_decl,\n-                                GenerateMemberConstraints::IfNoStaticBound,\n-                                universal_region_relations,\n-                            );\n-                            Ok(InferOk { value: (), obligations: vec![] })\n-                        },\n-                        || \"opaque_type_map\".to_string(),\n-                    ),\n-                )?;\n-            }\n+        for (opaque_type_key, opaque_decl) in opaque_type_map {\n+            self.fully_perform_op(\n+                locations,\n+                ConstraintCategory::OpaqueType,\n+                CustomTypeOp::new(\n+                    |infcx| {\n+                        infcx.constrain_opaque_type(\n+                            opaque_type_key,\n+                            &opaque_decl,\n+                            GenerateMemberConstraints::IfNoStaticBound,\n+                            universal_region_relations,\n+                        );\n+                        Ok(InferOk { value: (), obligations: vec![] })\n+                    },\n+                    || \"opaque_type_map\".to_string(),\n+                ),\n+            )?;\n         }\n         Ok(())\n     }"}]}