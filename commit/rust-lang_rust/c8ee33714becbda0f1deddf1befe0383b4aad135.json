{"sha": "c8ee33714becbda0f1deddf1befe0383b4aad135", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZWUzMzcxNGJlY2JkYTBmMWRlZGRmMWJlZmUwMzgzYjRhYWQxMzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-18T02:04:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-12T00:05:18Z"}, "message": "Use structured suggestion for `impl T` to `Box<dyn T>`", "tree": {"sha": "e27b5f9be0d056e7e91e73b7064c2cf47de66820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27b5f9be0d056e7e91e73b7064c2cf47de66820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ee33714becbda0f1deddf1befe0383b4aad135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee33714becbda0f1deddf1befe0383b4aad135", "html_url": "https://github.com/rust-lang/rust/commit/c8ee33714becbda0f1deddf1befe0383b4aad135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee33714becbda0f1deddf1befe0383b4aad135/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d778203da2157f47af6d1f7ba5f44eb933ee2df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d778203da2157f47af6d1f7ba5f44eb933ee2df1", "html_url": "https://github.com/rust-lang/rust/commit/d778203da2157f47af6d1f7ba5f44eb933ee2df1"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "c19bc767563bf3ecad0ceb17bedfb521549a033e", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee33714becbda0f1deddf1befe0383b4aad135/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee33714becbda0f1deddf1befe0383b4aad135/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=c8ee33714becbda0f1deddf1befe0383b4aad135", "patch": "@@ -37,7 +37,7 @@\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n@@ -1523,10 +1523,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         };\n         if has_impl {\n             if is_object_safe {\n-                err.help(&format!(\n-                    \"you can instead return a boxed trait object using `Box<dyn {}>`\",\n-                    &snippet[5..]\n-                ));\n+                err.span_suggestion_verbose(\n+                    return_sp,\n+                    \"you could change the return type to be a boxed trait object\",\n+                    format!(\"Box<dyn {}>\", &snippet[5..]),\n+                    Applicability::MachineApplicable,\n+                );\n             } else {\n                 err.help(&format!(\n                     \"if the trait `{}` were object safe, you could return a boxed trait object\","}, {"sha": "a3bf21832551b40210513c02309c237cff2273d1", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=c8ee33714becbda0f1deddf1befe0383b4aad135", "patch": "@@ -30,9 +30,12 @@ LL |     B\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn ObjectSafe>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn cat() -> Box<dyn ObjectSafe> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6114e8c72a3df8457fc2d76d84e9ef0eac394789", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=c8ee33714becbda0f1deddf1befe0383b4aad135", "patch": "@@ -2,48 +2,42 @@ fn foo() -> impl std::fmt::Display {\n     if false {\n         return 0i32;\n     }\n-    1u32\n-    //~^ ERROR mismatched types\n+    1u32 //~ ERROR mismatched types\n }\n \n fn bar() -> impl std::fmt::Display {\n     if false {\n         return 0i32;\n     } else {\n-        return 1u32;\n-        //~^ ERROR mismatched types\n+        return 1u32; //~ ERROR mismatched types\n     }\n }\n \n fn baz() -> impl std::fmt::Display {\n     if false {\n         return 0i32;\n     } else {\n-        1u32\n-        //~^ ERROR mismatched types\n+        1u32 //~ ERROR mismatched types\n     }\n }\n \n fn qux() -> impl std::fmt::Display {\n     if false {\n         0i32\n     } else {\n-        1u32\n-        //~^ ERROR `if` and `else` have incompatible types\n+        1u32 //~ ERROR `if` and `else` have incompatible types\n     }\n }\n \n fn bat() -> impl std::fmt::Display {\n     match 13 {\n         0 => return 0i32,\n-        _ => 1u32,\n-        //~^ ERROR mismatched types\n+        _ => 1u32, //~ ERROR mismatched types\n     }\n }\n \n fn can() -> impl std::fmt::Display {\n-    match 13 {\n-    //~^ ERROR mismatched types\n+    match 13 { //~ ERROR mismatched types\n         0 => return 0i32,\n         1 => 1u32,\n         _ => 2u32,\n@@ -56,8 +50,9 @@ fn cat() -> impl std::fmt::Display {\n             return 0i32;\n         }\n         _ => {\n-            1u32\n-            //~^ ERROR mismatched types\n+            1u32 //~ ERROR mismatched types\n+        }\n+    }\n         }\n     }\n }"}, {"sha": "4e4d57f35d243fb39ba14d7b5c6f2aa34b847b74", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee33714becbda0f1deddf1befe0383b4aad135/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=c8ee33714becbda0f1deddf1befe0383b4aad135", "patch": "@@ -12,12 +12,15 @@ LL |     1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn foo() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n    |\n LL | fn bar() -> impl std::fmt::Display {\n    |             ---------------------- expected because this return type...\n@@ -30,12 +33,15 @@ LL |         return 1u32;\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn bar() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n    |\n LL | fn baz() -> impl std::fmt::Display {\n    |             ---------------------- expected because this return type...\n@@ -48,25 +54,27 @@ LL |         1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn baz() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n    |\n LL | /     if false {\n LL | |         0i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n-LL | |\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:35:14\n    |\n LL | fn bat() -> impl std::fmt::Display {\n    |             ---------------------- expected because this return type...\n@@ -78,17 +86,19 @@ LL |         _ => 1u32,\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn bat() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n    |\n LL |   fn can() -> impl std::fmt::Display {\n    |               ---------------------- expected because this return type...\n LL | /     match 13 {\n-LL | |\n LL | |         0 => return 0i32,\n    | |                     ---- ...is found to be `i32` here\n LL | |         1 => 1u32,\n@@ -98,12 +108,15 @@ LL | |     }\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn can() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n    |\n LL | fn cat() -> impl std::fmt::Display {\n    |             ---------------------- expected because this return type...\n@@ -116,9 +129,12 @@ LL |             1u32\n    |\n    = note: to return `impl Trait`, all returned values must be of the same type\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-   = help: you can instead return a boxed trait object using `Box<dyn std::fmt::Display>`\n    = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n    = help: alternatively, create a new `enum` with a variant for each returned type\n+help: you could change the return type to be a boxed trait object\n+   |\n+LL | fn cat() -> Box<dyn std::fmt::Display> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}