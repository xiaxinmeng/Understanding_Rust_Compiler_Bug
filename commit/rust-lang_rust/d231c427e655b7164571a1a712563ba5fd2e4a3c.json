{"sha": "d231c427e655b7164571a1a712563ba5fd2e4a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzFjNDI3ZTY1NWI3MTY0NTcxYTFhNzEyNTYzYmE1ZmQyZTRhM2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T00:23:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T00:23:07Z"}, "message": "core: add more debugging printouts to borrowing", "tree": {"sha": "514b0a5b40c9e12bec74a0f5bc5e72c5437fa395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514b0a5b40c9e12bec74a0f5bc5e72c5437fa395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d231c427e655b7164571a1a712563ba5fd2e4a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d231c427e655b7164571a1a712563ba5fd2e4a3c", "html_url": "https://github.com/rust-lang/rust/commit/d231c427e655b7164571a1a712563ba5fd2e4a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d231c427e655b7164571a1a712563ba5fd2e4a3c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6b24d1350ad658faee68f7eddd2c05a56900ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6b24d1350ad658faee68f7eddd2c05a56900ce", "html_url": "https://github.com/rust-lang/rust/commit/ef6b24d1350ad658faee68f7eddd2c05a56900ce"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "283f232964963804b66d36abda5d19c66ff3d836", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d231c427e655b7164571a1a712563ba5fd2e4a3c/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d231c427e655b7164571a1a712563ba5fd2e4a3c/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=d231c427e655b7164571a1a712563ba5fd2e4a3c", "patch": "@@ -51,6 +51,8 @@ pub mod rustrt {\n \n         #[rust_stack]\n         fn rust_set_task_borrow_list(task: *rust_task, map: *c_void);\n+\n+        fn rust_dbg_breakpoint();\n     }\n }\n \n@@ -88,6 +90,8 @@ fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n }\n \n pub fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n+    debug_ptr(\"fail_borrowed: \", box);\n+\n     if !::rt::env::get().debug_borrows {\n         let msg = \"borrowed\";\n         do str::as_buf(msg) |msg_p, _| {\n@@ -130,15 +134,15 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n static ENABLE_DEBUG_PTR: bool = false;\n \n #[inline]\n-pub fn debug_ptr<T>(tag: &'static str, p: *T) {\n+pub fn debug_ptr<T>(tag: &'static str, p: *const T) {\n     //! A useful debugging function that prints a pointer + tag + newline\n     //! without allocating memory.\n \n     if ENABLE_DEBUG_PTR && ::rt::env::get().debug_mem {\n         debug_ptr_slow(tag, p);\n     }\n \n-    fn debug_ptr_slow<T>(tag: &'static str, p: *T) {\n+    fn debug_ptr_slow<T>(tag: &'static str, p: *const T) {\n         use io;\n         let dbg = STDERR_FILENO as io::fd_t;\n         let letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\n@@ -209,14 +213,17 @@ fn add_borrow_to_task_list(a: *mut BoxRepr, file: *c_char, line: size_t) {\n #[inline(always)]\n pub unsafe fn borrow_as_imm(a: *u8, file: *c_char, line: size_t) -> uint {\n     let a: *mut BoxRepr = transmute(a);\n-\n     let ref_count = (*a).header.ref_count;\n+\n+    debug_ptr(\"borrow_as_imm (ptr): \", a);\n+    debug_ptr(\"borrow_as_imm (ref): \", ref_count as *());\n+\n     if (ref_count & MUT_BIT) != 0 {\n         fail_borrowed(a, file, line);\n     } else {\n         (*a).header.ref_count |= FROZEN_BIT;\n         if ::rt::env::get().debug_borrows {\n-            add_borrow_to_list(a, file, line);\n+            add_borrow_to_task_list(a, file, line);\n         }\n     }\n     ref_count\n@@ -228,13 +235,16 @@ pub unsafe fn borrow_as_imm(a: *u8, file: *c_char, line: size_t) -> uint {\n pub unsafe fn borrow_as_mut(a: *u8, file: *c_char, line: size_t) -> uint {\n     let a: *mut BoxRepr = transmute(a);\n \n+    debug_ptr(\"borrow_as_mut (ptr): \", a);\n+    debug_ptr(\"borrow_as_mut (line): \", line as *());\n+\n     let ref_count = (*a).header.ref_count;\n     if (ref_count & (MUT_BIT|FROZEN_BIT)) != 0 {\n         fail_borrowed(a, file, line);\n     } else {\n         (*a).header.ref_count |= (MUT_BIT|FROZEN_BIT);\n         if ::rt::env::get().debug_borrows {\n-            add_borrow_to_list(a, file, line);\n+            add_borrow_to_task_list(a, file, line);\n         }\n     }\n     ref_count\n@@ -261,6 +271,9 @@ pub unsafe fn return_to_mut(a: *u8, old_ref_count: uint) {\n     if !a.is_null() {\n         let a: *mut BoxRepr = transmute(a);\n \n+        debug_ptr(\"return_to_mut (ptr): \", a);\n+        debug_ptr(\"return_to_mut (ref): \", old_ref_count as *());\n+\n         let ref_count = (*a).header.ref_count & !ALL_BITS;\n         let old_bits = old_ref_count & ALL_BITS;\n         (*a).header.ref_count = ref_count | old_bits;"}]}