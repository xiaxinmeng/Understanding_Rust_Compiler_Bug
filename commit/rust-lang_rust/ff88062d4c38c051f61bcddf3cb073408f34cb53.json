{"sha": "ff88062d4c38c051f61bcddf3cb073408f34cb53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmODgwNjJkNGMzOGMwNTFmNjFiY2RkZjNjYjA3MzQwOGYzNGNiNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T05:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-17T05:42:43Z"}, "message": "Merge pull request #692 from RalfJung/rand\n\nFix 0-sized getrandom and thread_rng()", "tree": {"sha": "1239b6b366833bd78f994fb184a4a7b9d54c6280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1239b6b366833bd78f994fb184a4a7b9d54c6280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff88062d4c38c051f61bcddf3cb073408f34cb53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctrzTCRBK7hj4Ov3rIwAAdHIIAJuAJwwFCsCf+vSmDDKgQ3l9\nIWJWss0BznYxmW7ysomEPwQqs+JwkQr+aZMhNkbx6EjnLcUKMKI/comwyRgFyBkx\nSdOKaglHtFuxraKPI5uz+0jPTyuBdRD19djg0fw01Ae3K7F8TIrIBYNpi/Yg0Ckv\nfcJ3dmxdn1t3ZLeUBW60J4FOIAz7vNdgc24maa/VyI5N7xA5VogSKsthY7MPHhL3\nGks4tiUb/ZvAwuGrfhN3BbUxfRHNmATWSkLXujfnGGr+hs72089EyE3XUvzMTVs0\n2S8Hs/laXRiq8KSxuYqs32SR+gkL9UJFMcjx5Z9Z02ga6NtVGNkMdlyLCWsC0z4=\n=9T+f\n-----END PGP SIGNATURE-----\n", "payload": "tree 1239b6b366833bd78f994fb184a4a7b9d54c6280\nparent f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd\nparent a50512f75134d13a71c0cd99d698f21f17523f7f\nauthor Ralf Jung <post@ralfj.de> 1555479763 +0200\ncommitter GitHub <noreply@github.com> 1555479763 +0200\n\nMerge pull request #692 from RalfJung/rand\n\nFix 0-sized getrandom and thread_rng()"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff88062d4c38c051f61bcddf3cb073408f34cb53", "html_url": "https://github.com/rust-lang/rust/commit/ff88062d4c38c051f61bcddf3cb073408f34cb53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff88062d4c38c051f61bcddf3cb073408f34cb53/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "html_url": "https://github.com/rust-lang/rust/commit/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd"}, {"sha": "a50512f75134d13a71c0cd99d698f21f17523f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50512f75134d13a71c0cd99d698f21f17523f7f", "html_url": "https://github.com/rust-lang/rust/commit/a50512f75134d13a71c0cd99d698f21f17523f7f"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "64dcce161dd78899b2f9a5c895c48a81c0bba623", "filename": "src/fn_call.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -241,9 +241,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                         // neither of which have any effect on our current PRNG\n                         let _flags = this.read_scalar(args[3])?.to_i32()?;\n \n-                        let data = gen_random(this, len as usize)?;\n-                        this.memory_mut().get_mut(ptr.alloc_id)?\n-                                    .write_bytes(tcx, ptr, &data)?;\n+                        if len > 0 {\n+                            let data = gen_random(this, len as usize)?;\n+                            this.memory_mut().get_mut(ptr.alloc_id)?\n+                                        .write_bytes(tcx, ptr, &data)?;\n+                        }\n \n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n@@ -622,6 +624,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 this.write_null(dest)?;\n             }\n \n+            // We don't support fork so we don't have to do anything for atfork.\n+            \"pthread_atfork\" => {\n+                this.write_null(dest)?;\n+            }\n+\n             \"mmap\" => {\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let addr = this.read_scalar(args[0])?.not_undef()?;\n@@ -767,11 +774,13 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             // The actual name of 'RtlGenRandom'\n             \"SystemFunction036\" => {\n                 let ptr = this.read_scalar(args[0])?.to_ptr()?;\n-                let len = this.read_scalar(args[1])?.to_usize(this)?;\n+                let len = this.read_scalar(args[1])?.to_u32()?;\n \n-                let data = gen_random(this, len as usize)?;\n-                this.memory_mut().get_mut(ptr.alloc_id)?\n-                    .write_bytes(tcx, ptr, &data)?;\n+                if len > 0 {\n+                    let data = gen_random(this, len as usize)?;\n+                    this.memory_mut().get_mut(ptr.alloc_id)?\n+                        .write_bytes(tcx, ptr, &data)?;\n+                }\n \n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }"}, {"sha": "f1412dbf3969ec13902312d87a0348659401415e", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -43,7 +43,7 @@ def test_cargo_miri_run():\n     )\n \n def test_cargo_miri_test():\n-    test(\"cargo miri test\", [\"cargo\", \"miri\", \"test\", \"-q\"], \"test.stdout.ref\", \"test.stderr.ref\")\n+    test(\"cargo miri test\", [\"cargo\", \"miri\", \"test\", \"-q\", \"--\", \"-Zmiri-seed=feed\"], \"test.stdout.ref\", \"test.stderr.ref\")\n     test(\"cargo miri test (with filter)\",\n         [\"cargo\", \"miri\", \"test\", \"-q\", \"--\", \"--\", \"impl\"],\n         \"test.stdout.ref2\", \"test.stderr.ref\""}, {"sha": "97589e9a16351316a7f76134bfcf5c7fe3daa83b", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -5,9 +5,10 @@ test test::rng ... ok\n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n \n-running 2 tests\n-test rng ... ok\n+running 3 tests\n+test entropy_rng ... ok\n+test fixed_rng ... ok\n test simple ... ok\n \n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "32d943623a91925ad3c4660067fd13fdc4965143", "filename": "test-cargo-miri/test.stdout.ref2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -7,5 +7,5 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n running 1 test\n test simple ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out\n "}, {"sha": "69a31c42a75c1b8f69b797ae57d2fa77bae14395", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -1,6 +1,8 @@\n+#![allow(unused_imports)] // FIXME for macOS\n+\n extern crate rand;\n \n-use rand::{Rng, SeedableRng};\n+use rand::{SeedableRng, FromEntropy, Rng, rngs::SmallRng};\n \n #[test]\n fn simple() {\n@@ -10,13 +12,28 @@ fn simple() {\n // Having more than 1 test does seem to make a difference\n // (i.e., this calls ptr::swap which having just one test does not).\n #[test]\n-fn rng() {\n+fn fixed_rng() {\n     let mut rng = rand::rngs::StdRng::seed_from_u64(0xdeadcafe);\n     let x: u32 = rng.gen();\n     let y: u32 = rng.gen();\n     assert_ne!(x, y);\n }\n \n+#[test]\n+fn entropy_rng() {\n+    #[cfg(not(target_os=\"macos\"))] // FIXME entropy does not work on macOS\n+    // (Not disabling the entire test as that would change the output.)\n+    {\n+        // Use this opportunity to test querying the RNG (needs an external crate, hence tested here and not in the compiletest suite)\n+        let mut rng = SmallRng::from_entropy();\n+        let _val = rng.gen::<i32>();\n+\n+        // Also try per-thread RNG.\n+        let mut rng = rand::thread_rng();\n+        let _val = rng.gen::<i32>();\n+    }\n+}\n+\n // A test that won't work on miri\n #[cfg(not(miri))]\n #[test]"}, {"sha": "d54c95c82385c2851e07c0c89fc5d7e7fa0a134d", "filename": "tests/compile-fail/getrandom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/tests%2Fcompile-fail%2Fgetrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/tests%2Fcompile-fail%2Fgetrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgetrandom.rs?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -1,5 +1,5 @@\n-// ignore-macos\n-// ignore-windows\n+// ignore-macos: Uses Linux-only APIs\n+// ignore-windows: Uses Linux-only APIs\n \n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "796e63c81a412a864df0a2a0cfad832989f699f4", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff88062d4c38c051f61bcddf3cb073408f34cb53/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88062d4c38c051f61bcddf3cb073408f34cb53/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=ff88062d4c38c051f61bcddf3cb073408f34cb53", "patch": "@@ -27,12 +27,13 @@ fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n }\n \n fn main() {\n-    // TODO: Implement random number generation on OS X\n     if cfg!(not(target_os = \"macos\")) {\n-        let map_normal: HashMap<i32, i32> = HashMap::new();\n-        test_map(map_normal);\n+        let map: HashMap<i32, i32> = HashMap::default();\n+        test_map(map);\n     } else {\n-        let map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = Default::default();\n+        // TODO: Implement random number generation on OS X.\n+        // Until then, use a deterministic map.\n+        let map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = HashMap::default();\n         test_map(map);\n     }\n }"}]}