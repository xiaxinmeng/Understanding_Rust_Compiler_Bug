{"sha": "b33d2fede8ecebf3771fbe6863ec2220f507613c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzM2QyZmVkZThlY2ViZjM3NzFmYmU2ODYzZWMyMjIwZjUwNzYxM2M=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-14T09:47:29Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-17T04:27:47Z"}, "message": "syntax::ast: Remove/Recover tests\n\n`xorpush_test` and `test_marksof` are at `syntax::ast_util`.\n\nFixes #7952", "tree": {"sha": "dfa13c148d2345fd8461888e62007f4c967209e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa13c148d2345fd8461888e62007f4c967209e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33d2fede8ecebf3771fbe6863ec2220f507613c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33d2fede8ecebf3771fbe6863ec2220f507613c", "html_url": "https://github.com/rust-lang/rust/commit/b33d2fede8ecebf3771fbe6863ec2220f507613c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33d2fede8ecebf3771fbe6863ec2220f507613c/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6aba37d74e2ca8acfb961806726373909a7ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6aba37d74e2ca8acfb961806726373909a7ac8", "html_url": "https://github.com/rust-lang/rust/commit/ec6aba37d74e2ca8acfb961806726373909a7ac8"}], "stats": {"total": 157, "additions": 34, "deletions": 123}, "files": [{"sha": "800172daf1500b7dfa39a6d1290a075b59c01335", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 106, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b33d2fede8ecebf3771fbe6863ec2220f507613c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33d2fede8ecebf3771fbe6863ec2220f507613c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b33d2fede8ecebf3771fbe6863ec2220f507613c", "patch": "@@ -1195,123 +1195,32 @@ pub enum InlinedItem {\n \n #[cfg(test)]\n mod test {\n+    use extra;\n+    use codemap::*;\n     use super::*;\n \n     fn is_freeze<T: Freeze>() {}\n \n     // Assert that the AST remains Freeze (#10693).\n-    #[test] fn ast_is_freeze() {\n+    #[test]\n+    fn ast_is_freeze() {\n         is_freeze::<Item>();\n     }\n-}\n-\n-/* hold off on tests ... they appear in a later merge.\n-#[cfg(test)]\n-mod test {\n-    use std::option::{None, Option, Some};\n-    use std::uint;\n-    use extra;\n-    use codemap::*;\n-    use super::*;\n-\n-\n-    #[test] fn xorpush_test () {\n-        let mut s = ~[];\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s,~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq! (s,~[14]);\n-    }\n-\n-    #[test] fn test_marksof () {\n-        let stopname = uints_to_name(&~[12,14,78]);\n-        assert_eq!(s,~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s,~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq! (s,~[14]);\n-    }\n-\n-    #[test] fn test_marksof () {\n-        let stopname = uints_to_name(&~[12,14,78]);\n-        let name1 = uints_to_name(&~[4,9,7]);\n-        assert_eq!(marksof (MT,stopname),~[]);\n-        assert_eq! (marksof (Mark (4,@Mark(98,@MT)),stopname),~[4,98]);\n-        // does xoring work?\n-        assert_eq! (marksof (Mark (5, @Mark (5, @Mark (16,@MT))),stopname),\n-                     ~[16]);\n-        // does nested xoring work?\n-        assert_eq! (marksof (Mark (5,\n-                                    @Mark (10,\n-                                           @Mark (10,\n-                                                  @Mark (5,\n-                                                         @Mark (16,@MT))))),\n-                              stopname),\n-                     ~[16]);\n-        // stop has no effect on marks\n-        assert_eq! (marksof (Mark (9, @Mark (14, @Mark (12, @MT))),stopname),\n-                     ~[9,14,12]);\n-        // rename where stop doesn't match:\n-        assert_eq! (marksof (Mark (9, @Rename\n-                                    (name1,\n-                                     @Mark (4, @MT),\n-                                     uints_to_name(&~[100,101,102]),\n-                                     @Mark (14, @MT))),\n-                              stopname),\n-                     ~[9,14]);\n-        // rename where stop does match\n-        ;\n-        assert_eq! (marksof (Mark(9, @Rename (name1,\n-                                               @Mark (4, @MT),\n-                                               stopname,\n-                                               @Mark (14, @MT))),\n-                              stopname),\n-                     ~[9]);\n-    }\n \n     // are ASTs encodable?\n-    #[test] fn check_asts_encodable() {\n-        let bogus_span = span {lo:BytePos(10),\n-                               hi:BytePos(20),\n-                               expn_info:None};\n-        let e : crate =\n-            spanned{\n-            node: crate_{\n-                module: Mod {view_items: ~[], items: ~[]},\n-                attrs: ~[],\n-                config: ~[]\n+    #[test]\n+    fn check_asts_encodable() {\n+        let e = Crate {\n+            module: Mod {view_items: ~[], items: ~[]},\n+            attrs: ~[],\n+            config: ~[],\n+            span: Span {\n+                lo: BytePos(10),\n+                hi: BytePos(20),\n+                expn_info: None,\n             },\n-            span: bogus_span};\n+        };\n         // doesn't matter which encoder we use....\n         let _f = (@e as @extra::serialize::Encodable<extra::json::Encoder>);\n     }\n-\n-\n }\n-\n-*/\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "89aa03a46baaef0da69c895d5db4e1995be4ec64", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b33d2fede8ecebf3771fbe6863ec2220f507613c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33d2fede8ecebf3771fbe6863ec2220f507613c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b33d2fede8ecebf3771fbe6863ec2220f507613c", "patch": "@@ -872,9 +872,11 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n             table.get()[loopvar]\n         };\n         match table_entry {\n-            EmptyCtxt => {return result;},\n-            Mark(mark,tl) => {\n-                xorPush(&mut result,mark);\n+            EmptyCtxt => {\n+                return result;\n+            },\n+            Mark(mark, tl) => {\n+                xorPush(&mut result, mark);\n                 loopvar = tl;\n             },\n             Rename(_,name,tl) => {\n@@ -980,20 +982,20 @@ mod test {\n \n     #[test] fn xorpush_test () {\n         let mut s = ~[];\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[14]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s.clone(),~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq!(s.clone(),~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq!(s.clone(),~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq!(s.clone(),~[14]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[14]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[14]);\n+        xorPush(&mut s, 15);\n+        assert_eq!(s.clone(), ~[14, 15]);\n+        xorPush(&mut s, 16);\n+        assert_eq!(s.clone(), ~[14, 15, 16]);\n+        xorPush(&mut s, 16);\n+        assert_eq!(s.clone(), ~[14, 15]);\n+        xorPush(&mut s, 15);\n+        assert_eq!(s.clone(), ~[14]);\n     }\n \n     fn id(n: Name, s: SyntaxContext) -> Ident {"}]}