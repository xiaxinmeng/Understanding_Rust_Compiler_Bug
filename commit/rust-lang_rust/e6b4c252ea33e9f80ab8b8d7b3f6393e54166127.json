{"sha": "e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjRjMjUyZWEzM2U5ZjgwYWI4YjhkN2IzZjYzOTNlNTQxNjYxMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T20:44:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T20:44:28Z"}, "message": "Auto merge of #86599 - Amanieu:asm_raw, r=nagisa\n\nAdd a \"raw\" option for asm! which ignores format string specifiers\n\nThis is useful when including raw assembly snippets using `include_str!`.", "tree": {"sha": "bb654e936af73f4066d67249db441e4315d8363b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb654e936af73f4066d67249db441e4315d8363b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "html_url": "https://github.com/rust-lang/rust/commit/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "html_url": "https://github.com/rust-lang/rust/commit/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5"}, {"sha": "d0443bb7c2c42d03e7a329e2e18eef779bd2e0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0443bb7c2c42d03e7a329e2e18eef779bd2e0e9", "html_url": "https://github.com/rust-lang/rust/commit/d0443bb7c2c42d03e7a329e2e18eef779bd2e0e9"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "03282fd51649650121a5679a23113fd17285f3e6", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -1935,6 +1935,7 @@ bitflags::bitflags! {\n         const NORETURN = 1 << 4;\n         const NOSTACK = 1 << 5;\n         const ATT_SYNTAX = 1 << 6;\n+        const RAW = 1 << 7;\n     }\n }\n "}, {"sha": "ffee5cdc3310dce4dadf2262f448f3797cbd4929", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -2284,6 +2284,9 @@ impl<'a> State<'a> {\n                 if opts.contains(InlineAsmOptions::ATT_SYNTAX) {\n                     options.push(\"att_syntax\");\n                 }\n+                if opts.contains(InlineAsmOptions::RAW) {\n+                    options.push(\"raw\");\n+                }\n                 s.commasep(Inconsistent, &options, |s, &opt| {\n                     s.word(opt);\n                 });"}, {"sha": "97e07d52cc31a0bb75ef53ed9dfc46738b120168", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -356,6 +356,8 @@ fn parse_options<'a>(\n             try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n         } else if p.eat_keyword(sym::att_syntax) {\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n+        } else if p.eat_keyword(kw::Raw) {\n+            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::RAW);\n         } else {\n             return p.unexpected();\n         }\n@@ -467,6 +469,14 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             }\n         }\n \n+        // Don't treat raw asm as a format string.\n+        if args.options.contains(ast::InlineAsmOptions::RAW) {\n+            template.push(ast::InlineAsmTemplatePiece::String(template_str.to_string()));\n+            let template_num_lines = 1 + template_str.matches('\\n').count();\n+            line_spans.extend(std::iter::repeat(template_sp).take(template_num_lines));\n+            continue;\n+        }\n+\n         let mut parser = parse::Parser::new(\n             template_str,\n             str_style,"}, {"sha": "3211c7c5621320b74dcde7f862cc443ce812b6b3", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -1444,6 +1444,9 @@ impl<'a> State<'a> {\n                 if opts.contains(ast::InlineAsmOptions::ATT_SYNTAX) {\n                     options.push(\"att_syntax\");\n                 }\n+                if opts.contains(ast::InlineAsmOptions::RAW) {\n+                    options.push(\"raw\");\n+                }\n                 s.commasep(Inconsistent, &options, |s, &opt| {\n                     s.word(opt);\n                 });"}, {"sha": "2cf6801ad1c043cae4fe4e669af1a20b4ca758e5", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -456,7 +456,7 @@ reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n-option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\"\n+option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n ```\n@@ -781,6 +781,7 @@ Currently the following options are defined:\n - `noreturn`: The `asm` block never returns, and its return type is defined as `!` (never). Behavior is undefined if execution falls through past the end of the asm code. A `noreturn` asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.\n - `nostack`: The `asm` block does not push data to the stack, or write to the stack red-zone (if supported by the target). If this option is *not* used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n - `att_syntax`: This option is only valid on x86, and causes the assembler to use the `.att_syntax prefix` mode of the GNU assembler. Register operands are substituted in with a leading `%`.\n+- `raw`: This causes the template string to be parsed as a raw assembly string, with no special handling for `{` and `}`. This is primarily useful when including raw assembly code from an external file using `include_str!`.\n \n The compiler performs some additional checks on options:\n - The `nomem` and `readonly` options are mutually exclusive: it is a compile-time error to specify both."}, {"sha": "28df0f9b8523e62439a208ba1166862d1c1d26d5", "filename": "src/test/codegen/asm-options.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fcodegen%2Fasm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fcodegen%2Fasm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-options.rs?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -94,3 +94,10 @@ pub unsafe fn dont_remove_nonpure() {\n     asm!(\"\", options(nomem));\n     asm!(\"\", options(readonly));\n }\n+\n+// CHECK-LABEL: @raw\n+// CHECK: call void asm sideeffect inteldialect \"{} {}\", \"\"()\n+#[no_mangle]\n+pub unsafe fn raw() {\n+    asm!(\"{} {}\", options(nostack, nomem, preserves_flags, raw));\n+}"}, {"sha": "9039483be4bf95b63d73908c89b3a0357cd40048", "filename": "src/test/ui/asm/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -28,41 +28,41 @@ error: asm outputs are not allowed with the `noreturn` option\n LL |         asm!(\"{}\", out(reg) foo, options(noreturn));\n    |                    ^^^^^^^^^^^^\n \n-error: expected one of `)` or `att_syntax`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:20:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:22:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:24:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:26:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:28:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:30:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "33dca61dc8e347870e961f4e8c98fc26ef75acbc", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "patch": "@@ -64,23 +64,23 @@ error: argument to `sym` must be a path expression\n LL |         asm!(\"{}\", sym foo + bar);\n    |                        ^^^^^^^^^\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:31:26\n    |\n LL |         asm!(\"\", options(foo));\n-   |                          ^^^ expected one of 8 possible tokens\n+   |                          ^^^ expected one of 9 possible tokens\n \n error: expected one of `)` or `,`, found `foo`\n   --> $DIR/parse-error.rs:33:32\n    |\n LL |         asm!(\"\", options(nomem foo));\n    |                                ^^^ expected one of `)` or `,`\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:35:33\n    |\n LL |         asm!(\"\", options(nomem, foo));\n-   |                                 ^^^ expected one of 8 possible tokens\n+   |                                 ^^^ expected one of 9 possible tokens\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:37:31\n@@ -200,23 +200,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)` or `att_syntax`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:81:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:83:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)` or `att_syntax`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:85:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)` or `att_syntax`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:87:30"}]}