{"sha": "816a39cb54766c1dc8960620142659e716f485dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmEzOWNiNTQ3NjZjMWRjODk2MDYyMDE0MjY1OWU3MTZmNDg1ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-06T07:36:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-06T07:36:49Z"}, "message": "Merge #5229\n\n5229: Improve client logging (use output channel and more log levels) r=matklad a=Veetaha\n\nThe improvements:\r\n* Separate output channel allows viewing the logs belonging to only our extension (without the intervention of other vscode extensions)\r\n* All the objects in the output channel are always expanded so users only need to `Ctrl + A and Ctrl + C` to copy the entire output to send us and nothing more (e.g. currently users need to expand the object which is not obvious for them and we may lose the logs this way, see two comments: https://github.com/rust-analyzer/rust-analyzer/issues/5009#issuecomment-651361137\r\n* More log levels allows us to be more granular in disabling only optional verbose debug-level output and leave the logs for us as developers to understand the context of user issues.\r\n* For `log.error(...)` invocations we reveal `Rust Analyzer Client` channel automatically so that users don't have to do any additional actions to get the logs output window visible\r\n\r\nDemo:\r\n![image](https://user-images.githubusercontent.com/36276403/86535275-d7795f80-bee7-11ea-8c30-135c83c1bc7d.png)\r\n\r\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "d821b907d1aae6b5a222454a2d56b07a9b87204d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d821b907d1aae6b5a222454a2d56b07a9b87204d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816a39cb54766c1dc8960620142659e716f485dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAtSRCRBK7hj4Ov3rIwAAdHIIAI1TVK7m80gmwEDXB2jR9ECR\nVD+F0U0J//Og7nw1OklatvF7PeOXlsXKfX4Hz6IXMrr8CypueGqAj+krWTg5bGnu\niaTwSxG0L9A7buk/4V9gCJf23KIVgL3jQ/svUYgg+Xeq08geHnfNpqGR33B0cp9b\nEH3uLIRwvwn8sIB4kXB5THawGzK3y8cP+gNmD52p7TT90DdRZECQH4rjlA+kzxdb\niOTt55VjPyBzuzoOrWP2l0D+K8vhvmQ9hUIJMpeCfuUrvShuWSsUMwyAlsL/WDM3\nA99Etr31S4wGNEF00EM1eIAZN8Pruo0URbJfKVFH5yEcelN2vWYfTwg5QIAjkbw=\n=+MKi\n-----END PGP SIGNATURE-----\n", "payload": "tree d821b907d1aae6b5a222454a2d56b07a9b87204d\nparent 6546a684704fa90d3611c75b4167f63ff1851ee5\nparent 46163acf62a94ec603be444294e119933c953a84\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594021009 +0000\ncommitter GitHub <noreply@github.com> 1594021009 +0000\n\nMerge #5229\n\n5229: Improve client logging (use output channel and more log levels) r=matklad a=Veetaha\n\nThe improvements:\r\n* Separate output channel allows viewing the logs belonging to only our extension (without the intervention of other vscode extensions)\r\n* All the objects in the output channel are always expanded so users only need to `Ctrl + A and Ctrl + C` to copy the entire output to send us and nothing more (e.g. currently users need to expand the object which is not obvious for them and we may lose the logs this way, see two comments: https://github.com/rust-analyzer/rust-analyzer/issues/5009#issuecomment-651361137\r\n* More log levels allows us to be more granular in disabling only optional verbose debug-level output and leave the logs for us as developers to understand the context of user issues.\r\n* For `log.error(...)` invocations we reveal `Rust Analyzer Client` channel automatically so that users don't have to do any additional actions to get the logs output window visible\r\n\r\nDemo:\r\n![image](https://user-images.githubusercontent.com/36276403/86535275-d7795f80-bee7-11ea-8c30-135c83c1bc7d.png)\r\n\r\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816a39cb54766c1dc8960620142659e716f485dc", "html_url": "https://github.com/rust-lang/rust/commit/816a39cb54766c1dc8960620142659e716f485dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816a39cb54766c1dc8960620142659e716f485dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6546a684704fa90d3611c75b4167f63ff1851ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6546a684704fa90d3611c75b4167f63ff1851ee5", "html_url": "https://github.com/rust-lang/rust/commit/6546a684704fa90d3611c75b4167f63ff1851ee5"}, {"sha": "46163acf62a94ec603be444294e119933c953a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/46163acf62a94ec603be444294e119933c953a84", "html_url": "https://github.com/rust-lang/rust/commit/46163acf62a94ec603be444294e119933c953a84"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "033b04b6021d824d0a968c30ae349c7525a6796e", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=816a39cb54766c1dc8960620142659e716f485dc", "patch": "@@ -39,10 +39,10 @@ export class Config {\n \n     private refreshLogging() {\n         log.setEnabled(this.traceExtension);\n-        log.debug(\n-            \"Extension version:\", this.package.version,\n-            \"using configuration:\", this.cfg\n-        );\n+        log.info(\"Extension version:\", this.package.version);\n+\n+        const cfg = Object.entries(this.cfg).filter(([_, val]) => !(val instanceof Function));\n+        log.info(\"Using configuration\", Object.fromEntries(cfg));\n     }\n \n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {"}, {"sha": "5877be8b27592cf42513d57af73abb3b272d053e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=816a39cb54766c1dc8960620142659e716f485dc", "patch": "@@ -59,8 +59,8 @@ async function tryActivate(context: vscode.ExtensionContext) {\n             message += \"you should close them and reload this window to retry. \";\n         }\n \n-        message += 'Open \"Help > Toggle Developer Tools > Console\" to see the logs ';\n-        message += '(enable verbose logs with \"rust-analyzer.trace.extension\")';\n+        message += 'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n+        message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n \n         log.error(\"Bootstrap error\", err);\n         throw new Error(message);\n@@ -214,7 +214,7 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n         );\n     }\n \n-    log.debug(\"Using server binary at\", path);\n+    log.info(\"Using server binary at\", path);\n \n     if (!isValidExecutable(path)) {\n         throw new Error(`Failed to execute ${path} --version`);"}, {"sha": "5705eed812d005d74bca6194be5c016e6caf656d", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=816a39cb54766c1dc8960620142659e716f485dc", "patch": "@@ -4,7 +4,7 @@ import { log } from './util';\n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n         const { lastCheck, releaseId, serverVersion } = this;\n-        log.debug(\"PersistentState: \", { lastCheck, releaseId, serverVersion });\n+        log.info(\"PersistentState:\", { lastCheck, releaseId, serverVersion });\n     }\n \n     /**"}, {"sha": "78fe6f5dab9599359cb4ee4fb3751dcdd1da756a", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/816a39cb54766c1dc8960620142659e716f485dc/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=816a39cb54766c1dc8960620142659e716f485dc", "patch": "@@ -1,7 +1,9 @@\n import * as lc from \"vscode-languageclient\";\n+import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n import { spawnSync } from \"child_process\";\n+import { inspect } from \"util\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n     try {\n@@ -14,21 +16,46 @@ export function assert(condition: boolean, explanation: string): asserts conditi\n \n export const log = new class {\n     private enabled = true;\n+    private readonly output = vscode.window.createOutputChannel(\"Rust Analyzer Client\");\n \n     setEnabled(yes: boolean): void {\n         log.enabled = yes;\n     }\n \n-    debug(message?: any, ...optionalParams: any[]): void {\n+    // Hint: the type [T, ...T[]] means a non-empty array\n+    debug(...msg: [unknown, ...unknown[]]): void {\n         if (!log.enabled) return;\n-        // eslint-disable-next-line no-console\n-        console.log(message, ...optionalParams);\n+        log.write(\"DEBUG\", ...msg);\n+        log.output.toString();\n     }\n \n-    error(message?: any, ...optionalParams: any[]): void {\n+    info(...msg: [unknown, ...unknown[]]): void {\n+        log.write(\"INFO\", ...msg);\n+    }\n+\n+    warn(...msg: [unknown, ...unknown[]]): void {\n+        debugger;\n+        log.write(\"WARN\", ...msg);\n+    }\n+\n+    error(...msg: [unknown, ...unknown[]]): void {\n         debugger;\n-        // eslint-disable-next-line no-console\n-        console.error(message, ...optionalParams);\n+        log.write(\"ERROR\", ...msg);\n+        log.output.show(true);\n+    }\n+\n+    private write(label: string, ...messageParts: unknown[]): void {\n+        const message = messageParts.map(log.stringify).join(\" \");\n+        const dateTime = new Date().toLocaleString();\n+        log.output.appendLine(`${label} [${dateTime}]: ${message}`);\n+    }\n+\n+    private stringify(val: unknown): string {\n+        if (typeof val === \"string\") return val;\n+        return inspect(val, {\n+            colors: false,\n+            depth: 6, // heuristic\n+        });\n     }\n };\n \n@@ -46,7 +73,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n             );\n         } catch (error) {\n             if (delay === null) {\n-                log.error(\"LSP request timed out\", { method: reqType.method, param, error });\n+                log.warn(\"LSP request timed out\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -55,7 +82,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n             }\n \n             if (error.code !== lc.ErrorCodes.ContentModified) {\n-                log.error(\"LSP request failed\", { method: reqType.method, param, error });\n+                log.warn(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -87,11 +114,15 @@ export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n export function isValidExecutable(path: string): boolean {\n     log.debug(\"Checking availability of a binary at\", path);\n \n+    if (!fs.existsSync(path)) return false;\n+\n     const res = spawnSync(path, [\"--version\"], { encoding: 'utf8' });\n \n-    log.debug(res, \"--version output:\", res.output);\n+    const isSuccess = res.status === 0;\n+    const printOutput = isSuccess ? log.debug : log.warn;\n+    printOutput(path, \"--version:\", res);\n \n-    return res.status === 0;\n+    return isSuccess;\n }\n \n /** Sets ['when'](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts) clause contexts */"}]}