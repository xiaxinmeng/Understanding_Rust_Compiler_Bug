{"sha": "0e1a6cf3d902065327625ff05ebbd7836bdb001b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWE2Y2YzZDkwMjA2NTMyNzYyNWZmMDVlYmJkNzgzNmJkYjAwMWI=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T21:13:42Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T21:13:52Z"}, "message": "Remove tvec::trans_add", "tree": {"sha": "7e7cc14bba312c811a07ea87522787bef573bad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e7cc14bba312c811a07ea87522787bef573bad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1a6cf3d902065327625ff05ebbd7836bdb001b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a6cf3d902065327625ff05ebbd7836bdb001b", "html_url": "https://github.com/rust-lang/rust/commit/0e1a6cf3d902065327625ff05ebbd7836bdb001b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a6cf3d902065327625ff05ebbd7836bdb001b/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d868e92538e34c84593df0b891a4185c4520be", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d868e92538e34c84593df0b891a4185c4520be", "html_url": "https://github.com/rust-lang/rust/commit/11d868e92538e34c84593df0b891a4185c4520be"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "83a9847c163b7cff73902b1ff428c80a832153d4", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a6cf3d902065327625ff05ebbd7836bdb001b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a6cf3d902065327625ff05ebbd7836bdb001b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0e1a6cf3d902065327625ff05ebbd7836bdb001b", "patch": "@@ -1660,9 +1660,6 @@ fn trans_eager_binop(cx: block, span: span, op: ast::binop, lhs: ValueRef,\n \n     let rhs = cast_shift_expr_rhs(cx, op, lhs, rhs);\n \n-    if op == ast::add && ty::type_is_sequence(intype) {\n-        ret tvec::trans_add(cx, intype, lhs, rhs, dest);\n-    }\n     let mut cx = cx;\n     let val = alt op {\n       ast::add {"}, {"sha": "d3212cd99e06063898eb3dcb1324d22866c6c3a3", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a6cf3d902065327625ff05ebbd7836bdb001b/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a6cf3d902065327625ff05ebbd7836bdb001b/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=0e1a6cf3d902065327625ff05ebbd7836bdb001b", "patch": "@@ -375,48 +375,6 @@ fn trans_append_literal(bcx: block, vptrptr: ValueRef, vec_ty: ty::t,\n     bcx\n }\n \n-fn trans_add(bcx: block, vec_ty: ty::t, lhs: ValueRef,\n-             rhs: ValueRef, dest: dest) -> block {\n-    let _icx = bcx.insn_ctxt(\"tvec::trans_add\");\n-    let ccx = bcx.ccx();\n-\n-    let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n-    let llunitty = type_of::type_of(ccx, unit_ty);\n-\n-    if ty::get(vec_ty).struct == ty::ty_str {\n-        let lhs = PointerCast(bcx, lhs, T_ptr(T_i8()));\n-        let rhs = PointerCast(bcx, rhs, T_ptr(T_i8()));\n-        let n = Call(bcx, ccx.upcalls.str_concat, ~[lhs, rhs]);\n-        let n = PointerCast(\n-            bcx, n, T_unique_ptr(T_unique(ccx, T_vec(ccx, llunitty))));\n-        ret base::store_in_dest(bcx, n, dest);\n-    }\n-\n-    let lhs_fill = get_fill(bcx, get_bodyptr(bcx, lhs));\n-    let rhs_fill = get_fill(bcx, get_bodyptr(bcx, rhs));\n-    let new_fill = Add(bcx, lhs_fill, rhs_fill);\n-    let mut {bcx: bcx, val: new_vec_ptr} =\n-        alloc_uniq_raw(bcx, unit_ty, new_fill, new_fill);\n-\n-    let new_vec_body_ptr = get_bodyptr(bcx, new_vec_ptr);\n-    let write_ptr_ptr = do_spill_noroot\n-        (bcx, get_dataptr(bcx, new_vec_body_ptr));\n-    let copy_fn = fn@(bcx: block, addr: ValueRef,\n-                      _ty: ty::t) -> block {\n-        let ccx = bcx.ccx();\n-        let write_ptr = Load(bcx, write_ptr_ptr);\n-        let bcx = copy_val(bcx, INIT, write_ptr,\n-                           load_if_immediate(bcx, addr, unit_ty), unit_ty);\n-        Store(bcx, InBoundsGEP(bcx, write_ptr, ~[C_int(ccx, 1)]),\n-              write_ptr_ptr);\n-        ret bcx;\n-    };\n-\n-    let bcx = iter_vec_uniq(bcx, lhs, vec_ty, lhs_fill, copy_fn);\n-    let bcx = iter_vec_uniq(bcx, rhs, vec_ty, rhs_fill, copy_fn);\n-    ret base::store_in_dest(bcx, new_vec_ptr, dest);\n-}\n-\n type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> result;\n \n type iter_vec_block = fn(block, ValueRef, ty::t) -> block;"}]}