{"sha": "f7326989e63ab8944493e8ff03447bb9a7d83141", "node_id": "C_kwDOAAsO6NoAKGY3MzI2OTg5ZTYzYWI4OTQ0NDkzZThmZjAzNDQ3YmI5YTdkODMxNDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T05:51:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T05:51:03Z"}, "message": "Use VecMap::get in ConstraintLocator::check", "tree": {"sha": "3c62d1aad5f680ce50310ad7d54bcd9849d71259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c62d1aad5f680ce50310ad7d54bcd9849d71259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7326989e63ab8944493e8ff03447bb9a7d83141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7326989e63ab8944493e8ff03447bb9a7d83141", "html_url": "https://github.com/rust-lang/rust/commit/f7326989e63ab8944493e8ff03447bb9a7d83141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7326989e63ab8944493e8ff03447bb9a7d83141/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ffde6f04d3d24327a4e17a2a2bf4f63c246235", "html_url": "https://github.com/rust-lang/rust/commit/93ffde6f04d3d24327a4e17a2a2bf4f63c246235"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "1d7406e00ad0a63ff9e6dadb2b49561932873609", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7326989e63ab8944493e8ff03447bb9a7d83141/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7326989e63ab8944493e8ff03447bb9a7d83141/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f7326989e63ab8944493e8ff03447bb9a7d83141", "patch": "@@ -538,9 +538,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     impl ConstraintLocator<'_> {\n         #[instrument(skip(self), level = \"debug\")]\n-        fn check(&mut self, def_id: LocalDefId) {\n+        fn check(&mut self, item_def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n-            if !self.tcx.has_typeck_results(def_id) {\n+            if !self.tcx.has_typeck_results(item_def_id) {\n                 debug!(\"no constraint: no typeck results\");\n                 return;\n             }\n@@ -555,26 +555,20 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // // because we again need to reveal `Foo` so we can check whether the\n             // // constant does not contain interior mutability.\n             // ```\n-            let tables = self.tcx.typeck(def_id);\n+            let tables = self.tcx.typeck(item_def_id);\n             if let Some(_) = tables.tainted_by_errors {\n                 self.found = Some(ty::OpaqueHiddenType { span: DUMMY_SP, ty: self.tcx.ty_error() });\n                 return;\n             }\n-            if tables.concrete_opaque_types.get(&self.def_id).is_none() {\n+            if !tables.concrete_opaque_types.contains_key(&self.def_id) {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n-            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(item_def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for &(def_id, concrete_type) in concrete_opaque_types {\n-                if def_id != self.def_id {\n-                    // Ignore constraints for other opaque types.\n-                    continue;\n-                }\n-\n+            if let Some(&concrete_type) = concrete_opaque_types.get(&self.def_id) {\n                 debug!(?concrete_type, \"found constraint\");\n-\n                 if let Some(prev) = self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n                         prev.report_mismatch(&concrete_type, self.tcx);"}]}