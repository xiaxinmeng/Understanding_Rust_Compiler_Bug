{"sha": "6420293af4b87bca51c51661de1aa53d2158cdb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MjAyOTNhZjRiODdiY2E1MWM1MTY2MWRlMWFhNTNkMjE1OGNkYjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T10:59:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T10:59:52Z"}, "message": "adjust readme to miri build script", "tree": {"sha": "52849b4227bf386c1bd5dce457903cdbbf70cac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52849b4227bf386c1bd5dce457903cdbbf70cac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6420293af4b87bca51c51661de1aa53d2158cdb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6420293af4b87bca51c51661de1aa53d2158cdb5", "html_url": "https://github.com/rust-lang/rust/commit/6420293af4b87bca51c51661de1aa53d2158cdb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6420293af4b87bca51c51661de1aa53d2158cdb5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2791fc56abba235c4d0d56a746e24ac2cb778bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2791fc56abba235c4d0d56a746e24ac2cb778bf", "html_url": "https://github.com/rust-lang/rust/commit/c2791fc56abba235c4d0d56a746e24ac2cb778bf"}], "stats": {"total": 47, "additions": 11, "deletions": 36}, "files": [{"sha": "09b23b0db12f039334129eeaae1af6ce210a0df2", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6420293af4b87bca51c51661de1aa53d2158cdb5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6420293af4b87bca51c51661de1aa53d2158cdb5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6420293af4b87bca51c51661de1aa53d2158cdb5", "patch": "@@ -141,42 +141,28 @@ version of `rustc` that, instead of compiling your code, runs it.  It accepts\n all the same flags as `rustc` (though the ones only affecting code generation\n and linking obviously will have no effect) [and more][miri-flags].\n \n-To run the Miri driver, you need to have the `MIRI_SYSROOT` environment variable\n-set to an appropriate sysroot.  You can generate such a sysroot with the\n-following incantation:\n-\n-```\n-cargo run --bin cargo-miri -- miri setup\n-```\n-\n-This basically runs the `cargo-miri` binary (which backs the `cargo miri`\n-subcommand) with `cargo`, and asks it to `setup`.  It should in the end print\n-the directory where the libstd was built.  In the following, we will assume it\n-is `~/.cache/miri/HOST`; you may have to adjust that if you are not using Linux.\n-\n-Now you can run the driver directly using\n+Running the Miri driver requires some fiddling with environment variables, so the `miri` script helps you do that.\n+For example, you can run the driver on a particular file by doing\n \n ```sh\n-MIRI_SYSROOT=~/.cache/miri/HOST cargo run tests/run-pass/format.rs # or whatever test you like\n+./miri run tests/run-pass/format.rs # or whatever test you like\n ```\n \n and you can run the test suite using\n \n ```\n-cargo test\n+./miri test\n ```\n \n-We recommend adding the `--release` flag to make tests run faster.\n-\n-`cargo test --release FILTER` only runs those tests that contain `FILTER` in\n-their filename (including the base directory, e.g. `cargo test --release fail`\n-will run all compile-fail tests).\n+`./miri test FILTER` only runs those tests that contain `FILTER` in their\n+filename (including the base directory, e.g. `./miri test fail` will run all\n+compile-fail tests).\n \n You can get a trace of which MIR statements are being executed by setting the\n `MIRI_LOG` environment variable.  For example:\n \n ```sh\n-MIRI_LOG=info cargo run tests/run-pass/vecs.rs\n+MIRI_LOG=info ./miri run tests/run-pass/vecs.rs\n ```\n \n Setting `MIRI_LOG` like this will configure logging for Miri itself as well as\n@@ -185,7 +171,7 @@ can also do more targeted configuration, e.g. the following helps debug the\n stacked borrows implementation:\n \n ```sh\n-MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows cargo run tests/run-pass/vecs.rs\n+MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pass/vecs.rs\n ```\n \n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n@@ -199,7 +185,7 @@ is probably easier to test it with the cargo wrapper.  You can install your\n development version of Miri using\n \n ```\n-cargo install --path . --force\n+./miri install\n ```\n \n and then you can use it as if it was installed by `rustup`.  Make sure you use\n@@ -235,18 +221,7 @@ rustup override set custom\n ```\n \n With this, you should now have a working development setup!  See\n-[above][testing-miri] for how to proceed working with the Miri driver.  Notice\n-that rustc's sysroot is already built for Miri in this case, so you can set\n-`MIRI_SYSROOT=$(rustc --print sysroot)`.\n-\n-Running `cargo miri` in this setup is a bit more complicated, because the Miri\n-binary you just created needs help to find the libraries it links against.  On\n-Linux, you can set the rpath to make this \"just work\":\n-\n-```sh\n-export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/lib\"\n-cargo install --path . --force\n-```\n+[above][testing-miri] for how to proceed working with the Miri driver.\n \n ### Miri `-Z` flags and environment variables\n [miri-flags]: #miri--z-flags-and-environment-variables"}]}