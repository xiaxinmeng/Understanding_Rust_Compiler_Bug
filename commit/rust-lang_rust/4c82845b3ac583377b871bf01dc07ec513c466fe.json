{"sha": "4c82845b3ac583377b871bf01dc07ec513c466fe", "node_id": "C_kwDOAAsO6NoAKDRjODI4NDViM2FjNTgzMzc3Yjg3MWJmMDFkYzA3ZWM1MTNjNDY2ZmU", "commit": {"author": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-20T19:27:41Z"}, "committer": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-22T02:22:55Z"}, "message": "Fixed failing tests (missing labels), added automatic error code in create_feature_err() builder", "tree": {"sha": "ededbf4ca5f0fb7512322e75dc7059e7fd28d489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ededbf4ca5f0fb7512322e75dc7059e7fd28d489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c82845b3ac583377b871bf01dc07ec513c466fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c82845b3ac583377b871bf01dc07ec513c466fe", "html_url": "https://github.com/rust-lang/rust/commit/4c82845b3ac583377b871bf01dc07ec513c466fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c82845b3ac583377b871bf01dc07ec513c466fe/comments", "author": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f14ee1b01dd39cd79cd9cdd71e91ba521901fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f14ee1b01dd39cd79cd9cdd71e91ba521901fe", "html_url": "https://github.com/rust-lang/rust/commit/d1f14ee1b01dd39cd79cd9cdd71e91ba521901fe"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "9041d55155eae11d6aaf361dd001d95e293e1ddc", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=4c82845b3ac583377b871bf01dc07ec513c466fe", "patch": "@@ -1,6 +1,6 @@\n // Not in interpret to make sure we do not use private implementation details\n \n-use crate::errors::MaxNumNodesExceeded;\n+use crate::errors::MaxNumNodesInConstErr;\n use crate::interpret::{\n     intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MemPlaceMeta,\n     Scalar,\n@@ -77,7 +77,7 @@ pub(crate) fn eval_to_valtree<'tcx>(\n                 ValTreeCreationError::NodesOverflow => {\n                     let msg = format!(\"maximum number of nodes exceeded in constant {}\", &s);\n                     let mut diag = match tcx.hir().span_if_local(did) {\n-                        Some(span) => tcx.sess.create_err(MaxNumNodesExceeded { span, s }),\n+                        Some(span) => tcx.sess.create_err(MaxNumNodesInConstErr { span, s }),\n                         None => tcx.sess.struct_err(&msg),\n                     };\n                     diag.emit();"}, {"sha": "7e1cf4ef1aab822a8d79070fc4fbfd90d337907f", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=4c82845b3ac583377b871bf01dc07ec513c466fe", "patch": "@@ -89,8 +89,8 @@ pub(crate) struct TransientMutBorrowErrRaw {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(const_eval::const_evaL_max_num_nodes_exceeded)]\n-pub(crate) struct MaxNumNodesExceeded {\n+#[error(const_eval::const_evaL_max_num_nodes_in_const_err)]\n+pub(crate) struct MaxNumNodesInConstErr {\n     #[primary_span]\n     pub span: Span,\n     pub s: String,\n@@ -109,7 +109,7 @@ pub(crate) struct UnallowedFnPointerCall {\n pub(crate) struct UnstableConstFn {\n     #[primary_span]\n     pub span: Span,\n-    pub def_id: String,\n+    pub def_path: String,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -160,6 +160,7 @@ pub(crate) struct UnallowedOpInConstContext {\n #[error(const_eval::unallowed_heap_allocations, code = \"E0010\")]\n pub(crate) struct UnallowedHeapAllocations {\n     #[primary_span]\n+    #[label]\n     pub span: Span,\n     pub kind: ConstContext,\n     #[note(const_eval::teach_note)]\n@@ -178,6 +179,7 @@ pub(crate) struct UnallowedInlineAsm {\n #[error(const_eval::interior_mutable_data_refer, code = \"E0492\")]\n pub(crate) struct InteriorMutableDataRefer {\n     #[primary_span]\n+    #[label]\n     pub span: Span,\n     #[help]\n     pub opt_help: Option<()>,"}, {"sha": "5fb4bf638b342648d8648926c4aaeba2872e0a07", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=4c82845b3ac583377b871bf01dc07ec513c466fe", "patch": "@@ -345,8 +345,10 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let FnCallUnstable(def_id, feature) = *self;\n \n-        let mut err =\n-            ccx.tcx.sess.create_err(UnstableConstFn { span, def_id: ccx.tcx.def_path_str(def_id) });\n+        let mut err = ccx\n+            .tcx\n+            .sess\n+            .create_err(UnstableConstFn { span, def_path: ccx.tcx.def_path_str(def_id) });\n \n         if ccx.is_const_stable_const_fn() {\n             err.help(\"const-stable functions can only call other const-stable functions\");\n@@ -517,17 +519,6 @@ impl<'tcx> NonConstOp<'tcx> for MutBorrow {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        // let raw = match self.0 {\n-        //     hir::BorrowKind::Raw => \"raw \",\n-        //     hir::BorrowKind::Ref => \"\",\n-        // };\n-\n-        // ccx.tcx.sess.create_err(UnallowedMutableRefs {\n-        //     span,\n-        //     raw,\n-        //     kind: ccx.const_kind(),\n-        //     teach: ccx.tcx.sess.teach(&error_code!(E0764)).then_some(()),\n-        // })\n         match self.0 {\n             hir::BorrowKind::Raw => ccx.tcx.sess.create_err(UnallowedMutableRefsRaw {\n                 span,"}, {"sha": "b8e4199dc1c2a752c14a7268fe85f0d7d45c108a", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=4c82845b3ac583377b871bf01dc07ec513c466fe", "patch": "@@ -30,11 +30,11 @@ const_eval_transient_mut_borrow = mutable references are not allowed in {$kind}s\n \n const_eval_transient_mut_borrow_raw = raw mutable references are not allowed in {$kind}s\n \n-const_evaL_max_num_nodes_exceeded = maximum number of nodes exceeded in constant {$s}\n+const_evaL_max_num_nodes_in_const_err = maximum number of nodes exceeded in constant {$s}\n \n const_eval_unallowed_fn_pointer_call = function pointer calls are not allowed in {$kind}s\n \n-const_eval_unstable_const_fn = `{$def_id}` is not yet stable as a const fn\n+const_eval_unstable_const_fn = `{$def_path}` is not yet stable as a const fn\n \n const_eval_unallowed_mutable_refs =\n     mutable references are not allowed in the final value of {$kind}s\n@@ -65,9 +65,7 @@ const_eval_unallowed_heap_allocations =\n     allocations are not allowed in {$kind}s\n     .label = allocation not allowed in {$kind}s\n     .teach_note = \n-        The value of statics and constants must be known at compile time, and they live for the entire \n-        lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and \n-        therefore cannot be done at compile time.\n+        The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n const_eval_unallowed_inline_asm =\n     inline assembly is not allowed in {$kind}s"}, {"sha": "743b9f429e2bb63c902a80d2dbdd89f8b0969e46", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c82845b3ac583377b871bf01dc07ec513c466fe/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=4c82845b3ac583377b871bf01dc07ec513c466fe", "patch": "@@ -20,8 +20,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, EmissionGuarantee,\n-    ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n+    error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n+    EmissionGuarantee, ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -467,6 +467,7 @@ impl Session {\n         feature: Symbol,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = self.parse_sess.create_err(err);\n+        err.code = std::option::Option::Some(error_code!(E0658));\n         add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n         err\n     }"}]}