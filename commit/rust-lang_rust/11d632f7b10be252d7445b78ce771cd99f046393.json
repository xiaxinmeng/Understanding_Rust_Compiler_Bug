{"sha": "11d632f7b10be252d7445b78ce771cd99f046393", "node_id": "C_kwDOAAsO6NoAKDExZDYzMmY3YjEwYmUyNTJkNzQ0NWI3OGNlNzcxY2Q5OWYwNDYzOTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T07:42:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T07:42:27Z"}, "message": "Auto merge of #104170 - cjgillot:hir-def-id, r=fee1-dead\n\nRecord `LocalDefId` in HIR nodes instead of a side table\n\nThis is part of an attempt to remove the `HirId -> LocalDefId` table from HIR.\nThis attempt is a prerequisite to creation of `LocalDefId` after HIR lowering (https://github.com/rust-lang/rust/pull/96840), by controlling how `def_id` information is accessed.\n\nThis first part adds the information to HIR nodes themselves instead of a table.\nThe second part is https://github.com/rust-lang/rust/pull/103902\nThe third part will be to make `hir::Visitor::visit_fn` take a `LocalDefId` as last parameter.\nThe fourth part will be to completely remove the side table.", "tree": {"sha": "78771eaa940c95a5fc1ef80f2140ed283f66976f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78771eaa940c95a5fc1ef80f2140ed283f66976f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d632f7b10be252d7445b78ce771cd99f046393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d632f7b10be252d7445b78ce771cd99f046393", "html_url": "https://github.com/rust-lang/rust/commit/11d632f7b10be252d7445b78ce771cd99f046393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d632f7b10be252d7445b78ce771cd99f046393/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd6159095dd4f5e96671e9230420a46c6302dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6159095dd4f5e96671e9230420a46c6302dd3", "html_url": "https://github.com/rust-lang/rust/commit/cbd6159095dd4f5e96671e9230420a46c6302dd3"}, {"sha": "e6ef47887770fd3414f57f0725b6826bec80031c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ef47887770fd3414f57f0725b6826bec80031c", "html_url": "https://github.com/rust-lang/rust/commit/e6ef47887770fd3414f57f0725b6826bec80031c"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4877cee0cc1ea8ea8bc3b575cb38272e84a94b17", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11d632f7b10be252d7445b78ce771cd99f046393/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d632f7b10be252d7445b78ce771cd99f046393/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=11d632f7b10be252d7445b78ce771cd99f046393", "patch": "@@ -157,10 +157,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                let id = cx.tcx.hir().local_def_id(v.id);\n-                (matches!(v.data, hir::VariantData::Unit(_))\n+                let id = cx.tcx.hir().local_def_id(v.hir_id);\n+                (matches!(v.data, hir::VariantData::Unit(..))\n                     && v.ident.as_str().starts_with('_')\n-                    && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n+                    && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n                 .then_some((id, v.span))\n             });\n             if let Some((id, span)) = iter.next()"}, {"sha": "6fd100762b49dd7caacd956f9b6596f050d053db", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11d632f7b10be252d7445b78ce771cd99f046393/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d632f7b10be252d7445b78ce771cd99f046393/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=11d632f7b10be252d7445b78ce771cd99f046393", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        let attrs = cx.tcx.hir().attrs(v.id);\n+        let attrs = cx.tcx.hir().attrs(v.hir_id);\n         if !is_from_proc_macro(cx, v) {\n             self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n         }"}]}