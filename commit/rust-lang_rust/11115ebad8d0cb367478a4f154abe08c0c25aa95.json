{"sha": "11115ebad8d0cb367478a4f154abe08c0c25aa95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTE1ZWJhZDhkMGNiMzY3NDc4YTRmMTU0YWJlMDhjMGMyNWFhOTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T16:50:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T19:51:21Z"}, "message": "Don't complete paths after attributes", "tree": {"sha": "d4260c26782bc61c904c0d78707ea74830bbbfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4260c26782bc61c904c0d78707ea74830bbbfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11115ebad8d0cb367478a4f154abe08c0c25aa95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11115ebad8d0cb367478a4f154abe08c0c25aa95", "html_url": "https://github.com/rust-lang/rust/commit/11115ebad8d0cb367478a4f154abe08c0c25aa95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11115ebad8d0cb367478a4f154abe08c0c25aa95/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea6ee6b2785da02ff1963fbbc2eea340450905c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea6ee6b2785da02ff1963fbbc2eea340450905c", "html_url": "https://github.com/rust-lang/rust/commit/9ea6ee6b2785da02ff1963fbbc2eea340450905c"}], "stats": {"total": 258, "additions": 123, "deletions": 135}, "files": [{"sha": "0a3df79d46aa823f90ad0e358d6a2405eb8d81b8", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -349,49 +349,6 @@ fn quux() -> i32 {\n         );\n     }\n \n-    #[test]\n-    fn test_keywords_in_trait_def() {\n-        check(\n-            r\"trait My { $0 }\",\n-            expect![[r#\"\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_keywords_in_impl_def() {\n-        check(\n-            r\"impl My { $0 }\",\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_keywords_in_impl_def_with_attr() {\n-        check(\n-            r\"impl My { #[foo] $0 }\",\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-                kw unsafe\n-                kw fn\n-                kw const\n-                kw type\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_in_loop() {\n         check("}, {"sha": "d142265e08e3d34744cd3862d99c9529613de404", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) {\n+    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) || ctx.path_qual().is_some() {\n         return;\n     }\n     if ctx.has_visibility_prev_sibling() {"}, {"sha": "3910de2c47e8b6f39c206faec243968067d17a60", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -500,18 +500,6 @@ fn f() {$0}\n         check(\n             r#\"\n #[rustc_builtin_macro]\n-pub macro Clone {}\n-\n-struct S;\n-impl S {\n-    $0\n-}\n-\"#,\n-            expect![[r#\"\"#]],\n-        );\n-        check(\n-            r#\"\n-#[rustc_builtin_macro]\n pub macro bench {}\n \n fn f() {$0}\n@@ -772,42 +760,6 @@ impl My$0\n         )\n     }\n \n-    #[test]\n-    fn completes_in_assoc_item_list() {\n-        check(\n-            r#\"\n-macro_rules! foo {}\n-mod bar {}\n-\n-struct MyStruct {}\n-impl MyStruct {\n-    $0\n-}\n-\"#,\n-            expect![[r#\"\n-                md bar\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_in_item_list() {\n-        check(\n-            r#\"\n-struct MyStruct {}\n-macro_rules! foo {}\n-mod bar {}\n-\n-$0\n-\"#,\n-            expect![[r#\"\n-                md bar\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn completes_types_and_const_in_arg_list() {\n         check("}, {"sha": "441c080b127c019b7a9edf94629c57204a01b1ef", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -313,7 +313,10 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn is_path_disallowed(&self) -> bool {\n         self.attribute_under_caret.is_some()\n             || self.previous_token_is(T![unsafe])\n-            || self.has_visibility_prev_sibling()\n+            || matches!(\n+                self.prev_sibling,\n+                Some(ImmediatePrevSibling::Attribute) | Some(ImmediatePrevSibling::Visibility)\n+            )\n             || matches!(\n                 self.completion_location,\n                 Some(ImmediateLocation::Attribute(_))"}, {"sha": "02cfe91e182599d38f297aefc5bdd34ba293dad8", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -20,6 +20,7 @@ pub(crate) enum ImmediatePrevSibling {\n     TraitDefName,\n     ImplDefType,\n     Visibility,\n+    Attribute,\n }\n \n /// Direct parent \"thing\" of what we are currently completing.\n@@ -113,6 +114,7 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n                 } else {\n                     return None\n             },\n+            ast::Attr(_it) => ImmediatePrevSibling::Attribute,\n             _ => return None,\n         }\n     };\n@@ -438,4 +440,9 @@ mod tests {\n     fn test_vis_prev_sibling() {\n         check_prev_sibling(r\"pub w$0\", ImmediatePrevSibling::Visibility);\n     }\n+\n+    #[test]\n+    fn test_attr_prev_sibling() {\n+        check_prev_sibling(r\"#[attr] w$0\", ImmediatePrevSibling::Attribute);\n+    }\n }"}, {"sha": "2205603fa6620ea75979a2c03cb421c08300d01a", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -44,7 +44,17 @@ fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n }\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(ra_fixture);\n+    let base = r#\"#[rustc_builtin_macro]\n+pub macro Clone {}\n+enum Enum { Variant }\n+struct Struct {}\n+#[macro_export]\n+macro_rules! foo {}\n+mod bar {}\n+const CONST: () = ();\n+trait Trait {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "33b23b8b4c8ad65ec8e99e4ec74c9f67407a4717", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 100, "deletions": 41, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -9,7 +9,7 @@ fn in_mod_item_list() {\n     $0\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n@@ -28,22 +28,15 @@ fn in_mod_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-        \"#]],\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+        \"##]],\n     )\n }\n \n #[test]\n fn in_source_file_item_list() {\n     check(\n-        r#\"\n-enum Enum { Variant }\n-struct MyStruct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-\n-$0\"#,\n+        r#\"$0\"#,\n         expect![[r##\"\n             kw pub(crate)\n             kw pub\n@@ -71,18 +64,10 @@ $0\"#,\n }\n \n #[test]\n-fn in_qualified_path() {\n+fn in_item_list_after_attr() {\n     check(\n-        r#\"\n-enum Enum { Variant }\n-struct MyStruct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-\n-crate::$0\"#,\n-        expect![[r##\"\n+        r#\"#[attr] $0\"#,\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n@@ -101,24 +86,40 @@ crate::$0\"#,\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_qualified_path() {\n+    check(\n+        r#\"crate::$0\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw impl\n+            kw extern\n+            kw use\n+            kw trait\n+            kw static\n+            kw mod\n+            kw enum\n+            kw struct\n+            kw union\n             md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n         \"##]],\n     )\n }\n \n #[test]\n fn after_unsafe_token() {\n     check(\n-        r#\"\n-enum Enum { Variant }\n-struct MyStruct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-\n-unsafe $0\"#,\n+        r#\"unsafe $0\"#,\n         expect![[r#\"\n             kw fn\n             kw trait\n@@ -130,15 +131,7 @@ unsafe $0\"#,\n #[test]\n fn after_visibility() {\n     check(\n-        r#\"\n-enum Enum { Variant }\n-struct MyStruct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-\n-pub $0\"#,\n+        r#\"pub $0\"#,\n         expect![[r#\"\n             kw unsafe\n             kw fn\n@@ -154,3 +147,69 @@ pub $0\"#,\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn after_visibility_unsafe() {\n+    // FIXME this shouldn't show `impl`\n+    check(\n+        r#\"pub unsafe $0\"#,\n+        expect![[r#\"\n+            kw fn\n+            kw trait\n+            kw impl\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn in_impl_assoc_item_list() {\n+    check(\n+        r#\"impl Struct {\n+    $0\n+}\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            md bar\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_assoc_item_list_after_attr() {\n+    check(\n+        r#\"impl Struct {\n+    #[attr] $0\n+}\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_trait_assoc_item_list() {\n+    check(\n+        r\"trait Foo { $0 }\",\n+        expect![[r##\"\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            md bar\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+        \"##]],\n+    );\n+}"}]}