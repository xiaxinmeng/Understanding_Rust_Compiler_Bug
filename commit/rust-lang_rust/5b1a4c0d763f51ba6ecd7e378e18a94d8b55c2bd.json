{"sha": "5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "node_id": "C_kwDOAAsO6NoAKDViMWE0YzBkNzYzZjUxYmE2ZWNkN2UzNzhlMThhOTRkOGI1NWMyYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T16:17:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T16:17:12Z"}, "message": "Auto merge of #8884 - evantypanski:manual_range_contains_multiple, r=Manishearth\n\nFix `manual_range_contains` false negative with chains of `&&` and `||`\n\nFixes #8745\n\nSince the precedence for `&&` is the same as itself the HIR for a chain of `&&` ends up with a right skewed tree like:\n\n```\n     &&\n    /  \\\n  &&   c2\n /  \\\n... c1\n```\n\nSo only the leftmost `&&` was actually \"fully\" checked, the top level was just `c2` and `&&` so the `manual_range_contains` lint won't apply. This change makes it also check `c2` with `c1`.\n\nThere's a bit of a hacky solution in the [second commit](https://github.com/rust-lang/rust-clippy/commit/257f09776a9c68ac903d1f23b80c414b70de1185) to check if the number of open/closing parens in the snippet match. This is to prevent a case like `((x % 2 == 0) || (x < 0)) || (x >= 10)` from offering a suggestion like `((x % 2 == 0) || !(0..10).contains(&x)` which now won't compile.\n\nAny suggestions for that paren hack welcome, kinda new to working on this so not too sure about possible solutions :) it's weird because I don't know how else to check for parens in HIR considering they're removed when lowering AST.\n\nchangelog: Fix [`manual_range_contains`] false negative with chains of `&&` and `||`", "tree": {"sha": "4005824c214b484fb18af07ae8508e52e07f3ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4005824c214b484fb18af07ae8508e52e07f3ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "html_url": "https://github.com/rust-lang/rust/commit/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7000e758c19472bb1e642e5b4bd463a3b5c8ca68", "html_url": "https://github.com/rust-lang/rust/commit/7000e758c19472bb1e642e5b4bd463a3b5c8ca68"}, {"sha": "257f09776a9c68ac903d1f23b80c414b70de1185", "url": "https://api.github.com/repos/rust-lang/rust/commits/257f09776a9c68ac903d1f23b80c414b70de1185", "html_url": "https://github.com/rust-lang/rust/commit/257f09776a9c68ac903d1f23b80c414b70de1185"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "584b561dcf0ba7406e650368dd35a8920558dd11", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n             },\n             ExprKind::Binary(ref op, l, r) => {\n                 if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n-                    check_possible_range_contains(cx, op.node, l, r, expr);\n+                    check_possible_range_contains(cx, op.node, l, r, expr, expr.span);\n                 }\n             },\n             _ => {},\n@@ -213,12 +213,12 @@ fn check_possible_range_contains(\n     left: &Expr<'_>,\n     right: &Expr<'_>,\n     expr: &Expr<'_>,\n+    span: Span,\n ) {\n     if in_constant(cx, expr.hir_id) {\n         return;\n     }\n \n-    let span = expr.span;\n     let combine_and = match op {\n         BinOpKind::And | BinOpKind::BitAnd => true,\n         BinOpKind::Or | BinOpKind::BitOr => false,\n@@ -294,6 +294,20 @@ fn check_possible_range_contains(\n             );\n         }\n     }\n+\n+    // If the LHS is the same operator, we have to recurse to get the \"real\" RHS, since they have\n+    // the same operator precedence\n+    if_chain! {\n+        if let ExprKind::Binary(ref lhs_op, _left, new_lhs) = left.kind;\n+        if op == lhs_op.node;\n+        let new_span = Span::new(new_lhs.span.lo(), right.span.hi(), expr.span.ctxt(), expr.span.parent());\n+        if let Some(snip) = &snippet_opt(cx, new_span);\n+        // Do not continue if we have mismatched number of parens, otherwise the suggestion is wrong\n+        if snip.matches('(').count() == snip.matches(')').count();\n+        then {\n+            check_possible_range_contains(cx, op, new_lhs, right, expr, new_span);\n+        }\n+    }\n }\n \n struct RangeBounds<'a> {"}, {"sha": "85d021b2f25e2094435df55fc9e40bcaa39caa34", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "patch": "@@ -49,6 +49,13 @@ fn main() {\n     x >= 10 && x <= -10;\n     (-3. ..=3.).contains(&y);\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (0..=10).contains(&x) && (0..=10).contains(&z);\n+    !(0..10).contains(&x) || !(0..10).contains(&z);\n+    // Make sure operators in parens don't give a breaking suggestion\n+    ((x % 2 == 0) || (x < 0)) || (x >= 10);\n }\n \n // Fix #6373"}, {"sha": "9a7a75dc13254ed2883943eabbd0c350fd991b6a", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "patch": "@@ -49,6 +49,13 @@ fn main() {\n     x >= 10 && x <= -10;\n     y >= -3. && y <= 3.;\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+    (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+    // Make sure operators in parens don't give a breaking suggestion\n+    ((x % 2 == 0) || (x < 0)) || (x >= 10);\n }\n \n // Fix #6373"}, {"sha": "936859db5a1260ba217bcb91b31ef91e90fa9a2c", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=5b1a4c0d763f51ba6ecd7e378e18a94d8b55c2bd", "patch": "@@ -96,5 +96,29 @@ error: manual `RangeInclusive::contains` implementation\n LL |     y >= -3. && y <= 3.;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n \n-error: aborting due to 16 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:30\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&z)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:5\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&x)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:29\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&z)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:5\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&x)`\n+\n+error: aborting due to 20 previous errors\n "}]}