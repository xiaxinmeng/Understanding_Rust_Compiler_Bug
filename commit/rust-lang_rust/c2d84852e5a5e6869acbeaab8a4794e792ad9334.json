{"sha": "c2d84852e5a5e6869acbeaab8a4794e792ad9334", "node_id": "C_kwDOAAsO6NoAKGMyZDg0ODUyZTVhNWU2ODY5YWNiZWFhYjhhNDc5NGU3OTJhZDkzMzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-07T21:55:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T21:55:29Z"}, "message": "Rollup merge of #97845 - estebank:spancito, r=compiler-errors\n\nUse more targeted suggestion when confusing i8 with std::i8\n\nr? `@compiler-errors`", "tree": {"sha": "118c318e146fd8031f104400984c2b5c98289bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118c318e146fd8031f104400984c2b5c98289bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d84852e5a5e6869acbeaab8a4794e792ad9334", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJin8lRCRBK7hj4Ov3rIwAAKWcIAC+Q7sKXgU3Ye0GRROGfOnPh\nvGDpHIcUEMc8pRrgm+uWGZ5DpeF7deMVBPdo+JXDJfJfaPK7H/SuiDEv1fra2tst\ndBhAWoqTCx8qhzXgi1FwcRGyvcqFdL8zcVw3QIAhGD8Fd/euEXGMw146vWR6d8aK\nJQZvmIspHFl6ODjkSPtwMYHuImX273oZu5lMme7W6d8g4meoIXP5m04zRhQUOESf\n9C3jAdjnYpGWgsXPbJaxIa0yknzHFa0IcW1ZynsfPYiFOr8UPiQFv08ESqdY9fJu\n5uKYTDsTKQWxIoiUsN87wrlzHNi5GpldMixUSY79rVuwGmvqNSzZ24LBALRqcYw=\n=uf1+\n-----END PGP SIGNATURE-----\n", "payload": "tree 118c318e146fd8031f104400984c2b5c98289bcb\nparent 5870156d855564703353c48ed1d307dade31247c\nparent 8542dd02a8c00bba435efe0bed20bc9bb22e7ec5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654638929 +0200\ncommitter GitHub <noreply@github.com> 1654638929 +0200\n\nRollup merge of #97845 - estebank:spancito, r=compiler-errors\n\nUse more targeted suggestion when confusing i8 with std::i8\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d84852e5a5e6869acbeaab8a4794e792ad9334", "html_url": "https://github.com/rust-lang/rust/commit/c2d84852e5a5e6869acbeaab8a4794e792ad9334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d84852e5a5e6869acbeaab8a4794e792ad9334/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5870156d855564703353c48ed1d307dade31247c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5870156d855564703353c48ed1d307dade31247c", "html_url": "https://github.com/rust-lang/rust/commit/5870156d855564703353c48ed1d307dade31247c"}, {"sha": "8542dd02a8c00bba435efe0bed20bc9bb22e7ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8542dd02a8c00bba435efe0bed20bc9bb22e7ec5", "html_url": "https://github.com/rust-lang/rust/commit/8542dd02a8c00bba435efe0bed20bc9bb22e7ec5"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "b9f49c19465d5b14027835550cfc1511b56b810f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2d84852e5a5e6869acbeaab8a4794e792ad9334/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d84852e5a5e6869acbeaab8a4794e792ad9334/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c2d84852e5a5e6869acbeaab8a4794e792ad9334", "patch": "@@ -1577,18 +1577,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         name: Symbol,\n     ) -> ErrorGuaranteed {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n-        if let (true, Ok(snippet)) = (\n-            self.tcx()\n-                .resolutions(())\n-                .confused_type_with_std_module\n-                .keys()\n-                .any(|full_span| full_span.contains(span)),\n-            self.tcx().sess.source_map().span_to_snippet(span),\n-        ) {\n+        if self\n+            .tcx()\n+            .resolutions(())\n+            .confused_type_with_std_module\n+            .keys()\n+            .any(|full_span| full_span.contains(span))\n+        {\n             err.span_suggestion(\n-                span,\n+                span.shrink_to_lo(),\n                 \"you are looking for the module in `std`, not the primitive type\",\n-                format!(\"std::{}\", snippet),\n+                \"std::\".to_string(),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "4071c389266d3b1cfcb2bd8d0965e118eeadad65", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2d84852e5a5e6869acbeaab8a4794e792ad9334/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d84852e5a5e6869acbeaab8a4794e792ad9334/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c2d84852e5a5e6869acbeaab8a4794e792ad9334", "patch": "@@ -327,26 +327,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n                 if let Some(span) = tcx.resolutions(()).confused_type_with_std_module.get(&span) {\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*span) {\n-                        err.span_suggestion(\n-                            *span,\n-                            \"you are looking for the module in `std`, \\\n-                                     not the primitive type\",\n-                            format!(\"std::{}\", snippet),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n+                    err.span_suggestion(\n+                        span.shrink_to_lo(),\n+                        \"you are looking for the module in `std`, not the primitive type\",\n+                        \"std::\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n                 if let ty::RawPtr(_) = &actual.kind() {\n                     err.note(\n                         \"try using `<*const T>::as_ref()` to get a reference to the \\\n-                                      type behind the pointer: https://doc.rust-lang.org/std/\\\n-                                      primitive.pointer.html#method.as_ref\",\n+                         type behind the pointer: https://doc.rust-lang.org/std/\\\n+                         primitive.pointer.html#method.as_ref\",\n                     );\n                     err.note(\n-                        \"using `<*const T>::as_ref()` on a pointer \\\n-                                      which is unaligned or points to invalid \\\n-                                      or uninitialized memory is undefined behavior\",\n+                        \"using `<*const T>::as_ref()` on a pointer which is unaligned or points \\\n+                         to invalid or uninitialized memory is undefined behavior\",\n                     );\n                 }\n "}, {"sha": "2840fa121a75f630ab5a944d1c43a39662a4fe2e", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2d84852e5a5e6869acbeaab8a4794e792ad9334/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d84852e5a5e6869acbeaab8a4794e792ad9334/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=c2d84852e5a5e6869acbeaab8a4794e792ad9334", "patch": "@@ -7,7 +7,7 @@ LL |     let pi = f32::consts::PI;\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |     let pi = std::f32::consts::PI;\n-   |              ~~~~~~~~~~~~~~~~\n+   |              +++++\n \n error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n   --> $DIR/suggest-std-when-using-type.rs:5:14\n@@ -18,7 +18,7 @@ LL |         str::from_utf8(bytes)\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |         std::str::from_utf8(bytes)\n-   |         ~~~~~~~~~~~~~~~~~~~\n+   |         +++++\n \n error: aborting due to 2 previous errors\n "}]}