{"sha": "cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "node_id": "C_kwDOAAsO6NoAKGNkMWQwYmMyMGNkMmMxOGVjODQ0ZjY0NDczOTZkYWRmOTBiNzYyZTk", "commit": {"author": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-06T11:49:07Z"}, "committer": {"name": "Tim Neumann", "email": "timnn@google.com", "date": "2023-01-16T18:33:25Z"}, "message": "ui tests: Remap test base directory by default.", "tree": {"sha": "618cb98dc47357fe25b07a9dda39d6590c650558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618cb98dc47357fe25b07a9dda39d6590c650558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "html_url": "https://github.com/rust-lang/rust/commit/cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/10fe7bfc7394b32471f1bad199fd9f8300cd80c2", "html_url": "https://github.com/rust-lang/rust/commit/10fe7bfc7394b32471f1bad199fd9f8300cd80c2"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "899f068bd3d041b993e45d4f25da1751c166fc1b", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -278,6 +278,9 @@ impl TestProps {\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`.\n     fn load_from(&mut self, testfile: &Path, cfg: Option<&str>, config: &Config) {\n+        // Mode-dependent defaults.\n+        self.remap_src_base = config.mode == Mode::Ui && !config.suite.contains(\"rustdoc\");\n+\n         let mut has_edition = false;\n         if !testfile.is_dir() {\n             let file = File::open(testfile).unwrap();"}, {"sha": "bdfd9628c48019966b85e7e894fb7d7a6003a4a4", "filename": "tests/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -2,6 +2,7 @@\n // Testing that a librustc_ast can parse modules with canonicalized base path\n // ignore-cross-compile\n // ignore-remote\n+// no-remap-src-base: Reading `file!()` (expectedly) fails when enabled.\n \n #![feature(rustc_private)]\n "}, {"sha": "f9bb7bf89870a6b3444aa6cdfdd76512aca2eda3", "filename": "tests/ui/errors/auxiliary/remapped_dep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,3 +1,4 @@\n // compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n+// no-remap-src-base: Manually remap, so the remapped path remains in .stderr file.\n \n pub struct SomeStruct {} // This line should be show as part of the error."}, {"sha": "51e3b776cb2c08b91e283da11033cae05265eec3", "filename": "tests/ui/errors/remap-path-prefix-reverse.local-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,10 +1,10 @@\n error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n-  --> $DIR/remap-path-prefix-reverse.rs:22:13\n+  --> $DIR/remap-path-prefix-reverse.rs:16:13\n    |\n-LL |     let _ = remapped_dep::SomeStruct;\n+LL |     let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n    |\n-  ::: remapped-aux/remapped_dep.rs:3:1\n+  ::: remapped-aux/remapped_dep.rs:4:1\n    |\n LL | pub struct SomeStruct {} // This line should be show as part of the error.\n    | --------------------- `remapped_dep::SomeStruct` defined here"}, {"sha": "51e3b776cb2c08b91e283da11033cae05265eec3", "filename": "tests/ui/errors/remap-path-prefix-reverse.remapped-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,10 +1,10 @@\n error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n-  --> remapped/errors/remap-path-prefix-reverse.rs:22:13\n+  --> $DIR/remap-path-prefix-reverse.rs:16:13\n    |\n-LL |     let _ = remapped_dep::SomeStruct;\n+LL |     let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n    |\n-  ::: remapped-aux/remapped_dep.rs:3:1\n+  ::: remapped-aux/remapped_dep.rs:4:1\n    |\n LL | pub struct SomeStruct {} // This line should be show as part of the error.\n    | --------------------- `remapped_dep::SomeStruct` defined here"}, {"sha": "71c80063c320fb5275c28d86991dc39553920548", "filename": "tests/ui/errors/remap-path-prefix-reverse.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,15 +1,9 @@\n // aux-build:remapped_dep.rs\n // compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n \n-// The remapped paths are not normalized by compiletest.\n-// normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\"\n-\n // revisions: local-self remapped-self\n-// [remapped-self]compile-flags: --remap-path-prefix={{src-base}}=remapped\n-\n-// The paths from `remapped-self` aren't recognized by compiletest, so we\n-// cannot use line-specific patterns for the actual error.\n-// error-pattern: E0423\n+// [local-self] no-remap-src-base: The hack should work regardless of remapping.\n+// [remapped-self] remap-src-base\n \n // Verify that the expected source code is shown.\n // error-pattern: pub struct SomeStruct {} // This line should be show\n@@ -19,5 +13,5 @@ extern crate remapped_dep;\n fn main() {\n     // The actual error is irrelevant. The important part it that is should show\n     // a snippet of the dependency's source.\n-    let _ = remapped_dep::SomeStruct;\n+    let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n }"}, {"sha": "393b8e22f1c1dc8c9afe72fc5b46603bfb9ba46e", "filename": "tests/ui/errors/remap-path-prefix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --remap-path-prefix={{src-base}}=remapped\n+// no-remap-src-base: Manually remap, so the remapped path remains in .stderr file.\n \n // The remapped paths are not normalized by compiletest.\n // normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\""}, {"sha": "62dbd4b8881a38a5de6165810266f4b57cda2da3", "filename": "tests/ui/errors/remap-path-prefix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `ferris` in this scope\n-  --> remapped/errors/remap-path-prefix.rs:15:5\n+  --> remapped/errors/remap-path-prefix.rs:16:5\n    |\n LL |     ferris\n    |     ^^^^^^ not found in this scope"}, {"sha": "700aac41c449a10890defc06ac3a17341ac3b100", "filename": "tests/ui/proc-macro/expand-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,4 +1,6 @@\n // aux-build:expand-expr.rs\n+// no-remap-src-base: check_expand_expr_file!() fails when enabled.\n+\n #![feature(concat_bytes)]\n extern crate expand_expr;\n \n@@ -8,7 +10,7 @@ use expand_expr::{\n \n // Check builtin macros can be expanded.\n \n-expand_expr_is!(11u32, line!());\n+expand_expr_is!(13u32, line!());\n expand_expr_is!(24u32, column!());\n \n expand_expr_is!(\"Hello, World!\", concat!(\"Hello, \", \"World\", \"!\"));"}, {"sha": "df61e9972896b05734f2641b013bdbad66dc9539", "filename": "tests/ui/proc-macro/expand-expr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,29 +1,29 @@\n error: expected one of `.`, `?`, or an operator, found `;`\n-  --> $DIR/expand-expr.rs:106:27\n+  --> $DIR/expand-expr.rs:108:27\n    |\n LL | expand_expr_fail!(\"string\"; hello);\n    |                           ^ expected one of `.`, `?`, or an operator\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:109:19\n+  --> $DIR/expand-expr.rs:111:19\n    |\n LL | expand_expr_fail!($);\n    |                   ^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:38:23\n+  --> $DIR/expand-expr.rs:40:23\n    |\n LL |     ($($t:tt)*) => { $($t)* };\n    |                       ^^^^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:111:28\n+  --> $DIR/expand-expr.rs:113:28\n    |\n LL | expand_expr_fail!(echo_pm!($));\n    |                            ^ expected expression\n \n error: macro expansion ignores token `hello` and any following\n-  --> $DIR/expand-expr.rs:115:47\n+  --> $DIR/expand-expr.rs:117:47\n    |\n LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello));\n    |                           --------------------^^^^^- caused by the macro expansion here\n@@ -35,7 +35,7 @@ LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello););\n    |                                                     +\n \n error: macro expansion ignores token `;` and any following\n-  --> $DIR/expand-expr.rs:116:44\n+  --> $DIR/expand-expr.rs:118:44\n    |\n LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello));\n    |                           -----------------^------- caused by the macro expansion here\n@@ -47,7 +47,7 @@ LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello););\n    |                                                    +\n \n error: recursion limit reached while expanding `recursive_expand!`\n-  --> $DIR/expand-expr.rs:124:16\n+  --> $DIR/expand-expr.rs:126:16\n    |\n LL | const _: u32 = recursive_expand!();\n    |                ^^^^^^^^^^^^^^^^^^^"}, {"sha": "873054927c96279723f7b87ae31a908372109ca1", "filename": "tests/ui/proc-macro/pretty-print-hack-show.remapped.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,5 +1,5 @@\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: `#[deny(proc_macro_back_compat)]` on by default\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ error: aborting due to 8 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,7 +95,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -131,7 +131,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -167,7 +167,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3d793d2a0145c984f27fa8092f21df04c2ba724e", "filename": "tests/ui/proc-macro/pretty-print-hack-show.remapped.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -3,42 +3,42 @@ PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:1: 4:5 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:1: 4:5 (#0),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6: 4:35 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6: 4:35 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:13:5: 13:10 (#0),\n+                span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:13:5: 13:10 (#0),\n             },\n         ],\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:36: 14:2 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:36: 14:2 (#0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum ProceduralMasqueradeDummyType { Input, }\n PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:1: 4:5 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:1: 4:5 (#0),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6: 4:35 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6: 4:35 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:13:5: 13:10 (#0),\n+                span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:13:5: 13:10 (#0),\n             },\n         ],\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:36: 14:2 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:36: 14:2 (#0),\n     },\n ]"}, {"sha": "24a389c450ea01d176cab209eb54b3cf4430c8cf", "filename": "tests/ui/proc-macro/pretty-print-hack-show.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1d0bc20cd2c18ec844f6447396dadf90b762e9/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs?ref=cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "patch": "@@ -1,11 +1,8 @@\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n // revisions: local remapped\n-// [remapped]compile-flags: --remap-path-prefix={{src-base}}=remapped\n-\n-// The remapped paths are not normalized by compiletest.\n-// normalize-stdout-test: \"\\\\(proc-macro|pretty-print-hack)\" -> \"/$1\"\n-// normalize-stderr-test: \"\\\\(proc-macro|pretty-print-hack)\" -> \"/$1\"\n+// [local] no-remap-src-base: The hack should work regardless of remapping.\n+// [remapped] remap-src-base\n \n #![no_std] // Don't load unnecessary hygiene information from std\n extern crate std;"}]}