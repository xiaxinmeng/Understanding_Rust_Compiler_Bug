{"sha": "a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGNmZDA5MzZhZmIyNGZkM2I0MTI3ZTllMGFmNWRhMTBmMGRjOTY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-12T19:10:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-12T19:10:33Z"}, "message": "Rollup merge of #38202 - michaelwoerister:closure-ich-test, r=nikomatsakis\n\nSome incr. comp. hash tests\n\nr? @nikomatsakis", "tree": {"sha": "a7ac63ba8a274bf83046c5bbafa2025250e80511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ac63ba8a274bf83046c5bbafa2025250e80511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "html_url": "https://github.com/rust-lang/rust/commit/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e425b7b4ba77655032249027f3b2f969d154c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e425b7b4ba77655032249027f3b2f969d154c48", "html_url": "https://github.com/rust-lang/rust/commit/5e425b7b4ba77655032249027f3b2f969d154c48"}, {"sha": "9ccd5c5739e3b188a6c82b709fbb4adbd73ba331", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccd5c5739e3b188a6c82b709fbb4adbd73ba331", "html_url": "https://github.com/rust-lang/rust/commit/9ccd5c5739e3b188a6c82b709fbb4adbd73ba331"}], "stats": {"total": 786, "additions": 786, "deletions": 0}, "files": [{"sha": "38fe5cdffebd0a7f2bc0c15aa6ca8768c9dae688", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for closure expression.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change closure body ---------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_closure_body() {\n+    let _ = || 1u32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_closure_body() {\n+    let _ = || 3u32;\n+}\n+\n+\n+\n+// Add parameter ---------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_parameter() {\n+    let x = 0u32;\n+    let _ = || x + 1;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_parameter() {\n+    let x = 0u32;\n+    let _ = |x: u32| x + 1;\n+}\n+\n+\n+\n+// Change parameter pattern ----------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_parameter_pattern() {\n+    let _ = |x: &u32| x;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_parameter_pattern() {\n+    let _ = |&x: &u32| x;\n+}\n+\n+\n+\n+// Add `move` to closure -------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_move() {\n+    let _ = || 1;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_move() {\n+    let _ = move || 1;\n+}\n+\n+\n+\n+// Add type ascription to parameter --------------------------------------------\n+#[cfg(cfail1)]\n+fn add_type_ascription_to_parameter() {\n+    let closure = |x| x + 1u32;\n+    let _: u32 = closure(1);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_type_ascription_to_parameter() {\n+    let closure = |x: u32| x + 1u32;\n+    let _: u32 = closure(1);\n+}\n+\n+\n+\n+// Change parameter type -------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_parameter_type() {\n+    let closure = |x: u32| (x as u64) + 1;\n+    let _ = closure(1);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_parameter_type() {\n+    let closure = |x: u16| (x as u64) + 1;\n+    let _ = closure(1);\n+}"}, {"sha": "7f991b30fc4924d98f91b1de001333d5834c8c5f", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "added", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "patch": "@@ -0,0 +1,387 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct constructor expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+enum Enum {\n+    Struct {\n+        x: i32,\n+        y: i64,\n+        z: i16,\n+    },\n+    Tuple(i32, i64, i16)\n+}\n+\n+// Change field value (struct-like) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 0,\n+        y: 2,\n+        z: 2,\n+    }\n+}\n+\n+\n+\n+// Change field order (struct-like) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_order_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_order_struct_like() -> Enum {\n+    Enum::Struct {\n+        y: 4,\n+        x: 3,\n+        z: 5,\n+    }\n+}\n+\n+\n+enum Enum2 {\n+    Struct {\n+        x: i8,\n+        y: i8,\n+        z: i8,\n+    },\n+    Struct2 {\n+        x: i8,\n+        y: i8,\n+        z: i8,\n+    },\n+    Tuple(u16, u16, u16),\n+    Tuple2(u64, u64, u64),\n+}\n+\n+// Change constructor path (struct-like) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_struct_like() {\n+    let _ = Enum::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_struct_like() {\n+    let _ = Enum2::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+\n+// Change variant (regular struct) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_struct_like() {\n+    let _ = Enum2::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_struct_like() {\n+    let _ = Enum2::Struct2 {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+// Change constructor path indirectly (struct-like) -------------------------\n+mod change_constructor_path_indirectly_struct_like {\n+    #[cfg(cfail1)]\n+    use super::Enum as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::Struct {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+// Change constructor variant indirectly (struct-like) ---------------------------\n+mod change_constructor_variant_indirectly_struct_like {\n+    use super::Enum2;\n+    #[cfg(cfail1)]\n+    use super::Enum2::Struct as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2::Struct2 as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Enum2 {\n+        Variant {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+// Change field value (tuple-like) -------------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_tuple_like() -> Enum {\n+    Enum::Tuple(0, 1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_tuple_like() -> Enum {\n+    Enum::Tuple(0, 1, 3)\n+}\n+\n+\n+\n+// Change constructor path (tuple-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_tuple_like() {\n+    let _ = Enum::Tuple(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_tuple_like() {\n+    let _ = Enum2::Tuple(0, 1, 2);\n+}\n+\n+\n+\n+// Change constructor variant (tuple-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_tuple_like() {\n+    let _ = Enum2::Tuple(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_tuple_like() {\n+    let _ = Enum2::Tuple2(0, 1, 2);\n+}\n+\n+\n+// Change constructor path indirectly (tuple-like) ---------------------------\n+mod change_constructor_path_indirectly_tuple_like {\n+    #[cfg(cfail1)]\n+    use super::Enum as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::Tuple(0, 1, 2)\n+    }\n+}\n+\n+\n+\n+// Change constructor variant indirectly (tuple-like) ---------------------------\n+mod change_constructor_variant_indirectly_tuple_like {\n+    use super::Enum2;\n+    #[cfg(cfail1)]\n+    use super::Enum2::Tuple as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2::Tuple2 as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Enum2 {\n+        Variant(0, 1, 2)\n+    }\n+}\n+\n+\n+enum Clike {\n+    A,\n+    B,\n+    C\n+}\n+\n+enum Clike2 {\n+    B,\n+    C,\n+    D\n+}\n+\n+// Change constructor path (C-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_c_like() {\n+    let _ = Clike::B;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_c_like() {\n+    let _ = Clike2::B;\n+}\n+\n+\n+\n+// Change constructor variant (C-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_c_like() {\n+    let _ = Clike::A;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_c_like() {\n+    let _ = Clike::C;\n+}\n+\n+\n+// Change constructor path indirectly (C-like) ---------------------------\n+mod change_constructor_path_indirectly_c_like {\n+    #[cfg(cfail1)]\n+    use super::Clike as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Clike2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::B\n+    }\n+}\n+\n+\n+\n+// Change constructor variant indirectly (C-like) ---------------------------\n+mod change_constructor_variant_indirectly_c_like {\n+    use super::Clike;\n+    #[cfg(cfail1)]\n+    use super::Clike::A as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Clike::B as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Clike {\n+        Variant\n+    }\n+}"}, {"sha": "082badacc6ccd6143429d77a7164afe9c21b8479", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+// Case 1: The function body is not exported to metadata. If the body changes,\n+//         the hash of the HirBody node should change, but not the hash of\n+//         either the Hir or the Metadata node.\n+\n+#[cfg(cfail1)]\n+pub fn body_not_exported_to_metadata() -> u32 {\n+    1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn body_not_exported_to_metadata() -> u32 {\n+    2\n+}\n+\n+\n+\n+// Case 2: The function body *is* exported to metadata because the function is\n+//         marked as #[inline]. Only the hash of the Hir depnode should be\n+//         unaffected by a change to the body.\n+\n+#[cfg(cfail1)]\n+#[inline]\n+pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n+    1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline]\n+pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n+    2\n+}\n+\n+\n+\n+// Case 2: The function body *is* exported to metadata because the function is\n+//         generic. Only the hash of the Hir depnode should be\n+//         unaffected by a change to the body.\n+\n+#[cfg(cfail1)]\n+#[inline]\n+pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n+    1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline]\n+pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n+    2\n+}\n+"}, {"sha": "bb31982d93f2139f5c5fc608452d02a50f290690", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "patch": "@@ -0,0 +1,157 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for closure expression.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+#![feature(inclusive_range_syntax)]\n+\n+// Change simple index ---------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_simple_index(slice: &[u32]) -> u32 {\n+    slice[3]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_simple_index(slice: &[u32]) -> u32 {\n+    slice[4]\n+}\n+\n+\n+\n+// Change lower bound ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_lower_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..5]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_lower_bound(slice: &[u32]) -> &[u32] {\n+    &slice[2..5]\n+}\n+\n+\n+\n+// Change upper bound ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_upper_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..5]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_upper_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..7]\n+}\n+\n+\n+\n+// Add lower bound -------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_lower_bound(slice: &[u32]) -> &[u32] {\n+    &slice[..4]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_lower_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..4]\n+}\n+\n+\n+\n+// Add upper bound -------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_upper_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_upper_bound(slice: &[u32]) -> &[u32] {\n+    &slice[3..7]\n+}\n+\n+\n+\n+// Change mutability -----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_mutability(slice: &mut [u32]) -> u32 {\n+    (&mut slice[3..5])[0]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_mutability(slice: &mut [u32]) -> u32 {\n+    (&slice[3..5])[0]\n+}\n+\n+\n+\n+// Exclusive to inclusive range ------------------------------------------------\n+#[cfg(cfail1)]\n+fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n+    &slice[3..7]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n+    &slice[3...7]\n+}"}, {"sha": "0e23d953baf2de48d86e6dbca9d8eb4dfd9544a1", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=a9dcfd0936afb24fd3b4127e9e0af5da10f0dc96", "patch": "@@ -202,6 +202,12 @@ mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(not(cfail1))]\n     use super::RegularStruct2 as Struct;\n \n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Struct {\n         Struct {\n             x: 0,\n@@ -262,6 +268,12 @@ mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(not(cfail1))]\n     use super::TupleStruct2 as Struct;\n \n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Struct {\n         Struct(0, 1, 2)\n     }"}]}