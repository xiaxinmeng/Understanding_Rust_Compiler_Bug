{"sha": "656e95211edf26bd82bd66f53ca3bcdfb7296e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NmU5NTIxMWVkZjI2YmQ4MmJkNjZmNTNjYTNiY2RmYjcyOTZlODE=", "commit": {"author": {"name": "Gabriel Valfridsson", "email": "gabriel.valfridsson@gmail.com", "date": "2020-06-16T20:26:33Z"}, "committer": {"name": "Gabriel Valfridsson", "email": "gabriel.valfridsson@gmail.com", "date": "2020-06-16T22:00:43Z"}, "message": "Warnings as hint or info", "tree": {"sha": "5770b5e07ac0906acfe80b0c882ec4aa095e958d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5770b5e07ac0906acfe80b0c882ec4aa095e958d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656e95211edf26bd82bd66f53ca3bcdfb7296e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656e95211edf26bd82bd66f53ca3bcdfb7296e81", "html_url": "https://github.com/rust-lang/rust/commit/656e95211edf26bd82bd66f53ca3bcdfb7296e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656e95211edf26bd82bd66f53ca3bcdfb7296e81/comments", "author": {"login": "GabbeV", "id": 13839236, "node_id": "MDQ6VXNlcjEzODM5MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/13839236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabbeV", "html_url": "https://github.com/GabbeV", "followers_url": "https://api.github.com/users/GabbeV/followers", "following_url": "https://api.github.com/users/GabbeV/following{/other_user}", "gists_url": "https://api.github.com/users/GabbeV/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabbeV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabbeV/subscriptions", "organizations_url": "https://api.github.com/users/GabbeV/orgs", "repos_url": "https://api.github.com/users/GabbeV/repos", "events_url": "https://api.github.com/users/GabbeV/events{/privacy}", "received_events_url": "https://api.github.com/users/GabbeV/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GabbeV", "id": 13839236, "node_id": "MDQ6VXNlcjEzODM5MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/13839236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabbeV", "html_url": "https://github.com/GabbeV", "followers_url": "https://api.github.com/users/GabbeV/followers", "following_url": "https://api.github.com/users/GabbeV/following{/other_user}", "gists_url": "https://api.github.com/users/GabbeV/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabbeV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabbeV/subscriptions", "organizations_url": "https://api.github.com/users/GabbeV/orgs", "repos_url": "https://api.github.com/users/GabbeV/repos", "events_url": "https://api.github.com/users/GabbeV/events{/privacy}", "received_events_url": "https://api.github.com/users/GabbeV/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7974e5fb921236fea74731d8edde518f08e73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7974e5fb921236fea74731d8edde518f08e73a", "html_url": "https://github.com/rust-lang/rust/commit/5d7974e5fb921236fea74731d8edde518f08e73a"}], "stats": {"total": 415, "additions": 402, "deletions": 13}, "files": [{"sha": "0df7427cb974100bca1962586b85e16105a090aa", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -9,6 +9,7 @@\n \n use std::{ffi::OsString, path::PathBuf};\n \n+use crate::diagnostics::DiagnosticsConfig;\n use lsp_types::ClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n@@ -20,6 +21,7 @@ pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n     pub publish_diagnostics: bool,\n+    pub diagnostics: DiagnosticsConfig,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<(PathBuf, Vec<OsString>)>,\n     pub files: FilesConfig,\n@@ -136,6 +138,7 @@ impl Default for Config {\n \n             with_sysroot: true,\n             publish_diagnostics: true,\n+            diagnostics: DiagnosticsConfig::default(),\n             lru_capacity: None,\n             proc_macro_srv: None,\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n@@ -184,6 +187,8 @@ impl Config {\n \n         set(value, \"/withSysroot\", &mut self.with_sysroot);\n         set(value, \"/diagnostics/enable\", &mut self.publish_diagnostics);\n+        set(value, \"/diagnostics/warningsAsInfo\", &mut self.diagnostics.warnings_as_info);\n+        set(value, \"/diagnostics/warningsAsHint\", &mut self.diagnostics.warnings_as_hint);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n         self.files.watcher = match get(value, \"/files/watcher\") {\n             Some(\"client\") => FilesWatcher::Client,"}, {"sha": "290609e7f9b45736ce911f7c5cf1364ff351887b", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -10,6 +10,12 @@ use crate::lsp_ext;\n \n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n \n+#[derive(Debug, Default, Clone)]\n+pub struct DiagnosticsConfig {\n+    pub warnings_as_info: Vec<String>,\n+    pub warnings_as_hint: Vec<String>,\n+}\n+\n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticCollection {\n     pub native: HashMap<FileId, Vec<Diagnostic>>,"}, {"sha": "f0273315e932706b572d3b667faacb8ecdd929a3", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_hint.snap?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -0,0 +1,86 @@\n+---\n+source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n+expression: diag\n+---\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/driver/subcommand/repl.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+            related_information: None,\n+            tags: Some(\n+                [\n+                    Unnecessary,\n+                ],\n+            ),\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                id: None,\n+                group: None,\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                command: None,\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/driver/subcommand/repl.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+            },\n+        ],\n+    },\n+]"}, {"sha": "85fd050fd7d59a35d6b765ae6cea95cd22589e3a", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable_as_info.snap?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -0,0 +1,86 @@\n+---\n+source: crates/rust-analyzer/src/diagnostics/to_proto.rs\n+expression: diag\n+---\n+[\n+    MappedRustDiagnostic {\n+        location: Location {\n+            uri: \"file:///test/driver/subcommand/repl.rs\",\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Information,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+            related_information: None,\n+            tags: Some(\n+                [\n+                    Unnecessary,\n+                ],\n+            ),\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                id: None,\n+                group: None,\n+                kind: Some(\n+                    \"quickfix\",\n+                ),\n+                command: None,\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                \"file:///test/driver/subcommand/repl.rs\": [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+            },\n+        ],\n+    },\n+]"}, {"sha": "ba74f15f3c055a3da7fa292b4ac1c8a489888da9", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 200, "deletions": 13, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -9,14 +9,24 @@ use lsp_types::{\n use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n use stdx::format_to;\n \n+use super::DiagnosticsConfig;\n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n-/// Converts a Rust level string to a LSP severity\n-fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n-    let res = match val {\n+/// Determines the LSP severity from a diagnostic\n+fn map_diagnostic_to_severity(\n+    config: &DiagnosticsConfig,\n+    val: &ra_flycheck::Diagnostic,\n+) -> Option<DiagnosticSeverity> {\n+    let res = match val.level {\n         DiagnosticLevel::Ice => DiagnosticSeverity::Error,\n         DiagnosticLevel::Error => DiagnosticSeverity::Error,\n-        DiagnosticLevel::Warning => DiagnosticSeverity::Warning,\n+        DiagnosticLevel::Warning => match &val.code {\n+            Some(code) if config.warnings_as_hint.contains(&code.code) => DiagnosticSeverity::Hint,\n+            Some(code) if config.warnings_as_info.contains(&code.code) => {\n+                DiagnosticSeverity::Information\n+            }\n+            _ => DiagnosticSeverity::Warning,\n+        },\n         DiagnosticLevel::Note => DiagnosticSeverity::Information,\n         DiagnosticLevel::Help => DiagnosticSeverity::Hint,\n         DiagnosticLevel::Unknown => return None,\n@@ -172,6 +182,7 @@ pub(crate) struct MappedRustDiagnostic {\n ///\n /// If the diagnostic has no primary span this will return `None`\n pub(crate) fn map_rust_diagnostic_to_lsp(\n+    config: &DiagnosticsConfig,\n     rd: &ra_flycheck::Diagnostic,\n     workspace_root: &Path,\n ) -> Vec<MappedRustDiagnostic> {\n@@ -180,7 +191,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         return Vec::new();\n     }\n \n-    let severity = map_level_to_severity(rd.level);\n+    let severity = map_diagnostic_to_severity(config, rd);\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());\n@@ -328,7 +339,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -410,7 +421,183 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    #[cfg(not(windows))]\n+    fn snap_rustc_unused_variable_as_info() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+    }\"##,\n+        );\n+\n+        let config = DiagnosticsConfig {\n+            warnings_as_info: vec![\"unused_variables\".to_string()],\n+            ..DiagnosticsConfig::default()\n+        };\n+\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    #[cfg(not(windows))]\n+    fn snap_rustc_unused_variable_as_hint() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+    }\"##,\n+        );\n+\n+        let config = DiagnosticsConfig {\n+            warnings_as_hint: vec![\"unused_variables\".to_string()],\n+            ..DiagnosticsConfig::default()\n+        };\n+\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&config, &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -534,7 +721,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -654,7 +841,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -697,7 +884,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -968,7 +1155,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1197,7 +1384,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1330,7 +1517,7 @@ mod tests {\n         );\n \n         let workspace_root = Path::new(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n+        let diag = map_rust_diagnostic_to_lsp(&DiagnosticsConfig::default(), &diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n }"}, {"sha": "534d9f2231ea147b6da4c66234d412beded5d27a", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -734,6 +734,7 @@ fn on_check_task(\n \n         CheckTask::AddDiagnostic { workspace_root, diagnostic } => {\n             let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n+                &global_state.config.diagnostics,\n                 &diagnostic,\n                 &workspace_root,\n             );"}, {"sha": "3acc375f6723edfbd799ed315d3ea55e915ea696", "filename": "editors/code/package.json", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/656e95211edf26bd82bd66f53ca3bcdfb7296e81/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/656e95211edf26bd82bd66f53ca3bcdfb7296e81/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=656e95211edf26bd82bd66f53ca3bcdfb7296e81", "patch": "@@ -525,6 +525,24 @@\n                     \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n+                },\n+                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"description\": \"List of warnings that should be displayed with info severity.\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n+                    \"default\": []\n+                },\n+                \"rust-analyzer.diagnostics.warningsAsHint\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"description\": \"List of warnings warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in te problems panel.\",\n+                    \"default\": []\n                 }\n             }\n         },"}]}