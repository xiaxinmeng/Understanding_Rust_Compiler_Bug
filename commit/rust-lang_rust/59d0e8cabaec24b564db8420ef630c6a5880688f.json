{"sha": "59d0e8cabaec24b564db8420ef630c6a5880688f", "node_id": "C_kwDOAAsO6NoAKDU5ZDBlOGNhYmFlYzI0YjU2NGRiODQyMGVmNjMwYzZhNTg4MDY4OGY", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T18:25:03Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T18:25:03Z"}, "message": "and a few more from other dirs", "tree": {"sha": "c85177a1d2de5fde89fcebbca5b834df1de22593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85177a1d2de5fde89fcebbca5b834df1de22593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d0e8cabaec24b564db8420ef630c6a5880688f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d0e8cabaec24b564db8420ef630c6a5880688f", "html_url": "https://github.com/rust-lang/rust/commit/59d0e8cabaec24b564db8420ef630c6a5880688f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d0e8cabaec24b564db8420ef630c6a5880688f/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6d1267c45d0f3668b730c2bdb3e087def6118a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d1267c45d0f3668b730c2bdb3e087def6118a", "html_url": "https://github.com/rust-lang/rust/commit/cb6d1267c45d0f3668b730c2bdb3e087def6118a"}], "stats": {"total": 96, "additions": 46, "deletions": 50}, "files": [{"sha": "d3e036692040f6f03294892956ef1de9cd3e812f", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -41,7 +41,7 @@ fn main() {\n                 matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n-                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+                Err(e) => eprintln!(\"Unable to create lint: {e}\"),\n             }\n         },\n         Some((\"setup\", sub_command)) => match sub_command.subcommand() {"}, {"sha": "d9b22664fd25b5ce5d5d7956a6142022ddf597be", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -131,12 +131,12 @@ pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'s\n         match attr.style {\n             ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n             ast::AttrStyle::Inner => {\n-                sess.struct_span_err(attr.span, &format!(\"`{}` is defined multiple times\", name))\n+                sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n                     .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n                     .emit();\n             },\n             ast::AttrStyle::Outer => {\n-                sess.span_err(attr.span, &format!(\"`{}` cannot be an outer attribute\", name));\n+                sess.span_err(attr.span, &format!(\"`{name}` cannot be an outer attribute\"));\n             },\n         }\n     }"}, {"sha": "12e53e07c97c96df6a42df13bf1c48ce712a93b0", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -18,12 +18,11 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n             diag.help(&format!(\n-                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n+                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{lint}\",\n                 &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                     // extract just major + minor version and ignore patch versions\n                     format!(\"rust-{}\", n.rsplit_once('.').unwrap().1)\n-                }),\n-                lint\n+                })\n             ));\n         }\n     }"}, {"sha": "f3c3fd73f3939c517f4a15f13c0712610dd73302", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -121,7 +121,7 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n         return Some(version);\n     } else if let Some(sess) = sess {\n         if let Some(span) = span {\n-            sess.span_err(span, &format!(\"`{}` is not a valid Rust version\", msrv));\n+            sess.span_err(span, &format!(\"`{msrv}` is not a valid Rust version\"));\n         }\n     }\n     None"}, {"sha": "b9e6462a55efc185bfacb8c61ba0bbde79bc048d", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -392,7 +392,7 @@ impl FormatString {\n         unescape_literal(inner, mode, &mut |_, ch| match ch {\n             Ok(ch) => unescaped.push(ch),\n             Err(e) if !e.is_fatal() => (),\n-            Err(e) => panic!(\"{:?}\", e),\n+            Err(e) => panic!(\"{e:?}\"),\n         });\n \n         let mut parts = Vec::new();"}, {"sha": "efa7aaa40ee2ca0223d3c5a338365d6a0cd99bab", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -33,10 +33,10 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {predicate:#?}\"),\n             }\n         }\n         match predicates.parent {\n@@ -315,8 +315,7 @@ fn check_terminator<'a, 'tcx>(\n                         span,\n                         format!(\n                             \"can only call other `const fn` within a `const fn`, \\\n-                             but `{:?}` is not stable as `const fn`\",\n-                            func,\n+                             but `{func:?}` is not stable as `const fn`\",\n                         )\n                         .into(),\n                     ));"}, {"sha": "64c3f70efa5d75e80d775f4a02a91f5d129a8c7b", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -25,11 +25,11 @@ pub fn expr_block<'a, T: LintContext>(\n     if expr.span.from_expansion() {\n         Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n     } else if let ExprKind::Block(_, _) = expr.kind {\n-        Cow::Owned(format!(\"{}{}\", code, string))\n+        Cow::Owned(format!(\"{code}{string}\"))\n     } else if string.is_empty() {\n-        Cow::Owned(format!(\"{{ {} }}\", code))\n+        Cow::Owned(format!(\"{{ {code} }}\"))\n     } else {\n-        Cow::Owned(format!(\"{{\\n{};\\n{}\\n}}\", code, string))\n+        Cow::Owned(format!(\"{{\\n{code};\\n{string}\\n}}\"))\n     }\n }\n \n@@ -466,7 +466,7 @@ mod test {\n     #[test]\n     fn test_without_block_comments_lines_without_block_comments() {\n         let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n-        println!(\"result: {:?}\", result);\n+        println!(\"result: {result:?}\");\n         assert!(result.is_empty());\n \n         let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);"}, {"sha": "00a2409996adc64fc13be63b8673c11b79e25832", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -310,19 +310,19 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to transform suggestion into a return call\n     pub fn make_return(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"return {}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"return {self}\")))\n     }\n \n     /// Convenience method to transform suggestion into a block\n     /// where the suggestion is a trailing expression\n     pub fn blockify(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"{{ {} }}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"{{ {self} }}\")))\n     }\n \n     /// Convenience method to prefix the expression with the `async` keyword.\n     /// Can be used after `blockify` to create an async block.\n     pub fn asyncify(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"async {}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"async {self}\")))\n     }\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n@@ -346,12 +346,12 @@ impl<'a> Sugg<'a> {\n                 if has_enclosing_paren(&sugg) {\n                     Sugg::MaybeParen(sugg)\n                 } else {\n-                    Sugg::NonParen(format!(\"({})\", sugg).into())\n+                    Sugg::NonParen(format!(\"({sugg})\").into())\n                 }\n             },\n             Sugg::BinOp(op, lhs, rhs) => {\n                 let sugg = binop_to_string(op, &lhs, &rhs);\n-                Sugg::NonParen(format!(\"({})\", sugg).into())\n+                Sugg::NonParen(format!(\"({sugg})\").into())\n             },\n         }\n     }\n@@ -379,20 +379,18 @@ fn binop_to_string(op: AssocOp, lhs: &str, rhs: &str) -> String {\n         | AssocOp::Greater\n         | AssocOp::GreaterEqual => {\n             format!(\n-                \"{} {} {}\",\n-                lhs,\n-                op.to_ast_binop().expect(\"Those are AST ops\").to_string(),\n-                rhs\n+                \"{lhs} {} {rhs}\",\n+                op.to_ast_binop().expect(\"Those are AST ops\").to_string()\n             )\n         },\n-        AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n+        AssocOp::Assign => format!(\"{lhs} = {rhs}\"),\n         AssocOp::AssignOp(op) => {\n-            format!(\"{} {}= {}\", lhs, token_kind_to_string(&token::BinOp(op)), rhs)\n+            format!(\"{lhs} {}= {rhs}\", token_kind_to_string(&token::BinOp(op)))\n         },\n-        AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n-        AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n-        AssocOp::DotDotEq => format!(\"{}..={}\", lhs, rhs),\n-        AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n+        AssocOp::As => format!(\"{lhs} as {rhs}\"),\n+        AssocOp::DotDot => format!(\"{lhs}..{rhs}\"),\n+        AssocOp::DotDotEq => format!(\"{lhs}..={rhs}\"),\n+        AssocOp::Colon => format!(\"{lhs}: {rhs}\"),\n     }\n }\n \n@@ -523,7 +521,7 @@ impl<T: Display> Display for ParenHelper<T> {\n /// operators have the same\n /// precedence.\n pub fn make_unop(op: &str, expr: Sugg<'_>) -> Sugg<'static> {\n-    Sugg::MaybeParen(format!(\"{}{}\", op, expr.maybe_par()).into())\n+    Sugg::MaybeParen(format!(\"{op}{}\", expr.maybe_par()).into())\n }\n \n /// Builds the string for `<lhs> <op> <rhs>` adding parenthesis when necessary.\n@@ -744,7 +742,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -758,14 +756,14 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 .map(|l| {\n                     if first {\n                         first = false;\n-                        format!(\"{}\\n\", l)\n+                        format!(\"{l}\\n\")\n                     } else {\n-                        format!(\"{}{}\\n\", indent, l)\n+                        format!(\"{indent}{l}\\n\")\n                     }\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -863,7 +861,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n     pub fn finish(&mut self) -> String {\n         let end_span = Span::new(self.next_pos, self.closure_span.hi(), self.closure_span.ctxt(), None);\n         let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n-        let sugg = format!(\"{}{}\", self.suggestion_start, end_snip);\n+        let sugg = format!(\"{}{end_snip}\", self.suggestion_start);\n         if self.closure_arg_is_type_annotated_double_ref {\n             sugg.replacen('&', \"\", 1)\n         } else {\n@@ -925,7 +923,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                let _ = write!(self.suggestion_start, \"{}&{}\", start_snip, ident_str);\n+                let _ = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -940,7 +938,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, self_expr, ..) if self_expr.hir_id == cmt.hir_id => {\n-                            let _ = write!(self.suggestion_start, \"{}{}\", start_snip, ident_str_with_proj);\n+                            let _ = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -973,9 +971,9 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                                     } else {\n                                         ident_str\n                                     };\n-                                    format!(\"{}{}\", start_snip, ident)\n+                                    format!(\"{start_snip}{ident}\")\n                                 } else {\n-                                    format!(\"{}&{}\", start_snip, ident_str)\n+                                    format!(\"{start_snip}&{ident_str}\")\n                                 };\n                                 self.suggestion_start.push_str(&ident_sugg);\n                                 self.next_pos = span.hi();\n@@ -1042,13 +1040,13 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n                         for item in projections {\n                             if item.kind == ProjectionKind::Deref {\n-                                replacement_str = format!(\"*{}\", replacement_str);\n+                                replacement_str = format!(\"*{replacement_str}\");\n                             }\n                         }\n                     }\n                 }\n \n-                let _ = write!(self.suggestion_start, \"{}{}\", start_snip, replacement_str);\n+                let _ = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n             }\n             self.next_pos = span.hi();\n         }"}, {"sha": "0f98860167010aeba5bb8d57df47eed942534b8a", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -48,8 +48,8 @@ impl std::fmt::Display for VersionInfo {\n         if (hash_trimmed.len() + date_trimmed.len()) > 0 {\n             write!(\n                 f,\n-                \"{} {}.{}.{} ({} {})\",\n-                self.crate_name, self.major, self.minor, self.patch, hash_trimmed, date_trimmed,\n+                \"{} {}.{}.{} ({hash_trimmed} {date_trimmed})\",\n+                self.crate_name, self.major, self.minor, self.patch,\n             )?;\n         } else {\n             write!(f, \"{} {}.{}.{}\", self.crate_name, self.major, self.minor, self.patch)?;\n@@ -153,7 +153,7 @@ mod test {\n     #[test]\n     fn test_debug_local() {\n         let vi = get_version_info!();\n-        let s = format!(\"{:?}\", vi);\n+        let s = format!(\"{vi:?}\");\n         assert_eq!(\n             s,\n             \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 2, patch: 0 }\""}, {"sha": "330460ff8a5d99b5a9e40018f0f056d228c8bd59", "filename": "tests/integration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d0e8cabaec24b564db8420ef630c6a5880688f/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0e8cabaec24b564db8420ef630c6a5880688f/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=59d0e8cabaec24b564db8420ef630c6a5880688f", "patch": "@@ -9,7 +9,7 @@ use std::process::Command;\n #[cfg_attr(feature = \"integration\", test)]\n fn integration_test() {\n     let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n-    let repo_url = format!(\"https://github.com/{}\", repo_name);\n+    let repo_url = format!(\"https://github.com/{repo_name}\");\n     let crate_name = repo_name\n         .split('/')\n         .nth(1)\n@@ -83,7 +83,7 @@ fn integration_test() {\n \n     match output.status.code() {\n         Some(0) => println!(\"Compilation successful\"),\n-        Some(code) => eprintln!(\"Compilation failed. Exit code: {}\", code),\n+        Some(code) => eprintln!(\"Compilation failed. Exit code: {code}\"),\n         None => panic!(\"Process terminated by signal\"),\n     }\n }"}]}