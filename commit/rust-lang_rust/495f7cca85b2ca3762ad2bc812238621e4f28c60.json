{"sha": "495f7cca85b2ca3762ad2bc812238621e4f28c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NWY3Y2NhODViMmNhMzc2MmFkMmJjODEyMjM4NjIxZTRmMjhjNjA=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-01-19T18:38:50Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-01-19T18:47:31Z"}, "message": "BTreeMap: compile-test all borrowing interfaces and test more chaotic order", "tree": {"sha": "69f5b19bf31a72228a4a7b10086255f0de4dba88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f5b19bf31a72228a4a7b10086255f0de4dba88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495f7cca85b2ca3762ad2bc812238621e4f28c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495f7cca85b2ca3762ad2bc812238621e4f28c60", "html_url": "https://github.com/rust-lang/rust/commit/495f7cca85b2ca3762ad2bc812238621e4f28c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495f7cca85b2ca3762ad2bc812238621e4f28c60/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09fb488f70c5965ec4f64453a6e681fbfcff56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "html_url": "https://github.com/rust-lang/rust/commit/f09fb488f70c5965ec4f64453a6e681fbfcff56c"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "ba5a4442f56e6e0ab2c27a236dc8a8501ac907a2", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/495f7cca85b2ca3762ad2bc812238621e4f28c60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f7cca85b2ca3762ad2bc812238621e4f28c60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=495f7cca85b2ca3762ad2bc812238621e4f28c60", "patch": "@@ -777,7 +777,7 @@ fn test_range_backwards_4() {\n \n #[test]\n #[should_panic]\n-fn test_range_backwards_5() {\n+fn test_range_finding_ill_order_in_map() {\n     let mut map = BTreeMap::new();\n     map.insert(Cyclic3::B, ());\n     // Lacking static_assert, call `range` conditionally, to emphasise that\n@@ -788,6 +788,47 @@ fn test_range_backwards_5() {\n     }\n }\n \n+#[test]\n+#[should_panic]\n+fn test_range_finding_ill_order_in_range_ord() {\n+    // Has proper order the first time asked, then flips around.\n+    struct EvilTwin(i32);\n+\n+    impl PartialOrd for EvilTwin {\n+        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+            Some(self.cmp(other))\n+        }\n+    }\n+\n+    static COMPARES: AtomicUsize = AtomicUsize::new(0);\n+    impl Ord for EvilTwin {\n+        fn cmp(&self, other: &Self) -> Ordering {\n+            let ord = self.0.cmp(&other.0);\n+            if COMPARES.fetch_add(1, SeqCst) > 0 { ord.reverse() } else { ord }\n+        }\n+    }\n+\n+    impl PartialEq for EvilTwin {\n+        fn eq(&self, other: &Self) -> bool {\n+            self.0.eq(&other.0)\n+        }\n+    }\n+\n+    impl Eq for EvilTwin {}\n+\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+    struct CompositeKey(i32, EvilTwin);\n+\n+    impl Borrow<EvilTwin> for CompositeKey {\n+        fn borrow(&self) -> &EvilTwin {\n+            &self.1\n+        }\n+    }\n+\n+    let map = (0..12).map(|i| (CompositeKey(i, EvilTwin(i)), ())).collect::<BTreeMap<_, _>>();\n+    map.range(EvilTwin(5)..=EvilTwin(7));\n+}\n+\n #[test]\n fn test_range_1000() {\n     // Miri is too slow\n@@ -1222,6 +1263,51 @@ fn test_borrow() {\n         map.insert(Rc::new(0), 1);\n         assert_eq!(map[&0], 1);\n     }\n+\n+    #[allow(dead_code)]\n+    fn get<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn get_mut<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get_mut(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn get_key_value<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.get_key_value(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn contains_key<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: &T) {\n+        v.contains_key(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn range<T: Ord>(v: &BTreeMap<Box<T>, ()>, t: T) {\n+        v.range(t..);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn range_mut<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: T) {\n+        v.range_mut(t..);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn remove<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.remove(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn remove_entry<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.remove_entry(t);\n+    }\n+\n+    #[allow(dead_code)]\n+    fn split_off<T: Ord>(v: &mut BTreeMap<Box<T>, ()>, t: &T) {\n+        v.split_off(t);\n+    }\n }\n \n #[test]"}]}