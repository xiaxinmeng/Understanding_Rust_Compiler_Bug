{"sha": "259c4bec3f28d4d5accc500a0182b2d3ef858618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OWM0YmVjM2YyOGQ0ZDVhY2NjNTAwYTAxODJiMmQzZWY4NTg2MTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:36:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:36:44Z"}, "message": "rollup merge of #20281: dgiagio/libregex_deprecated_fix1\n\nFixes #20280", "tree": {"sha": "28d2589b9799eacbb4c253562089a740d3c9082e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d2589b9799eacbb4c253562089a740d3c9082e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259c4bec3f28d4d5accc500a0182b2d3ef858618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259c4bec3f28d4d5accc500a0182b2d3ef858618", "html_url": "https://github.com/rust-lang/rust/commit/259c4bec3f28d4d5accc500a0182b2d3ef858618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259c4bec3f28d4d5accc500a0182b2d3ef858618/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e787fb9d3de1caeceb6f2623052484a5c2b568ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e787fb9d3de1caeceb6f2623052484a5c2b568ca", "html_url": "https://github.com/rust-lang/rust/commit/e787fb9d3de1caeceb6f2623052484a5c2b568ca"}, {"sha": "f33ec5ead7166eddfac356f0d9a8607ffd27da8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33ec5ead7166eddfac356f0d9a8607ffd27da8e", "html_url": "https://github.com/rust-lang/rust/commit/f33ec5ead7166eddfac356f0d9a8607ffd27da8e"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "17521ff7ea54bb9ebcdaf01e6298451bdb21e68e", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/259c4bec3f28d4d5accc500a0182b2d3ef858618/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259c4bec3f28d4d5accc500a0182b2d3ef858618/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=259c4bec3f28d4d5accc500a0182b2d3ef858618", "patch": "@@ -11,6 +11,7 @@\n \n use std::rand::{Rng, thread_rng};\n use stdtest::Bencher;\n+use std::iter::repeat;\n \n use regex::{Regex, NoExpand};\n \n@@ -22,38 +23,38 @@ fn bench_assert_match(b: &mut Bencher, re: Regex, text: &str) {\n fn no_exponential(b: &mut Bencher) {\n     let n = 100;\n     let re = Regex::new(format!(\"{}{}\",\n-                                \"a?\".repeat(n),\n-                                \"a\".repeat(n)).as_slice()).unwrap();\n-    let text = \"a\".repeat(n);\n+                                repeat(\"a?\").take(n).collect::<String>(),\n+                                repeat(\"a\").take(n).collect::<String>()).as_slice()).unwrap();\n+    let text = repeat(\"a\").take(n).collect::<String>();\n     bench_assert_match(b, re, text.as_slice());\n }\n \n #[bench]\n fn literal(b: &mut Bencher) {\n     let re = regex!(\"y\");\n-    let text = format!(\"{}y\", \"x\".repeat(50));\n+    let text = format!(\"{}y\", repeat(\"x\").take(50).collect::<String>());\n     bench_assert_match(b, re, text.as_slice());\n }\n \n #[bench]\n fn not_literal(b: &mut Bencher) {\n     let re = regex!(\".y\");\n-    let text = format!(\"{}y\", \"x\".repeat(50));\n+    let text = format!(\"{}y\", repeat(\"x\").take(50).collect::<String>());\n     bench_assert_match(b, re, text.as_slice());\n }\n \n #[bench]\n fn match_class(b: &mut Bencher) {\n     let re = regex!(\"[abcdw]\");\n-    let text = format!(\"{}w\", \"xxxx\".repeat(20));\n+    let text = format!(\"{}w\", repeat(\"xxxx\").take(20).collect::<String>());\n     bench_assert_match(b, re, text.as_slice());\n }\n \n #[bench]\n fn match_class_in_range(b: &mut Bencher) {\n     // 'b' is between 'a' and 'c', so the class range checking doesn't help.\n     let re = regex!(\"[ac]\");\n-    let text = format!(\"{}c\", \"bbbb\".repeat(20));\n+    let text = format!(\"{}c\", repeat(\"bbbb\").take(20).collect::<String>());\n     bench_assert_match(b, re, text.as_slice());\n }\n \n@@ -77,7 +78,7 @@ fn anchored_literal_short_non_match(b: &mut Bencher) {\n #[bench]\n fn anchored_literal_long_non_match(b: &mut Bencher) {\n     let re = regex!(\"^zbc(d|e)\");\n-    let text = \"abcdefghijklmnopqrstuvwxyz\".repeat(15);\n+    let text = repeat(\"abcdefghijklmnopqrstuvwxyz\").take(15).collect::<String>();\n     b.iter(|| re.is_match(text.as_slice()));\n }\n \n@@ -91,7 +92,7 @@ fn anchored_literal_short_match(b: &mut Bencher) {\n #[bench]\n fn anchored_literal_long_match(b: &mut Bencher) {\n     let re = regex!(\"^.bc(d|e)\");\n-    let text = \"abcdefghijklmnopqrstuvwxyz\".repeat(15);\n+    let text = repeat(\"abcdefghijklmnopqrstuvwxyz\").take(15).collect::<String>();\n     b.iter(|| re.is_match(text.as_slice()));\n }\n "}]}