{"sha": "d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzM2RiNmVkNTcwYTM4ZmE1MmQ4ZmRmMjlkYmFkOWE1Y2RmNGM0NGQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-08T12:27:40Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-08T12:27:40Z"}, "message": "Rename HirMap to HirEntryMap and add some comments", "tree": {"sha": "4b2f3cbd75f86e1857c4395c982b9eb0b9ede486", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2f3cbd75f86e1857c4395c982b9eb0b9ede486"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "html_url": "https://github.com/rust-lang/rust/commit/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5a0111be33f8abdd649bbce896dd7dafd76f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5a0111be33f8abdd649bbce896dd7dafd76f44", "html_url": "https://github.com/rust-lang/rust/commit/df5a0111be33f8abdd649bbce896dd7dafd76f44"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "136d683e76b483abc2af87c4d7a7fa02d957ebb9", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n use crate::hir;\n-use crate::hir::map::HirMap;\n+use crate::hir::map::HirEntryMap;\n use crate::hir::def_id::{LOCAL_CRATE, CrateNum};\n use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc_data_structures::svh::Svh;\n@@ -28,7 +28,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     source_map: &'a SourceMap,\n \n     /// The node map\n-    map: HirMap<'hir>,\n+    map: HirEntryMap<'hir>,\n     /// The parent of this node\n     parent_node: hir::HirId,\n \n@@ -178,7 +178,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                                                   crate_disambiguator: CrateDisambiguator,\n                                                   cstore: &dyn CrateStore,\n                                                   commandline_args_hash: u64)\n-                                                  -> (HirMap<'hir>, Svh)\n+                                                  -> (HirEntryMap<'hir>, Svh)\n     {\n         self.hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n "}, {"sha": "c2b513a39a8b7b520bc0f8e325dcde04eca3f6e6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d33db6ed570a38fa52d8fdf29dbad9a5cdf4c44d", "patch": "@@ -162,7 +162,12 @@ impl Forest {\n     }\n }\n \n-pub(super) type HirMap<'hir> = [Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>; 2];\n+/// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n+/// but is implemented by 3 layers of arrays.\n+/// - the outer layer is `[A; 2]` and correspond to the 2 address spaces `DefIndex`es can be in\n+/// - then we have `A = Vec<Option<B>>` mapping a `DefIndex`'s index to a inner value\n+/// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which finally gives you the `Entry`.\n+pub(super) type HirEntryMap<'hir> = [Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>; 2];\n \n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n@@ -177,7 +182,7 @@ pub struct Map<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n-    map: HirMap<'hir>,\n+    map: HirEntryMap<'hir>,\n \n     definitions: &'hir Definitions,\n \n@@ -1011,15 +1016,25 @@ impl<'hir> Map<'hir> {\n \n     /// Returns an iterator that yields all the hir ids in the map.\n     fn all_ids<'a>(&'a self) -> impl Iterator<Item = HirId> + 'a {\n+        // This code is a bit awkward because the map is implemented as 3 levels of arrays,\n+        // see the comment on `HirEntryMap`.\n         let map = &self.map;\n+\n+        // Look at both the def index address spaces\n         let spaces = [DefIndexAddressSpace::Low, DefIndexAddressSpace::High].iter().cloned();\n         spaces.flat_map(move |space| {\n-            map[space.index()].iter().enumerate().filter_map(|(i, local_map)| {\n+            // Iterate over all the indices in the address space and return a reference to\n+            // local maps and their index given that they exist.\n+            let local_maps = map[space.index()].iter().enumerate().filter_map(|(i, local_map)| {\n                 local_map.as_ref().map(|m| (i, m))\n-            }).flat_map(move |(def_index, local_map)| {\n+            });\n+\n+            local_maps.flat_map(move |(array_index, local_map)| {\n+                // Iterate over each valid entry in the local map\n                 local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n+                    // Reconstruct the HirId based on the 3 indices we used to find it\n                     HirId {\n-                        owner: DefIndex::from_array_index(def_index, space),\n+                        owner: DefIndex::from_array_index(array_index, space),\n                         local_id: i,\n                     }\n                 }))"}]}