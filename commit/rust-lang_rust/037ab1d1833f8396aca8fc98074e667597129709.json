{"sha": "037ab1d1833f8396aca8fc98074e667597129709", "node_id": "C_kwDOAAsO6NoAKDAzN2FiMWQxODMzZjgzOTZhY2E4ZmM5ODA3NGU2Njc1OTcxMjk3MDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-14T16:25:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-05T11:32:13Z"}, "message": "Remove generics_def_id_map from the resolver.", "tree": {"sha": "a62b408ccaafeb834eba334a00cdc33554e29477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a62b408ccaafeb834eba334a00cdc33554e29477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037ab1d1833f8396aca8fc98074e667597129709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037ab1d1833f8396aca8fc98074e667597129709", "html_url": "https://github.com/rust-lang/rust/commit/037ab1d1833f8396aca8fc98074e667597129709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037ab1d1833f8396aca8fc98074e667597129709/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f0c3f79a85329dd79a54694ff8a7f427c842e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "html_url": "https://github.com/rust-lang/rust/commit/84f0c3f79a85329dd79a54694ff8a7f427c842e9"}], "stats": {"total": 97, "additions": 39, "deletions": 58}, "files": [{"sha": "175209b2c233c10ab2cee9d88feda381650e8838", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=037ab1d1833f8396aca8fc98074e667597129709", "patch": "@@ -85,6 +85,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),\n             allow_gen_future: Some([sym::gen_future][..].into()),\n             allow_into_future: Some([sym::into_future][..].into()),\n+            generics_def_id_map: Default::default(),\n         };\n         lctx.with_hir_id_owner(owner, |lctx| f(lctx));\n "}, {"sha": "4b63d74dd92b08732cd25096e48112183d41f85e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 38, "deletions": 45, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=037ab1d1833f8396aca8fc98074e667597129709", "patch": "@@ -132,6 +132,12 @@ struct LoweringContext<'a, 'hir> {\n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n     allow_into_future: Option<Lrc<[Symbol]>>,\n+\n+    /// Mapping from generics `def_id`s to TAIT generics `def_id`s.\n+    /// For each captured lifetime (e.g., 'a), we create a new lifetime parameter that is a generic\n+    /// defined on the TAIT, so we have type Foo<'a1> = ... and we establish a mapping in this\n+    /// field from the original parameter 'a to the new parameter 'a1.\n+    generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n trait ResolverAstLoweringExt {\n@@ -142,12 +148,6 @@ trait ResolverAstLoweringExt {\n     fn get_lifetime_res(&self, id: NodeId) -> Option<LifetimeRes>;\n     fn take_extra_lifetime_params(&mut self, id: NodeId) -> Vec<(Ident, NodeId, LifetimeRes)>;\n     fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind;\n-    /// Record the map from `from` local def id to `to` local def id, on `generics_def_id_map`\n-    /// field.\n-    fn record_def_id_remap(&mut self, from: LocalDefId, to: LocalDefId);\n-    /// Get the previously recorded `to` local def id given the `from` local def id, obtained using\n-    /// `generics_def_id_map` field.\n-    fn get_remapped_def_id(&self, local_def_id: LocalDefId) -> LocalDefId;\n }\n \n impl ResolverAstLoweringExt for ResolverAstLowering {\n@@ -215,41 +215,6 @@ impl ResolverAstLoweringExt for ResolverAstLowering {\n     fn decl_macro_kind(&self, def_id: LocalDefId) -> MacroKind {\n         self.builtin_macro_kinds.get(&def_id).copied().unwrap_or(MacroKind::Bang)\n     }\n-\n-    /// Push a remapping into the top-most map.\n-    /// Panics if no map has been pushed.\n-    /// Remapping is used when creating lowering `-> impl Trait` return\n-    /// types to create the resulting opaque type.\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn record_def_id_remap(&mut self, from: LocalDefId, to: LocalDefId) {\n-        self.generics_def_id_map.last_mut().expect(\"no map pushed\").insert(from, to);\n-    }\n-\n-    fn get_remapped_def_id(&self, mut local_def_id: LocalDefId) -> LocalDefId {\n-        // `generics_def_id_map` is a stack of mappings. As we go deeper in impl traits nesting we\n-        // push new mappings so we need to try first the latest mappings, hence `iter().rev()`.\n-        //\n-        // Consider:\n-        //\n-        // `fn test<'a, 'b>() -> impl Trait<&'a u8, Ty = impl Sized + 'b> {}`\n-        //\n-        // We would end with a generics_def_id_map like:\n-        //\n-        // `[[fn#'b -> impl_trait#'b], [fn#'b -> impl_sized#'b]]`\n-        //\n-        // for the opaque type generated on `impl Sized + 'b`, We want the result to be:\n-        // impl_sized#'b, so iterating forward is the wrong thing to do.\n-        for map in self.generics_def_id_map.iter().rev() {\n-            if let Some(r) = map.get(&local_def_id) {\n-                debug!(\"def_id_remapper: remapping from `{local_def_id:?}` to `{r:?}`\");\n-                local_def_id = *r;\n-            } else {\n-                debug!(\"def_id_remapper: no remapping for `{local_def_id:?}` found in map\");\n-            }\n-        }\n-\n-        local_def_id\n-    }\n }\n \n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,\n@@ -522,13 +487,41 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.resolver\n             .node_id_to_def_id\n             .get(&node)\n-            .map(|local_def_id| self.resolver.get_remapped_def_id(*local_def_id))\n+            .map(|local_def_id| self.get_remapped_def_id(*local_def_id))\n     }\n \n     fn local_def_id(&self, node: NodeId) -> LocalDefId {\n         self.opt_local_def_id(node).unwrap_or_else(|| panic!(\"no entry for node id: `{:?}`\", node))\n     }\n \n+    /// Get the previously recorded `to` local def id given the `from` local def id, obtained using\n+    /// `generics_def_id_map` field.\n+    fn get_remapped_def_id(&self, mut local_def_id: LocalDefId) -> LocalDefId {\n+        // `generics_def_id_map` is a stack of mappings. As we go deeper in impl traits nesting we\n+        // push new mappings so we need to try first the latest mappings, hence `iter().rev()`.\n+        //\n+        // Consider:\n+        //\n+        // `fn test<'a, 'b>() -> impl Trait<&'a u8, Ty = impl Sized + 'b> {}`\n+        //\n+        // We would end with a generics_def_id_map like:\n+        //\n+        // `[[fn#'b -> impl_trait#'b], [fn#'b -> impl_sized#'b]]`\n+        //\n+        // for the opaque type generated on `impl Sized + 'b`, We want the result to be:\n+        // impl_sized#'b, so iterating forward is the wrong thing to do.\n+        for map in self.generics_def_id_map.iter().rev() {\n+            if let Some(r) = map.get(&local_def_id) {\n+                debug!(\"def_id_remapper: remapping from `{local_def_id:?}` to `{r:?}`\");\n+                local_def_id = *r;\n+            } else {\n+                debug!(\"def_id_remapper: no remapping for `{local_def_id:?}` found in map\");\n+            }\n+        }\n+\n+        local_def_id\n+    }\n+\n     /// Freshen the `LoweringContext` and ready it to lower a nested item.\n     /// The lowered item is registered into `self.children`.\n     ///\n@@ -597,9 +590,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         remap: FxHashMap<LocalDefId, LocalDefId>,\n         f: impl FnOnce(&mut Self) -> R,\n     ) -> R {\n-        self.resolver.generics_def_id_map.push(remap);\n+        self.generics_def_id_map.push(remap);\n         let res = f(self);\n-        self.resolver.generics_def_id_map.pop();\n+        self.generics_def_id_map.pop();\n         res\n     }\n \n@@ -2024,7 +2017,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let name = match res {\n             LifetimeRes::Param { param, .. } => {\n                 let p_name = ParamName::Plain(ident);\n-                let param = self.resolver.get_remapped_def_id(param);\n+                let param = self.get_remapped_def_id(param);\n \n                 hir::LifetimeName::Param(param, p_name)\n             }"}, {"sha": "8235a05fb53f1e0bd41a6e0420c304b8d80f1b10", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=037ab1d1833f8396aca8fc98074e667597129709", "patch": "@@ -178,11 +178,6 @@ pub struct ResolverAstLowering {\n     pub label_res_map: NodeMap<ast::NodeId>,\n     /// Resolutions for lifetimes.\n     pub lifetimes_res_map: NodeMap<LifetimeRes>,\n-    /// Mapping from generics `def_id`s to TAIT generics `def_id`s.\n-    /// For each captured lifetime (e.g., 'a), we create a new lifetime parameter that is a generic\n-    /// defined on the TAIT, so we have type Foo<'a1> = ... and we establish a mapping in this\n-    /// field from the original parameter 'a to the new parameter 'a1.\n-    pub generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n     /// Lifetime parameters that lowering will have to introduce.\n     pub extra_lifetime_params_map: NodeMap<Vec<(Ident, ast::NodeId, LifetimeRes)>>,\n "}, {"sha": "aaa9ae6f32513cc639378f7a704d04e27d25ec46", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037ab1d1833f8396aca8fc98074e667597129709/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=037ab1d1833f8396aca8fc98074e667597129709", "patch": "@@ -911,11 +911,6 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n     /// Resolutions for lifetimes.\n     lifetimes_res_map: NodeMap<LifetimeRes>,\n-    /// Mapping from generics `def_id`s to TAIT generics `def_id`s.\n-    /// For each captured lifetime (e.g., 'a), we create a new lifetime parameter that is a generic\n-    /// defined on the TAIT, so we have type Foo<'a1> = ... and we establish a mapping in this\n-    /// field from the original parameter 'a to the new parameter 'a1.\n-    generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n     /// Lifetime parameters that lowering will have to introduce.\n     extra_lifetime_params_map: NodeMap<Vec<(Ident, NodeId, LifetimeRes)>>,\n \n@@ -1278,7 +1273,6 @@ impl<'a> Resolver<'a> {\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n             lifetimes_res_map: Default::default(),\n-            generics_def_id_map: Vec::new(),\n             extra_lifetime_params_map: Default::default(),\n             extern_crate_map: Default::default(),\n             reexport_map: FxHashMap::default(),\n@@ -1445,7 +1439,6 @@ impl<'a> Resolver<'a> {\n             import_res_map: self.import_res_map,\n             label_res_map: self.label_res_map,\n             lifetimes_res_map: self.lifetimes_res_map,\n-            generics_def_id_map: self.generics_def_id_map,\n             extra_lifetime_params_map: self.extra_lifetime_params_map,\n             next_node_id: self.next_node_id,\n             node_id_to_def_id: self.node_id_to_def_id,\n@@ -1490,7 +1483,6 @@ impl<'a> Resolver<'a> {\n             import_res_map: self.import_res_map.clone(),\n             label_res_map: self.label_res_map.clone(),\n             lifetimes_res_map: self.lifetimes_res_map.clone(),\n-            generics_def_id_map: self.generics_def_id_map.clone(),\n             extra_lifetime_params_map: self.extra_lifetime_params_map.clone(),\n             next_node_id: self.next_node_id.clone(),\n             node_id_to_def_id: self.node_id_to_def_id.clone(),"}]}