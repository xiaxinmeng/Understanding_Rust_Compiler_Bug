{"sha": "ab42ba4f54d2be62f271bad44f065d1814d17d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDJiYTRmNTRkMmJlNjJmMjcxYmFkNDRmMDY1ZDE4MTRkMTdkNGE=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2018-12-27T16:27:42Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2018-12-30T07:23:38Z"}, "message": "Implement use_self for tuple structs", "tree": {"sha": "ba8d624b85c0c21c88d597469d394bc4bc513dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8d624b85c0c21c88d597469d394bc4bc513dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab42ba4f54d2be62f271bad44f065d1814d17d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab42ba4f54d2be62f271bad44f065d1814d17d4a", "html_url": "https://github.com/rust-lang/rust/commit/ab42ba4f54d2be62f271bad44f065d1814d17d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab42ba4f54d2be62f271bad44f065d1814d17d4a/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3dcdc3aad5527049c6cfcfae8bd3d697c26447", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3dcdc3aad5527049c6cfcfae8bd3d697c26447", "html_url": "https://github.com/rust-lang/rust/commit/0f3dcdc3aad5527049c6cfcfae8bd3d697c26447"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "fb71352a795cf558ec690b2ba940a22030fcf463", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab42ba4f54d2be62f271bad44f065d1814d17d4a/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42ba4f54d2be62f271bad44f065d1814d17d4a/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=ab42ba4f54d2be62f271bad44f065d1814d17d4a", "patch": "@@ -9,6 +9,7 @@\n \n use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::def::{CtorKind, Def};\n use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -30,8 +31,7 @@ use syntax_pos::symbol::keywords::SelfUpper;\n /// - False positive when using associated types (#2843)\n /// - False positives in some situations when using generics (#3410)\n /// - False positive when type from outer function can't be used (#3463)\n-/// - Does not diagnose tuple structs (#3498)\n-/// - Does not trigger in lifetimed struct\n+/// - Does not trigger in lifetimed structs\n ///\n /// **Example:**\n /// ```rust\n@@ -232,10 +232,15 @@ struct UseSelfVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n-        if self.item_path.def == path.def && path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n-            span_use_self_lint(self.cx, path);\n+        if path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n+            if self.item_path.def == path.def {\n+                span_use_self_lint(self.cx, path);\n+            } else if let Def::StructCtor(ctor_did, CtorKind::Fn) = path.def {\n+                if self.item_path.def.opt_def_id() == self.cx.tcx.parent_def_id(ctor_did) {\n+                    span_use_self_lint(self.cx, path);\n+                }\n+            }\n         }\n-\n         walk_path(self, path);\n     }\n "}, {"sha": "450278f2ed90af9fde8c79dd44c9b32e13dc5c55", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab42ba4f54d2be62f271bad44f065d1814d17d4a/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42ba4f54d2be62f271bad44f065d1814d17d4a/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=ab42ba4f54d2be62f271bad44f065d1814d17d4a", "patch": "@@ -216,6 +216,16 @@ mod existential {\n     }\n }\n \n+mod tuple_structs {\n+    pub struct TS(i32);\n+\n+    impl TS {\n+        pub fn ts() -> Self {\n+            TS(0)\n+        }\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;"}, {"sha": "7ef4737dc69662bbb3b0adcc1e6a9e5eb2b624ac", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab42ba4f54d2be62f271bad44f065d1814d17d4a/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab42ba4f54d2be62f271bad44f065d1814d17d4a/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=ab42ba4f54d2be62f271bad44f065d1814d17d4a", "patch": "@@ -126,5 +126,11 @@ error: unnecessary structure name repetition\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 21 previous errors\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:224:13\n+    |\n+224 |             TS(0)\n+    |             ^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 22 previous errors\n "}]}