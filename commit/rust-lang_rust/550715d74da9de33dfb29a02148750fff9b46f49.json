{"sha": "550715d74da9de33dfb29a02148750fff9b46f49", "node_id": "C_kwDOAAsO6NoAKDU1MDcxNWQ3NGRhOWRlMzNkZmIyOWEwMjE0ODc1MGZmZjliNDZmNDk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-03T11:49:31Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-03T11:53:17Z"}, "message": "`HirId` for `deferred_transmute_checks`", "tree": {"sha": "201f346c32fc35b2baa2076a2054d031fd72a0cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201f346c32fc35b2baa2076a2054d031fd72a0cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550715d74da9de33dfb29a02148750fff9b46f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550715d74da9de33dfb29a02148750fff9b46f49", "html_url": "https://github.com/rust-lang/rust/commit/550715d74da9de33dfb29a02148750fff9b46f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550715d74da9de33dfb29a02148750fff9b46f49/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a", "html_url": "https://github.com/rust-lang/rust/commit/6b139c5b3e2bad623bdbd8583bc4f2b0f763113a"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "b9459887c4617d460673bdc39b88aef63a6bf034", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=550715d74da9de33dfb29a02148750fff9b46f49", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // been resolved or we errored. This is important as we can only check transmute\n                 // on concrete types, but the output type may not be known yet (it would only\n                 // be known if explicitly specified via turbofish).\n-                self.deferred_transmute_checks.borrow_mut().push((from, to, expr.span));\n+                self.deferred_transmute_checks.borrow_mut().push((from, to, expr.hir_id));\n             }\n             if !tcx.features().unsized_fn_params {\n                 // We want to remove some Sized bounds from std functions,"}, {"sha": "44d7973d6320463cc5739a53adfbe39e35345b34", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=550715d74da9de33dfb29a02148750fff9b46f49", "patch": "@@ -50,8 +50,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_transmutes(&self) {\n         let mut deferred_transmute_checks = self.deferred_transmute_checks.borrow_mut();\n         debug!(\"FnCtxt::check_transmutes: {} deferred checks\", deferred_transmute_checks.len());\n-        for (from, to, span) in deferred_transmute_checks.drain(..) {\n-            self.check_transmute(span, from, to);\n+        for (from, to, hir_id) in deferred_transmute_checks.drain(..) {\n+            self.check_transmute(from, to, hir_id);\n         }\n     }\n "}, {"sha": "2546227e138583fbb625b8d9fd51d45fe4d598cb", "filename": "compiler/rustc_hir_analysis/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs?ref=550715d74da9de33dfb29a02148750fff9b46f49", "patch": "@@ -55,7 +55,7 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) deferred_cast_checks: RefCell<Vec<super::cast::CastCheck<'tcx>>>,\n \n-    pub(super) deferred_transmute_checks: RefCell<Vec<(Ty<'tcx>, Ty<'tcx>, Span)>>,\n+    pub(super) deferred_transmute_checks: RefCell<Vec<(Ty<'tcx>, Ty<'tcx>, hir::HirId)>>,\n \n     pub(super) deferred_asm_checks: RefCell<Vec<(&'tcx hir::InlineAsm<'tcx>, hir::HirId)>>,\n "}, {"sha": "13a800304158b269dddade5a7566e958085a2f6a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550715d74da9de33dfb29a02148750fff9b46f49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=550715d74da9de33dfb29a02148750fff9b46f49", "patch": "@@ -1,3 +1,4 @@\n+use hir::HirId;\n use rustc_ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -6,7 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n use rustc_session::lint;\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_span::{Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n use rustc_target::asm::{InlineAsmReg, InlineAsmRegClass, InlineAsmRegOrRegClass, InlineAsmType};\n \n@@ -40,11 +41,13 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {\n+    pub fn check_transmute(&self, from: Ty<'tcx>, to: Ty<'tcx>, hir_id: HirId) {\n+        let tcx = self.tcx;\n+        let span = tcx.hir().span(hir_id);\n         let convert = |ty: Ty<'tcx>| {\n             let ty = self.resolve_vars_if_possible(ty);\n-            let ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n-            (SizeSkeleton::compute(ty, self.tcx, self.param_env), ty)\n+            let ty = tcx.normalize_erasing_regions(self.param_env, ty);\n+            (SizeSkeleton::compute(ty, tcx, self.param_env), ty)\n         };\n         let (sk_from, from) = convert(from);\n         let (sk_to, to) = convert(to);\n@@ -57,9 +60,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Special-case transmuting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n-            let from = unpack_option_like(self.tcx, from);\n-            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer.size(&self.tcx) {\n-                struct_span_err!(self.tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n+            let from = unpack_option_like(tcx, from);\n+            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer.size(&tcx) {\n+                struct_span_err!(tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n                     .note(&format!(\"source type: {from}\"))\n                     .note(&format!(\"target type: {to}\"))\n                     .help(\"cast with `as` to a pointer instead\")\n@@ -83,7 +86,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let mut err = struct_span_err!(\n-            self.tcx.sess,\n+            tcx.sess,\n             span,\n             E0512,\n             \"cannot transmute between types of different sizes, \\"}]}