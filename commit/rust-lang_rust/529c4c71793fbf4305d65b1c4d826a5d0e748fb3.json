{"sha": "529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "node_id": "C_kwDOAAsO6NoAKDUyOWM0YzcxNzkzZmJmNDMwNWQ2NWIxYzRkODI2YTVkMGU3NDhmYjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-18T02:31:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-18T02:31:53Z"}, "message": "Auto merge of #98216 - JohnTitor:rollup-jlcmu5d, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97803 (Impl Termination for Infallible and then make the Result impls of Termination more generic)\n - #97828 (Allow configuring where artifacts are downloaded from)\n - #98150 (Emscripten target: replace -g4 with -g, and -g3 with --profiling-funcs)\n - #98195 (Fix rustdoc json primitive handling)\n - #98205 (Remove a possible unnecessary assignment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c664ffacedafda3463ae5b25e0975387a1f3b9c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c664ffacedafda3463ae5b25e0975387a1f3b9c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "html_url": "https://github.com/rust-lang/rust/commit/529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf100597cc6986d5ebd005d58a9394dd6edef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf100597cc6986d5ebd005d58a9394dd6edef4d", "html_url": "https://github.com/rust-lang/rust/commit/aaf100597cc6986d5ebd005d58a9394dd6edef4d"}, {"sha": "f514aa4c077ceb5da675048c82d2db4564322826", "url": "https://api.github.com/repos/rust-lang/rust/commits/f514aa4c077ceb5da675048c82d2db4564322826", "html_url": "https://github.com/rust-lang/rust/commit/f514aa4c077ceb5da675048c82d2db4564322826"}], "stats": {"total": 280, "additions": 172, "deletions": 108}, "files": [{"sha": "ee097b5f05199298a611404def3a9f686f8bbdae", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -1134,8 +1134,8 @@ impl<'a> Linker for EmLinker<'a> {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n             DebugInfo::None => \"-g0\",\n-            DebugInfo::Limited => \"-g3\",\n-            DebugInfo::Full => \"-g4\",\n+            DebugInfo::Limited => \"--profiling-funcs\",\n+            DebugInfo::Full => \"-g\",\n         });\n     }\n "}, {"sha": "c830ab11e8e6e3ba7c958892b2756da3498a5a12", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -316,8 +316,6 @@ fn check_item<'tcx>(\n         item.kind\n     {\n         if !access_levels.is_reachable(item.def_id) {\n-            // FIXME(#53488) remove `let`\n-            let tcx = tcx;\n             worklist.extend(items.iter().map(|ii_ref| ii_ref.id.def_id));\n \n             let Res::Def(DefKind::Trait, trait_def_id) = trait_ref.path.res else {"}, {"sha": "da8eee9030b908bfd975bfb08af9e12ef15f94de", "filename": "library/std/src/process.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -2140,16 +2140,6 @@ impl Termination for () {\n     }\n }\n \n-#[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-impl<E: fmt::Debug> Termination for Result<(), E> {\n-    fn report(self) -> ExitCode {\n-        match self {\n-            Ok(()) => ().report(),\n-            Err(err) => Err::<!, _>(err).report(),\n-        }\n-    }\n-}\n-\n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n impl Termination for ! {\n     fn report(self) -> ExitCode {\n@@ -2158,28 +2148,31 @@ impl Termination for ! {\n }\n \n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-impl<E: fmt::Debug> Termination for Result<!, E> {\n+impl Termination for Infallible {\n     fn report(self) -> ExitCode {\n-        let Err(err) = self;\n-        // Ignore error if the write fails, for example because stderr is\n-        // already closed. There is not much point panicking at this point.\n-        let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n-        ExitCode::FAILURE\n+        match self {}\n     }\n }\n \n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n+impl Termination for ExitCode {\n+    #[inline]\n     fn report(self) -> ExitCode {\n-        let Err(err) = self;\n-        Err::<!, _>(err).report()\n+        self\n     }\n }\n \n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-impl Termination for ExitCode {\n-    #[inline]\n+impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n     fn report(self) -> ExitCode {\n-        self\n+        match self {\n+            Ok(val) => val.report(),\n+            Err(err) => {\n+                // Ignore error if the write fails, for example because stderr is\n+                // already closed. There is not much point panicking at this point.\n+                let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n+                ExitCode::FAILURE\n+            }\n+        }\n     }\n }"}, {"sha": "3b2b507b062371a3c8e68d285cfd5d7d4d9ac5aa", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -1043,7 +1043,7 @@ def bootstrap(help_triggered):\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n \n-    build.set_dist_environment(data[\"dist_server\"])\n+    build.set_dist_environment(data[\"config\"][\"dist_server\"])\n \n     build.build = args.build or build.build_triple()\n "}, {"sha": "7b74c5ccdbb0e2ebc5f48a9573f1dfa6005733b4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -870,20 +870,23 @@ impl<'a> Builder<'a> {\n         self.try_run(patchelf.arg(fname));\n     }\n \n-    pub(crate) fn download_component(\n-        &self,\n-        base: &str,\n-        url: &str,\n-        dest_path: &Path,\n-        help_on_error: &str,\n-    ) {\n+    pub(crate) fn download_component(&self, url: &str, dest_path: &Path, help_on_error: &str) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n-        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n+        // While bootstrap itself only supports http and https downloads, downstream forks might\n+        // need to download components from other protocols. The match allows them adding more\n+        // protocols without worrying about merge conficts if we change the HTTP implementation.\n+        match url.split_once(\"://\").map(|(proto, _)| proto) {\n+            Some(\"http\") | Some(\"https\") => {\n+                self.download_http_with_retries(&tempfile, url, help_on_error)\n+            }\n+            Some(other) => panic!(\"unsupported protocol {other} in {url}\"),\n+            None => panic!(\"no protocol in {url}\"),\n+        }\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n \n-    fn download_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n+    fn download_http_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n         println!(\"downloading {}\", url);\n         // Try curl. If that fails and we are on windows, fallback to PowerShell.\n         let mut curl = Command::new(\"curl\");"}, {"sha": "14607741932ea3521edafd6d797d672860f51033", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -20,7 +20,6 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, output, program_out_of_date, t};\n-use crate::RustfmtMetadata;\n use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n \n@@ -73,6 +72,7 @@ pub struct Config {\n     pub test_compare_mode: bool,\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n+    pub stage0_metadata: Stage0Metadata,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -212,6 +212,28 @@ pub struct Config {\n     pub out: PathBuf,\n }\n \n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct Stage0Metadata {\n+    pub config: Stage0Config,\n+    pub checksums_sha256: HashMap<String, String>,\n+    pub rustfmt: Option<RustfmtMetadata>,\n+}\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct Stage0Config {\n+    pub dist_server: String,\n+    pub artifacts_server: String,\n+    pub artifacts_with_llvm_assertions_server: String,\n+    pub git_merge_commit_email: String,\n+}\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct RustfmtMetadata {\n+    pub date: String,\n+    pub version: String,\n+}\n+\n #[derive(Clone, Debug)]\n pub enum RustfmtState {\n     SystemToolchain(PathBuf),\n@@ -776,6 +798,9 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n+        let stage0_json = t!(std::fs::read(&config.src.join(\"src\").join(\"stage0.json\")));\n+        config.stage0_metadata = t!(serde_json::from_slice::<Stage0Metadata>(&stage0_json));\n+\n         #[cfg(test)]\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n@@ -1103,8 +1128,11 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc_commit =\n-                download_ci_rustc_commit(rust.download_rustc, config.verbose > 0);\n+            config.download_rustc_commit = download_ci_rustc_commit(\n+                &config.stage0_metadata,\n+                rust.download_rustc,\n+                config.verbose > 0,\n+            );\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1424,7 +1452,11 @@ fn threads_from_config(v: u32) -> u32 {\n }\n \n /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n-fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool) -> Option<String> {\n+fn download_ci_rustc_commit(\n+    stage0_metadata: &Stage0Metadata,\n+    download_rustc: Option<StringOrBool>,\n+    verbose: bool,\n+) -> Option<String> {\n     // If `download-rustc` is not set, default to rebuilding.\n     let if_unchanged = match download_rustc {\n         None | Some(StringOrBool::Bool(false)) => return None,\n@@ -1443,13 +1475,12 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n \n     // Look for a version to compare to based on the current commit.\n     // Only commits merged by bors will have CI artifacts.\n-    let merge_base = output(Command::new(\"git\").args(&[\n-        \"rev-list\",\n-        \"--author=bors@rust-lang.org\",\n-        \"-n1\",\n-        \"--first-parent\",\n-        \"HEAD\",\n-    ]));\n+    let merge_base = output(\n+        Command::new(\"git\")\n+            .arg(\"rev-list\")\n+            .arg(format!(\"--author={}\", stage0_metadata.config.git_merge_commit_email))\n+            .args(&[\"-n1\", \"--first-parent\", \"HEAD\"]),\n+    );\n     let commit = merge_base.trim_end();\n     if commit.is_empty() {\n         println!(\"error: could not find commit hash for downloading rustc\");\n@@ -1484,7 +1515,7 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n }\n \n fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n-    let RustfmtMetadata { date, version } = builder.stage0_metadata.rustfmt.as_ref()?;\n+    let RustfmtMetadata { date, version } = builder.config.stage0_metadata.rustfmt.as_ref()?;\n     let channel = format!(\"{version}-{date}\");\n \n     let host = builder.config.build;\n@@ -1568,13 +1599,13 @@ fn download_component(\n     let tarball = cache_dir.join(&filename);\n     let (base_url, url, should_verify) = match mode {\n         DownloadSource::CI => (\n-            \"https://ci-artifacts.rust-lang.org/rustc-builds\".to_string(),\n+            builder.config.stage0_metadata.config.artifacts_server.clone(),\n             format!(\"{key}/{filename}\"),\n             false,\n         ),\n         DownloadSource::Dist => {\n             let dist_server = env::var(\"RUSTUP_DIST_SERVER\")\n-                .unwrap_or(builder.stage0_metadata.dist_server.to_string());\n+                .unwrap_or(builder.config.stage0_metadata.config.dist_server.to_string());\n             // NOTE: make `dist` part of the URL because that's how it's stored in src/stage0.json\n             (dist_server, format!(\"dist/{key}/{filename}\"), true)\n         }\n@@ -1590,7 +1621,7 @@ fn download_component(\n             target at this time, see https://doc.rust-lang.org/nightly\\\n             /rustc/platform-support.html for more information.\"\n         );\n-        let sha256 = builder.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n+        let sha256 = builder.config.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n         if tarball.exists() {\n             if builder.verify(&tarball, sha256) {\n                 builder.unpack(&tarball, &bin_root, prefix);\n@@ -1610,7 +1641,7 @@ fn download_component(\n         None\n     };\n \n-    builder.download_component(&base_url, &url, &tarball, \"\");\n+    builder.download_component(&format!(\"{base_url}/{url}\"), &tarball, \"\");\n     if let Some(sha256) = checksum {\n         if !builder.verify(&tarball, sha256) {\n             panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "49096426a9826946b098f44931b82363061cb0a0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -118,7 +118,6 @@ use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n-use serde::Deserialize;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n@@ -294,8 +293,6 @@ pub struct Build {\n     hosts: Vec<TargetSelection>,\n     targets: Vec<TargetSelection>,\n \n-    // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n-    stage0_metadata: Stage0Metadata,\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n     initial_lld: PathBuf,\n@@ -322,18 +319,6 @@ pub struct Build {\n     metrics: metrics::BuildMetrics,\n }\n \n-#[derive(Deserialize)]\n-struct Stage0Metadata {\n-    dist_server: String,\n-    checksums_sha256: HashMap<String, String>,\n-    rustfmt: Option<RustfmtMetadata>,\n-}\n-#[derive(Deserialize)]\n-struct RustfmtMetadata {\n-    date: String,\n-    version: String,\n-}\n-\n #[derive(Debug)]\n struct Crate {\n     name: Interned<String>,\n@@ -482,11 +467,7 @@ impl Build {\n             bootstrap_out\n         };\n \n-        let stage0_json = t!(std::fs::read_to_string(&src.join(\"src\").join(\"stage0.json\")));\n-        let stage0_metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n-\n         let mut build = Build {\n-            stage0_metadata,\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             initial_lld,"}, {"sha": "329bb68672ee64bf24dad0acd98f9a0b6e26d0d3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let mut rev_list = Command::new(\"git\");\n     rev_list.args(&[\n         PathBuf::from(\"rev-list\"),\n-        \"--author=bors@rust-lang.org\".into(),\n+        format!(\"--author={}\", builder.config.stage0_metadata.config.git_merge_commit_email).into(),\n         \"-n1\".into(),\n         \"--first-parent\".into(),\n         \"HEAD\".into(),\n@@ -170,11 +170,10 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     if !rustc_cache.exists() {\n         t!(fs::create_dir_all(&rustc_cache));\n     }\n-    let base = \"https://ci-artifacts.rust-lang.org\";\n-    let url = if llvm_assertions {\n-        format!(\"rustc-builds-alt/{}\", llvm_sha)\n+    let base = if llvm_assertions {\n+        &builder.config.stage0_metadata.config.artifacts_with_llvm_assertions_server\n     } else {\n-        format!(\"rustc-builds/{}\", llvm_sha)\n+        &builder.config.stage0_metadata.config.artifacts_server\n     };\n     let filename = format!(\"rust-dev-nightly-{}.tar.xz\", builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n@@ -187,7 +186,11 @@ help: if trying to compile an old commit of rustc, disable `download-ci-llvm` in\n [llvm]\n download-ci-llvm = false\n \";\n-        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball, help_on_error);\n+        builder.download_component(\n+            &format!(\"{base}/{llvm_sha}/{filename}\"),\n+            &tarball,\n+            help_on_error,\n+        );\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n     builder.unpack(&tarball, &llvm_root, \"rust-dev\");"}, {"sha": "c7251b51152876a829ebd6dd9d450364343b37bb", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -201,7 +201,8 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n                 types::ItemEnum::Method(_)\n                 | types::ItemEnum::AssocConst { .. }\n-                | types::ItemEnum::AssocType { .. } => true,\n+                | types::ItemEnum::AssocType { .. }\n+                | types::ItemEnum::PrimitiveType(_) => true,\n                 types::ItemEnum::Module(_)\n                 | types::ItemEnum::ExternCrate { .. }\n                 | types::ItemEnum::Import(_)\n@@ -216,8 +217,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 | types::ItemEnum::Static(_)\n                 | types::ItemEnum::ForeignType\n                 | types::ItemEnum::Macro(_)\n-                | types::ItemEnum::ProcMacro(_)\n-                | types::ItemEnum::PrimitiveType(_) => false,\n+                | types::ItemEnum::ProcMacro(_) => false,\n             };\n             let removed = self\n                 .index"}, {"sha": "b6b502f4cf0cbefa998eac2b7cb17d0b88d8f42d", "filename": "src/stage0.json", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -1,6 +1,20 @@\n {\n-  \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n-  \"dist_server\": \"https://static.rust-lang.org\",\n+  \"config\": {\n+    \"dist_server\": \"https://static.rust-lang.org\",\n+    \"artifacts_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds\",\n+    \"artifacts_with_llvm_assertions_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds-alt\",\n+    \"git_merge_commit_email\": \"bors@rust-lang.org\"\n+  },\n+  \"__comments\": [\n+    \"The configuration above this comment is editable, and can be changed\",\n+    \"by forks of the repository if they have alternate values.\",\n+    \"\",\n+    \"The section below is generated by `./x.py run src/tools/bump-stage0`,\",\n+    \"run that command again to update the bootstrap compiler.\",\n+    \"\",\n+    \"All changes below this comment will be overridden the next time the\",\n+    \"tool is executed.\"\n+  ],\n   \"compiler\": {\n     \"date\": \"2022-05-20\",\n     \"version\": \"beta\""}, {"sha": "a10d5a83795c7764bf1b7068dd6b4c1967a24b19", "filename": "src/test/rustdoc-json/primitive_overloading.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: --document-private-items\n+\n+// Regression test for <https://github.com/rust-lang/rust/issues/98006>.\n+\n+#![feature(rustdoc_internals)]\n+#![feature(no_core)]\n+\n+#![no_core]\n+\n+// @has primitive_overloading.json\n+// @has - \"$.index[*][?(@.name=='usize')]\"\n+// @has - \"$.index[*][?(@.name=='prim')]\"\n+\n+#[doc(primitive = \"usize\")]\n+/// This is the built-in type `usize`.\n+mod prim {\n+}"}, {"sha": "6086723b5c464740a357fcffa3972c9f097a2c7a", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `main` has invalid return type `Result<f32, ParseFloatError>`\n+error[E0277]: `main` has invalid return type `f32`\n   --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n LL |   #[test]\n@@ -8,11 +8,8 @@ LL | |     \"0\".parse()\n LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n    |\n-   = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n-   = help: the following other types implement trait `Termination`:\n-             Result<!, E>\n-             Result<(), E>\n-             Result<Infallible, E>\n+   = help: the trait `Termination` is not implemented for `f32`\n+   = note: required because of the requirements on the impl of `Termination` for `Result<f32, ParseFloatError>`\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n    |"}, {"sha": "1c839fdc00a08c79dde63cc086747214b068632e", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c4c71793fbf4305d65b1c4d826a5d0e748fb3/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=529c4c71793fbf4305d65b1c4d826a5d0e748fb3", "patch": "@@ -4,11 +4,14 @@ use indexmap::IndexMap;\n use std::collections::HashMap;\n use std::convert::TryInto;\n \n-const DIST_SERVER: &str = \"https://static.rust-lang.org\";\n+const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];\n const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\"];\n \n struct Tool {\n+    config: Config,\n+    comments: Vec<String>,\n+\n     channel: Channel,\n     version: [u16; 3],\n     checksums: IndexMap<String, String>,\n@@ -32,26 +35,33 @@ impl Tool {\n             .try_into()\n             .map_err(|_| anyhow::anyhow!(\"failed to parse version\"))?;\n \n-        Ok(Self { channel, version, checksums: IndexMap::new() })\n+        let existing: Stage0 = serde_json::from_slice(&std::fs::read(PATH)?)?;\n+\n+        Ok(Self {\n+            channel,\n+            version,\n+            config: existing.config,\n+            comments: existing.comments,\n+            checksums: IndexMap::new(),\n+        })\n     }\n \n     fn update_json(mut self) -> Result<(), Error> {\n         std::fs::write(\n-            \"src/stage0.json\",\n+            PATH,\n             format!(\n                 \"{}\\n\",\n                 serde_json::to_string_pretty(&Stage0 {\n-                    comment: \"Generated by `./x.py run src/tools/bump-stage0`. \\\n-                              Run that command again to update the bootstrap compiler.\",\n-                    dist_server: DIST_SERVER.into(),\n                     compiler: self.detect_compiler()?,\n                     rustfmt: self.detect_rustfmt()?,\n                     checksums_sha256: {\n                         // Keys are sorted here instead of beforehand because values in this map\n                         // are added while filling the other struct fields just above this block.\n                         self.checksums.sort_keys();\n                         self.checksums\n-                    }\n+                    },\n+                    config: self.config,\n+                    comments: self.comments,\n                 })?\n             ),\n         )?;\n@@ -74,7 +84,7 @@ impl Tool {\n             Channel::Nightly => \"beta\".to_string(),\n         };\n \n-        let manifest = fetch_manifest(&channel)?;\n+        let manifest = fetch_manifest(&self.config, &channel)?;\n         self.collect_checksums(&manifest, COMPILER_COMPONENTS)?;\n         Ok(Stage0Toolchain {\n             date: manifest.date,\n@@ -100,13 +110,13 @@ impl Tool {\n             return Ok(None);\n         }\n \n-        let manifest = fetch_manifest(\"nightly\")?;\n+        let manifest = fetch_manifest(&self.config, \"nightly\")?;\n         self.collect_checksums(&manifest, RUSTFMT_COMPONENTS)?;\n         Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n     }\n \n     fn collect_checksums(&mut self, manifest: &Manifest, components: &[&str]) -> Result<(), Error> {\n-        let prefix = format!(\"{}/\", DIST_SERVER);\n+        let prefix = format!(\"{}/\", self.config.dist_server);\n         for component in components {\n             let pkg = manifest\n                 .pkg\n@@ -136,10 +146,10 @@ fn main() -> Result<(), Error> {\n     Ok(())\n }\n \n-fn fetch_manifest(channel: &str) -> Result<Manifest, Error> {\n+fn fetch_manifest(config: &Config, channel: &str) -> Result<Manifest, Error> {\n     Ok(toml::from_slice(&http_get(&format!(\n         \"{}/dist/channel-rust-{}.toml\",\n-        DIST_SERVER, channel\n+        config.dist_server, channel\n     ))?)?)\n }\n \n@@ -166,35 +176,52 @@ enum Channel {\n     Nightly,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0 {\n-    #[serde(rename = \"__comment\")]\n-    comment: &'static str,\n-    dist_server: String,\n+    config: Config,\n+    // Comments are explicitly below the config, do not move them above.\n+    //\n+    // Downstream forks of the compiler codebase can change the configuration values defined above,\n+    // but doing so would risk merge conflicts whenever they import new changes that include a\n+    // bootstrap compiler bump.\n+    //\n+    // To lessen the pain, a big block of comments is placed between the configuration and the\n+    // auto-generated parts of the file, preventing git diffs of the config to include parts of the\n+    // auto-generated content and vice versa. This should prevent merge conflicts.\n+    #[serde(rename = \"__comments\")]\n+    comments: Vec<String>,\n     compiler: Stage0Toolchain,\n     rustfmt: Option<Stage0Toolchain>,\n     checksums_sha256: IndexMap<String, String>,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n+struct Config {\n+    dist_server: String,\n+    artifacts_server: String,\n+    artifacts_with_llvm_assertions_server: String,\n+    git_merge_commit_email: String,\n+}\n+\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0Toolchain {\n     date: String,\n     version: String,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Manifest {\n     date: String,\n     pkg: HashMap<String, ManifestPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestPackage {\n     version: String,\n     target: HashMap<String, ManifestTargetPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestTargetPackage {\n     url: Option<String>,\n     hash: Option<String>,"}]}