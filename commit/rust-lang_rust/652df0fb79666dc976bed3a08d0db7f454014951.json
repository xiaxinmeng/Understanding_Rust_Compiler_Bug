{"sha": "652df0fb79666dc976bed3a08d0db7f454014951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmRmMGZiNzk2NjZkYzk3NmJlZDNhMDhkMGRiN2Y0NTQwMTQ5NTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-07T13:41:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-07T13:41:54Z"}, "message": "Differentiate between mutable iteration and immutable iteration in `needless_range_loop`", "tree": {"sha": "0b8976063af04c7d51f640d24f6af453f755c867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8976063af04c7d51f640d24f6af453f755c867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652df0fb79666dc976bed3a08d0db7f454014951", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloBuCIACgkQpp+NIls6\n19nVXg/+M2ygbD2pwOoq2PL2yL/Zpq+GRoB4W4c4y7uzngQYa57DSL2M2PJHwPK+\n7FiN+hEkJIeZ9hksj685R1GH8wxwU1qR6smSHAf9mA5AaADALEFiXO2LOMSOyXY8\nijrHNJvxDrsNWJrZihStp4P9AbkMV+5Z1MMXAlX8OM2SL1EpeKcNoF/J29sfPDOh\nWMSWdoyeU8093N+noEEMIVoT3J1OPJVd3n33BtAP2WHcs7R3o0+uj62g3LODyYPV\nPgKcWDLScpay1agb6vxLD7CI42mU/FamBmjjXM8DlqjbdPPEuZNyXyjxzHI11itp\n3Pneg6ymjxjfp2DnKplhHAQz8t+l4n78EXdpMunN55wasyvpBh6E2hzFK+0qqiZZ\nxz74bCyQXGWReG5De2Y58tgHIKvDQ2IIZoAgp9I1LSOIgzXiOHGJlLxa1gnzBygx\nyczuWMtKF0XJ23N4ZKd1Z5Yq+vfoKQjIV68Ngwvpvn9tb47jvMfRV9zGMlq3/15h\neXbQZtMjkznqJmQonbUx2lK9SrFdBdwSeTuAx5iQebiQkXpkaFkwACywOMf4nygO\nPoztfAj2EkwRJ00pzpwLy40sZLipEhUOHjmbIiag3wSVulh6gmb1fq3sUNgycGQC\nv1t+UK9qIIzVFBpIlywuHMGU9Iw/CugcKZEJwJ06sCvp9uD9+t8=\n=hnzh\n-----END PGP SIGNATURE-----", "payload": "tree 0b8976063af04c7d51f640d24f6af453f755c867\nparent 088555c4ead9a9194ab7d055c7abdee31db4e17b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510062114 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510062114 +0100\n\nDifferentiate between mutable iteration and immutable iteration in `needless_range_loop`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652df0fb79666dc976bed3a08d0db7f454014951", "html_url": "https://github.com/rust-lang/rust/commit/652df0fb79666dc976bed3a08d0db7f454014951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652df0fb79666dc976bed3a08d0db7f454014951/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088555c4ead9a9194ab7d055c7abdee31db4e17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088555c4ead9a9194ab7d055c7abdee31db4e17b", "html_url": "https://github.com/rust-lang/rust/commit/088555c4ead9a9194ab7d055c7abdee31db4e17b"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "ecaa64c8724cb527d9e7a3db1d0b5caba094b7e8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/652df0fb79666dc976bed3a08d0db7f454014951/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652df0fb79666dc976bed3a08d0db7f454014951/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=652df0fb79666dc976bed3a08d0db7f454014951", "patch": "@@ -952,10 +952,12 @@ fn check_for_loop_range<'a, 'tcx>(\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: canonical_id,\n+                indexed_mut: HashSet::new(),\n                 indexed: HashMap::new(),\n                 indexed_directly: HashMap::new(),\n                 referenced: HashSet::new(),\n                 nonindex: false,\n+                prefer_mutable: false,\n             };\n             walk_expr(&mut visitor, body);\n \n@@ -1009,6 +1011,12 @@ fn check_for_loop_range<'a, 'tcx>(\n                     \"\".to_owned()\n                 };\n \n+                let (ref_mut, method) = if visitor.indexed_mut.contains(&indexed) {\n+                    (\"mut \", \"iter_mut\")\n+                } else {\n+                    (\"\", \"iter\")\n+                };\n+\n                 if visitor.nonindex {\n                     span_lint_and_then(\n                         cx,\n@@ -1021,16 +1029,16 @@ fn check_for_loop_range<'a, 'tcx>(\n                                 \"consider using an iterator\".to_string(),\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.node)),\n-                                    (arg.span, format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip)),\n+                                    (arg.span, format!(\"{}.{}().enumerate(){}{}\", indexed, method, take, skip)),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n-                        format!(\"&{}\", indexed)\n+                        format!(\"&{}{}\", ref_mut, indexed)\n                     } else {\n-                        format!(\"{}.iter(){}{}\", indexed, take, skip)\n+                        format!(\"{}.{}(){}{}\", indexed, method, take, skip)\n                     };\n \n                     span_lint_and_then(\n@@ -1537,6 +1545,8 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     /// var name to look for as index\n     var: ast::NodeId,\n+    /// indexed variables that are used mutably\n+    indexed_mut: HashSet<Name>,\n     /// indexed variables, the extend is `None` for global\n     indexed: HashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n@@ -1548,6 +1558,9 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     /// has the loop variable been used in expressions other than the index of\n     /// an index op?\n     nonindex: bool,\n+    /// Whether we are inside the `$` in `&mut $` or `$ = foo` or `$.bar`, where bar\n+    /// takes `&mut self`\n+    prefer_mutable: bool,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n@@ -1572,6 +1585,9 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 };\n \n                 if index_used {\n+                    if self.prefer_mutable {\n+                        self.indexed_mut.insert(seqvar.segments[0].name);\n+                    }\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n                         Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n@@ -1615,8 +1631,47 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-\n-        walk_expr(self, expr);\n+        let old = self.prefer_mutable;\n+        match expr.node {\n+            ExprAssignOp(_, ref lhs, ref rhs) |\n+            ExprAssign(ref lhs, ref rhs) => {\n+                self.prefer_mutable = true;\n+                self.visit_expr(lhs);\n+                self.prefer_mutable = false;\n+                self.visit_expr(rhs);\n+            },\n+            ExprAddrOf(mutbl, ref expr) => {\n+                if mutbl == MutMutable {\n+                    self.prefer_mutable = true;\n+                }\n+                self.visit_expr(expr);\n+            },\n+            ExprCall(ref f, ref args) => {\n+                for (ty, expr) in self.cx.tables.expr_ty(f).fn_sig(self.cx.tcx).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            ExprMethodCall(_, _, ref args) => {\n+                let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n+                for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            _ => walk_expr(self, expr),\n+        }\n+        self.prefer_mutable = old;\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None"}, {"sha": "6f1e5f53ce203534cb7fb5c535e3382c46d68a02", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/652df0fb79666dc976bed3a08d0db7f454014951/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652df0fb79666dc976bed3a08d0db7f454014951/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=652df0fb79666dc976bed3a08d0db7f454014951", "patch": "@@ -24,4 +24,17 @@ fn main() {\n     for i in 3..10 {\n         println!(\"{}\", ns[calc_idx(i) % 4]);\n     }\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        ms[i] *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        let x = &mut ms[i];\n+        *x *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n }"}, {"sha": "9b6be856b857deb5f13fb50303b3a1d10d6f5d55", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/652df0fb79666dc976bed3a08d0db7f454014951/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652df0fb79666dc976bed3a08d0db7f454014951/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=652df0fb79666dc976bed3a08d0db7f454014951", "patch": "@@ -12,3 +12,30 @@ help: consider using an iterator\n 8  |     for <item> in ns.iter().take(10).skip(3) {\n    |         ^^^^^^\n \n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:29:5\n+   |\n+29 | /     for i in 0..ms.len() {\n+30 | |         ms[i] *= 2;\n+31 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+29 |     for <item> in &mut ms {\n+   |         ^^^^^^\n+\n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:35:5\n+   |\n+35 | /     for i in 0..ms.len() {\n+36 | |         let x = &mut ms[i];\n+37 | |         *x *= 2;\n+38 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+35 |     for <item> in &mut ms {\n+   |         ^^^^^^\n+"}]}